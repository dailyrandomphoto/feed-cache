<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Advantages of using Fish shell üêü </title>
      <author>Mina Tafreshi</author>
      <pubDate>Tue, 24 Nov 2020 10:27:04 +0000</pubDate>
      <link>https://dev.to/minatafreshi/advantages-of-using-fish-shell-3fjd</link>
      <guid>https://dev.to/minatafreshi/advantages-of-using-fish-shell-3fjd</guid>
      <description>&lt;h3&gt;
  &lt;a href="#as-a-short-definition" class="anchor"&gt;
  &lt;/a&gt;
  As a short definition:
&lt;/h3&gt;

&lt;p&gt;Fish is a smart and user-friendly command-line shell for Linux, macOS, and the rest of the family. I've been using &lt;a href="https://ohmyz.sh/"&gt;zsh&lt;/a&gt; and some other bunch of shells for many years but recently, I upgrade my hardware and I got a chance to taste the &lt;a href="http://fishshell.com/"&gt;Fish&lt;/a&gt;. Additionally, I've to say that I'm not planning to go back and I encourage others to use and experiment with Fish.&lt;br&gt;
There are so many advantages about using fish as default shell which can improve your experiences of using shells like:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-autosuggestion" class="anchor"&gt;
  &lt;/a&gt;
  1. Autosuggestion
&lt;/h2&gt;

&lt;p&gt;The main reason that I moved to the fish shell is autosuggestions. Fish suggest commands as you type based on history and completions just like a web browser. There is an open-source autosuggestion plugin for &lt;a href="https://github.com/zsh-users/zsh-autosuggestions"&gt;zsh&lt;/a&gt; which is implemented like fish autosuggestion and it can be a good reason to try the original one! Fish will show wrong and invalid commands in red if you mistype the command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bQtMvVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvzjvug8gd6r1xblekpo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bQtMvVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvzjvug8gd6r1xblekpo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-web-interface" class="anchor"&gt;
  &lt;/a&gt;
  2. Web Interface
&lt;/h2&gt;

&lt;p&gt;Another amazing feature of Fish is that you can configure it as a web interface running on your local server. Also, the web interface allows for the modification of the color scheme that you want with beautiful color pallets. It also lets you browse your environment variables too. Additionally, you can find terminal keybindings, the beauty of command prompt and you can also see your command line history!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwEOxK1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fe7vht8bcqrz0wl23j8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwEOxK1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fe7vht8bcqrz0wl23j8e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-obvious-error-messages" class="anchor"&gt;
  &lt;/a&gt;
  3. Obvious error messages
&lt;/h2&gt;

&lt;p&gt;When you screw up, Fish tells the errors and your fault plus the way that you can handle it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-upshot" class="anchor"&gt;
  &lt;/a&gt;
  The upshot
&lt;/h3&gt;

&lt;p&gt;Fish is so powerful and useful for a user who uses other shells like zsh, bash, and so on and wants to try a new and advantageous shell.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Responsive Images - A Reference Guide from A to Z</title>
      <author>Manu Chaudhary</author>
      <pubDate>Tue, 24 Nov 2020 06:26:15 +0000</pubDate>
      <link>https://dev.to/manu4543/responsive-images-a-reference-guide-from-a-to-z-30aa</link>
      <guid>https://dev.to/manu4543/responsive-images-a-reference-guide-from-a-to-z-30aa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#chapter-1-what-is-responsive-images" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 1 - What is responsive images?
&lt;/h2&gt;

&lt;p&gt;In this guide, we will learn everything related to responsive images along with sample code. Basic knowledge of HTML and CSS is required to understand the concepts discussed here. After you finish reading, you will know the latest tools &amp;amp; techniques to implement responsive images correctly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Responsive images are the set of techniques used to load the right image based on device resolution, orientation, screen size, network connection, and page layout. The browser should not stretch the image to fit the page layout, and loading it shouldn‚Äôt result in time &amp;amp; bandwidth wastage. It improves user experience as images load fast and look crisp to the human eye.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#quick-example-of-the-responsive-images-in-html" class="anchor"&gt;
  &lt;/a&gt;
  Quick example of the responsive images in HTML
&lt;/h2&gt;

&lt;p&gt;The best way to understand responsive images is with a quick example. For simplicity, we will load a 2200px wide image on different devices. Everything else remains the same except the viewport size.&lt;/p&gt;

&lt;p&gt;The markup would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- The width of the orignal image is 2200px --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b8Qr82rb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/different-device-image-loading_0JWHR54wa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b8Qr82rb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/different-device-image-loading_0JWHR54wa.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For desktop (iMac), the image is optimal because the width of the viewport and image matches.&lt;/p&gt;

&lt;p&gt;However, in mobile, as we can see, the viewport is only 375 CSS pixels wide. The same is valid for the tablet. The viewport is only 1024 CSS pixels wide. We are wasting time and bandwidth downloading this overly large file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-happening" class="anchor"&gt;
  &lt;/a&gt;
  What‚Äôs happening?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DzqUazDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/responsive-images-basic_-JpFBXzZ2.png%3Ftr%3Dw-1400%2Cf-png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzqUazDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/responsive-images-basic_-JpFBXzZ2.png%3Ftr%3Dw-1400%2Cf-png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a simplified version of responsive images in action. üôå&lt;/p&gt;

&lt;p&gt;We used &lt;code&gt;srcset&lt;/code&gt; (source set) to provide the browser with three different size images. The browser picked the right option based on the actual viewport size of the device. We will soon discover more about &lt;code&gt;srcset&lt;/code&gt; and other options in great detail.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that we are still using the old &lt;code&gt;src&lt;/code&gt; attribute as a fallback if the browser doesn‚Äôt support the &lt;code&gt;srcset&lt;/code&gt; attribute. As of Oct 2020, all browsers support &lt;code&gt;srcset&lt;/code&gt; except Opera mini and IE.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#chapter-2-why-do-we-need-responsive-images" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 2 - Why do we need responsive images?
&lt;/h2&gt;

&lt;p&gt;As you saw in the above example, one size doesn‚Äôt fit all. A responsive design should adapt based on user screen size, pixel density, and device orientation to ensure a great user experience.&lt;/p&gt;

&lt;p&gt;Here are three main reasons why we need to implement responsive images:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Render a high-quality image on different devices&lt;/li&gt;
&lt;li&gt;Loading the right image - Art direction&lt;/li&gt;
&lt;li&gt;Faster loading web pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-render-a-highquality-image-on-different-devices" class="anchor"&gt;
  &lt;/a&gt;
  1. Render a high-quality image on different devices
&lt;/h2&gt;

&lt;p&gt;An image without perceptible artifacts looks crisp and contributes towards a great user experience. This is especially important on retail sites where users expect to view high-resolution closeups of product images to better look at texture &amp;amp; details. &lt;/p&gt;

&lt;p&gt;For an image to look good, it must adapt based on viewport width and screen pixel density. Let‚Äôs understand these:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different viewport width case&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If your layout changes based on the device viewport, the loaded image dimension should match the container CSS/HTML width. If the browser stretches a smaller image to fit the design, the rendered image will look blurred, and if you load a bigger image on a device with small viewport width, it results in bandwidth and time wastage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different pixel density case&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;High-resolution displays have a higher pixel density. This means more pixels in the same amount of physical space. As a result, high-resolution displays demand images with more pixels. In simple terms, a large image is required to fit the same physical image.&lt;/p&gt;



&lt;p&gt;Consider an iPhone8:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS viewport size: 375px by 667px
&lt;/li&gt;
&lt;li&gt;Pixel density: 2
&lt;/li&gt;
&lt;li&gt;Effective device resolution: 750px by 1334px&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It means if we want to render a 100 CSS pixels wide image, we will have to load a 200px wide image for it to look sharp.&lt;/p&gt;

&lt;p&gt;For a device with pixel density 3, we will have to load a 300px wide image.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;However, note that it does not always mean that we have to load a large file size. On a device, with DPR (device pixel ratio) 2, a 2x wide image with low-quality (50) will look better than a 1x wide image with high-quality(90). Despite being similar in terms of file-size, the 2x image will give a sharper appearance. You can &lt;a href="https://imagekit.io/how-to-show-high-quality-e-commerce-product-images/"&gt;learn more&lt;/a&gt; about this technique.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-loading-the-right-image-art-direction" class="anchor"&gt;
  &lt;/a&gt;
  2. Loading the right image - Art direction
&lt;/h2&gt;

&lt;p&gt;When a large image is resized to fit a small area, it can lose its relevance, usefulness, and legibility. The most important part might get cropped. &lt;/p&gt;

&lt;p&gt;For example, consider this screenshot of a dashboard on a product landing page. It is highlighting different elements of the user interface to a potential user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nYL9wvQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/screenshot-desktop_T6JakuDWz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nYL9wvQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/screenshot-desktop_T6JakuDWz.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the desktop, the above image is perfect. However, if we downscale the same image to fit a mobile viewport, we are losing many essential elements of the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cumCW0Gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/screenshot-mobile_G_jAuf4fb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cumCW0Gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/screenshot-mobile_G_jAuf4fb.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, an altogether different image might have been more appropriate, for example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JChZzDF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/screenshot-mobile-1_OukK3jT_X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JChZzDF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/screenshot-mobile-1_OukK3jT_X.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is called &lt;strong&gt;art direction&lt;/strong&gt;. By "art directing", you can explicitly decide which image should be shown based on the image's size on the page. We will cover this technique in more detail soon.&lt;/p&gt;

&lt;p&gt;You can also use this to show different images in a mobile device based on orientation - landscape vs portrait mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-faster-loading-web-pages" class="anchor"&gt;
  &lt;/a&gt;
  3. Faster loading web pages
&lt;/h2&gt;

&lt;p&gt;According to the HTTP archive data, 64% of a website‚Äôs page weight, on an average, is made up of images. With mobile traffic surpassing desktop traffic, it has become even more crucial to optimize images for different device sizes.&lt;/p&gt;

&lt;p&gt;Ideally, you would like to serve images that are resized to match the user‚Äôs viewport dimensions. Without a means to do this, you will have to send an overly large image to all users. This means that the user on a mobile device with a small viewport width has to download that extra data, which slows down the page load. This is a wastage of time, bandwidth, and money and degrades the overall user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chapter-3-how-to-make-images-responsive" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 3 - How to make images responsive?
&lt;/h2&gt;

&lt;p&gt;There are many methods for implementing responsive images. We have come a long way from using hacky javascript based solutions to having native support in modern browsers.&lt;/p&gt;

&lt;p&gt;In this chapter, we will cover the latest methods for implementing responsive images.&lt;/p&gt;

&lt;p&gt;Let‚Äôs have a quick comparison before discussing each of these techniques in more details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Srcset&lt;/li&gt;
&lt;li&gt;Srcset with sizes&lt;/li&gt;
&lt;li&gt;Picture element&lt;/li&gt;
&lt;li&gt;Client-hints&lt;/li&gt;
&lt;li&gt;Responsive images in CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;When to use&lt;/th&gt;
&lt;th&gt;Markup complexity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Using srcset&lt;/td&gt;
&lt;td&gt;For fixed-size images that take roughly whole viewport width, e.g., full-width promotional banner.&lt;/td&gt;
&lt;td&gt;Simple&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Using srcset + sizes&lt;/td&gt;
&lt;td&gt;For flexible images. When the layout &amp;amp; image size changes based on the viewport width. For e.g., a three-column layout on desktop vs a two-column layout on the mobile device.&lt;/td&gt;
&lt;td&gt;Slightly complex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Using picture element&lt;/td&gt;
&lt;td&gt;When you want to load an entirely different image based on screen size i.e. &lt;strong&gt;art direction&lt;/strong&gt;. Or you want to use the latest image formats like &lt;code&gt;webp&lt;/code&gt; or &lt;code&gt;avif&lt;/code&gt; on a supported device.&lt;/td&gt;
&lt;td&gt;Highly complex.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Using client-hints&lt;/td&gt;
&lt;td&gt;When you don‚Äôt want to make major changes in the HTML markup.&lt;/td&gt;
&lt;td&gt;No major code change&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Responsive images in CSS&lt;/td&gt;
&lt;td&gt;When you are loading images via CSS styles as a background image.&lt;/td&gt;
&lt;td&gt;Simple&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#chapter-4-srcset" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 4 - Srcset
&lt;/h2&gt;

&lt;p&gt;The standard &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag allows us to define a single image source. As a web developer, it becomes our responsibility to make sure that the right source is defined. But since we don‚Äôt have all the information about the device beforehand, it becomes tricky to create a bulletproof markup that loads optimal images for all resolutions.&lt;/p&gt;

&lt;p&gt;Remember the little conversation between a web developer and a browser?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DzqUazDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/responsive-images-basic_-JpFBXzZ2.png%3Ftr%3Dw-1400%2Cf-png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzqUazDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/responsive-images-basic_-JpFBXzZ2.png%3Ftr%3Dw-1400%2Cf-png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;srcset&lt;/code&gt; allows you to define a list of different image resources along with size information so that browser can pick the most appropriate image based on the actual device‚Äôs resolution.&lt;/p&gt;

&lt;p&gt;Each comma-separated item in &lt;code&gt;srcset&lt;/code&gt; has:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Image URL, e.g. &lt;code&gt;http://ik.imagekit.io/demo/default-image.jpg&lt;/code&gt; or relative path &lt;code&gt;/demo/default-image.jpg&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;An empty space&lt;/li&gt;
&lt;li&gt;The actual width of the image or display density:

&lt;ul&gt;
&lt;li&gt;Either using display density descriptor, for example, &lt;code&gt;1.5x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;Or, using width descriptors, for example, &lt;code&gt;450w&lt;/code&gt;. This is the width of the image in pixels.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#using-display-density-descriptor" class="anchor"&gt;
  &lt;/a&gt;
  Using display density descriptor
&lt;/h2&gt;

&lt;p&gt;The syntax for display density descriptors is straightforward. &lt;code&gt;srcset&lt;/code&gt; provides a comma-separated list of image resources along with display density it should be used, for example&lt;code&gt;1x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt; etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg"&lt;/span&gt; 
     &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg,
             image_2x.jpg 2x"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If a display density descriptor isn‚Äôt provided, it is assumed to be &lt;code&gt;1x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo - srcset with density descriptor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs see this in action with a live demo - &lt;a href="https://imagekitio.github.io/responsive-images-guide/srcset-density.html"&gt;https://imagekitio.github.io/responsive-images-guide/srcset-density.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://developers.google.com/web/tools/chrome-devtools/device-mode"&gt;device emulator&lt;/a&gt; in Chrome, at DPR 1, the image currentSrc is &lt;code&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MKtzq8rZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/srcset-density-demo_9xtjWY-J3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MKtzq8rZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/srcset-density-demo_9xtjWY-J3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, if we consider different DPR values:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;DPR value&lt;/th&gt;
&lt;th&gt;Image picked by browser (currentSrc)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-600"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-600&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-900"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-900&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;When to use display density descriptors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use display density descriptors if your images are of fixed width, and the only thing that varies is display density. It is never that simple though üòâ &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenges in using display density descriptor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As per pixensity.com, there are more than 300 different types of phones, tablets, laptops, and desktop devices with varying screen sizes and display density. &lt;/p&gt;

&lt;p&gt;The critical question becomes, do you want to track different display densities available, for example, 1x, 1.5x, 2x, 2.5x, 3x 4x, etc. More often, you will need to go beyond taking care of display density, so this method won‚Äôt be sufficient. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-width-descriptor" class="anchor"&gt;
  &lt;/a&gt;
  Using width descriptor
&lt;/h2&gt;

&lt;p&gt;The syntax is similar to the display density descriptor, but instead of display density values, we provide the actual width of the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg"&lt;/span&gt; 
     &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 300w,
             medium.jpg 600w,
             large.jpg 900w"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;This lets the browser pick the best image&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using width descriptor allows the browser to pick the best candidate from &lt;code&gt;srcset&lt;/code&gt; based on the actual width needed to render that image on that particular display at runtime. &lt;/p&gt;

&lt;p&gt;Note that display pixel density is also taken into account by the browser while calculating the required width. üòé&lt;/p&gt;

&lt;p&gt;For example, assuming an image takes up the whole viewport width - On a 300px wide screen with DPR 2, the browser will pick &lt;code&gt;medium.jpg&lt;/code&gt; because it needs a 300x2=600px wide image. On a 300px wide screen with DPR value 3, the browser will select &lt;code&gt;large.jpg&lt;/code&gt; because it needs a 300x3=900px wide image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo - srcset with width descriptor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let see this in action with a live demo - &lt;a href="https://imagekitio.github.io/responsive-images-guide/srcset-width.html"&gt;https://imagekitio.github.io/responsive-images-guide/srcset-width.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using the device emulator, let‚Äôs resize the screen to 250px and set DPR at 1. The image loaded in this case is &lt;code&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JdFerxgS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/srcset-width-descriptor-demo_4T81jNSqR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JdFerxgS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/srcset-width-descriptor-demo_4T81jNSqR.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, if we consider combinations with different viewport width and DPR values:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Viewport width&lt;/th&gt;
&lt;th&gt;DPR value&lt;/th&gt;
&lt;th&gt;Final width of the image required (width √ó DPR)&lt;/th&gt;
&lt;th&gt;Image picked by the browser (currentSrc)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;250px&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;250 √ó 1 = 250px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;250px&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;250 √ó 2 = 500px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-600"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-600&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;250px&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;250 √ó 3 = 750px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-900"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-900&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300px&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;300 √ó 1 = 300px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-300&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300px&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;300 √ó 2 = 600px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-600"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-600&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300px&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;300 √ó 3 = 900px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-900"&gt;https://ik.imagekit.io/ikmedia/paddy.jpg?tr=w-900&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Notice how the browser is taking display density and viewport width into account while calculating the required image's final width.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenges-with-using-only-srcset" class="anchor"&gt;
  &lt;/a&gt;
  Challenges with using only srcset
&lt;/h2&gt;

&lt;p&gt;If you are loading a fixed-width image that will take up almost full viewport width, then use &lt;code&gt;srcset&lt;/code&gt; along with width descriptors.&lt;/p&gt;

&lt;p&gt;However, in the below cases using &lt;code&gt;srcset&lt;/code&gt; alone won‚Äôt be sufficient:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you are loading flexible images i.e. when the size of your image changes based on the size of the viewport. For example, a single-column layout on the mobile and a three-column layout on desktop devices will need different dize images.&lt;/li&gt;
&lt;li&gt;Or when the image is only taking a fraction of viewport width. Since the browser is not aware of the layout, it will assume the image will take up the whole viewport width and download a much bigger image than required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wait. What? The browser is not aware of the layout!&lt;/p&gt;

&lt;p&gt;It is logical to think that browser has stylesheets to find our required size of the image element but note that those stylesheets are not parsed yet. If the browser waits till all stylesheets are parsed &amp;amp; executed, it will inevitably delay the downloading of images.&lt;/p&gt;

&lt;p&gt;To understand this better, let‚Äôs first look at how the browser loads a page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-browser-loads-a-webpage-the-old-way" class="anchor"&gt;
  &lt;/a&gt;
  How browser loads a webpage ‚Äî the old way
&lt;/h3&gt;

&lt;p&gt;A web page is made up of text, CSS, JS, and fonts. A lot happens in the background once you hit enter, and a page is finally rendered on your screen.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, the HTML is downloaded, and the browser starts parsing it. If it comes across an external style sheet, it starts downloading it in parallel and continue parsing HTML.&lt;/li&gt;
&lt;li&gt;If it comes across an inline &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags, it pauses the HTML parsing and executes the script right away.&lt;/li&gt;
&lt;li&gt;If it comes across a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag (one without &lt;code&gt;defer&lt;/code&gt; or &lt;code&gt;async&lt;/code&gt; attribute) that points to an external URL, it pauses the HTML parsing and first download and executes that Javascript resource.&lt;/li&gt;
&lt;li&gt;If it comes across an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag, it starts downloading the image resource in parallel and continues parsing HTML.&lt;/li&gt;
&lt;li&gt;Once all blocking external style sheets and Javascript is downloaded, parsed, and executed, the page is rendered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if we have a HTML like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"vendor.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"zoom.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image1.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image2.jpg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;‚Äì the browser loads resources like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--moWKV4sy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/guides/sequential-loading_YL1vzHxKJB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--moWKV4sy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/guides/sequential-loading_YL1vzHxKJB.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pausing the parser whenever a script is encountered results in sub-optimal use of the browser‚Äôs ability to download multiple external resources over the network in parallel. This method is delaying the download of resources required to render the page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#preloaders-or-speculative-parsing-to-rescue-the-new-way" class="anchor"&gt;
  &lt;/a&gt;
  Pre-loaders or speculative parsing to rescue - the new way
&lt;/h3&gt;

&lt;p&gt;Internet Explorer, WebKit, and Mozilla all implemented pre-loaders in 2008 to improve the low network utilization problem that we just discussed. &lt;/p&gt;

&lt;p&gt;Essentially, the idea is that the browser cannot build DOM while executing a script but can still parse the rest of the markup looking for other resources, for example, stylesheets, javascript files, or images that are linked. These files are added to a list and start downloading in the background. By the time all scripts execute and HTML parsing finishes, hopefully, the browser has already downloaded these resources, and there won‚Äôt be any further delay.&lt;/p&gt;

&lt;p&gt;The waterfall chart for the example above now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SD--DpC_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/guides/parallel-download_mNDsx1fm-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SD--DpC_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/guides/parallel-download_mNDsx1fm-.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we understand why &lt;code&gt;srcset&lt;/code&gt; alone is not sufficient for the browser to understand the image's required size. To overcome this problem, we have the &lt;code&gt;sizes&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chapter-5-srcset-with-sizes" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 5 - Srcset with sizes
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;sizes&lt;/code&gt; attribute contains a comma-separated list. Each item in the list describes the size of the image in relation to the viewport.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;sizes&lt;/code&gt; attribute with &lt;code&gt;srcset&lt;/code&gt; provides the browser with enough information to start downloading the right image as soon as it sees an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag in HTML without waiting for styles sheets to complete downloading and parsing. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do we need sizes?&lt;/strong&gt;&lt;br&gt;
If you scrolled here directly and wondering why the browser is not aware of how big the image will render, &lt;a href="#how-browser-loads-a-webpage--the-old-way"&gt;checkout how the browser loads a web page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg"&lt;/span&gt; 
     &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 300w,
             medium.jpg 600w,
             large.jpg 900w"&lt;/span&gt;
     &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw, (max-width: 600px) 50vw, (max-width: 900px) 33vw, 900px"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each comma-separated item in &lt;code&gt;sizes&lt;/code&gt; has:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Media conditions, for example, &lt;code&gt;(max-width: 300px)&lt;/code&gt; - It describes a possible state that the screen can be in. &lt;code&gt;(max-width: 300px)&lt;/code&gt; means when the viewport width is 300 CSS pixels or less. It is similar to media queries but with some limitations. You cannot use &lt;code&gt;screen&lt;/code&gt; or &lt;code&gt;print&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An empty space.&lt;/li&gt;
&lt;li&gt;The width of the image element when the media condition is true. You can provide an absolute length (px, em) or a length relative to the viewport (vw), but not percentages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Demo - srcset with sizes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs see this in action with a live demo - &lt;a href="https://imagekitio.github.io/responsive-images-guide/srcset-sizes.html"&gt;https://imagekitio.github.io/responsive-images-guide/srcset-sizes.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-ZeGQEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/srcset-sizes-demo_AGqVFPTap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-ZeGQEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/srcset-sizes-demo_AGqVFPTap.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The layout is such that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If viewport width is above 900px, each image takes a fix 225px width.&lt;/li&gt;
&lt;li&gt;Upto 900px, each image takes up 33vw i.e. 33% width of total viewport width.&lt;/li&gt;
&lt;li&gt;Upto 700px, each image takes up 50vw i.e. 50% width of total viewport width.&lt;/li&gt;
&lt;li&gt;Upto 400px, each image takes up 100vw i.e. the whole viewport width.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTML markup of a single image element looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://ik.imagekit.io/ikmedia/women-dress-1.jpg"&lt;/span&gt; 
     &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225 225w,
             https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-300 300w,
             https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350 350w,
             https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-640 640w"&lt;/span&gt;
     &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 400px) 100vw, (max-width: 700px) 50vw, (max-width: 900px) 33vw, 225px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let‚Äôs see what happens at different screen size and DPR values -&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Viewport width&lt;/th&gt;
&lt;th&gt;DPR value&lt;/th&gt;
&lt;th&gt;Image size required (width √ó DPR)&lt;/th&gt;
&lt;th&gt;Image picked by the browser (currentSrc)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;350px&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;100vw i.e. 350 √ó 1 = 350px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;350px&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;100vw i.e. 350 √ó 2 = 700px&lt;/td&gt;
&lt;td&gt;Closest candidate is &lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-640"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-640&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;650px&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;50vw i.e. (650/2) √ó 1 = 325px&lt;/td&gt;
&lt;td&gt;Closest candidate is&lt;br&gt;&lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1024px&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;225 √ó 1 = 225px&lt;/td&gt;
&lt;td&gt;&lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1024px&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;225 √ó 2 = 450px&lt;/td&gt;
&lt;td&gt;Closest candidate is &lt;br&gt;&lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#how-to-choose-breakpoints-for-srcset-and-define-sizes" class="anchor"&gt;
  &lt;/a&gt;
  How to choose breakpoints for srcset and define sizes?
&lt;/h2&gt;

&lt;p&gt;When implementing responsive images, you will have to write the values for the &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; attributes. It can quickly get tricky. So let‚Äôs repeat the purpose of these two attributes so that it becomes easy to derive the values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;srcset&lt;/code&gt; - To define multiple image sources of different widths and let the browser pick the most appropriate candidate during HTML parsing.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sizes&lt;/code&gt; - To define the size of the image element. It could be a fixed size like &lt;code&gt;225px&lt;/code&gt; or relative to the viewport. You can use CSS media conditions here to provide different size values based on the viewport width.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before you provide different image sources in  &lt;code&gt;srcset&lt;/code&gt;, you need to understand what all sizes do you need based on the layout. It is going to be site-specific, meaning it is closely tied to your CSS.&lt;/p&gt;

&lt;p&gt;Here is a simple approach to this problem.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While calculating sizes, think in terms of image width relative to the viewport. For example - ‚ÄúMy layout is such that my image is going to be roughly X percent of the viewport if the screen size is above Y px.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let‚Äôs understand this with a few examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;sizes="(min-width 1024px) 33vw, 95vw)"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It means - ‚ÄúThe image is in a three-column layout on a screen larger than 1024px. Otherwise, it is close to full viewport width leaving some space around it‚Äù.&lt;/p&gt;

&lt;p&gt;Now, let‚Äôs pick the &lt;code&gt;sizes&lt;/code&gt; from our demo - &lt;a href="https://imagekitio.github.io/responsive-images-guide/srcset-sizes.html"&gt;https://imagekitio.github.io/responsive-images-guide/srcset-sizes.html&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;sizes="(max-width: 400px) 100vw, (max-width: 700px) 50vw, (max-width: 900px) 33vw, 225px"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It means - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If viewport width is upto 400px, each image takes up 100vw i.e. the whole viewport width.&lt;/li&gt;
&lt;li&gt;Upto 700px, each image takes up 50vw i.e. 50% width of total viewport width.&lt;/li&gt;
&lt;li&gt;Upto 900px, each image takes up 33vw i.e. 33% width of total viewport width.&lt;/li&gt;
&lt;li&gt;Above 900px, each image takes a fix 225px width.
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Defining image width relative to viewport does not always provide the most optimal image considering many devices &amp;amp; corresponding viewport width &amp;amp; DPR values. However, it is a practical solution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once we know the value of &lt;code&gt;sizes&lt;/code&gt;, it is easy to find out what all different size images we need to define in &lt;code&gt;srcset&lt;/code&gt; - &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Image size candidates from sizes&lt;/th&gt;
&lt;th&gt;Effective size at different DPR values&lt;br&gt;(width √ó DPR)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;400px&lt;br&gt;From the first media condition i.e.&lt;br&gt;&lt;code&gt;max-width: 400px) 100vw&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;400px at 1x&lt;br&gt;800px at 2x&lt;br&gt;1200px at 3x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;350px&lt;br&gt;From the second media condition i.e.&lt;br&gt;&lt;code&gt;(max-width: 700px) 50vw&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;350px at 1x&lt;br&gt;700px at 2x&lt;br&gt;1025px at 3x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300px&lt;br&gt;From the third media condition i.e.&lt;br&gt;&lt;code&gt;max-width: 900px) 33vw&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;300px at 1x&lt;br&gt;600px at 2x&lt;br&gt;900px at 3x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;225px&lt;br&gt;From the fourth default media condition i.e. &lt;br&gt;&lt;code&gt;225px&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;225px at 1x&lt;br&gt;450px at 2x&lt;br&gt;675px at 3x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If you sort the effective sizes, here is what you will get - &lt;/p&gt;

&lt;p&gt;&lt;code&gt;225px&lt;/code&gt;, &lt;code&gt;300px&lt;/code&gt;,  &lt;code&gt;350px&lt;/code&gt;, &lt;code&gt;400px&lt;/code&gt;, &lt;code&gt;450px&lt;/code&gt;, &lt;code&gt;600px&lt;/code&gt;, &lt;code&gt;675px&lt;/code&gt;, &lt;code&gt;700px&lt;/code&gt;, &lt;code&gt;800px&lt;/code&gt;, &lt;code&gt;900px&lt;/code&gt;, &lt;code&gt;1025px&lt;/code&gt; and &lt;code&gt;1200px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are using an image CDN like ImageKit.io, it is easy to provide images in different dimension by addign URL parameters e.g.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;225px&lt;/code&gt; wide image - &lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;300px&lt;/code&gt; wide image - &lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-300"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-300&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;600px&lt;/code&gt; wide image - &lt;a href="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-600"&gt;https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-600&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, you don‚Äôt have to provide images at all required sizes in &lt;code&gt;srcset&lt;/code&gt;. You can select a few candidates, and the browser will pick the closest one. This serves two purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You don‚Äôt have to generate and store multiple variants of the same image.&lt;/li&gt;
&lt;li&gt;If you are using a CDN for faster delivery and caching, then having a few variants will improve your cache hit ratio as the repeat request will increase.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So you can pick three or four candidates and write  &lt;code&gt;srcset&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;srcset="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225 225w,
        https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350 350w,
        https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-700 700w,
        https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-900 900w"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tips-for-choosing-breakpoints-while-writing-srcset" class="anchor"&gt;
  &lt;/a&gt;
  Tips for choosing breakpoints while writing srcset
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can look at your Google analytics device report to see what screen resolutions you should care about most. Accordingly, you will know which layout needs the most optimization. For example, assuming that 60% of the users on your website see a three-column layout and 20% see a single column layout. Then you can consider all size variations you need for these two layouts at multiple DPR values and write &lt;code&gt;srcset&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To increase cache hit ratio on CDN, don‚Äôt try and provide &lt;code&gt;srcset&lt;/code&gt; for all possible breakpoints and sizes. CDN cannot cache all your resources. Some resources have to evict to make space for others. This would cause more performance bottlenecks than gains.&lt;/li&gt;
&lt;li&gt;When in doubt - First think about your layout, i.e. CSS  ‚û°Ô∏è , then accordingly write  &lt;code&gt;sizes&lt;/code&gt;  ‚û°Ô∏è And finally choose breakpoints for  &lt;code&gt;srcset&lt;/code&gt; considering different DPR values and effective image sizes you need üôå.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#chapter-6-using-picture-element" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 6 - Using picture element
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; are useful to define multiple dimension variants of the same image. But if you need art direction - that is, to explicitly dictate browser to load an entirely different image based on browser viewport or image format support, you need &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-the-picture-element" class="anchor"&gt;
  &lt;/a&gt;
  When to use the Picture element
&lt;/h2&gt;

&lt;p&gt;Picture element should be used to achieve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Art direction&lt;/li&gt;
&lt;li&gt;Different format support&lt;/li&gt;
&lt;li&gt;Color theme example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/large.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 800px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/small.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 400px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/large.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element consists of zero or more  &lt;code&gt;source&lt;/code&gt; and one &lt;code&gt;img&lt;/code&gt; element. The browser will consider each &lt;code&gt;source&lt;/code&gt; element to choose the best match based on device display and image format support.&lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;source&lt;/code&gt; accepts &lt;code&gt;media&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; attributes in addition to well known &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#media-attribute" class="anchor"&gt;
  &lt;/a&gt;
  Media attribute
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;media&lt;/code&gt; attribute contains a media condition like CSS media query. If a source‚Äôs element media condition evaluates to &lt;code&gt;false&lt;/code&gt;, the browser skips that source. If none of the source element‚Äôs media conditions evaluate to &lt;code&gt;true&lt;/code&gt;, the browser loads the image specified in the &lt;code&gt;img&lt;/code&gt; tag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-loading-different-based-on-screen-size" class="anchor"&gt;
  &lt;/a&gt;
  Example - Loading different based on screen size
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/large.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 800px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/small.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 400px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/large.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The browser will pick one of the source elements based on the &lt;code&gt;media&lt;/code&gt; condition.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#srcset-attribute" class="anchor"&gt;
  &lt;/a&gt;
  Srcset attribute
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;srcset&lt;/code&gt; attribute is the same as we discussed before. It contains a comma-separated list of different image resources.&lt;/p&gt;

&lt;p&gt;Each comma-separated item in &lt;code&gt;srcset&lt;/code&gt; has:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Image URL, e.g. &lt;code&gt;http://ik.imagekit.io/demo/default-image.jpg&lt;/code&gt; or relative path &lt;code&gt;/demo/default-image.jpg&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;An empty space&lt;/li&gt;
&lt;li&gt;The real width of the image:

&lt;ul&gt;
&lt;li&gt;Either using display density descriptor e.g. &lt;code&gt;1.5x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;Or, using width descriptors e.g. &lt;code&gt;450w&lt;/code&gt;. This is the width of the image in pixels.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#example-loading-different-based-on-device-pixel-ratio" class="anchor"&gt;
  &lt;/a&gt;
  Example - Loading different based on device pixel ratio
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"large_1x.jpg 1x, large_2x.jpg 2x, large_3x.jpg 3x"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 800px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small_1x.jpg 1x, small_2x.jpg 2x, small_1x.jpg 3x"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 400px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"large_3x.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#type-attribute" class="anchor"&gt;
  &lt;/a&gt;
  Type attribute
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;type&lt;/code&gt; attribute specified the MIME type of the resource URL(s) in the source‚Äôs &lt;code&gt;srcset&lt;/code&gt;. If the browser supports that MIME type, it will load the resource. Otherwise, it will skip that source and move to the next. If none of the source‚Äôs type is supported by the browser, the image in &lt;code&gt;img&lt;/code&gt; is loaded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-loading-different-image-format-based-on-browser-support" class="anchor"&gt;
  &lt;/a&gt;
  Example - Loading different image format based on browser support
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/image.webp"&lt;/span&gt;
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/image.avif"&lt;/span&gt;
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/image.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#live-demo-of-using-the-picture-element" class="anchor"&gt;
  &lt;/a&gt;
  Live demo of using the picture element
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs see this in action with a live demo - &lt;a href="https://imagekitio.github.io/responsive-images-guide/picture.html"&gt;https://imagekitio.github.io/responsive-images-guide/picture.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ih0WyKDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/picture-element-demo_U9wD8pBJV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ih0WyKDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/picture-element-demo_U9wD8pBJV.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; elements in this demo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first example contains a screenshot of the ImageKit media library to showcase different user interface elements. The interface varies based on screen size. So to depict the same, we are loading a different screenshot based on screen size. For screen size greater than or equal to &lt;code&gt;800px&lt;/code&gt;, you will see a desktop version of the user interface i.e. &lt;a href="https://ik.imagekit.io/ikmedia/dashboard.png"&gt;https://ik.imagekit.io/ikmedia/dashboard.png&lt;/a&gt;. Otherwise, you will see a mobile-friendly version i.e. &lt;a href="https://ik.imagekit.io/ikmedia/dashboard-mobile.png"&gt;https://ik.imagekit.io/ikmedia/dashboard-mobile.png&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The second example demonstrates loading a WebP format image if the browser has support for it. Otherwise, a JPG image is loaded.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#loading-different-image-in-dark-mode-vs-light-mode" class="anchor"&gt;
  &lt;/a&gt;
  Loading different image in dark mode vs light mode
&lt;/h2&gt;

&lt;p&gt;Dark mode lets you change the background color of an app window to black. As a web developer, you can choose to load a different image if a user has turned on dark mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"dark.jpg"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(prefers-color-scheme: dark)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"light.jpg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The browser will evaluate the media condition &lt;code&gt;(prefers-color-scheme: dark)&lt;/code&gt;, and if it is &lt;code&gt;true&lt;/code&gt;, it will pick that source and load &lt;code&gt;dark.jpg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is how it looks, toggle the dark mode setting and refresh the page to see how the browser loads a different image.&lt;/p&gt;

&lt;p&gt;Live demo - &lt;a href="https://imagekitio.github.io/responsive-images-guide/dark-vs-light-mode.html"&gt;https://imagekitio.github.io/responsive-images-guide/dark-vs-light-mode.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ytXrd6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/guides/light-vs-dark-mode-demo_ngxfbrNyG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ytXrd6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/guides/light-vs-dark-mode-demo_ngxfbrNyG.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chapter-7-using-client-hints" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 7 - Using client hints
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#what-are-client-hints" class="anchor"&gt;
  &lt;/a&gt;
  What are client hints?
&lt;/h2&gt;

&lt;p&gt;As the name suggests, client hints are the hints provided by the client device to the server along with the request itself. These hints allow the server to fulfill a particular request with the most optimal resource. The latter is known as content negotiation.&lt;/p&gt;

&lt;p&gt;Client hints provide this information via HTTP request headers. For example - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rHIRHXSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/demo/imagekitwebsite/tr:f-png/wp-content/uploads/dpr_request_header.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rHIRHXSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/demo/imagekitwebsite/tr:f-png/wp-content/uploads/dpr_request_header.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-enable-client-hints" class="anchor"&gt;
  &lt;/a&gt;
  How to enable client hints?
&lt;/h2&gt;

&lt;p&gt;Not every request has these HTTP headers. You will have to explicitly tell the browser to include these client hints using a &lt;code&gt;meta&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Accept-CH"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"DPR, Viewport-Width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This allows the browser to send the &lt;code&gt;DPR&lt;/code&gt; value (device pixel ratio) and &lt;code&gt;Viewport-Width&lt;/code&gt; (device screen width in CSS pixels) along with image requests.&lt;/p&gt;

&lt;p&gt;That‚Äôs great. But why do we need client hints in implementing responsive images when we already have &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;picture&lt;/code&gt;?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-client-hints" class="anchor"&gt;
  &lt;/a&gt;
  Why do we need client hints?
&lt;/h2&gt;

&lt;p&gt;To understand the need for client hints, let's take a closer look at what we have learned so far -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; to define URLs of different image variants and specify rendered image size so that browser can download the most appropriate image based on the size of the viewport on its own.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;picture&lt;/code&gt; element to dedicate how the browser should load a differently cropped or entirely different image, which is better suited for a smaller display.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;picture&lt;/code&gt; provides us with everything we need to implement responsive images use-cases, but it could be time-consuming to develop and maintain for complex use cases.&lt;/p&gt;

&lt;p&gt;All of the above methods require you to modify markup so that as a web developer, you can pass the essential missing piece of information that the browser needs at runtime to be able to download the right image. Well, client-hints do the same but without the complex markup ‚Äî they provide the missing link between the browser and the server when it comes to layout information and device capabilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let‚Äôs understand with an example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suppose you have a simple resolution switching use cases where you want to load a different size variant of the same image based on the viewport width. The syntax would be -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg"&lt;/span&gt; 
     &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 300w,
             medium.jpg 600w,
             large.jpg 900w"&lt;/span&gt;
     &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw, (max-width: 600px) 50vw, (max-width: 900px) 33vw, 225px"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, if you want to load a WebP image in a supported browser, your syntax becomes -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- webp format for (max-width: 300px) 100vw --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.webp 300w,
                  medium.webp 600w,
                  large.webp 900w"&lt;/span&gt;
            &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- jpg format for (max-width: 300px) 100vw --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 300w,
                  medium.jpg 600w,
                  large.jpg 900w"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/image.avif"&lt;/span&gt;
            &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- webp format for (max-width: 600px) 50vw --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.webp 300w,
                  medium.webp 600w,
                  large.webp 900w"&lt;/span&gt;
            &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- jpg format for (max-width: 600px) 50vw --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 300w,
                  medium.jpg 600w,
                  large.jpg 900w"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/image.avif"&lt;/span&gt;
            &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- webp format for (max-width: 900px) 33vw --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.webp 300w,
                  medium.webp 600w,
                  large.webp 900w"&lt;/span&gt;
            &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- jpg format for (max-width: 900px) 33vw --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw"&lt;/span&gt;
          &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 300w,
                  medium.jpg 600w,
                  large.jpg 900w"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"large.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Yes! It quickly gets complex.&lt;/p&gt;

&lt;p&gt;If we use client hints, the above syntax can be reduced to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Accept-CH"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"DPR, Width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/image.jpg"&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 300px) 100vw, (max-width: 600px) 50vw, (max-width: 900px) 33vw, 225px"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Pretty amazing, right! No &lt;code&gt;srcset&lt;/code&gt;. But for this to work, the server should be capable of understanding client hints and respond appropriately.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We will discuss in detail how this is possible, but the bottom line is ‚Äî when possible, you should aim to centralize image resizing &amp;amp; processing and automate as much as possible. This is precisely what client-hints do. ImageKit supports client hints out of the box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#client-hints-for-responsive-images" class="anchor"&gt;
  &lt;/a&gt;
  Client hints for responsive images
&lt;/h2&gt;

&lt;p&gt;Among others, one of the primary uses of client hints is to send information about the required size of the image in the current page layout. This simplifies the markup and automates a lot of information passing from browser to web server when implementing responsive images. &lt;/p&gt;

&lt;p&gt;Let‚Äôs put that in perspective by taking a closer look at what all information does the browser need at runtime to be able to load an appropriate image -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Viewport width.&lt;/li&gt;
&lt;li&gt;How big will the image render? It depends upon your layout, which might adapt based on the width of the viewport.&lt;/li&gt;
&lt;li&gt;Device pixel ratio i.e. &lt;code&gt;1x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt;, &lt;code&gt;3x&lt;/code&gt; or &lt;code&gt;4x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;URL of the image resource for different sizes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can opt-in the following client hints, which will be sent as request headers along with HTTP request - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Width&lt;/code&gt; - Final size of the required image in page layout considering device pixel ratio&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DPR&lt;/code&gt; - Device pixel ratio&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Viewport-Width&lt;/code&gt; - Viewport width in CSS pixels.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Accept&lt;/code&gt; - This header is always sent with every request by default.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Save-Data&lt;/code&gt; - &lt;code&gt;on&lt;/code&gt; or &lt;code&gt;off&lt;/code&gt; to indicate the user‚Äôs preference to receive less data.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ECT&lt;/code&gt; - &lt;em&gt;Effective Connection Type&lt;/em&gt; e.g. **&lt;code&gt;4g&lt;/code&gt;, &lt;code&gt;3g&lt;/code&gt;, &lt;code&gt;2g&lt;/code&gt;, and &lt;code&gt;slow-2g&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;RTT&lt;/code&gt; - &lt;em&gt;Round Trip Time&lt;/em&gt;, in milliseconds, on the application layer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Downlink&lt;/code&gt; - Approximate downstream speed of the user‚Äôs connection in megabits per second (Mbps).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Width&lt;/code&gt;,  &lt;code&gt;DPR&lt;/code&gt;, and &lt;code&gt;Viewport-Width&lt;/code&gt; hints are most relevant to responsive images implementation as they allow the webserver to control the image size from the backend.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Accept&lt;/code&gt; hint can be used by the server to deliver images in next-generation format e.g. WebP or AVIF, without changing the image source URL or using the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;The server can use network hints such as &lt;code&gt;Save-Data&lt;/code&gt;, &lt;code&gt;ECT&lt;/code&gt;, &lt;code&gt;RTT&lt;/code&gt;, and &lt;code&gt;Downlink&lt;/code&gt; to deliver a low-quality variant of the image, which will consume less data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#width" class="anchor"&gt;
  &lt;/a&gt;
  Width
&lt;/h3&gt;

&lt;p&gt;It provides the final size of the image required as per page layout after factoring in the device pixel ratio.  &lt;code&gt;Width&lt;/code&gt;  hint is sent with requests for image resources fired off by &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; tags using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-sizes"&gt;&lt;code&gt;sizes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the most useful client hint with respect to implementing responsive images. &lt;/p&gt;

&lt;p&gt;For example - Let‚Äôs say a page has an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element with the &lt;code&gt;sizes&lt;/code&gt; attribute set to 300. This means the layout needs a &lt;code&gt;300&lt;/code&gt; CSS pixel wide image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Allow Width header to be sent --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Accept-CH"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/image.jpg"&lt;/span&gt;&lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"300px"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now the browser takes 300 and multiplies it with the device pixel ratio. Assuming device pixel ratio (DPR) is 2, browser sets &lt;code&gt;Width&lt;/code&gt; hint to &lt;code&gt;600,&lt;/code&gt; i.e. 300x2. This is the actual size of the image required for the current layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Request headers
GET: /image.jpg
width: 600
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This allows the server to respond with an image, which is optimal for this device and the page's current layout.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dpr" class="anchor"&gt;
  &lt;/a&gt;
  DPR
&lt;/h3&gt;

&lt;p&gt;This hint provides the device pixel ratio. It is equivalent to &lt;code&gt;window.devicePixelRatio&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example - when opted in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Allow DPR header to be sent --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Accept-CH"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"DPR"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/image.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Assuming, device pixel ratio is 2, the browser will set the &lt;code&gt;DPR&lt;/code&gt; hint to 2.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Request headers
GET: /image.jpg
dpr: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can use this header on the server to send the right image variant e.g. &lt;code&gt;1x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt; or &lt;code&gt;3x&lt;/code&gt; based on the actual device pixel ratio.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viewportwidth" class="anchor"&gt;
  &lt;/a&gt;
  Viewport-Width
&lt;/h3&gt;

&lt;p&gt;This hint provides the viewport width in CSS pixels. It is equivalent to &lt;code&gt;window.innerWidth&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;You can use this hint on the server-side to respond with an image that is suitable for a specific screen size. This is useful for implementing an art direction use-case.&lt;/p&gt;

&lt;p&gt;For example - when opted in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Allow Viewport-Width header to be sent --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Accept-CH"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Viewport-Width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/image.jpg"&lt;/span&gt;&lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"300px"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Assuming, device screen width is 300 CSS pixel wide, the browser will set &lt;code&gt;Viewport-Width&lt;/code&gt; hint to 300.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Request headers
GET: /image.jpg
viewport-width: 300
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#accept" class="anchor"&gt;
  &lt;/a&gt;
  Accept
&lt;/h3&gt;

&lt;p&gt;It provides what all content type the browser supports, which can be leveraged by the server to send the most optimal response.&lt;/p&gt;

&lt;p&gt;Example use case includes serving images in WebP or AVIF format when browser declares the support for it in &lt;code&gt;Accept&lt;/code&gt; header. For example - &lt;code&gt;Accept&lt;/code&gt; header value in an image resource request in Chrome is &lt;code&gt;image/avif,image/webp,image/apng,image/*,*/*;q=0.8&lt;/code&gt;. It has &lt;code&gt;image/webp&lt;/code&gt; in it, and the server can use this to respond with WebP format.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ARlKHy9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/accept-client-hint_GDvo26k8y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ARlKHy9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/accept-client-hint_GDvo26k8y.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are using ImageKit, then it &lt;a href="https://docs.imagekit.io/features/image-optimization/automatic-image-format-conversion"&gt;automatically converts image format&lt;/a&gt; based on Accept header value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#savedata" class="anchor"&gt;
  &lt;/a&gt;
  Save-Data
&lt;/h3&gt;

&lt;p&gt;This hint indicates the client's preference for reduced data usage. When the value is &lt;code&gt;on&lt;/code&gt;, the server should try to send an alternative smaller payload in the response. For example, in image requests, the server should respond with a lower quality image to reduce data usage if the value of &lt;code&gt;Save-Data&lt;/code&gt; request header is &lt;code&gt;on&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKgVOgTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/demo/imagekitwebsite/tr:w-700%2Cdpr-2%2Cf-png/wp-content/uploads/save-data-header.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKgVOgTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/demo/imagekitwebsite/tr:w-700%2Cdpr-2%2Cf-png/wp-content/uploads/save-data-header.jpg" alt="Save-Data Client Hint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mobile browsers such as Chrome Mobile and Opera Mobile allow the user to activate a data saver mode. With this mode enabled, the browsers send the &lt;code&gt;Save-Data&lt;/code&gt; header with the request, with the &lt;code&gt;on&lt;/code&gt; value. With this mode disabled, the &lt;code&gt;Save-Data&lt;/code&gt; header is not sent at all.&lt;/p&gt;

&lt;p&gt;For example, the right image is almost 33% smaller when accessed by a client with Save-Data enabled. You can test this on the Chrome desktop by installing &lt;a href="https://chrome.google.com/webstore/detail/data-saver/pfmgfdlgomnbgkofeojodiodmgpgmkac?hl=en"&gt;this extension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nFK_uP4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/demo/imagekitwebsite/tr:w-720%2Cdpr-2%2Cf-png/wp-content/uploads/save-data-demo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nFK_uP4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/demo/imagekitwebsite/tr:w-720%2Cdpr-2%2Cf-png/wp-content/uploads/save-data-demo.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ImageKit &lt;a href="https://docs.imagekit.io/features/image-optimization/data-saver-mode"&gt;supports Save-Data mode&lt;/a&gt; and when enabled, it will deliver a low-quality image to reduce data transfer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#ect-rtt-and-downlink" class="anchor"&gt;
  &lt;/a&gt;
  ECT, RTT, and Downlink
&lt;/h3&gt;

&lt;p&gt;Besides &lt;code&gt;Save-Data&lt;/code&gt;  hint, we also have &lt;code&gt;ECT&lt;/code&gt;, &lt;code&gt;RTT&lt;/code&gt; and &lt;code&gt;Downlink&lt;/code&gt; client hints - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ECT&lt;/code&gt; - &lt;em&gt;Effective Connection Type&lt;/em&gt; e.g. **&lt;code&gt;4g&lt;/code&gt;, &lt;code&gt;3g&lt;/code&gt;, &lt;code&gt;2g&lt;/code&gt;, and &lt;code&gt;slow-2g&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;RTT&lt;/code&gt; - &lt;em&gt;Round Trip Time&lt;/em&gt;, in milliseconds, on the application layer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Downlink&lt;/code&gt; - Approximate downstream speed of the user‚Äôs connection in megabits per second (Mbps).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/client-hints"&gt;Jeremy Wagner&lt;/a&gt; wrote in Google Web Fundamentals -  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Adaptive performance is the idea that we can adjust how we deliver resources based on the information client hints makes available to us; specifically, information surrounding the current state of the user‚Äôs network connection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Time is the key&lt;/strong&gt; ‚Äî Taking forever to load a high-quality image on a slow network is more frustrating for your users than showing a low-quality variant that loads quickly. You can use these network client hints to &lt;a href="https://github.com/malchata/client-hints-example/blob/master/includes/functions.php#L8"&gt;calculate a score of client&lt;/a&gt;‚Äô&lt;a href="https://github.com/malchata/client-hints-example/blob/master/includes/functions.php#L8"&gt;s network connection quality&lt;/a&gt; and accordingly change your logic on server to help users on the slow network have decent experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitation-of-client-hints" class="anchor"&gt;
  &lt;/a&gt;
  Limitation of client hints
&lt;/h2&gt;

&lt;p&gt;Client hints look pretty amazing. They automate responsive images without major markup changes. But there are some limitations with client hints -&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#client-hints-dont-work-in-all-browsers" class="anchor"&gt;
  &lt;/a&gt;
  Client hints don‚Äôt work in all browsers
&lt;/h3&gt;

&lt;p&gt;At the moment, they are only supported in Chrome and Chromium-based browsers, Edge, and Opera.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQOpSX-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_7E0F730B8904F9164DE50ED2794395678260F68A4F209B065252D2D8D36F2F6A_1604033274584_Screenshot%2B2020-10-30%2Bat%2B10.16.44%2BAM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQOpSX-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_7E0F730B8904F9164DE50ED2794395678260F68A4F209B065252D2D8D36F2F6A_1604033274584_Screenshot%2B2020-10-30%2Bat%2B10.16.44%2BAM.png" alt="Can I Use - https://caniuse.com/client-hints-dpr-width-viewport"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crossorigin-client-hints-removed-in-chrome-67-in-the-desktop-version" class="anchor"&gt;
  &lt;/a&gt;
  Cross-origin client hints removed in Chrome 67 in the desktop version
&lt;/h3&gt;

&lt;p&gt;After client hints landing in Chrome 35, there were concerns around tracking users across multiple websites because of the device-related information passed through client hints.&lt;/p&gt;

&lt;p&gt;Essentially, sending highly granular data, such as image and viewport width, may help identify users across multiple requests. More importantly, there was no mechanism to control which origin should receive this. The moment you opt-in for client hints, all image resource type request will start sharing device-specific data with origins.&lt;/p&gt;

&lt;p&gt;If your website is hosted on &lt;code&gt;www.example.com&lt;/code&gt; and images are on &lt;code&gt;www.example.com/image.jpg&lt;/code&gt; it is fine. But if images on &lt;code&gt;www.images.third-party-service.com/image.jpg&lt;/code&gt; have the same data, it may reveal the same information about the user to other origins that may not have had access to it before.&lt;/p&gt;

&lt;p&gt;As a result, the Chrome team removed cross-origin client hints in the desktop version of Chrome 67, but they &lt;a href="https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/8RBFue7RMXQ/7TF4VPVzBAAJ"&gt;still work in mobile&lt;/a&gt;. These restrictions will be removed soon when work on &lt;a href="https://wicg.github.io/feature-policy/"&gt;Feature Policy&lt;/a&gt; is complete.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-server-should-support-client-hints" class="anchor"&gt;
  &lt;/a&gt;
  Your server should support client hints
&lt;/h3&gt;

&lt;p&gt;For client hints to work, your server should understand them and respond with an appropriate image.&lt;/p&gt;

&lt;p&gt;For example, the servers should be able to - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deliver the right size image based on the value of the &lt;code&gt;Width&lt;/code&gt; client hint.&lt;/li&gt;
&lt;li&gt;Serve images in WebP or AVIF format based on the value of the &lt;code&gt;Accept&lt;/code&gt; client hint.&lt;/li&gt;
&lt;li&gt;Select the right image variant based on the value of the &lt;code&gt;DPR&lt;/code&gt; client hint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately, you can automate all this using an image CDN like &lt;a href="https://imagekit.io/"&gt;ImageKit.io&lt;/a&gt;, which supports client hints out of the box.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caching-on-cdn-can-be-tricky" class="anchor"&gt;
  &lt;/a&gt;
  Caching on CDN can be tricky
&lt;/h3&gt;

&lt;p&gt;You would want to &lt;a href="https://imagekit.io/blog/ultimate-guide-to-http-caching-for-static-assets/"&gt;cache your static resources&lt;/a&gt; like images to accelerate the download and decrease the load on your origin server. But with client hints in the mix, it can be tricky.&lt;/p&gt;

&lt;p&gt;Usually, a CDN looks for the objects in the cache based on the resource URL. However, when the server changes the response based on other request HTTP headers i.e. client hints, the CDN has to be aware of how to respond to future requests. Essentially if we are changing the response based on the &lt;code&gt;Accept&lt;/code&gt; request header value, we will have to configure the CDN to store seperate response in cache based on the value of the &lt;code&gt;Accept&lt;/code&gt; request header.&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;Vary&lt;/code&gt; response header to indicate CDN and intermediate proxies to maintain different cache objects based on header names in &lt;code&gt;Vary&lt;/code&gt;. For example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Vary: Accept, DPR
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This means that CDN and intermediate proxies should take the value of the &lt;code&gt;Accept&lt;/code&gt; and &lt;code&gt;DPR&lt;/code&gt; request header in account in addition to resource URL while storing and looking up objects in the cache. The cache lookup key should be &lt;code&gt;Accept + DPR + resource URL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is important to note that you should not set &lt;code&gt;Vary: User-agent&lt;/code&gt; because there could be a huge number of unique values for the &lt;code&gt;User-Agent&lt;/code&gt; request header, resulting in a lower cache hit ratio on the CDN.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An image CDN like &lt;a href="https://imagekit.io/"&gt;ImageKit.io&lt;/a&gt; already takes care of CDN caching while ensuring the cache hit ratio is high.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#chapter-8-responsive-images-in-css" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 8 - Responsive images in CSS
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;background-image&lt;/code&gt; is a very powerful CSS property that allows you to insert images on elements other than &lt;code&gt;img&lt;/code&gt;. What you have learned so far about responsive images deals with only HTML markup. Let‚Äôs see how to implement responsive images in CSS.&lt;/p&gt;

&lt;p&gt;We have the following use-cases to cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Art direction i.e. loading entirely different images based on screen width. In HTML, we used the &lt;code&gt;picture&lt;/code&gt; element. In CSS, we can use old fashioned media queries.&lt;/li&gt;
&lt;li&gt;Providing high-resolution image variants to let the browser make a choice. In HTML &lt;code&gt;srcset&lt;/code&gt; attribute provides the browser with &lt;code&gt;1x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt;, and &lt;code&gt;3x&lt;/code&gt; variants of the same image. In CSS, we have the option to use &lt;code&gt;image-set&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In CSS media query alone is enough to implement responsive images. However, &lt;code&gt;image-set&lt;/code&gt; is similar to &lt;code&gt;srcset&lt;/code&gt; because it provides the options and lets the browser choose the image. But it is not equivalent to srcset.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#art-direction-in-css-loading-an-entirely-different-image-based-on-screen-size" class="anchor"&gt;
  &lt;/a&gt;
  Art direction in CSS ‚Äî loading an entirely different image based on screen size
&lt;/h2&gt;

&lt;p&gt;In HTML, we have a &lt;code&gt;picture&lt;/code&gt; element to load an image conditionally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/large.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 800px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"/small.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 400px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/large.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In CSS, we have media queries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(small.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;background-position-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(large.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example, on small screen &lt;code&gt;background-image: url(small.jpg)&lt;/code&gt;  is applied and when viewport width is greater than or equal to 800px, &lt;code&gt;background-image: url(large.jpg)&lt;/code&gt; is applied.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loading-highresolution-images-based-on-device-pixel-ratio" class="anchor"&gt;
  &lt;/a&gt;
  Loading high-resolution images based on device pixel ratio
&lt;/h2&gt;

&lt;p&gt;In HTML we have &lt;code&gt;srcset&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg"&lt;/span&gt; 
     &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"image.jpg 1x,
             image_2x.jpg 2x"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In CSS, we can use &lt;code&gt;image-set&lt;/code&gt; and media queries.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Using &lt;code&gt;image-set&lt;/code&gt; to provide high resolution images variants&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(image.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;fallback&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-webkit-image-set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="sx"&gt;url(image.jpg)&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="sx"&gt;url(image_2x.jpg)&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  
  &lt;span class="p"&gt;);&lt;/span&gt;  
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image-set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="sx"&gt;url(image.jpg)&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="sx"&gt;url(image_2x.jpg)&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;image-set&lt;/code&gt; is not supported, the fallback &lt;code&gt;background-image: url(image.jpg)&lt;/code&gt; will be applied.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Using media queries&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.demo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(image.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;Standard&lt;/span&gt; &lt;span class="err"&gt;syntax&lt;/span&gt; &lt;span class="err"&gt;supported&lt;/span&gt; &lt;span class="err"&gt;in&lt;/span&gt; &lt;span class="err"&gt;Chrome,&lt;/span&gt; &lt;span class="err"&gt;Firefox,&lt;/span&gt; &lt;span class="err"&gt;and&lt;/span&gt; &lt;span class="err"&gt;Opera&lt;/span&gt;
  &lt;span class="err"&gt;@media&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="py"&gt;min-resolution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2dppx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;-webkit-min-device-pixel-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;/* For Safari &amp;amp; Android Browser */&lt;/span&gt; 
  &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(image_2x.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#chapter-9-lazy-load-responsive-images" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 9 - Lazy load responsive images
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#what-is-lazy-loading-images" class="anchor"&gt;
  &lt;/a&gt;
  What is Lazy loading images?
&lt;/h2&gt;

&lt;p&gt;As Rahul Nanwani wrote in &lt;a href="https://imagekit.io/blog/lazy-loading-images-complete-guide/"&gt;lazy loading images guide&lt;/a&gt; -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lazy Loading Images is a set of techniques in web and application development that defer the loading of images on a page to a later point in time - when those images are actually needed, instead of loading them upfront. These techniques help in improving performance, better utilization of the device‚Äôs resources, and reducing associated costs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usually, to implement lazy loading in HTML, instead of &lt;code&gt;src&lt;/code&gt; or &lt;code&gt;srcset&lt;/code&gt; attributes, we use &lt;code&gt;data-src&lt;/code&gt; or &lt;code&gt;data-srcset&lt;/code&gt; so that browser does not load images during &lt;a href="#pre-loaders-or-speculative-parsing-to-rescue---the-new-way"&gt;speculative parsing&lt;/a&gt;. Later on, when Javascript is executed, and the user has scrolled near the image element, we load the actual image and update the &lt;code&gt;src&lt;/code&gt; or &lt;code&gt;srcset&lt;/code&gt; attribute‚Äôs value.&lt;/p&gt;

&lt;p&gt;Two very popular lazy loading libraries &lt;a href="https://github.com/aFarkas/lazysizes"&gt;lazysizes&lt;/a&gt; and &lt;a href="https://github.com/verlok/vanilla-lazyload"&gt;vanilla-lazyload&lt;/a&gt; support responsive images out of the box. In this guide, we will share a few examples of lazysizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazy-loading-responsive-images-in-srcset-and-sizes" class="anchor"&gt;
  &lt;/a&gt;
  Lazy loading responsive images in srcset and sizes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 1000px) 930px, 90vw"&lt;/span&gt;
    &lt;span class="na"&gt;data-srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 500w,
                 medium.jpg 640w,
                 big.jpg 1024w"&lt;/span&gt;
    &lt;span class="na"&gt;data-src=&lt;/span&gt;&lt;span class="s"&gt;"medium.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"lazyload"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-low-quality-placeholder-in-lazy-loading" class="anchor"&gt;
  &lt;/a&gt;
  Using low quality placeholder in lazy loading
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"low-quaity-placeholder.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(min-width: 1000px) 930px, 90vw"&lt;/span&gt;
    &lt;span class="na"&gt;data-srcset=&lt;/span&gt;&lt;span class="s"&gt;"small.jpg 500w,
                 medium.jpg 640w,
                 big.jpg 1024w"&lt;/span&gt;
    &lt;span class="na"&gt;data-src=&lt;/span&gt;&lt;span class="s"&gt;"medium.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"lazyload"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lazy-loading-images-in-picture-element" class="anchor"&gt;
  &lt;/a&gt;
  Lazy loading images in picture element
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
          &lt;span class="na"&gt;data-srcset=&lt;/span&gt;&lt;span class="s"&gt;"500.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 500px)"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
          &lt;span class="na"&gt;data-srcset=&lt;/span&gt;&lt;span class="s"&gt;"1024.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 1024px)"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
          &lt;span class="na"&gt;data-srcset=&lt;/span&gt;&lt;span class="s"&gt;"1200.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"fallback-image.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;data-src=&lt;/span&gt;&lt;span class="s"&gt;"1024.jpg"&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"lazyload"&lt;/span&gt;
          &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"image with artdirection"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#chapter-10-how-to-verify-responsive-image-implementation" class="anchor"&gt;
  &lt;/a&gt;
  Chapter 10 - How to verify responsive image implementation?
&lt;/h2&gt;

&lt;p&gt;After you implement responsive images, it's essential to verify that the right image is being loaded on different devices. Let‚Äôs discuss how various tools and browser's developer console can help us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-imagekit-website-analyzer" class="anchor"&gt;
  &lt;/a&gt;
  Using ImageKit website analyzer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://imagekit.io/website-analyzer/"&gt;ImageKit website analyzer&lt;/a&gt; is a tailor-made tool to find our image related issues on the webpage. It loads the webpage in a headless browser. All the image requests are monitored and compared against the optimized version fetched from ImageKit. &lt;/p&gt;

&lt;p&gt;You will get a report like below. Look under &lt;strong&gt;Properly resize images&lt;/strong&gt; to see if images are in the right sizes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3htp76b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/imagekit-website-analyzer-audit_pKqN97Pl8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3htp76b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/imagekit-website-analyzer-audit_pKqN97Pl8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tool also provides an image by image explanation for all images on the webpage like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FIAFGRXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_7E0F730B8904F9164DE50ED2794395678260F68A4F209B065252D2D8D36F2F6A_1605154179992_Screenshot%2B2020-11-12%2Bat%2B9.39.30%2BAM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FIAFGRXu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_7E0F730B8904F9164DE50ED2794395678260F68A4F209B065252D2D8D36F2F6A_1605154179992_Screenshot%2B2020-11-12%2Bat%2B9.39.30%2BAM.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This tool provides image analysis reports for desktop and mobile. However, at the moment, it does not take into account the device pixel ratio, so you will have to consider that, especially while looking at the mobile report.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#using-lighthouse" class="anchor"&gt;
  &lt;/a&gt;
  Using Lighthouse
&lt;/h2&gt;

&lt;p&gt;You can use &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt; to verify responsive images are implemented correctly. Run the Lighthouse Performance Audit for Mobile &amp;amp; Desktop and look for the &lt;strong&gt;Properly size images&lt;/strong&gt; audit results.&lt;/p&gt;

&lt;p&gt;This will show all the images that aren't appropriately sized based on the page layout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qw95STs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_7E0F730B8904F9164DE50ED2794395678260F68A4F209B065252D2D8D36F2F6A_1605146844250_uses-responsive-images.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qw95STs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_7E0F730B8904F9164DE50ED2794395678260F68A4F209B065252D2D8D36F2F6A_1605146844250_uses-responsive-images.png" alt="Source - https://web.dev/uses-responsive-images/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manually-verifying-responsive-images" class="anchor"&gt;
  &lt;/a&gt;
  Manually verifying responsive images
&lt;/h2&gt;

&lt;p&gt;You can use the Chrome device emulator to load a webpage on different devices and see the image requests in the network tab. Few points to note before starting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Browser cache should be disabled - so that with subsequent reloads, we can see which image resources are being requested.&lt;/li&gt;
&lt;li&gt;Ensure device pixel ratio is added, as shown in the screenshot below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l4HPbxV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/chrome-emulate-enable-dpr_QdiHs9Mv5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l4HPbxV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/chrome-emulate-enable-dpr_QdiHs9Mv5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now open the webpage and hover over the image element to see its required CSS pixel width. Multiple it with DPR value to get the required width of the image resource. &lt;/p&gt;

&lt;p&gt;For example here, &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hxthEzCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/verifying-responsive-images-srcset-sizes_ygIzVisE6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxthEzCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ikmedia/verifying-responsive-images-srcset-sizes_ygIzVisE6.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DPR value - 2.6&lt;/li&gt;
&lt;li&gt;CSS pixel width - 206&lt;/li&gt;
&lt;li&gt;Required image size - 206 √ó 2.6 = 535.6&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Available options based on &lt;code&gt;srcset&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;srcset="https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-225 225w,
        https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-300 300w,
        https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-350 350w,
        https://ik.imagekit.io/ikmedia/women-dress-1.jpg?tr=w-640 640w"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So the nearest candidate is a 640px wide image, and the browser downloads this image.  You can use the same technique to see if the right size images are loaded or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#faqs" class="anchor"&gt;
  &lt;/a&gt;
  FAQs
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#why-cant-we-do-this-using-css-or-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Why can't we do this using CSS or JavaScript?
&lt;/h2&gt;

&lt;p&gt;It's logical to think that we have all the information about browser, device, and layout and can use Javascript to load the right size image. However, this will delay the loading of image resources and defeat the whole purpose of rendering images quickly. Modern browsers don‚Äôt wait for Javascript and CSS to be parsed and executed before it triggers the image request. The browser scans the whole HTML and looks for image resources without waiting for Javascript to execute. That is why we need to use the &lt;code&gt;srcset&lt;/code&gt;, &lt;code&gt;sizes&lt;/code&gt;, and &lt;code&gt;picture&lt;/code&gt; element to implement responsive images. Learn &lt;a href="#how-browser-loads-a-webpage--the-old-way"&gt;how the browser loads a webpage&lt;/a&gt; to understand this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-i-use-both-density-and-width-descriptor-in-srcset" class="anchor"&gt;
  &lt;/a&gt;
  Can I use both density and width descriptor in srcset?
&lt;/h2&gt;

&lt;p&gt;No. As per the &lt;a href="https://html.spec.whatwg.org/multipage/images.html#image-candidate-string"&gt;specifications&lt;/a&gt; about how &lt;code&gt;srcset&lt;/code&gt;  is parsed - If an image candidate string for an element has the width descriptor specified, all other image candidate strings for that element must also have the width descriptor specified. Also, if an element has a size attribute present, all image candidate strings for that element must have the width descriptor specified.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-sizes-attribute-with-srcset" class="anchor"&gt;
  &lt;/a&gt;
  Why do we need sizes attribute with srcset?
&lt;/h2&gt;

&lt;p&gt;So that browser can trigger image load as part of preloading instead of waiting for CSS to download &amp;amp; parse. Learn &lt;a href="#how-browser-loads-a-webpage--the-old-way"&gt;how the browser loads a webpage&lt;/a&gt; to understand this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-use-width-and-not-a-height-in-srcset" class="anchor"&gt;
  &lt;/a&gt;
  Why do we use width and not a height in srcset?
&lt;/h2&gt;

&lt;p&gt;We have been specifying only image widths in &lt;code&gt;srcset&lt;/code&gt; and not height because the vast majority of responsive design is width constrained and not height, so to keep things simple, the specification only deals in widths.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-sizes-values-should-i-declare" class="anchor"&gt;
  &lt;/a&gt;
  What sizes values should I declare?
&lt;/h2&gt;

&lt;p&gt;The value of the &lt;code&gt;sizes&lt;/code&gt; attribute should specify the size of the rendered image in CSS pixel. It could be an absolute value e.g. &lt;code&gt;250px&lt;/code&gt; or relative to viewport size e.g. &lt;code&gt;33vw&lt;/code&gt; means 33% of viewport width. You can use comma-separated media conditions in the &lt;code&gt;sizes&lt;/code&gt; attribute to tell how rendered image width changes based on viewport size. For example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;sizes="(max-width: 300px) 100vw, (max-width: 600px) 50vw, (max-width: 900px) 33vw, 900px"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-image-sizes-should-i-provide-in-srcset" class="anchor"&gt;
  &lt;/a&gt;
  What image sizes should I provide in srcset?
&lt;/h2&gt;

&lt;p&gt;First, think about your layout i.e., CSS. Then accordingly, write  &lt;code&gt;sizes&lt;/code&gt;. And finally, choose breakpoints for  &lt;code&gt;srcset&lt;/code&gt; considering different DPR values and effective image sizes you need üôå.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-should-i-generate-different-size-image-assets" class="anchor"&gt;
  &lt;/a&gt;
  How should I generate different size image assets?
&lt;/h2&gt;

&lt;p&gt;You will need to provide different size image variants to implement responsive images. On a typical e-commerce or news website, this could be a huge problem as we are dealing with thousands of photos. The solution is to use an &lt;a href="https://imagekit.io/blog/what-is-image-cdn-guide/"&gt;image CDN&lt;/a&gt;. ImageKit.io is an image CDN that provides real-time image resizing, automatic image format conversion, and optimization. It offers a &lt;a href="https://imagekit.io/registration"&gt;forever free plan&lt;/a&gt; with generous bandwidth limits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-make-an-image-responsive-in-html" class="anchor"&gt;
  &lt;/a&gt;
  How do you make an image responsive in HTML?
&lt;/h2&gt;

&lt;p&gt;If you are wondering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to load different images based on screen size?&lt;/li&gt;
&lt;li&gt;How to change image size for mobile devices?&lt;/li&gt;
&lt;li&gt;How to display different images on mobile and desktop devices?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, know that all of these use-cases are related and can be solved using the latest responsive image techniques that we have discussed in this guide.&lt;/p&gt;

&lt;p&gt;Often you will only need &lt;a href="#chapter-4---srcset"&gt;&lt;code&gt;srcset&lt;/code&gt;&lt;/a&gt; attribute. In few cases you might want to use &lt;a href="#chapter-6---using-picture-element"&gt;&lt;code&gt;picture&lt;/code&gt;&lt;/a&gt; tag.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#srcset-not-working" class="anchor"&gt;
  &lt;/a&gt;
  Srcset not working
&lt;/h2&gt;

&lt;p&gt;You could face one problem while using &lt;code&gt;srcset&lt;/code&gt; in responsive images is that the browser is always using the largest image available. There could be two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you resized the window to test responsive image implementation and the browser has once loaded a high resolution bigger image, then it won‚Äôt load a smaller image again because it can use the largest one from the cache. It saves time &amp;amp; bandwidth. That is the whole point. It is specific to Chrome. &lt;/li&gt;
&lt;li&gt;You need to consider the DPR value into account. On the retina display, the browser will go for a wider image based on options available in &lt;code&gt;srcset&lt;/code&gt;. If 300px wide image is required and DPR is 2, the browser needs at-least 600px wide image. It might be confusing as you were expecting it to pick a 300px wide option from &lt;code&gt;srcset&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#client-hints-not-working" class="anchor"&gt;
  &lt;/a&gt;
  Client hints not working
&lt;/h2&gt;

&lt;p&gt;After client hints landing in Chrome 35, there were concerns around tracking users across multiple websites because of the device-related information passed through client hints. As a result, the Chrome team removed cross-origin client hints in the desktop version of Chrome 67, but they &lt;a href="https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/8RBFue7RMXQ/7TF4VPVzBAAJ"&gt;still work in mobile&lt;/a&gt;. These restrictions will be removed soon when work on &lt;a href="https://wicg.github.io/feature-policy/"&gt;Feature Policy&lt;/a&gt; is complete.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-a-background-image-responsive" class="anchor"&gt;
  &lt;/a&gt;
  How to make a background image responsive?
&lt;/h2&gt;

&lt;p&gt;Setting width and height is not enough when it comes to using background images. You can leverage the latest techniques to implement &lt;a href="#chapter-8---responsive-images-in-css"&gt;responsive images in CSS&lt;/a&gt; e.g. &lt;code&gt;image-set&lt;/code&gt; and well-known media queries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsive-images-srcset-vs-picture" class="anchor"&gt;
  &lt;/a&gt;
  Responsive images srcset vs picture?
&lt;/h2&gt;

&lt;p&gt;More often than not, you will only need &lt;a href="#chapter-5---srcset-with-sizes"&gt;srcset with sizes&lt;/a&gt; while implementing responsive images. That is because the primary use-case of responsive images is to load the right size image on different devices e.g. mobile or desktop. However, a picture tag is there if you need to implement art direction i.e. to load an entirely different image based on available screen width or device orientation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#picture-tag-not-working" class="anchor"&gt;
  &lt;/a&gt;
  Picture tag not working
&lt;/h2&gt;

&lt;p&gt;If the picture element is not working, ensure that you have the &lt;code&gt;img&lt;/code&gt; element inside the picture element. This acts as a fallback when the browser doesn‚Äôt support the picture element. You can also use a &lt;a href="https://github.com/scottjehl/picturefill"&gt;polyfill for picture&lt;/a&gt; element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-images-responsive-in-wordpress" class="anchor"&gt;
  &lt;/a&gt;
  How to make images responsive in WordPress?
&lt;/h2&gt;

&lt;p&gt;Responsive images landed in WordPress 4.4, making it easier for theme developers to implement responsive images in their themes. As soon as an image is uploaded in the media library, WordPress creates multiple different size variants and store them. When you embed the image in a post, the &lt;code&gt;img&lt;/code&gt; element has &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Default sizes attribute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By default, the value of the &lt;code&gt;size&lt;/code&gt; attribute is equivalent to -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(max-width: {{image-width}}px) 100vw, {{image-width}}px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, as a theme developer, you have the best knowledge of ideal image size, and you should override this default, as discussed below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuring responsive images for your theme&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Theme developers should use &lt;code&gt;wp_calculate_image_sizes&lt;/code&gt; helper function to create the &lt;code&gt;sizes&lt;/code&gt; attribute for an image. &lt;/p&gt;

&lt;p&gt;For example, the below hook will apply to all content and featured/thumbnail images. Thanks to &lt;a href="https://www.smashingmagazine.com/2015/12/responsive-images-in-wordpress-core/"&gt;Tim Evko&lt;/a&gt; for the code snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;adjust_image_sizes_attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$sizes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$size&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$sizes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'(max-width: 709px) 85vw, (max-width: 909px) 67vw, (max-width: 1362px) 62vw, 840px'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$sizes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;add_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wp_calculate_image_sizes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'adjust_image_sizes_attr'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also hook into &lt;code&gt;wp_calculate_image_srcset&lt;/code&gt; to calculate the image sources to include in a &lt;code&gt;srcset&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsive images in WordPress before 4.4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before version 4.4, you have to use the &lt;a href="https://wordpress.org/plugins/ricg-responsive-images/"&gt;RICG Responsive Images&lt;/a&gt; plugin. This plugin works by including all available image sizes for each image upload. Whenever WordPress outputs the image through the media uploader, or whenever a featured image is generated, those sizes will be included in the image tag via the &lt;code&gt;srcset&lt;/code&gt; attribute. This plugin doesn‚Äôt add a &lt;code&gt;sizes&lt;/code&gt; attribute, though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#questions" class="anchor"&gt;
  &lt;/a&gt;
  Questions
&lt;/h2&gt;

&lt;p&gt;We hope this guide helped you understand the responsive images in HTML and CSS. If you have a question, feel free to comment or email on &lt;a href="mailto:support@imagekit.io"&gt;support@imagekit.io&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>useState &amp;&amp; useEffect ‚öõ</title>
      <author>Vipin Chandra</author>
      <pubDate>Tue, 24 Nov 2020 05:56:44 +0000</pubDate>
      <link>https://dev.to/easyvipin/usestate-useeffect-7e</link>
      <guid>https://dev.to/easyvipin/usestate-useeffect-7e</guid>
      <description>&lt;p&gt;In &lt;code&gt;Feb 2019&lt;/code&gt; React hooks were introduced to react community &lt;br&gt;
(React 16.8).&lt;br&gt;
This new react feature solves one of the biggest problems faced by every react developers.&lt;/p&gt;

&lt;p&gt;You can skip the problem section but it'll be good to know about what motivated React developers to bring hooks to the React.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#problems" class="anchor"&gt;
  &lt;/a&gt;
  Problems
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Render props - Before Hooks, functional components were stateless due to which &lt;code&gt;state needs to be passed to the functional component through props&lt;/code&gt; and if the application is &lt;code&gt;too large&lt;/code&gt; then the &lt;code&gt;drilling of props&lt;/code&gt; was one of the &lt;code&gt;obstacle&lt;/code&gt; developers need to go through.&lt;/li&gt;
&lt;li&gt;High order component - HOC wraps the component to give extra power like state but it also creates &lt;code&gt;wrap hell&lt;/code&gt; as the application scale and application become too abstracted.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's explore Hooks now üí•&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#hooks" class="anchor"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hooks is just a group of functions which Provide extra features to the Functional component by hooking to the core feature of react.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;like State &lt;code&gt;useState()&lt;/code&gt; , Lifecycle &lt;code&gt;useEffect()&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#usestate" class="anchor"&gt;
  &lt;/a&gt;
  useState
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;useState()&lt;/code&gt; is a hook function which enable developers to use State in functional component.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;usage of useState&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStars&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;stars hold the initial value 3 is just like the state with the initial value.&lt;/li&gt;
&lt;li&gt;setStars is the function which will set the stars like the 
this.setState.&lt;/li&gt;
&lt;li&gt;useState receive initial value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;We can set multiple states variable by using useState again and again.&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStars&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMovie&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The martian&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserInfo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
 &lt;span class="na"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;john@example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-of-usestate" class="anchor"&gt;
  &lt;/a&gt;
  Example of useState
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStars&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;netflix&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;Martian&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setStars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Change&lt;/span&gt; &lt;span class="nx"&gt;Rating&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;‚≠ê&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Output&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qeKQQ-Xk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m62gau0llbrs1phrlrb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qeKQQ-Xk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m62gau0llbrs1phrlrb.jpg" alt="Screenshot 2020-11-17 220149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/romantic-voice-lwwrr?file=/src/App.js:0-351"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;setStars set the value of the star by incrementing one to the previous value. So every time you click the button the stars &lt;br&gt;
 increment.&lt;br&gt;
Thus useState lets you to change and set state for functional component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Every time we set a new state value the component rerender.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#useeffect" class="anchor"&gt;
  &lt;/a&gt;
  useEffect
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;useEffect()&lt;/code&gt; is a hook function which enable developers to use group of lifecycle method like &lt;br&gt;
 componentDidMount ( ) , componentDidUpdate( ) , componentWillUnmount() in functional component.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;useEffect runs after every render and most of the side effects (Like Network Request , subscription) are performed under this function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// network requests&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  
 &lt;span class="p"&gt;,[&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;useEffect( ) has two parameters , function and Array variable.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;function contains the code which you want to execute after &lt;br&gt;
every render.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Array contains a state variable names for which you want to run the useEffect.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Since the useEffect() functions are run on every subsequent re-render/update, we can tell React to skip a run, for performance purposes, by adding a second parameter which is an array that contains a list of state variables to watch for. React will only re-run the side effect if one of the items in this array changes.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#lot-of-english-lets-understand-raw-useeffect-endraw-through-code" class="anchor"&gt;
  &lt;/a&gt;
  Lot of English lets understand &lt;code&gt;useEffect&lt;/code&gt; through code.
&lt;/h6&gt;

&lt;p&gt;In this example, we will make a simple bookmark app.&lt;br&gt;
This app will get a post from the API and the user can bookmark it.&lt;br&gt;
Thats it! small app :).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DVWPQ3RT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ht4lv99cmdnofknel7ik.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DVWPQ3RT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ht4lv99cmdnofknel7ik.jpg" alt="Screenshot 2020-11-24 111709"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/relaxed-mestorf-gqsxu?file=/src/App.js"&gt;Demo&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPost&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStatus&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Requesting....&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDisplay&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/todos/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Recieved&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setDisplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;BookMark&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thats lot of code right ?&lt;/p&gt;

&lt;p&gt;Lets understand this in pieces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-part" class="anchor"&gt;
  &lt;/a&gt;
  State part
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;we have 3 state variable in this small app&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPost&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStatus&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Requesting....&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDisplay&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Post&lt;/code&gt; will be used to store the post received from api &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;status&lt;/code&gt; is basically used to keep track of the request status 
(Requesting or Received).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;display&lt;/code&gt; will be used to toggle the display of bookmark button.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#jsx-part" class="anchor"&gt;
  &lt;/a&gt;
  Jsx part
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;BookMark&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;status of request and post will be displayed on the page along with button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useeffect-part" class="anchor"&gt;
  &lt;/a&gt;
  useEffect part
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Recieved&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setDisplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As we know, use effect is basically used to perform side Effect (API request). So it's obvious that we will make our API request in the useEffect function.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;fetch&lt;/code&gt; will get the post for us from API&lt;/li&gt;
&lt;li&gt;As soon as we retrieve our post, setStatus will set the status 
to &lt;code&gt;setStatus(received)&lt;/code&gt; and the display of our button will be 
toggled through &lt;code&gt;setDisplay(" ")&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In any case, if we have any error in between the process the 
&lt;code&gt;catch()&lt;/code&gt; will be executed further setting the status to 
&lt;code&gt;Error&lt;/code&gt;;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now our little useEffect application is complete.&lt;/p&gt;

&lt;p&gt;I hope this article somehow helped you to understand the basic concepts of hooks üòÑ.&lt;br&gt;
There's a lot more about hooks, so please go through the official react hooks docs too.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to useRef to Fix React Performance Issues</title>
      <author>sidney alcantara</author>
      <pubDate>Tue, 24 Nov 2020 00:59:18 +0000</pubDate>
      <link>https://dev.to/notsidney/how-to-useref-to-fix-react-performance-issues-e8p</link>
      <guid>https://dev.to/notsidney/how-to-useref-to-fix-react-performance-issues-e8p</guid>
      <description>&lt;h3&gt;
  &lt;a href="#and-how-we-stopped-our-react-context-rerendering-everything" class="anchor"&gt;
  &lt;/a&gt;
  And how we stopped our React Context re-rendering everything
&lt;/h3&gt;

&lt;p&gt;Refs are a seldom-used feature in React. If you‚Äôve read the &lt;a href="https://reactjs.org/docs/refs-and-the-dom.html"&gt;official React guide&lt;/a&gt;, they‚Äôre introduced as an ‚Äúescape hatch‚Äù out of the typical React data flow, with a warning to use them sparingly, and they‚Äôre primarily billed as the correct way to access a component‚Äôs underlying DOM element.&lt;/p&gt;

&lt;p&gt;But alongside the concept of Hooks, the React team introduced the &lt;a href="https://reactjs.org/docs/hooks-reference.html#useref"&gt;&lt;code&gt;useRef&lt;/code&gt;&lt;/a&gt; Hook, which extends this functionality:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;useRef()&lt;/code&gt; is useful for more than the &lt;code&gt;ref&lt;/code&gt; attribute. It‚Äôs &lt;a href="https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables"&gt;handy for keeping any mutable value around&lt;/a&gt; similar to how you‚Äôd use instance fields in classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While I overlooked this point when the new Hook APIs launched, it proved to be surprisingly useful.&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="#the-solution"&gt;Click here to skip to the solution and code snippets&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h1&gt;

&lt;p&gt;I‚Äôm a software engineer working on &lt;a href="https://firetable.io/?utm_source=dev.to&amp;amp;utm_medium=blog&amp;amp;utm_campaign=How%20to%20useRef%20to%20Fix%20React%20Performance%20Issues"&gt;Firetable&lt;/a&gt;, an open-source React app that combines a spreadsheet UI with the full power of Firestore and Firebase. One of its key features is the &lt;strong&gt;side drawer&lt;/strong&gt;, a form-like UI to edit a single row, that slides over the main table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQy0lV1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j0revf9wzbzehbcvvc40.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQy0lV1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j0revf9wzbzehbcvvc40.gif" alt="Screen recording of a user selecting a cell and opening the side drawer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the user clicks on a cell in the table, the side drawer can be opened to edit that cell‚Äôs corresponding row. In other words, what we render in the side drawer is dependent on the currently selected row‚Ää‚Äî‚Ääthis should be stored in state.&lt;/p&gt;

&lt;p&gt;The most logical place to put this state is within the side drawer component itself because when the user selects a different cell, it should &lt;em&gt;only&lt;/em&gt; affect the side drawer. However:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We need to &lt;em&gt;set&lt;/em&gt; this state from the table component. We‚Äôre using &lt;a href="https://github.com/adazzle/react-data-grid"&gt;&lt;code&gt;react-data-grid&lt;/code&gt;&lt;/a&gt; to render the table itself, and it accepts a callback prop that‚Äôs called whenever the user selects a cell. Currently, it‚Äôs the only way to respond to that event.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But the side drawer and table components are siblings, so they can‚Äôt directly access each other‚Äôs state.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React‚Äôs recommendation is to &lt;a href="https://reactjs.org/docs/lifting-state-up.html"&gt;lift this state&lt;/a&gt; to the components‚Äô closest common ancestor, in this case, &lt;code&gt;TablePage&lt;/code&gt;. But we decided against moving the state here because:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;TablePage&lt;/code&gt; didn‚Äôt contain any state and was primarily a container for the table and side drawer components, neither of which received any props. We preferred to keep it this way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We were already sharing a lot of ‚Äúglobal‚Äù data via a &lt;a href="https://reactjs.org/docs/context.html"&gt;context&lt;/a&gt; located close to the root of the component tree, and we felt it made sense to add this state to that central data store.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;small&gt;&lt;i&gt;Side note: even if we put the state in &lt;code&gt;TablePage&lt;/code&gt;, we would have run into the same problem below anyway.&lt;/i&gt;&lt;/small&gt;

&lt;p&gt;The problem was whenever the user selected a cell or opened the side drawer, the update to this global context would cause &lt;strong&gt;the entire app to re-render&lt;/strong&gt;. This included the main table component, which could have dozens of cells displayed at a time, each with its own editor component. This would result in a render time of around &lt;strong&gt;650 ms&lt;/strong&gt;(!), long enough to see a visible delay in the side drawer‚Äôs open animation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4iF-lk5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfq9p10yml5smp2fr34n.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4iF-lk5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfq9p10yml5smp2fr34n.gif" alt="Screen recording of delay in side drawer open animation"&gt;&lt;/a&gt;&lt;/p&gt;
Notice the delay between clicking the open button and when the side drawer animates to open



&lt;p&gt;The reason behind this is a key feature of context‚Ää‚Äî‚Ääthe very reason why it‚Äôs better to use in React as opposed to global JavaScript variables:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All consumers that are descendants of a Provider will re-render whenever the Provider‚Äôs &lt;code&gt;value&lt;/code&gt; prop changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While this Hook into React‚Äôs state and lifecycle has served us well so far, it seems we had now shot ourselves in the foot.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-aha-moment" class="anchor"&gt;
  &lt;/a&gt;
  The Aha Moment
&lt;/h1&gt;

&lt;p&gt;We first explored a few different solutions (from &lt;a href="https://github.com/facebook/react/issues/15156#issuecomment-474590693"&gt;Dan Abramov‚Äôs post&lt;/a&gt; on the issue) before settling on &lt;code&gt;useRef&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Split the context, i.e. create a new &lt;code&gt;SideDrawerContext&lt;/code&gt;.&lt;/strong&gt;&lt;br&gt;
The table would still need to consume the new context, which still updates when the side drawer opens, &lt;a href="https://reactjs.org/docs/hooks-reference.html#usecontext"&gt;causing the table to re-render&lt;/a&gt; unnecessarily.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Wrap the table component in &lt;code&gt;React.memo&lt;/code&gt; or &lt;code&gt;useMemo&lt;/code&gt;.&lt;/strong&gt;&lt;br&gt;
The table would still need to call &lt;code&gt;useContext&lt;/code&gt; to access the side drawer‚Äôs state and &lt;a href="https://reactjs.org/docs/react-api.html#reactmemo"&gt;neither API prevents it from causing re-renders&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Memoize the &lt;code&gt;react-data-grid&lt;/code&gt; component used to render the table.&lt;/strong&gt;&lt;br&gt;
This would have introduced more verbosity to our code. We also found it prevented &lt;em&gt;necessary&lt;/em&gt; re-renders, requiring us to spend more time fixing or restructuring our code entirely, solely to implement the side drawer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While reading through the Hook APIs and &lt;code&gt;useMemo&lt;/code&gt; a few more times, I finally came across that point about &lt;code&gt;useRef&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;useRef()&lt;/code&gt; is useful for more than the &lt;code&gt;ref&lt;/code&gt; attribute. It‚Äôs &lt;a href="https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables"&gt;handy for keeping any mutable value around&lt;/a&gt; similar to how you‚Äôd use instance fields in classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And more importantly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;useRef&lt;/code&gt; &lt;em&gt;doesn‚Äôt&lt;/em&gt; notify you when its content changes. Mutating the¬†&lt;code&gt;.current&lt;/code&gt; property &lt;strong&gt;doesn‚Äôt cause a re-render&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that‚Äôs when it hit me:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-didnt-need-to-store-the-side-drawers-state%E2%80%8A%E2%80%8Awe-only-needed-a-reference-to-the-function-that-sets-that%C2%A0state" class="anchor"&gt;
  &lt;/a&gt;
  We didn‚Äôt need to store the side drawer‚Äôs state‚Ää‚Äî‚Ääwe only needed a reference to the function that sets that¬†state.
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#the-solution" class="anchor"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Keep the open and cell states in the side drawer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a ref to those states and store it in the context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Call the set state functions (inside the side drawer) using the ref from the table when the user clicks on a cell.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oxvk-65s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2p8ts12f5je2aretjp9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oxvk-65s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2p8ts12f5je2aretjp9p.png" alt="Diagram representing the preceding list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code below is an abbreviated version of the code used on Firetable and includes the TypeScript types for the ref:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;small&gt;&lt;i&gt;Side note: since function components run the entire function body on re-render, whenever the &lt;code&gt;cell&lt;/code&gt; or &lt;code&gt;open&lt;/code&gt; state updates (and causes a re-render), &lt;code&gt;sideDrawerRef&lt;/code&gt; always has the latest value in¬†&lt;code&gt;.current&lt;/code&gt;.&lt;/i&gt;&lt;/small&gt;

&lt;p&gt;This solution proved to be the best since:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The current cell and open states are stored inside the side drawer component itself, the most logical place to put it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The table component has access to its sibling‚Äôs state &lt;em&gt;when&lt;/em&gt; it needs it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When either the current cell or open states are updated, it only triggers a re-render for the side drawer component and not any other component throughout the app.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can see how this is used in Firetable &lt;a href="https://github.com/AntlerVC/firetable/blob/master/www/src/contexts/firetableContext.tsx#L179"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/AntlerVC/firetable/blob/master/www/src/components/SideDrawer/index.tsx#L37"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#when-to-useref" class="anchor"&gt;
  &lt;/a&gt;
  When to useRef
&lt;/h1&gt;

&lt;p&gt;This doesn‚Äôt mean you should go ahead and use this pattern for everything you build, though. It‚Äôs best used for when you &lt;strong&gt;need to access or update another component‚Äôs state at specific times, but your component doesn‚Äôt depend or render based on that state&lt;/strong&gt;. React‚Äôs core concepts of lifting state up and one-way data flow are enough to cover most app architectures anyway.&lt;/p&gt;




&lt;p&gt;Thanks for reading! You can find out more about &lt;a href="https://firetable.io/?utm_source=dev.to&amp;amp;utm_medium=blog&amp;amp;utm_campaign=How%20to%20useRef%20to%20Fix%20React%20Performance%20Issues"&gt;Firetable&lt;/a&gt; below and follow me on Twitter &lt;a href="https://twitter.com/nots_dney"&gt;@nots_dney&lt;/a&gt; as I write more about what we‚Äôre building at &lt;a href="https://twitter.com/AntlerEng"&gt;Antler Engineering&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/AntlerVC"&gt;
        AntlerVC
      &lt;/a&gt; / &lt;a href="https://github.com/AntlerVC/firetable"&gt;
        firetable
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Excel/Google Sheets like UI for Firebase/Firestore. No more admin portals!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://firetable.io" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3ba2e2d5751fc15017562a66fda8872ce5c5334a6a12108a186322bcaca7f26d/68747470733a2f2f666972657461626c652e696f2f736f6369616c2d696d6167652e6a7067" alt="Firetable: Combine the power of Firestore with the simplicity of spreadsheets"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://github.com/AntlerVC/firetable/blob/master/LICENSE"&gt;
    &lt;img src="https://camo.githubusercontent.com/98ad9d23634f00cc8e27dde1767e9e6fcfa7dc172b560ed07b92b64ed8076d3b/68747470733a2f2f62616467656e2e6e65742f6769746875622f6c6963656e73652f416e746c657256432f666972657461626c65"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/AntlerVC/firetable/commits/develop"&gt;
    &lt;img src="https://camo.githubusercontent.com/3d859a48d7767b17a25a369be5a3995c5aca22283bdd47d059ac19fce3c7ba87/68747470733a2f2f62616467656e2e6e65742f6769746875622f6c6173742d636f6d6d69742f416e746c657256432f666972657461626c652f646576656c6f70"&gt;
  &lt;/a&gt;
  &lt;a href="https://npmjs.com/package/firetable" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/c31f50b9bd3a221e3f491e14aef2f26fc84d66212ff7ec8d2c4c1965e8a0c990/68747470733a2f2f62616467656e2e6e65742f6e706d2f762f666972657461626c65"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
Features&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spreadsheet interface for viewing Firestore collections, documents, and
subcollections.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add, edit, and delete rows&lt;/li&gt;
&lt;li&gt;Sort and filter by row values&lt;/li&gt;
&lt;li&gt;Resize and rename columns&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;27 different column types
&lt;a href="https://github.com/AntlerVC/firetable/wiki/Column-Types"&gt;Read more&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic types: Short Text, Long Text, Email, Phone, URL‚Ä¶&lt;/li&gt;
&lt;li&gt;Custom UI pickers: Date, Checkbox, Single Select, Multi Select‚Ä¶&lt;/li&gt;
&lt;li&gt;Uploaders: Image, File&lt;/li&gt;
&lt;li&gt;Rich Editors: JSON, Code, Rich Text (HTML)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Powerful access controls with custom user roles
&lt;a href="https://github.com/AntlerVC/firetable/wiki/Role-Based-Security-Rules"&gt;Read more&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supercharge your database with your own scripts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Action field: trigger any Cloud Function&lt;/li&gt;
&lt;li&gt;Derivative field: populate cell with value derived from the rest of the
row‚Äôs values&lt;/li&gt;
&lt;li&gt;Aggregate field: populate cell with value aggregated from the row‚Äôs
sub-table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrations with external services.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connect Table uses Algolia to get a snapshot of another table‚Äôs row values&lt;/li&gt;
&lt;li&gt;Connect Service uses any HTTP endpoint to get a cell value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Firetable makes it easy to use key Firebase products&lt;/h2&gt;
&lt;p&gt;
  &lt;a href="https://firebase.google.com/products/firestore" rel="nofollow"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---XgOfNKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/AntlerVC/firetable/wiki/images/firebase/firestore.png" alt="Cloud Firestore" width="32%"&gt;
  &lt;/a&gt;
  &lt;a href="https://firebase.google.com/products/auth" rel="nofollow"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--veDYy3_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/AntlerVC/firetable/wiki/images/firebase/authentication.png" alt="Firebase Authentication" width="32%"&gt;
  &lt;/a&gt;
  &lt;a href="https://firebase.google.com/products/functions" rel="nofollow"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iExBUmqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/AntlerVC/firetable/wiki/images/firebase/functions.png" alt="Firebase Functions" width="32%"&gt;
  &lt;/a&gt;
  &lt;a href="https://firebase.google.com/products/hosting" rel="nofollow"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rtxvYDpy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/AntlerVC/firetable/wiki/images/firebase/hosting.png" alt="Firebase Hosting" width="32%"&gt;
  &lt;/a&gt;
  &lt;a href="https://firebase.google.com/products/storage" rel="nofollow"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSDkAR31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/AntlerVC/firetable/wiki/images/firebase/storage.png" alt="Firebase Storage" width="32%"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
&lt;a href="https://try.firetable.io" rel="nofollow"&gt;Live demo ‚Üí&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://try.firetable.io" rel="nofollow"&gt;&lt;br&gt;
  &lt;img alt="Firetable demo GIF" src="https://camo.githubusercontent.com/e2166800f38ce536894d11cea8e45dadb3c90dea80e5ca592810b032d955f45f/68747470733a2f2f666972657461626c652e696f2f64656d6f2e676966"&gt;&lt;br&gt;
&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
Getting started&lt;/h1&gt;

&lt;p&gt;To set‚Ä¶&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/AntlerVC/firetable"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;p&gt;If you‚Äôre launching a product and are hungry to build your next company, Antler would love to hear from you. We‚Äôre accepting applications all across the world! &lt;a href="https://www.antler.co/apply?utm_source=Firetable&amp;amp;utm_medium=blog&amp;amp;utm_campaign=How%20to%20useRef%20to%20Fix%20React%20Performance%20Issues&amp;amp;utm_content=TechTracking"&gt;Apply here.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>performance</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>.Net 5 is PERFECT for DevOps</title>
      <author>Davide Benvegn√π</author>
      <pubDate>Tue, 24 Nov 2020 00:48:02 +0000</pubDate>
      <link>https://dev.to/n3wt0n/net-5-is-perfect-for-devops-4afd</link>
      <guid>https://dev.to/n3wt0n/net-5-is-perfect-for-devops-4afd</guid>
      <description>&lt;p&gt;.Net 5 has finally reached the &lt;strong&gt;General Availability&lt;/strong&gt; stage last week during the .Net Conf 2020. But is .Net 5 a good framework for DevOps?&lt;/p&gt;

&lt;p&gt;Today I want to talk about it, but from a DevOps and CICD standpoint. Let me show you why I think &lt;strong&gt;&lt;em&gt;.Net 5 is perfect for DevOps&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;If you have been following the me he or on my &lt;a href="https://youtube.com/CoderDave"&gt;YouTube Channel&lt;/a&gt; for a while, you've probably noticed that most of my examples and demos which require some code are done in .Net. In fact &lt;strong&gt;I've been a .Net developer for years&lt;/strong&gt; and, although I'm proficient in other langugaes like Java, Ruby and Node.js, &lt;strong&gt;.Net is still my favorite language&lt;/strong&gt;. However, I have to say that in the past .Net was not super DevOps-friendly, especially in its .Net Framework flavor.&lt;/p&gt;

&lt;p&gt;But after using .Net five for a while, and following it GA release last week, Im now convinced that it is just perfect for DevOps and CICD scenarios.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video" class="anchor"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have the video with the whole explanation and demo, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-2LcsiXLw88"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://youtu.be/-2LcsiXLw88"&gt;Link to the video: https://youtu.be/-2LcsiXLw88&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-net-5" class="anchor"&gt;
  &lt;/a&gt;
  What is .Net 5?
&lt;/h3&gt;

&lt;p&gt;Alright, lets jump into the topic. Let me start with a &lt;strong&gt;brief introduction&lt;/strong&gt; of what .Net 5 is. If you already now this, feel free to jump to the next section.&lt;/p&gt;

&lt;p&gt;So What is .Net 5?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fruI6sAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i3yy08osc06hd053ybz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fruI6sAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i3yy08osc06hd053ybz4.png" alt="Release"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a &lt;strong&gt;major release&lt;/strong&gt; of .Net, with a broad set of new features and compelling improvements. It‚Äôs actually already in active use by teams at Microsoft and other companies, in production and for performance testing.&lt;/p&gt;

&lt;p&gt;Most importantly, .NET 5.0 is the first release in the &lt;strong&gt;.NET unification journey&lt;/strong&gt;. .NET 5.0 has been built to enable a much larger group of developers to migrate their .NET Framework code and apps to .NET 5.0. It also includes much of the early work in 5.0 so that Xamarin developers can use the unified .NET platform when .NET 6.0 will be released.&lt;/p&gt;

&lt;p&gt;Speaking of which, there will be a major release every year, with .Net 6 coming in November 2021, and of course with minor releases if needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lXEEewWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2f3w8ew5x4vfhbt0w0v7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lXEEewWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2f3w8ew5x4vfhbt0w0v7.png" alt="Schedule"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is worth noting that &lt;strong&gt;.Net 5 doesn't replace the .Net Framework&lt;/strong&gt;, and in fact .Net Framework 4.x is and will still be supported, and there are no plans to migrate WebForms, WCF and Workflow Foundation to .Net 5 or higher.&lt;/p&gt;

&lt;p&gt;Also, &lt;strong&gt;.Net 5 doesn't replace .Net Standard&lt;/strong&gt;, it will just not be necessary anymore because there won't be different APIs in different flavors of .Net. New application development can specify the net5.0 target framework moniker for all project types, including class libraries and so sharing code between .NET 5 workloads is simplified. And same would be true for .Net 6 and higher.&lt;/p&gt;

&lt;p&gt;Alright, now that we have an overview about .Net 5, let see why I think it's perfect for DevOps and CICD.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-net-momentum" class="anchor"&gt;
  &lt;/a&gt;
  1. .Net Momentum
&lt;/h3&gt;

&lt;p&gt;First of all, .Net in general is &lt;strong&gt;one of the most used frameworks&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are more than 2 million active .Net Core developers and more than 5 millions active .Net Developers, and those people would be able to switch to .Net 5 very easily.&lt;/p&gt;

&lt;p&gt;Also, .Net Core, which .Net 5 is the evolution of, is the number 1 &lt;strong&gt;most loved framework&lt;/strong&gt; accordingly to the StackOverflow framework for 2 years in a row.&lt;/p&gt;

&lt;p&gt;Furthermore, C# (which is the main language used in both .Net Framework and .Net Core) is the 5th most used language on GitHub.&lt;/p&gt;

&lt;p&gt;Lastly, Asp.net Core is the number 1 web application platform by performance in the upcoming TechEmpower Benchmarks&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t_eblc0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pwpmpw6nq84plr4y8ti5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t_eblc0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pwpmpw6nq84plr4y8ti5.png" alt="Momentum"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this without mentioning the more than 40% of the developers new to .Net are students and that the whole .Net project not only is completely Open Source, but is also one of the projects with the highest velocity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Put this all together, and you have something truly great for DevOps. Why? A performant framework which developers love and that is well known by the community. Your teams will be happy using it, and you'll be able to quickly find new developers should you need to expand your teams.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#2-performances" class="anchor"&gt;
  &lt;/a&gt;
  2. Performances
&lt;/h3&gt;

&lt;p&gt;Speaking about performances, those have been really improved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ciuEJMOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t81bi6chuh2wwn0xq73l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciuEJMOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t81bi6chuh2wwn0xq73l.png" alt="Performance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not only .Net 5 is over &lt;strong&gt;30% more performant&lt;/strong&gt; on socket on Linux over .Net Core 3.1, which performances were already pretty good, but also the JSON serialization performance has been improved about 20%.&lt;/p&gt;

&lt;p&gt;And for a modern application development, especially when talking about MicroServices, .Net 5 gRPC performance has been improved so much that now it &lt;strong&gt;exceeds the one of Go, C++ and Java&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;While RPS (requests per seconds) are important, they are not everything. Most of the time in fact the &lt;strong&gt;performance of an application&lt;/strong&gt; and ultimately the number of machine cores needed to run it &lt;strong&gt;depends on latency&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The team did an incredible job about it as well, and worked a ton on the Garbage collector of .Net 5, and now the latency is the lowest ever provided by any .Net Framework and .Net Core version.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Again, this is great for DevOps and especially for the Ops part: &lt;strong&gt;better performance + less latency means less computing power needed in production&lt;/strong&gt; and hopefully less headaches.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3-compilation-time" class="anchor"&gt;
  &lt;/a&gt;
  3. Compilation Time
&lt;/h3&gt;

&lt;p&gt;And talking about compute, there is also less compute needed for CI. &lt;strong&gt;The compiler in fact is now much more optimized, and offer great performances&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the right side of the image here we have a small project, which targets .Net Core 3.1 and it is been built by the compiler that ships with the .Net Core SDK version 3.1.404&lt;/p&gt;

&lt;p&gt;On the left side instead we have the exact same project, but I've retargeted it to .Net 5 and it's been built by the compiler that ships with the .Net 5 SDK version 5.0.100&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wca-wovI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7bzviyjejdgl3spp8zxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wca-wovI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7bzviyjejdgl3spp8zxf.png" alt="Build Time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, &lt;strong&gt;the difference is massive&lt;/strong&gt;. The .Net Core 3.1 compiler takes more than 2 and a half second in average to build the solution, while the .Net 5 compiler consistently stay below 0.9 seconds.&lt;/p&gt;

&lt;p&gt;And in bigger solutions this difference is even greater.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not only it builds faster, but &lt;strong&gt;the resources consumed by the compiler in term of CPU and Ram are lower&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think we can all agree that the team did a fantastic job here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-container-images" class="anchor"&gt;
  &lt;/a&gt;
  4. Container Images
&lt;/h3&gt;

&lt;p&gt;Let's stay in the CICD territory, and let's talk about containers.&lt;/p&gt;

&lt;p&gt;Containers are of course one of the most important cloud trends and the &lt;strong&gt;.Net team has been investing significantly&lt;/strong&gt; in them. There are a number of improvements in the lower levels of .Net 5 that make it &lt;strong&gt;perfect to run in containers&lt;/strong&gt;, but probably the most visible one is the &lt;strong&gt;optimization of the provided container images&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As part of .NET 5.0, the team has re-based the SDK image on top of the ASP.NET image instead of &lt;em&gt;buildpack-deps&lt;/em&gt; to dramatically reduces the size of the aggregate images you pull in multi-stage build scenarios.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wxdPande--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nyj31jtv5ykywcu3egpw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wxdPande--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nyj31jtv5ykywcu3egpw.png" alt="Containers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the image, the SDK image size &lt;em&gt;has been reduced somewhere between 30 and 65 Mb&lt;/em&gt;. But the biggest improvement is in the runtime image.&lt;br&gt;
If you do this as a multi-stage build, your runtime images will be between 4 and 10kb! And this is possible because all the layers you need are already in the SDK image, so you have them already and therefore you &lt;strong&gt;just download and store the manifest&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With this change, the Asp.Net pull (for example), will be a no-op, because you will have pulled the Asp.Net layers via the initial sdk pull.&lt;/p&gt;

&lt;p&gt;This will allow you to &lt;strong&gt;save up to 40% of the storage&lt;/strong&gt; space for your images. You will see significant size wins for Alpine and Nano Server as well with 5.0, for multi-stage builds.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Smaller images means not only less storage needed, but also &lt;strong&gt;faster pull and therefore faster startup&lt;/strong&gt; of your containerized image when pulling from scratch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And if you need to run your containers on Windows, we now have Windows Server Core images, in addition to Nano Server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-multiplatform" class="anchor"&gt;
  &lt;/a&gt;
  5. Multiplatform
&lt;/h3&gt;

&lt;p&gt;Which brings me to the next point. .Net Core was already multi platform, but .Net 5 is even more multiplatform... it has &lt;strong&gt;the widest OS support of any .Net version before&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In fact it runs on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows 7 SP1, 8.1 and 10, on both x86 and x64 architectures and for the first time ever on &lt;strong&gt;Arm64&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Windows Server and Windows Server Core 2012 R2 and higher, on both x86 and x64, and Nano Server 1809 and higher on x64&lt;/li&gt;
&lt;li&gt;Linux: all the major distributions including Alpine, CentOS, Debian, RedHat, Suse, Ubuntu and more, mostly on the x64 architecture but in some cases supporting also Arm32 and Arm64&lt;/li&gt;
&lt;li&gt;MacOS, from the version 10.13 onwards, on the x64 architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This translate to being able to build a .Net 5 application on &lt;strong&gt;virtually any CI agent&lt;/strong&gt;, whether it is hosted or self-hosted, physical or virtual, Windows or Linux. And of course it also means that you'll be able to &lt;strong&gt;deploy your application to any of the abovementioned platforms&lt;/strong&gt;, for a total flexibility.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From a DevOps standpoint it also means &lt;strong&gt;you can choose the platform&lt;/strong&gt; you and your team are more familiar with, and that gives you more performances and reliability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, .Net 5 is already available in both Azure Pipelines and GitHub Actions, so you can build it with no problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-single-file-applications" class="anchor"&gt;
  &lt;/a&gt;
  6. Single File Applications
&lt;/h3&gt;

&lt;p&gt;Finally, and still talking about CICD, one of my favorite features: &lt;strong&gt;&lt;em&gt;Single File Applications&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Single file applications are published and deployed as a &lt;strong&gt;single file&lt;/strong&gt;. The app and sll its dependencies are all included within that file.&lt;/p&gt;

&lt;p&gt;Even tho Single File Applications were already a think in .Net Core, their &lt;strong&gt;behavior is completely different&lt;/strong&gt;. In .Net Core 3.1, in fact, it packages binaries into a single file for deployment and then unpacks those files to a temporary directory to load and execute them. With .Net 5 instead when the app is run t_&lt;em&gt;he dependencies are loaded directly from that file into memory&lt;/em&gt;_ (with no performance penalty). A big improvement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_w-AXZnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ofel02h5lulz8kcez1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_w-AXZnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ofel02h5lulz8kcez1i.png" alt="SFA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can create a Single File Application using either the command line or tools like Visual Studio. You can also configure the single file publishing directly in the project file.&lt;/p&gt;

&lt;p&gt;Remember that in .Net 5.0, single file apps can be either &lt;em&gt;framework-dependent&lt;/em&gt; or &lt;em&gt;self-contained&lt;/em&gt;. Framework-dependent single file apps can be very small, by relying on a globally-installed .NET runtime. Self-contained single-file apps are larger (due to carrying the runtime), but do not require installation of the .NET runtime as an installation pre-step and will just work as a result.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why Single File Apps are great for DevOps? Well, your CD will thank you. Having to transfer and publish a single file &lt;strong&gt;is much faster and has much less latency&lt;/strong&gt; than doing so with multiple files. And if you're thinking "I can do the same with a zip file", remember that in .Net 5 Single File applications don't have to be unzipped... so again, &lt;strong&gt;faster and more optimized&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#recap" class="anchor"&gt;
  &lt;/a&gt;
  Recap
&lt;/h3&gt;

&lt;p&gt;So, to recap... Why is .Net 5 great for DevOps?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2yNCeQ_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jzj8sdzvwo61za8bfoc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2yNCeQ_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jzj8sdzvwo61za8bfoc1.png" alt="Recap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;momentum&lt;/strong&gt; of the .Net frameworks and ecosystem is &lt;strong&gt;great&lt;/strong&gt;, and the team worked a lot on &lt;strong&gt;performance improvement&lt;/strong&gt;. .Net 5 is the most performant .Net ever.&lt;/p&gt;

&lt;p&gt;It is also great for CICD, because of &lt;strong&gt;single file applications&lt;/strong&gt;, &lt;strong&gt;smaller container images&lt;/strong&gt;, and super &lt;strong&gt;fast build&lt;/strong&gt; time.&lt;/p&gt;

&lt;p&gt;Finally, it is truly &lt;strong&gt;multiplatform&lt;/strong&gt;, being able to run on Windows, Linux and MacOS, on the x86, x64, &lt;strong&gt;Arm32 and Arm64&lt;/strong&gt; architectures.&lt;/p&gt;

&lt;p&gt;Remember to &lt;a href="https://youtu.be/-2LcsiXLw88"&gt;watch the video for a full-length explanation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Alright, that's it for today. Of Course .Net 5 has many other improvements and awesome features, but the ones we have seen today are for me the most important ones when it comes to DevOps and CICD.&lt;/p&gt;

&lt;p&gt;What do you think? Let me know in the comment section below what your favorite features are, and if you agree with me in saying that .Net 5 is perfect for DevOps.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>devops</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>üçø Keeping Up With the JavaScripts</title>
      <author>Katie Hughes</author>
      <pubDate>Mon, 23 Nov 2020 23:36:05 +0000</pubDate>
      <link>https://dev.to/glitteringkatie/keeping-up-with-the-javascripts-lc3</link>
      <guid>https://dev.to/glitteringkatie/keeping-up-with-the-javascripts-lc3</guid>
      <description>&lt;p&gt;In July 2020 I found myself as part of the many people affected by COVID-19 related layoffs. Before that, I was writing anything from Elm to Ruby to Elixir at NoRedInk. And before &lt;em&gt;that&lt;/em&gt; I was working with JavaScript and React for three years at AppNexus.&lt;/p&gt;

&lt;p&gt;It was fun to get the chance to write Elm professionally! But when I found myself looking for a new job, I decided I was ready to get back into the mainstream. After not writing any JavaScript for a year and a half, I was hired at Elastic under the posting of "JavaScript Engineer".&lt;/p&gt;

&lt;p&gt;So how did I brush up on JavaScript?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hooks" class="anchor"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h2&gt;

&lt;p&gt;Through my JavaScript gap year (and a half), I still followed JavaScript community members on Twitter, which gave me a rough idea of what was happening. At least, I was aware of functional components and React hooks (but not enough to know they were related concepts).&lt;/p&gt;

&lt;p&gt;I checked in with some friends in a former-coworkers slack and they said, "Yes, learning hooks IS worth your time!" and also, "Yes, actually read &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React's documentation&lt;/a&gt; because it is actually good" (mildly paraphrased). They haven't lied to me about JavaScript yet so I went with it and used that as my jumping-off point.&lt;/p&gt;

&lt;p&gt;I did actually read all of React's documentation on hooks and I'm here to tell you: Yes, it is actually good documentation! When I felt good with my hooks knowledge, I looked into Elastic's component library (&lt;a href="https://elastic.github.io/eui/"&gt;EUI&lt;/a&gt;) for some real-life examples.&lt;/p&gt;

&lt;p&gt;A particular question I had in mind was around setState: is it more common to see one call to setState with an object representing state? Or more common to see multiple calls to setState, each with their own variable that would normally make up the state object?&lt;/p&gt;

&lt;p&gt;I figured looking up a form would easily tell me that since forms usually have multiple variables tracked in the state. I found &lt;a href="https://elastic.github.io/eui/#/forms/form-layouts#form-and-form-rows"&gt;a form example&lt;/a&gt; and the answer to my question: multiple calls to setState!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#muscle-memory" class="anchor"&gt;
  &lt;/a&gt;
  Muscle memory
&lt;/h2&gt;

&lt;p&gt;Alongside learning about what had &lt;em&gt;changed&lt;/em&gt; about React (not as much as I thought would have changed), I also wanted to get my muscle memory for JavaScript back. Brush off the dust, so to speak.&lt;/p&gt;

&lt;p&gt;I wasn't sure how to go about this at first. I tried &lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt; but remember, I've written JavaScript professionally for three years so while Codecademy was great when I was learning, I wasn't starting from square one. Turns out the best way to re-acclimate is... just to write JavaScript. I had a few different paths for this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tarot-side-project" class="anchor"&gt;
  &lt;/a&gt;
  Tarot side project
&lt;/h3&gt;

&lt;p&gt;Before really diving in deep, I tried to give myself about a week off from stressing (guess what: stress still happened). During this time I at least found the space to be creative and came up with a fun project! In typical side project fashion, it is not finished at the time of writing this post but will hopefully be good fodder for a future post.&lt;/p&gt;

&lt;p&gt;I wanted to build a tarot deck companion web app: you pull a card, the computer tells you what it means. The trick with future telling type stuff is to keep things as vague as possible so that was the route I took.&lt;/p&gt;

&lt;p&gt;I got to play with a natural language processing library, &lt;a href="https://github.com/NaturalNode/natural"&gt;Natural&lt;/a&gt;, and a sentence templating library, &lt;a href="http://kylestetz.github.io/Sentencer/"&gt;Sentencer&lt;/a&gt;. I'll keep the longer description for another blog post but all in all: having something I was excited to work on, and doing that in JavaScript, really helped me get my JavaScript muscle memory back.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interviewcake" class="anchor"&gt;
  &lt;/a&gt;
  InterviewCake
&lt;/h3&gt;

&lt;p&gt;When I was interviewing, &lt;a href="https://www.interviewcake.com/"&gt;InterviewCake&lt;/a&gt; had an amazing deal to support folks who had been laid off due to the coronavirus pandemic. It felt like a far more enjoyable read than some nameless interview books out there and it had interactive examples!&lt;/p&gt;

&lt;p&gt;Every weekday I gave myself a goal of InterviewCake problems to get through and this really helped me brush up on my JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-blog" class="anchor"&gt;
  &lt;/a&gt;
  This blog
&lt;/h3&gt;

&lt;p&gt;I had been wanting to move away from Medium for a while but didn't want to over-engineer a personal blog. When I was interviewing for my current job, they mentioned that the project I'd be joining was currently written in Gatsby. Given those two facts and my free time, I figured it was time to play with Gatsby.&lt;/p&gt;

&lt;p&gt;Building up my blog was really one of the first times during my interview prep where I felt like I was in a real React codebase--not just some toy interview question. It felt really nice to be back.&lt;/p&gt;

&lt;p&gt;I did over-engineer one thing: at the bottom of the page where there is usually a "Made with ‚ù§Ô∏è" statement, I added functionality to randomize the emoji from some of my favorites. I &lt;em&gt;then&lt;/em&gt; decided that I should take seasons into account and added in some date checking to bring in Halloween and birthday emojis (September, October) or Christmas and winter emojis (November, December). Being excited about a little piece of functionality made JavaScript practice feel like play instead of work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#on-the-collective-mind" class="anchor"&gt;
  &lt;/a&gt;
  On the collective mind
&lt;/h2&gt;

&lt;p&gt;For more conversational interviews, I wanted to figure out what the JavaScript collective was thinking about. I skimmed through titles of talks from React Conf 2019 and that was helpful.&lt;/p&gt;

&lt;p&gt;One talk that I watched was &lt;a href="https://www.youtube.com/watch?v=wUMMUyQtMSg"&gt;The State of React State in 2019&lt;/a&gt; by &lt;a href="https://twitter.com/beccaliz"&gt;Becca Bailey&lt;/a&gt;. This helped me see how thoughts on state had changed since hooks came out. It was a great broad overview for me to get up to date.&lt;/p&gt;

&lt;p&gt;I also watched &lt;a href="https://www.youtube.com/watch?v=ONSD-t4gBb8"&gt;Accessibility Is a Marathon, not a Sprint&lt;/a&gt; by &lt;a href="https://twitter.com/BrittanyIRL"&gt;Brittany Feenstra&lt;/a&gt;. When I was writing Elm, there was a strong push for accessibility to be a default. I was really interested to see how the React community was thinking about it. I was glad to see the push for not breaking semantic HTML since when I left, it was totally fine to leave divs all over the place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#practice-interviews" class="anchor"&gt;
  &lt;/a&gt;
  Practice interviews
&lt;/h2&gt;

&lt;p&gt;In addition to all of this prep, practice interviews with friends who work in JavaScript day-to-day also really helped. I got the practice of pretending I'm in an interview but at the end, I also got to ask, "Okay, what is out of date in the JavaScript I wrote? Can you help me modernize this with hooks?"&lt;/p&gt;

&lt;p&gt;When I last was writing JavaScript, I was working with the best practice that if you're using &lt;a href="https://lodash.com/docs"&gt;lodash&lt;/a&gt;, just use it for everything even if &lt;a href="https://developer.mozilla.org/tr/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype"&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt; has the given function. During practice interviews, I got to learn that people now lean towards &lt;code&gt;Array.prototype&lt;/code&gt; functions &lt;em&gt;first&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Verifying my assumptions and understandings with someone who works day to day in JavaScript significantly helped me gain my JavaScript confidence back.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-month-in" class="anchor"&gt;
  &lt;/a&gt;
  One month in
&lt;/h2&gt;

&lt;p&gt;I am writing JavaScript again! One month in, I have had a few moments where I've gone to write something and it comes out in pseudocode-gibberish (looking at you, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch"&gt;switch/case&lt;/a&gt;), but for the most part, I'm back to writing JavaScript fluidly again.&lt;/p&gt;

&lt;p&gt;In my first computer science class in high school, we were learning Pascal, something my CS teacher admitted was outdated for 2010. But my teacher told us something that has always stuck with me: focus on the &lt;em&gt;semantics&lt;/em&gt; not the syntax. I've been able to hop around to different languages because I know my core concepts, learning the syntax of a language can come second.&lt;/p&gt;

&lt;p&gt;I was hired because of how I think as an engineer, not because I can write a given language. And in the end, an employer with that order of priorities is the kind I want to work for.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>career</category>
      <category>react</category>
    </item>
    <item>
      <title>Deploying your React app has never been simpler with Github Pages</title>
      <author>tenexcoder</author>
      <pubDate>Mon, 23 Nov 2020 23:17:54 +0000</pubDate>
      <link>https://dev.to/tenexcoder/deploying-your-react-app-has-never-been-simpler-with-github-pages-1jmi</link>
      <guid>https://dev.to/tenexcoder/deploying-your-react-app-has-never-been-simpler-with-github-pages-1jmi</guid>
      <description>&lt;p&gt;Remember the time you were trying to share progress with a client or wanted to showcase your next side projects? We all been there hoping things could be only a few clicks away.&lt;/p&gt;

&lt;p&gt;Well fear not your wishes have been granted, there is now a free and simple approach of Deploying your React apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#package-ghpages" class="anchor"&gt;
  &lt;/a&gt;
  Package: gh-pages
&lt;/h2&gt;

&lt;p&gt;I present to you &lt;a href="https://github.com/tschaub/gh-pages"&gt;gh-pages&lt;/a&gt; which I quote allows you to ‚ÄúPublish files to a &lt;code&gt;gh-pages&lt;/code&gt; branch on GitHub (or any other branch anywhere else).‚Äù&lt;br&gt;
The package automate the mundane step required to deploy your react app to GitHub Pages into three simple steps.&lt;br&gt;
Technically this package can help you deploy any static site as long as the base directory of the static files is set accordingly ‚Äî more on this in Step 2&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-add-raw-homepage-endraw-to-raw-packagejson-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Add &lt;code&gt;homepage&lt;/code&gt; to &lt;code&gt;package.json&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The step below is important!&lt;/em&gt;&lt;br&gt;
&lt;em&gt;If you skip it, your app will not deploy correctly.&lt;/em&gt;&lt;br&gt;
Open your &lt;code&gt;package.json&lt;/code&gt; and add a &lt;code&gt;homepage&lt;/code&gt; field for your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚Äúhomepage‚Äù: ‚Äúhttps://myusername.github.io/my-app",
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or for a GitHub user page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚Äúhomepage‚Äù: ‚Äúhttps://myusername.github.io",
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or for a custom domain page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚Äúhomepage‚Äù: ‚Äúhttps://mywebsite.com",
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Create React App uses the &lt;code&gt;homepage&lt;/code&gt; field to determine the root URL in the built HTML file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-install-raw-ghpages-endraw-and-add-raw-deploy-endraw-to-raw-scripts-endraw-in-raw-packagejson-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Install &lt;code&gt;gh-pages&lt;/code&gt; and add &lt;code&gt;deploy&lt;/code&gt; to &lt;code&gt;scripts&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Now, whenever you run npm run build, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.&lt;br&gt;
To publish it at &lt;a href="https://myusername.github.io/my-app"&gt;https://myusername.github.io/my-app&lt;/a&gt;, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install ‚Äî save gh-pages
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Alternatively you may use yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add gh-pages
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Add the following scripts in your package.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚Äúscripts‚Äù: {
+ ‚Äúpredeploy‚Äù: ‚Äúnpm run build‚Äù,
+ ‚Äúdeploy‚Äù: ‚Äúgh-pages -d build‚Äù,
‚Äústart‚Äù: ‚Äúreact-scripts start‚Äù,
‚Äúbuild‚Äù: ‚Äúreact-scripts build‚Äù,
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;predeploy&lt;/code&gt; script will run automatically before deploy is run.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;deploy&lt;/code&gt; script will automagically deploy your app.&lt;/p&gt;

&lt;p&gt;Note: The &lt;code&gt;-d&lt;/code&gt; option is to point to the base directory of the static files. Set it according to your project‚Äôs configuration. For example the base directory for &lt;code&gt;create-react-app&lt;/code&gt; is &lt;code&gt;build&lt;/code&gt; by default, meanwhile for a &lt;code&gt;webpack&lt;/code&gt; configuration it is &lt;code&gt;dist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are deploying to a GitHub user page instead of a project page you‚Äôll need to make one additional modification:&lt;br&gt;
Tweak your &lt;code&gt;package.json&lt;/code&gt; scripts to push deployments to master:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚Äúscripts‚Äù: {
‚Äúpredeploy‚Äù: ‚Äúnpm run build‚Äù,
- ‚Äúdeploy‚Äù: ‚Äúgh-pages -d build‚Äù,
+ ‚Äúdeploy‚Äù: ‚Äúgh-pages -b master -d build‚Äù,
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Step 3: Deploy the site by running &lt;code&gt;npm run deploy&lt;/code&gt;&lt;br&gt;
Then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#for-a-project-page-ensure-your-projects-settings-use-raw-ghpages-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  For a project page, ensure your project‚Äôs settings use &lt;code&gt;gh-pages&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Finally, make sure GitHub Pages option in your GitHub project settings is set to use the &lt;code&gt;gh-pages&lt;/code&gt; branch:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0alkkrs_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HUjEr9l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0alkkrs_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HUjEr9l.png" alt="gh-pages branch"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#optionally-configure-the-domain" class="anchor"&gt;
  &lt;/a&gt;
  Optionally, configure the domain
&lt;/h2&gt;

&lt;p&gt;You can configure a custom domain with GitHub Pages by adding a &lt;code&gt;CNAME&lt;/code&gt; file to the &lt;code&gt;public/&lt;/code&gt; folder.&lt;br&gt;
Your CNAME file should look like this:&lt;br&gt;
Copy&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mywebsite.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;For more details check out the repository or create react app docs which this guide was heavily based on.&lt;br&gt;
&lt;a href="https://github.com/tschaub/gh-pages"&gt;https://github.com/tschaub/gh-pages&lt;/a&gt;&lt;br&gt;
&lt;a href="https://create-react-app.dev/docs/deployment/#github-pages"&gt;https://create-react-app.dev/docs/deployment/#github-pages&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>github</category>
    </item>
    <item>
      <title>How to detect inactive users with Idle Detection API</title>
      <author>Antonio Erdeljac</author>
      <pubDate>Mon, 23 Nov 2020 22:56:14 +0000</pubDate>
      <link>https://dev.to/antonioerdeljac/how-to-detect-inactive-users-with-idle-detection-api-18af</link>
      <guid>https://dev.to/antonioerdeljac/how-to-detect-inactive-users-with-idle-detection-api-18af</guid>
      <description>&lt;p&gt;This post is a summary of a &lt;a href="https://web.dev/idle-detection/"&gt;web.dev article&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-idle-detection-api" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is the Idle Detection API?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Idle Detection API is one of Chrome's origin trials, which means it is a feature in progress planned for a release.&lt;/p&gt;

&lt;p&gt;Idle Detection API can be used to detect user inactivity based on a variety of measurements such as a mouse or keyboard inactivity, screensaver activation, or locking the screen. The threshold is defined by the developer, based on the desired result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage-of-the-idle-detection-api" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Usage of the Idle Detection API&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Check if &lt;strong&gt;idleDetector&lt;/strong&gt; is available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasDetectorAPI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IdleDetector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Request permission for &lt;strong&gt;idleDetector&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;IdleDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestPermission&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Starting the &lt;strong&gt;idleDetector&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;detector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IdleDetector&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;detector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// idle | active&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screenState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// locked | unlocked&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;detector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-cases-of-idle-detection-api" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Use cases of Idle Detection API&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Some examples where Idle Detection API can be utilized:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apps with &lt;strong&gt;expensive computation&lt;/strong&gt; (to put halt to computation)&lt;/li&gt;
&lt;li&gt;Chatrooms (to handle &lt;strong&gt;activity status&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Forms / Documents (to &lt;strong&gt;autosave&lt;/strong&gt; on user inactivity)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;... and many other use cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support-idle-detection-api-release" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Support Idle Detection API release&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you wish to see and use this API, check out this &lt;a href="https://web.dev/idle-detection/#show-support-for-the-api"&gt;link&lt;/a&gt; on how to support its release.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>chrome</category>
      <category>news</category>
    </item>
    <item>
      <title>How to test media queries with Chrome</title>
      <author>Camilo Martinez</author>
      <pubDate>Mon, 23 Nov 2020 22:43:10 +0000</pubDate>
      <link>https://dev.to/equiman/how-to-test-media-queries-with-chrome-5d8c</link>
      <guid>https://dev.to/equiman/how-to-test-media-queries-with-chrome-5d8c</guid>
      <description>&lt;p&gt;Whether you want it to or not, modern web development is directly tied to responsive design. There are media queries everywhere, even &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; and &lt;a href="http://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; use some sort of breakpoints related to that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#media-query-viewer" class="anchor"&gt;
  &lt;/a&gt;
  Media Query Viewer
&lt;/h1&gt;

&lt;p&gt;Sometimes we think it's hard to test it, but Chrome DevTools has a hidden gem to deal and handle easily with those breakpoints. I will show you how to activate this superpower.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Chrome DevTools&lt;/li&gt;
&lt;li&gt;Enable Mobile view&lt;/li&gt;
&lt;li&gt;Ensure select "Responsive" on the device list.&lt;/li&gt;
&lt;li&gt;Select "show media queries"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eslBzHAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sar2s4fv688fb1ydi93g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eslBzHAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sar2s4fv688fb1ydi93g.gif" alt="media-queries"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#query-bars" class="anchor"&gt;
  &lt;/a&gt;
  Query Bars
&lt;/h1&gt;

&lt;p&gt;Depending on media queries defined on the page you would see 4 bars in different colors.&lt;/p&gt;

&lt;p&gt;Preset sizes (Gray):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WwuoVlA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fftkagwy6tbxb1n6ao0h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwuoVlA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fftkagwy6tbxb1n6ao0h.gif" alt="preset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Max width (Blue):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iyNkAOsl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ovbpktpxtxa39ygpgwu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyNkAOsl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ovbpktpxtxa39ygpgwu.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Max and Min width (Green):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ghxa6Haz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sly1zfodefwo5h5auzft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghxa6Haz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sly1zfodefwo5h5auzft.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Min width (Orange)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6JqZmgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yhk81mlqklzcvrrsajkd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6JqZmgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yhk81mlqklzcvrrsajkd.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h1&gt;

&lt;p&gt;The Bootstrap page it's an excellent opportunity to see this feature in action because has multiple types of media queries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hUicy0-F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c2b2gqfc1xos5sn34tat.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hUicy0-F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c2b2gqfc1xos5sn34tat.gif" alt="example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#source-code" class="anchor"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h1&gt;

&lt;p&gt;You can also right-click over a selected media query and see it directly on the source code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMUfQfOR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6u2ck7sbxv0b7kxh4xao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMUfQfOR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6u2ck7sbxv0b7kxh4xao.png" alt="source"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-track" class="anchor"&gt;
  &lt;/a&gt;
  Bonus Track
&lt;/h1&gt;

&lt;p&gt;If you want to see all media queries in action at the same time I'll recommend you take a look at &lt;a href="https://responsively.app/"&gt;Responsively&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CCMZaEeb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4nbmm85xniooghsv59bu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CCMZaEeb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4nbmm85xniooghsv59bu.png" alt="responsively"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's an amazing and open source project that will make your job easier as a developer.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;That‚Äôs All Folks!&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Happy Coding&lt;/strong&gt; üññ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/equiman"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbQqp7D6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/im18z7jhm102axyxiapk.png" alt="Buy me a cofee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>css</category>
    </item>
    <item>
      <title>Good Bye Web APIs</title>
      <author>Manuel Vila</author>
      <pubDate>Mon, 23 Nov 2020 20:26:17 +0000</pubDate>
      <link>https://dev.to/mvila/good-bye-web-apis-2bel</link>
      <guid>https://dev.to/mvila/good-bye-web-apis-2bel</guid>
      <description>&lt;p&gt;When building a &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;single-page application&lt;/a&gt; or a mobile application, we usually need to implement a web API (REST or GraphQL) to connect the frontend and the backend. Technically, it's not very difficult, but it has some unfortunate consequences.&lt;/p&gt;

&lt;p&gt;Imagine two planets. The planet "frontend" speaks JavaScript and the planet "backend" also speaks JavaScript or any other advanced language.&lt;/p&gt;

&lt;p&gt;Now let's say that these planets need to collaborate extensively to form a whole called "application".&lt;/p&gt;

&lt;p&gt;Unfortunately, the planets are unable to communicate with each other directly using their native language and they have to rely on a third party called "web API" which speaks a much less sophisticated language.&lt;/p&gt;

&lt;p&gt;Indeed, the language of most web APIs is limited to a combination of URLs, a few HTTP verbs (GET, POST, DELETE, etc.), and some JSON.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLrOKXvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4jf4ioy2841npvbihshz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLrOKXvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4jf4ioy2841npvbihshz.png" alt="Frontend + Web API + Backend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The web APIs that speak GraphQL are more advanced but they remain far behind the possibilities of a programming language such as JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The programming paradigm is procedural or functional (no object-oriented programming).&lt;/li&gt;
&lt;li&gt;Only the most basic types are supported (forget about Date, Map, Set, etc.).&lt;/li&gt;
&lt;li&gt;The concept of reference is missing (you can only pass objects by value).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Placing a rudimentary language between the frontend and the backend adds a lot of boilerplate and ruins the development experience.&lt;/p&gt;

&lt;p&gt;Another problem is that a web API is an extra layer to worry about. It must be designed, implemented, tested, documented, etc. And all this is frankly a pain in the ass.&lt;/p&gt;

&lt;p&gt;But the worst thing is that the API layer generally forces you to degrade the quality of your codebase. Indeed, it's quite challenging to keep your code DRY and cohesive when your frontend and your backend are separated by a web API.&lt;/p&gt;

&lt;p&gt;Now imagine that we could get rid of the web API. Imagine that the frontend could communicate directly with the backend using its native language. Wouldn't it be great?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wCtDsQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ggelge7utvo2cbpgte2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wCtDsQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ggelge7utvo2cbpgte2l.png" alt="Frontend + Backend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The good news is that it's possible today thanks to a set of libraries called &lt;a href="https://github.com/layrjs/layr"&gt;Layr&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-layr" class="anchor"&gt;
  &lt;/a&gt;
  Hello, Layr!
&lt;/h2&gt;

&lt;p&gt;With &lt;a href="https://github.com/layrjs/layr"&gt;Layr&lt;/a&gt;, the frontend and the backend are &lt;em&gt;physically&lt;/em&gt; separated (they run in different environments) but &lt;em&gt;logically&lt;/em&gt; reunited (it's as if they were in the same environment).&lt;/p&gt;

&lt;p&gt;How does it work?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The backend is composed of one or more classes whose some of their attributes and methods are explicitly exposed to the frontend.&lt;/li&gt;
&lt;li&gt;The frontend generates some proxies to the backend classes and can use these proxies as if they were regular JavaScript classes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Under the hood, Layr relies on an &lt;a href="https://en.wikipedia.org/wiki/Remote_procedure_call"&gt;RPC&lt;/a&gt; mechanism. So, superficially, it can be seen as something like &lt;a href="https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture"&gt;CORBA&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Java_remote_method_invocation"&gt;Java RMI&lt;/a&gt;, or &lt;a href="https://en.wikipedia.org/wiki/Windows_Communication_Foundation"&gt;.NET CWF&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But Layr is radically different:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's not a &lt;a href="https://en.wikipedia.org/wiki/Distributed_object"&gt;distributed object system&lt;/a&gt;. A Layr backend is stateless, so there are no shared objects across the stack.&lt;/li&gt;
&lt;li&gt;It doesn't involve any boilerplate code, generated code, configuration files, or artifacts.&lt;/li&gt;
&lt;li&gt;It uses a simple but powerful serialization protocol (&lt;a href="https://deepr.io"&gt;Deepr&lt;/a&gt;) that enables unique features such as chained invocation, automatic batching, or partial execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Layr starts its journey in JavaScript/TypeScript, but the problem it tackles is universal, and it could be ported to any object-oriented language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Let's implement the classic "Counter" example to see what it looks like to build a full-stack application with Layer.&lt;/p&gt;

&lt;p&gt;First, we implement the "data model" and the "business logic" in the backend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// backend.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;primaryIdentifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;expose&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@layr/component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ComponentHTTPServer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@layr/component-http-server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// We need a primary identifier so a Counter instance&lt;/span&gt;
  &lt;span class="c1"&gt;// can be transported between the frontend and the backend&lt;/span&gt;
  &lt;span class="c1"&gt;// while keeping it's identity&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;primaryIdentifier&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// The counter value is exposed to the frontend&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// And the "business logic" is exposed as well&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;call&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Lastly, we serve the Counter class through an HTTP server&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ComponentHTTPServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3210&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Oh my! All that code just for a simple "Counter" example? Sure, it seems overkill, but we've actually implemented a full-grade backend with a data model, some business logic, and an HTTP server exposing the whole thing.&lt;/p&gt;

&lt;p&gt;Now that we have a backend, we can consume it from a frontend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// frontend.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ComponentHTTPClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@layr/component-http-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// We create a client to connect to the backend server&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ComponentHTTPClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3210&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// We get a proxy to the Counter backend class&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Lastly, we consume the Counter&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 0&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 1&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 2&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What's going on here? By invoking the &lt;code&gt;counter.increment()&lt;/code&gt; method the counter value is incremented. Note that this method does not exist in the frontend. It is implemented in the backend and is therefore executed in this environment. But from the perspective of the frontend, the actual execution environment doesn't matter. The fact that the method is executed remotely can be seen as an implementation detail.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Counter&lt;/code&gt; class in the frontend can be extended to implement features that are specific to the frontend. Here's an example of how to override the &lt;code&gt;increment()&lt;/code&gt; method to display a message when the counter reaches a certain value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExtendedCounter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We call the `increment()` method in the backend&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// We execute some additional code in the frontend&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The counter value is 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is what it looks like when the frontend and the backend are reunited. Pretty cool isn't it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-catch" class="anchor"&gt;
  &lt;/a&gt;
  What's the Catch?
&lt;/h2&gt;

&lt;p&gt;Why does everyone build web APIs when we could do without them?&lt;/p&gt;

&lt;p&gt;There is a good reason to implement a web API, it's when you want to expose your backend to a third-party developer. But let's be honest, the vast majority of applications don't have this requirement. And if it turns out that you need a web API, it is possible to add it afterward while continuing to use the "API-less" approach for all your internal needs.&lt;/p&gt;

&lt;p&gt;So there is no catch. Really.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Removing the web API allows you to build a full-stack application much faster while increasing the quality of your codebase.&lt;/p&gt;

&lt;p&gt;By using &lt;a href="https://github.com/layrjs/layr"&gt;Layr&lt;/a&gt; on several projects, including some production projects, I was able to reduce the amount of code by &lt;a href="https://github.com/layrjs/react-layr-realworld-example-app/blob/master/docs/comparison.md"&gt;50% on average&lt;/a&gt; and greatly increase my productivity.&lt;/p&gt;

&lt;p&gt;Another important aspect is the development experience. Since the frontend and the backend are no longer separated by a web API, you get a feeling similar to developing a standalone application, and it's a lot more fun.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>api</category>
    </item>
    <item>
      <title>My thoughts after using React for the past 3 months: Tips for new developers! üë®‚Äçüíª</title>
      <author>Fahad Imran üë®‚Äçüíª</author>
      <pubDate>Mon, 23 Nov 2020 20:15:22 +0000</pubDate>
      <link>https://dev.to/fahadimran/my-thoughts-after-using-react-for-the-past-3-months-tips-for-new-developers-567g</link>
      <guid>https://dev.to/fahadimran/my-thoughts-after-using-react-for-the-past-3-months-tips-for-new-developers-567g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hang-on-whats-react" class="anchor"&gt;
  &lt;/a&gt;
  ü§∑‚Äç‚ôÇÔ∏è Hang on... What's React?
&lt;/h2&gt;

&lt;p&gt;React is one of the most popular Front-End JavaScript frameworks. Developed by &lt;strong&gt;Facebook&lt;/strong&gt; in &lt;strong&gt;2013&lt;/strong&gt;, it is actively maintained as an &lt;strong&gt;open-source project&lt;/strong&gt; and has made building complex user interfaces easier. That's why it is one of the &lt;strong&gt;most loved frameworks&lt;/strong&gt; even in 2020.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-i-started-learning-react" class="anchor"&gt;
  &lt;/a&gt;
  üå≥ Why I started learning React?
&lt;/h2&gt;

&lt;p&gt;I, like many front-end developers, started learning React after I had become comfortable writing HTML, CSS, and JavaScript. Because of their extensive usage in the market, I knew I had to learn a &lt;strong&gt;JavaScript framework&lt;/strong&gt; as well. I thought long and hard before making my decision between React, Vue, and Angular. I finally settled on React because I liked the flexibility it provided and I knew that, because of its popularity, I would have no trouble finding help online in case I got stuck.&lt;/p&gt;

&lt;p&gt;Thus, I have been using React for the past &lt;strong&gt;3 months&lt;/strong&gt;, in various projects, to learn what's it all about. Naturally, as a new developer starting out with React, I gained much-needed insights into the state of the React ecosystem. I am sharing some of my thoughts for new developers who are learning React or are considering switching to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OK, enough blabbering. Let's jump into the fun stuff!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flexibility" class="anchor"&gt;
  &lt;/a&gt;
  üîß Flexibility
&lt;/h2&gt;

&lt;p&gt;The first thing I noticed when I started working with React is, how &lt;strong&gt;flexible&lt;/strong&gt; it was, and how much &lt;strong&gt;freedom&lt;/strong&gt; it provided to the developers. At the core, React is just a basic library, but the functionality can be easily added on top of it by different libraries and packages.&lt;/p&gt;

&lt;p&gt;The best thing about React is that there are &lt;strong&gt;no restrictions or strict guidelines&lt;/strong&gt; in terms of &lt;strong&gt;coding style&lt;/strong&gt; that you have to follow. You can choose to create your components however you want, whether it be a class or functional components, you can adopt styled-components or choose to split your application into dumb and smart components to ensure separation of concerns. Everything is up to the developer. Sure, there are some recommended best practices that you can follow, but no one is going to shove a certain application structure, down your throat if you don't like it.&lt;/p&gt;

&lt;p&gt;While this flexibility is definitely &lt;strong&gt;welcome&lt;/strong&gt; to some developers, others might argue that it makes it &lt;strong&gt;difficult for newbies&lt;/strong&gt; to get started. I, also somewhat agree with this point of view. As a new React developer myself, I was initially quite confused at what the correct way was to create Apps with React. Since &lt;strong&gt;every&lt;/strong&gt; tutorial and article I looked at was telling me a different way of doing things. It was only later that I realized that there is no best way to write React. As long as you become comfortable with the core concepts like Components, State, props, JSX, etc. you can pretty much &lt;strong&gt;adopt the style that works best for you&lt;/strong&gt;. So, that's what I have been doing for some time now, and it is working fine so far.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-in-html-say-hello-to-jsx" class="anchor"&gt;
  &lt;/a&gt;
  üòÆ JavaScript in HTML? Say Hello to JSX!
&lt;/h2&gt;

&lt;p&gt;React uses what we call &lt;strong&gt;JSX&lt;/strong&gt;, which is a mixture of JavaScript and HTML. Though, at first I despised the idea of JSX, since, we have been taught from the beginning that it's a &lt;strong&gt;bad practice&lt;/strong&gt; to mix in JavaScript with your markup. Here's what it looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;
  &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;editInput&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;getTodoText&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getEdittedText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mt-4"&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"input-group"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Add a todo item..."&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt;
      &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;editInput&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;getInputValue&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;changeEditValue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;editInput&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;editInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"input-group-append"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getClassName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;editInput&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getButtonName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But after some practice, I realized the &lt;strong&gt;power&lt;/strong&gt; it brings to the table. By having your markup and JavaScript together, you can effectively control the entire functioning of the App from a single source. Here's the reasoning that React provides:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called ‚Äúcomponents‚Äù that contain both."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In simpler terms, instead of separating the entire app logic from markup, React separates out the app into &lt;strong&gt;different components&lt;/strong&gt; which contain both their &lt;strong&gt;respective logic and markup.&lt;/strong&gt; This ensures that even though individual components contain both HTML and JavaScript, yet the entire App is well separated into different components that handle &lt;strong&gt;separate functionalities&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;üëâ While writing JSX might seem daunting at first, trust me, you'll get used to it in no time and will enjoy it too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-javascript-before-react-please" class="anchor"&gt;
  &lt;/a&gt;
  üôè Learn JavaScript before React Please!
&lt;/h2&gt;

&lt;p&gt;When you start learning React, one thing you will quickly understand is the importance of having &lt;strong&gt;strong grasp over JavaScript Fundamentals.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While React might use JSX, but at its core, it's just a mash-up of HTML and Vanilla JavaScript. Without a sound knowledge of JavaScript, you'll have a hard time understanding and using React. Because you will be learning both React and JavaScript at the same time and you won't be able to master either of them.&lt;/p&gt;

&lt;p&gt;In order to excel at React, a good understanding of JavaScript is &lt;strong&gt;must.&lt;/strong&gt; Especially the new &lt;strong&gt;ES6 syntax.&lt;/strong&gt; It is essential that you understand concepts like arrow functions, object destructing, higher-order array methods, JavaScript objects, arrays, etc. As more often than not you will have to use them in your React Apps.&lt;/p&gt;

&lt;p&gt;I cannot tell how many times I had to use higher-order array methods like &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; or how many times I created functions using the arrow function syntax.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#map-higher-order-method" class="anchor"&gt;
  &lt;/a&gt;
  map() higher order method
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"list-group mt-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;itemList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Item&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#arrow-function" class="anchor"&gt;
  &lt;/a&gt;
  Arrow function
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"m-3"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You are on the About Page üòé&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-dark mx-3 my-2"&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Back To Home
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thus, my advice to new devs, starting out with React is, to first &lt;strong&gt;master the basics of JavaScript&lt;/strong&gt; before moving on to React. It will not only make your life easier, but you will also understand the core concepts of React better, instead of fiddling around with JavaScript concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#class-vs-functional-components" class="anchor"&gt;
  &lt;/a&gt;
  üõ†Ô∏è Class Vs Functional Components
&lt;/h2&gt;

&lt;p&gt;When I was starting out with React, I got confused between choosing &lt;strong&gt;Class components and Functional Components&lt;/strong&gt; for my projects. The major difference between them apart from their &lt;strong&gt;syntax&lt;/strong&gt;, was that if you were using class components, then you could use &lt;strong&gt;State&lt;/strong&gt; in your component, something which was not possible in functional components at that time. Furthermore, with class components, you had access to life cycle methods like &lt;code&gt;componentDidMount()&lt;/code&gt;, &lt;code&gt;componentDidUpdate()&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;Here's a quick comparison between a very simple class and functional component:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-typical-class-component" class="anchor"&gt;
  &lt;/a&gt;
  A typical Class Component
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;YourComponentName&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi, I am a class component.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#a-typical-functional-component" class="anchor"&gt;
  &lt;/a&gt;
  A typical Functional Component
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;YourComponentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi, I am a functional component.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, the easy recommendation was that, if you wanted to make your component stateful, you would use class components, if not then you would use functional components. Easy, right? &lt;strong&gt;Well... not necessarily.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just as this concept was about to make sense, I discovered &lt;strong&gt;React Hooks&lt;/strong&gt;. I will go more into detail about what Hooks are, and why they are awesome in a later section, but the long and short is that, React Hooks allow us to add state and life cycle methods to functional components.&lt;/p&gt;

&lt;p&gt;So, your functional components now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;YourComponentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi, I am a stateful functional component.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At first, I was quite bummed, to say the least, as I had become accustomed to using class components. But, after using functional components with hooks for some time, I was &lt;strong&gt;hooked&lt;/strong&gt; üòâ. Now, I have switched to &lt;strong&gt;exclusively using functional components&lt;/strong&gt; in all my applications as they are &lt;strong&gt;short and concise&lt;/strong&gt; and anytime I need state in my components, I can easily add it through hooks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-power-of-react-hooks" class="anchor"&gt;
  &lt;/a&gt;
  ‚ö° The Power of React Hooks!
&lt;/h2&gt;

&lt;p&gt;Now let's talk about &lt;strong&gt;React Hooks&lt;/strong&gt;. Hooks were introduced in &lt;strong&gt;React 16.8&lt;/strong&gt;. Hooks allow you to &lt;strong&gt;use state and life cycle methods in functional components&lt;/strong&gt;. Thus, they allow you to write functional components that are essentially the same as class components since they can include state and other React features.&lt;/p&gt;

&lt;p&gt;According to the official documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are &lt;strong&gt;different types of hooks&lt;/strong&gt; and each is as useful as the next. I won't go into details about each and every hook but will show a brief example of how I have used them. If you want more information about Hooks consider looking up the official documentation.&lt;/p&gt;

&lt;p&gt;The most common hook is the &lt;code&gt;useState&lt;/code&gt; hook which allows you to &lt;strong&gt;add state to any functional component&lt;/strong&gt;. It is extremely easy to use and comes in handy more often than not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMsg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The message is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Another hook which I have used in my projects is the &lt;code&gt;useEffect&lt;/code&gt; hook which is similar to the &lt;strong&gt;life cycle methods&lt;/strong&gt; &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt;. So, if you want to make &lt;strong&gt;API calls&lt;/strong&gt; or use any other &lt;strong&gt;side effects&lt;/strong&gt;, useEffect is the hook to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/stationeryItems&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, if you want to add Redux like functionality in your application, there are &lt;strong&gt;2&lt;/strong&gt; hooks which mimic the core state management features. These are &lt;code&gt;useContext&lt;/code&gt; and &lt;code&gt;useReducer&lt;/code&gt; hooks. These along with the &lt;strong&gt;new Context API&lt;/strong&gt; allow for complete state management without using Redux.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#usereducer-hook" class="anchor"&gt;
  &lt;/a&gt;
  useReducer hook
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// useReducer() hook&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LibraryReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#usecontext-hook" class="anchor"&gt;
  &lt;/a&gt;
  useContext hook
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// useContext() hook&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LibraryContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I am inside the Book Component ü•≥&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Book Information */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Book Name: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Quantity: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantity&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Book Shelf: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shelf&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incrementQuantity&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment Quantity&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I will talk more about state management in the next section but suffice it to say that hooks have really &lt;strong&gt;changed&lt;/strong&gt; the way I write React code. They have allowed me to add any functionality, I think of in my functional components. React Hooks have drastically &lt;strong&gt;reduced the amount of code&lt;/strong&gt; I write, while &lt;strong&gt;increasing my productivity&lt;/strong&gt; along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-talk-state-management" class="anchor"&gt;
  &lt;/a&gt;
  üîñ Let's talk State Management
&lt;/h2&gt;

&lt;p&gt;Naturally, as with any JavaScript Framework, whether it be Angular, React or Vue, &lt;strong&gt;state management&lt;/strong&gt; is an important concern. In Single Page Applications, it is essential to keep the state &lt;strong&gt;consistent&lt;/strong&gt; between different components and ensure that it gets updated correctly. React is no different.&lt;/p&gt;

&lt;p&gt;Therefore, an important concept all React devs should understand is how to &lt;strong&gt;effectively manage state in their applications&lt;/strong&gt;. When I was starting out with React, I was stressed about state management since I knew that React did not include a built-in state management solution at that time. Therefore, most of the online articles and tutorials recommended using &lt;strong&gt;Redux&lt;/strong&gt;. And I had heard that Redux was difficult to learn, it required a lot of boilerplate code and made your application size larger, and so on... So state management was one of my biggest concerns as a new React developer.&lt;/p&gt;

&lt;p&gt;But now, after working with React for some time, I realized that state management is not actually as difficult as it seems. From what I have gathered there are essentially &lt;strong&gt;3 ways&lt;/strong&gt; to manage state in your React apps. I will not go into details here, but will briefly touch on the different methods you can use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lifting-the-state" class="anchor"&gt;
  &lt;/a&gt;
  üëâ Lifting the state
&lt;/h3&gt;

&lt;p&gt;The first method is to &lt;strong&gt;lift the state to the parent component&lt;/strong&gt; and &lt;strong&gt;pass it to child components through props&lt;/strong&gt;. This is by far the easiest method to implement but it is only suitable for small applications and does not scale well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-management-libraries-like-redux" class="anchor"&gt;
  &lt;/a&gt;
  üëâ State management libraries like Redux
&lt;/h3&gt;

&lt;p&gt;The second and most common method is to &lt;strong&gt;use a third-party library for state management&lt;/strong&gt;. The most common library used with React is &lt;strong&gt;Redux&lt;/strong&gt;. It is one of the most popular state management solutions and has become an industry standard. Though it scales well to larger applications it involves a lot of boilerplate code and adds to the package size.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#context-api" class="anchor"&gt;
  &lt;/a&gt;
  üëâ Context API
&lt;/h3&gt;

&lt;p&gt;The third and newest method of State Management in React is using the &lt;strong&gt;Context API&lt;/strong&gt;. This is by far my favorite method of state management, as it is built in to React and therefore, it does not require any third-party library to be installed.&lt;/p&gt;

&lt;p&gt;Here's what the official documentation says about Context API:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Context provides a way to pass data through the component tree without having to pass props down manually at every level."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus, Context allows you to keep the &lt;strong&gt;state separate from the Components&lt;/strong&gt; and access it in whichever component you want without having to pass it as props.&lt;/p&gt;

&lt;p&gt;Context API by itself is a &lt;strong&gt;pretty powerful tool&lt;/strong&gt;. But Hooks like &lt;code&gt;useReducer&lt;/code&gt; and &lt;code&gt;useContext&lt;/code&gt; take it to a whole new level and make it a &lt;strong&gt;viable alternative to even Redux&lt;/strong&gt;. Combining Context API with Hooks provides you an effective and elegant solution to state management which is built directly into React.&lt;/p&gt;

&lt;p&gt;Thus, I have been playing around with Context API for some time now, and in my opinion, it is a worthwhile state management solution for small react apps. For more complex applications, redux remains a good option. But new react devs should at least give context API a shot before jumping into Redux.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  üí≠ Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;In the end, I would say that using React has been a great experience for me. I am still a beginner and I am learning a lot of new things every day. But I wanted to share some of the &lt;strong&gt;important points and tips&lt;/strong&gt; that I have discovered since I started using React. Some of these things drove me absolutely crazy, while I was starting out since I found very conflicting advice on the internet. Therefore, my goal was to share a &lt;strong&gt;one-stop guide for programmers&lt;/strong&gt; who are starting to learn React, like I was, enlisting what I believe, are the most important things to keep in mind as you progress üòä.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helpful-resources-to-learn-react" class="anchor"&gt;
  &lt;/a&gt;
  ‚ú® Helpful Resources to learn React!
&lt;/h2&gt;

&lt;p&gt;Here are some resources that can help you learn React.js and level up as a developer:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#youtube-videos" class="anchor"&gt;
  &lt;/a&gt;
  YouTube Videos:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=sBws8MSXN7A"&gt;React Crash Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XuFDcZABiDQ&amp;amp;list=PLillGF-RfqbY3c2r0htQyVbDJJoBFE6Rb"&gt;React Projects Playlist by Traversy Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dGcsHMXbSOA&amp;amp;list=PLDyQo7g0_nsVHmyZZpVJyFn5ojlboVEhE"&gt;React Tutorials Playlist by Dev Ed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=p6c7QA9ofvI&amp;amp;list=PLN3n1USn4xlntqksY83W3997mmQPrUmqM"&gt;Practical React Playlist by Ben Awad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Ke90Tje7VS0"&gt;React tutorial for Beginners by Programming with Mosh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#udemy-courses" class="anchor"&gt;
  &lt;/a&gt;
  Udemy Courses:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/modern-react-front-to-back/"&gt;Brad Traversy's React Front to Back Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developedbyed.com/p/the-creative-react-and-redux-course"&gt;DevelopedByEd The Creative React and Redux Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles" class="anchor"&gt;
  &lt;/a&gt;
  Articles:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/aspittel/a-complete-beginners-guide-to-react-2cl6"&gt;A Complete Beginner's Guide to React by Ali Spittel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Balance Your Job With Your Side Projects As A Developer</title>
      <author>Catalin Pit</author>
      <pubDate>Mon, 23 Nov 2020 19:55:45 +0000</pubDate>
      <link>https://dev.to/dailydotdev/how-to-balance-your-job-with-your-side-projects-as-a-developer-23l6</link>
      <guid>https://dev.to/dailydotdev/how-to-balance-your-job-with-your-side-projects-as-a-developer-23l6</guid>
      <description>&lt;p&gt;Working 8 hours a day and having side projects can be very difficult. I know that from experience. In the beginning, I also struggled to find a balance between my work and my side projects. &lt;/p&gt;

&lt;p&gt;However, I have found a way to organise my work and my time. I would like to think that I have found the perfect balance. As a result, I would like to share what I do with the hope that it can help you as well.&lt;/p&gt;

&lt;p&gt;By the way, when I talk about projects, I do not mean programming projects exclusively. I refer to being present on social media, creating applications, creating content, and anything related to software development.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-a-schedule" class="anchor"&gt;
  &lt;/a&gt;
  Create a schedule
&lt;/h1&gt;

&lt;p&gt;Create a schedule that works for you. If you work better in the morning, try to find some extra time in the morning. If you work better at night, do it the night time. The main point is to find the time that works for you.&lt;/p&gt;

&lt;p&gt;Besides being at your best, find the time when you can do uninterrupted work. If you get interrupted frequently, you will not be able to do a lot of work.&lt;/p&gt;

&lt;p&gt;Thus, try to balance both. For instance, I work around 6:30 am because I can do uninterrupted work for 1 or 2 hours. Also, I can work without being interrupted because everyone is asleep. However, it differs from person to person.&lt;/p&gt;

&lt;p&gt;Finally, you have to experiment and see what works for you. There is no universal path that works for all of us. &lt;strong&gt;The main point is that by establishing a schedule, you can spend time working on your side project before or after your job&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find a time when you work at your best.&lt;/li&gt;
&lt;li&gt;Try to do uninterrupted work.&lt;/li&gt;
&lt;li&gt;Having a schedule allows you to spend time on side projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#create-a-list-of-tasks" class="anchor"&gt;
  &lt;/a&gt;
  Create a list of tasks
&lt;/h1&gt;

&lt;p&gt;Unloading your brain is one of the best things that you can do for yourself. Trying to keep everything in your head can make you stressed. Besides that, you are more likely to forget information.&lt;/p&gt;

&lt;p&gt;Trello and Notion are two applications that I recommend for note-taking. In my case, I use Notion because it has more features and is therefore more useful. With Notion, you can use templates to create logs, task lists, and more.&lt;/p&gt;

&lt;p&gt;With that being said, I always note everything in my journals and task lists. That means when it's time to work on my side projects, I do not have to waste time thinking about what I did, what I am doing, and what should I do.&lt;/p&gt;

&lt;p&gt;Therefore, I recommend you to keep a journal or/and a task list. Note everything there to empty your brain. As a result, when it's time to work, you can focus only on your task at hand.&lt;/p&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an account on Notion or Trello.&lt;/li&gt;
&lt;li&gt;Note down your ideas, thoughts, and tasks.&lt;/li&gt;
&lt;li&gt;By doing so, you can actually focus on your tasks and not other things.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#schedule-your-content" class="anchor"&gt;
  &lt;/a&gt;
  Schedule your content
&lt;/h1&gt;

&lt;p&gt;If you are present on social media or have a blog/video-blog, you know how difficult it is. When you are at your job, you cannot spend time on social media or on creating content.&lt;/p&gt;

&lt;p&gt;Thus, the solution is to create the content ahead of time and then schedule it. For your social media accounts, you can use tools such as HypeFury, Buffer or Tweetastic. You can schedule your content ahead for the next day or actually any time in the future.&lt;/p&gt;

&lt;p&gt;When it comes to platforms such as YouTube or blogging platforms, you can schedule the content straight from them.&lt;/p&gt;

&lt;p&gt;In conclusion, prepare and schedule your work/content ahead. Planning your stuff takes a burden off you.&lt;/p&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create your content ahead.&lt;/li&gt;
&lt;li&gt;Schedule your social media content with tools such as HypeFury, Buffer or Tweetastic.&lt;/li&gt;
&lt;li&gt;Schedule your blog/video blog content from the respective platforms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#delegate-some-of-your-work" class="anchor"&gt;
  &lt;/a&gt;
  Delegate some of your work
&lt;/h1&gt;

&lt;p&gt;You do not have to do everything by yourself. Detect the tasks which you can delegate, and find someone to do them.&lt;/p&gt;

&lt;p&gt;An example would be finding someone to edit your YouTube videos. Editing your videos is a tedious process which can be delegated to another person. You could save a lot of time by delegating tasks.&lt;/p&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find tasks you can delegate.&lt;/li&gt;
&lt;li&gt;Delegate them to other people.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;That's it, folks! Balancing your job with your side stuff does not have to be difficult. With a little bit of organisation and tools, you can do both successfully.&lt;/p&gt;

&lt;p&gt;However, keep in mind that it can take a toll on you, even with all this help. Whenever you feel exhausted, take the time to recharge. &lt;/p&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a schedule. Find the time that works for you, and when you can do uninterrupted work.&lt;/li&gt;
&lt;li&gt;Keep a journal and/or task lists. Unload your mind.&lt;/li&gt;
&lt;li&gt;Schedule your work/content ahead.&lt;/li&gt;
&lt;li&gt;Find work you can delegate to other people.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;&lt;a href="https://api.daily.dev/get?r=devto"&gt;daily.dev&lt;/a&gt; delivers the best programming news every new tab. We will rank hundreds of qualified sources for you so that you can hack the future.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://api.daily.dev/get?r=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnRWXIbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b996k4sm4efhietrzups.png" alt="Daily Poster"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>career</category>
    </item>
  </channel>
</rss>
