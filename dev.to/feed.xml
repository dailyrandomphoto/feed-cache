<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Build Tabs only with HTML and CSS</title>
      <author>Pawan Bhayde</author>
      <pubDate>Sun, 18 Apr 2021 04:35:42 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/how-to-build-tabs-only-with-html-and-css-3lfk</link>
      <guid>https://dev.to/pawanbhayde/how-to-build-tabs-only-with-html-and-css-3lfk</guid>
      <description>&lt;p&gt;There are several ways to provide navigation on a web site. Tabbed navigation is one of them; menu, sidebar, etc.The key of implementing tabs without Javascript is to use radio buttons.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We connect radio buttons with labels.&lt;/li&gt;
&lt;li&gt;When label is clicked, only one radio button is checked as 
selected.&lt;/li&gt;
&lt;li&gt;Only matching contents of selected radio button is visible.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/o3TGeisrkyw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Read Blog Post And Download Source Code:- &lt;a href="https://www.websitemakers.xyz/2021/04/how-to-build-tabs-only-with-css.html"&gt;https://www.websitemakers.xyz/2021/04/how-to-build-tabs-only-with-css.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Html Code &lt;a href="https://www.websitemakers.xyz/2021/04/how-to-build-tabs-only-with-css.html"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Css Code &lt;a href="https://www.websitemakers.xyz/2021/04/how-to-build-tabs-only-with-css.html"&gt;Download&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Chatbot para twitch com Javascript</title>
      <author>Victor Castro</author>
      <pubDate>Sun, 18 Apr 2021 04:25:06 +0000</pubDate>
      <link>https://dev.to/acaverna/chatbot-para-twitch-com-javascript-1oi9</link>
      <guid>https://dev.to/acaverna/chatbot-para-twitch-com-javascript-1oi9</guid>
      <description>&lt;p&gt;Olá nesse tutorial vamos criar um chatbot para a &lt;a href="https://www.twitch.tv/"&gt;twitch.tv&lt;/a&gt; utilizando javascript com a biblioteca &lt;a href="https://tmijs.com/"&gt;tmi.js&lt;/a&gt;. Utilizar um chatbot no seu canal é uma das formas de você engajar os seus viewers, pois, você pode criar jogos e outras brincadeiras para divertir o seu público durante as lives. Um dos exemplos é criar um comando de duelo para que o seu chat fique duelando no chat. Outra coisa que você pode fazer é criar funcionalidade para que o seu bot ajude na moderação da sua live.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ferramentas"&gt;
  &lt;/a&gt;
  Ferramentas
&lt;/h2&gt;

&lt;p&gt;Para criar esse projeto iremos utilizar as seguintes tecnologias:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nodejs.org/pt-br/"&gt;node.js&lt;/a&gt; - Que é um runtime javascript. Você pode baixar ele &lt;a href="https://nodejs.org/pt-br/download/"&gt;aqui&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="(https://www.npmjs.com/package/nodemon)"&gt;nodemon&lt;/a&gt; - Que é uma ferramenta que monitora o sistema de arquivos da sua aplicação e reinicia automaticamente após uma modificação.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.npmjs.com/get-npm"&gt;npm&lt;/a&gt; - Que é um gerenciador de pacote javascript. Por padrão ele já vem instalado junto com o node.js, mas caso você queira também pode utilizar o &lt;a href="https://yarnpkg.com/"&gt;yarn&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://tmijs.com/"&gt;tmi.js&lt;/a&gt; - Biblioteca para se conectar no chat da twitch utilizando o protocolo &lt;a href="https://pt.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Editor de texto - Você pode utilizar um editor de texto da sua preferência, no meu caso irei utilizar o &lt;a href="https://code.visualstudio.com/"&gt;Vscode&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#iniciando-projeto"&gt;
  &lt;/a&gt;
  Iniciando Projeto
&lt;/h2&gt;

&lt;p&gt;Apos a instalação do node iremos iniciar o nosso projeto utilizando o seguinte comando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Se você olhar na pasta do seu projeto é para ter criado um arquivo chamado 'package.json' é nele que fica as configurações do nosso projeto.&lt;/p&gt;

&lt;p&gt;Caso você queira saber mais sobre o npm init você pode descobrir mais &lt;a href="https://docs.npmjs.com/cli/v7/commands/npm-init"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instala%C3%A7%C3%A3o-de-deped%C3%AAncias"&gt;
  &lt;/a&gt;
  Instalação de depedências
&lt;/h2&gt;

&lt;p&gt;Agora vamos instalar as bibliotecas necessárias para o nosso projeto.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install tmi.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install --save-dev nodemon&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Após rodar esses comandos se você olhar no seu projeto você deve ter a pasta 'node_modules' e o arquivo 'package-lock.json' no seu projeto.&lt;/p&gt;

&lt;p&gt;Agora iremos criar scripts para facilitar na hora de rodar o nosso bot. Dentro do arquivo &lt;code&gt;package.json&lt;/code&gt; iremos modificar a propriedade &lt;code&gt;scripts&lt;/code&gt; e adicionar o seguinte código.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O &lt;code&gt;start&lt;/code&gt; serve para rodar o nosso quando finalizado. Já o &lt;code&gt;dev&lt;/code&gt; serve para rodar o nosso bot enquanto estivermos trabalhando nele, pois, ele vai executar usando o nodemon e facilitará nosso trabalho enquanto estivermos modificando ele reiniciando automaticamente o nosso bot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-arquivo-de-configura%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Criando arquivo de configuração
&lt;/h2&gt;

&lt;p&gt;Agora precisando criar um arquivo chamado &lt;code&gt;.env&lt;/code&gt; nele ficara guardado as variáveis de configurações nosso bot. Logo abaixo podemos ver como você devera deixar o arquivo depois de criado. Você devera substituir kastrinhobot pelo nome do seu nome, kastr0walker pelo nome do seu canal e TOKEN pelo token que você deve gerar &lt;a href="https://twitchapps.com/tmi/"&gt;aqui&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NOME_BOT=kastrinhobot
NOME_CANAL=kastr0walker
TOKEN_BOT=TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#criando-nosso-primeiro-comando"&gt;
  &lt;/a&gt;
  Criando nosso primeiro comando
&lt;/h2&gt;

&lt;p&gt;Agora está na hora de colocar a mão na massa e fazer o nosso primeiro comando no bot. A primeira coisa que precisamos fazer é importar as bibliotecas necessárias para o nosso projeto funcionar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tmi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tmi.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora iremos salvar em variáveis as configurações que adicionamos no nosso arquivo &lt;code&gt;.env&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NOME_BOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NOME_BOT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NOME_CANAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NOME_CANAL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TOKEN_BOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TOKEN_BOT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Devemos também criar um objeto para adicionar as informações do nosso bot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NOME_BOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TOKEN_BOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;NOME_CANAL&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Devemos instanciar um novo objeto do tipo &lt;code&gt;tmi.client&lt;/code&gt; passando como parâmetro o objeto que contem as configurações do nosso bot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;tmi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Devemos criar uma função para ser executada toda vez que o bot detectar que uma mensagem foi enviada no chat. No nosso caso definimos essa função como &lt;code&gt;recivedMessage&lt;/code&gt; nela recebemos quatro parâmetros.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;target&lt;/strong&gt; - Esse parâmetro recebe o nome do canal no qual o bot recebeu a mensagem.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;context&lt;/strong&gt; - Esse é um objeto na qual fica armazenado algumas informações do usuário que mandou mensagem no chat. Podemos achar nele o nome do usuário, se é sub ou mod de um canal dentre outras informações. Você pode conseguir mais informações colocando um &lt;code&gt;console.log(context)&lt;/code&gt; dentro da função.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;msg&lt;/strong&gt; - Esse é uma string contendo a mensagem que foi enviada no chat.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;bot&lt;/strong&gt; - Esse é um booleano que retorna verdadeiro caso a mensagem recebida seja do nosso próprio bot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O nosso primeiro comando que vamo criar é para o bot mandar uma mensagem de "Olá Mundo!" caso alguém digite &lt;code&gt;!ola&lt;/code&gt; no chat. Para isso verificamos se a mensagem recebida é igual a &lt;code&gt;!ola&lt;/code&gt; caso seja nós chamamos o método say do nosso client. Esse método é responsável por fazer com que o bot mande uma mensagem no chat. Ele recebe dois parâmetros o primeiro é o nome do canal na qual o bot vai mandar a mensagem. O segundo parâmetro é uma string contendo a mensagem na qual o bot vai enviar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;recivedMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Verifica se a mensagem recebido é do nosso bot&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!ola&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;say&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Olá Mundo!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora precisamos fazer com que o nosso bot se conecte no chat e comece a escutar as mensagens que são enviadas nele.&lt;br&gt;
Para isso utilizamos as seguintes funções.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;client.on("message", recivedMessage)&lt;/strong&gt; - Essa função vai fazer com que o bot fique escutando o nosso chat e execute a função &lt;code&gt;recivedMessage&lt;/code&gt; toda vez que uma mensagem é recebida.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;client.on("connected", () =&amp;gt; {})&lt;/strong&gt; - Essa função vai fazer com que o nosso bot mande "O bot tá on!" no nosso chat ao se conectar.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;client.connet()&lt;/strong&gt; - Essa função vai fazer com que o nosso bot se conecte com o chat do nosso canal.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recivedMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;say&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NOME_CANAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;O bot tá on!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após isso salve o seu arquivo e execute no seu terminal o seguinte comando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Pront agora o bot deve está conectado no seu canal e já sendo possível interagir com ele digitando &lt;code&gt;!ola&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora que você entendeu a base de como criar o seu primeiro bot. Você pode utilizar a sua imaginação e desenvolver várias funcionalidades legais para o seu bot. Se você quiser se inspirar com ideias para o seu bot esse são alguns bots na qual já contribui no desenvolvimento.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/levxyca/pandadomalbot"&gt;pandadomalbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/acaverna/acaverna-bot"&gt;acaverna&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/acaverna/deninho-bot"&gt;deninhobot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pxlrose/pixelrbot"&gt;pixelrbot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kastrowalker/kastrinhobot"&gt;kastrinhobot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para esse tutorial utilizei como base esse &lt;a href="https://github.com/jpbrab0/twitchtvbot-js-template"&gt;repositório&lt;/a&gt;. Obrigado por ler meu artigo e boa sorte com as suas criações.&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>javascript</category>
      <category>chatbot</category>
      <category>tmijs</category>
    </item>
    <item>
      <title>Why you might not be learning as effectively</title>
      <author>Estee Tey</author>
      <pubDate>Sun, 18 Apr 2021 04:21:59 +0000</pubDate>
      <link>https://dev.to/lyqht/why-you-might-not-be-learning-as-effectively-18o9</link>
      <guid>https://dev.to/lyqht/why-you-might-not-be-learning-as-effectively-18o9</guid>
      <description>&lt;p&gt;As a #CodeNewbie, a common means of learning here is to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;read articles to improve your knowledge,&lt;/li&gt;
&lt;li&gt;and later write your own to internalize your learning.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, I want to point it out explicitly that... &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your learning style could be a reason why you feel that you are not learning as much as you intend to &lt;em&gt;despite doing the actions above&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;How you learn&lt;/strong&gt; affects heavily: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;how much you are enjoying&lt;/em&gt; the stuff you learn and &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;the pace that you are learning&lt;/em&gt; them. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore it will be beneficial for you if you can identify what kind of learner you are and what you can do to learn better.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#learner-archetypes"&gt;
  &lt;/a&gt;
  Learner Archetypes
&lt;/h2&gt;

&lt;p&gt;There are 4 common learner archetypes according to the &lt;a href="https://educationonline.ku.edu/community/4-different-learning-styles-to-know"&gt;&lt;strong&gt;VARK&lt;/strong&gt; model&lt;/a&gt; (&lt;strong&gt;V&lt;/strong&gt;isual, &lt;strong&gt;A&lt;/strong&gt;uditory, &lt;strong&gt;R&lt;/strong&gt;eading/Writing, &lt;strong&gt;K&lt;/strong&gt;inesthetic). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ek6y-SM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mysimpleshow.com/wp-content/uploads/2016/11/04145930/500x300_VARK_Oct_27_2016.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ek6y-SM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mysimpleshow.com/wp-content/uploads/2016/11/04145930/500x300_VARK_Oct_27_2016.png" alt="https://www.mysimpleshow.com/wp-content/uploads/2016/11/04145930/500x300_VARK_Oct_27_2016.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image retrieved from &lt;a href="https://www.mysimpleshow.com/learning-styles-the-vark-model/"&gt;mysimpleshow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is my subjective view on how the 4 types of learners would learn and how content creators can cater their content for the various kinds of learners.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Visual&lt;/strong&gt; 🖼️

&lt;ul&gt;
&lt;li&gt;For visual learners, pictures are especially louder than words for them.&lt;/li&gt;
&lt;li&gt;Including images such as charts, screenshots, memes (use with precaution, consider your target audience) in articles will help these learners learn better. Break down into bullet points instead of giving text walls.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Auditory&lt;/strong&gt; 💬

&lt;ul&gt;
&lt;li&gt;Most people &lt;a href="https://www.thinkonyourfeet.com/think-words-images/"&gt;think in words rather than pictures&lt;/a&gt;. For auditory learners, they take this same process to the external world to learn.&lt;/li&gt;
&lt;li&gt;They would be the main supporters of podcasts, audiobooks and narrated tech videos.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reading&lt;/strong&gt;/&lt;strong&gt;Writing&lt;/strong&gt; 📝

&lt;ul&gt;
&lt;li&gt;The nature of programming &lt;em&gt;languages&lt;/em&gt; meant that **there is no running away from text, articles and documentation for learning the syntax and concepts of programming. Every CodeNewbie has a side of a Reading/Writing Learner.&lt;/li&gt;
&lt;li&gt;However, with how static text can be, it will be great if every writer puts in more thought in how and why they are writing articles for their target audience.&lt;/li&gt;
&lt;li&gt;Given that the speed of reading is faster than listening, that there are learning platforms popping up which emphasize on this fact such as &lt;a href="http://educative.io"&gt;educative.io&lt;/a&gt;, &lt;a href="https://www.codecademy.com/"&gt;codeacademy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Kinesthetic&lt;/strong&gt; 🙌

&lt;ul&gt;
&lt;li&gt;The hands-on learners!&lt;/li&gt;
&lt;li&gt;By hands-on, it may differ from person to person on whether they learn effectively by following a tutorial guide in hands-on or they experiment for themselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Aside from the &lt;strong&gt;VARK&lt;/strong&gt; model of learner archetypes, there's also another renowned categorization of learners illustrated as &lt;a href="https://notes.fundersandfounders.com/post/55187809751/types-of-learners"&gt;an infographic by Funders &amp;amp; Founders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aV0Q57DA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://64.media.tumblr.com/f26e3143dcf0322227285b88f9cbc1db/tumblr_mpsanrnCp21s6bw99o1_1280.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aV0Q57DA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://64.media.tumblr.com/f26e3143dcf0322227285b88f9cbc1db/tumblr_mpsanrnCp21s6bw99o1_1280.png" alt="https://64.media.tumblr.com/f26e3143dcf0322227285b88f9cbc1db/tumblr_mpsanrnCp21s6bw99o1_1280.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see there's some overlap of learner types, and these archetypes again are not absolute. &lt;/p&gt;

&lt;p&gt;You could be a &lt;em&gt;mix&lt;/em&gt; of the archetypes! You may prefer having a mix of different mediums to spice up your learning  ✨ These archetypes just make it easier for you to identify your learning style. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#learning-routine"&gt;
  &lt;/a&gt;
  Learning Routine
&lt;/h2&gt;

&lt;p&gt;Sometimes, aside from your learning style, your routine also matters. &lt;/p&gt;

&lt;p&gt;e.g. I have a developer friend who likes to head to the gym physically after work before he heads onto the mental gym and learn 💪&lt;/p&gt;

&lt;p&gt;For me, I'm pretty lazy when it comes to physical exercise nowadays with COVID19. But if I still feel like being productive after work, I will make sure to take a nice shower 🚿, physically walk out of my house 🚶‍♀️ and grab a good dinner 🍚 before staring at my computer again.&lt;/p&gt;

&lt;p&gt;Both of these routines are intentional to force a &lt;strong&gt;cognitive switch from work mode to learning mode.&lt;/strong&gt; Sometimes you could even have a &lt;em&gt;parenting&lt;/em&gt; mode or a &lt;em&gt;play&lt;/em&gt; mode, it is important to relax and be conscious about your mental state - be aware whether you are ready for learning.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Knowing what helps you to learn better&lt;/strong&gt; is beneficial for you in choosing the resources you pursue &lt;em&gt;in the limited time that you have set aside for productivity,&lt;/em&gt; and also how you might want to structure your routine to learn. &lt;/p&gt;

&lt;p&gt;So what archetype are you? Is there any learning routine you are taking on now that you would like to share with the community? And what else do you want to see #CodeNewbie to help you improve your learning experience? Let's discuss~ 🎵&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>discuss</category>
      <category>productivity</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>002 - Forced Myself to Launch My Site For A /uses Page (CCwF 2021)</title>
      <author>Joshua Cerbito</author>
      <pubDate>Sun, 18 Apr 2021 04:10:40 +0000</pubDate>
      <link>https://dev.to/cerbito/002-forced-myself-to-launch-my-site-for-a-uses-page-ccwf-2021-4l2o</link>
      <guid>https://dev.to/cerbito/002-forced-myself-to-launch-my-site-for-a-uses-page-ccwf-2021-4l2o</guid>
      <description>&lt;p&gt;👋 Hello again! And welcome back to the "Coding Challenges with Friends" series. If you're interested in the said series, you may want to check out the first two posts (Part 0, Part 1). Enjoy!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are no code snippets in this post, so if you just want to look at the output, you may simply scroll past the following wall of text and click the links below. 👌 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second challenge was inspired by Wes Bos' &lt;a href="https://uses.tech"&gt;uses.tech&lt;/a&gt;, which in a sense is an extension of his &lt;a href="https://wesbos.com/uses"&gt;/uses&lt;/a&gt; page. Compared to the last challenge, this one is objectively easier since it's technically just a page with a bunch of lists. But for a lazy-ass person like me, the most difficult part of doing a &lt;code&gt;/uses&lt;/code&gt; page is that part that comes before the &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I could've easily just created a blank webapp with a /uses page, get a random domain name from vercel, and call it a day. But I wanted to finish the challenge properly. And in keeping with the CCwF tradition, I had to do something I've never done before, so here's a list things that I've done for the first time:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; - React is my comfort place, and for these challenges, I really wanted to stay away from it to force myself to learn new things. But the combination of &lt;a href="https://medium.com/@baphemot/whats-server-side-rendering-and-do-i-need-it-cb42dc059b38"&gt;SSR&lt;/a&gt;, fantastic routing and history management, and no-hassle deployment to Vercel was hard to say no to. And since I haven't used Next.js before, I decided to give myself a free React-pass this time around.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;a href="https://www.framer.com/motion/"&gt;Framer Motion&lt;/a&gt; - I've been seeing this library for quite a while now but never had the chance to use it until now. Thanks to its &lt;code&gt;AnimatedSharedLayout&lt;/code&gt;, I was able to make page-to-page layout transitions without re-rendering (and therefore resetting) my animated background.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Launch my personal site. That's right. In my 12 years as a professional Web Developer &amp;amp; Designer, I've never, not once, launched a personal site. It's the usual cycle of starting the said project based on a general idea, then trying to implement the best tech approach available, then procrastinating, and then going back to the project after a few months only to realize that the codebase already looks dated. But not today.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For someone my age and in an agency role that's more managerial than creative, I can easily not care about these things anymore and expect to have a relatively stable life. But I'm glad that I have friends who challenge me to do new things and to never stop growing. And speaking of these friends, they also finished the challenge! So if you're interested in our sites or the things that we use on a daily basis, try visiting the links below.&lt;/p&gt;

&lt;p&gt;Mine - &lt;a href="https://www.cerbito.com"&gt;cerbito.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/eacayan"&gt;Ellice&lt;/a&gt;'s - &lt;a href="https://www.acayan.xyz"&gt;acayan.xyz&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/oieeaaaa"&gt;Joimee&lt;/a&gt;'s - &lt;a href="https://cajandab.vercel.app/"&gt;cajandab.vercel.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may also want to check out other people's setups over at &lt;a href="https://uses.tech"&gt;uses.tech&lt;/a&gt;. And while you're at it, why not join the challenge and make yours as well? Cheers!&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>webdev</category>
      <category>ccwf2021</category>
    </item>
    <item>
      <title>Awesome CSS Layout Resources For Beginners</title>
      <author>Kiran Raj R</author>
      <pubDate>Sun, 18 Apr 2021 03:08:40 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/awesome-css-layout-resources-for-beginners-508a</link>
      <guid>https://dev.to/kiranrajvjd/awesome-css-layout-resources-for-beginners-508a</guid>
      <description>&lt;p&gt;Here is a list of awesome CSS layout generators and layout examples. The list contains Flexbox based layout generators and Grid based layout generators. Use the resources to study how to create a layout and then create your own designs, these resources are for the beginners or it can be used for a quick simple web design needs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#css-grid-based-layout-generator"&gt;
  &lt;/a&gt;
  CSS Grid Based Layout Generator
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://grid.layoutit.com/"&gt;Layoutit&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aRZFt17H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3gu9fwf9r7o149zjpzm.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cssgrid-generator.netlify.app/"&gt;CSS Grid Generator by Sarah&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GlKhPrGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvqt7kbkl9uj0efa9h2b.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://griddy.io/"&gt;Griddy.io&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_IFmZm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9x5uifncaa598pufdbk.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://css-grid-layout-generator.pw/"&gt;CSS Grid Layout Generator.PW&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--waXzxQGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7su8kkmm8gtncqnzozg7.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.cssportal.com/layout-generator/"&gt;CSS Portal.Com&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oaAwcpRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umyxh3eczuij7gcxsha8.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.gridcss.com/"&gt;GridCSS&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tfY0wmT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4e8boo1nk2dqdk3o43b.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cssgr.id/"&gt;CSSgr&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2lEAf4mX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n32iaxcgz0bkp7uwrjd2.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#flexbox-based-layout-generator"&gt;
  &lt;/a&gt;
  Flexbox based Layout Generator
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://loading.io/flexbox/"&gt;Loading.io&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEkt8I1o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1c2fjzk804g2t55sqsx.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flexbox.buildwithreact.com/"&gt;Flexbox.Buildwithreact.com&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xcsdYbKd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdjeitfwvnonxoidp0r8.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.mycssbuilder.com/"&gt;My CSS Builder&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ThNkE2r---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b66n0j7f46uhv1ohqbr6.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#layout-example-collections-with-code"&gt;
  &lt;/a&gt;
  Layout Example Collections With Code
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://purecss.io/layouts/"&gt;Purecss&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOHxRT0D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkjjlkzcxyl8l2t841l1.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gridbyexample.com/examples/page-layout/"&gt;Grid By Example&lt;/a&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gIaFHPm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7iplwxll778osj2cnav.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.quackit.com/html/templates/css_grid_templates.cfm"&gt;Quackit.com&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dwLHHtH2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhgxd2bh85pzubiums8q.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://csslayout.io/"&gt;CSS Layout.io&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VWA_3mhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts2m9nkd3pmft8ve8o9q.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have any other resources please mention in the comment section, so it can be useful to me and others who browse the page. In case of any broken links or mistakes do let me know. Thank you and happy coding :)&lt;br&gt;
&lt;a href="https://dev.to/kiranrajvjd/20-awesome-css-code-generators-27gp"&gt;20+ Awesome CSS Code Generator Resources&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/kiranrajvjd/awesome-35-svg-resources-for-your-next-web-project-5c15"&gt;40+ Awesome SVG Resources for Web Developers&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>49 Days of Ruby: Day 22 - Duck Typing</title>
      <author>Ben Greenberg</author>
      <pubDate>Sun, 18 Apr 2021 03:00:15 +0000</pubDate>
      <link>https://dev.to/bengreenberg/49-days-of-ruby-day-22-duck-typing-27h</link>
      <guid>https://dev.to/bengreenberg/49-days-of-ruby-day-22-duck-typing-27h</guid>
      <description>&lt;p&gt;&lt;strong&gt;Welcome to day 22 of the 49 Days of Ruby! 🎉&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have been reading about Ruby, you might have come across a term called &lt;em&gt;duck typing&lt;/em&gt;. Today we are going to spend some time discussing this idea and how it pertains to your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-duck-typing"&gt;
  &lt;/a&gt;
  What is Duck Typing?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If it walks like a duck, then it is a duck.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have you heard that expression before? If so, that's pretty much duck typing!&lt;/p&gt;

&lt;p&gt;Ruby is less concerned about the &lt;em&gt;type&lt;/em&gt; of a thing, and more about what it does. &lt;em&gt;(We are going to cover types tomorrow!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Take a look at the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Duck&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"I'm walking"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Turkey&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"I'm walking"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you notice that both &lt;code&gt;Duck&lt;/code&gt; and &lt;code&gt;Turkey&lt;/code&gt; have a &lt;code&gt;#walk&lt;/code&gt; method? Does that make a &lt;code&gt;Turkey&lt;/code&gt; a &lt;code&gt;Duck&lt;/code&gt;? Well, if we're following duck typing, then it really doesn't matter. As long as an Object responds to a method then that's all that really matters.&lt;/p&gt;

&lt;p&gt;How do we check if it knows that method (or message, is another way of stating it)?&lt;/p&gt;

&lt;p&gt;We can try the &lt;code&gt;#respond_to?&lt;/code&gt; Ruby method, which does what it sounds like. It checks if an Object recognizes the message you are sending it. Continuing our example of a &lt;code&gt;Duck&lt;/code&gt; and a &lt;code&gt;Turkey&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Duck&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:walk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; true&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Turkey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:walk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They both know &lt;code&gt;#walk&lt;/code&gt; so for all intents and purposes you can treat both the &lt;code&gt;Duck&lt;/code&gt; and the &lt;code&gt;Turkey&lt;/code&gt; as a &lt;code&gt;Duck&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;That's it for today! See you tomorrow as we discuss typing in Ruby.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Come back tomorrow for the next installment of 49 Days of Ruby! You can join the conversation on Twitter with the hashtag &lt;a href="https://twitter.com/hashtag/49daysofruby"&gt;#49daysofruby&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
    </item>
    <item>
      <title>🤔 What really makes you a software developer? </title>
      <author>Daniel Diaz</author>
      <pubDate>Sun, 18 Apr 2021 02:54:13 +0000</pubDate>
      <link>https://dev.to/developerroad/what-really-makes-you-a-software-developer-n7g</link>
      <guid>https://dev.to/developerroad/what-really-makes-you-a-software-developer-n7g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-this-question"&gt;
  &lt;/a&gt;
  Why this question? 😃
&lt;/h2&gt;

&lt;p&gt;Lastly, I'm trying to enhance my personal brand, and as a result of that, I've also had to describe myself.&lt;/p&gt;

&lt;p&gt;I had the temptation of present myself as a software developer, but some doubts seized me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-in-fact-a-software-developer"&gt;
  &lt;/a&gt;
  What is in fact a software developer?
&lt;/h2&gt;

&lt;p&gt;What makes you one?&lt;/p&gt;

&lt;p&gt;How much time or experience do you need to be considered a software developer? 🤔&lt;/p&gt;

&lt;p&gt;I'd like the incredible community of DEV to answer these questions and share knowledge, and opinions in the comments below 😌.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Setting up Angular project</title>
      <author>queencykoh</author>
      <pubDate>Sun, 18 Apr 2021 02:23:02 +0000</pubDate>
      <link>https://dev.to/queencykoh/setting-up-angular-project-4nnd</link>
      <guid>https://dev.to/queencykoh/setting-up-angular-project-4nnd</guid>
      <description>&lt;h1&gt;
  &lt;a href="#install-the-angular-cli"&gt;
  &lt;/a&gt;
  Install the Angular CLI
&lt;/h1&gt;

&lt;p&gt;Angular CLI is use to create projects, generate application and library code, and perform a variety of ongoing development tasks such as testing, bundling, and deployment.&lt;/p&gt;

&lt;p&gt;To install the Angular CLI, open a terminal window and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g @angular/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#create-an-initial-starter-application"&gt;
  &lt;/a&gt;
  Create an initial starter application
&lt;/h1&gt;

&lt;p&gt;Run the CLI command &lt;code&gt;ng new&lt;/code&gt; and provide the name of the project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new budgetarian-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will prompt for information about features to include in the initial app. Simply accept the defaults.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#run-the-application"&gt;
  &lt;/a&gt;
  Run the application
&lt;/h1&gt;

&lt;p&gt;Go to the folder and run &lt;code&gt;ng serve&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd budgetarian-app
ng serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ng serve&lt;/code&gt; command will build the app and starts the development server&lt;/p&gt;

&lt;p&gt;Open browser on &lt;code&gt;http://localhost:4200/&lt;/code&gt;&lt;/p&gt;

</description>
      <category>angular</category>
    </item>
    <item>
      <title>Best Online Courses for Data Engineers In 2021</title>
      <author>SeattleDataGuy</author>
      <pubDate>Sun, 18 Apr 2021 00:09:42 +0000</pubDate>
      <link>https://dev.to/seattledataguy/best-online-courses-for-data-engineers-in-2021-1gd8</link>
      <guid>https://dev.to/seattledataguy/best-online-courses-for-data-engineers-in-2021-1gd8</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@windows?utm_source=medium&amp;amp;utm_medium=referral"&gt;Windows&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems like it might be finally happening.&lt;/p&gt;

&lt;p&gt;Data engineering is finally getting a little bit of the data lime light.&lt;/p&gt;

&lt;p&gt;Which makes sense.&lt;/p&gt;

&lt;p&gt;The data being stored and analyzed is not only becoming more voluminous but its speed, complexity and variety are also increasing. Making it difficult to wrangle.&lt;/p&gt;

&lt;p&gt;With all this new data comes new tools, best practices and methods to manage and optimize the data systems we rely on.&lt;/p&gt;

&lt;p&gt;While I've been working as a consultant for years as the &lt;a href="https://www.theseattledataguy.com/data-science-consultants/#page-content"&gt;Seattle Data Guy&lt;/a&gt;, I'm still constantly learning and reviewing the best data engineering courses to improve my skills and understanding. Check out these highly-rated courses I've enjoyed and consider which ones might be best for the next step in your career.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-can-i-choose-the-best-online%C2%A0courses"&gt;
  &lt;/a&gt;
  How Can I Choose the Best Online Courses?
&lt;/h3&gt;

&lt;p&gt;Don't let the number of courses available online overwhelm you. If you're not sure where to start, or you're taking far too many courses at the same time like I am, then look for a course that offers these features.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#focus-on-key-tools-and%C2%A0skills"&gt;
  &lt;/a&gt;
  Focus on Key Tools and Skills
&lt;/h3&gt;

&lt;p&gt;There's a whole world of Microsoft stack, SQL, and web service tools that you use or will use in your career. Some great online data engineering courses to start with give you a hands-on and theoretical understanding of these basic tools.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#explore-overall-architecture-and-highlevel-concepts"&gt;
  &lt;/a&gt;
  Explore Overall Architecture and High-Level Concepts
&lt;/h3&gt;

&lt;p&gt;Detailed explanations of basic tools can be a great starting point, but you'll soon feel overwhelmed without more high-level concepts and an understanding of the architecture of your project. __&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#start-with%C2%A0free"&gt;
  &lt;/a&gt;
  Start With Free
&lt;/h3&gt;

&lt;p&gt;There are plenty of options when it comes to learning about data engineering. But first, you need to decide if you like the kind of work data engineers do. So I recommend looking towards some of the free youtube channels that discuss the concepts and tools data engineers use. I will reference two of them below. But I just wanted to call out this tip before we go too deeply in to my top data engineering courses.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#choose-a-highly-rated-and-attended%C2%A0course"&gt;
  &lt;/a&gt;
  Choose a Highly Rated and Attended Course
&lt;/h3&gt;

&lt;p&gt;Most online course systems have rated and visible attendance statistics. Platforms like &lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt; and &lt;a href="https://www.coursera.org/"&gt;Coursera&lt;/a&gt; make it easy to find compelling courses. Just because a course is well attended or rated doesn't mean it's going to offer you the skills you need, but this is a helpful feature to compare.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-data-engineering-courses"&gt;
  &lt;/a&gt;
  Best Data Engineering Courses
&lt;/h3&gt;

&lt;p&gt;I've taken many online courses over the years, but these six options are some of the best data engineering courses to start with:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-our-full-video-or-read-the-article-below"&gt;
  &lt;/a&gt;
  Watch Our Full Video or Read the article below!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=lVj0RlSxTXk"&gt;Our Video On Our Favorite Online Data Engineering Courses&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-wiseowl-tutorials"&gt;
  &lt;/a&gt;
  1. WiseOwl Tutorials
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0d-B46pG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/www.theseattledataguy.com/wp-content/uploads/2021/04/unnamed-3.jpeg%3Fresize%3D542%252C542%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0d-B46pG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/www.theseattledataguy.com/wp-content/uploads/2021/04/unnamed-3.jpeg%3Fresize%3D542%252C542%26ssl%3D1" alt="wise owl tutorials"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This free video tutorial series is packed with helpful information to create a baseline knowledge in Microsoft tooling such as SQL Server, SSIS and more. Brush up on the basics or start your journey with &lt;a href="https://www.youtube.com/channel/UCbi5G5PjWBaQUFy7XU_O7yw"&gt;WiseOwl tutorials&lt;/a&gt; as a good primer.&lt;/p&gt;

&lt;p&gt;Check out tutorials on SQL and ETL tools. These videos can help you learn how to drag and drop destinations and transformations into your workspace. The SQL playlist is a good jumping-off point for these skills.&lt;/p&gt;

&lt;p&gt;Everyone likes a free course, but there are a few features missing in these playlists. I don't like that it doesn't go into much detail about why you need to perform particular actions. This high-level architecture is a key piece of the puzzle that you'll need to use as an engineer.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-apache-airflow%C2%A0tutorial"&gt;
  &lt;/a&gt;
  2. Apache Airflow Tutorial
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GUTLuDa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/www.theseattledataguy.com/wp-content/uploads/2021/04/1200px-AirflowLogo.png%3Fresize%3D753%252C291%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUTLuDa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/www.theseattledataguy.com/wp-content/uploads/2021/04/1200px-AirflowLogo.png%3Fresize%3D753%252C291%26ssl%3D1" alt="airflow tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another free option is the &lt;a href="https://www.youtube.com/watch?v=AHMm1wfGuHE"&gt;Apache Airflow Youtube tutorial&lt;/a&gt; series. This series is seven videos long and will give you a great baseline of Airflow.&lt;/p&gt;

&lt;p&gt;It goes over the basic features of Airflow, which is used to improve the traditional view of ETL. Many professionals use this tool to create hundreds and thousands of pipelines in a more manageable way. You'll learn more about Airflow DAG and get ready to create your first pipeline.&lt;/p&gt;

&lt;p&gt;Like the WiseOwl tutorials, this series tends to focus more on the specific steps of using a tool, rather than the overarching reason. It's a great place to start, but be sure you gain that higher-level understanding before you head out into the field as an engineer.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-data-warehouse-fundamentals-for-beginners"&gt;
  &lt;/a&gt;
  3. Data Warehouse Fundamentals for Beginners
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cER9Lnhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/www.theseattledataguy.com/wp-content/uploads/2021/04/0_OU8MGyXkSlZvHHr7-4.png%3Fresize%3D406%252C378%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cER9Lnhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/www.theseattledataguy.com/wp-content/uploads/2021/04/0_OU8MGyXkSlZvHHr7-4.png%3Fresize%3D406%252C378%26ssl%3D1" alt="data warehousing consulting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first paid course on my list, the &lt;a href="https://www.udemy.com/course/data-warehouse-fundamentals-for-beginners/"&gt;Data Warehouse Fundamentals for Beginners&lt;/a&gt; Udemy course is a great way to explore the best practices and high-level concepts of architecture and dimensional design in a convenient course offering.&lt;/p&gt;

&lt;p&gt;It's no wonder this course is a bestseller; it does a great job of explaining how to use ETLs and warehouses. It explores the skills you need, like building staging layers, fact tables, and dimension tables, but also explains the schemas and frameworks of these tools.&lt;/p&gt;

&lt;p&gt;A great addition to this course is the information on slowly changing dimensions. This allows you to not only copy a database but to add context and track it historically.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-big-data-on-amazon-web-services%C2%A0aws"&gt;
  &lt;/a&gt;
  4. Big Data on Amazon Web Services (AWS)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GQ_nNtfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/www.theseattledataguy.com/wp-content/uploads/2021/04/aws-logo.png%3Fresize%3D517%252C314%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQ_nNtfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/www.theseattledataguy.com/wp-content/uploads/2021/04/aws-logo.png%3Fresize%3D517%252C314%26ssl%3D1" alt="aws cloud consulting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Big data concepts and web services tools are all important to learn about. Brush up on these areas with the &lt;a href="https://www.udemy.com/course/big-data-on-amazon-web-services-aws-cloud-2018/"&gt;Big Data on Amazon Web Services&lt;/a&gt; Udemy course. This course is more expensive than other offerings, but Udemy typically offers a discount on it.&lt;/p&gt;

&lt;p&gt;The focus of this course is AWS, so the tool-specific steps may not translate well to other cloud-based models. The theoretical concepts, however, are going to be very similar if you're using GCP or Azure.&lt;/p&gt;

&lt;p&gt;You'll need to dedicate more time to this course since the videos tend to run a little longer. Some videos are between 15 to 18 minutes long, which I feel is slightly longer than ideal. Take notes along the way to stay on track.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-taming-big-data-with-apache-spark-and%C2%A0python"&gt;
  &lt;/a&gt;
  5. Taming Big Data With Apache Spark and Python
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7xIr2Cf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/www.theseattledataguy.com/wp-content/uploads/2021/04/1_HL7Nig0G8VgKn0njpCWPbQ.jpeg%3Fresize%3D588%252C428%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7xIr2Cf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/www.theseattledataguy.com/wp-content/uploads/2021/04/1_HL7Nig0G8VgKn0njpCWPbQ.jpeg%3Fresize%3D588%252C428%26ssl%3D1" alt="apache spark consulting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can't go wrong with a course from Frank Kane. The &lt;a href="https://www.udemy.com/course/taming-big-data-with-apache-spark-hands-on/"&gt;Taming Big Data&lt;/a&gt; Udemy course is a personal favorite, but many of his courses are helpful and highly rated.&lt;/p&gt;

&lt;p&gt;This training gives you building blocks and practice tasks in Spark and Python. There will always be an adjustment going from the classroom to real-world applications, but Frank Kane does a great job bridging some of that gap and helping you see how these tools work in real problems.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-introduction-to-designing-data-lakes-on%C2%A0aws"&gt;
  &lt;/a&gt;
  6. Introduction to Designing Data Lakes on AWS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZGTGOmw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/www.theseattledataguy.com/wp-content/uploads/2021/04/Screen-Shot-2021-04-17-at-4.52.09-PM.png%3Fresize%3D735%252C316%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZGTGOmw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/www.theseattledataguy.com/wp-content/uploads/2021/04/Screen-Shot-2021-04-17-at-4.52.09-PM.png%3Fresize%3D735%252C316%26ssl%3D1" alt="data lake consulting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This area of design is popular in the field, so add this to your online course list. On Coursera, &lt;a href="https://www.coursera.org/learn/introduction-to-designing-data-lakes-in-aws"&gt;Introduction to Designing Data Lakes on AWS&lt;/a&gt; gives you big-picture concepts and more specific skillsets on data lake creation and operation.&lt;/p&gt;

&lt;p&gt;Like most Coursera classes, the first week is very general and could be skipped, but the second week kicks off the course with information about AWS and data lake architecture. It's more specific than other big data courses, so it's a good addition to the list.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#where-can-i-learn-more-about-data-engineering"&gt;
  &lt;/a&gt;
  Where Can I Learn More About Data Engineering?
&lt;/h3&gt;

&lt;p&gt;These data engineering courses will give you a 3-to-6-month crash course if not longer. So don't rush.&lt;/p&gt;

&lt;p&gt;Take your time and learn the basics. Get your base level of data engineering skills down and then once you start working you will find lots of opportunities to challenge yourself with new problems.&lt;/p&gt;

&lt;p&gt;But, if you are looking for new opportunities to learn now, then our team is working on an article for applying your data engineer skills to data engineer projects.&lt;/p&gt;

&lt;p&gt;I'm always looking for new courses to take and to pass on to other professionals, so feel free to &lt;a href="https://www.theseattledataguy.com/contact-data/"&gt;contact me&lt;/a&gt; with any questions or course recommendations. Start with WiseOwl tutorials or go through these top six courses in your own way to improve your skills and conceptual knowledge.&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you want to read more about data consulting, big data, and data science, then click below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=6RiA_Qur2yo&amp;amp;t=1s"&gt;Realities Of Being A Data Engineer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theseattledataguy.com/developing-a-data-analytics-strategy-for-small-businesses-and-start-ups/"&gt;Developing A Data Analytics Strategy For Small Businesses And Start-ups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=X6-VNKe3XVM&amp;amp;t=6s"&gt;5 SQL Concepts You Need To Know Before Your Next Data Science Or Data Engineering Interview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theseattledataguy.com/17-questions-you-need-to-ask-about-your-data-strategy/"&gt;How To Improve Your Data-Driven Strategy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/VjlzuUzYJYM"&gt;What Is A Data Warehouse And Why Use It&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logitanalytics.com/5-mistakes-that-are-ruining-your-data-driven-strategy-and-costing-you/"&gt;Mistakes That Are Ruining Your Data-Driven Strategy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theseattledataguy.com/5-great-libraries-manage-big-data-with-python/"&gt;5 Great Libraries To Manage Big Data With Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=D1V6t--9tt8&amp;amp;t=7s"&gt;What Is A Data Engineer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>datascience</category>
      <category>career</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>Golang Data Connector Part 1</title>
      <author>Steve Layton</author>
      <pubDate>Sat, 17 Apr 2021 23:51:21 +0000</pubDate>
      <link>https://dev.to/shindakun/golang-data-connector-part-1-5a5f</link>
      <guid>https://dev.to/shindakun/golang-data-connector-part-1-5a5f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--40ZbRMgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://shindakun.dev/content/images/2021/04/attemptinggo_w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--40ZbRMgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://shindakun.dev/content/images/2021/04/attemptinggo_w.png" alt="Golang Data Connector Part 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a handful of tools out there like Zapier (which just hit a &lt;a href="https://www.forbes.com/sites/alexkonrad/2021/03/08/zapier-bootstraps-to-5-billion-valuation/?utm_source=shindakun.dev&amp;amp;utm_medium=web&amp;amp;utm_term=startup_news"&gt;$5 billion valuation&lt;/a&gt;) which connect disparate systems together. It's an interesting idea but, how does one actually create a connector (or integration) without Zapier? In this series of posts, we'll step through how I might go about building something.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-spooky"&gt;
  &lt;/a&gt;
  Getting Spooky
&lt;/h3&gt;

&lt;p&gt;Let's pretend that we want to move data from a Ghost blog over to another service. That sounds simple enough, for this post we're going to not worry about a continued connection we're just going to get our content from Point A. We'll worry about Point B next time.&lt;/p&gt;

&lt;p&gt;OK, that's well and good but where do we start? The best place to start is the Ghost content API documentation at &lt;a href="https://ghost.org/docs/content-api/"&gt;https://ghost.org/docs/content-api/&lt;/a&gt;. This will give us all the information we need to start planning. There is even a live &lt;code&gt;content/posts&lt;/code&gt; endpoint we can call at &lt;code&gt;https://demo.ghost.io/ghost/api/v4/content/posts/?key=22444f78447824223cefc48062&lt;/code&gt;, which will show us what we can expect to receive back.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aEOUQgzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://shindakun.dev/content/images/2021/04/Screen-Shot-2021-04-11-at-11.10.10-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aEOUQgzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://shindakun.dev/content/images/2021/04/Screen-Shot-2021-04-11-at-11.10.10-AM.png" alt="Golang Data Connector Part 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go-get-it"&gt;
  &lt;/a&gt;
  Go Get It
&lt;/h3&gt;

&lt;p&gt;Phase one of this simple connector is relatively easy thanks to Go's &lt;code&gt;http&lt;/code&gt; package. We use it to reach out and request the first page of post content. We'll start by creating a new request. The full code listing is at the bottom of this post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodGet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"https://demo.ghost.io/ghost/api/v4/content/posts/?key=22444f78447824223cefc48062"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;http.NewRequest&lt;/code&gt; takes in the method of the HTTP request, in this case, it is a &lt;code&gt;GET&lt;/code&gt;, the URL of the request, and a body. This time we don't have a body so we'll just use &lt;code&gt;nil&lt;/code&gt;. OK, great we have our request all set up but how do we use it? Again we're back to &lt;code&gt;http&lt;/code&gt;, we can use &lt;code&gt;http.DefaultClient&lt;/code&gt; method &lt;code&gt;Do()&lt;/code&gt; to actually make our request. We simply pass in our request and capture the response in a new variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! We have our data, well as long as the call was OK that is. We aren't really doing anything with errors instead we'll just bail out. I imagine that we can have some sort of retry instead of just exiting.&lt;/p&gt;

&lt;p&gt;From here we'll log the response body to the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    body, err := io.ReadAll(resp.Body)
    if err != nil {
        log.Fatal(err)
    }

    fmt.Println(string(body))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#next-time"&gt;
  &lt;/a&gt;
  Next Time
&lt;/h3&gt;

&lt;p&gt;In our next post, we'll modify our project to allow us to actually do &lt;em&gt;something&lt;/em&gt; with the data we have received&lt;/p&gt;




&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Enjoying this post?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://ko-fi.com/shindakun"&gt;How about buying me a coffee?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#code-listing"&gt;
  &lt;/a&gt;
  Code Listing
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "encoding/json"
    "fmt"
    "io"
    "log"
    "net/http"
)

func main() {
    req, err := http.NewRequest(http.MethodGet, "https://demo.ghost.io/ghost/api/v4/content/posts/?key=22444f78447824223cefc48062", nil)
    if err != nil {
        log.Fatal(err)
    }

    resp, err := http.DefaultClient.Do(req)
    if err != nil {
        log.Fatal(err)
    }

    defer resp.Body.Close()

    body, err := io.ReadAll(resp.Body)
    if err != nil {
        log.Fatal(err)
    }

    fmt.Println(string(body))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>go</category>
    </item>
    <item>
      <title>Deploy a Jamstack website to Azure Blob Storage with GitHub Actions</title>
      <author>James Edwards</author>
      <pubDate>Sat, 17 Apr 2021 23:30:54 +0000</pubDate>
      <link>https://dev.to/jdedwards3/deploy-a-jamstack-website-to-azure-blob-storage-with-github-actions-o3j</link>
      <guid>https://dev.to/jdedwards3/deploy-a-jamstack-website-to-azure-blob-storage-with-github-actions-o3j</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; are included with Github Repositories and can be used to automate project workflows like building and deploying code. In this example we will see how to automate the build process and deployment of a site built with the &lt;a href="https://jamstack.org/"&gt;Jamstack&lt;/a&gt;. We can use GitHub Actions to checkout a specific branch in a git repository, and then execute a build process that is common to Jamstack sites that are created with a static site generator like &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; or &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt;. On completion of the static site generator build process, the static site folder will then be uploaded to &lt;a href="https://azure.microsoft.com/en-us/services/storage/blobs/"&gt;Azure Blob Storage&lt;/a&gt;, utilizing the &lt;a href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website-how-to?tabs=azure-portal"&gt;static website hosting&lt;/a&gt; feature included with Azure Blob Storage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#azure-blob-storage-static-website-hosting"&gt;
  &lt;/a&gt;
  Azure Blob Storage Static Website Hosting
&lt;/h3&gt;

&lt;p&gt;In order to use the static website hosting feature included with Azure Blob Storage you need to &lt;a href="https://azure.microsoft.com/en-us/free/"&gt;create an Azure account&lt;/a&gt; if you do not already have one. Once you have created your account and logged in you will need to create the Storage Account resource that will provide the Blob Storage service. In the Azure portal select create a new resource and then search for "storage account". Then click create and follow the setup steps that are displayed to give the storage account a name and region. You can leave any pre-configured settings as the default setting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxDW9oCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai19bx6yygm4vbv5extv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxDW9oCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai19bx6yygm4vbv5extv.png" alt="Create Storage Account in Azure Portal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Within the Azure portal navigate to your newly created storage account and in the left side navigation find the section labelled "Settings" and then within that section select the "Static website" feature.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gxsjXLLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d813k9eotl63zu9l8zjg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gxsjXLLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d813k9eotl63zu9l8zjg.png" alt="Storage Account Static website settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#configure-index-document-name-and-error-document-path"&gt;
  &lt;/a&gt;
  Configure Index Document Name and Error Document Path
&lt;/h4&gt;

&lt;p&gt;In the static website settings, enabling the static website feature will automatically generate the primary endpoint based on the storage account name. In the "Index document name" and "Error document path" fields enter the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--roi4-QEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz18ewc00khandxz9r1p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--roi4-QEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz18ewc00khandxz9r1p.png" alt="Storage Account Static Website document name and path settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Based on how your static website is configured, or the static site generator that you are using, the "Error document path" might be different than what is shown for this example, however the "Index document name" will most likely remain as "index.html". Make sure to update these settings to correspond to the configuration that you are using. The storage account static website is now available and you can go to the primary endpoint and you will see this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wd7NXFFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a64djgs1wmnu7c400ox2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wd7NXFFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a64djgs1wmnu7c400ox2.png" alt="static website content does not exist"&gt;&lt;/a&gt;&lt;br&gt;
This is good and it means that the static website is setup and publicly available. Now we can setup GitHub Actions to automated deployments anytime there is a commit pushed to the main branch in our GitHub repository.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-remote-github-repository-and-configure-local-repository-remote"&gt;
  &lt;/a&gt;
  Create Remote GitHub Repository and Configure Local Repository Remote
&lt;/h3&gt;

&lt;p&gt;If you haven't already go ahead and &lt;a href="https://docs.github.com/en/github/getting-started-with-github/create-a-repo"&gt;create a new repository for your project&lt;/a&gt;, and after doing so follow the directions that are displayed to create a new repository from the command line on your local computer. This should result in a new repository that can push to the remote repository created on GitHub and any commits that we make will be applied to the main branch which is named "main". Make sure that you are able to push commits to GitHub and you can see them in your GitHub remote repository interface before proceeding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The following steps that configure the GitHub Actions workflow require that the branch name is set to "main".&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#add-gitignore-file"&gt;
  &lt;/a&gt;
  Add .gitignore File
&lt;/h4&gt;

&lt;p&gt;Additionally you will want to add a ".gitignore" file to your project that minimally contains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node_modules
_output
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "_output" folder is included because this is created by the static site generator build process that is configured in the next step. This folder will always contain generated files so it does not need to be tracked by git.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-static-site-generator"&gt;
  &lt;/a&gt;
  Setup Static Site Generator
&lt;/h3&gt;

&lt;p&gt;If you already have a repository, that includes a Jamstack site setup with a static site generator, you can proceed without this step. In order to illustrate the &lt;a href="https://www.netlify.com/blog/2019/09/27/git-centric-workflow-the-one-api-to-rule-them-all/"&gt;git-centric&lt;/a&gt; deployment process that is promoted by GitHub Actions we can use, &lt;a href="https://www.npmjs.com/package/@protolith/morphic"&gt;morphic&lt;/a&gt; a static site generator built with Node.js and TypeScript. You don't need to use a static site generator in order to use GitHub Actions or the Static Website feature included with Azure Blob Storage, however it can be useful since GitHub Actions can execute commands that will invoke the static site generator build process and upon completion carry out the cloud deployment.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#install-nodejs-and-configure-packagejson"&gt;
  &lt;/a&gt;
  Install Node.js and Configure package.json
&lt;/h4&gt;

&lt;p&gt;Before proceeding make sure to have &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"&gt;npm installed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In your project folder run the command npm init and follow the prompts that are displayed to create a package.json file for your project. Then run the command npm install @protolith/morphic. This will install the morphic static site generator and its dependencies.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add-static-website-content-as-markdown-files"&gt;
  &lt;/a&gt;
  Add Static Website Content as Markdown Files
&lt;/h4&gt;

&lt;p&gt;In the project folder where the package.json file was created you can then run this series of commands to create some site content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;content/pages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;templates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;content/pages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'---
title: "Home"
---
# &amp;lt;%%= model.title %%&amp;gt;
home page content

&amp;lt;a href="/about/"&amp;gt;Go to About Page&amp;lt;/a&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; index.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'---
title: Page Not Found
---

The page you are looking for may have been moved or deleted.

[Go to Homepage](/)'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 404.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'---
title: About
--------
# &amp;lt;%%= model.title %%&amp;gt;
This is the about page.

&amp;lt;a href="/"&amp;gt;Go to Home Page&amp;lt;/a&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../../templates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;%%= model.title %%&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;%%- model.content %%&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; index.ejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: make sure the files created (both ".md" and ".ejs" files) are encoded as UTF-8, or the static site generation process will not work. In Visual Studio Code you can change the file encoding by selecting the file and then in the bottom right hand corner toolbar the encoding is displayed. Click the encoding display in the bottom right toolbar to save with the UTF-8 encoding if needed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-and-serve-static-site-generator-locally"&gt;
  &lt;/a&gt;
  Build and Serve Static Site Generator Locally
&lt;/h4&gt;

&lt;p&gt;To make sure that morphic is setup correctly and generating the appropriate files you can run the command npx morphic --serve, and a browser window should open with the home page displaying a link to the about page. You can navigate back and forth from the home page and about pages. Also you can verify the 404 page was generated by going to the path "404.html" so the full url when running locally might be "&lt;a href="http://localhost:3000/404.html"&gt;http://localhost:3000/404.html&lt;/a&gt;", which corresponds to the error document path setting configured in the Azure Blob Storage Static Website settings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-actions-workflow-to-deploy-static-site-to-azure-blob-storage"&gt;
  &lt;/a&gt;
  Github Actions Workflow To Deploy Static Site to Azure Blob Storage
&lt;/h3&gt;

&lt;p&gt;We now have our static site configured and ready to deploy with a GitHub Actions Workflow. To create a new GitHub Actions Workflow, that will build and deploy the static site from our GitHub repository, add a new folder within the current project folder named ".github". In the ".github" folder add another folder named "workflows" and within the "workflows" folder create a new workflow YAML file named "main.yml". The "main.yml" file is where we will create the GitHub Actions workflow that will build and deploy a Jamstack site to the Azure Blob Storage Static website. Here is the &lt;a href="https://docs.github.com/en/actions/reference"&gt;complete reference documentation for creating workflows&lt;/a&gt; provided by GitHub. We will only use a subset of the available features in our "main.yml" file to build and deploy on a git push command to the main branch in the repository we created. In the "main.yml" file add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MAIN&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;BUILD_COMMAND&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npx morphic&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Dependencies&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ env.BUILD_COMMAND }}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Blobs&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/cli@v1.0.0&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;inlineScript&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;az storage blob sync -c '$web' -s _output --connection-string '${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This workflow will be activated anytime there is a git push command for the main branch in the remote git repository. It will setup a GitHub Actions environment that is running on the latest version of the Ubuntu operating system, and then checkout the latest version of the code from the main branch. After checking out the main branch, the workflow invokes the npm ci command, which is similar to the npm install command, and is suitable for continuous integration environments. This is required to install the morphic static site generator npm package, similar to how we ran the static site generator locally in a previous step.&lt;/p&gt;

&lt;p&gt;With the package.json dependencies installed the "Build" step in the workflow will run the "BUILD_COMMAND" specified as an environment variable. In our case, with the morphic static site generator, this command is the same one as we used before npx morphic, except this time the --serve flag is omitted since the files will be deployed to Azure Blob Storage Static Website hosting.&lt;/p&gt;

&lt;p&gt;After running the Build command the workflow will have access to the site output folder: "_output" in our case, and this is what will be used in the &lt;a href="https://docs.microsoft.com/en-us/cli/azure/what-is-azure-cli"&gt;Azure CLI&lt;/a&gt; portion of the workflow with name "Update Blobs". This uses the &lt;a href="https://github.com/marketplace/actions/azure-cli-action"&gt;Azure CLI Action&lt;/a&gt; to permit the use of Azure CLI commands. In this case we want to use the &lt;a href="https://docs.microsoft.com/en-us/cli/azure/storage/blob?view=azure-cli-latest#az_storage_blob_sync"&gt;az storage blob sync&lt;/a&gt; command to ensure that "$web" blob container is synced to the the current build "_output" folder that was just created during the Build step of the workflow file.&lt;/p&gt;

&lt;p&gt;In order to sync the files to the Azure Blob container named "$web", we need to pass in the "--connection-string" value that acts an access password for the storage account. Instead of creating a security risk by including the blob storage connection string directly in our publicly available workflow we can use &lt;a href="https://docs.github.com/en/actions/reference/encrypted-secrets"&gt;GitHub Actions Repository Secrets&lt;/a&gt; to store secret variables that only the automated workflow environment can access.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-commit-project-and-workflow-files"&gt;
  &lt;/a&gt;
  Git Commit Project and Workflow Files
&lt;/h3&gt;

&lt;p&gt;The workflow configuration file is now included in the project, so we can commit the example static files we created and the workflow file using the commands git add . and then git commit -m 'adding website files and workflow'. However, before we push these changes to the remote GitHub repository we need to configure the "AZURE_STORAGE_CONNECTION_STRING" GitHub Actions secret value that is referenced in the workflow file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-actions-secret"&gt;
  &lt;/a&gt;
  Github Actions Secret
&lt;/h3&gt;

&lt;p&gt;In the Azure portal, the storage account connection string can be copied by going to the Storage Account that was created previously. In the left sidebar find the settings section that contains the Access keys configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xP2ud6bH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01b7bpueb9mphrcuijik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xP2ud6bH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01b7bpueb9mphrcuijik.png" alt="Azure Storage connection string settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can choose the connection string for key1 or key2, but make sure to use the connection string field value and not the Key field value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1KxbiE5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cpqhca5d6eesc63kbk8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1KxbiE5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cpqhca5d6eesc63kbk8.png" alt="Azure storage connection strings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the connection string from the Azure portal settings and go to your GitHub repository interface, and in the top navigation there will be a section labelled "Settings". Clicking on "Settings" will bring you to a new page with a left side navigation that contains a section labelled "Secrets". This is where we will use the copied Azure Blob storage connection string to create a new GitHub Actions secret. On the Secrets page click the button to add a "New repository secret".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sCu1pclJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7komp83r5zzqskch916.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sCu1pclJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7komp83r5zzqskch916.png" alt="GitHub Actions add new repository secret"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then add the secret name that matches the variable name from the "main.yml" workflow file, in this example it is AZURE_STORAGE_CONNECTION_STRING, and paste the Azure Storage connection string into the Value field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3uzwV8vZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is9jio3evecqe1wbjjx8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3uzwV8vZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is9jio3evecqe1wbjjx8.png" alt="GitHub Actions save new repository secret"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click "Add Secret" and our GitHub Actions Workflow can now access the Azure Storage connection string to sync files to Azure Blob Storage. Our GitHub Actions secret is now configured and ready for use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-push-to-deploy-static-website-with-github-actions-to-azure-blob-storage-static-website"&gt;
  &lt;/a&gt;
  Git Push to Deploy Static Website with GitHub Actions to Azure Blob Storage Static Website
&lt;/h3&gt;

&lt;p&gt;Now you can run the command git push -u origin main from your local project and you should see the commit made previously has been pushed to the remote repository in the GitHub interface. In the top navigation of the GitHub repository, the "Actions" tab should now show the workflow automation is underway.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OhzIK3QS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17y4s6nwcyi0qevf8jud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OhzIK3QS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17y4s6nwcyi0qevf8jud.png" alt="GitHub Actions workflow build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the workflow build and deployment process completes, navigate to the primary endpoint for the Azure Blob Storage static website, that was displayed in the first step.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n73UWUpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yebhhb192c43nl7tde4m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n73UWUpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yebhhb192c43nl7tde4m.png" alt="Static site available at Azure Blob Storage static website primary endpoint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see the home page now displays the content of our site and you can navigate to the About page that was created earlier. If you accidentally navigate to a page that does not exist, the error document path is set to 404.html, and Azure Blob Storage will return the 404.md page content that was added as a page within the static site.&lt;/p&gt;

&lt;p&gt;Anytime you want to make changes to your site in the future, you can follow the same process as this example by first committing the changes to the main branch and then pushing the changes to the remote GitHub repository. This will trigger the GitHub Actions workflow and the changes will be automatically updated on the static website.&lt;/p&gt;

</description>
      <category>github</category>
      <category>azure</category>
      <category>static</category>
    </item>
    <item>
      <title>How to work with error handling in Javascript</title>
      <author>Terry Threatt</author>
      <pubDate>Sat, 17 Apr 2021 22:36:22 +0000</pubDate>
      <link>https://dev.to/terrythreatt/how-to-work-with-error-handling-in-javascript-48dg</link>
      <guid>https://dev.to/terrythreatt/how-to-work-with-error-handling-in-javascript-48dg</guid>
      <description>&lt;p&gt;In programming unintended side-effects called &lt;strong&gt;errors&lt;/strong&gt; can and will happen in your code. Allowing these errors to be introduced to people that are using your programs is frowned upon and a very bad user experience. &lt;/p&gt;

&lt;p&gt;Error Handling is the technique of smoothly handling these errors and providing useful information to a user. &lt;/p&gt;

&lt;p&gt;Here are the important parts of error handling: &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#try"&gt;
  &lt;/a&gt;
  Try
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;try&lt;/strong&gt; block allows you to try an initial blog of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;www.worktobedone.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#catch"&gt;
  &lt;/a&gt;
  Catch
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;catch&lt;/strong&gt; block allows you to catch an error from the initial blog of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;www.worktobedone.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// Here we caught an error to alert&lt;/span&gt;
     &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#throw"&gt;
  &lt;/a&gt;
  Throw
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;throw&lt;/strong&gt; keyword allows you to control or create custom exceptions from your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;www.worktobedone.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// Lets change the error output&lt;/span&gt;
     &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Oops we found this error during work - &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finally"&gt;
  &lt;/a&gt;
  Finally
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;finally&lt;/strong&gt; block allows you to execute code regardless of errors in the try and catch blocks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;www.worktobedone.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Oops we found this error during work - &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My work here is done.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lets-chat-about-error-handling"&gt;
  &lt;/a&gt;
  Let's chat about error handling
&lt;/h3&gt;

&lt;p&gt;This walkthrough showed the steps to using the try..catch...finally block to handle errors. If you enjoyed this post feel free to leave a comment about your thoughts and experiences handling errors in your code.&lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;br&gt;
Terry Threatt&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
