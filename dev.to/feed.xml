<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Ember Apollo Client + @use </title>
      <author>Chris Miller</author>
      <pubDate>Tue, 13 Apr 2021 22:36:48 +0000</pubDate>
      <link>https://dev.to/chrismllr/ember-apollo-client-use-5h3o</link>
      <guid>https://dev.to/chrismllr/ember-apollo-client-use-5h3o</guid>
      <description>&lt;p&gt;I've recently spun up my first Ember app using GraphQL, and as I would do when approaching any new functionality in my Ember app, I reached for the community supported addon &lt;a href="https://github.com/ember-graphql/ember-apollo-client"&gt;&lt;code&gt;ember-apollo-client&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ember-apollo-client&lt;/code&gt; provides a really nice wrapper around everything I'd want to do with the &lt;code&gt;@apollo/client&lt;/code&gt;, without making too many assumptions/ abstractions. It nicely wraps the &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;watchQuery&lt;/code&gt;, and &lt;code&gt;subscribe&lt;/code&gt; methods, and provides a &lt;code&gt;queryManager&lt;/code&gt; for calling those methods, which quite nicely cleans them up for you as well.&lt;/p&gt;

&lt;p&gt;Ember traditionally has many ways to set up/ clean up data-fetching methods, and you usually fall into two camps; I find myself choosing a different path almost every time I write an ember app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-the-raw-model-endraw-hook"&gt;
  &lt;/a&gt;
  1. Use the &lt;code&gt;model&lt;/code&gt; hook
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ember-apollo-client&lt;/code&gt; first suggests using your model hook, illustrated here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/routes/teams.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ember/routing/route&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../gql/queries/teams&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TeamsRoute&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;queryManager&lt;/span&gt; &lt;span class="nx"&gt;apollo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apollo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watchQuery&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;teams&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; This method is well supported by the framework, and allows for utilizing &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;loading&lt;/code&gt; substates to render something while the model is reloading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawbacks:&lt;/strong&gt; &lt;code&gt;query parameters&lt;/code&gt;. Say we have a &lt;code&gt;sort&lt;/code&gt; parameter. We would then set up an additional &lt;code&gt;observable&lt;/code&gt; property within our model hook, and likely use the &lt;code&gt;setupController&lt;/code&gt; hook to set that on our controller for re-fetching data when &lt;code&gt;sort&lt;/code&gt; changes. This is fine, but includes extra code which could become duplicative throughout your app; leading to potential bugs if a developer misses something.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-utilize-raw-emberconcurrency-endraw-"&gt;
  &lt;/a&gt;
  2. Utilize &lt;code&gt;ember-concurrency&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Based on a suggestion I found while digging through their issues and documentation, I gave &lt;code&gt;ember-concurrency&lt;/code&gt; a shot:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/routes/teams.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ember/routing/route&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TeamsRoute&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setupController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchTeams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;resetController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchTeams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cancelAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchTeams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastSuccessful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// app/controllers/teams.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ember/controller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../gql/queries/teams&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TeamsController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;queryManager&lt;/span&gt; &lt;span class="nx"&gt;apollo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;tracked&lt;/span&gt; &lt;span class="nx"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;created:desc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;task&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;fetchTeams&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apollo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watchQuery&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
      &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getObservable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;action&lt;/span&gt; &lt;span class="nx"&gt;updateSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchTeams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastSuccessful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;refetch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; This feels a little more ergonomic. Within the &lt;code&gt;ember-concurrency&lt;/code&gt; task &lt;code&gt;fetchTeams&lt;/code&gt;, we can set up an observable which will be exposed via &lt;code&gt;task.lastSuccessful&lt;/code&gt;. That way, whenever our sort property changes, we can access the underlying observable and &lt;code&gt;refetch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ember-concurrency&lt;/code&gt; also gives us some great metadata and contextual state for whether our task's &lt;code&gt;perform&lt;/code&gt; is running, or if it has errored, which allows us to control our loading/ error state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawbacks&lt;/strong&gt;: In order to perform, and subsequently clean this task up properly, we're going to need to utilize the route's &lt;code&gt;setupController&lt;/code&gt; and &lt;code&gt;resetController&lt;/code&gt; methods, which can be cumbersome, and cleanup especially is easily missed or forgotten.&lt;/p&gt;

&lt;p&gt;This also requires the developer writing this code to remember to &lt;code&gt;unsubscribe&lt;/code&gt; to the watchQuery. As the controller is a singleton, it is not being torn down when leaving the route, so the queryManager unsubscribe will not be triggered. &lt;em&gt;Note: if this is untrue, please let me know in the comments!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Either way, we will still need to cancel the task. This is a lot to remember!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-raw-use-endraw-"&gt;
  &lt;/a&gt;
  Enter &lt;code&gt;@use&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Chris Garrett (&lt;a class="mentioned-user" href="https://dev.to/pzuraq"&gt;@pzuraq&lt;/a&gt;
) and the Ember core team have been working towards the &lt;code&gt;@use&lt;/code&gt; API for some time now. Current progress can be read about &lt;a href="https://www.pzuraq.com/introducing-use/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While &lt;code&gt;@use&lt;/code&gt; is not yet a part of the Ember public API, the article explains the low-level primitives which, as of Ember version 3.25+, are available to make &lt;code&gt;@use&lt;/code&gt; possible. In order to test out the proposed &lt;code&gt;@use&lt;/code&gt; API, you can try it out via the &lt;a href="https://github.com/pzuraq/ember-could-get-used-to-this"&gt;&lt;code&gt;ember-could-get-used-to-this&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ Warning -- the API for &lt;code&gt;@use&lt;/code&gt; and &lt;code&gt;Resource&lt;/code&gt; could change, so keep tabs on the current usage!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-does-this-help-us"&gt;
  &lt;/a&gt;
  How does this help us?
&lt;/h2&gt;

&lt;p&gt;Remember all of those setup/ teardown methods required on our route? Now, using a helper which extends the &lt;code&gt;Resource&lt;/code&gt; exported from &lt;code&gt;ember-could-get-used-to-this&lt;/code&gt;, we can handle all of that.&lt;/p&gt;

&lt;p&gt;Lets go &lt;code&gt;ts&lt;/code&gt; to really show some benefits we get here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/routes/teams.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ember/routing/route&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TeamsRoute&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;// app/controllers/teams.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ember/controller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ember-could-get-used-to-this&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../gql/queries/teams&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetTeams&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../gql/queries/types/GetTeams&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;WatchQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../helpers/watch-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;valueFor&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/value-for&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TeamsController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;tracked&lt;/span&gt; &lt;span class="nx"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;created:desc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;teamsQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;valueFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WatchQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GetTeams&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}]));&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;action&lt;/span&gt; &lt;span class="nx"&gt;updateSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: The &lt;code&gt;valueFor&lt;/code&gt; utility function helps us infer the correct &lt;code&gt;value&lt;/code&gt; type on our controller for our &lt;code&gt;WatchQuery&lt;/code&gt; resource. It should be available from the &lt;code&gt;ember-could-get-used-to-this&lt;/code&gt; package soon.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And voila! No more setup/ teardown, our &lt;code&gt;WatchQuery&lt;/code&gt; helper handles all of this for us.&lt;/p&gt;

&lt;p&gt;So whats going on under the hood?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/helpers/watch-query.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tracked&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@glimmer/tracking&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Resource&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ember-could-get-used-to-this&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getObservable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ember-apollo-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TaskGenerator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;keepLatestTask&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ember-concurrency&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ApolloService&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ember-apollo-client/services/apollo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ObservableQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;WatchQueryOptions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@apollo/client/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;taskFor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ember-concurrency-ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;WatchQueryArgs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;positional&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;WatchQueryOptions&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;WatchQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;WatchQueryArgs&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;queryManager&lt;/span&gt; &lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="na"&gt;apollo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ApolloService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;tracked&lt;/span&gt; &lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;tracked&lt;/span&gt; &lt;span class="na"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ObservableQuery&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;isRunning&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;taskFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;isRunning&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;isRunning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isRunning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;keepLatestTask&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;TaskGenerator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apollo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watchQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;positional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getObservable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;taskFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;refetch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;taskFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;cancelAll&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;resetState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lot going on, lets break it down:&lt;/p&gt;

&lt;p&gt;We've brought in some libraries to help with using &lt;code&gt;typescript&lt;/code&gt;, including &lt;code&gt;ember-concurrency-ts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Resource&lt;/code&gt; class gives us a way to perform our task upon initialization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;taskFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a way to clean up after ourselves when we're done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;taskFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;cancelAll&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;resetState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And remember how we declaratively called &lt;code&gt;refetch&lt;/code&gt; after updating sort? Well, now we can utilize ember's tracking system, since we passed &lt;code&gt;sort&lt;/code&gt; in the constructor function, it should reliably trigger the &lt;code&gt;update&lt;/code&gt; hook if updated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;refetch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#where-do-we-go-from-here"&gt;
  &lt;/a&gt;
  Where do we go from here
&lt;/h2&gt;

&lt;p&gt;From here, you can use the same paradigm to build out Resources for handling &lt;code&gt;apollo.subscribe&lt;/code&gt; and &lt;code&gt;apollo.query&lt;/code&gt;, with few code changes.&lt;/p&gt;

&lt;p&gt;As our app is very new, we plan on tracking how this works for us over time, but not having to worry about setting up/ cleaning up queries for our application should greatly improve the developer experience right off the bat.&lt;/p&gt;

&lt;p&gt;An important thing to note, this article focuses on wrapping the &lt;code&gt;ember-apollo-client&lt;/code&gt; methods, but can Easily be extrapolated to support any data-fetching API you want to use, including Ember Data.&lt;/p&gt;

&lt;p&gt;Thanks for reading! Please let me know what ya think in the comments 👋&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>ember</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Express.js With Typescript Decorators in Examples</title>
      <author>Artem Diashkin</author>
      <pubDate>Tue, 13 Apr 2021 22:28:21 +0000</pubDate>
      <link>https://dev.to/nemrosim/express-js-with-typescript-decorators-in-examples-5c2i</link>
      <guid>https://dev.to/nemrosim/express-js-with-typescript-decorators-in-examples-5c2i</guid>
      <description>&lt;p&gt;Let’s take a look at how we can make our Express.js Server code cleaner with using Typescript Decorators.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/express-js-with-typescript-decorators-in-examples-5f82223159c1"&gt;https://medium.com/geekculture/express-js-with-typescript-decorators-in-examples-5f82223159c1&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>typescript</category>
      <category>backend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Tanzu Mission Control – Deploying TKG Clusters to AWS</title>
      <author>Dean</author>
      <pubDate>Tue, 13 Apr 2021 21:56:47 +0000</pubDate>
      <link>https://dev.to/saintdle/tanzu-mission-control-deploying-tkg-clusters-to-aws-52np</link>
      <guid>https://dev.to/saintdle/tanzu-mission-control-deploying-tkg-clusters-to-aws-52np</guid>
      <description>&lt;p&gt;This blog post will cover a technical walk-through on using Tanzu Mission Control to deploy Tanzu Kubernetes clusters to AWS.&lt;/p&gt;

&lt;p&gt;The follow up blog posts in this series are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Tanzu Mission Control
- [Getting Started with TMC](https://veducate.co.uk/vmware-tanzu-mission-control-getting-started/)
- - What is Tanzu Mission Control?
- - Creating a Cluster Group
- - Attaching a cluster to Tanzu Mission Control
- - Viewing your Cluster Objects
- - Where can I demo/test/trial this myself?
- [Cluster Inspections](https://vEducate.co.uk/vmware-tanzu-mission-control-cluster-inspections)
- - What Inspections are available 
- - Performing Inspections 
- - Viewing Inspections
- [Workspaces and Policies](https://vEducate.co.uk/vmware-tanzu-mission-control-workspaces-and-policies)
- - Creating a workspace 
- - Creating a managed Namespace 
- - Policy Driven Cluster Management 
- - Creating Policies
- [Using the Data Protection feature for backups and restores](https://veducate.co.uk/vmware-tanzu-mission-control-data-protection/)
- - Data Protection Overview 
- - Create a AWS Data Protection Credential 
- - Enable Data Protection on a Cluster 
- - Running a backup manually or via an automatic schedule 
- - Restoring your data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#using-the-aws-hosted-management-cluster"&gt;
  &lt;/a&gt;
  Using the AWS Hosted Management Cluster
&lt;/h6&gt;

&lt;p&gt;In this example, we will use the default provided AWS Hosted Management cluster.&lt;/p&gt;

&lt;p&gt;Alternatively, you can use the Tanzu CLI to provision a TKG Management cluster into AWS and attach this to Tanzu Mission Control.&lt;/p&gt;

&lt;p&gt;Currently it is not supported to have a Management Cluster manage clusters across platforms.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I.e. Management Cluster in AWS that manages workload clusters in Azure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to Administration&lt;/li&gt;
&lt;li&gt;Click the Management Clusters Tab&lt;/li&gt;
&lt;li&gt;Click on the “aws-hosted” cluster object name&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Administration-Management-Clusters.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZwARStC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Administration-Management-Clusters.jpg%3Fresize%3D604%252C242%26ssl%3D1" alt="TMC - Administration - Management Clusters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#create-a-provisioner"&gt;
  &lt;/a&gt;
  Create a provisioner
&lt;/h6&gt;

&lt;p&gt;The default tab when selecting the “aws-hosted” management cluster object is the provisioner tab.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click create provisioner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-aws-hosted-provisioners-create-provisioner.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVreJc1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-aws-hosted-provisioners-create-provisioner.jpg%3Fresize%3D604%252C95%26ssl%3D1" alt="TMC - aws-hosted - provisioners - create provisioner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide a name for the provisioner&lt;/li&gt;
&lt;li&gt;Click confirm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-aws-hosted-provisioners-create-provisioner-provide-name.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QNT828N4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-aws-hosted-provisioners-create-provisioner-provide-name.jpg%3Fresize%3D545%252C265%26ssl%3D1" alt="TMC - aws-hosted - provisioners - create provisioner - provide name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be taken back to your provisioner object which is created. Using the radio button to select the object will allow you to delete it. No other action is available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-aws-hosted-provisioners-provisioner-created.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qenbKWd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-aws-hosted-provisioners-provisioner-created.jpg%3Fresize%3D604%252C149%26ssl%3D1" alt="TMC - aws-hosted - provisioners - provisioner created"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#create-the-aws-account"&gt;
  &lt;/a&gt;
  Create the AWS account
&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;Click on accounts tab&lt;/li&gt;
&lt;li&gt;Click the “Create Account Credential” Button&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-aws-hosted-accounts-create-account-credential.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5GKJtgP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-aws-hosted-accounts-create-account-credential.jpg%3Fresize%3D604%252C202%26ssl%3D1" alt="TMC - aws-hosted - accounts - create account credential"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the provisioner you created in the last steps&lt;/li&gt;
&lt;li&gt;Provide a credential name&lt;/li&gt;
&lt;li&gt;Click “Generate Template” and download the template file provided.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNyb3NVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Create-AWS-cluster-lifecycle-management-provider-credential-Credential-Name.jpg%3Fresize%3D604%252C246%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNyb3NVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Create-AWS-cluster-lifecycle-management-provider-credential-Credential-Name.jpg%3Fresize%3D604%252C246%26ssl%3D1" alt="TMC - Create AWS cluster lifecycle management provider credential - Credential Name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Create-AWS-cluster-lifecycle-management-provider-credential-Credential-Name-Generate-Template.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DnPq8EK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Create-AWS-cluster-lifecycle-management-provider-credential-Credential-Name-Generate-Template.jpg%3Fresize%3D374%252C310%26ssl%3D1" alt="TMC - Create AWS cluster lifecycle management provider credential - Credential Name - Generate Template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create your AWS ARN in the AWS console using CloudFormation, you can follow the &lt;a href="https://docs.vmware.com/en/VMware-Tanzu-Mission-Control/services/tanzumc-using/GUID-E728F568-5F1F-4963-A887-F09E2D19EA34.html"&gt;documentation here for these steps.&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Create-AWS-cluster-lifecycle-management-provider-credential-AWS-configuration.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cn_04XAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Create-AWS-cluster-lifecycle-management-provider-credential-AWS-configuration.jpg%3Fresize%3D604%252C145%26ssl%3D1" alt="TMC - Create AWS cluster lifecycle management provider credential - AWS configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide the ARN output from the CloudFormation Stack and click “Create Credential”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Create-AWS-cluster-lifecycle-management-provider-credential-AWS-role-ARN-.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEWQCMM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Create-AWS-cluster-lifecycle-management-provider-credential-AWS-role-ARN-.jpg%3Fresize%3D604%252C285%26ssl%3D1" alt="TMC - Create AWS cluster lifecycle management provider credential - AWS role ARN"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a few minutes your account should have a green tick next to it when TMC has validated access to AWS using the ARN role details provided for the account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-aws-hosted-account-created.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOUR-hbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-aws-hosted-account-created.jpg%3Fresize%3D604%252C145%26ssl%3D1" alt="TMC - aws-hosted - account created"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#create-a-tanzu-kubernetes-grid-cluster"&gt;
  &lt;/a&gt;
  Create a Tanzu Kubernetes Grid Cluster
&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;Go to Clusters Tab in the left-hand navigation window&lt;/li&gt;
&lt;li&gt;Click Create Cluster&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TV9vcrJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster.jpg%3Fresize%3D604%252C203%26ssl%3D1" alt="TMC - Clusters - Create Cluster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select your management cluster where you want to provision the new workload cluster&lt;/li&gt;
&lt;li&gt;Click “Continue to create cluster”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Select-Management-Cluster.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qznUXXbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Select-Management-Cluster.jpg%3Fresize%3D604%252C131%26ssl%3D1" alt="TMC - Clusters - Create Cluster - Select Management Cluster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select your Provisioner&lt;/li&gt;
&lt;li&gt;Select your AWS Account Credentials&lt;/li&gt;
&lt;li&gt;Select your Cluster Group (&lt;a href="https://veducate.co.uk/vmware-tanzu-mission-control-getting-started/"&gt;if you’ve already created one&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add a description (Optional)&lt;/li&gt;
&lt;li&gt;Add labels (Optional)&lt;/li&gt;
&lt;li&gt;Click Next&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Name-and-Assign.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t1FjJs6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Name-and-Assign.jpg%3Fresize%3D604%252C497%26ssl%3D1" alt="TMC - Clusters - Create Cluster - Name and Assign"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select Region&lt;/li&gt;
&lt;li&gt;Select your SSH Key Pair (You &lt;a href="https://docs.aws.amazon.com/ground-station/latest/ug/create-ec2-ssh-key-pair.html"&gt;create these&lt;/a&gt; in your AWS EC2 Console)&lt;/li&gt;
&lt;li&gt;Select the version of Kubernetes you want to deploy&lt;/li&gt;
&lt;li&gt;Select to create a new or existing VPC

&lt;ul&gt;
&lt;li&gt;Set the VPC CIDR if new is selected&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Set your Pod CIDR and Service CIDR&lt;/li&gt;
&lt;li&gt;Click Next&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Configure.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lKjKqKEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Configure.jpg%3Fresize%3D604%252C514%26ssl%3D1" alt="TMC - Clusters - Create Cluster - Configure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select your node deployment type

&lt;ul&gt;
&lt;li&gt;Singe node – as it says on the tin&lt;/li&gt;
&lt;li&gt;Highly available – a three node deployment&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Select your availability zones to be used&lt;/li&gt;
&lt;li&gt;Select Next&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Select-Control-Plane.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BPRrhI7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Select-Control-Plane.jpg%3Fresize%3D604%252C426%26ssl%3D1" alt="TMC - Clusters - Create Cluster - Select Control Plane"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Node pools are a construct grouping worker node configurations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set a name for your node pool&lt;/li&gt;
&lt;li&gt;Set a description (Optional)&lt;/li&gt;
&lt;li&gt;Set Worker instance size&lt;/li&gt;
&lt;li&gt;Set Number of worker nodes&lt;/li&gt;
&lt;li&gt;Set availability zone to be used&lt;/li&gt;
&lt;li&gt;Set Node Labels (Optional)&lt;/li&gt;
&lt;li&gt;Set Cluster Labels (Optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add another node pool as needed, in my example my second node pool uses a different availability zone.&lt;/p&gt;

&lt;p&gt;Click Create Cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Edit-and-add-node-pools.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7iS20eEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Edit-and-add-node-pools.jpg%3Fresize%3D604%252C213%26ssl%3D1" alt="TMC - Clusters - Create Cluster - Edit and add node pools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be taken to the Cluster Object UI page for the new cluster, but as it’s not created yet, you’ll get a warning/error message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Cluster-Creating.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EsMoWkee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Cluster-Creating.jpg%3Fresize%3D604%252C241%26ssl%3D1" alt="TMC - Clusters - Create Cluster - Cluster Creating"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait 60 seconds or so and refresh your browser and you’ll get an updated status message for the cluster that is being created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Your-cluster-is-being-created.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CGsf-Ynm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Your-cluster-is-being-created.jpg%3Fresize%3D604%252C238%26ssl%3D1" alt="TMC - Clusters - Create Cluster - Your cluster is being created"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click Clusters in the left-hand navigation pane, you will see your cluster in the list with the creating status.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Cluster-Creating.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOP9UVU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Cluster-Creating.jpg%3Fresize%3D604%252C202%26ssl%3D1" alt="TMC - Clusters - Cluster Creating"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, you will see the cluster status change to “Ready”. Below is a screenshot of one of my provisioned clusters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Cluster-Ready.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qne7g9j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Clusters-Create-Cluster-Cluster-Ready.jpg%3Fresize%3D604%252C416%26ssl%3D1" alt="TMC - Clusters - Create Cluster - Cluster Ready"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#getting-access-to-your-cluster-through-the-tmc-ui"&gt;
  &lt;/a&gt;
  Getting access to your cluster through the TMC UI
&lt;/h6&gt;

&lt;p&gt;On your Cluster page, under actions, select “Access this cluster”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Access-your-cluster-through-the-UI.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--th6Qggc9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Access-your-cluster-through-the-UI.jpg%3Fresize%3D604%252C128%26ssl%3D1" alt="TMC - Access your cluster - through the UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can download the kubeconfig file to be used&lt;/li&gt;
&lt;li&gt;View the YAML file in your web browser&lt;/li&gt;
&lt;li&gt;See an example Kubectl command line use the kubeconfig file provided&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Access-your-cluster-download-kubeconfig.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Q4Brvuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Access-your-cluster-download-kubeconfig.jpg%3Fresize%3D546%252C739%26ssl%3D1" alt="TMC - Access your cluster - download kubeconfig"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#getting-access-to-your-cluster-through-the-tmc-cli"&gt;
  &lt;/a&gt;
  Getting access to your cluster through the TMC CLI
&lt;/h6&gt;

&lt;p&gt;You will need the TMC command line installed and logged in using a CSP API Token.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install the Tanzu Mission Control CLI (TMC).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the left navigation pane of the Tanzu Mission Control console, click Automation center.&lt;/li&gt;
&lt;li&gt;On the Automation Center page, click Download CLI, and then choose the environment where you want to use the CLI.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retrieve an API token:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On the Download CLI page, click the link to go to the My Account page in the VMware Cloud Services console.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://console.cloud.vmware.com/csp/gateway/portal/#/user/tokens"&gt;http://console.cloud.vmware.com/csp/gateway/portal/#/user/tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click the API Tokens tab.&lt;/li&gt;
&lt;li&gt;Click Generate Token to create an API token with a scope of All Roles, and then copy the generated token.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmc login

# Provide the API Token
# Provide the Organisation name
# Provide the management cluster name (default: aws-hosted)
# Provide the Provisioner Nam
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lA7bcizG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/Access-your-cluster-tmc-login.jpg%3Fresize%3D604%252C98%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lA7bcizG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/Access-your-cluster-tmc-login.jpg%3Fresize%3D604%252C98%26ssl%3D1" alt="Access your cluster - tmc login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Get the details of your clusters managed by TMC

tmc cluster list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/Access-your-cluster-tmc-cluster-list.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gcC-mQRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/Access-your-cluster-tmc-cluster-list.jpg%3Fresize%3D604%252C105%26ssl%3D1" alt="Access your cluster - tmc cluster list"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Retrieve the kubeconfig file for your cluster. The below uses the argument to retrieve the admin configuration. 

tmc cluster auth admin-kubeconfig get {cluster name} -m {management cluster name} -p {provisioner name}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Access-your-cluster-tmc-auth-admin-kubeconfig-get-.jpg?ssl=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jeoh4EaO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/TMC-Access-your-cluster-tmc-auth-admin-kubeconfig-get-.jpg%3Fresize%3D604%252C323%26ssl%3D1" alt="TMC - Access your cluster - tmc auth admin-kubeconfig get"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Example below which sends the output to a file

tmc cluster auth admin-kubeconfig get veducate-tkg-aws -m aws-hosted -p veducate-cluster-provisioner &amp;gt; veducate-tkg-aws
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally run commands against your cluster using the config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl {cmd arguments} --kubeconfig={output file location}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ot5bPJmB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/Access-your-cluster-tmc-auth-admin-kubeconfig-get-.jpg%3Fresize%3D604%252C56%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ot5bPJmB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/veducate.co.uk/wp-content/uploads/2021/04/Access-your-cluster-tmc-auth-admin-kubeconfig-get-.jpg%3Fresize%3D604%252C56%26ssl%3D1" alt="Access your cluster - tmc auth admin-kubeconfig get"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrap-up and Resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this walk-through we used Tanzu Mission Control to deploy a Tanzu Kubernetes Grid cluster to AWS, using the in-built hosted management cluster provided out of the box. All the steps provided in this blog post can be replicated using the TMC CLI as well.&lt;/p&gt;

&lt;p&gt;As a reminder, to take real advantage of TMC I recommend you read the follow posts;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Tanzu Mission Control 

- [Getting Started Tanzu Mission Control](https://vEducate.co.uk/vmware-tanzu-mission-control-getting-started) 
- [Cluster Inspections](https://vEducate.co.uk/vmware-tanzu-mission-control-cluster-inspections) 
- [Workspaces and Policies](https://veducate.co.uk/vmware-tanzu-mission-control-workspaces-and-policies/)
- [Data Protection](https://veducate.co.uk/?p=3429&amp;amp;preview=true)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get hands on experience of Tanzu Mission Control yourself over on the VMware Hands-on-Lab website, which is always free!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://labs.hol.vmware.com/HOL/catalogs/lab/6965"&gt;HOL-2032-01-CNA – VMware Tanzu Mission Control&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In this lab you will be exposed to various aspects of VMware’s Tanzu Mission Control including Kubernetes cluster lifecycle management, health checks, environment at-a-glance monitoring, access policies, and conformance testing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I’ll sign off with links to the official resources.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tanzu Mission Control

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tanzu.vmware.com/mission-control"&gt;Product Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.vmware.com/en/VMware-Tanzu-Mission-Control/index.html"&gt;Product Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regards&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/saintdle"&gt;Follow @Saintdle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uk.linkedin.com/in/saintdle?trk=profile-badge"&gt;Dean Lewis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://veducate.co.uk/tmc-deploy-tkg-aws/"&gt;Tanzu Mission Control – Deploying TKG Clusters to AWS&lt;/a&gt; appeared first on &lt;a href="https://veducate.co.uk"&gt;vEducate.co.uk&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>vmware</category>
      <category>aws</category>
      <category>deployment</category>
    </item>
    <item>
      <title>HTML Crash Course</title>
      <author>César</author>
      <pubDate>Tue, 13 Apr 2021 21:38:58 +0000</pubDate>
      <link>https://dev.to/cesar_code/html-crash-course-1djc</link>
      <guid>https://dev.to/cesar_code/html-crash-course-1djc</guid>
      <description>&lt;h3&gt;
  &lt;a href="#html-subguide"&gt;
  &lt;/a&gt;
  HTML sub-guide
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;HTML Skeleton&lt;/li&gt;
&lt;li&gt;Headings&lt;/li&gt;
&lt;li&gt;Paragraphs&lt;/li&gt;
&lt;li&gt;Links&lt;/li&gt;
&lt;li&gt;Media&lt;/li&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;Attributes&lt;/li&gt;
&lt;li&gt;Links&lt;/li&gt;
&lt;li&gt;Meta&lt;/li&gt;
&lt;li&gt;Semantics&lt;/li&gt;
&lt;li&gt;Non-semantics&lt;/li&gt;
&lt;li&gt;Styles&lt;/li&gt;
&lt;li&gt;Tables&lt;/li&gt;
&lt;li&gt;iframes&lt;/li&gt;
&lt;li&gt;Forms&lt;/li&gt;
&lt;li&gt;Buttons&lt;/li&gt;
&lt;li&gt;Select&lt;/li&gt;
&lt;li&gt;Datalist&lt;/li&gt;
&lt;li&gt;Template&lt;/li&gt;
&lt;li&gt;SVGs&lt;/li&gt;
&lt;li&gt;Comments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This crash course targets beginners in web development. It helps and guides those who want to have a thorough understanding of HTML tags. It can also be a refresher for advanced developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-html"&gt;
  &lt;/a&gt;
  1. HTML
&lt;/h3&gt;

&lt;p&gt;So What's HTML?&lt;br&gt;
HTML is a &lt;strong&gt;Hypertext Markup Language&lt;/strong&gt;. It is not a programming language; it's just a way of structuring the content and rendering it on a webpage. To use this markup language, you will have to employ HTML &lt;em&gt;opening tags &amp;lt;&amp;gt;&lt;/em&gt; and &lt;em&gt;closing tags &amp;lt;/&amp;gt;&lt;/em&gt;.&lt;br&gt;
So what do you have to learn in HTML? You need to understand the basics.&lt;/p&gt;

&lt;p&gt;Note that when you create a new file you have to save it with an &lt;code&gt;.html&lt;/code&gt; extension. For instance, the homepage is conventionally named &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-html-skeleton"&gt;
  &lt;/a&gt;
  2. HTML Skeleton
&lt;/h3&gt;

&lt;p&gt;HTML skeleton triggers the environment where you are going to work. Before starting any projects, you will have to include the following HTML skeleton:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- `DOCTYPE html` refers to the declaration of the HTML version you are using which is basically HTML5. --&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- We use &amp;lt;meta&amp;gt; tags to add data that characterises a webpage. --&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- &amp;lt;title&amp;gt; tag allows you to add the website's name. --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Webpage&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- &amp;lt;link&amp;gt; tag lets you add stylesheets where you can add styles to the webpage. --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Inside the &amp;lt;body&amp;gt; tag, we add all that has to do with the webpage content. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-headings"&gt;
  &lt;/a&gt;
  3. Headings
&lt;/h3&gt;

&lt;p&gt;Headings are titles that go from &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, the biggest, to &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, the smallest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;I am a title&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;I am a title&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;I am a title&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;I am a title&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h5&amp;gt;&lt;/span&gt;I am a title&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h6&amp;gt;&lt;/span&gt;I am a title&lt;span class="nt"&gt;&amp;lt;/h6&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-paragraphs"&gt;
  &lt;/a&gt;
  4. Paragraphs
&lt;/h3&gt;

&lt;p&gt;We use &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags to declare paragraphs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I am a paragraph.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-links"&gt;
  &lt;/a&gt;
  5. Links
&lt;/h3&gt;

&lt;p&gt;We use &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags to create links that take the user to another page other than the current one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://www.google.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Visit Google&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-media"&gt;
  &lt;/a&gt;
  6. Media
&lt;/h3&gt;

&lt;p&gt;6.1. Images&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags to add images. Note that these tags are &lt;em&gt;self-closing&lt;/em&gt; tags which means they don't require a closing tag; it closes itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"apple.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;src&lt;/code&gt; and &lt;code&gt;alt&lt;/code&gt; attributes are required. &lt;code&gt;src&lt;/code&gt; contains the image path. &lt;code&gt;alt&lt;/code&gt; contains a brief phrase about that image so in case the internet breaks down somehow, the user will still know what the image is.&lt;/p&gt;

&lt;p&gt;6.2. Videos&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tags to insert videos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;controls&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"olaf.mp4"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- video tags can have multiple attributes to give the videos some functionalities like:

        1. 'controls' to make the video controllable by the user.
        2. 'muted' to make the video in silent mode.
        3. 'autoplay' as the attribute suggests to make the video play when a webpage first loads
        4. 'poster='thumbnail.jpg' to place a poster before the video kicks off.
--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;6.3. Audios&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; tags to insert audios.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;audio&lt;/span&gt; &lt;span class="na"&gt;controls&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"olaf.mp3"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"audio/mpeg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- audio tags can have multiple attributes to give the audios some functionalities like:

        1. 'controls' to make the audio controllable by the user.
        2. 'muted' to make the audio in silent mode.
        3. 'autoplay' as the attribute suggests to make the audio play when a webpage first loads.
--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-lists"&gt;
  &lt;/a&gt;
  7. Lists
&lt;/h3&gt;

&lt;p&gt;7.1. Ordered Lists&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Ordered Lists show up with numbers. --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;7.2. Unordered Lists&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Unordered Lists show up with bullet points. They are not organised. --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;7.3. Definition Lists&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Unordered Lists show up with extra spaces. --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;dl&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;Item 1 is an amazing product which you can buy&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;Item 2 is a fantastic product&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-attributes"&gt;
  &lt;/a&gt;
  8. Attributes
&lt;/h3&gt;

&lt;p&gt;8.1. Ids&lt;/p&gt;

&lt;p&gt;We use an &lt;code&gt;id&lt;/code&gt; attribute when an element has a unique style that's not common.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"special"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  I have an Id attribute. You can select only me because I'm unique.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8.2. Classes&lt;/p&gt;

&lt;p&gt;We use a &lt;code&gt;class&lt;/code&gt; attribute when some elements share common styles. We can also reference single elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"red-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  I have a class. That doesn't make me special. Other tags and I have a common class because we share common styles.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8.3. Hyper-reference&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags to create a link. To make it work, we need to insert the link inside the attribute &lt;code&gt;href&lt;/code&gt;, which stands for hyper-reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://www.domain.com"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;I have got a hyper-reference (href) on me so you can go to that link&lt;span class="nt"&gt;&amp;lt;/a&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8.4. Source (src)&lt;/p&gt;

&lt;p&gt;We use the &lt;code&gt;src&lt;/code&gt; attribute to add the image path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"cat.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8.5. Alternative (alt)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;alt&lt;/code&gt; plays the role of an alternative for images not being displayed due to connection problems. It shows up the phrase you include inside the &lt;code&gt;alt&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"cat.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"this is a cat"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8.6. Style&lt;/p&gt;

&lt;p&gt;We use the attribute &lt;code&gt;style&lt;/code&gt; to add some styles to the elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: red;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;I'm a paragraph and my color is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Note that there are three ways of adding styles to our webpage:
        1. Inline style which is achieved through using the attribute style.
        2. Style tag inside the head tag.
        3. Separate stylesheets.
 --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8.7. Title&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; attribute gives a brief description of elements being hovered on. For instance, when a user hovers over a logo, a text shows up displaying 'Home'.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://www.youtube.com"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"go to YouTube"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;YouTube&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-links"&gt;
  &lt;/a&gt;
  9. Links
&lt;/h3&gt;

&lt;p&gt;Let's agree on something. This &lt;code&gt;link&lt;/code&gt; is not like the links enclosed by &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags. We add this &lt;code&gt;link&lt;/code&gt; tag inside the &lt;code&gt;head&lt;/code&gt; as it contains stylesheets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-meta"&gt;
  &lt;/a&gt;
  10. Meta
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags contain special data about a webpage&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#11-semantics"&gt;
  &lt;/a&gt;
  11. Semantics
&lt;/h3&gt;

&lt;p&gt;11.1. Header&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; tags always come at the top of the webpage inside the &lt;/p&gt; tag. It's like an opening that usually contains a logo, a navigation menu, a search bar etc., depending on the projects.&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello I am a paragraph inside a header.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;11.2. Main&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tags appear between the headers and footers. They usually contain the centre or essentials of the webpage such as sections, articles, figures etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello I am a paragraph inside a main.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;11.3. Footer&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; tags appear at the end of a webpage. They usually play the role of the ending. They contain contact information, navigation links and copyright statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello I am a paragraph inside a footer.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;11.4. Navigation&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; tags are shorthand versions of &lt;em&gt;navigation&lt;/em&gt;. We use them when we want to add a navigation bar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"index.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"about.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;about&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"contact.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;11.5. Sections&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; tags are used to structure our content in a better way. A webpage can have multiple sections; each section tackles a specific area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I'm inside a section&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;11.6. Articles&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tags are used for self-contained content such as a blog post etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I'm inside an article tag&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;11.7. Asides&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; tags are used to display parts of the content aside.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    I'm inside an aside tag. You will find me on the right or left side of the
    webpage
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;11.8. Figures&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; tags are handy when we want to insert an image or a document that has a caption under it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"parrot.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"this is a parrot picture"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;Fig1. - Red Parrot.&lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;11.9. Blockquotes&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; tags are meant to wrap quotes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;blockquote&lt;/span&gt; &lt;span class="na"&gt;cite=&lt;/span&gt;&lt;span class="s"&gt;"http://en.wikipedia.org/wiki/Main_Page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  I'm a quote taken from a wikipedia page.
&lt;span class="nt"&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#12-nonsemantics"&gt;
  &lt;/a&gt;
  12. Non-semantics
&lt;/h3&gt;

&lt;p&gt;12.1. Spans&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tags are a quick way to grab the content inside it and give it a unique style with CSS or functionality with JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;I'm inside a span which makes me an inline element&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;12.2. Divs&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags are important when we want to control children etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;I'm inside a div (division) which makes me a block element&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#13-styles"&gt;
  &lt;/a&gt;
  13. Styles
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag is a way to add styles to our webpage by selecting the elements from HTML and styling them. We usually place this tag inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#14-tables"&gt;
  &lt;/a&gt;
  14. Tables
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tags are meant to create tables on a webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;first name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;last name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Brad&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Smith&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#15-iframes"&gt;
  &lt;/a&gt;
  15. Iframes
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tags are used to embed another document within the current HTML document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"demo.html"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"this is an Iframe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#16-forms"&gt;
  &lt;/a&gt;
  16. Forms
&lt;/h3&gt;

&lt;p&gt;16.1. Form Tag&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag is meant to declare a form. Forms are important to get data from users. There are various types of forms such as sign-in, sign-up, contact forms etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Here where form elements have to be --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;16.2. Form Elements&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- A label tag acts like a title --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;First name:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Inputs --&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Inputs act like a placeholder where you can insert some data. --&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Inputs with a type of text are designed to have text in them. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Inputs with a type of password are designed to have passwords in them that are hidden. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Inputs with a type of radio display a radio button which allows you to select one of the multiple choices. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Inputs with a type of checkbox display a checkbox button which allows you to select one zero or more than one choice. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Inputs with a type of submit display a submit button that allows you to submit the form -- it technically comes at the end of the form. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Inputs with a type of button display a clickable button that allows you to click. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;16.3. Form Attributes&lt;/p&gt;

&lt;p&gt;&lt;code&gt;action&lt;/code&gt; attribute is designed to take care of the data submitted. It is the endpoint where the data is captured. Once the user fills in the data and presses on submit, you will have to create a server path where the data goes and be dealt with on the server-side.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;method&lt;/code&gt; attribute determines the HTTP method you want to apply before the data is sent to the server. These methods are POST, GET, DELETE etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#17-buttons"&gt;
  &lt;/a&gt;
  17. Buttons
&lt;/h3&gt;

&lt;p&gt;17.1. Button Tag&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; tags are meant to create clickable buttons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;click me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;17.2. Button Input&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tags with a type of button are also meant to create a clickable button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"click me"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#18-select"&gt;
  &lt;/a&gt;
  18. Select
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; tags are meant to create a dropdown list with options. The user has to choose one of the options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;select&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Red&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blue&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Black&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#19-datalist"&gt;
  &lt;/a&gt;
  19. Datalist
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; tags allow you to create a dropdown list with options like &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; tags; however, the difference is that &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; tags allow users to add their own options if they are not okay with the recommended ones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;datalist&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#20-template"&gt;
  &lt;/a&gt;
  20. Template
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tags are used to hide data and manipulate it using JavaScript to display it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I'm hidden inside this template till a user click to display me&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#21-svg"&gt;
  &lt;/a&gt;
  21. SVG
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; tags are used to create SVGs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;'100'&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;'100'&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;'fill: red;'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#22-comments"&gt;
  &lt;/a&gt;
  22. Comments
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- This is a comment in HTML --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Comments don't show up on a webpage --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for your attention. I hope this course has been as informative as you expected. There is more to it, but covering every bit of HTML would distracting. I have picked up the most important tags which you will end up using sooner or later.&lt;/p&gt;

&lt;p&gt;For more, follow me on Instagram &lt;a href="https://www.instagram.com/cesarcode.init/"&gt;@cesarcode.init&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Backstage Software Templates
</title>
      <author>Ricardo Castro</author>
      <pubDate>Tue, 13 Apr 2021 21:37:28 +0000</pubDate>
      <link>https://dev.to/mccricardo/backstage-software-templates-2jf6</link>
      <guid>https://dev.to/mccricardo/backstage-software-templates-2jf6</guid>
      <description>&lt;p&gt;Originally published on &lt;a href="https://mccricardo.com/backstage-software-templates/"&gt;mccricardo.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If our goal is to make our lives and the lives of those that work with us easier and happier, Backstage Software Templates can give us a hand. This tool can help us create Components inside Backstage that will load code skeletons, fill in some variables and publish that template somewhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-this-party-started"&gt;
  &lt;/a&gt;
  Let's get this party started
&lt;/h2&gt;

&lt;p&gt;If you've been following along, in &lt;a href="https://mccricardo.com/backstage-intro/"&gt;Backstage intro&lt;/a&gt; we set up our Backstage installation locally and, conveniently, bootstrapped a lot of components, including Software Templates. Let's right to it.&lt;/p&gt;

&lt;p&gt;We'll start by selecting &lt;strong&gt;Create Component&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4xmear1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x00i1piod7bg5u6lrr00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4xmear1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x00i1piod7bg5u6lrr00.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll then select &lt;strong&gt;Golang Microservice&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gwzxn8qx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isz3bpayqedtwju6k4mh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gwzxn8qx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isz3bpayqedtwju6k4mh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll be displayed a form requesting some necessary information. We'll fill it in and click &lt;strong&gt;Next Step&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEuX6b5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssu746ddknsx1c04pa66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEuX6b5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssu746ddknsx1c04pa66.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A new form will be displayed that will allow us to set up VCS integration.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tcGQFY0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxmwqj1bkyiutnz55dly.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tcGQFY0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxmwqj1bkyiutnz55dly.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At last, we will be shown a review and we can proceed with &lt;strong&gt;Create&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YqshIKN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdzxminl5sucpf9ymzt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YqshIKN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdzxminl5sucpf9ymzt9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And Backstage will do its magic.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UgxOMz0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amqmcqxsav9602i4rbkv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UgxOMz0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amqmcqxsav9602i4rbkv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A new component will be created.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iARtySa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ho9he7eqkr5c5sdzydmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iARtySa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ho9he7eqkr5c5sdzydmm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As well as a new repo with a lot of code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j6jVM8QM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4383kiunrf6fjgvzlcfh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6jVM8QM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4383kiunrf6fjgvzlcfh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cZ3rkyWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2cdyvrbifbpdcqcfzud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cZ3rkyWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2cdyvrbifbpdcqcfzud.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a moment to take a look around and let that sink in.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-just-happened"&gt;
  &lt;/a&gt;
  What just happened?
&lt;/h2&gt;

&lt;p&gt;Based on a template, Backstage was able to create a new repo, full of code and integrations. The setup we did in &lt;a href="https://mccricardo.com/backstage-intro/"&gt;Backstage intro&lt;/a&gt; brought all of that free of charge. Taking a look at &lt;code&gt;app.config.yaml&lt;/code&gt; we can see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;catalog&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Component&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;System&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;API&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Group&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Template&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Location&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;locations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;url&lt;/span&gt;
      &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://github.com/spotify/cookiecutter-golang/blob/master/template.yaml&lt;/span&gt;
      &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;allow&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Template&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This points to the following template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backstage.io/v1alpha1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Template&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;golang-starter&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Golang Microservice&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create a Golang repo with this template built by members of the Go community&lt;/span&gt;
  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;experimental&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;go&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;web@example.com&lt;/span&gt;
  &lt;span class="na"&gt;templater&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cookiecutter&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;service&lt;/span&gt;
  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;."&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;component_id&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;project_short_description&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;docker_image&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;docker_build_image&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;docker_build_image_version&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;use_logrus_logging&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;use_viper_config&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;use_ci&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;use_cobra_cmd&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;component_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Unique name of the component&lt;/span&gt;
      &lt;span class="na"&gt;project_short_description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Description&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Description of the component&lt;/span&gt;
      &lt;span class="na"&gt;docker_image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Docker Image&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The docker base image to use when running the service&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alpine-base-image:latest&lt;/span&gt;
      &lt;span class="na"&gt;docker_build_image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Docker Build Image&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The docker base image to use when building the service&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;golang&lt;/span&gt;
      &lt;span class="na"&gt;docker_build_image_version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Docker Build Image Version&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The image version to use when building the service&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
        &lt;span class="na"&gt;enum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;alpine&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alpine&lt;/span&gt;
      &lt;span class="na"&gt;use_logrus_logging&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Enable Logrus Logging (https://github.com/sirupsen/logrus)&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
        &lt;span class="na"&gt;enum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;y"&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;n"&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;y"&lt;/span&gt;
      &lt;span class="na"&gt;use_viper_config&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Enable Viper Config (https://github.com/spf13/viper)&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
        &lt;span class="na"&gt;enum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;y"&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;n"&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;y"&lt;/span&gt;
      &lt;span class="na"&gt;use_cobra_cmd&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Enable Cobra CLI Tools (https://github.com/spf13/cobra)&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
        &lt;span class="na"&gt;enum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;y"&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;n"&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;y"&lt;/span&gt;
      &lt;span class="na"&gt;use_ci&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Add CI&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Add a CI config to the repo, Gitub Actions, Circle or Travis are the only supported right now&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
        &lt;span class="na"&gt;enum&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;github&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;travis&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;circle&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now something has to interpret this and do some magic. This is where &lt;code&gt;packages/backend/src/plugins/scaffolder.ts&lt;/code&gt; comes into play:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SingleHostDiscovery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@backstage/backend-common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CatalogClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@backstage/catalog-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;CookieCutter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;CreateReactAppTemplater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;createRouter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Preparers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Publishers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Templaters&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@backstage/plugin-scaffolder-backend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Docker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dockerode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PluginEnvironment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;PluginEnvironment&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cookiecutterTemplater&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CookieCutter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;craTemplater&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CreateReactAppTemplater&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;templaters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Templaters&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;templaters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cookiecutter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cookiecutterTemplater&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;templaters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cra&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;craTemplater&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;preparers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Preparers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;publishers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Publishers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dockerClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Docker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;discovery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SingleHostDiscovery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;catalogClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CatalogClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;discoveryApi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;discovery&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createRouter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;preparers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;templaters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;publishers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;dockerClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;catalogClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;reader&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;@backstage/plugin-scaffolder-backend&lt;/code&gt; through &lt;code&gt;CookieCutter&lt;/code&gt; &lt;em&gt;"knows"&lt;/em&gt; how to bootstrap Golang projects based on &lt;a href="https://github.com/lacion/cookiecutter-golang"&gt;cookiecutter-golang&lt;/a&gt;. And that's how all the magic happens.&lt;/p&gt;

&lt;p&gt;Eventually, we will need to &lt;a href="https://backstage.io/docs/features/software-templates/adding-templates"&gt;add our own templates&lt;/a&gt; and we will need help &lt;a href="https://backstage.io/docs/features/software-templates/writing-templates"&gt;writing them&lt;/a&gt;. And if the &lt;a href="https://backstage.io/docs/features/software-templates/builtin-actions"&gt;builtin actions&lt;/a&gt; are not enough this might include writing &lt;a href="https://backstage.io/docs/features/software-templates/writing-custom-actions"&gt;custom actions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Backstage Software Templates takes a big leap into providing standardization and help teams become more productive faster.&lt;/p&gt;

</description>
      <category>backstage</category>
    </item>
    <item>
      <title>4 ways to query GeoJSON data in MongoDB</title>
      <author>Pablo Veiga</author>
      <pubDate>Tue, 13 Apr 2021 21:22:17 +0000</pubDate>
      <link>https://dev.to/vcpablo/4-ways-to-find-geojson-data-in-mongodb-14pb</link>
      <guid>https://dev.to/vcpablo/4-ways-to-find-geojson-data-in-mongodb-14pb</guid>
      <description>&lt;p&gt;Have you ever heard of GeoJSON? If not, let me explain it to you.&lt;br&gt;
GeoJSON is a format for encoding a variety of geographic data structures created and published in 2008.&lt;/p&gt;

&lt;p&gt;Since 2015, it has an official &lt;a href="https://tools.ietf.org/html/rfc7946"&gt;specification&lt;/a&gt; created by its original authors with the collaboration of the Internet Engineering Task Force &lt;a href="https://www.ietf.org/"&gt;(IETF)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;According to this specification:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GeoJSON is a geospatial data interchange format based on JavaScript Object Notation (JSON).  It defines several types of JSON objects and the manner in which they are combined to represent data about geographic features, their properties, and their spatial extents. GeoJSON uses a geographic coordinate reference system, World Geodetic System 1984, and units of decimal degrees.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is a format widely used across JSON-based applications to read, manipulate and compare geospatial data.&lt;/p&gt;

&lt;p&gt;Several third-party map libraries provide GeoJSON support for front-end applications, some of them are:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leafletjs.com/reference-1.7.1.html#geojson"&gt;Leaflet&lt;/a&gt;&lt;br&gt;
&lt;a href="https://openlayers.org/en/latest/examples/geojson.html"&gt;Openlayers&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developers.google.com/maps/documentation/javascript/datalayer#load_geojson"&gt;Google Maps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Considering that now you know a little bit more about GeoJSON, let´s move to the manipulation bit.&lt;br&gt;
When building maps for a web application, it is common to deal with something we call "Layers". &lt;a href="https://developers.google.com/maps/documentation/javascript/layers"&gt;According to Google&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Layers are objects on the map that consist of one or more separate items but are manipulated as a single unit. Layers generally reflect collections of objects that you add on top of the map to designate a common association.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A Layer can have different formats and one of them is GeoJSON.&lt;/p&gt;

&lt;p&gt;So, when working with more than one layer in a map, it is common to perform operations between them to determine their geospatial relationship within a context. By making use of geospatial operations, it is possible to determine, for example, if:&lt;/p&gt;

&lt;p&gt;i) a Point lies within a Polygon;&lt;br&gt;
ii) a Polygon intersects another Polygon;&lt;br&gt;
iii) a Line crosses a circle;&lt;br&gt;
iv) a Point is part of a Line;&lt;/p&gt;

&lt;p&gt;But, depending on the size of the involved layers, manipulating or comparing them directly with JavaScript, in the browser, might cause performance issues since the memory usage tends to increase even more if they need to be rendered on a map.&lt;/p&gt;

&lt;p&gt;A good solution for this case is to perform any required geospatial operation directly in the database. Most of the database engines provide functions to query GeoJSON and one of them is &lt;a href="https://docs.mongodb.com/manual/reference/geojson/"&gt;MongoDB&lt;/a&gt; which, by the way, has been pretty optimized for spatial operations since &lt;a href="https://www.mongodb.com/blog/post/geospatial-performance-improvements-in-mongodb-3-2"&gt;version 3.2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These are some of the most basic geospatial structures that MongoDB supports:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Point&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "type": "Point",
  "coordinates": [
    -42.53700256347656,
    -22.28496664336935
   ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Linestring&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "type": "LineString",
  "coordinates": [
    [
      -43.17626953125,
      -22.91792293614603
    ],
    [
      -40.2978515625,
      -20.262197124246534
    ]
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Polygon&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "type": "Polygon",
  "coordinates": [
    [
      [
        -42.94006347656249,
        -22.649502094242195
      ],
      [
        -42.16552734375,
        -22.649502094242195
      ],
      [
        -42.16552734375,
        -21.968519331082298
      ],
      [
        -42.94006347656249,
        -21.968519331082298
      ],
      [
        -42.94006347656249,
        -22.649502094242195
      ]
    ]
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Geometry Collection&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  type: "GeometryCollection",
  geometries: [
    {
      "type": "Point",
      "coordinates": [
        -42.53700256347656,
        -22.28496664336935
      ]
    },
    {
      "type": "LineString",
      "coordinates": [
        [
          -43.17626953125,
          -22.91792293614603
        ],
        [
          -40.2978515625,
          -20.262197124246534
        ]
      ]
    },
    {
      "type": "Polygon",
      "coordinates": [
        [
          [
            -42.94006347656249,
            -22.649502094242195
          ],
          [
            -42.16552734375,
            -22.649502094242195
          ],
          [
            -42.16552734375,
            -21.968519331082298
          ],
          [
            -42.94006347656249,
            -21.968519331082298
          ],
          [
            -42.94006347656249,
            -22.649502094242195
          ]
        ]
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="http://geojson.io/#id=gist:vcpablo/2758df2cb48a5b1031b77a18c60cea9d&amp;amp;map=8/-21.596/-41.737"&gt;Here&lt;/a&gt; you can find the mentioned examples plotted in a map using geojson.io.&lt;/p&gt;

&lt;p&gt;Now, I'm going to show you some basic operations that can be performed directly in a Mongo database assuming that there is already a collection named &lt;code&gt;geospatial&lt;/code&gt; with the &lt;a href="https://docs.mongodb.com/manual/core/2dsphere/"&gt;proper indexes&lt;/a&gt; set up.&lt;/p&gt;

&lt;p&gt;To ease the query implementation, I recommend setting the GeoJSON object inside a property of your document. In the following example, the property "location" represents the geometry:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "$id": "342j3ug4kj23b4k234"
  "location": {
    "type": "Point",
    "coordinates": [ -22, -42 ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1-finding-geometries-that-intersect-with-the-given-point"&gt;
  &lt;/a&gt;
  1. Finding geometries that intersect with the given Point
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.geospatial.find({
  location: {
    $geoIntersects: {
     $geometry: {
       type: "Point",
       coordinates: [
         -42.53700256347656,
         -22.28496664336935
        ]
      }
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query will retrieve all geometries with which the given Point intersects. This example shows a query passing a Point as a parameter, but it supports any &lt;a href="https://docs.mongodb.com/manual/reference/geojson/"&gt;GeoJSON Object&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-finding-all-geometries-that-lie-within-a-given-geometry"&gt;
  &lt;/a&gt;
  2. Finding all geometries that lie within a given geometry
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.geospatial.find({
  location: {
    $geoWithin: {
      $geometry: {
        "type": "Polygon",
        "coordinates": [
          [
            [
              -42.94006347656249,
              -22.649502094242195
            ],
            [
              -42.16552734375,
              -22.649502094242195
            ],
            [
              -42.16552734375,
              -21.968519331082298
            ],
            [
              -42.94006347656249,
              -21.968519331082298
            ],
            [
              -42.94006347656249,
              -22.649502094242195
            ]
          ]
        ]
      }
  }
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query will retrieve all geometries that are inside the given Polygon and it is useful to look for all points that are placed within an area. For example: let's say you'd like to find all restaurants in a given city.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-finding-geometries-within-a-number-of-miles-from-a-given-point"&gt;
  &lt;/a&gt;
  3. Finding geometries within a number of miles from a given point
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;db.geospatial.find({
  location: {
    $geoWithin: {
      $centerSphere: [
        [ -42.53700256347656, -22.28496664336935 ],
        5 / 3963.2
      ]
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;$centerSphere&lt;/code&gt;, MongoDB will "draw" a circle with a pre-defined size from a given point. In this case, the query will retrieve all geometries that are up to 5 miles to the coordinates provided.&lt;br&gt;
It is important to mention that, in this case, the geometries will be retrieved unordered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-finding-ordered-geometries-within-a-number-of-miles-from-a-given-point"&gt;
  &lt;/a&gt;
  4. Finding &lt;em&gt;ordered&lt;/em&gt; geometries within a number of miles from a given point
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const METERS_PER_MILE = 1609.34

db.geospatial.find({
  location: {
    $nearSphere: {
      $geometry: {
        type: "Point",
        coordinates: [ -73.93414657, 40.82302903 ]
      },
      $maxDistance: 5 * 1609.34
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query will retrieve the same result as the previous one, but order from the nearest to the farthest.&lt;br&gt;
Check &lt;a href="https://docs.mongodb.com/manual/tutorial/calculate-distances-using-spherical-geometry-with-2d-geospatial-indexes/"&gt;this page&lt;/a&gt; for more information on distance unit conversion.&lt;/p&gt;




&lt;p&gt;GeoJSON is the most used format to represent Geospatial data in web applications. It is fully supported by the most popular third-party map rendering libraries and database engines.&lt;/p&gt;

&lt;p&gt;This article demonstrated some basic concepts and how to implement some of the spatial operations provided by MongoDB.&lt;/p&gt;

&lt;p&gt;I hope you've liked it.&lt;br&gt;
Please, share and comment... any feedback is welcome!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>geojson</category>
      <category>development</category>
      <category>maps</category>
    </item>
    <item>
      <title>Next/image - Make image fill available space without specifying height or width</title>
      <author>Tan Ahmed</author>
      <pubDate>Tue, 13 Apr 2021 21:13:45 +0000</pubDate>
      <link>https://dev.to/tanahmed/next-image-make-image-fill-available-space-272o</link>
      <guid>https://dev.to/tanahmed/next-image-make-image-fill-available-space-272o</guid>
      <description>&lt;p&gt;The Next.js Image component which has Lazyloading forces you to specify a width/height. Yet most times you do not know this information beforehand nor do you want images to look squashed by providing the wrong width/height. &lt;/p&gt;

&lt;p&gt;I discovered with a few lines of CSS you can get around this. Thus your images will fill all the available space in the div.&lt;/p&gt;

&lt;p&gt;So wrap the  component with a "unset-img" div and give the  component the className "custom-img"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="unset-img"&amp;gt;
  &amp;lt;Image alt="Mountains" src="/project/pexels-photo.jpeg" layout="fill" className="custom-img"
   /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the CSS which overrides the next.js functionality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.custom-img {
  object-fit: contain;
  width: 100% !important;
  position: relative !important;
  height: unset !important;
}

.unset-img {
  width: 100%;
}
.unset-img &amp;gt; div {
  position: unset !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>nextjs</category>
      <category>css</category>
      <category>performance</category>
    </item>
    <item>
      <title>Day 3 - operations, conditions and </title>
      <author>Leonardo the Vinci</author>
      <pubDate>Tue, 13 Apr 2021 21:01:38 +0000</pubDate>
      <link>https://dev.to/ochaye3000/day-3-operations-conditions-and-54j6</link>
      <guid>https://dev.to/ochaye3000/day-3-operations-conditions-and-54j6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#day-3-operators-and-conditions"&gt;
  &lt;/a&gt;
  Day 3 - Operators and conditions
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#operator-basics-and-types-considerations"&gt;
  &lt;/a&gt;
  Operator basics and types considerations
&lt;/h3&gt;

&lt;p&gt;Swift has all the usual programmatic operators open to the engineer in the form of &lt;code&gt;+, -, *, /, %&lt;/code&gt;. We also see some common types to programming languages such as &lt;code&gt;Int&lt;/code&gt; for integers or &lt;em&gt;whole numbers&lt;/em&gt;. For numbers with decimal places we have both &lt;code&gt;Float&lt;/code&gt; and &lt;code&gt;Double&lt;/code&gt; and the preference is for engineers to use Double on the basis of it being more reliable.&lt;/p&gt;

&lt;p&gt;One interesting question is why numerical types can't be mixed. In the real work it's not unheard of to add a whole number and a number with a decimal part. This is not allowed in Swift largely because of the way the language manages storage and for the way precision is representable. Integers have no ability to store fractional values, but are considered better at storing more precise numbers. In order to make mixed types operations we are required to cast to the relevant number types that would allow such a conversion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;dec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;55.9005&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;whole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;// this example converts the int value to a double and therefore allows for a&lt;/span&gt;
&lt;span class="c1"&gt;// non-lossy addition.&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;added&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dec&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;whole&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compound-operators"&gt;
  &lt;/a&gt;
  Compound operators
&lt;/h3&gt;

&lt;p&gt;We can use language efficiencies to shorten the declaration of operations. This works for the &lt;code&gt;+, -, *, /&lt;/code&gt; operators.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lets start with a base number&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;// declare an add operation.&lt;/span&gt;
&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;// this can be rewritten with a compound operator&lt;/span&gt;
&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;// this makes num = 200 as it's the same as the code above&lt;/span&gt;

&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="c1"&gt;// is the same as num = 200 - 50, or 150&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#combining-conditions"&gt;
  &lt;/a&gt;
  Combining conditions
&lt;/h3&gt;

&lt;p&gt;Combining conditions is useful but we're starting to reduce immediate readability of the code. We can be expressive with combined conditions but we should also be mindful that readability is king and code os read far more often than it is written.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;doThisOperation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;doThatOperationInstead&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we see a statement like this we are evaluating &lt;code&gt;truthyness&lt;/code&gt; or &lt;code&gt;falseyness&lt;/code&gt; of each statement and languages implementing these type of capabilities have compiler efficiencies built in. In the case above we see a logical AND operator used to evaluate two conditions - one os a combined operator and one a single operator. This statement above will call &lt;code&gt;doThatOperationInstead()&lt;/code&gt; because &lt;code&gt;b&lt;/code&gt; is not greater than 20, it is equal to 20. Where we had a similar operation with a logical OR operation the minute one side evaluated true it would be true and avoid the wasted CPU time of evaluating the other side. See below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;doThisOperation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;doThatOperationInstead&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time we call the &lt;code&gt;doOperation()&lt;/code&gt; because &lt;code&gt;a&lt;/code&gt; is less than or equal to 10 when a is equal to 5. What we're hoping ot avoid is situations in code like this one below. If you see this in a PR, have a word with that person. Readability is king!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;doThisOperation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;doThatOperationInstead&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-ternary-operator"&gt;
  &lt;/a&gt;
  The ternary operator
&lt;/h3&gt;

&lt;p&gt;The ternary operator in part solves some readability issues, but is another case where heavy nesting should be avoided. With great power comes great responsibility and so on. So let's have a look at a ternary operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; 
 &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s"&gt;"YES"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"no"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// statement ?  true case : false case &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That brings the examples for day 3 to a close. &lt;/p&gt;

&lt;p&gt;Be safe, be well&lt;/p&gt;

</description>
      <category>ios</category>
      <category>swift</category>
    </item>
    <item>
      <title>Elm and TailwindCSS with purge included</title>
      <author>Carlos Saltos</author>
      <pubDate>Tue, 13 Apr 2021 20:48:03 +0000</pubDate>
      <link>https://dev.to/csaltos/elm-and-tailwindcss-with-purge-included-bo7</link>
      <guid>https://dev.to/csaltos/elm-and-tailwindcss-with-purge-included-bo7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#elm-with-tailwind-css"&gt;
  &lt;/a&gt;
  Elm with Tailwind CSS
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-"&gt;
  &lt;/a&gt;
  What ?
&lt;/h2&gt;

&lt;p&gt;A simple start project with an Elm using Tailwind CSS styles with purge included.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-"&gt;
  &lt;/a&gt;
  Why ?
&lt;/h2&gt;

&lt;p&gt;Because Tailwind CSS is nice and when use it with Elm is a lot of power and beauty.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-"&gt;
  &lt;/a&gt;
  How ?
&lt;/h2&gt;

&lt;p&gt;Ensure you have recent versions of Yarn and Elm installed and then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn
yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If that works you may open your favorite browser to &lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt; and&lt;br&gt;
make changes to your code live.&lt;/p&gt;

&lt;p&gt;If you want to export a final optimited version of your code you may run &lt;code&gt;yarn build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please take a look to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postcss.config.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tailwind.config.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public/assets/pcss/styles.pcss&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/Main.elm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Of course you can use NPM instead of Yarn, in that case you may change the&lt;br&gt;
watch scripts from &lt;code&gt;package.json&lt;/code&gt; from &lt;code&gt;yarn&lt;/code&gt; calls to &lt;code&gt;npm&lt;/code&gt; calls.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-"&gt;
  &lt;/a&gt;
  Where ?
&lt;/h2&gt;

&lt;p&gt;This repo is initially published at &lt;a href="https://github.com/csaltos/elm-tailwindcss/"&gt;https://github.com/csaltos/elm-tailwindcss/&lt;/a&gt;&lt;br&gt;
and you may see a demo at &lt;a href="https://csaltos.com/elm/tailwindcss/"&gt;https://csaltos.com/elm/tailwindcss/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elm</category>
      <category>tailwindcss</category>
      <category>purge</category>
    </item>
    <item>
      <title>Build a Spring Boot ReST API</title>
      <author>fastcode-inc</author>
      <pubDate>Tue, 13 Apr 2021 20:30:59 +0000</pubDate>
      <link>https://dev.to/fastcodeinc/build-a-spring-boot-rest-api-1p8c</link>
      <guid>https://dev.to/fastcodeinc/build-a-spring-boot-rest-api-1p8c</guid>
      <description>&lt;p&gt;Welcome back! In the first blog article, we developed a simple Spring Boot application that prints “Hello World” to the console. In this article, we will build a ReST API that can be called by the API clients. &lt;/p&gt;

&lt;p&gt;In a typical Spring Boot application, you will have a relational database with a number of tables that are related to each other. In this article, to keep things simple, we will focus on an application with a single table. In the next article, we will extend this example to include multiple tables and their relationships.&lt;/p&gt;

&lt;p&gt;Let’s imagine that we are building a simple Timesheet application. &lt;br&gt;
This application allows employees to enter the hours they worked daily on different tasks and submit the timesheet every two weeks. &lt;/p&gt;

&lt;p&gt;In this article, we will focus on building a ReST API for just the Customer table.&lt;/p&gt;

&lt;p&gt;Let’s assume that the Customer table in the database includes the following fields:&lt;/p&gt;

&lt;p&gt;*customerid&lt;br&gt;
*name&lt;br&gt;
*description&lt;br&gt;
*isActive&lt;/p&gt;

&lt;p&gt;Our goal is to develop a ReST API that can be called to perform the following operations:&lt;/p&gt;

&lt;p&gt;*Create a new customer&lt;br&gt;
*Get a list of all the customers&lt;br&gt;
*Update an existing customer&lt;br&gt;
*Delete an existing customer&lt;/p&gt;

&lt;p&gt;The above operations are known as C.R.U.D (Create, Read, Update, Delete) operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-1&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;First, we need to understand some basic concepts on how we can manipulate the data in a database from a Java/Spring Boot application. This can be done either through JDBC (Java Database Connectivity) API that is a part of the Java Standard Edition or through JPA (Java Persistence API; now renamed to Jakarta Persistence) that is a part of the Java Enterprise Edition.&lt;/p&gt;

&lt;p&gt;The Spring framework provides further abstractions on these APIs to make it easier for developers to use these APIs.  In this article, we will focus on using JPA.&lt;/p&gt;

&lt;p&gt;JPA describes the management of relational data in enterprise Java applications. The &lt;a href="http://hibernate.org/orm/"&gt;Hibernate Object Relational Mapper (ORM)&lt;/a&gt; is one of the implementers of the Java Persistence API. In this application, we will be using Hibernate ORM and it’s JPA implementation.&lt;/p&gt;

&lt;p&gt;In JPA, a database table is represented as a Java Class. JPA provides a mechanism to persist objects of this Java class to the database table and the rows of the database table back to objects of this Java class. There are a number of rules that are defined by JPA on how an entity needs to be defined. According to the JPA 2.0 specification, these rules are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The class must be annotated with the @Entity (javax.persistence.Entity) annotation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every entity class must have a primary key that uniquely identifies the entity. The primary key is annotated with &lt;a class="comment-mentioned-user" href="https://dev.to/id"&gt;@id&lt;/a&gt;
 annotation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The entity class must have a no-arg constructor. It may have other constructors as well. The no-arg constructor must be public or protected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The entity class must be a top-level class. An enum or interface must not be designated as an entity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The entity class must not be final. No methods or persistent instance variables of the entity class may be final.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Persistent instance variables must be declared private, protected, or package-private and can be accessed directly only by the entity class’s methods. Clients must access the entity’s state through accessor or business methods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If an entity instance is to be passed by value as a detached object (e.g., through a remote interface), the entity class must implement the Serializable interface.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both abstract and concrete classes can be entities. Entities may extend non-entity classes as well as entity classes, and non-entity classes may extend entity classes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using the rules above, let’s define our Customer entity as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.demo;

import javax.persistence.*;
import java.io.Serializable;

@Entity
@Table(name = "customer")
public class CustomerEntity implements Serializable {

   public CustomerEntity() {}

 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 @Column(name = "customerid", nullable = false)
 private Long customerid;

 @Basic
 @Column(name = "name", nullable = true)
 private String name;

 @Basic
 @Column(name = "description", nullable = true)
 private String description;

 @Basic
 @Column(name = "isactive", nullable = true)
 private Boolean isActive;

 public Long getCustomerid() {
   return customerid;
 }

 public void setCustomerid(Long customerid) {
   this.customerid = customerid;
 }

 public String getName() {
   return name;
 }

 public void setName(String name) {
   this.name = name;
 }

 public String getDescription() {
   return description;
 }

 public void setDescription(String description) {
   this.description = description;
 }

 public Boolean getIsActive() {
   return isactive;
 }

 public void setIsActive(Boolean isactive) {
   this.isActive = isActive;
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Points to note&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;a class="comment-mentioned-user" href="https://dev.to/id"&gt;@id&lt;/a&gt;
 annotation defines the primary key. We can generate the identifiers in different ways which are specified by the @GeneratedValue annotation. We can choose from the following Id generation strategies: AUTO, TABLE, SEQUENCE, or IDENTITY. If we don't specify a value explicitly, the generation type defaults to AUTO. When we use the IDENTITY generation type, the database auto-increments the Id values&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is also important to understand the different access types in JPA. &lt;a href="https://howtodoinjava.com/jpa/field-vs-property-vs-mixed-access-modes-jpa-tutorial/"&gt;This article&lt;/a&gt; provides more information on the access types. In the customer entity above, we are using Field access type because we are declaring the &lt;a class="comment-mentioned-user" href="https://dev.to/id"&gt;@id&lt;/a&gt;
 annotation on a field rather than on the get access method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If we do not use the @Table annotation, the name of the entity will be considered the name of the table. In such cases, we can omit the @Table annotation. In most cases, the name of the table in the database and the name of the entity will not be the same. In these cases, we can specify the table name using the @Table annotation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The attributes of the @Column annotation include it’s name, length, nullable, and unique. The name attribute specifies the name of the table column. The length attribute specifies the column length. The nullable attribute specifies whether or not the column is nullable, and the unique attribute specifies whether or not the column is unique. If we don't specify this annotation, the name of the field will be considered the name of the column in the table.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JPA supports Java data types as persistable fields of an entity, often known as the basic types. A field or property can be marked with &lt;a class="comment-mentioned-user" href="https://dev.to/basic"&gt;@basic&lt;/a&gt;
 annotation, which is optional. The &lt;a class="comment-mentioned-user" href="https://dev.to/basic"&gt;@basic&lt;/a&gt;
 annotation has two attributes - optional (true, false) and fetch (EAGER, LAZY). By default, optional is set to true and fetch is set to EAGER loading. When optional is set to true, the field/property will accept null values. Lazy loading will only make sense when we have a large Serializable object mapped as a basic type. The JPA specification strictly limits the Java types that can be marked as basic to the following:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Java primitive types (boolean, int, etc)&lt;br&gt;
wrappers for the primitive types (java.lang.Boolean, java.lang.Integer, etc)&lt;br&gt;
java.lang.String&lt;br&gt;
java.math.BigInteger&lt;br&gt;
java.math.BigDecimal&lt;br&gt;
java.util.Date&lt;br&gt;
java.util.Calendar&lt;br&gt;
java.sql.Date&lt;br&gt;
java.sql.Time&lt;br&gt;
java.sql.Timestamp&lt;br&gt;
byte[]&lt;br&gt;
Byte[]&lt;br&gt;
char[]&lt;br&gt;
Character[]&lt;br&gt;
enums&lt;br&gt;
any other type that implements Serializabl&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;N-layered Architecture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To build a CRUD API for the Customer database table, we will be using a n-layered architecture. This architecture is not necessary for an application with a single database table, but becomes necessary as the number of tables increase and more business logic is added to the application.&lt;/p&gt;

&lt;p&gt;The diagram below shows the layers of this architecture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0TtLB5bF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtlywk96i4eearh763ao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0TtLB5bF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtlywk96i4eearh763ao.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Domain layer&lt;/strong&gt;: The domain layer consists of domain classes. In our sample CRUD application, these domain classes are equivalent to the JPA entity classes, which is a single class named CustomerEntity.java that we previously described.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository layer&lt;/strong&gt;: The repository layer in a Spring Boot application consists of &lt;a href="https://spring.io/projects/spring-data-jpa"&gt;Spring Data JPA&lt;/a&gt; repositories. Spring Boot makes it very simple to develop these repositories that can enable you to perform basic CRUD operations on an entity. Here’s the JPA repository for the customer entity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Repository("customerRepository")
public interface ICustomerRepository extends JpaRepository&amp;lt;CustomerEntity, Long&amp;gt;{}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we need to do to create a repository is to define an interface that extends the JpaRepository interface, passing in the name of the entity and the data type for the primary key of the entity.&lt;/p&gt;

&lt;p&gt;Spring Boot automatically provides an implementation class for this interface. All the methods specified in the JpaRepository interface &lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html"&gt;at this link&lt;/a&gt; are therefore available for us to use. Also note that this interface is annotated with @Repository interface. More details on this and other commonly used annotations can be found in &lt;a href="https://www.baeldung.com/spring-component-repository-service"&gt;this&lt;/a&gt; article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application Services layer&lt;/strong&gt;: This layer is used for two purposes: (a) provide transactional support and (b) convert from an entity to a Data Transfer Object (DTO) and vice-versa.&lt;/p&gt;

&lt;p&gt;An application transaction is a sequence of application actions that are considered a single logical unit by the application. For a more detailed explanation of Spring transactions, please refer to these &lt;a href="https://dzone.com/articles/spring-boot-transaction-management-hello-world-exa"&gt;series&lt;/a&gt; of posts and &lt;a href="https://www.nurkiewicz.com/2011/10/spring-pitfalls-proxying.html"&gt;this&lt;/a&gt; other post for an in-depth look at the pitfalls. &lt;/p&gt;

&lt;p&gt;DTOs are important for separation of concerns - separating what’s stored in the database from what’s returned to the client of the API. An entity stores what’s stored in the database, whereas a DTO stores what is returned back to the API client. For a more detailed explanation on why DTOs are necessary, please refer to &lt;a href="https://softwareengineering.stackexchange.com/questions/373284/what-is-the-use-of-dto-instead-of-entity"&gt;this&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;Again sticking with the separation of concerns principle, we define both an interface and an implementation class in the Application Services layer for the customer entity. This layer will call the JPA repository layer we previously defined.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ICustomerAppService.java&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public interface ICustomerAppService {

//CRUD Operations
CreateCustomerOutput create(CreateCustomerInput customer);

void delete(Long id);

UpdateCustomerOutput update(Long id, UpdateCustomerInput input);

FindCustomerByIdOutput findById(Long id);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;CustomerAppService.java&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Service("customerAppService")
public class CustomerAppService implements ICustomerAppService {

 @Qualifier("customerRepository")
 @NonNull
 protected final ICustomerRepository _customerRepository;

 @Qualifier("ICustomerMapperImpl")
 @NonNull
 protected final ICustomerMapper mapper;

 @NonNull
 protected final LoggingHelper logHelper;

 public CustomerAppService(@NonNull ICustomerRepository 
 _customerRepository, @NonNull ICustomerMapper mapper, 
 @NonNull LoggingHelper logHelper) {
 this._customerRepository = _customerRepository;
 this.mapper = mapper;
 this.logHelper = logHelper;
 }

 @Transactional(propagation = Propagation.REQUIRED)
 public CreateCustomerOutput create(CreateCustomerInput input) {

 CustomerEntity customer = mapper.createCustomerInputToCustomerEntity(input);
 CustomerEntity createdCustomer = _customerRepository.save(customer);
 return mapper.customerEntityToCreateCustomerOutput(createdCustomer);
 }

 @Transactional(propagation = Propagation.REQUIRED)
 public UpdateCustomerOutput update(Long customerId, 
 UpdateCustomerInput input) {

 CustomerEntity customer = mapper.updateCustomerInputToCustomerEntity(input);
 CustomerEntity updatedCustomer = _customerRepository.save(customer);
 return mapper.customerEntityToUpdateCustomerOutput(updatedCustomer);
 }

 @Transactional(propagation = Propagation.REQUIRED)
 public void delete(Long customerId) {

 CustomerEntity existing = _customerRepository.findById(customerId).orElse(null);
 _customerRepository.delete(existing);
 }

 @Transactional(propagation = Propagation.NOT_SUPPORTED)
 public FindCustomerByIdOutput findById(Long customerId) {

 CustomerEntity foundCustomer = _customerRepository.findById(customerId).orElse(null);
 if (foundCustomer == null) return null;
 return mapper.customerEntityToFindCustomerByIdOutput(foundCustomer);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Points to Note&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;CRUD methods are defined in the application service class&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The class is annotated with @Service annotation. To understand this annotation, please refer to &lt;a href="https://www.baeldung.com/spring-component-repository-service"&gt;this&lt;/a&gt; article.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The application service class depends on three other classes - Customer Repository, Customer Mapper, and Logging Helper. These dependencies are injected into the Application Service class using Spring Dependency Injection mechanism. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Spring allows us to inject dependencies using three methods - constructor-based injection, setter-based injection, or field-based injection. As explained in &lt;a href="https://reflectoring.io/constructor-injection/"&gt;this&lt;/a&gt; article, Constructor-based injection is the preferred way of injecting dependencies. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In constructor-based injection, the dependencies required for the class are provided as arguments to the constructor as seen in the Application Service above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@Transactional annotation is used at a method-level on public methods&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We define and use the following DTOs. Every method, where appropriate, takes an input DTO and returns an output DTO&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;*CreateCustomerInput&lt;br&gt;
*CreateCustomerOutput&lt;br&gt;
*UpdateCustomerInput&lt;br&gt;
*UpdateCustomerOutput&lt;br&gt;
*FindCustomerByIdOutput&lt;/p&gt;

&lt;p&gt;We use a mapping library, &lt;a href="https://mapstruct.org/"&gt;MapStruct&lt;/a&gt;, to automatically map an entity to a DTO and vice-versa.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ReST Controller layer&lt;/strong&gt;: This layer is used to present an interface for clients that want to perform CRUD operations on the data on the database tables using http protocol. In our sample application, we have a single ReSTController because we have a single entity/table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@RestController
@RequestMapping("/customer")
public class CustomerController {

 @Qualifier("customerAppService")
 @NonNull
 protected final ICustomerAppService _customerAppService;

 @Qualifier("projectAppService")
 @NonNull
 protected final IProjectAppService _projectAppService;

 @NonNull
 protected final LoggingHelper logHelper;

 @NonNull
 protected final Environment env;

 public CustomerController(@NonNull ICustomerAppService _customerAppService, @NonNull IProjectAppService 
 _projectAppService, @NonNull LoggingHelper logHelper, @NonNull Environment env) {
 this._customerAppService = _customerAppService;
 this._projectAppService = _projectAppService;
 this.logHelper = logHelper;
 this.env = env;
 }

 @RequestMapping(method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json" })
 public ResponseEntity&amp;lt;CreateCustomerOutput&amp;gt; create(@RequestBody @Valid CreateCustomerInput customer) {
 CreateCustomerOutput output = _customerAppService.create(customer);
 return new ResponseEntity(output, HttpStatus.OK);
 }

 // ------------ Delete customer ------------
 @ResponseStatus(value = HttpStatus.NO_CONTENT)
 @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, 
 consumes = { "application/json" })
 public void delete(@PathVariable String id) {
 FindCustomerByIdOutput output = _customerAppService.findById(Long.valueOf(id));
 Optional
 .ofNullable(output)
 .orElseThrow(
 () -&amp;gt; new EntityNotFoundException(String.format("There does not exist a customer with a id=%s", id))
 );

 _customerAppService.delete(Long.valueOf(id));
 }

 // ------------ Update customer ------------
 @RequestMapping(
 value = "/{id}",
 method = RequestMethod.PUT,
 consumes = { "application/json" },
 produces = { "application/json" }
 )

 public ResponseEntity&amp;lt;UpdateCustomerOutput&amp;gt; update(
 @PathVariable String id,
 @RequestBody @Valid UpdateCustomerInput customer
 ) {
 FindCustomerByIdOutput currentCustomer = _customerAppService.findById(Long.valueOf(id));
 Optional
 .ofNullable(currentCustomer)
 .orElseThrow(
 () -&amp;gt; new EntityNotFoundException(String.format("Unable to update. Customer with id=%s not found.", id))
 );

 customer.setVersiono(currentCustomer.getVersiono());
 UpdateCustomerOutput output = _customerAppService.update(Long.valueOf(id), customer);
 return new ResponseEntity(output, HttpStatus.OK);
 }

 @RequestMapping(
 value = "/{id}",
 method = RequestMethod.GET,
 consumes = { "application/json" },
 produces = { "application/json" }
 )
 public ResponseEntity&amp;lt;FindCustomerByIdOutput&amp;gt; findById(@PathVariable String id) {
 FindCustomerByIdOutput output = _customerAppService.findById(Long.valueOf(id));
 Optional.ofNullable(output).orElseThrow(() -&amp;gt; new EntityNotFoundException(String.format("Not found")));

 return new ResponseEntity(output, HttpStatus.OK);
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Points to Note&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We are passing in the dependencies using Spring Constructor dependency injection&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every ReST controller method has a @RequestMapping annotation, a method type, and the content-type the method consumes and produces. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Where we return back a response, we are using a ResponseEntity&lt;br&gt;
Although it’s not apparent from the code above, the incoming JSON content is translated into a Java object using the Jackson Mapping library&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this blog article, we have seen how to build a Spring Boot ReST API for a single table. However, in the real-world, an API will be built using multiple tables that are related to each other. In the next (third) blog article, we will discuss how we can handle multiple tables.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>spring</category>
      <category>api</category>
      <category>java</category>
      <category>jpa</category>
    </item>
    <item>
      <title>Build a Spring Boot ReST API</title>
      <author>fastcode-inc</author>
      <pubDate>Tue, 13 Apr 2021 20:30:43 +0000</pubDate>
      <link>https://dev.to/fastcodeinc/build-a-spring-boot-rest-api-44c3</link>
      <guid>https://dev.to/fastcodeinc/build-a-spring-boot-rest-api-44c3</guid>
      <description>&lt;p&gt;In this blog article series, we will incrementally build a Spring Boot ReST API. We will start from scratch so that readers who are new to Spring Boot can easily follow along with us.&lt;/p&gt;

&lt;p&gt;In this first article, we will develop a simple Spring Boot application that prints “Hello World” to the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-1&lt;/strong&gt;: &lt;/p&gt;

&lt;p&gt;Go to the Spring Initializr website (&lt;a href="https://start.spring.io/"&gt;https://start.spring.io/&lt;/a&gt;) and create/download a Spring Boot project.  Use the settings shown in the image below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-2&lt;/strong&gt;: &lt;/p&gt;

&lt;p&gt;Unzip the zip file. The zip file will be unzipped into demo directory&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-3&lt;/strong&gt;: &lt;/p&gt;

&lt;p&gt;Ensure that you have Maven and JDK 1.8 installed on your computer. Also ensure that you add them to your PATH so that you can access the commands &lt;strong&gt;java&lt;/strong&gt; and &lt;strong&gt;mvn&lt;/strong&gt; from your command window. &lt;/p&gt;

&lt;p&gt;You can get them from the following location:&lt;/p&gt;

&lt;p&gt;JDK 1.8: &lt;a href="https://adoptopenjdk.net/variant=openjdk8&amp;amp;jvmVariant=hotspot"&gt;https://adoptopenjdk.net/variant=openjdk8&amp;amp;jvmVariant=hotspot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maven: &lt;a href="https://maven.apache.org/download.cgi"&gt;https://maven.apache.org/download.cgi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-4&lt;/strong&gt;: &lt;/p&gt;

&lt;p&gt;From a command window, go to the directory demo, and compile and package the application using the following command:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mvn clean package&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You will see that the application is compiled and a jar file named demo-0.0.1-SNAPSHOT.jar is created in a new directory named target.&lt;/p&gt;

&lt;p&gt;When you do a maven clean, this target directory (along with all the artifacts in this directory) is deleted. The maven package step both compiles the application and packages it in a jar file. To further understand the different maven lifecycle steps, please refer to this webpage.&lt;/p&gt;

&lt;p&gt;To run this application, execute the following command from the command line:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;java -jar target\demo-0.0.1-SNAPSHOT.jar&lt;/strong&gt; (if you are using windows) or &lt;strong&gt;java -jar target/demo-0.0.1-SNAPSHOT.jar&lt;/strong&gt; (if you are using Mac or Linux)&lt;/p&gt;

&lt;p&gt;This will run the application. However, this application does not do anything and therefore runs and exits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-5&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Now let’s look at the only source file (*.java) we have in this application - DemoApplication.java which is located at demo/src/main/java/com/example/demo/DemoApplication.java.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

 public static void main(String[] args) {
     SpringApplication.run(DemoApplication.class, args);
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, notice that there is a main method. This method doesn’t do anything except to run the application. Also, notice the @SpringBootApplication annotation on the class. This annotation is equivalent to three separate Spring Boot annotations:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@SpringBootApplication = @Configuration + @ComponentScan + @EnableAutoConfiguration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can learn what these annotations mean at the Spring website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-6&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Now, let’s write a method that will print “Hello World!” to the console. Here we go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

 public static void main(String[] args) {
     SpringApplication.run(DemoApplication.class, args);
 HelloWorld();
  }

 private static void HelloWorld() {
     System.out.println("Hello World!");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the method Hello() defined in the DemoApplication class. It’s defined as &lt;strong&gt;static&lt;/strong&gt; - otherwise, you will get the error “Non-static method 'HelloWorld()' cannot be referenced from a static context”.&lt;/p&gt;

&lt;p&gt;Now, you can re-run the maven command, &lt;strong&gt;mvn clean package&lt;/strong&gt;, and then run the program using &lt;strong&gt;java -jar target\demo-0.0.1-SNAPSHOT.jar&lt;/strong&gt; (if you are using windows) or &lt;strong&gt;java -jar target/demo-0.0.1-SNAPSHOT.jar&lt;/strong&gt; (if you are using Mac or Linux).&lt;/p&gt;

&lt;p&gt;You will see a message “Hello World!” printed to the console window.&lt;/p&gt;

&lt;p&gt;That’s all for this article. In the next article, we will extend this application and build an API that can be called from external systems.&lt;/p&gt;

</description>
      <category>springboot</category>
      <category>api</category>
      <category>java</category>
      <category>jpa</category>
    </item>
    <item>
      <title>Talk Notes: "Self-Care on Rails" (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Tue, 13 Apr 2021 20:15:10 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/tech-talk-notes-self-care-on-rails-railsconf-2021-49ma</link>
      <guid>https://dev.to/sylwiavargas/tech-talk-notes-self-care-on-rails-railsconf-2021-49ma</guid>
      <description>&lt;p&gt;✨ &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating at the time of writing. &lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Talk:&lt;/strong&gt; 'Self-Care on Rails' by &lt;a class="comment-mentioned-user" href="https://dev.to/bengreenberg"&gt;@bengreenberg&lt;/a&gt;
 , or &lt;a href="https://twitter.com/RabbiGreenberg"&gt;Ben Greenberg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: This past year has been one of the most challenging years in recent memory. The pandemic has taken a toll, including on children. Adults used their professional skills to help make the year a little better for the kids in our lives: Therapists counseled, entertainers delighted, teachers educated... and Rails developers developed!&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Impression&lt;/strong&gt;: I appreciate the human-side of the Rails community that Ben represents; the talk was inspiring and also grounding&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#side-notes"&gt;Side Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;"...citizens of a democracy are collectively responsible for what their society allows; they have a special duty towards those it systematically fails, and this burden falls most heavily on those most rewarded..." (Chiala Cordelli)&lt;/li&gt;
&lt;li&gt;a new initiative in the Open Source community: Hippocratic License

&lt;ul&gt;
&lt;li&gt;"...we are starting to realize that the software that we create has a real and lasting impact on the world in which we live" (&lt;a href="https://firstdonoharm.dev/"&gt;An Ethical License to Open Source&lt;/a&gt; - how will your code be used? will it be bettering the world at large?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;"If I am not for myself, who will be for me?"

&lt;ul&gt;
&lt;li&gt;self-interest can mean asserting yourself among others and that's not a bad thing!&lt;/li&gt;
&lt;li&gt;your interest is among others and it matters&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;We are facing mental health crises (loneliness, etc.) and it's affecting all of us: adults and youths alike&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;webRTC&lt;/strong&gt;: real-time communication

&lt;ul&gt;
&lt;li&gt;open web standard and available as regular JS APIs in the majority of browsers&lt;/li&gt;
&lt;li&gt;it supports video, voice, and generic data to be sent between peers&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Ben mentioned two apps he built: 

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nexmo-community/rails-video-watch-party-app"&gt;a video-sharing app&lt;/a&gt; he built for his son's birthday party,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bencgreenberg/school-health-declaration-automation"&gt;a gem he published&lt;/a&gt; that uses web-scraping to automate school form submission (btw. &lt;a href="https://dev.to/bengreenberg/automate-school-forms-with-web-scraping-in-ruby-2c3j"&gt;his blog post on building this&lt;/a&gt; is amazing)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;the more you help yourself, the more you help others&lt;/strong&gt; ✨&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#side-notes"&gt;
  &lt;/a&gt;
  Side notes:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I love Ben's attitude, kindness, and jokes&lt;/li&gt;
&lt;li&gt;"You can't escape JavaScript ;-; " - Ben 😹&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API"&gt;webRTC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/bengreenberg/automate-school-forms-with-web-scraping-in-ruby-2c3j"&gt;Blog: Automate School Forms with Web Scraping in Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>techtalks</category>
      <category>rails</category>
    </item>
  </channel>
</rss>
