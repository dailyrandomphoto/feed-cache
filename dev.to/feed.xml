<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Think on AWS as Lego Blocks</title>
      <author>Daniel Dominguez</author>
      <pubDate>Fri, 01 Oct 2021 18:31:39 +0000</pubDate>
      <link>https://dev.to/dominguezdaniel/think-on-aws-as-lego-blocks-2e1h</link>
      <guid>https://dev.to/dominguezdaniel/think-on-aws-as-lego-blocks-2e1h</guid>
      <description>&lt;p&gt;Think of Lego blocks. Very simple in appearance and functionality on their own. However, put them together in the right way, with the right pieces, and you can create something highly complex and amazing.&lt;/p&gt;

&lt;p&gt;The basic Lego unit is the 1x1. It’s the smallest block, connects to any other piece and hurts a lot when you step on it with bare feet.&lt;/p&gt;

&lt;p&gt;The building blocks of AWS are Storage, Compute, Networking, Security, Monitoring, Media Processing, Analytics, and AI.&lt;/p&gt;

&lt;p&gt;Once you’ve mastered creating simple buildings and boxes on top of your baseplate using your starter Lego set, you can graduate to a full-blown Lego kit with triangles, curved pieces and half moons to create more sophisticated things like castles, cars and bridges. In a similar fashion, after you get the hang of the AWS basics, you can add more specialized AWS services like DynamoDB, ElastiCache, Systems Manager, EFS, and Lambda.&lt;/p&gt;

&lt;p&gt;No matter how sophisticated you get, everything is still rooted in those basic 1x1 building blocks.&lt;/p&gt;

&lt;p&gt;But legos aren’t just about size or shape, they’re also about color. You can have the same Lego in a variety of different colors just like AWS services are variations of others. For example, Amazon Elastic Container Service (ECS), Amazon Elastic Container Service for Kubernetes (EKS), and Fargate serve the same purpose but just do it in a slightly different way whereas Elastic Beanstalk, OpsWorks, and CloudFormation all allow you to manage your infrastructure in an automated way but with different levels of control.&lt;/p&gt;

&lt;p&gt;What you build with legos or AWS, and how you build it, is limited only by your imagination. But beware, just like creating a tower of legos, unless you build a sound structure, your building will fall over. A tall skinny tower without an intelligently-designed structure will eventually collapse, and the same holds true in AWS with experience, expertise and continued education, you can create a structure that is built strong enough to support your application and users.&lt;/p&gt;

&lt;p&gt;AWS is a compilation of many different Lego pieces that all have their own simple functions. Although on their own they may lack much functionality; combined together with other services, they can construct a highly complex and practical applications. &lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
&lt;em&gt;And you? What are you building on?&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>lego</category>
      <category>applications</category>
    </item>
    <item>
      <title>Making Kubernetes Operations Easy with kubectl Plugins</title>
      <author>Martin Heinz</author>
      <pubDate>Fri, 01 Oct 2021 18:25:29 +0000</pubDate>
      <link>https://dev.to/martinheinz/making-kubernetes-operations-easy-with-kubectl-plugins-3iok</link>
      <guid>https://dev.to/martinheinz/making-kubernetes-operations-easy-with-kubectl-plugins-3iok</guid>
      <description>&lt;p&gt;&lt;code&gt;kubectl&lt;/code&gt; is powerful tool that allows you to perform literally any and all Kubernetes-related tasks. Regardless of whether you need to just list pods, debug node, manage RBAC or whatever else, &lt;code&gt;kubectl&lt;/code&gt; can do it. Some of these common tasks however, can be quite clunky or might include many steps that might take considerable time to perform. In other cases the output of &lt;code&gt;kubectl&lt;/code&gt; might not be exactly readable or might include lot of noise, which might be very annoying, especially if you're for example trying to debug something, in which case time is of essence. So, why waste time on repetitive, common, time consuming tasks when we can avoid it. Asking how? Well, let me introduce you to &lt;code&gt;kubectl&lt;/code&gt; plugins!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-plugins"&gt;
  &lt;/a&gt;
  What Plugins?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;kubectl&lt;/code&gt; ships with limited set of core features which don't cover all the tasks that Kubernetes admins or users might need to perform. Therefore, to resolve this limitation, we're able to extend &lt;code&gt;kubectl&lt;/code&gt; with plugins, which function as subcommands of &lt;code&gt;kubectl&lt;/code&gt; itself. All of these plugins are standalone executables that can be written in any language, but considering that we're talking about Kubernetes tooling and ecosystem, most of them are obviously written in Go.&lt;/p&gt;

&lt;p&gt;Now you might be thinking - &lt;em&gt;"Where do I find all these plugins? And why not just use the standalone binaries without &lt;code&gt;kubectl&lt;/code&gt;?"&lt;/em&gt; - Answer to both of these question is &lt;code&gt;krew&lt;/code&gt; - a package manager for &lt;code&gt;kubectl&lt;/code&gt; plugins as well as Kubernetes SIG that aims at solving the package management issue for &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;krew&lt;/code&gt; being a package manager, helps with discovering, installing and updating all of our plugins, but to use it, we first need to install it, because well... &lt;code&gt;krew&lt;/code&gt; itself is also a plugin. You can navigate to installation guide/script  &lt;a href="https://krew.sigs.k8s.io/docs/user-guide/setup/install/"&gt;here&lt;/a&gt; to install it using your preferred method.&lt;/p&gt;

&lt;p&gt;Now that we have &lt;code&gt;krew&lt;/code&gt;, let's find and install some plugins!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl krew search
NAME                            DESCRIPTION                                         INSTALLED
access-matrix                   Show an RBAC access matrix &lt;span class="k"&gt;for &lt;/span&gt;server resources     no
advise-psp                      Suggests PodSecurityPolicies &lt;span class="k"&gt;for &lt;/span&gt;cluster.           no
allctx                          Run commands on contexts &lt;span class="k"&gt;in &lt;/span&gt;your kubeconfig         no
apparmor-manager                Manage AppArmor profiles &lt;span class="k"&gt;for &lt;/span&gt;cluster.               no
...
~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl krew search rbac-lookup
NAME         DESCRIPTION              INSTALLED
rbac-lookup  Reverse lookup &lt;span class="k"&gt;for &lt;/span&gt;RBAC  no

~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl krew info rbac-lookup
NAME: rbac-lookup
INDEX: default
URI: https://github.com/reactiveops/rbac-lookup/releases/download/v0.6.4/rbac-lookup_0.6.4_Linux_x86_64.tar.gz
SHA256: 9f6f63b2ee6f5420530b6aa589b4c8c4a4685bf87447286881d37afdd80a7fb2
VERSION: v0.6.4
HOMEPAGE: https://github.com/reactiveops/rbac-lookup
DESCRIPTION: 
Easily find roles and cluster roles attached to any user, service account, or group name &lt;span class="k"&gt;in &lt;/span&gt;your Kubernetes cluster.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code show a couple of ways to search and get info about particular plugin(s). Besides searching using &lt;code&gt;kubectl krew&lt;/code&gt; you can also use plugin index on &lt;code&gt;krew&lt;/code&gt;s website &lt;a href="https://krew.sigs.k8s.io/plugins/"&gt;here&lt;/a&gt;. In addition to the information shown by &lt;code&gt;kubectl krew&lt;/code&gt;, this also gives you link to source repository and number of GitHub stars for each plugin. So, when you find what you needed, you can just run &lt;code&gt;kubectl krew install&lt;/code&gt; and start using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl krew &lt;span class="nb"&gt;install &lt;/span&gt;rbac-lookup
Updated the &lt;span class="nb"&gt;local &lt;/span&gt;copy of plugin index.
Installing plugin: rbac-lookup
Installed plugin: rbac-lookup
&lt;span class="se"&gt;\&lt;/span&gt;
 | Use this plugin:
 |  kubectl rbac-lookup
 | Documentation:
 |  https://github.com/reactiveops/rbac-lookup
/
WARNING: You installed plugin &lt;span class="s2"&gt;"rbac-lookup"&lt;/span&gt; from the krew-index plugin repository.
   These plugins are not audited &lt;span class="k"&gt;for &lt;/span&gt;security by the Krew maintainers.
   Run them at your own risk.

~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl rbac-lookup version
Version:0.6.4 Commit:3c86486a94e56e762b2a46d899e5f7b235c74ca8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the warning in the above output - even though these plugins are listed in official plugin index, that does not guarantee that they are safe to use or that they actually do what they claim to be doing. You should treat all of these as any random, unverified script downloaded from internet.&lt;/p&gt;

&lt;p&gt;Even though &lt;code&gt;krew&lt;/code&gt; contains a lot of plugins, that does not mean that it's exhaustive list of every plugin available. So, in case you can't find plugin that solves your task/issue, you can also check other places. One such place would be &lt;a href="https://github.com/ishantanu/awesome-kubectl-plugins"&gt;&lt;code&gt;awesome-kubectl-plugins&lt;/code&gt; repository&lt;/a&gt;, which has a couple extra plugins, or you can also just try Googling around.&lt;/p&gt;

&lt;p&gt;Considering that these ones are not part of &lt;code&gt;krew&lt;/code&gt;, to install them we would need to take manual approach which goes as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl krew search dig
&lt;span class="c"&gt;# ... nothing relevant&lt;/span&gt;

~ &lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/sysdiglabs/kubectl-dig.git &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;kubectl-dig
~ &lt;span class="nv"&gt;$ &lt;/span&gt;make build
~ &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp &lt;/span&gt;_output/bin/kubectl-dig /home/martin/.krew/bin/kubectl-dig

~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl dig
Deep kubernetes visibility.

Usage:
  dig
  dig &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As was mentioned earlier, these plugins are just scripts or binaries, therefore you can download them manually and just use them. If you want &lt;code&gt;kubectl&lt;/code&gt; to recognize them as plugins, you additionally need to give them a name in format &lt;code&gt;kubectl-plugin-name&lt;/code&gt; and put them somewhere in path. In the above example we installed &lt;code&gt;dig&lt;/code&gt; plugin by downloading its sources, building the binary and moving it to &lt;code&gt;krew&lt;/code&gt; directory which is in path. To check if &lt;code&gt;kubectl&lt;/code&gt; found the newly installed plugin you can run &lt;code&gt;kubectl plugin list&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#must-haves"&gt;
  &lt;/a&gt;
  Must Have's
&lt;/h2&gt;

&lt;p&gt;There are quite a few plugins in the index (149 at the time of writing) and there's many more outside of the &lt;code&gt;krew&lt;/code&gt; index, so to save you some time going through all of them, I made a list of the plugins that are in my opinion particularly useful. So, let's break it down by category starting with the most neglected area - the security: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/corneliusweig/rakkess"&gt;&lt;code&gt;rakkess&lt;/code&gt;&lt;/a&gt; - known as &lt;code&gt;access-matrix&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt; is plugin for showing and reviewing access to kubernetes resources. This can be very useful when designing RBAC roles - you can for example run &lt;code&gt;kubectl access-matrix --as other-user --namespace some-ns&lt;/code&gt; to verify that user or service account has desired access rights in specified namespace.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/controlplaneio/kubectl-kubesec"&gt;&lt;code&gt;kubesec&lt;/code&gt;&lt;/a&gt; - known as &lt;code&gt;kubesec-scan&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt; is plugin for scanning resources with &lt;a href="https://kubesec.io/"&gt;https://kubesec.io/&lt;/a&gt; scanner. When you run this plugin against your manifests, it will tell you recommended changes to improve security of your workloads. To view all rules that the scanner uses visit the above website.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/FairwindsOps/rbac-lookup"&gt;&lt;code&gt;rbac-lookup&lt;/code&gt;&lt;/a&gt; - Similar to the first plugin we mentioned, this plugin also helps with RBAC in your cluster. This can be used to perform reverse lookup of roles, giving you a list of roles that user, service account or group has assigned. For example, to find roles bound to service account named &lt;code&gt;my-sa&lt;/code&gt; you use the following - &lt;code&gt;kubectl rbac-lookup my-sa --kind serviceaccount --output wide&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When debugging some critical issue, there's really no time to waste and there are some debugging plugins that can help speed up the process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/eldadru/ksniff"&gt;&lt;code&gt;ksniff&lt;/code&gt;&lt;/a&gt; - known as &lt;code&gt;sniff&lt;/code&gt; is a tool for debugging and capturing networking data. It's able to attach to a pod and using &lt;code&gt;tcpdump&lt;/code&gt; to forward networking data to your local &lt;em&gt;Wireshark&lt;/em&gt;. This tool also works pretty well with &lt;code&gt;tshark&lt;/code&gt; - the command-line version of Wireshark.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sysdiglabs/kubectl-dig"&gt;&lt;code&gt;dig&lt;/code&gt;&lt;/a&gt; - This plugin built by &lt;em&gt;SysDig&lt;/em&gt; provides very nice terminal interface for exploring all kinds of node-level data - for example - ports, traces, running pods, page faults, etc. To see proper demo, checkout the video in &lt;code&gt;dig&lt;/code&gt; repository &lt;a href="https://github.com/sysdiglabs/kubectl-dig"&gt;here&lt;/a&gt;. This plugin however is not in &lt;code&gt;krew&lt;/code&gt; and might also require some extra setup on your cluster nodes (see this &lt;a href="https://github.com/sysdiglabs/kubectl-dig/issues/1"&gt;issue&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also useful plugins that can help with day-to-day management of cluster and its resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/itaysk/kubectl-neat"&gt;&lt;code&gt;neat&lt;/code&gt;&lt;/a&gt; - possibly my favourite of all the plugins is &lt;code&gt;neat&lt;/code&gt; which removes all the generated, redundant fields from YAML output of Kubernetes resources. If you're tired of scrolling through all the &lt;code&gt;managedFields&lt;/code&gt; and other garbage, then definitely give this one a try.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/robscott/kube-capacity"&gt;&lt;code&gt;kube-capacity&lt;/code&gt;&lt;/a&gt; - known as &lt;code&gt;resource-capacity&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt; tries to provide better insight into cluster resource usage and utilization. It's essentially a &lt;code&gt;kubectl top&lt;/code&gt; on steroids. It can show you resource utilization and consumption per namespace or pods, allows for node or pod label filtering, as well as sorting of output.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rikatz/kubepug"&gt;&lt;code&gt;kube-pug&lt;/code&gt;&lt;/a&gt; - is a plugin known as &lt;code&gt;deprecations&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt;. Every cluster needs to be upgraded sooner or later and at some point you will run into API deprecations and/or removals. Finding what's being deprecated can be long and error-prone process and this plugin tries to simplify that. All you need to do is run &lt;code&gt;kubectl deprecations --k8s-version=v1.XX.X&lt;/code&gt; and you will get list of all the instances of API objects in cluster that will be deprecated or removed in the specified version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last and also the biggest category is power tools - there's a lot of tasks that can be complicated, cumbersome or require multiple repetitive steps to perform with vanilla &lt;code&gt;kubectl&lt;/code&gt;, so let's make some of those simpler with these plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ahmetb/kubectl-tree"&gt;&lt;code&gt;tree&lt;/code&gt;&lt;/a&gt; - Creating a single object in Kubernetes can trigger creation of many more dependent resources, whether it's just &lt;em&gt;Deployment&lt;/em&gt; creating &lt;em&gt;ReplicaSets&lt;/em&gt; or instance of an operator creating 20 different objects. This hierarchy can be difficult to navigate and &lt;code&gt;kubectl tree&lt;/code&gt; can help with that by creating filesystem-like tree visualization of dependant resources.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/int128/kubelogin"&gt;&lt;code&gt;kubelogin&lt;/code&gt;&lt;/a&gt; - If you're using OIDC provider such as Google, Keycloak or Dex for authenticating to Kubernetes cluster, then this plugin also known as &lt;code&gt;oidc-login&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt; can help you avoid having to manually login into your cluster over and over again. When you setup this plugin, every time you attempt to run any &lt;code&gt;kubectl&lt;/code&gt; command without having valid authentication token, &lt;code&gt;oidc-login&lt;/code&gt; will automatically open your provider's login page and after successful authentication grabs the token and logs you into the cluster. To see video of workflow check out the repository &lt;a href="https://github.com/int128/kubelogin"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ahmetb/kubectx"&gt;&lt;code&gt;kubectx&lt;/code&gt;&lt;/a&gt; - known as &lt;code&gt;ctx&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt; is probably the most popular of all the plugins. It allows you to easily switch between &lt;code&gt;kubectl&lt;/code&gt; context and cluster namespaces with without having to deal with &lt;code&gt;kubectl config&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/corneliusweig/ketall"&gt;&lt;code&gt;ketall&lt;/code&gt;&lt;/a&gt; - We all know that &lt;code&gt;kubectl get all&lt;/code&gt; doesn't really give you &lt;em&gt;all&lt;/em&gt; the resources. To really list all resources you can use &lt;code&gt;ketall&lt;/code&gt; also known as &lt;code&gt;get-all&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt;. This plugin can just dump all the resources into your terminal as well as filter based on time, exclusions, label selectors or scopes (cluster or namespace).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;This is just a list of things that I find useful, so what works for me might not work for you and at the same time, there might a lot of plugins that I omitted, yet they can be super useful for you. So, go check out the &lt;code&gt;krew&lt;/code&gt; index or &lt;a href="https://github.com/ishantanu/awesome-kubectl-plugins"&gt;&lt;code&gt;awesome-kubectl-plugins&lt;/code&gt; repository&lt;/a&gt; for more. If you happen to find something cool, please share it, so others can benefit from it too.&lt;/p&gt;

&lt;p&gt;With that said, there isn't a plugin for every use case, so if you can't find plugin that solves your issue, maybe you can build one and fill that gap (more info about that in &lt;a href="https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/#writing-kubectl-plugins"&gt;docs&lt;/a&gt;). 😉&lt;/p&gt;

&lt;p&gt;There are also other tools out there beyond &lt;code&gt;kubectl&lt;/code&gt; plugins, which can improve your productivity and simplify Kubernetes operations. The most prominent one is &lt;a href="https://github.com/derailed/k9s"&gt;&lt;code&gt;k9s&lt;/code&gt;&lt;/a&gt;, so if plugins aren't enough and you want to grab a bigger hammer, then this might be a right tool for you.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
    </item>
    <item>
      <title>Tipos Javasript</title>
      <author>Gabriel Cheda</author>
      <pubDate>Fri, 01 Oct 2021 17:34:17 +0000</pubDate>
      <link>https://dev.to/gabrielcheda/tipos-javasript-5803</link>
      <guid>https://dev.to/gabrielcheda/tipos-javasript-5803</guid>
      <description>&lt;h1&gt;
  &lt;a href="#javascript-types"&gt;
  &lt;/a&gt;
  Javascript Types
&lt;/h1&gt;

&lt;p&gt;Meu primeiro post aqui e gostaria de começar explicando algo bem básico, os tipos primitivos e os tipos referência. O conceito serve para qualquer linguagem, mas aqui quis forcar em &lt;code&gt;Javascript&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#primitive-types"&gt;
  &lt;/a&gt;
  Primitive Types
&lt;/h2&gt;

&lt;p&gt;Os &lt;code&gt;Primitive Types&lt;/code&gt; são aqueles que já "vem com a linguagem", o básico do básico e que usamos diariamente.&lt;/p&gt;

&lt;p&gt;Abaixo seguem &lt;strong&gt;alguns exemplos&lt;/strong&gt;, ou seja, &lt;strong&gt;existem outros além desses&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tipos Javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quando usamos tipos primitivos estamos passando o valor "cru" daquela variável e não a variável em si. &lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alterarNumero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tipoPrimitivoNumber - Antes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;//output: tipoPrimitivoNumber - Antes 5&lt;/span&gt;

    &lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tipoPrimitivoNumber - Depois&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;//output: tipoPrimitivoNumber - Depois 10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;alterarNumero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//output: 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quando fazemos a chamada a função &lt;code&gt;alterarNumero&lt;/code&gt;, passamos como parâmetro o &lt;code&gt;tipoPrimitivoNumber&lt;/code&gt; que tem valor 5. Dentro desta função logamos o valor antes da somatória (5) e após a somatória (10), mas no final após rodarmos a função o programa loga para a mesma variável o numero 5! &lt;/p&gt;

&lt;p&gt;Por que quando logamos a variável após executar a função o seu valor continua o mesmo?!&lt;/p&gt;

&lt;p&gt;É simples, quando trabalhamos com &lt;code&gt;tipos primitivos&lt;/code&gt;, estamos trabalhando com o VALOR daquela variável e não com a variável em si. &lt;/p&gt;

&lt;p&gt;Então, quando passamos para a função &lt;code&gt;alterarNumero&lt;/code&gt; um parâmetro do &lt;code&gt;tipo primitivo&lt;/code&gt;, o programa substitui o valor do parâmetro da função pelo valor da variável e não pela variável em si.&lt;/p&gt;

&lt;p&gt;Seria a mesma coisa que fazer desta forma e esperar que o resultado final mudasse:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;alterarNumero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A diferença desta forma, para a chamada com a variável é que o programa substitui a &lt;code&gt;variável&lt;/code&gt; quando a função é chamada e aqui estamos passando diretamente o valor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Caso ainda não tenha entendido, leia até o final que com a explicação dos &lt;code&gt;Reference Types&lt;/code&gt; vai ficar mais claro.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#reference-types"&gt;
  &lt;/a&gt;
  Reference Types
&lt;/h2&gt;

&lt;p&gt;Os &lt;code&gt;Reference Types&lt;/code&gt; são os &lt;code&gt;objetos&lt;/code&gt;, ou &lt;code&gt;object&lt;/code&gt;, com exceção do tipo primitivo &lt;code&gt;null&lt;/code&gt; que quando utilizamos o &lt;code&gt;typeof(null)&lt;/code&gt; nos devolve que é um &lt;code&gt;object&lt;/code&gt;, mas, na verdade isso foi um bug introduzido no começo do &lt;code&gt;Javascript&lt;/code&gt; que não foi corrigido até hoje.&lt;/p&gt;

&lt;p&gt;Acredito que você já tenha ouvido falar que uma variável é um espacinho salvo na memória para um dado. Certo? Caso não tenha ouvido, agora você já sabe.&lt;/p&gt;

&lt;p&gt;O que diferencia os dois tipos é que os &lt;code&gt;Reference Types&lt;/code&gt; quando são utilizados, o valor deles é passado por referência a esse espacinho salvo em memória, ou seja, o que estamos utilizando é a variável em si e não o seu valor "cru". &lt;/p&gt;

&lt;p&gt;Exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objetoA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;objeto1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alterarValor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;objB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objeto1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;alterarValor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objetoA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objetoA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neste caso, quando passamos o parâmetro &lt;code&gt;objetoA&lt;/code&gt; para a função &lt;code&gt;somarValor&lt;/code&gt; não estamos passando o seu valor e sim o objeto salvo lá na memória do computador então toda alteração que for feita neste parâmetro afeta diretamente a raiz.&lt;/p&gt;

&lt;p&gt;Termino por aqui esse post e peço que qualquer dúvida/erro/sugestão me informem para que eu ajuste!&lt;/p&gt;

&lt;p&gt;Abs,&lt;br&gt;
GC.&lt;/p&gt;

&lt;p&gt;Bônus1:&lt;/p&gt;

&lt;p&gt;undefined x null&lt;/p&gt;

&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt; significa que nenhum valor foi atribuído aquela variável e o &lt;code&gt;null&lt;/code&gt; uma ausência de valor intencional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;inicializandoVariavel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inicializandoVariavelComNomeErrado&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught ReferenceError: inicializandoVariavelComNomeErrado is not defined (undefined)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bônus2:&lt;/p&gt;

&lt;p&gt;Neste trecho de código utilizamos na função o parâmetro com nome &lt;code&gt;objB&lt;/code&gt; intencionalmente, para indicar que não importa o nome que você da ao parâmetro da sua função, pois o valor que irá valer é sempre o que for passado na invocação.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objetoA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;objeto1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alterarValor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;objB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objeto1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;alterarValor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objetoA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objetoA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Chamamos a função &lt;code&gt;somarValor(objetoA)&lt;/code&gt; passando o &lt;code&gt;objetoA&lt;/code&gt; como parâmetro e o programa automaticamente substitui o parâmetro objB pelo &lt;code&gt;objetoA&lt;/code&gt; e apenas dentro do &lt;code&gt;escopo&lt;/code&gt; desta função o &lt;code&gt;objetoA&lt;/code&gt; se chamará objB como um apelido para aquela variável, válido apenas dentro daquela função.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Forem Hacktoberfest: Let’s Internationalize!</title>
      <author>Ben Halpern</author>
      <pubDate>Fri, 01 Oct 2021 17:09:52 +0000</pubDate>
      <link>https://dev.to/devteam/forem-hacktoberfest-let-s-internationalize-404n</link>
      <guid>https://dev.to/devteam/forem-hacktoberfest-let-s-internationalize-404n</guid>
      <description>&lt;p&gt;We recently shipped the groundwork for internationalizing Forem. Initially, this means that admins can set the default locale for their Forem in case it’s primarily targeted for Spanish or Portuguese communities. In the long run, it’s likely that individuals will be able to set the display for all their Forems to override the default settings.&lt;/p&gt;

&lt;p&gt;But let’s not try to do all of that at once.&lt;/p&gt;

&lt;p&gt;For now, we are accepting iterative improvements to our internationalization.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/forem"&gt;
        forem
      &lt;/a&gt; / &lt;a href="https://github.com/forem/forem"&gt;
        forem
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      For empowering community 🌱
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-to-contribute-to-forem-internationalization-right-now"&gt;
  &lt;/a&gt;
  How to Contribute to Forem Internationalization Right Now
&lt;/h2&gt;

&lt;p&gt;We currently support just two languages during this initial build stage: English and French. Adding many additional languages will be very possible once we get more of the infrastructure in place, but contributions to add a new language are not what we are looking for right now, as opposed to contributing to turning hardcoded english copy into translatable variables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-contribution"&gt;
  &lt;/a&gt;
  Example Contribution
&lt;/h2&gt;

&lt;p&gt;We won’t have an individual issue for every possible translatable area, because most of the challenge is &lt;em&gt;discovering&lt;/em&gt; a translatable element.&lt;/p&gt;

&lt;p&gt;You can see the French version of DEV by visiting &lt;code&gt;dev.to/locale/fr&lt;/code&gt; to get a sense of how this works in production. We are not expecting &lt;em&gt;admin-defined&lt;/em&gt; copy to be translatable, but we do expect application-defined copy to translate.&lt;/p&gt;

&lt;p&gt;From my knowledge of the codebase, I can visit the French home page and spot some non-translated copy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6lRlYhyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrtsiiaovd5g4wx85psn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6lRlYhyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrtsiiaovd5g4wx85psn.png" alt="Home Page Nav"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I searched through the project and found that that this code is available at &lt;code&gt;app/views/layouts/_main_nav.html.erb&lt;/code&gt;...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-6 &amp;lt;% unless user_signed_in? %&amp;gt;mt-4&amp;lt;% end %&amp;gt;"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"main-navigation"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= community_name %&amp;gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"default-navigation-links sidebar-navigation-links spec-sidebar-navigation-links"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= root_path %&amp;gt;"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"crayons-link crayons-link--block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;inline_svg_tag&lt;/span&gt;&lt;span class="err"&gt;("&lt;/span&gt;&lt;span class="na"&gt;twemoji&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;house.svg&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;class:&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;crayons-icon&lt;/span&gt; &lt;span class="na"&gt;crayons-icon--default&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;aria_hidden:&lt;/span&gt; &lt;span class="na"&gt;true&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Home
      &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;unless&lt;/span&gt; &lt;span class="na"&gt;user_signed_in&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= sign_up_path %&amp;gt;"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"crayons-link crayons-link--block fw-bold"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;inline_svg_tag&lt;/span&gt;&lt;span class="err"&gt;("&lt;/span&gt;&lt;span class="na"&gt;twemoji&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;handshake.svg&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;class:&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;crayons-icon&lt;/span&gt; &lt;span class="na"&gt;crayons-icon--default&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;aria_hidden:&lt;/span&gt; &lt;span class="na"&gt;true&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Sign In/Up
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;end&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;default_nav_links.each&lt;/span&gt; &lt;span class="na"&gt;do&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;render&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;layouts&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;sidebar_nav_link&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;link:&lt;/span&gt; &lt;span class="na"&gt;link&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;end&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where it gets interesting. In part of the translation journey, we welcome opportunities to &lt;em&gt;simplify&lt;/em&gt; in the name of translation — this is easier for me to say as an owner of the project, but I really think we can get rid of that &lt;code&gt;Sign In/Up&lt;/code&gt; button altogether. It's literally right below the same call to action above.&lt;/p&gt;

&lt;p&gt;So I have identified an opportunity for two adjustments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Translate "Home".&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;Sign in/Up&lt;/code&gt; altogether.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our team may disagree with the removal of &lt;code&gt;Sign in/Up&lt;/code&gt;, but as long as it is a small change, I think it's okay to find out about that at the time of the pull request review. We might just ask that you not change that and only modify "Home" — but we shall see. There is a lot of nuance in open source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is my adjusted file:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-6 &amp;lt;% unless user_signed_in? %&amp;gt;mt-4&amp;lt;% end %&amp;gt;"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"main-navigation"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= community_name %&amp;gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"default-navigation-links sidebar-navigation-links spec-sidebar-navigation-links"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= root_path %&amp;gt;"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"crayons-link crayons-link--block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;inline_svg_tag&lt;/span&gt;&lt;span class="err"&gt;("&lt;/span&gt;&lt;span class="na"&gt;twemoji&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;house.svg&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;class:&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;crayons-icon&lt;/span&gt; &lt;span class="na"&gt;crayons-icon--default&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;aria_hidden:&lt;/span&gt; &lt;span class="na"&gt;true&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;t&lt;/span&gt;&lt;span class="err"&gt;("&lt;/span&gt;&lt;span class="na"&gt;core.home&lt;/span&gt;&lt;span class="err"&gt;")&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;default_nav_links.each&lt;/span&gt; &lt;span class="na"&gt;do&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;render&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;layouts&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;sidebar_nav_link&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;link:&lt;/span&gt; &lt;span class="na"&gt;link&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;end&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that I replaced "Home" with &lt;code&gt;&amp;lt;%= t("core.home") %&amp;gt;&lt;/code&gt;. &lt;code&gt;t&lt;/code&gt; is a Rails view helper that is &lt;a href="https://guides.rubyonrails.org/i18n.html"&gt;short for &lt;code&gt;I18n.translate&lt;/code&gt;&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;That is everything you need to do in the view, but your work is not done!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change the localization YAML files, like such...&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/locales/en.yml&lt;/span&gt;
&lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;core&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;.....&lt;/span&gt;
    &lt;span class="s"&gt;home&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Home"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/locales/fr.yml&lt;/span&gt;
&lt;span class="na"&gt;fr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;core&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;.....&lt;/span&gt;
    &lt;span class="s"&gt;home&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Page&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;D'Accueil"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Values in these files should be alphabetical.&lt;/p&gt;

&lt;p&gt;"Home" literally translates to "domicile", or maybe "maison", but in the context of the Internet, I believe "Page D'Accueil" is appropriate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We are still in the initial infrastructure stages of this project, so we don't yet need to be &lt;em&gt;perfect&lt;/em&gt; on all translations.&lt;/strong&gt; Do your best. This is why we're not immediately expanding beyond our test languages of French and English.&lt;/p&gt;

&lt;p&gt;That's it! If you made the above PR, we would probably accept it. Please read our docs to better understand how to contribute in different ways, and look forward to more posts about how to contribute to I18n as this part of our project evolves.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-instructions-are-in-our-docs-i18n-docs"&gt;
  &lt;/a&gt;
  &lt;a href="https://developers.forem.com/technical-overview/i18n"&gt;🤓 Full instructions are in our docs I18n docs&lt;/a&gt;.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#more-forem-issues-marked-as-hacktoberfesteligible"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/forem/forem/issues?q=is%3Aissue+is%3Aopen+label%3AHacktoberfest"&gt;🍂 More Forem issues marked as Hacktoberfest-eligible&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>rails</category>
      <category>opensource</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>Why You Need Static Code Analysis</title>
      <author>Semyon Kirekov</author>
      <pubDate>Fri, 01 Oct 2021 17:00:53 +0000</pubDate>
      <link>https://dev.to/kirekov/why-you-need-static-code-analysis-28po</link>
      <guid>https://dev.to/kirekov/why-you-need-static-code-analysis-28po</guid>
      <description>&lt;p&gt;Programming is becoming more and more domain-oriented. There are hundreds of frameworks and dozens of libraries that help to overcome the complexity of low-level details in order to focus on something more important and even more sophisticated. I’m talking about business logic. And today I’ll try to convince you that static code analysis is the one thing that not only can make your coding life more pleasant but help the business to build more robust processes as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#business-goals"&gt;
  &lt;/a&gt;
  Business Goals
&lt;/h2&gt;

&lt;p&gt;Let’s make something clear. What does business value the most in a software system? Is it performance? The modern technologies? Or maybe documentation? Actually, business cares about two things.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The income the software gets.&lt;/li&gt;
&lt;li&gt;The maintainability.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first one is pretty obvious. The essential goal of any company is to earn money. And the software should help to reach it either directly or indirectly. For example, the system that allows customers to book a hotel room online and pay in advance earns money directly. While the software that can automatically build the artifact and deploy it on the production stage earns money indirectly. Because it reduces the time that engineers spend on routine tasks and helps them to concentrate on those ones that can bring more benefit.&lt;/p&gt;

&lt;p&gt;The second point may seem not so important in comparison to the first one, but not paying attention to it may lead to even worse consequences.&lt;/p&gt;

&lt;p&gt;Imagine that you are a CEO of a company that provides &lt;a href="https://www.investopedia.com/terms/b/btoc.asp"&gt;B2C&lt;/a&gt; service. Let’s assume it is an online book shop. You hired software engineers that keep the development going. They implement new features, fix bugs, and so on. But the time goes by as the employees change. The new developers coming and the old ones leave. Everything is going more or else smoothly. Until the one day.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Hey Jane. We need to provide our customers with an option to &lt;br&gt;
purchase e-books as weel,”&lt;/em&gt; the system analyst claimed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Actually, we have some problems with implementing the new &lt;br&gt;
features. John you know, the codebase has become so messy that &lt;br&gt;
it’s almost impossible to continue to maintain it. The one that &lt;br&gt;
you asked may take months to implement.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“So, where are going with that?”&lt;/em&gt; John suspiciously questioned.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“I think we should start from the beginning and build the system &lt;br&gt;
from scratch again. Otherwise it seems impossible to me to keep &lt;br&gt;
the development going”.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now your business is in a big danger. The customers will tolerate neither future updates absence nor the fact that you need to rewrite the software to make the process going. They will just leave you and choose the one company that can satisfy their needs right now.&lt;/p&gt;

&lt;p&gt;The software applications are being used for many years or even decades. As a manager, you should be aware of the consequences of the poor maintenance level.&lt;/p&gt;

&lt;p&gt;By the way, the rewriting system from scratch is not a good option either because of &lt;a href="https://en.wikipedia.org/wiki/Second-system_effect"&gt;the second system effect&lt;/a&gt;. The right way to solve those problems is &lt;a href="https://martinfowler.com/books/refactoring.html"&gt;refactoring&lt;/a&gt; but that’s a topic for another article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-checks-automatization"&gt;
  &lt;/a&gt;
  Code Checks Automatization
&lt;/h2&gt;

&lt;p&gt;There are some crucial points that define the system’s maintainability. Those are naming strategies, design architecture, unit tests, code style, and etc. If developers take care of that, the code becomes clearer and easier to understand. No doubts here. But there is one caveat. Not all of this stuff can be checked manually in a sufficient way.&lt;/p&gt;

&lt;p&gt;For instance, suppose that we want all classes to have no unused imports. Pretty reasonable requirement. How do we check it? Well, the straightforward way is to do it during the code review.&lt;/p&gt;

&lt;p&gt;Can you spot an unused import in this class? It’s not an easy task without an IDE.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.kirekov.juu.monad&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Objects&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.function.Function&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.function.Supplier&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.function.Predicate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.stream.Stream&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;supplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requireNonNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="no"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requireNonNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="no"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requireNonNull&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Lazy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The answer is in line 6 — &lt;code&gt;java.util.function.Predicate&lt;/code&gt;. And this class is not so big after all. You can imagine how difficult it could be during the real code review.&lt;/p&gt;

&lt;p&gt;Let’s assume another example. The manager has decided that we need to increase the test coverage percentage of our system. The solution that we picked is to set the minimum required coverage percentage for the new code (for each pull request). Again, how do we check it? We could ask reviewers to run all tests locally. But even if they do it, how can they distinguish the new code from the one that has already been present? It’s the edge when the result requires so many resources that it’s more reasonable not to do anything.&lt;/p&gt;

&lt;p&gt;There could be dozens of other cases. “All comments should be written in English”, “There must be no spelling mistakes in the code”, “The codebase should be formatted according to the predefined &lt;a href="https://www.mediawiki.org/wiki/Extension:CodeEditor"&gt;code editor file&lt;/a&gt;”, and so on. The key point is that we need some sort of automatization to be able to integrate those checks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arguments"&gt;
  &lt;/a&gt;
  Arguments
&lt;/h2&gt;

&lt;p&gt;When I talk about static code analyzers and how important their usage is, I hear many arguments about why one team cannot integrate them within the product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-code-base-is-already-huge-to-change-the-workflow"&gt;
  &lt;/a&gt;
  Our code base is already huge to change the workflow
&lt;/h3&gt;

&lt;p&gt;This seems like a reasonable statement but only under particular circumstances. If your project has no tests and it’s five years old, it’s impossible (or maybe too expensive) to increase the coverage up to 80% instantly. But you don’t have to. Start with a lower bar and then continuously increment it. It can be 5% at the beginning that turns to 25% in a quarter.&lt;/p&gt;

&lt;p&gt;Another example can be applied to code quality itself. Most static analyzers are configurable. If you tried to set &lt;a href="https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml"&gt;Checkstyle Google configuration&lt;/a&gt; to the mature project, you would probably get hundreds or even thousands of errors. You can start with just one rule. Ar first glance, it seems not so important. But after the moment when the configuration reaches the repository, you can be sure that no one else can violate this rule in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-review-pull-requests-according-to-the-style-guide-static-analyzers-are-redundant-for-us"&gt;
  &lt;/a&gt;
  We review pull requests according to the style guide. Static analyzers are redundant for us
&lt;/h3&gt;

&lt;p&gt;Do you remember an example with an unused import? What if you have twenty similar rules? How can you be sure that reviewers spot all these small details? Anyway, you have already declared your style guide in Wiki/Markdown/HTML. Why don’t you transfer it in the format that is understood by one static analyzer? I know that not everything can be automated. But if it is possible, it should be done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-analyzers-dont-let-us-implement-features-fast"&gt;
  &lt;/a&gt;
  Static analyzers don’t let us implement features fast
&lt;/h3&gt;

&lt;p&gt;If maintainability is not your priority, then I can agree with you. But you should be aware of the consequences. And they can be dramatic as we have seen before.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-team-consists-of-many-junior-developers-the-static-analyzers-slow-them-down-too-much"&gt;
  &lt;/a&gt;
  Our team consists of many Junior developers. The static analyzers slow them down too much
&lt;/h3&gt;

&lt;p&gt;Code static analyzer’s requirements can be a real challenge for the one who has started to program recently. But we grow as professionals when we solve difficult tasks. Anyway, how can you become stronger, if you don’t increase the weight?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-have-only-senior-guys-on-our-project-static-analyzers-are-not-needed"&gt;
  &lt;/a&gt;
  We have only Senior guys on our project. Static analyzers are not needed
&lt;/h3&gt;

&lt;p&gt;Suppose that I want to build a skyscraper. I hired a group of professional builders. So, they don’t need belays. Because we all know that highly skilled people don’t make any mistakes, right?&lt;/p&gt;

&lt;p&gt;I think you see where I’m going. It does not matter how professional you are. We all make mistakes. And we all need belays.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;More than that, it’s my personal belief that the fact that you &lt;br&gt;
want your code to be checked characterizes the real professional.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h2&gt;

&lt;p&gt;The market provides us with lots of static code analyzers. I listed some of the most popular ones.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sonarqube"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.sonarqube.org/"&gt;SonarQube&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;That’s my personal favorite. It supports 27 programming languages (at the moment of writing). It has predefined recommended code styles for everything and it is easily integrated with Github/Bitbucket/Gitlab. Although it costs money, you can use &lt;a href="https://sonarcloud.io/"&gt;SonarCloud&lt;/a&gt; for your open-source projects absolutely for free.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checkstyle"&gt;
  &lt;/a&gt;
  &lt;a href="https://checkstyle.sourceforge.io/"&gt;Checkstyle&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;One of the most well-known and mature static code analyzers for Java. All you have to do is to add a plugin for your Maven/Gradle project. No CI integrations. No pricy subscriptions. And lots of available configurations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pvsstudio"&gt;
  &lt;/a&gt;
  &lt;a href="https://pvs-studio.com/en/pvs-studio/"&gt;PVS-studio&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It’s a static code analyzer for C, C++, C#, and Java. It can be installed either as a plugin in your IDE or as an addition to existing CI/CD instruments (including SonarQube). Although the variety of supported language is not wide, the product analyzes the code really deep and can find well-masked bugs and vulnerabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eslint"&gt;
  &lt;/a&gt;
  &lt;a href="https://eslint.org/"&gt;EsLint&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A Javascript/Typescript linter. It has become so popular, that it’s almost a standard to include it in your React/Angular/Vue project. If you do frontend or backend on NodeJS and never heard about ESLint, you should definitely try it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I consider that static code analyzers are not the replacement but a great addition to existing processes of writing well-maintained code. If you have any questions or suggestions, please write your comments down below. Thanks for reading!&lt;/p&gt;

</description>
      <category>bestofdev</category>
      <category>codequality</category>
      <category>codereview</category>
      <category>devops</category>
    </item>
    <item>
      <title>Supabase Hacktoberfest Hackathon</title>
      <author>Zernonia</author>
      <pubDate>Fri, 01 Oct 2021 16:39:55 +0000</pubDate>
      <link>https://dev.to/zernonia/supabase-hacktoberfest-hackathon-21cf</link>
      <guid>https://dev.to/zernonia/supabase-hacktoberfest-hackathon-21cf</guid>
      <description>&lt;p&gt;It's the time of the year, where we Developer cave in to our Coding Dent and start coding again - &lt;strong&gt;Hacktoberfest&lt;/strong&gt;! &lt;/p&gt;

&lt;p&gt;As all developer are scavenging through tons and tons of Github repo just to find somewhere they belong, but sometimes to no avail. &lt;/p&gt;

&lt;p&gt;But fear not! &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; is here to the rescue! Introducing....&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#supabase-hacktoberfest-hackathon-"&gt;
  &lt;/a&gt;
  Supabase Hacktoberfest Hackathon !
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://supabase.io/blog/2021/09/28/supabase-hacktoberfest-hackathon-2021"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BnYZg7FR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwqgy68esv09ocnsjthr.png" alt="Supabase Hacktoberfest Hackathon "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the second &lt;strong&gt;Hackathon&lt;/strong&gt; hosted by Supabase, hosted alongside with the &lt;strong&gt;Hacktoberfest&lt;/strong&gt; event! &lt;/p&gt;

&lt;p&gt;If you'd missed out the first one, you can check all the submission &lt;a href="https://www.madewithsupabase.com/tag/Hackathon"&gt;here&lt;/a&gt;. Of course, you might be wondering who were the winners, and what was the prize for the first Hackathon? Here's the official blogpost for the &lt;a href="https://supabase.io/blog/2021/08/09/hackathon-winners"&gt;Medal Ceremony&lt;/a&gt;. I'm sure you wish you knew this earlier, right? 😆&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-it-matter"&gt;
  &lt;/a&gt;
  Why does it matter?
&lt;/h2&gt;

&lt;p&gt;You might be thinking, why Supabase Hacktoberfest is hosted alongside with Hacktoberfest? It's because instead of having to code twice, each separately for each event, you can just -- &lt;strong&gt;Kill two birds with One stone&lt;/strong&gt;. (I'm sorry bird lover for using this idiom 😣) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NoGwfGdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypst17ne1z7ulljogm67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NoGwfGdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypst17ne1z7ulljogm67.png" alt="one stone two bird"&gt;&lt;/a&gt; &lt;/p&gt;
http://thejoysofjodi.com/kill-two-birds-with-one-stone-idioms-part-ii/



&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;p&gt;For Supabase Hacktoberfest Hackathon submission to be counted as valid, you need to build a &lt;strong&gt;New Open-Source&lt;/strong&gt; project with Supabase in the next 10 days.&lt;/p&gt;

&lt;p&gt;It can be whatever you want - a project, mobile app, tool, library, anything 😱!!! , as long as you are using Supabase in some way. You can either enter as an individual, or as a team of up to 5 people. &lt;/p&gt;

&lt;p&gt;You can check out the Official Post from Supabase &lt;a href="https://supabase.io/blog/2021/09/28/supabase-hacktoberfest-hackathon-2021"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚡ Do take note!&lt;br&gt;
Submission deadline is Sunday Oct 10th at 11:59pm PT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But in order to kill two birds with one stone, you need to first &lt;a href="https://hacktoberfest.digitalocean.com/resources/maintainers"&gt;set up your Hackathon repo&lt;/a&gt;, then make at least 4 PR on that Hackathon project. &lt;/p&gt;

&lt;p&gt;That's it! Simple and easy steps that could possibly earn you Hacktoberfest T-Shirt and Supabase Swag with only one effort!&lt;/p&gt;




&lt;p&gt;If you are not planning (or too late) to participate in the Supabase Hacktoberfest Hackathon, you can also contribute to one of our &lt;strong&gt;Supabase community projects&lt;/strong&gt; that have the &lt;a href="https://github.com/supabase-community?q=topic%3Ahacktoberfest"&gt;hacktoberfest topic&lt;/a&gt; and earn yourself Hacktoberfest PR count.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#made-with-supabase"&gt;
  &lt;/a&gt;
  Made with Supabase
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/made-with-supabase"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ifMaATEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zxa7jhwh1kurb582ils.png" alt="og"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a collection of projects that &lt;a href="https://www.producthunt.com/posts/made-with-supabase"&gt;Made with Supabase&lt;/a&gt;! It was built by myself, and contributed by tons of Supabase lovers that wish to showcase their lovely project with the world!🌎&lt;/p&gt;

&lt;p&gt;And the most mind blowing fact is that, the &lt;strong&gt;Made with Supabase&lt;/strong&gt; is made with Supabase! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-us-now"&gt;
  &lt;/a&gt;
  Join us now!
&lt;/h2&gt;

&lt;p&gt;So what are you waiting for? Join us on &lt;a href="https://discord.gg/bnncdqgBSS"&gt;Discord&lt;/a&gt;, Hackathon channel to have fun, find your team, and start Coding!&lt;/p&gt;

&lt;p&gt;If you have any questions, feel free to ask me on the comment section below! 💚&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>hacktoberfest</category>
      <category>supabase</category>
    </item>
    <item>
      <title>fyi: You can bypass youtube ads by adding a dot after the domain</title>
      <author>Dubai Call  Girls 0529537014</author>
      <pubDate>Fri, 01 Oct 2021 16:15:11 +0000</pubDate>
      <link>https://dev.to/takla_sagar_f757e6146c3be/fyi-you-can-bypass-youtube-ads-by-adding-a-dot-after-the-domain-17pl</link>
      <guid>https://dev.to/takla_sagar_f757e6146c3be/fyi-you-can-bypass-youtube-ads-by-adding-a-dot-after-the-domain-17pl</guid>
      <description>&lt;p&gt;On desktop browsers.&lt;/p&gt;

&lt;p&gt;To follow up: I had initially assumed that it didn't work on mobile because the browsers normalized the URL, however this isn't the case. The redirection happens on the server side. So, if you want this to work on mobile browsers, use the "Request Desktop Site" feature.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=DuB8VUICGqc"&gt;https://www.youtube.com/watch?v=DuB8VUICGqc&lt;/a&gt; // will occasionally show ads&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com./watch?v=DuB8VUICGqc"&gt;https://www.youtube.com./watch?v=DuB8VUICGqc&lt;/a&gt; // will not show ads&lt;/p&gt;

&lt;p&gt;It's a commonly forgotten edge case, websites forget to normalize the hostname, the content is still served, but there's no hostname match on the browser so no cookies and broken CORS - and lots of bigger sites use a different domain to serve ads/media with a whitelist that doesn't contain the extra dot&lt;/p&gt;

&lt;p&gt;This works for many news websites as well serving paywalls, e.g.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nytimes.com./2020/06/09/us/george-floyd-who-is.html"&gt;https://www.nytimes.com./2020/06/09/us/george-floyd-who-is.html&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/kanika-dubai-service/"&gt;https://www.linkedin.com/in/kanika-dubai-service/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com./in/kanika-dubai-service/"&gt;https://www.linkedin.com./in/kanika-dubai-service/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Five Benefits of Open Source Software for Your Organization</title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 01 Oct 2021 16:02:09 +0000</pubDate>
      <link>https://dev.to/linearb/five-benefits-of-open-source-software-for-your-organization-24ih</link>
      <guid>https://dev.to/linearb/five-benefits-of-open-source-software-for-your-organization-24ih</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was written exclusively for devinterrupted.com by Doron Gill&lt;/em&gt;&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
Open source software has been around for quite some time, but &lt;a href="https://open.spotify.com/episode/6cTXOS8KPMjGWt3ZTvklLW"&gt;as I highlighted on the Dev Interrupted Podcast &lt;/a&gt;, only within the last decade has it come to be widely accepted and used, though many organizations are yet to use the concept. While many people still remain skeptical of open source, its growing popularity and use is undeniable.&lt;/p&gt;

&lt;p&gt;For many developers, open source is “the one true way”, almost a religion. Many of the world’s best and brightest developers devote themselves to creating and advancing the cause of open source projects. There are any number of foundations and organizations — from &lt;a href="https://apache.org/"&gt;The Apache Software Foundation &lt;/a&gt;to the &lt;a href="https://dotnetfoundation.org/"&gt;.NET Foundation &lt;/a&gt;— that openly support open source. Open source is a large part of some of the biggest tech giants in the world, including Google, Microsoft, and Amazon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mDrDuTdd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37wj2vbb1u41co7y8rdc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDrDuTdd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37wj2vbb1u41co7y8rdc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefits-of-open-source"&gt;
  &lt;/a&gt;
  Benefits of Open Source
&lt;/h2&gt;

&lt;p&gt;As the VP of Engineering of &lt;a href="https://logz.io/"&gt;Logz.io &lt;/a&gt;, which has entirely embraced the open source benefits model, I am an open source “true believer” and see many benefits to using open source software. I highlighted five of these key benefits on the &lt;a href="https://linearb.io/dev-interrupted-podcast-2/"&gt;Dev Interrupted Podcast &lt;/a&gt;with &lt;a href="https://linearb.io"&gt;LinearB &lt;/a&gt;co-founder Dan Lines:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-open-source-is-widely-used"&gt;
  &lt;/a&gt;
  1. Open source is widely used
&lt;/h3&gt;

&lt;p&gt;What development organization doesn’t use git these days?&lt;/p&gt;

&lt;p&gt;There are many open source projects that are widely used. Tools like Elastic, Kafka, and the Apache Web Server are amongst the most popular and commonly used software applications in the world. Because they and many other similar projects are so popular, there are copious resources available for learning, troubleshooting, and solving problems.&lt;/p&gt;

&lt;p&gt;Finding developers that are skilled in a particular project can be much easier, as these projects are so widely used and known. Plus, developers prefer to work at companies that use open source, because they know that they won’t be locked into a proprietary solution and that their skills will be transferable.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-open-source-is-responsive"&gt;
  &lt;/a&gt;
  2. Open source is responsive
&lt;/h3&gt;

&lt;p&gt;Open source is usually very responsive to issues and bug reports, often delivering fixes and updates in days or even hours. These updates can often be deployed immediately whereas with proprietary software, you often have to wait months for the next release to resolve a problem.&lt;/p&gt;

&lt;p&gt;New features are available earlier in the development cycle, and users can normally see and try out features as they develop. This enables organizations to more rapidly adopt new versions of projects.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-open-source-brings-financial-advantages"&gt;
  &lt;/a&gt;
  3. Open source brings financial advantages
&lt;/h3&gt;

&lt;p&gt;Open source can both cut costs and minimize maintenance. Of course, the biggest cost benefit comes from getting a complete, proven software package for no cost. Improvements and bug fixes also come to the software from external sources, keeping maintenance costs low. Development occurs outside of your organization, resulting in new features with little effort.&lt;/p&gt;

&lt;p&gt;Using open source just makes financial sense. I don’t want to write a load balancer — why should I spend the time and effort to do so when I can use one built and maintained by experts?&lt;/p&gt;

&lt;p&gt;Sure, there are some costs associated with open source, such as setup time, learning time, and continuing maintenance and configuration, but the same costs are incurred for closed source software.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-open-source-is-more-secure"&gt;
  &lt;/a&gt;
  4. Open source is more secure
&lt;/h3&gt;

&lt;p&gt;Security is a worry with any software that you use, and some argue that open source isn’t secure because everyone and anyone can see what the application does — but I say that open source software is &lt;strong&gt;&lt;em&gt;more&lt;/em&gt;&lt;/strong&gt; secure because of this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/dgpCTgHNLeQ"&gt;https://youtu.be/dgpCTgHNLeQ&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“What do you trust more? Security in a product that is fully transparent, where you have tens or hundreds of workers across the world testing and working on it, as opposed to a product where you have not seen the source at all.”&lt;br&gt;
  — &lt;em&gt;from the &lt;a href="https://open.spotify.com/episode/6cTXOS8KPMjGWt3ZTvklLW"&gt;Dev Interrupted Podcast &lt;/a&gt;at 8:20&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since everyone and anyone can see the code, they &lt;strong&gt;&lt;em&gt;do&lt;/em&gt;&lt;/strong&gt; know exactly what the software does and doesn’t do. Thousands of pairs of eyes from all over the world look at the code and can spot vulnerabilities before they are exploited. Thanks to this transparency, it’s much more difficult to take advantage of security holes because they’re fixed as fast as they are found.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dgpCTgHNLeQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Proprietary software doesn’t have this advantage. It only has a single development team looking at the source, and you as a consumer have no idea what security holes may lurk within.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-open-source-is-futureproof"&gt;
  &lt;/a&gt;
  5. Open source is future-proof
&lt;/h3&gt;

&lt;p&gt;One of the benefits of open source is that it can never disappear. A proprietary company can go out of business, leaving you high and dry and with no options but to stick with what you have or migrate to another solution.&lt;/p&gt;

&lt;p&gt;However, open source is available, well, forever. Put a project up on GitHub, and it will live as long as someone has the source code.&lt;/p&gt;

&lt;p&gt;In a worst case scenario, an organization can take over the project themselves, fixing things and adding features as desired.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managed-service-providers"&gt;
  &lt;/a&gt;
  Managed Service Providers
&lt;/h2&gt;

&lt;p&gt;Open source software very commonly lends itself to the managed service model. In fact, most managed service providers would not be open source-able without open source software. A proprietary solution cannot be used in such a manner — the licensing would forbid it. Taking open source and providing it as a service is a powerful business model that is only possible because of the open licensing of open source.&lt;/p&gt;

&lt;p&gt;We here at &lt;a href="https://logz.io/"&gt;logz.io &lt;/a&gt;provide managed services for log and tracing analytics and observability. We use a number of open source projects to provide these services. Our value, like all managed service providers, lies in our ability to provide expertise for a service that another organization probably doesn’t want to spend the time and money to become experts in. This is only possible because of open source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-open-source-for-everyone"&gt;
  &lt;/a&gt;
  Is open source for everyone?
&lt;/h2&gt;

&lt;p&gt;No — open source software is not for everyone.&lt;/p&gt;

&lt;p&gt;Some organizations — especially large, enterprise companies — are not able to risk the “infection” from licenses like the &lt;a href="https://www.gnu.org/licenses/gpl-3.0.en.html"&gt;GPL &lt;/a&gt;. Large organizations often have legal requirements that prevent them from safely absorbing open source. Some organizations simply can’t or won’t overcome NIH — the “Not Invented Here” syndrome. Some want a company that they can yell at if something goes wrong. And some people just don’t see “the one true way”.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-is-the-way"&gt;
  &lt;/a&gt;
  This is the Way
&lt;/h2&gt;

&lt;p&gt;In the end, I truly believe that the benefits of open source vastly outweigh any costs that may be incurred. We’ve staked our whole business on it here at logz.io, and it’s clearly working not only for us but for many other companies and managed service providers. Fully and clearly considered, it’s hard to see why your company couldn’t benefit from using open source Software. &lt;a href="https://open.spotify.com/episode/6cTXOS8KPMjGWt3ZTvklLW"&gt;Listen here &lt;/a&gt;if you want to learn more about the benefits of enterprise open source software.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/6cTXOS8KPMjGWt3ZTvklLW"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/benefits-of-open-source-in-your-organization/"&gt;https://devinterrupted.com&lt;/a&gt; on June 28, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>security</category>
      <category>management</category>
      <category>analytics</category>
    </item>
    <item>
      <title>Cycle Time Breakdown: Tactics for Reducing Coding Time</title>
      <author>Nick Hodges</author>
      <pubDate>Fri, 01 Oct 2021 16:00:00 +0000</pubDate>
      <link>https://dev.to/linearb/cycle-time-breakdown-tactics-for-reducing-coding-time-5fg7</link>
      <guid>https://dev.to/linearb/cycle-time-breakdown-tactics-for-reducing-coding-time-5fg7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-issue-my-coding-time-feels-too-high"&gt;
  &lt;/a&gt;
  The Issue: My Coding Time Feels Too High
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--de31KssO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muuusgp72he2len0g34l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--de31KssO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muuusgp72he2len0g34l.png" alt="LinearB's Cycle Time Display with Coding Time in the red"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linearb.io/cycle-time/"&gt;Cycle Time is the Dev Manager’s Super Metric&lt;/a&gt;. So naturally, the conscientious Dev Manager will want to pay close attention to Coding Time, the very first segment of a project’s journey along the Cycle Time path. Keeping Cycle Time “all green” is the goal, but this is often difficult because there are a lot of moving parts that go into managing Cycle Time. One of those moving parts that are hard to keep in control of is Coding Time.&lt;/p&gt;

&lt;p&gt;Coding Time is defined as the time between the first commit made to a branch to when a pull request is submitted. As a general rule, you want your coding time to be two to three days. Anything above four days is considered worrisome, and a Coding Time above seven days is a real problem. Many elite teams are able to measure Coding Time in hours, not days.&lt;/p&gt;

&lt;p&gt;In the past, we could measure the notion of Coding Time only anecdotally. Perhaps you could keep track of how the coding on a project was going by the reports in a daily standup.&lt;/p&gt;

&lt;p&gt;However, these days, managers are demanding more — they want hard data. LinearB provides an overview of Cycle Time for all your projects on the main dashboard that includes a clear indication of the status of your coding time. This dashboard is data-driven, based on the work committed to your code repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--55SwyIk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht91yeem8mpxciqkn4p2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55SwyIk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht91yeem8mpxciqkn4p2.png" alt="LinearB Cycle Time Dashboard with Coding Time a little high"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see that coding time is turning orange- meaning that it is getting worrisome and should be looked at more closely. At this point, things are heading in a sub-optimal direction, but the dashboard shows this fact to you in real-time. You are able to quickly see any bottlenecks almost immediately just as they begin to be a problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-cause"&gt;
  &lt;/a&gt;
  What’s the cause?
&lt;/h2&gt;

&lt;p&gt;There are three main reasons why a branch might have high coding time:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The project is too large&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The project is too difficult&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The project is languishing&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-project-is-too-large"&gt;
  &lt;/a&gt;
  The Project is Too Large
&lt;/h3&gt;

&lt;p&gt;This is probably the most common reason that Coding Time expands beyond desired boundaries. The branch the project is based on will often have many commits. The “chunk” of work is too big to complete in the standard set for normal coding time. In general, the Coding Time is longer because there is simply too much work and not enough time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-project-is-too-difficult"&gt;
  &lt;/a&gt;
  The Project is Too Difficult
&lt;/h3&gt;

&lt;p&gt;Sometimes, your project might be broken down into appropriately sized chunks of work, but it turns out that a given chunk of work is harder than anticipated.&lt;/p&gt;

&lt;p&gt;Maybe the problem wasn’t completely understood, and the effort required to do the task was greater than originally thought. &lt;a href="https://devinterrupted.com/nine-software-development-lessons/"&gt;Or perhaps there were a number of “unknown unknowns” that were discovered, making the project bigger than anticipated&lt;/a&gt;. Another indication of this problem is high levels of code rework and refactoring.&lt;/p&gt;

&lt;p&gt;The bottom line here is that things were more difficult than anticipated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-project-is-languishing"&gt;
  &lt;/a&gt;
  The Project is Languishing
&lt;/h3&gt;

&lt;p&gt;This one is pretty simple: The Coding Time is taking longer than expected because the project was started, but left alone unworked. Most likely the developer was required to turn to other tasks based on new priorities, and the branch was left unaltered for a long period of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#investigating-high-coding-time"&gt;
  &lt;/a&gt;
  Investigating High Coding Time
&lt;/h2&gt;

&lt;p&gt;The first thing to do about growing Coding Time is to find out which projects or branches are the ones causing the problem. In order to do that, you can drill down into the LinearB dashboard and take a look.&lt;/p&gt;

&lt;p&gt;To look more deeply, you can click on the little arrow in the upper right corner of the Cycle Time Box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9y-usqvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2za2q9761e8oa8kfcppq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9y-usqvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2za2q9761e8oa8kfcppq.gif" alt="You can drill down into Cycle Time by clicking the arrow in the upper right"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Doing that will take you to the Branch View of your repository. From there, you can see all the branches that are affecting your coding time.&lt;/p&gt;

&lt;p&gt;For instance, the top branch below had a coding time of almost eight days — a length of time that contributed to the Coding Time for the team being higher.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jTgIjrf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0xgtth1duwpi3jaxkn7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jTgIjrf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0xgtth1duwpi3jaxkn7.gif" alt="Hover over a Cycle Time display, and see the breakdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note, too, that you can see the exact contribution that any branch is making to the overall Cycle Time by simply hovering your mouse over the Cycle Time column of the given branch. Thus you can quickly see which branches are causing problems for your Coding Time.&lt;/p&gt;

&lt;p&gt;For example, by analyzing our own coding time data over the past fifteen months, we’ve found that fewer than 20% of Pull Requests make up the majority of coding time issues. Oftentimes these are Pull Requests that were forgotten about due to a high level of context switching or where the chunk of work was too large.&lt;/p&gt;

&lt;p&gt;Once you determine &lt;em&gt;where&lt;/em&gt; the long coding times are, you’ll want to know why those branches are causing a problem. That is — which of the three reasons above do the problematic branches represent.&lt;/p&gt;

&lt;p&gt;Once a branch has been determined to have a Coding Time problem, you can click on the name of the entry and be taken directly to the git page for that branch, where you can determine what the issue is, whether it be too much work, code churn, or the branch simply isn’t being worked on.&lt;/p&gt;

&lt;p&gt;From there, you can work with your team to correct the issues going forward and get your Coding Time back into the green.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preventing-high-coding-time"&gt;
  &lt;/a&gt;
  Preventing High Coding Time
&lt;/h2&gt;

&lt;p&gt;Naturally, what you really want as a manager is to prevent Coding Time from being a problem in the first place.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you are not already using LinearB and want to do things like track Cycle Time and Pull Request Size, &lt;a href="https://linearb.io/demo"&gt;sign up for a free demo of the product today&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing you can do towards that goal is to educate your team on the need for dividing your work into small, manageable chunks. &lt;a href="https://linearb.helpdocs.io/article/x1620txj8m-pull-request-size"&gt;Pull requests that are too large&lt;/a&gt; are a clear indication that the chunks of work are too big. Big Pull Requests will also tend to make PR Review Time longer as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; High-performance engineering teams try to break their work into less than 150 code changes per Pull Request. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You could check the Branches page each week, looking for large Pull Requests that indicate long Coding Times.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You might then even bring this metric into your sprint retrospectives. If your team agrees that improving Pull Request size is important, you can set it as a goal for your next sprint and celebrate a win during the retrospective.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrp-mp8---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uatssqobq8eny0n4ser1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrp-mp8---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uatssqobq8eny0n4ser1.png" alt="An increased PR Size Metric can be an indicator of Coding Time troubles ahead"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Second, in order to warn your team about large chunks of work, you can &lt;a href="https://linearb.helpdocs.io/article/16zfs7qnli-notification-types#work_at_risk"&gt;configure the Work at Risk notifications&lt;/a&gt; to notify you of branches that are heading in a bad direction so you can take&lt;a href="https://linearb.helpdocs.io/article/1rk0nrp4yd-how-to-handle-high-risk-work"&gt; corrective action &lt;em&gt;before&lt;/em&gt; they become real problems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GcsENwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltvi9tzpi86rt9ikglja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GcsENwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltvi9tzpi86rt9ikglja.png" alt="You can define the levels that will send WorkerB notifications for various Work at Risk levels"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To allow you to keep a close eye on Coding Time, &lt;a href="https://linearb.io/blog/custom-metrics-dashboards/"&gt;you can create a custom dashboard with PR Size and Coding Time on it&lt;/a&gt; so that you can easily check on these important values at any time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jU0yWG3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/telkkpe55127wlpyaa6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jU0yWG3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/telkkpe55127wlpyaa6w.png" alt="A Custom Dashboard to keep an eye on Coding Time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, you might check the Daily Digest notification message for branches that have more than 100 code changes, stuck work, and pull requests with more than 6 comments. These are the branches that are very likely problematic and worth investigating before they cause Coding Time to rise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end-result"&gt;
  &lt;/a&gt;
  The End Result
&lt;/h2&gt;

&lt;p&gt;Keeping Coding Time, and thus Cycle Time, under control is a critical means to continuously improving your software development process. By monitoring Pull Request size, keeping an eye on individual branches where Coding Time is pressing up against your limits, and by warning you and your team about Work at Risk, you can ensure that your Coding Time stays under control.&lt;/p&gt;

&lt;p&gt;But more importantly, LinearB can help you ensure it doesn’t happen in the first place. Our tool lets you recognize that there is a problem, dig in to find where the problem originates, and take the necessary steps to correct things. If you are not already using LinearB and want to do things like track Cycle Time and Pull Request Size, &lt;a href="https://linearb.io/demo"&gt;sign up for a free demo of the product today&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://linearb.io/blog/reducing-coding-time/"&gt;https://linearb.io&lt;/a&gt; on July 16, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>management</category>
      <category>monitoring</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Python beginner Project: Calendar Builder</title>
      <author>Ihtesham Haider</author>
      <pubDate>Fri, 01 Oct 2021 15:42:58 +0000</pubDate>
      <link>https://dev.to/ihtesham_haider/python-beginner-project-calendar-builder-531l</link>
      <guid>https://dev.to/ihtesham_haider/python-beginner-project-calendar-builder-531l</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fL1mBYCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hvcjcklulo38mcbs98f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fL1mBYCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hvcjcklulo38mcbs98f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey, hi today we're gonna make a nice looking printable text file of monthly calendars for the month and year you desire.&lt;/p&gt;

&lt;p&gt;Don't scare from dates and calendars, yes, they are some tricky &lt;strong&gt;topic&lt;/strong&gt; in programming because there are so many different rules for condioning the number of the days in a month, which years are leap years, and which day of the week a particular date falls on.&lt;/p&gt;

&lt;p&gt;Thankfully, Python's &lt;strong&gt;datetime module&lt;/strong&gt; handles these details for us. We will generate a multiline string for the monthly calendar page.&lt;/p&gt;

&lt;p&gt;Are you still with me, if yes, let's make this shit!!&lt;/p&gt;

&lt;p&gt;Things you need to make &lt;strong&gt;This Calendar Builder&lt;/strong&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;a href="https://code.visualstudio.com/"&gt;IDE&lt;/a&gt; where you will write your code&lt;/li&gt;
&lt;li&gt;Python installed from &lt;a href="https://www.python.org/downloads/"&gt;python official website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Then you're good to go!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First steps:&lt;br&gt;
Make a file &lt;code&gt;Caledar_builder.py&lt;/code&gt;&lt;br&gt;
Now Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import datetime
# Set up the constants:
DAYS = ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',
        'Friday', 'Saturday')
MONTHS = ('January', 'February', 'March', 'April', 'May', 'June', 'July',
          'August', 'September', 'October', 'November', 'December')

print('|| Calender-Builder ||')

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;import datetime which is a python module. If you don't know about it &lt;a href="https://docs.python.org/3/library/datetime.html"&gt;Check this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Setting up the constants Days name and months name.&lt;/li&gt;
&lt;li&gt;Print the Calender Builder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;After this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while True:  # Loop to get a year from the user.
    print('Enter the year for the calendar:')
    response = input('&amp;gt; ')

    if response.isdecimal() and int(response) &amp;gt; 0:
        year = int(response)
        break

    print('Please enter a numeric year, like 2023.')
    continue

while True:  # Loop to get a month from the user.
    print('Enter the month for the calendar, 1-12:')
    response = input('&amp;gt; ')

    if not response.isdecimal():
        print('Please enter a numeric month, like 3 for March.')
        continue

    month = int(response)
    if 1 &amp;lt;= month &amp;lt;= 12:
        break

    print('Please enter a number from 1 to 12.')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;First loop is to get the year from the user 

&lt;ul&gt;
&lt;li&gt;print the message &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;response variable contains input which will appear to the user to give Answer like the Year (2050)&lt;/li&gt;
&lt;li&gt;if condition to see the user put correct answer or not! by saying this I mean numeric value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second loop:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Second loop is to get the month from the user.&lt;/li&gt;
&lt;li&gt;And if statement to look up to the input of the user......&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;After this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def getCalendarFor(year, month):
    calText = '' 

    calText += (' ' * 34) + MONTHS[month - 1] + ' ' + str(year) + '\n'

    calText += '...Sun.....Mon....Tue..Wed...Thur....Fri....Sat..\n'

    weekSeparator = ('+----------' * 7) + '+\n'

    blankRow = ('|          ' * 7) + '|\n'
    currentDate = datetime.date(year, month, 1)
    while currentDate.weekday() != 6:
        currentDate -= datetime.timedelta(days=1)

    while True:  # Loop over each week in the month.
        calText += weekSeparator
        dayNumberRow = ''
        for i in range(7):
            dayNumberLabel = str(currentDate.day).rjust(2)
            dayNumberRow += '|' + dayNumberLabel + (' ' * 8)
            currentDate += datetime.timedelta(days=1) # Go to next day.
        dayNumberRow += '|\n'  # Add the vertical line after Saturday.

        # Add the day number row and 3 blank rows to the calendar text.
        calText += dayNumberRow
        for i in range(3):  # (!) Try changing the 4 to a 5 or 10.
            calText += blankRow

        # Check if we're done with the month:
        if currentDate.month != month:
            break

    # Add the horizontal line at the very bottom of the calendar.
    calText += weekSeparator
    return calText

calText = getCalendarFor(year, month)
print(calText)  # Display the calendar.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Are you still with me this one will be a bit big!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;def (declaration of Python function) getCalendarFor(year, month) will get the year and month.&lt;/li&gt;
&lt;li&gt;calText will contain the string of our calendar.&lt;/li&gt;
&lt;li&gt;3 line will Put the month and year at the top of the calendar:&lt;/li&gt;
&lt;li&gt;4 line Add the days of the week labels to the calendar:

&lt;ul&gt;
&lt;li&gt;Try to change the abbreviations to SUN, MON and so forth to the week days if you want.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;weekSeparator&lt;/code&gt; The horizontal line string that separate weeks:&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;blankRow&lt;/code&gt; The blank rows have ten spaces in between the | day separators:&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;while currentDate.weekday() != 6:&lt;/code&gt; Get the first date in the month. (The datetime module handles all the complicated calendar stuff for us here.)

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;currentDate = datetime.date(year, month, 1)&lt;/code&gt;
Roll back currentDate until it is Sunday. (weekday() returns 6 for Sunday, not 0.)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dayNumberRow&lt;/code&gt; is the row with the day number labels:&lt;/li&gt;
&lt;li&gt; &lt;code&gt;for i in range(3):&lt;/code&gt; (!) Try changing the 4 to a 5 or 10.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;calText = getCalendarFor(year, month)&lt;/code&gt;
&lt;code&gt;print(calText)&lt;/code&gt;  # Display the calendar.
&lt;h3&gt;
  &lt;a href="#to-save-the-printed-code-in-a-file" class="anchor"&gt;
  &lt;/a&gt;
  To save the printed code in a file
&lt;/h3&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Save the calendar to a text file:
calendarFilename = 'calendar_{}_{}.txt'.format(year, month)
with open(calendarFilename, 'w') as fileObj:
    fileObj.write(calText)

print('Saved to ' + calendarFilename)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the code and then give me Reply!&lt;br&gt;
For contacting me follow my handles.&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/ihtesham-haider-079887218/"&gt;Linkedin&lt;/a&gt; &lt;a href="https://medium.com/@ihteshamhaider"&gt;Medium&lt;/a&gt; &lt;a href="https://twitter.com/techtimes101"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>python</category>
      <category>project</category>
    </item>
    <item>
      <title>Optimize Node.js performance with clustering</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Fri, 01 Oct 2021 14:46:42 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/optimize-node-js-performance-with-clustering-kdg</link>
      <guid>https://dev.to/karanpratapsingh/optimize-node-js-performance-with-clustering-kdg</guid>
      <description>&lt;p&gt;In this article, We will see how we can optimize our Node.js applications with clustering. Later we'll also do some benchmarks!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-clustering"&gt;
  &lt;/a&gt;
  What is clustering?
&lt;/h3&gt;

&lt;p&gt;Node.js is single threaded by default and hence only utilizes one cpu core for that thread. So, to take advantage of all the cores available we need to launch a cluster of Node.js processes.&lt;/p&gt;

&lt;p&gt;For this we can use the native &lt;a href="https://nodejs.org/api/cluster.html"&gt;cluster&lt;/a&gt; module which creates several child processes (workers) that operate parallelly. Each generated process has it's own event loop, V8 instance and memory. The primary process and worker process communicate with each other via IPC (Inter-Process Communication).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Code from this tutorial will be available in this &lt;a href="https://github.com/karanpratapsingh/tutorials/tree/master/node/cluster"&gt;repository&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h3&gt;

&lt;p&gt;Let's initialize and setup our project!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ yarn init -y
$ yarn add express typescript ts-node
$ yarn add -D @types/node @types/express
$ yarn tsc --init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Project directory should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── src
│   ├── cluster.ts
│   ├── default.ts
│   └── server.ts
├── tsconfig.json
├── package.json
└── yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;server.ts&lt;/strong&gt;&lt;br&gt;
Here, we'll bootstrap our simple &lt;a href="https://github.com/expressjs/express"&gt;express&lt;/a&gt; server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/intense&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;intense&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;intenseWork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;intense&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Done!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server started with worker &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Mimics some intense server-side work
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;intenseWork&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;e7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;default.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Server&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start! Start! Start!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ yarn ts-node src/default.ts

Server started with worker 22030
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;cluster.ts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now let's use the &lt;a href="https://nodejs.org/api/cluster.html"&gt;cluster&lt;/a&gt; module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cluster&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;os&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;os&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Server&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isMaster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cpus&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Total cores: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Primary process &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is running`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;cores&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Worker &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; exited with code &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fork new worker!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start! Start! Start!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ yarn ts-node src/cluster.ts

Total cores: 12
Primary process 22140 is running
Server started with worker 22146
Server started with worker 22150
Server started with worker 22143
Server started with worker 22147
Server started with worker 22153
Server started with worker 22148
Server started with worker 22144
Server started with worker 22145
Server started with worker 22149
Server started with worker 22154
Server started with worker 22152
Server started with worker 22151
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#benchmarking"&gt;
  &lt;/a&gt;
  Benchmarking
&lt;/h3&gt;

&lt;p&gt;For benchmarking, I will use &lt;a href="https://httpd.apache.org/docs/2.4/programs/ab.html"&gt;apache bench&lt;/a&gt;. We can also use &lt;a href="https://github.com/alexfernandez/loadtest"&gt;loadtest&lt;/a&gt; which has similar functionality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ab -n 1000 -c 100 http://localhost:4000/api/intense

Here:

-n requests
-c concurrency
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Without Clustering&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
.
.
Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    2   1.0      1       5
Processing:    75 5373 810.7   5598    7190
Waiting:       60 3152 1013.7   3235    5587
Total:         76 5374 810.9   5600    7190

Percentage of the requests served within a certain time (ms)
  50%   5600
  66%   5768
  75%   5829
  80%   5880
  90%   5929
  95%   6006
  98%   6057
  99%   6063
 100%   7190 (longest request)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;With Clustering&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
.
.
Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    1   3.8      0      29
Processing:    67 1971 260.4   1988    2460
Waiting:       61 1698 338.3   1744    2201
Total:         67 1972 260.2   1988    2460

Percentage of the requests served within a certain time (ms)
  50%   1988
  66%   2059
  75%   2153
  80%   2199
  90%   2294
  95%   2335
  98%   2379
  99%   2402
 100%   2460 (longest request)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bfFEHy8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xmw9ukcn5u9w6vgtfv1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bfFEHy8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xmw9ukcn5u9w6vgtfv1.png" alt="benchmark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We can see a great reduction in our request time as incoming load is divided between all the worker processes.&lt;/p&gt;

&lt;p&gt;If you don't want to use native cluster module, you can also try &lt;a href="https://www.npmjs.com/package/pm2"&gt;PM2&lt;/a&gt; which is a process manager with built in load balancer.&lt;/p&gt;

</description>
      <category>node</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Failing to get product information from Amazon with Perl</title>
      <author>Dave Cross</author>
      <pubDate>Fri, 01 Oct 2021 14:22:13 +0000</pubDate>
      <link>https://dev.to/davorg/failing-to-get-product-information-from-amazon-with-perl-5a3g</link>
      <guid>https://dev.to/davorg/failing-to-get-product-information-from-amazon-with-perl-5a3g</guid>
      <description>&lt;p&gt;I got a bit distracted this week. I was supposed to be writing a book, but as I was feeling a little unwell, I decided to do a little light recreational programming instead.&lt;/p&gt;

&lt;p&gt;I'm an Amazon associate, which means if I share the right links, I can drive people to the Amazon web site and get a cut of the money when they buy something. I started to muse about the idea of automatically generating pages that contain lots of the right links (books I recommend, films I enjoy, things like that). Ideally, I'd like to start with a list of ASINs (Amazon's unique product identifiers) and a TT template and end with an HTML page. I've done something like this before on the &lt;a href="https://lineofsuccession.co.uk/shop"&gt;Line of Succession shop page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But when I looked at the code that generates that page I realised that all the information about the products was hard-coded in a data file. I was copying the information from Amazon myself. I can't remember why I didn't grab the information from Amazon automatically.&lt;/p&gt;

&lt;p&gt;Luckily, I've done this before. Ten years ago, I wrote &lt;a href="https://perlhacks.com/articles/modern-perl-programming/"&gt;a series of articles&lt;/a&gt; for &lt;em&gt;Linux Format&lt;/em&gt; about Modern Perl. And the application I wrote over those articles was a reading tracker. And you added books to the system by giving it an ASIN which the program then used to get the title, author and cover image from Amazon. It did that using &lt;a href="https://metacpan.org/pod/Net::Amazon"&gt;Net::Amazon&lt;/a&gt;. So I checked out the sample code, fired up the application and tried it out.&lt;/p&gt;

&lt;p&gt;Only to find that it didn't work. The Amazon code was broken. Further investigation revealed that the API behind Net::Amazon had been turn off earlier this years and all requests to it returned the HTTP status "410 Gone". I found &lt;a href="https://github.com/boumenot/p5-Net-Amazon/issues/9"&gt;a conversation about this&lt;/a&gt; on the GitHub repo for the module, in which it's obvious that the author has little interest in updating the module to support the replacement API - which is unsurprising as it would mean a complete rewrite of the code.&lt;/p&gt;

&lt;p&gt;I went off looking for alternatives. And found &lt;a href="https://metacpan.org/pod/XML::Amazon"&gt;XML::Amazon&lt;/a&gt;. And, even better, there was a release of this module that happened after the API was turned off. But my happiness was short-lived when I discovered that it had exactly the same problem. I wondered how it had a new release if (presumably) all of the tests failed. It turns out that there's an environment variable that needs to be set in order for the live API tests to run. None of the CPAN testers will set that and I guess the author forgot to do that when releasing the new version.&lt;/p&gt;

&lt;p&gt;(There's a potential blog post here about how the shrinking Perl community will see an increase of this kind of bit-rot on CPAN in the coming years - but this isn't that post.)&lt;/p&gt;

&lt;p&gt;The replacement API for the one these older modules used is called the &lt;a href="https://webservices.amazon.com/paapi5/documentation/"&gt;Product Advertising API&lt;/a&gt; and it's completely different to the older version. I guess Amazon have learned a lot about API design in the last few years - given that they seem to release dozens of new ones each month :-)&lt;/p&gt;

&lt;p&gt;But I was enthused enough to start work on a replacement. It's called Amazon::API::ProductAdvertising. It's not yet ready for CPAN, but there's a &lt;a href="https://github.com/davorg/amazon-api-productadvertising"&gt;GitHub repo&lt;/a&gt;. I was slightly scared by the &lt;a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"&gt;signing mechanism&lt;/a&gt; that Amazon uses on API requests, but it turns out that &lt;a href="https://metacpan.org/pod/Net::Amazon::Signature::V4"&gt;Net::Amazon::Signature::V4&lt;/a&gt; exists and makes that really easy.&lt;/p&gt;

&lt;p&gt;So it basically works. I just need to work a bit on the parameter passing (there are a &lt;strong&gt;lot&lt;/strong&gt; of possible parameters), add the documentation and package it up for CPAN. I'm hoping to get that done over the weekend. This blog post is mostly here to encourage me to do that!&lt;/p&gt;

</description>
      <category>perl</category>
      <category>amazon</category>
      <category>api</category>
      <category>cpan</category>
    </item>
  </channel>
</rss>
