<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tips to Ignite Your Zeal by Jacqueline Nagle</title>
      <author>Jacqueline Nagle</author>
      <pubDate>Mon, 22 Nov 2021 05:12:39 +0000</pubDate>
      <link>https://dev.to/jacquelinenagle/tips-to-ignite-your-zeal-by-jacqueline-nagle-og4</link>
      <guid>https://dev.to/jacquelinenagle/tips-to-ignite-your-zeal-by-jacqueline-nagle-og4</guid>
      <description>&lt;p&gt;Can a person be successful without the zeal or passion to do something? I doubt it! Businesses, CEOs, politicians, successful career men and women, the zeal to pursue it against all odds is what makes them who they are today. The fact is the journey to success is not always smooth. The pain, the struggles, the challenges, the disappointments and so much more are enough to make any man quit. Hence, the end goal becomes the focus, the zeal becomes the driver driving you through the rough road to your destination. &lt;/p&gt;

&lt;p&gt;But what happens when you lose that zeal? Well, it’s okay to be tired, weary, disappointed, and discouraged. It’s all part of human nature and even machines that tend to work like a clock sometimes require reignition once the power is turned off.  The good news is you can restore your passion. You can power your tenacity, that zeal can be reignited. &lt;a href="https://dev.to/jacquelinenagle"&gt;Jacqueline Nagle&lt;/a&gt;,  a passionate mentor, strategist and speaker is here to help you power up and remind you of how it all started. She shares these powerful tools to help you reignite your zeal. Keep reading!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be grateful&lt;/strong&gt;&lt;br&gt;
Be thankful for life, for the people in your life, your achievements- pasts and presents, and all the goodness in your life. Being grateful makes you feel more positive about life, it relishes good experiences, and builds your mental and emotional health. When you are in a positive mood, even mountains that seem difficult to climb will be far easier for you. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;See mistakes as a teacher&lt;/strong&gt;&lt;br&gt;
So far you are progressing, mistakes are bound to happen. Expect them, learn from and move on. Easier said than done right? Well, mistakes are not really pleasant, but when you see them as the best teachers, you wouldn’t dwell too much on them. The point is one doesn’t always learn from success. Learning from others’ mistakes as well is great but when it’s your own mistakes, it hits deeper. However, it’s not the mistakes that matter. It’s how you handle it, what you learn from it, and how you apply that to your life. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay in the present&lt;/strong&gt;&lt;br&gt;
“Enough of mind wandering. Enough of always being on your phone and keeping up with others living on social media. Enough of worries and anxieties. These are what steal you of your moments, your presents and it all looks like you aren’t living at all, “Jacqueline Nagle advises. Although this might be difficult especially when you have a lot of things on your to-do lists, however, there are many benefits to this. You get to increase your focus, improve your memory and promote emotional health. Plus, if you’re caught up in all of these, it’s hard to get anything done. Caught out all distractions, take a deep breath, be mindful of your environment and enjoy the moment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finish what you started&lt;/strong&gt;&lt;br&gt;
Are you a starter or a finisher? You already know the race is for those that finish well and part of being successful is knowing how to finish what you started. If you have a lot of unfinished business i.e, a business you quit along the way, a project you got tired of, a course you never finished, chances are all these might dampen your enthusiasm and kill your zeal. Success breeds success, therefore, never quit anything until you see it to finish. Look at your past, what are the things that make you throw in the towel? How can you avoid them? Then, measure up your progress and get going. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remain focused on your goal&lt;/strong&gt;&lt;br&gt;
Remember the purpose and what drives your passion. Remember what makes you get started in the first place and what you stand to gain when you reach your goal. Constantly remind yourself how great it will be and how you will feel when you get there. All these are enough reasons to get up and get drilling. Why do you start? What will you gain from it? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reward yourself for every win&lt;/strong&gt;&lt;br&gt;
Another thing to do is to break big challenges into chunks. Do it and watch your self-motivation increase. However, don’t just stop at that. Pat yourself on the back for every milestone achieved by rewarding yourself. It could be taking yourself out on a date. Reading a book you enjoy or treating yourself to a good spa. In other words, give yourself a good reward for those things you get completed. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be inspired&lt;/strong&gt;&lt;br&gt;
Sometimes, everyone needs motivation and encouragement. The good thing is there are people around you whether online or offline who might have finished the same project that you are currently working on. There are those that can be regarded as &lt;a href="https://www.bncc.com.au/news/news-2018/august2018/featured-member-speakableyou/"&gt;mentors&lt;/a&gt;, who will be more than willing to share their success stories with you. You can also google those that you see as role models to know how they go about it. Read motivational quotes written by successful people. All these are sure to encourage you and get you to rise and put in the energy and enthusiasm you started with. &lt;/p&gt;

&lt;p&gt;These tips provided by Jacqueline Nagle are proven ways for self-motivation that will set you up for success. They will let you push through challenges, difficulties, pains and make it to the end goal. Hence, regularly check yourself to see if you are on the right track. If not, reignite and get your zeal running. The goal is to finish well and strong!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Originally published at &lt;a href="https://getjoys.net/lifestyle/ignite-your-zeal/"&gt;getjoys.net&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>jacquelinenagle</category>
      <category>selfawareness</category>
      <category>selfworth</category>
      <category>passion</category>
    </item>
    <item>
      <title>Infer in TypeScript, the Great and Powerful</title>
      <author>Artem Malko</author>
      <pubDate>Mon, 22 Nov 2021 04:46:17 +0000</pubDate>
      <link>https://dev.to/artemmalko/infer-in-typescript-the-great-and-powerful-5cch</link>
      <guid>https://dev.to/artemmalko/infer-in-typescript-the-great-and-powerful-5cch</guid>
      <description>&lt;p&gt;Let's talk about the &lt;code&gt;infer&lt;/code&gt; keyword in TypeScript. I believe, there're a lot of developers, who've been confused about &lt;code&gt;infer&lt;/code&gt;. When should I use it? How it works? What is the purpose?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_f81DB7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfnn335fcnpvohqi4ape.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_f81DB7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfnn335fcnpvohqi4ape.gif" alt="Confused developer" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start with something easier. The next cases will help us to understand the concept of &lt;code&gt;infer&lt;/code&gt;. Ok, look at the piece of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TypeScript infers a type quite smoothly — it's a number. This fact allows developers to not write such types everywhere. TypeScript takes care of it. By the way, where will be another type in case of &lt;code&gt;const&lt;/code&gt; usage. Try it by yourself. I'm waiting for your explanation in the comments. This is a small interactive with a reader)&lt;/p&gt;

&lt;p&gt;Ok, we've just found out, TypeScript is pretty smart. If a value corresponds to a specific condition, TS can make a decision about its type. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt;&lt;span class="p"&gt;?;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does &lt;code&gt;???&lt;/code&gt; mean?) Meet the &lt;code&gt;never&lt;/code&gt; type. Looks quite useless, who'd like to use it? In TypeScript, &lt;code&gt;never&lt;/code&gt; is treated as the no value type. Do we have any functions, which do not return a value (undefined is a correct value)? By the way, we can create such function. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out the return type of &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Actually, the &lt;code&gt;never&lt;/code&gt; type is not so useless. Let's come back to that example with number. We can use &lt;code&gt;never&lt;/code&gt; in the else condition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// or&lt;/span&gt;

&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, where is no such code in TypeScript's codebase. It's just a model, how TypeScript works. &lt;/p&gt;

&lt;p&gt;And there is an equivalent for if/else in TypeScript. I'm talking about the &lt;code&gt;extends&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;NumberFromType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; 
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; 
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hm, there is something new — &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;. Let's think about it like it is a box for a type. &lt;code&gt;T&lt;/code&gt; can be any type. We will put the type into that box as soon as it will be defined anywhere in your statement. The classic example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you call it like &lt;code&gt;test(10);&lt;/code&gt;, TypeScript will defined &lt;code&gt;T&lt;/code&gt; as &lt;code&gt;number&lt;/code&gt;, cause &lt;code&gt;x&lt;/code&gt; was &lt;code&gt;number&lt;/code&gt;. This is quite simple explanation, I know. But it's enough right now) Ok, we can moving on.&lt;/p&gt;

&lt;p&gt;Let's come back to &lt;code&gt;NumberFromType&lt;/code&gt;. &lt;code&gt;T extends number&lt;/code&gt; means that it’s safe to assume that a value of type &lt;code&gt;T&lt;/code&gt; is also of type &lt;code&gt;number&lt;/code&gt;. For example, 10 extends &lt;code&gt;number&lt;/code&gt; because &lt;code&gt;let a: number = 10&lt;/code&gt; is type-safe. Hm, what happens, if we pass a string into &lt;code&gt;NumberFromType&amp;lt;T&amp;gt;&lt;/code&gt;? :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NumberFromType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// It will be treated like this:&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;NumberFromType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result, there will be &lt;code&gt;never&lt;/code&gt; in the type &lt;code&gt;A&lt;/code&gt;, cause string is not extended from number. But what if we need to work with strings too? We can put one condition into another. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;StringOrNumberFromType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila, it works for strings and numbers) So, you can go deeper and put more conditions there, for each of type.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-infer-keyword"&gt;
  &lt;/a&gt;
  The infer keyword
&lt;/h2&gt;

&lt;p&gt;Finally we are ready for &lt;code&gt;infer&lt;/code&gt;! First of, the &lt;code&gt;infer&lt;/code&gt; keyword can be used in conditional types only. And there is a really simple explanation — you can not use it anywhere else =) This keyword doesn't have any meanings outside of a conditional type. &lt;/p&gt;

&lt;p&gt;Ok, let's try to pass an array of numbers into &lt;code&gt;NumberFromType&lt;/code&gt;. The result is &lt;code&gt;never&lt;/code&gt;, obviously. An array of numbers is not extended from number. But what if we need to get a type of an array item? It can be something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ArrayItemType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What should go next in that statement? We need to check, that &lt;code&gt;T&lt;/code&gt; is an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ArrayItemType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've just finished the condition, like it was in &lt;code&gt;NumberFromType&lt;/code&gt;. But the main question is not resolved, cause we need a type of the array's item. By the way, we can write a type for array of numbers like &lt;code&gt;number[]&lt;/code&gt; or &lt;code&gt;Array&amp;lt;number&amp;gt;&lt;/code&gt;. Any other type can be inside &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; braces. So, our condition can be written in a such way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ArrayItemType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ITEM_TYPE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;ITEM_TYPE&lt;/span&gt; 
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, it's much better! But &lt;code&gt;ITEM_TYPE&lt;/code&gt; is not defined. It has not been inferred yet. Yes, we need TypeScript to infer the type. We can ask TypeScript to do it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ArrayItemType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;ITEM_TYPE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;ITEM_TYPE&lt;/span&gt; 
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It means, if &lt;code&gt;T&lt;/code&gt; is extended from an &lt;code&gt;Array&lt;/code&gt; type, so, TypeScript, it would be really kind of you, if you will infer the type of &lt;code&gt;T's&lt;/code&gt; item and will return it as a result.&lt;/p&gt;

&lt;p&gt;In general, we can say, that the &lt;code&gt;infer&lt;/code&gt; keyword and conditional typing in TypeScript allows us to take a type and isolate any piece of it for a later usage. &lt;/p&gt;

&lt;p&gt;There are some real life examples. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unpromisify"&gt;
  &lt;/a&gt;
  Unpromisify
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Unpromisify&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt; 
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As it follows from its name, &lt;code&gt;Unpromisify&amp;lt;T&amp;gt;&lt;/code&gt; returns a Promise's result. By the way, if you use TypeScript 4.5 or higher, you can use the built in type &lt;code&gt;Awaited&lt;/code&gt;. There are some examples with &lt;code&gt;Awaited&lt;/code&gt; on &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-5.html#the-awaited-type-and-promise-improvements"&gt;typescriptlang.org&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentprops"&gt;
  &lt;/a&gt;
  ComponentProps
&lt;/h3&gt;

&lt;p&gt;In React, we often need to access prop types of a component. To do that, React offers a utility type for accessing prop types powered by the &lt;code&gt;infer&lt;/code&gt; keyword called &lt;code&gt;ComponentProps&lt;/code&gt;. You can find the full  definition in &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react/index.d.ts#L832"&gt;DefinitelyTyped repository&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ComponentProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IntrinsicElements&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;JSXElementConstructor&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;JSXElementConstructor&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IntrinsicElements&lt;/span&gt;
                &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IntrinsicElements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After checking that &lt;code&gt;T&lt;/code&gt; is a React component (&lt;code&gt;T extends keyof JSX.IntrinsicElements | JSXElementConstructor&amp;lt;any&amp;gt;&lt;/code&gt;), it infers its props and returns them (&lt;code&gt;T extends JSXElementConstructor&amp;lt;infer P&amp;gt; ? P&lt;/code&gt;). And the tail is about a simple React Element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;infer&lt;/code&gt; keyword is a powerful tool that allows us to unwrap and store types from any complex type. It is like a type unboxing. So, there is no any mystery behind this keyword.&lt;/p&gt;

&lt;p&gt;If you want challenge your TypeScript skills, I'd like to recommend you &lt;a href="https://github.com/type-challenges/type-challenges"&gt;type-challenges&lt;/a&gt;. And I'm pretty sure, this post will be really useful. Enjoy)&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript Tips to Improve Your Webpage Performance</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Mon, 22 Nov 2021 04:45:16 +0000</pubDate>
      <link>https://dev.to/abstract/javascript-tips-to-improve-your-webpage-performance-h26</link>
      <guid>https://dev.to/abstract/javascript-tips-to-improve-your-webpage-performance-h26</guid>
      <description>&lt;p&gt;One of the most important things, when you're building a website, is ensuring its good performance. When people visit your webpage, they don't want to wait for 10 minutes until the page (and all the images) load. In a survey, it was found that 47% of visitors expect a website to load in less than 2 seconds and 40% of visitors leave the website if it takes more than 3 seconds to load.&lt;br&gt;
Many sites are built on JavaScript and improving performance isn't one of the easiest tasks. However, I'll show you some effective ways to do it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-local-variables"&gt;
  &lt;/a&gt;
  1. Local Variables
&lt;/h2&gt;

&lt;p&gt;Whenever you call a certain function, the variables that are used to define that function are stored inside. Variables can be categorized into two types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Local variables- Variables that are defined only within themselves.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Global variables - Variables that are used throughout the script.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the time when you're calling a function, the browser does an activity that is termed as scope lookup. With the increase in the number of scopes in the scope chain, there's also an increase in the amount of time taken to access variables that are outside the current scope.&lt;/p&gt;

&lt;p&gt;That's the reason why an engine takes a long time to access a global variable as compared to a local variable. This means that if you define most of the variables locally, then there will be a rapid decrease in the time required by the engine to search them. Hence, it will boost the overall speed of the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-webpack"&gt;
  &lt;/a&gt;
  2. Webpack
&lt;/h2&gt;

&lt;p&gt;When the size of your file increases by adding new JavaScript modules or scripts respectively, your code just gets slower and slower.&lt;/p&gt;

&lt;p&gt;Webpack is an open-source JavaScript module bundler. It is made primarily for JavaScript. Webpack creates the dependency graph using the existing module. Webpack explores the packages and creates a new package with a minimum number of files that are required to run the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-location"&gt;
  &lt;/a&gt;
  3. Location
&lt;/h2&gt;

&lt;p&gt;One of the simplest and easiest ways to improve your performance is to move your JavaScript code to the bottom of the page. Because when your page first loads, it needs texts, images, etc, and only then will it need to execute the JavaScript code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-gzip-compression"&gt;
  &lt;/a&gt;
  4. Gzip Compression
&lt;/h2&gt;

&lt;p&gt;JavaScript files can be very large and that may impact the loading time of your website. Gzip is a software that can be used to compress your JavaScript file.&lt;br&gt;
When a browser requests a resource, the server compresses the response before sending it to the web browser. This software reduces the size of the JavaScript file, saves bandwidth, and accelerates the performance of the website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-javascript-cache%C2%A0api"&gt;
  &lt;/a&gt;
  5. JavaScript Cache API
&lt;/h2&gt;

&lt;p&gt;The second method to increase the performance of your site is to use cache in your browser. When your browser launches your code, it repeatedly opens the same script again. If you use your cache right, it will open the already saved script the next time and the performance will improve immediately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-acces-to%C2%A0dom"&gt;
  &lt;/a&gt;
  6. Acces to DOM
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;DOM (Document Object Model)&lt;/em&gt;&lt;/strong&gt; is an object-oriented representation of the web page, which can be modified with a scripting language such as JavaScript. The browser has to refresh the page whenever you interact with the DOM outside the JavaScript native environment. It's good to keep DOM access to a minimum or in your web application.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I tried to find the best ways to improve the performance of your webpage with JavaScript tips. I've been using some of these myself for over a year. And I just want you to remember that people love it when there are no lags and bugs on the webpage they're opening. And this too is an important thing.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>Free React Responisve Restaurant Website Design using Styled Components with ScrollReveal Animations🥗</title>
      <author>Kishan Sheth</author>
      <pubDate>Mon, 22 Nov 2021 04:06:51 +0000</pubDate>
      <link>https://dev.to/koolkishan/free-react-responisve-restaurant-website-design-using-styled-components-with-scrollreveal-animations-24oc</link>
      <guid>https://dev.to/koolkishan/free-react-responisve-restaurant-website-design-using-styled-components-with-scrollreveal-animations-24oc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#you-can-get-the-template-from-the-link-proivided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  You can get the template from the link proivided in the description of the video.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#technologies-used-"&gt;
  &lt;/a&gt;
  Technologies Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Styled Components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#libraries-and-assets-used-"&gt;
  &lt;/a&gt;
  Libraries and Assets Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;React Icons&lt;/li&gt;
&lt;li&gt;Scroll Reveal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#to-learn-how-to-create-this-template-watch-the-complete-video-you-can-get-the-template-for-free-from-the-link-provided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  To learn how to create this template watch the complete video. You can get the template for free from the link provided in the description of the video.
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/eOV2tx1aJZA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-do-like-the-video-and-subscribe-to-the-channel-it-helps-and-motivates-me-to-create-more-content-like-this"&gt;
  &lt;/a&gt;
  Please do like the video and subscribe to the channel. It helps and motivates me to create more content like this.
&lt;/h2&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>angular</category>
    </item>
    <item>
      <title>Level up your GitHub with GitHub Actions and Kubernetes, with Sr. Principle Dev from Red Hat </title>
      <author>Saurabh Rai</author>
      <pubDate>Mon, 22 Nov 2021 03:26:03 +0000</pubDate>
      <link>https://dev.to/srbhr/level-up-your-github-with-github-actions-and-kubernetes-with-srprinciple-dev-from-red-hat-5d6h</link>
      <guid>https://dev.to/srbhr/level-up-your-github-with-github-actions-and-kubernetes-with-srprinciple-dev-from-red-hat-5d6h</guid>
      <description>&lt;h1&gt;
  &lt;a href="#watch-senior-principle-developer-karan-singh-talk-about-the-recipe-to-level-up-your-software-skills-at-git-commit-show-live-with-qampa"&gt;
  &lt;/a&gt;
  Watch Senior Principle Developer Karan Singh talk about the recipe to level up your software skills at Git Commit Show LIVE with Q&amp;amp;A!
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Automate your workflow from idea to production.&lt;/em&gt;&lt;/strong&gt; This is the tagline of GitHub Actions, with an increasing complexity in software toolchain, GitHub Action's Pipeline has helped a lot in automating a lot of stuff... It makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want.&lt;/p&gt;

&lt;p&gt;We bring an expert in this field from an Amazing Open Source organization, "Red Hat" to come up with an amazing masterclass session on GitHub Actions and DevOps. Where you can watch as well as have a live chat, face-to-face with the author to ask questions as well. &lt;/p&gt;

&lt;p&gt;Join Git Commit Show for ✳&lt;strong&gt;FREE&lt;/strong&gt;❇ here: &lt;a href="http://push.gitcommit.show/"&gt;&lt;em&gt;Link&lt;/em&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Karan Singh is a &lt;strong&gt;Senior Principal Architect &amp;amp; Developer Evangelist at Red Hat&lt;/strong&gt;. In his role, Karan focuses on architecting and developing cloud-native composable solutions on Kubernetes. Part of his responsibilities is to enable developers and builders with rapidly changing cloud-native technologies. &lt;/p&gt;

&lt;p&gt;He holds a strong background in infrastructure, SRE, DevOps, data services, and data analytics and is also specialized in designing and building scalable and cloud-native distributed &amp;amp; event-driven systems while believing that better software deserves better architecture. &lt;/p&gt;

&lt;p&gt;He is also a published author, a frequent speaker at conferences, and an avid blogger at &lt;a href="https://ksingh7.medium.com"&gt;https://ksingh7.medium.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fQTGo_i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8agzn6mb9kzx04u190tz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fQTGo_i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8agzn6mb9kzx04u190tz.png" alt="Git Commit Show Masterclass" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;
Join Git Commit Show for ✳&lt;strong&gt;FREE&lt;/strong&gt;❇ here: &lt;a href="http://push.gitcommit.show/"&gt;&lt;em&gt;Link&lt;/em&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Also we have a Discord Server: &lt;a href="https://discord.gg/JFWP8c2gPG"&gt;&lt;em&gt;Link&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>github</category>
      <category>docker</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>React Mock Interview </title>
      <author>Oscar Ore</author>
      <pubDate>Mon, 22 Nov 2021 03:13:41 +0000</pubDate>
      <link>https://dev.to/oscarore007/react-mock-interview-4a2h</link>
      <guid>https://dev.to/oscarore007/react-mock-interview-4a2h</guid>
      <description>&lt;p&gt;Interviews are always a nerve-wracking thing to do! You spend hours upon hours studying Data Structures and Algorithms, Youtube top programming interview questions and answers, and think of all of the possible questions the interviewer can ask you. &lt;/p&gt;

&lt;p&gt;Thanks to Flatiron School, I was able to prepare for a mock interview to go through these same trials and tribulations as my peers. I am writing this blog post to encourage my fellow aspiring software developers to take every interview opportunity that you can, because just like programming, practice makes perfect. Here is how my mock interview went.&lt;/p&gt;

&lt;p&gt;1) The Meet - n - Greet &lt;br&gt;
During the first 10-15 minutes of my mock interview, I introduced myself to my interviewer and told him my story of becoming a software developer. This was a key point for me in my interview process because I can demonstrate my soft skills and how my previous work experience as a sales rep in the tech world can benefit my transition to a developer position. Focus on your strong points, and really show your passion for software development and eagerness to learn. In other words, SELL YOURSELF! &lt;/p&gt;

&lt;p&gt;2) Technical Q&amp;amp;A&lt;br&gt;&lt;br&gt;
During the technical Q&amp;amp;A portion of my interview, I was asked a handful of React questions. Here were some of the questions that I was asked:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is React? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are the differences between functional and class components?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the virtual DOM? How does react use the virtual DOM to render what the user sees? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explain React state and props.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is prop drilling in React?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure that your answers are clear and straight to the point. The interviewer told me the worst thing a candidate can do is ramble on about a topic that does not relate to the questions at hand. Simply say, " I do not know the answer to the question". Now here is where you can differentiate yourself: don't be afraid to ask questions! These are the times that interviewers want to know how you think. &lt;/p&gt;

&lt;p&gt;3) Live Coding &lt;/p&gt;

&lt;p&gt;My live coding challenge was to build the following:&lt;br&gt;
Build a React Component that displays the given data&lt;br&gt;
with the functionality of sorting that data and adding rows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "./styles.css";
import Row from "./row";
import React, { useState } from "react";

// Build a React Component that displays the given data
// with the functionality of sorting that data and adding rows.

const DATA = [
  { id: 0, name: "John", email: "john@gmail.com" },
  { id: 1, name: "Jane", email: "jane@gmail.com" },
  { id: 2, name: "Joe", email: "joe@gmail.com" }
];

export default function App() {
  const [name, SetName] = useState("");
  const [users, SetUsers] = useState(DATA);

  const handleChange = (event) =&amp;gt; {
    SetName(event.target.value);
  };

  const handleSubmit = (event) =&amp;gt; {
    const newUser = {
      id: users.length,
      name: name,
      email: `${name}@gmail.com`
    };
    SetUsers([...users, newUser]);
  };


  return (
    &amp;lt;div className="App"&amp;gt;
      {users.map((user) =&amp;gt; (
        &amp;lt;Row key={user.id} name={user.name} email={user.email} /&amp;gt;
      ))}
      &amp;lt;input type="text" value={name} onChange={handleChange} /&amp;gt;
      &amp;lt;button onClick={handleSubmit}&amp;gt; Push Here! &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, here is what my row.js folder looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

function Row(props) {
  return (
    &amp;lt;h1&amp;gt;
      {props.name}, {props.email}
    &amp;lt;/h1&amp;gt;
  );
}

export default Row;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the user has to do is enter their name, and that would autogenerate a gmail account for the user. This is taken care of by the handleSubmit method above. After time was up, my instructor encouraged me to add on the ability to edit and delete users as well. &lt;/p&gt;

&lt;p&gt;Stay tuned for more! &lt;/p&gt;

&lt;p&gt;Happy Coding! &lt;/p&gt;

</description>
      <category>react</category>
      <category>interview</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Frontend Challenge #6, Social Proof Component</title>
      <author>JC Smiley</author>
      <pubDate>Mon, 22 Nov 2021 01:38:45 +0000</pubDate>
      <link>https://dev.to/jcsmileyjr/frontend-challenge-6-social-proof-component-25e</link>
      <guid>https://dev.to/jcsmileyjr/frontend-challenge-6-social-proof-component-25e</guid>
      <description>&lt;p&gt;Let me describe my coding journey to build a Social Proof component from &lt;a href="https://www.frontendmentor.io/home"&gt;Frontend Mentors&lt;/a&gt;. Frontend Mentors is a online platform that provide front-end challenges that include professional web designs.&lt;/p&gt;

&lt;p&gt;The goal is to build this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fK0hg8p0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq0rfuw0yz4tfx4ai2yu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fK0hg8p0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq0rfuw0yz4tfx4ai2yu.jpg" alt="social proof desktop preview" width="880" height="645"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-initial-layout-responsive-design"&gt;
  &lt;/a&gt;
  Step 1: Initial Layout Responsive Design
&lt;/h2&gt;

&lt;p&gt;The first coding hurdle was setting up the HTML &amp;amp; CSS to create the initial layout and then testing if it flowed decently between mobile and desktop as intended. &lt;/p&gt;

&lt;p&gt;My first decision was deciding between CSS Grid, Flexbox, or a combination of the two. Looking at the given design, the different regions of content had a natural flow from mobile to desktop. So, I only need Flexbox. If the layout had massive changes  or swap places, then CSS Grid would have been a better tool&lt;/p&gt;

&lt;p&gt;My tip to anyone is use background colors to visually show specific layout areas. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;GIF of responsive layout&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---9YdInh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyfkvlaxtzcilfawpt9t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---9YdInh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyfkvlaxtzcilfawpt9t.gif" alt="GIF of initial layout responsive design testing" width="718" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Screen-shot of the Layout&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s949ztfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fup612adfxovudepbtl9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s949ztfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fup612adfxovudepbtl9.PNG" alt="Screen-shot of the code, layout only" width="613" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-focus-on-content-placement"&gt;
  &lt;/a&gt;
  Step 2: Focus on Content Placement
&lt;/h2&gt;

&lt;p&gt;The next step was to slowly add in all content with relevant HTML tags, no styling. The idea is to purely focus on content placement and using the right HTML tags.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Screen shot of app in development, no styling&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9LS-z9up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sidrgh748l49k1zm4rr7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9LS-z9up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sidrgh748l49k1zm4rr7.PNG" alt="Screen shot of content, no style" width="351" height="661"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-add-styles-and-background-images"&gt;
  &lt;/a&gt;
  Step 3: Add styles and background images
&lt;/h2&gt;

&lt;p&gt;Now for the long grind of adding styles to each HTML tag, section by section, while checking every few changes for layout responsiveness. &lt;/p&gt;

&lt;p&gt;The one thing I didn't know how to do was to set multiple background images at the same time. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Screenshot of CSS code for setting multiple background images&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IHu_A2r4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5zhcff4pkvyor76m9u6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IHu_A2r4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5zhcff4pkvyor76m9u6.PNG" alt="CSS Code for background images" width="700" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-outcome"&gt;
  &lt;/a&gt;
  Final Outcome
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjfIANDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/py3jrec3dlvs5rx6bmu3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjfIANDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/py3jrec3dlvs5rx6bmu3.PNG" alt="Final desktop screen-shot" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can play with the solution &lt;a href="https://jcsmileyjr.github.io/Social-Proof/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned"&gt;
  &lt;/a&gt;
  What I learned
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I learned how to add multiple background images at one time. &lt;/li&gt;
&lt;li&gt;I was able to complete this project in a few hours by following a tried and true process: &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Design a responsive layout&lt;/li&gt;
&lt;li&gt;Build a foundation with HTML&lt;/li&gt;
&lt;li&gt;Add content&lt;/li&gt;
&lt;li&gt;Style with CSS, section by section&lt;/li&gt;
&lt;li&gt;End with functionality (JavaScript &amp;amp; CSS animation/transitions)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This "Ground up" methodology kept me focused, minimized bugs, and follow the mantra "Slow is Fast".   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-used"&gt;
  &lt;/a&gt;
  Resources Used
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://css-tricks.com/almanac/properties/b/background-image/"&gt;Tips on Background Images &lt;/a&gt; by CSS Tricks&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading!
&lt;/h2&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect with me on &lt;a href="https://twitter.com/JCSmiley4"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/jcsmileyjr/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find the completed code &lt;a href="https://github.com/jcsmileyjr/Social-Proof"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Tackling a Problem From a Beginner's Perspective</title>
      <author>Robert Duggan</author>
      <pubDate>Mon, 22 Nov 2021 01:16:48 +0000</pubDate>
      <link>https://dev.to/rduggan/tackling-a-problem-from-a-beginners-perspective-ic6</link>
      <guid>https://dev.to/rduggan/tackling-a-problem-from-a-beginners-perspective-ic6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h2&gt;

&lt;p&gt;We often see technical blog posts from experienced developers sharing their insights from years of coding, hardly ever from someone just starting out. The hardest part of beginning a project is actually imagining a project to start, at least for me. So, I sought inspiration from the internet. (codecademy's final project)&lt;/p&gt;

&lt;p&gt;Codecademy's Final Project in python was to create some terminal program. This was my first project completely from scratch. Of the options at codecademy I decided on the blackjack game. Making a blackjack game seemed fairly challenging but within my grasp. So I got to work. BTW, you can find the source code &lt;a href="https://github.com/i-rduggan/blackjack_game/blob/main/blackjack_and_hookers.py"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-i-do-now"&gt;
  &lt;/a&gt;
  What do I do, now?
&lt;/h2&gt;

&lt;p&gt;I began by establishing what I would actually need to play blackjack in real life. That being a deck of cards and some people to play with. I didn't have people to play with so I had to settle for some computer opponents of which I have not implemented any kind of AI for yet. &lt;/p&gt;

&lt;p&gt;To create the players I took an input from the user about how many people were playing. I then created an empty dictionary of players and filled it with players and an empty hand. ({player 1: [], player 2: []})&lt;/p&gt;

&lt;p&gt;I read that blackjack at casinos uses upwards of 6 decks! This is the bulk of the problem that I made for myself. If I had just used 1 deck I could have made it work, but I'm stubborn and wanted to make it as much like the real thing as I could. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-is-where-the-fun-begins"&gt;
  &lt;/a&gt;
  This is where the fun begins!
&lt;/h2&gt;

&lt;p&gt;I started this off by creating an empty list and then filling it with numbers from 1 to 52 * 6 + 1. There may be other ways to do this, but I wanted to pop cards out so I didn't use the same card twice. However, I knew that I wouldn't be able to do anything with any numbers above 52, as that's all that's in a deck. So I created a function to reduce the cards into a usable format to use for later.&lt;/p&gt;

&lt;p&gt;Now that I have my decks and my fake people, I could start working out how to get fake cards into fake people's hands. I did this by using the function I created that reduces the cards input values to 1 - 52 on a random number generated from the length of the cards list - 1, and then pulling it out and appending it to the players dictionary.&lt;/p&gt;

&lt;p&gt;After I got cards into people's hands, I began to work on figuring out just what those cards were (as of right now they are just some number between 1 and 52). My strategy here was to first define the suits, then figure out the faces. It actually took me quite a while to land on a method I liked (the simplest). I just assigned 1 - 13 as diamonds, 14-26 clubs, and so on. As for the face cards, I created a function to reduce the cards given to it to land between 1 and 13, that way I didn't have to have 16 if statements. Although, in retrospect the time I spent making that work was probably much longer than it would have taken to just manually line them out. &lt;/p&gt;

&lt;p&gt;In blackjack, the cards numbered 1 - 10 are worth their respective value, however each face card is worth 10 and the ace is worth 11. All I have right now in the players' hands are 2 numbers between 1 and 52. This isn't helpful. Luckily, I made a function before to reduce my if statements on finding the card faces. I utilized it here to loop through each hand and condense it to a value between 1 and 11 to get added up later to decide the winner.&lt;/p&gt;

&lt;p&gt;Obviously, we would want the user to know what cards are in their hand, otherwise how can they make smart decisions? I created a little function to list the cards from the dictionary, combined with the other functions I made to reduce the values and find the faces, to output to the user what was in their hand. I then gave him the option to hit or to stand.&lt;/p&gt;

&lt;p&gt;If the user selected hit, I pulled another random card from my card list and did my magic to it and put it in the users hand. If the sum of the cards in their hand was greater than 21, I let him know that he lost. Then I rubbed it in his face by telling him who won. By this point, I'd gotten lazy. The user only gets 2 chances to hit, and the computer players aren't making any decisions. I summed everyone up and compared it to the highest known so far and output that to the console. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for coming to my TED talk about spending 4 days on a blackjack game that takes 4 seconds to play.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>Python challenge_11</title>
      <author>Mahmoud EL-kariouny</author>
      <pubDate>Mon, 22 Nov 2021 00:26:05 +0000</pubDate>
      <link>https://dev.to/mahmoudessam/python-challenge11-58d6</link>
      <guid>https://dev.to/mahmoudessam/python-challenge11-58d6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#palindrome"&gt;
  &lt;/a&gt;
  Palindrome
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#level-of-challenge-410"&gt;
  &lt;/a&gt;
  level of challenge 4/10
&lt;/h3&gt;

&lt;p&gt;A string is a palindrome when it is the same &lt;br&gt;
when read backwards.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
the string "bob" is a palindrome So is "abba".&lt;br&gt;
But the string "abcd" is not a palindrome, because "abcd" != "dcba".&lt;/p&gt;

&lt;p&gt;Write a function named palindrome that takes a single string as its parameter.&lt;br&gt;
Your function should return True if the string is a palindrome, and False otherwise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def palindrome(string):
    pal_string = list( string.casefold() )
    rev_string = list( reversed(pal_string) )

    if pal_string == rev_string:
        return True
    else:
        return False

print(palindrome("aba"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#another-solution"&gt;
  &lt;/a&gt;
  Another solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def palindrome(string):
    while len(string) &amp;gt; 1:
      head = string[0]
      tail = string[-1]
      string = string[1:-1]
      if head != tail:
        return False
    return True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def palindrome(string):
  if len(string) &amp;lt; 2:
    return True
  return string[0] == string[-1] and palindrome(string[1:-1])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def palindrome(string):
  return string == string[::-1]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this challenge improve python skills 🧐😎&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>challenge</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Consulting Temperature API with JS</title>
      <author>Walter Nascimento</author>
      <pubDate>Mon, 22 Nov 2021 00:22:44 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/consulting-temperature-api-with-js-4ibg</link>
      <guid>https://dev.to/walternascimentobarroso/consulting-temperature-api-with-js-4ibg</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/consultando-api-de-temperatura-com-js-90f293657e5e"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s make a query for a temperature api using javascript fetch&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;First let’s create the interface, we’ll do something simple, using just HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"city"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"temperature"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To present the data we have a &lt;code&gt;div&lt;/code&gt; with two spans, one to represent the city and the other to represent the temperature.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CITY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TEMPERATURE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;temperature&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URL_MAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.openweathermap.org/data/2.5/weather&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8f57cb746c4c1d4b48b7f35eba6f6230&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UNITS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;metric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCurrentPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loadUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;long&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;URL_MAIN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?lat=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;lon=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;long&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;units=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;UNITS&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;APPID=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;fetchApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;CITY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;TEMPERATURE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ºC`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all you need to be registered on the &lt;a href="https://openweathermap.org/"&gt;openweathermap&lt;/a&gt; site, when you register you will have access to the key so just change the parameters in the js code.&lt;/p&gt;

&lt;p&gt;In the constants we have city, a constant with the span &lt;code&gt;city&lt;/code&gt; element and one with the span &lt;code&gt;temperature&lt;/code&gt; element, then we have three support constants for the query, &lt;code&gt;URL_MAIN&lt;/code&gt; (where the url of the &lt;a href="https://openweathermap.org/"&gt;openweathermap&lt;/a&gt; site is), &lt;code&gt;API_KEY&lt;/code&gt; (where the access key is) and &lt;code&gt;UNITS&lt;/code&gt; (where is the type of unit that will be returned from the api, for more information see the website).&lt;/p&gt;

&lt;p&gt;To start, the browser’s own &lt;code&gt;geolocation&lt;/code&gt; api is called, and with it the &lt;code&gt;loadUrl&lt;/code&gt; function is called.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;loadUrl&lt;/code&gt; function we get the coordinate that came from the &lt;code&gt;geolocation&lt;/code&gt; api and we set the &lt;code&gt;url&lt;/code&gt; to consult the api.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;fetchApi&lt;/code&gt; function a query is made for the &lt;code&gt;url&lt;/code&gt; that was created and when we have the api response it is displayed on the page with the &lt;code&gt;innerText&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ready simple like that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;See below for the complete working project.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/WalterNascimento/embed/vYyZrXj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;if you can't see it &lt;a href="https://codepen.io/WalterNascimento/pen/vYyZrXj"&gt;click here&lt;/a&gt; and see the final result&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  Youtube
&lt;/h2&gt;

&lt;p&gt;If you prefer to watch it, see the development on youtube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FaE0hJRLQ8g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊 See you later! 😊😊&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#support-me"&gt;
  &lt;/a&gt;
  Support Me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCXm0xRtDRrdnvkW24WmkBqA"&gt;Youtube - WalterNascimentoBarroso&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/walternascimentobarroso"&gt;Github - WalterNascimentoBarroso&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codepen.io/walternascimento/"&gt;Codepen - WalterNascimentoBarroso&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>api</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Read this before you start using the multistage builds for your docker images</title>
      <author>Mateusz Cholewka</author>
      <pubDate>Mon, 22 Nov 2021 00:20:37 +0000</pubDate>
      <link>https://dev.to/mtk3d/read-this-before-you-start-using-the-multistage-builds-for-your-docker-images-21e7</link>
      <guid>https://dev.to/mtk3d/read-this-before-you-start-using-the-multistage-builds-for-your-docker-images-21e7</guid>
      <description>&lt;p&gt;In my &lt;a href="https://dev.to/mtk3d/here-are-the-dockerfile-tips-you-can-use-to-get-your-builds-faster-and-safer-4o1a"&gt;last post&lt;/a&gt;, I showed how to refactor the Dockerfile in your project. I didn't want to make the previous post too long, so I didn't touch the multistage builds. Here is the post where I will show you how to improve the Dockerfile even more, using multistage builds. Using stages in your builds is not hard to use, but there are some things where the below knowledge may help you 😃&lt;/p&gt;

&lt;p&gt;Let's take the result of the last article:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7.4.25-fpm&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=composer:2.1.11 /usr/bin/composer /usr/bin/composer&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    libicu-dev&lt;span class="o"&gt;=&lt;/span&gt;67.1-7 &lt;span class="se"&gt;\
&lt;/span&gt;    libgd-dev&lt;span class="o"&gt;=&lt;/span&gt;2.3.0-2 &lt;span class="se"&gt;\
&lt;/span&gt;    libonig-dev&lt;span class="o"&gt;=&lt;/span&gt;6.9.6-1.1 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;unzip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6.0-26 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;docker-php-ext-install &lt;span class="se"&gt;\
&lt;/span&gt;    exif &lt;span class="se"&gt;\
&lt;/span&gt;    gd &lt;span class="se"&gt;\
&lt;/span&gt;    intl &lt;span class="se"&gt;\
&lt;/span&gt;    mbstring &lt;span class="se"&gt;\
&lt;/span&gt;    mysqli &lt;span class="se"&gt;\
&lt;/span&gt;    opcache &lt;span class="se"&gt;\
&lt;/span&gt;    pdo_mysql &lt;span class="se"&gt;\
&lt;/span&gt;    sockets

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; COMPOSER_ALLOW_SUPERUSER 1&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.json .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.lock .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-dev&lt;/span&gt; &lt;span class="nt"&gt;--no-scripts&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer dumpautoload &lt;span class="nt"&gt;--optimize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dont-keep-not-necessary-dependencies"&gt;
  &lt;/a&gt;
  Don't keep not necessary dependencies
&lt;/h2&gt;

&lt;p&gt;Every dependency in your image is potentially the source of vulnerabilities, and you should keep them up to date. So, it's good practice to keep only a minimum of really required dependencies.&lt;br&gt;&lt;br&gt;
So let's try to get rid of the composer from our final image. Composer is required to install our backend dependencies, but it's not required in the runtime of our app. Actually, you shouldn't keep it in your final image, because every change, like for example &lt;code&gt;composer update&lt;/code&gt; is removed after the container restart, so it's presence may be even confusing.&lt;/p&gt;

&lt;p&gt;You can get rid of this dependency using multistage builds:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; composer:2.1.11 AS build&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.json .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.lock .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-dev&lt;/span&gt; &lt;span class="nt"&gt;--no-scripts&lt;/span&gt; &lt;span class="nt"&gt;--ignore-platform-reqs&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer dumpautoload &lt;span class="nt"&gt;--optimize&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7.4.25-fpm&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    libicu-dev&lt;span class="o"&gt;=&lt;/span&gt;67.1-7 &lt;span class="se"&gt;\
&lt;/span&gt;    libgd-dev&lt;span class="o"&gt;=&lt;/span&gt;2.3.0-2 &lt;span class="se"&gt;\
&lt;/span&gt;    libonig-dev&lt;span class="o"&gt;=&lt;/span&gt;6.9.6-1.1 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;unzip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6.0-26 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;docker-php-ext-install &lt;span class="se"&gt;\
&lt;/span&gt;    exif &lt;span class="se"&gt;\
&lt;/span&gt;    gd &lt;span class="se"&gt;\
&lt;/span&gt;    intl &lt;span class="se"&gt;\
&lt;/span&gt;    mbstring &lt;span class="se"&gt;\
&lt;/span&gt;    mysqli &lt;span class="se"&gt;\
&lt;/span&gt;    opcache &lt;span class="se"&gt;\
&lt;/span&gt;    pdo_mysql &lt;span class="se"&gt;\
&lt;/span&gt;    sockets

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=build /app /app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, what happened here? As you can see, I've added a new &lt;code&gt;FROM&lt;/code&gt; instruction before the PHP stage. In this way, we can add multiple stages to our docker image. The &lt;code&gt;AS&lt;/code&gt; word is an alias for our stage, that we can use to refer to it. Referring to the stage is helpful if we need to copy something between stages, or use the previous stage as a base image for another stage.&lt;/p&gt;

&lt;p&gt;In this case, I've added a build stage using a composer image, that will install all my dependencies and generate autoload files of my project. Now, when you start building this image, docker will create the build container first. When the build stage is finished, docker will start building the next stage. For the docker build process, those stages are recognized as different images, so the final image will keep only layers from the latest stage of build.&lt;/p&gt;

&lt;p&gt;Also as you can see, I had added the &lt;code&gt;--ignore-platform-reqs&lt;/code&gt; flag. This flag will allow you to install your dependencies even if you don't have the required PHP extensions installed. Otherwise, compose may stop installing process if some packages require extensions that do not exist in the base composer image.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cache"&gt;
  &lt;/a&gt;
  Cache
&lt;/h2&gt;

&lt;p&gt;As I've explained before, for docker build our stages are like different images. That makes a small problem for the building process that had confused me when I've tried the first time to build this image using cache from the previously built image. When I tried to build this image a few times in CI/CD adding &lt;code&gt;--cache-from&lt;/code&gt; flag, the docker didn't use the cache. On my first time trying to get it working with using cache, I've spent a lot of time debugging the pipeline, I've even looked for problems in my runner. The problem wasn't in my runner, and what's more that's behavior is expected.&lt;/p&gt;

&lt;p&gt;Because the final image keeps only the layers that belong to the target stage (default the latest target), the final image doesn't have layers of different stages than the target. That's obvious when you think about it because that helps you to make your images smaller. It may be confusing when you create the CI/CD pipeline when you probably don't have this thinking in your mind.&lt;/p&gt;

&lt;p&gt;So how to resolve this problem? The goal is to keep all stage layers to use later as a cache. So we need to keep them during the build and then push them to our registry, to be able to get them on the next builds.&lt;br&gt;&lt;br&gt;
To achieve that, we can use the &lt;code&gt;--target&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker pull myimage:latest-build | true
docker pull myimage:latest | true

docker build . --target=build --cache-from=myimage:latest-build -t myimage:latest-build
docker build . --cache-from=myimage:latest-build --cache-from=myimage:latest -t myimage:latest

docker push myimage:latest-build
docker push myimage:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way, our application will always use the cache when building your images if it's available of course.&lt;br&gt;&lt;br&gt;
The first two lines will pull your previous builds images. The &lt;code&gt;... | true&lt;/code&gt; makes that commands always returning the 0 code for shell, even if the image doesn't exist that happens during the very first build. Another return code may stop your pipeline.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#image-for-local-environment"&gt;
  &lt;/a&gt;
  Image for local environment
&lt;/h2&gt;

&lt;p&gt;The next thing that I had a problem with, was creating a single Dockerfile for local and running environments. The answer to my need was just to add another stage in Dockerfile.&lt;/p&gt;

&lt;p&gt;I'm using the docker-compose to create the local development environment to work on my applications. In my case I had two Dockerfiles in my source code. The first of the files was the PHP with all extensions required to run the app. The second one was the runtime image that contains configured PHP same as the previous one, but with my application code installed in it. The PHP with extensions was the common part of both of those images. It's stupid to make the same changes in two separated Dockerfiles like I had to do it.&lt;/p&gt;

&lt;p&gt;There is a way to solve this problem using stages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7.4.25-fpm AS base&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    libicu-dev&lt;span class="o"&gt;=&lt;/span&gt;67.1-7 &lt;span class="se"&gt;\
&lt;/span&gt;    libgd-dev&lt;span class="o"&gt;=&lt;/span&gt;2.3.0-2 &lt;span class="se"&gt;\
&lt;/span&gt;    libonig-dev&lt;span class="o"&gt;=&lt;/span&gt;6.9.6-1.1 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;unzip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6.0-26 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;docker-php-ext-install &lt;span class="se"&gt;\
&lt;/span&gt;    exif &lt;span class="se"&gt;\
&lt;/span&gt;    gd &lt;span class="se"&gt;\
&lt;/span&gt;    intl &lt;span class="se"&gt;\
&lt;/span&gt;    mbstring &lt;span class="se"&gt;\
&lt;/span&gt;    mysqli &lt;span class="se"&gt;\
&lt;/span&gt;    opcache &lt;span class="se"&gt;\
&lt;/span&gt;    pdo_mysql &lt;span class="se"&gt;\
&lt;/span&gt;    sockets

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; composer:2.1.11 AS build&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.json .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.lock .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-dev&lt;/span&gt; &lt;span class="nt"&gt;--no-scripts&lt;/span&gt; &lt;span class="nt"&gt;--ignore-platform-reqs&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer dumpautoload &lt;span class="nt"&gt;--optimize&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; base AS final&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=build /app /app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first change is to move the part that prepares my base PHP image and name this target as &lt;code&gt;base&lt;/code&gt;. The next part is the same as before. The last part is the target created from the &lt;code&gt;base&lt;/code&gt; stage result, named &lt;code&gt;final&lt;/code&gt;, that also copies our application from the &lt;code&gt;build&lt;/code&gt; stage.&lt;br&gt;&lt;br&gt;
Now to build this image for your running environment like production, you need to build the &lt;code&gt;final&lt;/code&gt; stage, which automatically builds all previous stages. For using that Dockerfile in your docker-compose you need to specify which stage you need to run your local environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;web&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;8080:80&lt;/span&gt;

  &lt;span class="na"&gt;php&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile&lt;/span&gt;
      &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;base&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;9000"&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And since now, we have had the same Dockerfile for the local and running environments.&lt;/p&gt;

&lt;p&gt;So that's all what I want to show you in this article.&lt;br&gt;&lt;br&gt;
Have a nice day, and keep taking care of your Dockerfiles 😃&lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://mateuszcholewka.com/post/dockerfile-refactoring/"&gt;mateuszcholewka.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>docker</category>
      <category>php</category>
      <category>dockercompose</category>
    </item>
    <item>
      <title>Chain of Responsibility e ASP.Net Core</title>
      <author>William Santos</author>
      <pubDate>Mon, 22 Nov 2021 00:19:15 +0000</pubDate>
      <link>https://dev.to/wsantosdev/chain-of-responsibility-e-aspnet-core-14hn</link>
      <guid>https://dev.to/wsantosdev/chain-of-responsibility-e-aspnet-core-14hn</guid>
      <description>&lt;p&gt;Olá!&lt;/p&gt;

&lt;p&gt;Este é mais um post da seção &lt;strong&gt;Design&lt;/strong&gt;, e nele vamos tratar de um pattern bastante útil em cenários com múltiplas condições, o Chain of Responsibility (CoR, ou Cadeia de Responsabilidade, em tradução livre). Veremos também como integrá-lo ao container de injeção de dependência do ASP.Net Core.&lt;/p&gt;

&lt;p&gt;Vamos lá!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-problema"&gt;
  &lt;/a&gt;
  O Problema
&lt;/h2&gt;

&lt;p&gt;Antes de mais nada, precisamos entender qual a utilidade do pattern, ou seja, qual problema ele resolve. Patterns são soluções cabíveis para um dado tipo de problema, e com o CoR não é diferente.&lt;/p&gt;

&lt;p&gt;Imagine um cenário onde, para atender a uma dada requisição (ou comando) a satisfação de diversas condições seja necessária e que, para cada condição, pode haver um dado processamento específico a ser realizado ou um tipo de resultado a ser retornado.&lt;/p&gt;

&lt;p&gt;Soa estranho? Explico.&lt;/p&gt;

&lt;p&gt;Vamos imaginar um caixa eletrônico e sua função de saque. Para permitir o saque, o caixa eletrônico precisa validar se há saldo em conta disponível, se há o montante solicitado disponível no compartimento de notas, se há alguma limitação no valor do saque por horário etc.&lt;/p&gt;

&lt;p&gt;Uma implementação ingênua seria mais ou menos assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;Withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Please fill a valid positive amount to withdraw."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_accountRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccountNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HasAmount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"There is not enough balance for this withdraw."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;_billStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HasAmount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"There aren't enough bills for this withdraw."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_withdrawRestrictionService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ShouldRestrictWithdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"The amount informed is greater than allowed at this time."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;_billStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Sucessful withdrawal."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, você pode estar se perguntando: por quê está implementação é ingênua?&lt;/p&gt;

&lt;p&gt;Por dois motivos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Quanto mais condições forem adicionadas à esta operação, maior o método vai se tornar.&lt;/li&gt;
&lt;li&gt;Quanto mais dependências forem necessárias para atender a estas condições, maior será a carga cognitiva para lidar com todas elas.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vejamos a seguir como o CoR pode nos ajudar a lidar com estas questões.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-pattern"&gt;
  &lt;/a&gt;
  O Pattern
&lt;/h2&gt;

&lt;p&gt;O pattern sugere que, para cada condição a ser atendida para uma requisição ou comando, tenhamos um &lt;em&gt;handler&lt;/em&gt;, um tipo responsável por validá-la, e que este contenha uma referência a outro &lt;em&gt;handler&lt;/em&gt;, que será o próximo da cadeia, para encaminhar esta requisição caso não haja razão para interceptá-la e tratá-la.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: neste post, sugiro uma abordagem diferente da canônica para a aplicação do pattern. Um exemplo da abordagem canônica pode ser encontrado no &lt;a href="https://refactoring.guru/design-patterns/chain-of-responsibility/csharp/example"&gt;Refactoring Guru&lt;/a&gt; (em inglês).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Como precisaremos de um &lt;em&gt;handler&lt;/em&gt; para cada condição, e todos estão sujeitos ao mesmo procedimento, ou seja, recebem a mesma requisição e retornam um mesmo tipo de resultado, podemos estabelecer um contrato que represente este comportamento. Vejamos abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;ShouldHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;TResult&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aqui temos dois métodos: um que vai verificar se o &lt;em&gt;handler&lt;/em&gt; em questão deve interceptar a requisição recebida; e outro que manipula a requisição de fato, interceptando-a.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: uma abordagem alternativa é tornar os dois métodos assíncronos, em uma segunda interface chamada &lt;em&gt;IAsyncHandler&lt;/em&gt;, e por um bom motivo: nem sempre o que vai determinar se a requisição deve ou não ser interceptada depende da validação de seu próprio estado. Há situações onde uma operação, como um I/O, precisa acontecer para fazer esta verificação e, para estes casos, um método assíncrono é muito bem-vindo!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Com estes dois métodos, atendemos à primeira porção do pattern, que cada handler saiba se é responsável ou não por interceptar e tratar uma dada requisição e, em caso positivo, que a manipule em seguida.&lt;/p&gt;

&lt;p&gt;Agora precisamos atender à segunda porção, precisamos guardar uma referência para o próximo &lt;em&gt;handler&lt;/em&gt;, e garantir que todos os &lt;em&gt;handlers&lt;/em&gt; que implementarmos seguirão a mesma lógica de verificação e manipulação. Para isso, vamos usar uma classe abstrata que implementa nosso contrato:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HandlerBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;HandlerBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_next&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;ShouldHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ShouldHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;HandleCore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt; &lt;span class="nf"&gt;HandleCore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora temos garantido o seguinte comportamento: se a requisição puder ser manipulada pelo &lt;em&gt;handler&lt;/em&gt; atual, ela o será. Caso contrário, será encaminhada ao &lt;em&gt;handler&lt;/em&gt; seguinte.&lt;/p&gt;

&lt;p&gt;Com isso, podemos implementar um &lt;em&gt;handler&lt;/em&gt; para cada condição de nosso método de saque. Vamos a um exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BillStorageHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HandlerBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;BillStorage&lt;/span&gt; &lt;span class="n"&gt;_billStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;BillStorageHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WithdrawHandler&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;BillStorage&lt;/span&gt; &lt;span class="n"&gt;billStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;ShouldHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_billStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HasAmount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt; &lt;span class="nf"&gt;HandleCore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"There aren't enough bills for this withdrawal."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WithdrawHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HandlerBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;BillStorage&lt;/span&gt; &lt;span class="n"&gt;_billStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;WithdrawHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BillStorage&lt;/span&gt; &lt;span class="n"&gt;billStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_billStorage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;billStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;ShouldHandle&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt; &lt;span class="nf"&gt;HandleCore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_billStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successful withdrawal."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repare em dois detalhes importantes na implementação acima: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;O &lt;em&gt;handler&lt;/em&gt; &lt;code&gt;BillStorageHandler&lt;/code&gt; recebe uma instância de &lt;code&gt;WithdrawHandler&lt;/code&gt; em seu construtor, e o guarda como o próximo da cadeia. Este é um detalhe importante porque injetar a interface &lt;code&gt;IHandler&amp;lt;TRequest, TResult&amp;gt;&lt;/code&gt;, ou a classe abstrata &lt;code&gt;HandlerBase&amp;lt;TRequest, TResult&amp;gt;&lt;/code&gt;, além de mais verboso, impede a identificação do próximo &lt;em&gt;handler&lt;/em&gt; da cadeia. Recebendo a especialização por injeção, fica mais claro qual é o próximo passo caso a requisição não deva ser manipulada por este &lt;em&gt;handler&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;O &lt;em&gt;handler&lt;/em&gt; &lt;code&gt;WithdrawalHandler&lt;/code&gt; informa &lt;code&gt;null&lt;/code&gt; como próximo &lt;em&gt;handler&lt;/em&gt; da cadeia, e sempre retorna &lt;code&gt;true&lt;/code&gt; em seu método &lt;code&gt;ShouldHandle&lt;/code&gt;. Isso acontece porque ele é o último nó da cadeia. Fixando o retorno &lt;code&gt;true&lt;/code&gt; em &lt;code&gt;ShouldHandle&lt;/code&gt; há a garantia de que a requisição sempre receberá um tratamento ao final da cadeia.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#inje%C3%A7%C3%A3o-de-depend%C3%AAncia"&gt;
  &lt;/a&gt;
  Injeção de Dependência
&lt;/h2&gt;

&lt;p&gt;Aqui precisamos falar sobre a abordagem canônica do &lt;em&gt;pattern&lt;/em&gt; e o motivo pelo qual ela foi evitada neste post. A abordagem canônica sugere que na interface &lt;code&gt;IHandler&amp;lt;TRequest, TResponse&amp;gt;&lt;/code&gt; haja um método chamado &lt;code&gt;SetNext&lt;/code&gt;, onde seria passada por parâmetro a instância do próximo &lt;em&gt;handler&lt;/em&gt;, permitindo assim a seguinte declaração:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;billStorageHandler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;BillStorageHandler&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt;
&lt;span class="n"&gt;billStorageHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WithdrawHandler&lt;/span&gt;&lt;span class="p"&gt;(...));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O problema com esta abordagem é que a inversão de controle é inviabilizada, e qualquer dependência de quaisquer dos &lt;em&gt;handlers&lt;/em&gt; precisariam ser instanciadas a priori de sua criação, impedindo os ganhos oferecidos pelo contêiner de injeção de dependência.&lt;/p&gt;

&lt;p&gt;Com a abordagem proposta neste post, a declaração se torna bastante simplificada, como o seguinte exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigureServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BillStorage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;BillStorageHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WithdrawalHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: repare que ao registrar o &lt;em&gt;handler&lt;/em&gt; &lt;code&gt;BillStorageHandler&lt;/code&gt; foi informada a interface &lt;code&gt;IHandler&amp;lt;TRequest, TResult&amp;gt;&lt;/code&gt;. Essa declaração, opcional, é uma forma de anonimizar o primeiro &lt;em&gt;handler&lt;/em&gt; na classe onde a cadeia será invocada, se desejado. Desta forma, caso o primeiro &lt;em&gt;handler&lt;/em&gt; da cadeia precise ser substituído, não haverá a necessidade de se modificar a classe que consumirá a cadeia. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Com isso temos todas as nossas dependências registradas e podemos refatorar nosso método de saque:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WithdrawalProcessor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_handler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;WithdrawalProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_handler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt; &lt;span class="nf"&gt;Withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Muito mais simples. Não? Não há mais uma sequência potencialmente infinita de condicionais, as dependências agora são injetadas em cada &lt;em&gt;handler&lt;/em&gt;, deixando nosso processador de requisições mais leve e limpo, e o código foi bastante enxugado, tornando sua compreensão e manutenção mais simples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;O Chain of Responsibility torna muito mais simples lidar com situações que demandam múltiplas condicionais, e que podem, ou não, resumir o fluxo de uma dada requisição ou comando. É um acessório muito útil e que pode ser usado em diversas situações, desde validações a execução de procedimentos.&lt;/p&gt;

&lt;p&gt;Gostou? Me deixe saber pelos comentários ou por minhas redes sociais.&lt;/p&gt;

&lt;p&gt;Muito obrigado pela leitura, e até a próxima!&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>programming</category>
      <category>braziliandevs</category>
    </item>
  </channel>
</rss>
