<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create a Web API with ASP.NET and MongoDB</title>
      <author>Patrick Tshibanda</author>
      <pubDate>Sun, 19 Dec 2021 20:11:55 +0000</pubDate>
      <link>https://dev.to/techwithpat/create-a-web-api-with-aspnet-and-mongodb-1a94</link>
      <guid>https://dev.to/techwithpat/create-a-web-api-with-aspnet-and-mongodb-1a94</guid>
      <description>&lt;p&gt;This video will cover how ASP.NET and MongoDB are used to create a Web API.&lt;/p&gt;

&lt;p&gt;Watch the video here : &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VSsAsA6_-GE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>How to combine SSR and pagination with react-query</title>
      <author>Elisabeth Leonhardt</author>
      <pubDate>Sun, 19 Dec 2021 19:45:00 +0000</pubDate>
      <link>https://dev.to/elisabethleonhardt/how-to-combine-ssr-and-pagination-with-react-query-4ihp</link>
      <guid>https://dev.to/elisabethleonhardt/how-to-combine-ssr-and-pagination-with-react-query-4ihp</guid>
      <description>&lt;p&gt;If you read my latest post about pagination with react query, you might have noticed that everything was client-side rendered. That's fine for some cases, but in others, you might require server-side rendering for better speed or SEO. Today, I want to adapt the code we built last time to set up a server-side rendered pagination with Next.js and react-query:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-setting-up-the-project"&gt;
  &lt;/a&gt;
  1. Setting up the project
&lt;/h2&gt;

&lt;p&gt;To not bore you with a new project setup, we will just modify the code from the previous &lt;a href="https://dev.to/elisabethleonhardt/implementing-pagination-with-nextjs-mui-and-react-query-2ab"&gt;article I wrote&lt;/a&gt;. Go ahead and clone the &lt;a href="https://github.com/elisabeth-leonhardt/react-query-pagination"&gt;repository&lt;/a&gt;: you can inspect the finished code inside the PaginationSSR.js file in the pages directory or you copy the code from PaginationCSR.js inside a new page and follow along.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-evaluating-two-ways-to-obtain-data-on-the-serverside"&gt;
  &lt;/a&gt;
  2. Evaluating two ways to obtain data on the server-side
&lt;/h2&gt;

&lt;p&gt;As detailed in the &lt;a href="https://react-query.tanstack.com/guides/ssr"&gt;react-query docs&lt;/a&gt; on SSR, there are two ways of passing data into your page:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-using-initialdata"&gt;
  &lt;/a&gt;
  a. using initialData
&lt;/h3&gt;

&lt;p&gt;This is very easy: We just fetch the needed data on the server-side and give it to react-query as initalData and we are all set. There are some disadvantages though:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we won't know when exactly the data was fetched, it could be stale already&lt;/li&gt;
&lt;li&gt;react-query won't know what exactly this initialData is. If you pass the data for the first page as initialData on the server-side, react-query will also fetch the same data on the client-side, adding an unnecessary API request. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#b-using-hydration"&gt;
  &lt;/a&gt;
  b. using hydration
&lt;/h3&gt;

&lt;p&gt;The mentioned issues are avoided using hydration, but the setup is a little more complex. However, I want to provide you with a solution that is bulletproof and production-ready, so we will go with option b.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-setting-up-hydration"&gt;
  &lt;/a&gt;
  3. Setting up Hydration
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The first change has to be done in _app.js: We want to create the QueryClient inside of the app instead of outside. We also need to wrap our app inside an additional Hydrate component and pass in the dehydrated state as prop. The result should look like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query/devtools&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Hydrate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Hydrate&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dehydratedState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="nx"&gt;initialIsOpen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ReactQueryDevtools&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Hydrate&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now, if you didn't do it yet, create a new file in the pages folder called paginationSSR.js and copy and paste all the code that is inside paginationCSR.js. Only change the name of the component and verify that everything is working as expected.&lt;/li&gt;
&lt;li&gt;Let's start with the getServerSideProps function: We need to define a new QueryClient and make use of the prefetchQuery function. The result is returned as dehydratedState inside props to our page. Keep in mind that the query we write here has to have the same name and dependency array like the one inside the page component, otherwise, it will be treated as a prefetch for a non-existing query, and its data will be garbage-collected. The resulting code looks like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prefetchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;characters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`https://rickandmortyapi.com/api/character/?page=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dehydratedState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dehydrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We are almost done! There are only some tiny adjustments left. On one hand, you will notice in the react-query devtools that when you enter &lt;code&gt;localhost:3001/paginationSSR?page=14&lt;/code&gt; to go directly to page 14 for example, will also fetch the data for page 1. This happens because our default value for page is set to 1, so it fetches the data for page 1 immediately after rendering. We will fix it like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now you can delete the useEffect hook. Since this page is server-side rendered, it has access to the page parameter immediately.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;last but not least, don't forget to change the base-URL inside the hanldePaginationChange-function. Things can get very confusing when you test the server-side rendering and it suddenly redirects you to the client-side rendered version of the page... 🤦🏼‍♀️
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handlePaginationChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`paginationSSR/?page=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;shallow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#some-additional-comments"&gt;
  &lt;/a&gt;
  some additional comments
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;react-query has some very aggressive defaults for refetching data, which are overkill for the application I am working with. This is why I set &lt;code&gt;refetchonMount&lt;/code&gt; and &lt;code&gt;refetchOnWindowFocus&lt;/code&gt; to false. You will have to evaluate your use case to see whether it's best to leave them activated.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;characters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`https://rickandmortyapi.com/api/character/?page=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;keepPreviousData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;refetchOnMount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;refetchOnWindowFocus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In a real application, it would be best to encapsulate the pagination component together with the grid into a separate component and reuse it, but this is meant to be a playground. However, always take a minute to think about code-reusability to make your future and your colleagues' life's easier. ❤️&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it for today. Feel free to drop any questions in the comments section and have an amazing week!&lt;/p&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is Collaborative IoT?</title>
      <author>Ronald Colyar</author>
      <pubDate>Sun, 19 Dec 2021 19:20:12 +0000</pubDate>
      <link>https://dev.to/ronaldthenerdsuperuser/what-is-collaborative-iot-5b74</link>
      <guid>https://dev.to/ronaldthenerdsuperuser/what-is-collaborative-iot-5b74</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;After building the platform "House-Of-Iot"(HOI) that required users to have direct authentication credentials for the HOI general server, I realized there is no easy way to collaborate with others with less of a risk.&lt;/p&gt;

&lt;p&gt;HOI isn't the only platform that lacks built in minimal risk collaboration. The platform "Home Assistant"(HA) suffers from the same issue as HOI and requires direct access for collaboration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;The solution was to build a system that allows owners of an IoT server to temporarily and safely give others access, with the ability to easily revoke access. Users will join "Rooms", communicate in a clubhouse like environment and yield temporary control over their IoT server. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-makes-this-safer-than-giving-direct-access"&gt;
  &lt;/a&gt;
  What makes this safer than giving direct access?
&lt;/h2&gt;

&lt;p&gt;Direct access means users could directly communicate with a server with no restrictions, possibly even modify settings of the server and mess up the underlying functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#revokinggiving-access"&gt;
  &lt;/a&gt;
  Revoking/Giving access
&lt;/h3&gt;

&lt;p&gt;Users have permission levels when they join a room, each room has an "IoT Board" which is the panel for concurrently controlling multiple IoT servers at once. Once a user with mod permissions spawns a connection to their IoT server, they can give permission to anyone in the room to control it.&lt;/p&gt;

&lt;p&gt;When this user disconnects from collaborative or anything goes wrong with its communication, the user's spawned connection to the IoT server is destroyed along with everyone who had access. &lt;/p&gt;

&lt;p&gt;When this user decides they don't want a specific user to have control anymore, they can revoke access. Revoking access just removes the ability to control a specific spawned IoT server connection.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>react</category>
      <category>algorithms</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Keyless entry (into your remote server)</title>
      <author>gjorgivarelov</author>
      <pubDate>Sun, 19 Dec 2021 19:12:59 +0000</pubDate>
      <link>https://dev.to/gjorgivarelov/keyless-entry-into-your-remote-server-2n0i</link>
      <guid>https://dev.to/gjorgivarelov/keyless-entry-into-your-remote-server-2n0i</guid>
      <description>&lt;p&gt;Most fairly recently built cars come with the feature called "keyless entry": the car would sense the presence of the key fob in  your pocket and lets  you open its door without having to manually unlock that door. In this article, I'll describe how to set up keyless entry to your remote server, so you won't have to type the password every time you try to access that remote server's shell. The process also relies on keys, but these are called ssh keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it all convenience?&lt;/strong&gt;&lt;br&gt;
Sure it is convenient to not have to type passwords to every remote server you need to log in to, but there's more than just convenience, sometimes setting up keyless entry is a requirement. Most obvious example is Ansible. If you plan to use that automation technology, setting up keyless entry is a must for everything else to work. Ansible is agentless, you don't need to install an Ansible-specific agent on the client but you must enable paswordless login.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assumptions&lt;/strong&gt;&lt;br&gt;
I will assume you need to enable passwordless login on the remote server running some UNIX-like operating system (Linux, BSD, MacOS) and that you are using a client to log in that also runs such UNIX-like OS. I will also assume both machines have SSH up and running.&lt;br&gt;
I am deliberately shunning Windows, after 11 versions of it and into the third decade of the 21st century Windows users are still required to install third party software to enable communication via SSH... ?!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The actual commands:&lt;/strong&gt;&lt;br&gt;
It's really simple, providing you already have proper credentials to log in to the remote server and have tested those credentials are valid.&lt;br&gt;
First, create the key to be exchanged on your own server:&lt;br&gt;
    &lt;code&gt;ssh-keygen&lt;/code&gt;&lt;br&gt;
You'll be asked where to put the newly created key, agree with the default location offered. If you don't like the location, now's the chance to enter your own custom location but you'll need to account for that customization later, when you try to use passwordless login.&lt;br&gt;
You'll be also asked to set up a passphrase. For trusted servers, on trusted connections, you can comfortably skip setting up passphrase.&lt;br&gt;
Now that the key to be exchanged is created, it is time to exchange it with the remote server:&lt;br&gt;
    &lt;code&gt;ssh-copy-id user@some.ip.address&lt;/code&gt;&lt;br&gt;
where you swap the "user" with the actual username under which you are logging in onto the remote server and the "some.ip.address" with the actual IP address or the FQDN of the remote server. You'll be asked to enter password for that user on the remote server, and this is the last time you'll be entering that password. Once you enter the password, providing that's the right credential for that user on the remote server, the key is received and stored at the remote server.&lt;br&gt;
You'll now be asked to use SSH to log in to the remote server to verify everything works as expected:&lt;br&gt;
    &lt;code&gt;ssh user@some.ip.address&lt;/code&gt;&lt;br&gt;
and you are logged in, no password asked for! And for the life of that remote server, or at least the key that was exchanged with it, this will remain enabled when you ssh into your remote server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Just a bit of background on using SSH keys for passwordless entry:&lt;/strong&gt;&lt;br&gt;
When you used &lt;code&gt;ssh-keygen&lt;/code&gt;, you actually created two encrypted files using the default RSA cryptosystem: one of those two files is called a public key and the other is called private key. That public key is what is being sent to the remote server. Private key is used to authenticate the public key received. The remote server will, upon receiving that public key from your machine, create its own private key based on the public key it received from you, so now logging in is automated, no need for your intervention with passwords, one machine presents its key, the other verifies the key is trusted and you are admitted in onto the remote server.&lt;br&gt;
One cool thing you may want to try out, now that the passwordless login is set up, is to execute a command on the remote server and receive the feedback from that command on your own terminal. In this example, I'll keep it harmless and execute &lt;code&gt;ls&lt;/code&gt; on the remote server but receive the feedback from that command on my own terminal all the while I am NOT logged in to that remote server:&lt;br&gt;
    &lt;code&gt;ssh user@some.ip.address ls&lt;/code&gt;&lt;br&gt;
and I'll get the contents of the home directory of the remote user "user".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Permissions. Yes, it is important.&lt;/strong&gt;&lt;br&gt;
Those keys that enabled passwordless login are now priced posession, keep them out of reach of malicious users on your own LAN. Recommended permissions on the private key are 600, meaning owner has read/write permissions but no permissions are given to anyone else on that server. Public key's permissions should be a bit more relaxed, having in mind that the remote server needs to read that file- set them to 644 (read/write for the owner, read/execute for the group to which owner belongs and for everyone else). You can always access those keys and verify their permissions, they are stored in your home directory, in the hidden .ssh subdirectory, and the public key is named id_rsa.pub. Use the &lt;code&gt;ls -al&lt;/code&gt; command on .ssh subdirectory to verify permissions on those files.&lt;/p&gt;

&lt;p&gt;Congrats, you just made logging into your remote server far more convenient now onto... Ansible!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>opensource</category>
      <category>linux</category>
      <category>security</category>
    </item>
    <item>
      <title>trust no one</title>
      <author>Volker Schukai</author>
      <pubDate>Sun, 19 Dec 2021 19:11:20 +0000</pubDate>
      <link>https://dev.to/schukai/trust-no-one-1j6n</link>
      <guid>https://dev.to/schukai/trust-no-one-1j6n</guid>
      <description>&lt;p&gt;The Log4j debacle has once again brought into focus an old mantra of web development: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Trust no one! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a developer, you are responsible for the data you retrieve from various sources. Especially for data that comes from a context you can't control.      &lt;/p&gt;

&lt;p&gt;Then, first of all, for data coming through the Web API, but also for data coming from a database or data coming from the file system.&lt;/p&gt;

&lt;p&gt;But if the data ....&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All data must be validated and it must be ensured that these inputs are not malicious. You also never know what will happen to the data later (see Log4j).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Therefore: Validate your data!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.lunasec.io/docs/blog/log4j-zero-day/"&gt;lunasec.io/docs/blog/log4j-zero-day/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://issues.apache.org/jira/browse/LOG4J2-905"&gt;issues.apache.org/jira/browse/LOG4J2-905&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>log4j</category>
      <category>security</category>
      <category>webdev</category>
      <category>http</category>
    </item>
    <item>
      <title>Fast, and feature-rich plugin manager for Zsh</title>
      <author>Salvydas Lukosius</author>
      <pubDate>Sun, 19 Dec 2021 19:01:31 +0000</pubDate>
      <link>https://dev.to/sso/fast-and-feature-rich-plugin-manager-for-zsh-10pp</link>
      <guid>https://dev.to/sso/fast-and-feature-rich-plugin-manager-for-zsh-10pp</guid>
      <description>&lt;h2&gt;
&lt;a href="https://github.com/z-shell/zi"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MzzdUg8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/z-shell/zi/main/docs/images/logo.png" alt="Logo" width="128" height="128"&gt;&lt;/a&gt;
&lt;/h2&gt;


&lt;h3&gt;

&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;❮ &lt;a href="https://github.com/z-shell/zi"&gt;ZI&lt;/a&gt; ❯ is a fast and feature-rich plugin manager for &lt;a href="https://zsh.sourceforge.io/"&gt;Zsh&lt;/a&gt; - &lt;a href="https://en.wikipedia.org/wiki/Unix_shell"&gt;Unix shell&lt;/a&gt;.&lt;/strong&gt; &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Has a &lt;a href="https://github.com/z-shell/zi/wiki/Introduction#turbo-mode-zsh--53"&gt;turbo mode&lt;/a&gt; which yields 50-80% &lt;a href="https://github.com/z-shell/pm-perf-test"&gt;faster&lt;/a&gt; Zsh startup.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow to install &lt;a href="https://rubygems.org/"&gt;RubyGems&lt;/a&gt;, &lt;a href="https://www.npmjs.com/"&gt;Node modules&lt;/a&gt;, &lt;a href="https://crates.io/"&gt;Rust&lt;/a&gt; packages and almost everything from &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supports loading &lt;a href="https://github.com/z-shell/zi/wiki/Introduction#oh-my-zsh-prezto"&gt;Oh My Zsh and Prezto&lt;/a&gt; plugins and libraries, however, the implementation isn't framework-specific and doesn't bloat the plugin manager with such code. See our wiki on how to &lt;a href="https://github.com/z-shell/zi/wiki/Usage#migration"&gt;migrate&lt;/a&gt; from other plugin managers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The dedicated &lt;a href="https://github.com/z-shell/zi/wiki/Packages/"&gt;packages&lt;/a&gt; that offload the user from providing long and complex commands. See the &lt;a href="https://github.com/z-shell"&gt;Z-Shell ZI&lt;/a&gt; organization for a complete list of packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The specialized extensions — called &lt;a href="https://github.com/z-shell/zi/wiki/Annexes/"&gt;annexes&lt;/a&gt; — allow to extend the plugin manager with new commands, URL per-processors (used by e.g.: &lt;a href="https://github.com/z-shell/z-a-readurl"&gt;z-a-readurl&lt;/a&gt; annex), post-install and post-update hooks and much more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The system does not use &lt;code&gt;$FPATH&lt;/code&gt;, loading multiple plugins don't clutter &lt;code&gt;$FPATH&lt;/code&gt; with the same number of entries (e.g. &lt;code&gt;10&lt;/code&gt;, &lt;code&gt;15&lt;/code&gt; or more). Code is immune to &lt;code&gt;KSH_ARRAYS&lt;/code&gt; and other options typically causing compatibility problems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provides &lt;a href="https://github.com/z-shell/zi/wiki/Commands#reports-and-statistics"&gt;reports and statistics&lt;/a&gt; about the plugins, such as describing what &lt;strong&gt;aliases&lt;/strong&gt;, &lt;strong&gt;functions&lt;/strong&gt;, &lt;strong&gt;bindkeys&lt;/strong&gt;, &lt;strong&gt;Zle widgets&lt;/strong&gt;, &lt;strong&gt;zstyles&lt;/strong&gt;, &lt;a href="https://github.com/z-shell/zi/wiki/Introduction#completion-management"&gt;completions&lt;/a&gt;, variables, &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;FPATH&lt;/code&gt; elements a plugin has set up. Allows to quickly &lt;a href="https://github.com/z-shell/zi/wiki/Profiling-plugins"&gt;familiarize&lt;/a&gt; oneself with a new plugin and provides rich and easy-to-digest information that might be helpful on various occasions. supports the unloading of plugins and the ability to list, (un)install, and &lt;strong&gt;selectively disable&lt;/strong&gt;, &lt;strong&gt;enable&lt;/strong&gt; plugin's completions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;New contributor friendly!&lt;br&gt;
GitHub: &lt;a href="https://github.com/z-shell/zi"&gt;z-shell/zi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://asciinema.org/a/QcC3gmoOqIkMdPJ7J9v6hiWGf"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02eAzYVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asciinema.org/a/QcC3gmoOqIkMdPJ7J9v6hiWGf.svg" alt="asciicast" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are looking for support - join us :)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>linux</category>
      <category>tooling</category>
      <category>startup</category>
      <category>opensource</category>
    </item>
    <item>
      <title>My Chingu Experience</title>
      <author>King</author>
      <pubDate>Sun, 19 Dec 2021 18:56:36 +0000</pubDate>
      <link>https://dev.to/flt_s3nyo/my-chingu-experience-1knd</link>
      <guid>https://dev.to/flt_s3nyo/my-chingu-experience-1knd</guid>
      <description>&lt;p&gt;&lt;strong&gt;CHINGU ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I discovered Chingu on from twitter, it is basically a platform for developers and project managers at any level of their journey to gain experience working on real life projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-benefitted-from-chingu"&gt;
  &lt;/a&gt;
  How I benefitted from Chingu
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I learned about Agile methodologies. It is basically the act of dividing the time between the start of your project and its delivery date into sprints of equal duration in which you'll be completing tasks.As a beginner this helped me to break down tasks into user stories (small chunks) making it easier for me to meet my daily and weekly goals bringing my closer to the end of whatever project I am working on as a whole &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to write a good ReadMe file.Before I joined Chingu I didn't know of the importance of writing a good ReadMe file and I learned that through Chingu. Writing a detailed description of how your project works and how to run it and many other details is just as important as the project itself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Working in a team. I had the opportunity to work in team for the first time. I appreciated mastered my git cli commands more, resolving merge conflicts and understanding how the git workflow works. As a new developer, this experience equipped me with enough knowledge to continue to work with a team. It gave me a first hand feel of how work is done in teams. I learned from my colleagues and appreciated the knowledge I gained from them.I learned how to collaborate with other developers. I learned how far good and effective communication can bring out the best in people and can create a conducive environment for discourse.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Networking, In this industry competence goes hand in hand in marketing yourself. Marketing yourself is easier when you have a lot of networks. I appreciated the opportunity I had in meeting new developers from all over the world. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Special thanks to all the members of &lt;strong&gt;toucans-team-03&lt;/strong&gt;&lt;br&gt;
Program manager - Cathy&lt;br&gt;
Developer - Ayman&lt;br&gt;
Developer - Mariam&lt;br&gt;
Developer - Opeoluwa&lt;br&gt;
Developer - Carl (Myself)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>tldr: Remember your commands</title>
      <author>Simon Nyström</author>
      <pubDate>Sun, 19 Dec 2021 18:35:38 +0000</pubDate>
      <link>https://dev.to/simonnystrom/tldr-remember-your-commands-i18</link>
      <guid>https://dev.to/simonnystrom/tldr-remember-your-commands-i18</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-raw-tldr-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;tldr&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;tldr&lt;/code&gt; is an open-source command line tool distributed both via &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;pip3&lt;/code&gt; that lets you easily look up common use cases for various commands.&lt;/p&gt;

&lt;p&gt;Have you ever been in the position where you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forgot how to use the &lt;code&gt;tar&lt;/code&gt; command?&lt;/li&gt;
&lt;li&gt;Forgot how to open an &lt;code&gt;ssh&lt;/code&gt; tunnel?&lt;/li&gt;
&lt;li&gt;Forgot how &lt;code&gt;git rebase&lt;/code&gt; works?&lt;/li&gt;
&lt;li&gt;Forgot how to &lt;code&gt;…&lt;/code&gt; in the terminal?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, I have. &lt;code&gt;tldr&lt;/code&gt; lets you easily look up common uses cases for commands and subcommands. All the &lt;code&gt;tldr&lt;/code&gt; pages are open-source and community driven, and if a command you are trying to use &lt;code&gt;tldr&lt;/code&gt; for is not available, you can always add it yourself to help out both yourself and others.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-do-i-install-it"&gt;
  &lt;/a&gt;
  How do I install it?
&lt;/h2&gt;

&lt;p&gt;To get your hands on &lt;code&gt;tldr&lt;/code&gt;, all you have to do is install it in one of the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install -g tldr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip3 install tldr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, provided the package location is in your path, all you need to do is run &lt;code&gt;tldr git rebase&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;Here's an example of what that might look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X_Zsf-YL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://newcurrent.se/images/tldr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_Zsf-YL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://newcurrent.se/images/tldr.png" alt="tldr_img" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More information
&lt;/h2&gt;

&lt;p&gt;If you have further interest in this, please visit &lt;a href="https://tldr.sh/"&gt;https://tldr.sh/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bash</category>
      <category>productivity</category>
      <category>opensource</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Week 4 of 100DaysOfCode JavaScript Challenge</title>
      <author>Arif Iqbal</author>
      <pubDate>Sun, 19 Dec 2021 17:57:17 +0000</pubDate>
      <link>https://dev.to/arifiqbal/week-4-of-100daysofcode-javascript-challenge-1l1n</link>
      <guid>https://dev.to/arifiqbal/week-4-of-100daysofcode-javascript-challenge-1l1n</guid>
      <description>&lt;p&gt;This week I completed the &lt;em&gt;Regular Expressions&lt;/em&gt; module of the JavaScript course at FreeCodeCamp.org. Here is a recap&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/arifiqbal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tOgluRxT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OBcFBACO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/613678/e8f9f997-5977-4d7d-9110-c87e24bb79e5.jpeg" alt="arifiqbal"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/arifiqbal/regular-expressions-in-javascript-day-18-of-100-4o2e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Regular Expressions in JavaScript - Day 18 of 100&lt;/h2&gt;
      &lt;h3&gt;Arif Iqbal ・ Dec 15 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/arifiqbal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tOgluRxT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OBcFBACO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/613678/e8f9f997-5977-4d7d-9110-c87e24bb79e5.jpeg" alt="arifiqbal"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/arifiqbal/regular-expressions-in-javascript-day-19-of-100-57f6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Regular Expressions in JavaScript - Day 19 of 100&lt;/h2&gt;
      &lt;h3&gt;Arif Iqbal ・ Dec 19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 29: Verilog</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Sun, 19 Dec 2021 17:49:45 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-28-verilog-18jp</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-28-verilog-18jp</guid>
      <description>&lt;p&gt;Hardware design is about evenly split between two languages - Verilog and VHDL. They both have serious issues, and people keep trying to write a better language, and getting little traction.&lt;/p&gt;

&lt;p&gt;Verilog is a lot less verbose than VHDL, so let's do some Verilog.&lt;/p&gt;

&lt;p&gt;We'll specifically be using &lt;a href="http://iverilog.icarus.com/"&gt;Icarus Verilog&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hardware-design"&gt;
  &lt;/a&gt;
  Hardware design
&lt;/h3&gt;

&lt;p&gt;Verilog programs describe hardware. Generally there are no variables, functions, loops, if/elses, or such fancy features, because that's not how hardware works.&lt;/p&gt;

&lt;p&gt;If you've never done any hardware, here's extremely simplified view:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hardware we're designing is a bunch of logic gates (ANDs, ORs, NOTs, XORs etc.) and wires connecting stuff together&lt;/li&gt;
&lt;li&gt;every wire can be connected to any number of places, but only one can output (write) to it, everything else only inputs (reads) from it&lt;/li&gt;
&lt;li&gt;each wire can only have 0 or 1 on it at any given time, so if you need 16-bit number, you need 16 wires, and Verilog conveniently handles such bundles of wires&lt;/li&gt;
&lt;li&gt;some of those wires are connected to the outside of the device (some as inputs, some as outputs)&lt;/li&gt;
&lt;li&gt;there's often one special external wire called a "clock" which keeps going from 0 to 1 and back, and these transitions can be used to synchronize things in our design (that's what "CPU clock" refers to)&lt;/li&gt;
&lt;li&gt;a bunch of gates and wires can be looped together to provide some number of bits of storage - we generally treat that as a "register" and not bother with individual components at Verilog level&lt;/li&gt;
&lt;li&gt;Verilog also has some non-hardware commands to help the simulator, which we'll use for testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you create your hardware in Verilog, you can run it on a simulator - that's what we'll be doing. Or you can export it to run on real hardware, either a FPGA or an ASIC.&lt;/p&gt;

&lt;p&gt;While hardware is mostly designed by huge corporations, this isn't a completely crazy thing to do for a regular person - if some new cryptocoin becomes popular, people will try to design specialized hardware that can mine it faster than CPUs and GPUs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;

&lt;p&gt;As hardware deals with numbers and not text, most of the usual tasks like Hello, World and FizzBuzz don't make much sense in Verilog. So let's start by creating very simple circuit known as "multiplexer", making it 4 bit wide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there's 4 input wires A&lt;/li&gt;
&lt;li&gt;there's 4 input wires B&lt;/li&gt;
&lt;li&gt;there's 1 input wire S&lt;/li&gt;
&lt;li&gt;there's 4 output wires O&lt;/li&gt;
&lt;li&gt;if S=0, then O=A&lt;/li&gt;
&lt;li&gt;if S=1, then O=B&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So basically, it's &lt;code&gt;O = S ? A : B&lt;/code&gt;, except with wires instead of code.&lt;/p&gt;

&lt;p&gt;Multiplexers are everywhere in computer hardware - hardware doesn't really have "if"s, so to do some conditional calculations, it calculates both things, and then selects which one it really wanted with a multiplexer. It might seem like a waste at first, but modern CPUs have tens of billions of transistors.&lt;/p&gt;

&lt;p&gt;Let's write it down:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module mux4bit(A, B, S, O);
  input [3:0] A;
  input [3:0] B;
  input S;
  output [3:0] O;

  wire notS;
  wire [3:0] AX;
  wire [3:0] BX;

  not(notS, S);

  and(AX[0], A[0], notS);
  and(AX[1], A[1], notS);
  and(AX[2], A[2], notS);
  and(AX[3], A[3], notS);

  and(BX[0], B[0], S);
  and(BX[1], B[1], S);
  and(BX[2], B[2], S);
  and(BX[3], B[3], S);

  or(O[0], AX[0], BX[0]);
  or(O[1], AX[1], BX[1]);
  or(O[2], AX[2], BX[2]);
  or(O[3], AX[3], BX[3]);
endmodule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We specify every single logic gate (1x NOT, 8x AND, 4x OR), and every single wire separately, both external, and internal to the component.&lt;/p&gt;

&lt;p&gt;Of course real Verilog doesn't actually use this extremely verbose style, and we'll get to some more concise syntax later.&lt;/p&gt;

&lt;p&gt;Step by step explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;module mux4bit(A, B, S, O);&lt;/code&gt; - start of the module, and list of external wires we'd need to connect if we actually use this module&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;input [3:0] A;&lt;/code&gt; - input wire A, 4 bits wide&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;input S;&lt;/code&gt; - input wire S, 1 bits wide, so we don't need to specify it&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;output [3:0] O;&lt;/code&gt; - output wire O, 4 bits wide&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;wire notS&lt;/code&gt; - internal wire, 1 bit wide&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;wire [3:0] AX&lt;/code&gt; - internal wire, 4 bits wide&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;not(notS, S);&lt;/code&gt; - NOT gate, it takes &lt;code&gt;S&lt;/code&gt; as input, and outputs &lt;code&gt;notS&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;and(AX[0], A[0], notS)&lt;/code&gt; etc. - four AND gates, as a result, &lt;code&gt;AX[i] = A[i] &amp;amp; ~S&lt;/code&gt;, or &lt;code&gt;AX = S ? 0 : A&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;and(BX[0], B[0], S)&lt;/code&gt; etc. - four AND gates, as a result, &lt;code&gt;BX[i] = B[i] &amp;amp; S&lt;/code&gt;, or &lt;code&gt;AX = S ? B : 0&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;or(O[0], AX[0], BX[0])&lt;/code&gt; etc. - four OR gates, as a result &lt;code&gt;O[i] = AX[i] | BX[i]&lt;/code&gt;, or &lt;code&gt;O = AX | BX&lt;/code&gt;, or &lt;code&gt;O = S ? B : A&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we need to write a "test bench". Writing test benches for complex devices is really complicated subject, but we'll do something really trivial here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module mux4bit_tb;
  reg [3:0] A;
  reg [3:0] B;
  reg S;
  wire [3:0] O;

  mux4bit M(A, B, S, O);

  initial begin
    if (!$value$plusargs("A=%d", A)) begin
      $display("ERROR: please specify +A=&amp;lt;value&amp;gt;");
      $finish;
    end

    if (!$value$plusargs("B=%d", B)) begin
      $display("ERROR: please specify +B=&amp;lt;value&amp;gt;");
      $finish;
    end

    S = 0;
    #1;
    $display("A = %d, B = %d, S = %d, O = %d", A, B, S, O);

    S = 1;
    #1;
    $display("A = %d, B = %d, S = %d, O = %d", A, B, S, O);

    $finish;
  end
endmodule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try to use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ iverilog -o mux4bit_tb.vvp mux4bit.v mux4bit_tb.v
% ./mux4bit_tb.vvp +A=7 +B=3
A =  7, B =  3, S = 0, O =  7
A =  7, B =  3, S = 1, O =  3
% ./mux4bit_tb.vvp +A=4 +B=2
A =  4, B =  2, S = 0, O =  4
A =  4, B =  2, S = 1, O =  2
% ./mux4bit_tb.vvp +A=1 +B=6
A =  1, B =  6, S = 0, O =  1
A =  1, B =  6, S = 1, O =  6
% ./mux4bit_tb.vvp +A=2 +B=2
A =  2, B =  2, S = 0, O =  2
A =  2, B =  2, S = 1, O =  2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we compile all the module files together into a &lt;code&gt;vvp&lt;/code&gt; file, then we optionally pass some arguments to the simulation, then simulation does some things.&lt;/p&gt;

&lt;p&gt;Let's go through our test bench code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;reg [3:0] A&lt;/code&gt; - we declare a register, which is like a variable, this one is 4 bit wide&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reg S&lt;/code&gt; - register, 1 bit wide&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mux4bit M(A, B, S, O);&lt;/code&gt; - our component &lt;code&gt;mux4bit_tb&lt;/code&gt; uses another component &lt;code&gt;mux4bit&lt;/code&gt; - to instantiate a component we need to specify what all its inputs and outputs connect to. In this case A, B, and S connect to test bench's register, and O connect to some internal wires.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;initial begin ... end&lt;/code&gt; - normally we'd use it to specify start state of a component, for example that counter starts at &lt;code&gt;0&lt;/code&gt; etc. As this is test bench and not real component, we can put a lot of code there&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(!$value$plusargs("A=%d", A))&lt;/code&gt;, get &lt;code&gt;A&lt;/code&gt; from command line, and return &lt;code&gt;false&lt;/code&gt; if not passed. This starts from &lt;code&gt;$&lt;/code&gt; to mark it as not part of regular hardware stuff.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$display&lt;/code&gt; - basically &lt;code&gt;printf()&lt;/code&gt;, marked with &lt;code&gt;$&lt;/code&gt; to make it clear it's testing command not part of the hardware.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$finish&lt;/code&gt; - end simulation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;S = 0&lt;/code&gt; - assign &lt;code&gt;0&lt;/code&gt; to register &lt;code&gt;S&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#1&lt;/code&gt; wait 1 clock tick - Verilog allows every component to specify how long it takes to recalculate values, so you can simulate complex timing, but we won't be using any such functionality.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$display("A = %d, B = %d, S = %d, O = %d", A, B, S, O);&lt;/code&gt; - print all the inputs and outputs - &lt;code&gt;O&lt;/code&gt; is only calculated because we waited a tick, otherwise it would be empty&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;S = 1&lt;/code&gt; - assign &lt;code&gt;0&lt;/code&gt; to register &lt;code&gt;S&lt;/code&gt; - we waited a tick, so we're not trying to write two different values at the same time (generally a bad idea)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;#1&lt;/code&gt; wait another tick - otherwise &lt;code&gt;O&lt;/code&gt; would still have old value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$display("A = %d, B = %d, S = %d, O = %d", A, B, S, O);&lt;/code&gt; - because we waited, &lt;code&gt;O&lt;/code&gt; is updated now&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully that doesn't sound too crazy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-concise-multiplexer"&gt;
  &lt;/a&gt;
  More concise multiplexer
&lt;/h3&gt;

&lt;p&gt;I showed the first multiplexer in extremely most explicit style, but of course nobody writes this way. Here's 8 bit multiplexer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module mux8bit(A, B, S, O);
  input [7:0] A;
  input [7:0] B;
  input S;
  output [7:0] O;

  assign O = S ? B : A;
endmodule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is pretty much equivalent to the long code. &lt;code&gt;assign O = S ? B : A;&lt;/code&gt; sets up all the wires and logic gates to make this expression work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module mux8bit_tb;
  reg [7:0] A;
  reg [7:0] B;
  reg S;
  wire [7:0] O;

  reg [31:0] i;

  mux8bit M(A, B, S, O);

  initial begin
    $monitor("A=%d B=%d S=%d O=%D", A, B, S, O);

    for (i=0; i&amp;lt;256*256*2; i=i+1) begin
      {A,B,S} = i;
      #1;
    end

    $finish;
  end
endmodule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of passing specific values, we can just tell the test bench to generate every possible value. We could have triple nested &lt;code&gt;for&lt;/code&gt;, but &lt;code&gt;i&lt;/code&gt; contains 8+8+1 bits already (and some extras), so &lt;code&gt;{A,B,S} = i&lt;/code&gt; will assign the right bits of &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;A&lt;/code&gt; (bits 16 to 9), &lt;code&gt;B&lt;/code&gt; (bits 8 to 1) and &lt;code&gt;S&lt;/code&gt; (bit 0).&lt;/p&gt;

&lt;p&gt;We can either check every value, or just get a random sample (&lt;a href="https://github.com/taw/unix-utilities"&gt;&lt;code&gt;randsample&lt;/code&gt; from &lt;code&gt;unix-utilities&lt;/code&gt; collection&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ iverilog -o mux8bit_tb.vvp mux8bit.v mux8bit_tb.v
$ ./mux8bit_tb.vvp | randsample 20
I=     15911, A= 31 B= 19 S=1 O= 19
I=    113470, A=221 B=159 S=0 O=221
I=     28346, A= 55 B= 93 S=0 O= 55
I=     18224, A= 35 B=152 S=0 O= 35
I=     84536, A=165 B= 28 S=0 O=165
I=     28159, A= 54 B=255 S=1 O=255
I=    123640, A=241 B=124 S=0 O=241
I=     15950, A= 31 B= 39 S=0 O= 31
I=     50381, A= 98 B=102 S=1 O=102
I=     33082, A= 64 B=157 S=0 O= 64
I=     77032, A=150 B=116 S=0 O=150
I=     52870, A=103 B= 67 S=0 O=103
I=     63252, A=123 B=138 S=0 O=123
I=     59551, A=116 B= 79 S=1 O= 79
I=    104170, A=203 B=117 S=0 O=203
I=    126954, A=247 B=245 S=0 O=247
I=    130665, A=255 B= 52 S=1 O= 52
I=     14603, A= 28 B=133 S=1 O=133
I=    118586, A=231 B=157 S=0 O=231
I=     82511, A=161 B= 39 S=1 O= 39
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;$monitor&lt;/code&gt; displays the value whenever any of its arguments change, so we don't need to do &lt;code&gt;$display&lt;/code&gt; in the loop, we can just set it up once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#odd-even"&gt;
  &lt;/a&gt;
  Odd Even
&lt;/h3&gt;

&lt;p&gt;Here's a very simple module that checks if 16-bit number passed is odd or even. It can just check the lowest bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module oddeven(A, O);
  input [15:0] A;
  output O;

  assign O = A[0];
endmodule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more complex component, testing every possible value is not really practical. One common approach is random testing, so let's give it a try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module oddeven_tb;
  reg [15:0] A;
  wire O;

  reg [31:0] i;

  oddeven OE(A, O);

  initial begin
    $monitor("A=%d O=%d", A, O);

    for (i=0; i&amp;lt;20; i=i+1) begin
      A = $random;
      #1;
    end

    $finish;
  end
endmodule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which we can run with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ iverilog -o oddeven.vvp oddeven.v oddeven_tb.v
$ ./oddeven.vvp
A=13604 O=0
A=24193 O=1
A=54793 O=1
A=22115 O=1
A=31501 O=1
A=39309 O=1
A=33893 O=1
A=21010 O=0
A=58113 O=1
A=52493 O=1
A=61814 O=0
A=52541 O=1
A=22509 O=1
A=63372 O=0
A=59897 O=1
A= 9414 O=0
A=33989 O=1
A=53930 O=0
A=63461 O=1
A=29303 O=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modulo-math"&gt;
  &lt;/a&gt;
  Modulo math
&lt;/h3&gt;

&lt;p&gt;Before we get to the FizzBuzz, we need to figure out how we can handle divisibility by 3 and 5, without adding hardware division module to the design, as they take huge number of transistors.&lt;/p&gt;

&lt;p&gt;Here are basic mathematical facts about modulo operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(A + B) % M = ((A % M) + (B % M)) % M&lt;/li&gt;
&lt;li&gt;(A * B) % M = ((A % M) * (B % M)) % M&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, what does it have to do with anything?&lt;/p&gt;

&lt;p&gt;It can be used for a clever algorithm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for 1-bit number A, we know what it is modulo 3 or 5 - it's just always A (1 or 0)&lt;/li&gt;
&lt;li&gt;so by induction, let's say we have an algorithm for calculating what N-bit numbers modulo M are, and we want to use it to implement 2N-bit numbers&lt;/li&gt;
&lt;li&gt;let's say 2N-bit number is &lt;code&gt;(A * 2^N) + B&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;we can precompute &lt;code&gt;(2^N mod M)&lt;/code&gt; as it's a constant&lt;/li&gt;
&lt;li&gt;we know &lt;code&gt;(A % M)&lt;/code&gt; (from small scale algorithm) and &lt;code&gt;(2^N mod M)&lt;/code&gt; (as it's a constant), we can then use M*M size table to calculate &lt;code&gt;(A * 2^N) % M&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;we know &lt;code&gt;(A * 2^N) % M&lt;/code&gt; (from previous step) and &lt;code&gt;B mod M&lt;/code&gt; (from small scale algorithm), we can then use M*M size table to calculate &lt;code&gt;(A * 2^N) + B&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#modulo-3-component"&gt;
  &lt;/a&gt;
  Modulo 3 Component
&lt;/h3&gt;

&lt;p&gt;We're going to have a lot of components, each with 3 wires out, indicating if division by 3 gives 0, 1, or 2.&lt;/p&gt;

&lt;p&gt;Each component is in file corresponding to its name, I'll just list them all together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module mod3_32bit(A, Mod);
  input [31:0] A;
  output [2:0] Mod;

  wire [2:0] ModHi;
  wire [2:0] ModLow;

  mod3_16bit Hi(A[31:16], ModHi);
  mod3_16bit Low(A[15:0], ModLow);

  // No need to do shift as (2**16) % 3 == 1
  mod3_add Add(ModHi, ModLow, Mod);
endmodule

module mod3_16bit(A, Mod);
  input [15:0] A;
  output [2:0] Mod;

  wire [2:0] ModHi;
  wire [2:0] ModLow;

  mod3_8bit Hi(A[15:8], ModHi);
  mod3_8bit Low(A[7:0], ModLow);

  // No need to do shift as (2**8) % 3 == 1
  mod3_add Add(ModHi, ModLow, Mod);
endmodule

module mod3_8bit(A, Mod);
  input [7:0] A;
  output [2:0] Mod;

  wire [2:0] ModHi;
  wire [2:0] ModLow;

  mod3_4bit Hi(A[7:4], ModHi);
  mod3_4bit Low(A[3:0], ModLow);

  // No need to do shift as (2**4) % 3 == 1
  mod3_add Add(ModHi, ModLow, Mod);
endmodule

module mod3_4bit(A, Mod);
  input [3:0] A;
  output [2:0] Mod;

  wire [2:0] ModHi;
  wire [2:0] ModLow;

  mod3_2bit Hi(A[3:2], ModHi);
  mod3_2bit Low(A[1:0], ModLow);

  // No need to do shift as (2**2) % 3 == 1
  mod3_add Add(ModHi, ModLow, Mod);
endmodule

module mod3_2bit(A, Mod);
  input [1:0] A;
  output [2:0] Mod;
  // 2      =&amp;gt; 2 mod 3
  assign Mod[2] = A[1] &amp;amp; ~A[0];
  // 1      =&amp;gt; 1 mod 3
  assign Mod[1] = ~A[1] &amp;amp; A[0];
  // 0 or 3 =&amp;gt; 0 mod 3
  assign Mod[0] = (~A[0] &amp;amp; ~A[1]) | (A[0] &amp;amp; A[1]);
endmodule

module mod3_add(ModA, ModB, ModOut);
  input [2:0] ModA;
  input [2:0] ModB;
  output [2:0] ModOut;

  // 0 + 0 = 0 =&amp;gt; 0
  // 1 + 2 = 3 =&amp;gt; 0
  // 2 + 1 = 3 =&amp;gt; 0
  assign ModOut[0] = (ModA[0] &amp;amp; ModB[0]) | (ModA[1] &amp;amp; ModB[2]) | (ModA[2] &amp;amp; ModB[1]);

  // 0 + 1 = 1 =&amp;gt; 1
  // 1 + 0 = 1 =&amp;gt; 1
  // 2 + 2 = 4 =&amp;gt; 1
  assign ModOut[1] = (ModA[0] &amp;amp; ModB[1]) | (ModA[1] &amp;amp; ModB[0]) | (ModA[2] &amp;amp; ModB[2]);

  // 0 + 2 = 2 =&amp;gt; 2
  // 2 + 0 = 2 =&amp;gt; 2
  // 1 + 1 = 2 =&amp;gt; 2
  assign ModOut[2] = (ModA[0] &amp;amp; ModB[2]) | (ModA[2] &amp;amp; ModB[0]) | (ModA[1] &amp;amp; ModB[1]);
endmodule

module mod3_tb;
  reg [31:0] A;
  wire [2:0] Mod;

  reg [31:0] i;

  mod3_32bit M(A, Mod);

  initial begin
    $monitor("A=%d O[0]=%d O[1]=%d O[2]=%d", A, Mod[0], Mod[1], Mod[2]);

    for (i=0; i&amp;lt;20; i=i+1) begin
      A = $random;
      #1;
    end

    $finish;
  end
endmodule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a lot of code, but it's really not much new:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;mod3_tb&lt;/code&gt; is same test bench we used for Odd Even, just with different print&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mod3_32bit&lt;/code&gt;, &lt;code&gt;mod3_16bit&lt;/code&gt;, &lt;code&gt;mod3_8bit&lt;/code&gt;, and &lt;code&gt;mod3_4bit&lt;/code&gt; all just setup 2 smaller modules, then add their results together&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mod3_2bit&lt;/code&gt; could do that with &lt;code&gt;mod3_1bit&lt;/code&gt;, but it just calculates the outputs with some logic gates&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mod3_add&lt;/code&gt; takes two remainders, and returns their sum (with each wire being potential remainder)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, this recursion might need to do some bit reshuffling, but as it so happens, for division by 3 we don't have to do anything (&lt;code&gt;mod3_2bit&lt;/code&gt; would need to do reshuffling step, if we implemented it the same as others).&lt;/p&gt;

&lt;p&gt;We can now run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./mod3_tp.vvp
A= 303379748 O[0]=0 O[1]=0 O[2]=1
A=3230228097 O[0]=1 O[1]=0 O[2]=0
A=2223298057 O[0]=0 O[1]=1 O[2]=0
A=2985317987 O[0]=0 O[1]=0 O[2]=1
A= 112818957 O[0]=1 O[1]=0 O[2]=0
A=1189058957 O[0]=0 O[1]=0 O[2]=1
A=2999092325 O[0]=0 O[1]=0 O[2]=1
A=2302104082 O[0]=0 O[1]=1 O[2]=0
A=  15983361 O[0]=1 O[1]=0 O[2]=0
A= 114806029 O[0]=0 O[1]=1 O[2]=0
A= 992211318 O[0]=1 O[1]=0 O[2]=0
A= 512609597 O[0]=0 O[1]=0 O[2]=1
A=1993627629 O[0]=1 O[1]=0 O[2]=0
A=1177417612 O[0]=0 O[1]=1 O[2]=0
A=2097015289 O[0]=0 O[1]=1 O[2]=0
A=3812041926 O[0]=1 O[1]=0 O[2]=0
A=3807872197 O[0]=0 O[1]=1 O[2]=0
A=3574846122 O[0]=1 O[1]=0 O[2]=0
A=1924134885 O[0]=1 O[1]=0 O[2]=0
A=3151131255 O[0]=1 O[1]=0 O[2]=0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modulo-5-component"&gt;
  &lt;/a&gt;
  Modulo 5 Component
&lt;/h3&gt;

&lt;p&gt;This is basically identical to modulo 3, except &lt;code&gt;mod5_4bit&lt;/code&gt; does need to do some reshuffling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module mod5_32bit(A, Mod);
  input [31:0] A;
  output [4:0] Mod;

  wire [4:0] ModHi;
  wire [4:0] ModLow;

  mod5_16bit Hi(A[31:16], ModHi);
  mod5_16bit Low(A[15:0], ModLow);

  // No need to do shift as (2**16) % 5 == 1
  mod5_add Add(ModHi, ModLow, Mod);
endmodule

module mod5_16bit(A, Mod);
  input [15:0] A;
  output [4:0] Mod;

  wire [4:0] ModHi;
  wire [4:0] ModLow;

  mod5_8bit Hi(A[15:8], ModHi);
  mod5_8bit Low(A[7:0], ModLow);

  // No need to do shift as (2**8) % 5 == 1
  mod5_add Add(ModHi, ModLow, Mod);
endmodule

module mod5_8bit(A, Mod);
  input [7:0] A;
  output [4:0] Mod;

  wire [4:0] ModHi;
  wire [4:0] ModLow;

  mod5_4bit Hi(A[7:4], ModHi);
  mod5_4bit Low(A[3:0], ModLow);

  // No need to do shift as (2**4) % 5 == 1
  mod5_add Add(ModHi, ModLow, Mod);
endmodule

module mod5_4bit(A, Mod);
  input [3:0] A;
  output [4:0] Mod;

  wire [4:0] ModHi;
  wire [4:0] ModHi4;
  wire [4:0] ModLow;

  mod5_2bit Hi(A[3:2], ModHi);
  mod5_2bit Low(A[1:0], ModLow);

  // We need to do shift as (2**2) % 5 == 4
  // Notice that if we do this reshuffle twice,
  // everything will be back where it started
  // That's why 8bit and bigger components don't
  // need to do any reshuffle.
  // mod5_8bit should do this 2x, but that's same as not doing it.
  // mod5_16bit should do this 4x, but that's same as not doing it etc.
  assign ModHi4[0] = ModHi[0]; // 0 * 4 = 0  =&amp;gt; 0
  assign ModHi4[4] = ModHi[1]; // 1 * 4 = 4  =&amp;gt; 4
  assign ModHi4[3] = ModHi[2]; // 2 * 4 = 8  =&amp;gt; 3
  assign ModHi4[2] = ModHi[3]; // 3 * 4 = 12 =&amp;gt; 2
  assign ModHi4[1] = ModHi[4]; // 4 * 4 = 16 =&amp;gt; 1

  mod5_add Add(ModHi4, ModLow, Mod);
endmodule

module mod5_2bit(A, Mod);
  input [1:0] A;
  output [4:0] Mod;
  // no 2 bit number is 4 mod 5
  assign Mod[4] = 0;
  // numbers 0-3 are themselves mod 5
  assign Mod[3] = A[0] &amp;amp; A[1];
  assign Mod[2] = A[1] &amp;amp; ~A[0];
  assign Mod[1] = ~A[1] &amp;amp; A[0];
  assign Mod[0] = ~A[0] &amp;amp; ~A[1];
endmodule

module mod5_add(ModA, ModB, ModOut);
  input [4:0] ModA;
  input [4:0] ModB;
  output [4:0] ModOut;

  // 0 + 0 = 0 =&amp;gt; 0
  // 1 + 4 = 5 =&amp;gt; 0
  // 2 + 3 = 5 =&amp;gt; 0
  // 3 + 2 = 5 =&amp;gt; 0
  // 4 + 1 = 5 =&amp;gt; 0
  assign ModOut[0] = (ModA[0] &amp;amp; ModB[0]) | (ModA[1] &amp;amp; ModB[4]) | (ModA[2] &amp;amp; ModB[3]) | (ModA[3] &amp;amp; ModB[2]) | (ModA[4] &amp;amp; ModB[1]);

  // 0 + 1 = 1 =&amp;gt; 1
  // 1 + 0 = 1 =&amp;gt; 1
  // 2 + 4 = 6 =&amp;gt; 1
  // 3 + 3 = 6 =&amp;gt; 1
  // 4 + 2 = 6 =&amp;gt; 1
  assign ModOut[1] = (ModA[0] &amp;amp; ModB[1]) | (ModA[1] &amp;amp; ModB[0]) | (ModA[2] &amp;amp; ModB[4]) | (ModA[3] &amp;amp; ModB[3]) | (ModA[4] &amp;amp; ModB[2]);

  // 0 + 2 = 2 =&amp;gt; 2
  // 1 + 1 = 2 =&amp;gt; 2
  // 2 + 0 = 2 =&amp;gt; 2
  // 3 + 4 = 7 =&amp;gt; 2
  // 4 + 3 = 7 =&amp;gt; 2
  assign ModOut[2] = (ModA[0] &amp;amp; ModB[2]) | (ModA[1] &amp;amp; ModB[1]) | (ModA[2] &amp;amp; ModB[0]) | (ModA[3] &amp;amp; ModB[4]) | (ModA[4] &amp;amp; ModB[3]);

  // 0 + 3 = 3 =&amp;gt; 3
  // 1 + 2 = 3 =&amp;gt; 3
  // 2 + 1 = 3 =&amp;gt; 3
  // 3 + 0 = 3 =&amp;gt; 3
  // 4 + 4 = 8 =&amp;gt; 3
  assign ModOut[3] = (ModA[0] &amp;amp; ModB[3]) | (ModA[1] &amp;amp; ModB[2]) | (ModA[2] &amp;amp; ModB[1]) | (ModA[3] &amp;amp; ModB[0]) | (ModA[4] &amp;amp; ModB[4]);

  // 0 + 4 = 4 =&amp;gt; 4
  // 1 + 3 = 4 =&amp;gt; 4
  // 2 + 2 = 4 =&amp;gt; 4
  // 3 + 1 = 4 =&amp;gt; 4
  // 4 + 0 = 4 =&amp;gt; 4
  assign ModOut[4] = (ModA[0] &amp;amp; ModB[4]) | (ModA[1] &amp;amp; ModB[3]) | (ModA[2] &amp;amp; ModB[2]) | (ModA[3] &amp;amp; ModB[1]) | (ModA[4] &amp;amp; ModB[0]);
endmodule

module mod5_tb;
  reg [31:0] A;
  wire [4:0] Mod;

  reg [31:0] i;

  mod5_32bit M(A, Mod);

  initial begin
    $monitor("A=%d O[0]=%d O[1]=%d O[2]=%d O[3]=%d O[4]=%d", A, Mod[0], Mod[1], Mod[2], Mod[3], Mod[4]);

    for (i=0; i&amp;lt;20; i=i+1) begin
      A = $random;
      #1;
    end

    $finish;
  end
endmodule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the modules are just wider versions of the same thing, except &lt;code&gt;mod5_4bit&lt;/code&gt; where I put some comments.&lt;/p&gt;

&lt;p&gt;We can see it in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  ./mod5_tp.vvp
A= 303379748 O[0]=0 O[1]=0 O[2]=0 O[3]=1 O[4]=0
A=3230228097 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0
A=2223298057 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0
A=2985317987 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0
A= 112818957 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0
A=1189058957 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0
A=2999092325 O[0]=1 O[1]=0 O[2]=0 O[3]=0 O[4]=0
A=2302104082 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0
A=  15983361 O[0]=0 O[1]=1 O[2]=0 O[3]=0 O[4]=0
A= 114806029 O[0]=0 O[1]=0 O[2]=0 O[3]=0 O[4]=1
A= 992211318 O[0]=0 O[1]=0 O[2]=0 O[3]=1 O[4]=0
A= 512609597 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0
A=1993627629 O[0]=0 O[1]=0 O[2]=0 O[3]=0 O[4]=1
A=1177417612 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0
A=2097015289 O[0]=0 O[1]=0 O[2]=0 O[3]=0 O[4]=1
A=3812041926 O[0]=0 O[1]=1 O[2]=0 O[3]=0 O[4]=0
A=3807872197 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0
A=3574846122 O[0]=0 O[1]=0 O[2]=1 O[3]=0 O[4]=0
A=1924134885 O[0]=1 O[1]=0 O[2]=0 O[3]=0 O[4]=0
A=3151131255 O[0]=1 O[1]=0 O[2]=0 O[3]=0 O[4]=0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;Now that we have modules telling us if something is divisible by 5 or 3, we can do the FizzBuzz.&lt;/p&gt;

&lt;p&gt;Our FizzBuzz won't do any printing, it will have one input for 32bit number, and 4 output wires - &lt;code&gt;PrintFizz&lt;/code&gt;, &lt;code&gt;PrintBuzz&lt;/code&gt;, &lt;code&gt;PrintFizzBuzz&lt;/code&gt; and &lt;code&gt;PrintNumber&lt;/code&gt;. We can connect it to some printing component to do the actual printing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module fizzbuzz(A, PrintNumber, PrintFizz, PrintBuzz, PrintFizzBuzz);
  input [31:0] A;
  output PrintNumber, PrintFizz, PrintBuzz, PrintFizzBuzz;
  wire [2:0] Mod3;
  wire [4:0] Mod5;

  mod3_32bit M3(A, Mod3);
  mod5_32bit M5(A, Mod5);

  assign PrintNumber   = ~Mod3[0] &amp;amp; ~Mod5[0];
  assign PrintFizz     = Mod3[0] &amp;amp; ~Mod5[0];
  assign PrintBuzz     = ~Mod3[0] &amp;amp; Mod5[0];
  assign PrintFizzBuzz = Mod3[0] &amp;amp; Mod5[0];
endmodule

module fizzbuzz_tb;
  reg [31:0] A;
  wire PrintNumber, PrintFizz, PrintBuzz, PrintFizzBuzz;

  reg [31:0] i;

  fizzbuzz M(A, PrintNumber, PrintFizz, PrintBuzz, PrintFizzBuzz);

  initial begin
    $monitor("A=%d Number=%d Fizz=%d Buzz=%d FizzBuzz=%d", A, PrintNumber, PrintFizz, PrintBuzz, PrintFizzBuzz);

    for (i=1; i&amp;lt;=100; i=i+1) begin
      A = i;
      #1;
    end

    $finish;
  end
endmodule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it totally works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./fizzbuzz_tp.vvp
A=         1 Number=1 Fizz=0 Buzz=0 FizzBuzz=0
A=         2 Number=1 Fizz=0 Buzz=0 FizzBuzz=0
A=         3 Number=0 Fizz=1 Buzz=0 FizzBuzz=0
A=         4 Number=1 Fizz=0 Buzz=0 FizzBuzz=0
A=         5 Number=0 Fizz=0 Buzz=1 FizzBuzz=0
A=         6 Number=0 Fizz=1 Buzz=0 FizzBuzz=0
A=         7 Number=1 Fizz=0 Buzz=0 FizzBuzz=0
A=         8 Number=1 Fizz=0 Buzz=0 FizzBuzz=0
A=         9 Number=0 Fizz=1 Buzz=0 FizzBuzz=0
A=        10 Number=0 Fizz=0 Buzz=1 FizzBuzz=0
A=        11 Number=1 Fizz=0 Buzz=0 FizzBuzz=0
A=        12 Number=0 Fizz=1 Buzz=0 FizzBuzz=0
A=        13 Number=1 Fizz=0 Buzz=0 FizzBuzz=0
A=        14 Number=1 Fizz=0 Buzz=0 FizzBuzz=0
A=        15 Number=0 Fizz=0 Buzz=0 FizzBuzz=1
A=        16 Number=1 Fizz=0 Buzz=0 FizzBuzz=0
A=        17 Number=1 Fizz=0 Buzz=0 FizzBuzz=0
A=        18 Number=0 Fizz=1 Buzz=0 FizzBuzz=0
A=        19 Number=1 Fizz=0 Buzz=0 FizzBuzz=0
A=        20 Number=0 Fizz=0 Buzz=1 FizzBuzz=0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#should-you-use-verilog"&gt;
  &lt;/a&gt;
  Should you use Verilog?
&lt;/h3&gt;

&lt;p&gt;In this episode I used very low level and verbose Verilog, and only used prints for testing. In real life you'd mostly write at much higher level, and there's a lot of sophisticated visualization tools for testing and simulating the circuit. So don't take this episode to be representative of typical Verilog.&lt;/p&gt;

&lt;p&gt;From what I've seen, actual hardware designers seem to be very unhappy with both Verilog and VHDL, and new hardware design languages are being created all the time. But for now, it's pretty much the overwhelming standard (with VHDL being a more verbose but otherwise very similar language).&lt;/p&gt;

&lt;p&gt;The other key skill in hardware design is automated verification, and for that you'd need to know a &lt;a href="https://dev.to/taw/100-languages-speedrun-episode-23-ruby-z3-19b9"&gt;logic language like Z3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For people who want to play with electronics, I'd recommend one of the video games first. I personally liked &lt;a href="https://store.steampowered.com/app/684270/Silicon_Zeroes/"&gt;Silicon Zeroes&lt;/a&gt; best. &lt;a href="https://store.steampowered.com/app/504210/SHENZHEN_IO/"&gt;Shenzhen I/O&lt;/a&gt; is more about programming microcontrollers than making circuits, but it's also very popular. Once you play a bunch of such games, and want to try something more real, Verilog is a fun language to try. And then who knows, maybe you'll design an FPGA or an ASIC for the next big cryptocurrency and get rich.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-29-verilog"&gt;Code for the Verilog episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>verilog</category>
      <category>electronics</category>
      <category>hardware</category>
    </item>
    <item>
      <title>Getting serious with  Firebase V9.  Part 4 - Cloud Storage: Uploading files</title>
      <author>MartinJ</author>
      <pubDate>Sun, 19 Dec 2021 16:56:10 +0000</pubDate>
      <link>https://dev.to/mjoycemilburn/getting-serious-with-firebase-v9-part-4-cloud-storage-uploading-files-3p7c</link>
      <guid>https://dev.to/mjoycemilburn/getting-serious-with-firebase-v9-part-4-cloud-storage-uploading-files-3p7c</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Introduction&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;File upload to the server host is a common webapp requirement. For example, you might want users of a Blog app to be able to add video files to their posts. &lt;/p&gt;

&lt;p&gt;Previously, you've seen how the Firebase &lt;code&gt;deploy&lt;/code&gt; procedure can be used to upload &lt;strong&gt;static&lt;/strong&gt; assets to the server. But here we're talking about &lt;strong&gt;dynamic&lt;/strong&gt; assets. A Firebase &lt;code&gt;deploy&lt;/code&gt; isn't going to be of any use in this situation. Google's answer to this requirement is a service called "Firebase Storage".&lt;/p&gt;

&lt;p&gt;If you were observant, you might have caught sight of this when you first saw the Firebase Console in &lt;a href="https://dev.to/mjoycemilburn/a-beginners-guide-to-javascript-development-using-firebase-v9-part-1-project-configuration-5bo3"&gt;Firebase project configuration&lt;/a&gt;. At the time, attention was focused on Authentication, Firestore and Hosting but, included in the list of "Build" tabs in the left-hand column you might have spotted a service labelled "Storage".&lt;/p&gt;

&lt;p&gt;Open the Console Storage page for your project now, find the "Storage" tab and click it. &lt;/p&gt;

&lt;p&gt;Cloud Storage is actually a huge part of the Google Cloud system - you can get a glimpse of Google's overall vision for the service at &lt;a href="https://firebase.google.com/docs/storage"&gt;Cloud Storage for Firebase&lt;/a&gt;. I'll be using just a fraction of its capabilities in this post, but you'll quickly see that this is a facility that you can rely upon to meet all of your requirements for robust, scalable and secure storage.&lt;/p&gt;

&lt;p&gt;Cloud storage is organised around &lt;a href="https://cloud.google.com/storage/docs/key-terms"&gt;storage buckets&lt;/a&gt;. This is how Google itself described the system:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Buckets are the basic containers that hold your data. Everything that you store in Cloud Storage must be contained in a bucket. You can use buckets to organize your data and control access to your data, but unlike directories and folders, you cannot nest buckets. While there is no limit to the number of buckets you can have in a project or location, there are limits to the rate you can create or delete buckets.&lt;/p&gt;

&lt;p&gt;When you create a bucket, you give it a globally-unique name and a geographic location where the bucket and its contents are stored. The name and location of the bucket cannot be changed after creation, though you can delete and re-create the bucket to achieve a similar result. There are also optional bucket settings that you can configure during bucket creation and change later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first time you open the Console's Storage page, Google will ask you to initialise the default Storage "bucket" that has been allocated to your project (you can see the name of this if you open Project Settings and look for "storageBucket")&lt;/p&gt;

&lt;p&gt;Initialisation is generally quite straightforward but you may be slightly thrown when you are asked whether you want to start your project in Test or Production mode. You might remember, however, that there was something similar when you were initialising your project's Firestore settings - it has to do with storage rules. At this stage, you should select "test" - more on this later. Select a suitable geographical location too - somewhere reasonably close should be your aim. Once you're through all this, the  Storage page should look something like the following:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--96Pm3f60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9qdi2q45vrjhla09shw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--96Pm3f60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9qdi2q45vrjhla09shw.png" alt="Cloud Storage - initial state" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Uploading a file to Cloud Storage&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An earlier post, &lt;a href="https://dev.to/mjoycemilburn/a-beginners-guide-to-javascript-development-using-firebase-v9-part-2-coding-a-simple-webapp-4e5i"&gt;Coding a simple webapp&lt;/a&gt; used a "Shopping List" application as an illustration. This allowed users to login and create lists of purchase intentions. I'm now going to show you how you might add a feature to this to enable users to add a profile icon to their accounts.&lt;/p&gt;

&lt;p&gt;Incidentally, you might imagine that one approach to this, rather than using Cloud Storage, might be to store uploaded data in a Firestore collection. So, for example, you might create a &lt;code&gt;userAccounts&lt;/code&gt; collection keyed on &lt;code&gt;userEmail&lt;/code&gt; and then try to store an uploaded image file here in a data field formatted as some sort of encoded string. But this isn't going to work because the maximum size of a Firestore document is 1MB and images will generally be a lot larger than this. So the plan must be to upload the graphic into a file created dynamically in Cloud storage with a filename based on `userEmail.&lt;/p&gt;

&lt;p&gt;The screenshot above shows the default &lt;code&gt;fir-expts-app.appspot.com&lt;/code&gt; bucket allocated to the &lt;code&gt;fir-expts-app&lt;/code&gt; project for the ShoppingLists project. Should I store the profile icon files directly in here or should I create a new bucket especially for this purpose? The Console certainly provides me with a facility to create buckets but you'll recall from Google's description of the bucket concept that these are not something to be treated quite as liberally as folders in local storage. The system does, however, allows me to freely create "folders" within buckets and this seems to be the direction that Google would prefer me to go - see &lt;a href="https://cloud.google.com/storage/docs/folders"&gt;Folders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I've now got to write some Javascript to enable a user to select a profile graphic file from local storage and upload it. You'll probably be relieved that I'm not actually going to incorporate this into the original Shopping Lists application as the proposed enhancement is simply too absurd. In any case, it would obscure the techniques that I'm trying to explain. So if you want to follow me by trying this example out yourself, the code below is intended to overwrite the original index.html and index.js files in the &lt;code&gt;firexptsapp&lt;/code&gt; project. &lt;/p&gt;

&lt;p&gt;Here's the body of the demo index.html`:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"text-align: center;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"fileitem"&lt;/span&gt; &lt;span class="na"&gt;accept=&lt;/span&gt;&lt;span class="s"&gt;"image/png, .txt, .pdf"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"imageitem"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display: none; max-width: 20%; margin: 10vh auto 5vh auto;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"packed_index.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're not familiar with HTML file input elements, check out Mozilla's documentation at &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file"&gt;&lt;code&gt;&amp;lt;input type="file"&amp;gt;&lt;/code&gt;&lt;/a&gt; - these provide a very neat way launching a file-selection window and storing the user's choice in the DOM.&lt;/p&gt;

&lt;p&gt;Here's the corresponding &lt;code&gt;index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;initializeApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAuth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signInWithPopup&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uploadBytes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/storage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebaseConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AIzaSyAPJ44X28caId8c3brUDM6FnKK5vQje6qM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fir-expts-app.firebaseapp.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fir-expts-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="na"&gt;storageBucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fir-expts-app.appspot.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="na"&gt;messagingSenderId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1070731254062&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1:1070731254062:web:1e21b61bd95caeacdbc2bf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="na"&gt;measurementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;G-Q87QDR1F9T&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebaseApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firebaseConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAuth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mj@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getStorage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storageRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userProfileIcons/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;userEmail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fileitem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;onchange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;uploadFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;uploadFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fileitem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nx"&gt;uploadBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storageRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Successful upload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;uploadFile()&lt;/code&gt; function in the &lt;code&gt;index.js&lt;/code&gt; code above is triggered when it sees the contents of the &lt;code&gt;index.html&lt;/code&gt;'s &lt;code&gt;fileitem&lt;/code&gt; field change, signalling that the user has selected a file for upload. Prior to that you'll see that I've initialised and authorised the webapp exactly as before but then have used a couple of new functions imported from a &lt;code&gt;firebase/storage&lt;/code&gt; module to create "storage references". These indicate where I want my uploaded file to end up. Here I've cheated a little by hard-coding a suitable &lt;code&gt;userEmail&lt;/code&gt; field (&lt;code&gt;mj@gmail.com&lt;/code&gt;) into the webapp. If you were actually using a Google log-in, this would be used to supply the user's email.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;uploadFile()&lt;/code&gt; function itself is very simple. It just copies the selected file's details from the DOM entry for the HTML input field (&lt;code&gt;files[0]&lt;/code&gt; means "get the details for the first in the list of selected files" - in this case, there's only one) and then supplies this (together with the &lt;code&gt;storageRef&lt;/code&gt; field specifying the upload target) as parameters to the SDK's &lt;code&gt;uploadBytes&lt;/code&gt; function. When this completes, it displays an alert message on the browser screen.&lt;/p&gt;

&lt;p&gt;To put this into operation, I simply open my &lt;code&gt;build_for_development.ps1&lt;/code&gt; script file, select its contents and press F8. Once the code has been successfully "webpacked" (essential now because I'm using the modular V9 Firebase SDK) and deployed, I can launch the webapp with the supplied url (&lt;code&gt;https://fir-expts-app.web.app&lt;/code&gt; in this case). If I then select a random &lt;code&gt;.png&lt;/code&gt; file, the browser should respond with the expected 'Successful upload' alert message. And if I refresh the Firestore console's Storage page I should see that a &lt;code&gt;userProfileIcons&lt;/code&gt; folder has been created and that my local file has been uploaded into this as &lt;code&gt;mj@gmail.com&lt;/code&gt;. I can check that it's the correct file by clicking on its console entry and noting the useful thumbnail and metadata that are then revealed.&lt;/p&gt;

&lt;p&gt;Note that I don't need to actually &lt;strong&gt;create&lt;/strong&gt; the &lt;code&gt;userProfileIcons&lt;/code&gt; folder and if I run the webapp again selecting a different source file, the target is simply overwritten.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Referencing a file in Cloud Storage&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although I've now successfully created a Cloud copy of the local file, I haven't shown you how a webapp might actually use this to display the user's profile icon on the screen.&lt;/p&gt;

&lt;p&gt;This is surprisingly easy. Another Cloud Storage function, &lt;code&gt;getDownloadURL()&lt;/code&gt; takes a "storage reference" parameter and returns a &lt;code&gt;url&lt;/code&gt;. It's then a simple matter to plug that into the &lt;code&gt;src&lt;/code&gt; property of an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and thus display the Cloud Storage file on the browser screen. In some cases, you might find it useful/necessary to store these &lt;code&gt;url&lt;/code&gt;s as &lt;code&gt;string&lt;/code&gt; fields somewhere in a Firestore collection.&lt;/p&gt;

&lt;p&gt;Here's the code I need to add to achieve this. First, in the body of the html file, I've added the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"imageitem"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display: none; max-width: 20%; margin: 10vh auto 0 auto;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the index.js file I've reworked the uploadFile() function as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;uploadFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fileitem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nx"&gt;uploadBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storageRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Successful upload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nx"&gt;getDownloadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storageRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;imageitem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;imageitem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once I've rerun the build script, the webapp will display a Cloud Storage copy of the locally-sourced file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pg2-219p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynlgex91p46qjg18f60o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pg2-219p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynlgex91p46qjg18f60o.png" alt="Displaying a file" width="880" height="396"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a lot of variations that you can play on this basic theme. The files object that the input tag creates in the browser's DOM has many useful properties. For example, &lt;code&gt;document.getElementById('fileitem').files[0].type;&lt;/code&gt; enables me to detect a pdf file (type would be 'application/pdf"). In this case, a javascript statement along the lines of &lt;code&gt;window.open(url, "_blank");&lt;/code&gt; would display the Cloud Storage copy of the file under a new browser tab.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Storage Rules&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There's one final wrinkle to be ironed out. Because project API keys are essentially public, Google Cloud Storage needs to be protected by the same sort of "rule" arrangement that you saw earlier with regard to Firestore document security. &lt;/p&gt;

&lt;p&gt;You can see the rules currently in force by clicking the "rules" tab on the Firebase Console's Storage page. Because I initialised storage for the fir-expts-app project in "test" mode they'll look something like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if
          request.time &amp;lt; timestamp.date(2022, 1, 17);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are saying "allow anybody to do anything while the run-date is prior to 17th Jan 2022". I ran my initialise on 18th Dec, 2021, so Google was giving me a month to get myself sorted out. After this date, unless I've changed the rules myself, they'll deny access entirely until I fix things. Just for now, though, the "test" setting is fine.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>firebase</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Beautify third-party API with Kotlin</title>
      <author>Nicolas Frankel</author>
      <pubDate>Sun, 19 Dec 2021 16:50:10 +0000</pubDate>
      <link>https://dev.to/nfrankel/beautify-third-party-api-with-kotlin-126b</link>
      <guid>https://dev.to/nfrankel/beautify-third-party-api-with-kotlin-126b</guid>
      <description>&lt;p&gt;Scala has popularized the "Pimp my library" pattern:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is just a fancy expression to refer to the ability to supplement a library using implicit conversions.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://www.baeldung.com/scala/pimp-my-library-pattern"&gt;Pimp My Library Pattern in Scala&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kotlin does provide the same capability. However, it achieves it via &lt;em&gt;extension functions&lt;/em&gt;. While the generated bytecode is similar to Java's static methods, the developer experience is the same as adding functions to existing types.&lt;/p&gt;

&lt;p&gt;This approach has limitations, though. One cannot update the type hierarchy.&lt;/p&gt;

&lt;p&gt;Imagine a library that offers a component with an open/close lifecycle. The component opens when you instantiate it, but you need to make sure to close it after usage, &lt;em&gt;e.g.&lt;/em&gt;, a file, a stream, etc.&lt;/p&gt;

&lt;p&gt;Before Java 7, you had actually to close the component explicitly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// Use component&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Java 7 introduced the &lt;em&gt;try-with-resource&lt;/em&gt; statement so that you can write something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Use component&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;                                                &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;Component&lt;/code&gt; is closed here in a generated &lt;code&gt;finally&lt;/code&gt; block&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, &lt;code&gt;Component&lt;/code&gt; must implement &lt;code&gt;AutoCloseable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-HSzCqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e1tbpcn2ynx60p5lrsi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-HSzCqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e1tbpcn2ynx60p5lrsi.png" alt="AutoCloseable API class diagram" width="356" height="653"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kotlin provides the &lt;code&gt;use()&lt;/code&gt; extension function on &lt;code&gt;Closeable&lt;/code&gt;.&lt;br&gt;
Hence, one can replace the try-with-resource statement with a simple function call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use component as it&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;                                                &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;Component&lt;/code&gt; is closed here in a &lt;code&gt;finally&lt;/code&gt; block&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That being said, imagine that the library above implements neither &lt;code&gt;Closeable&lt;/code&gt; nor &lt;code&gt;AutoCloseable&lt;/code&gt;. We cannot use &lt;code&gt;use()&lt;/code&gt;. Kotlin delegation to the rescue!&lt;/p&gt;

&lt;p&gt;The Delegation pattern is widespread in Object-Oriented languages:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In delegation, an object handles a request by delegating to a second object (the &lt;em&gt;delegate&lt;/em&gt;). The delegate is a helper object, but &lt;em&gt;with the original context&lt;/em&gt;. With language-level support for delegation, this is done implicitly by having &lt;code&gt;self&lt;/code&gt; in the delegate refer to the original (sending) object, not the delegate (receiving object). In the delegate pattern, this is instead accomplished by explicitly passing the original object to the delegate, as an argument to a method.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://en.wikipedia.org/wiki/Delegation_pattern"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Implementing the Delegation pattern in Java requires writing a lot of boilerplate code. The more methods the original class has, the more boring it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CloseableComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Closeable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;CloseableComponent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kotlin supports the Delegation pattern out-of-the-box via the &lt;code&gt;by&lt;/code&gt; keyword. One can rewrite the above code as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CloseableComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                 &lt;span class="nc"&gt;Closeable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                  &lt;span class="c1"&gt;// 1&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Delegate all calls of &lt;code&gt;a()&lt;/code&gt;, &lt;code&gt;b()&lt;/code&gt;, and &lt;code&gt;c()&lt;/code&gt; to the underlying &lt;code&gt;component&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can finally write the desired code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nc"&gt;CloseableComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;RealComponent&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Use component as it&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even better, it works with third-party code to improve an external library with this approach.&lt;/p&gt;

&lt;p&gt;The icing on the cake, one can also call the code from a &lt;em&gt;try-with-resource&lt;/em&gt; Java statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CloseableComponent&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CloseableComponent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;RealComponent&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Use component&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I wrote above, one can do it in Java also. In general, however, the sheer amount of boilerplate code that one needs to write to implement delegation is a significant impediment. Kotlin makes it a breeze.&lt;/p&gt;

&lt;p&gt;We miss one last step to make our code easier to write. How do we get the &lt;code&gt;CloseableComponent&lt;/code&gt;? Let's create an extension function on &lt;code&gt;Component&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toCloseable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CloseableComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, usage is fluent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nc"&gt;RealComponent&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toCloseable&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Use component&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this post, we have seen how to improve the API provided by third-party libraries. We achieved it by combining Kotlin extension functions and delegation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To go further:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.frankel.ch/extending-third-party-apis/"&gt;Extending third-party APIs in different languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kotlinlang.org/docs/extensions.html#extension-functions"&gt;Extension functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"&gt;The try-with-resources Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/use.html"&gt;Kotlin's use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Delegation_pattern"&gt;Delegation pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kotlinlang.org/docs/delegation.html"&gt;Kotlin's Delegation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://blog.frankel.ch/beautify-third-party-api-kotlin/"&gt;A Java Geek&lt;/a&gt; on December 19&lt;sup&gt;th&lt;/sup&gt;, 2021&lt;/em&gt;&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>api</category>
      <category>extension</category>
      <category>thirdparty</category>
    </item>
  </channel>
</rss>
