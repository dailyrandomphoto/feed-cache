<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What lies in the .git folder? How are commits stored? Answered by Microsoft MVP &amp; author of SQL Source Control!</title>
      <author>Saurabh Rai</author>
      <pubDate>Wed, 24 Nov 2021 16:38:49 +0000</pubDate>
      <link>https://dev.to/srbhr/what-lies-in-the-git-folder-how-are-commits-stored-answered-by-microsoft-mvp-author-of-sql-source-control-1mld</link>
      <guid>https://dev.to/srbhr/what-lies-in-the-git-folder-how-are-commits-stored-answered-by-microsoft-mvp-author-of-sql-source-control-1mld</guid>
      <description>&lt;p&gt;&lt;strong&gt;The definitive deep dive into the .git folder&lt;/strong&gt; by Rob Richardson, author of SQL Server Source Control Basics, a Microsoft MVP, and a frequent Speaker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; &lt;em&gt;--everything-is-local!&lt;/em&gt;&lt;br&gt;
From writing code, to branching-creating PRs to merging. For our everyday collaborative development tasks. Git has become an essential tool, surpassing other SCM tools. Being lightweight with fast performance, git has a lot of features. And with every every locat git repository there comes a .git folder. Where all the essential data is stored about the ongoing project! &lt;/p&gt;

&lt;p&gt;We've all been using Github and are very familiar with the .git folder. &lt;strong&gt;But how things operate inside it? What's in the .git folder? How are commits stored?&lt;/strong&gt; How do branches work? We'll dive deep into the objects folder, unpack commits, look at the types of DAG nodes, examine object content, and build a complete visualization of the stored content. We'll also quickly look through Git hooks, Git config, and ref logs. Come experience the zen of git at &lt;a href="https://gitcommit.show/"&gt;Git Commit Show.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üåüJoin our Discord Server for an amazing QnA &lt;a href="https://discord.gg/JFWP8c2gPG"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;‚ú® Get your tickets to the event &lt;a href="http://push.gitcommit.show/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;‚è≤Check the schedule &lt;a href="https://gitcommit.show/schedule/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;About &lt;strong&gt;Rob Richardson&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;He is a software craftsman building web properties in ASP.NET and Node, React and Vue JS. &lt;/li&gt;
&lt;li&gt;A Microsoft MVP, published author, frequent speaker at conferences, user groups, and community events. A diligent teacher and student of high quality software development.&lt;/li&gt;
&lt;li&gt;He often speaks at various conferences and Loves to talk and share his knowledge on Open Source üíö!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IlQem0Je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wlh4gol2eje8r8iy4bu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IlQem0Je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wlh4gol2eje8r8iy4bu.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>opensource</category>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Personalised GitHub profile</title>
      <author>Jurga Gi</author>
      <pubDate>Wed, 24 Nov 2021 15:42:26 +0000</pubDate>
      <link>https://dev.to/jurgyte/personalised-github-profile-2bd9</link>
      <guid>https://dev.to/jurgyte/personalised-github-profile-2bd9</guid>
      <description>&lt;p&gt;Not so long ago I attended a personal branding workshop (it's quite popular topic these days). My mentor inspired me to unify my presence across internet. The idea behind it was to make me easily recognisable across the most common platforms such as Twitter, Github or LinkedIn. I found this task very fun and creative. Mostly it was changing my nickname and photo but it also involved some very very simple coding which was a double fun for me. I made my GitHub profile look more attractive. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1CXK_Hez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dvvanexosb0hjyvnc3b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1CXK_Hez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dvvanexosb0hjyvnc3b.png" alt="My profile image" width="880" height="672"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To customise your GitHub profile looks you need to create a README for it. It's very easy to do. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a repository with a name that matches your GitHub username. &lt;/li&gt;
&lt;li&gt;Make sure this repository is public. &lt;/li&gt;
&lt;li&gt;Add a file named README.md in its root. Any content in this file will display in your profile README section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The biggest challenge for me was to find the answer to the question: what should I add to this README? &lt;a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme"&gt;GitHub&lt;/a&gt; has some suggestions such as to add an "About me" section that describes your work and interests, contributions you're proud of, guidance on communities where you're involved. But there are even more things you can add, for example &lt;a href="https://github.com/anuraghazra/github-readme-stats#github-stats-card"&gt;widgets&lt;/a&gt; in order to show stats on your GitHub activity or your most used programming languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/b9f90b1d6fe362d60baca13304e88cd983f95da54f8cc41396bc4debbe8e4c59/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d616e7572616768617a726126696e636c7564655f616c6c5f636f6d6d6974733d74727565" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/b9f90b1d6fe362d60baca13304e88cd983f95da54f8cc41396bc4debbe8e4c59/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d616e7572616768617a726126696e636c7564655f616c6c5f636f6d6d6974733d74727565" alt="Stats block image" width="495" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can add small &lt;a href="https://shields.io/category/build"&gt;badges&lt;/a&gt; to show various information such as how many visitors you had, how many bugs you fixed, any kind of important ratings or number pf social channel followers and etc. Adding a badge is very simple, you just need to use this code&lt;br&gt;
&lt;code&gt;![](https://img.shields.io/{URL_OF_THE_BADGE_WITH_PARAMS})&lt;/code&gt; in your README.md file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mhIZdfl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcdc9vpfh6v1bjk3mixt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mhIZdfl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcdc9vpfh6v1bjk3mixt.png" alt="Badge example" width="232" height="58"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F0B7bH1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kghywekar4sa4ja9obr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0B7bH1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kghywekar4sa4ja9obr.png" alt="Badge example" width="274" height="70"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also checked few &lt;a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme"&gt;list&lt;/a&gt; with inspirational GitHub profiles and this &lt;a href="https://towardsdatascience.com/build-a-stunning-readme-for-your-github-profile-9b80434fe5d7"&gt;blog&lt;/a&gt; post with few suggestions.&lt;/p&gt;

&lt;p&gt;In the end I decided to keep my profile simple to mark what are the most important activities I do across internet, I marked the tools I use daily and added a small widget to see how many people visit my GitHub profile (something fun for myself).&lt;/p&gt;

</description>
      <category>github</category>
      <category>readme</category>
      <category>personalised</category>
      <category>profile</category>
    </item>
    <item>
      <title>Get started with discord.py!</title>
      <author>Tejas Kathuria</author>
      <pubDate>Wed, 24 Nov 2021 15:39:12 +0000</pubDate>
      <link>https://dev.to/tejasdev/get-started-with-discordpy-14l0</link>
      <guid>https://dev.to/tejasdev/get-started-with-discordpy-14l0</guid>
      <description>&lt;p&gt;Discord.py is a very fantastic API. It helps us in creating Discord bots easily. People have made game bots, RPG bots, Moderation Bots, Economy bots, and even more! Using this guide, you can learn how to use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-discordpy"&gt;
  &lt;/a&gt;
  Install discord.py
&lt;/h3&gt;

&lt;p&gt;Make sure you have python installed on your computer. You have to install discord.py with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;voil√†! discord.py has been installed!&lt;/p&gt;

&lt;p&gt;For making bots you'll need to have a developer account. You can &lt;a href="https://discordpy.readthedocs.io/en/latest/discord.html#creating-a-bot-account"&gt;check this&lt;/a&gt; guide!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basics-of-developing-a-bot"&gt;
  &lt;/a&gt;
  Basics of developing a bot
&lt;/h3&gt;

&lt;p&gt;When starting you have to choose weather to use &lt;code&gt;discord.Client&lt;/code&gt; or &lt;code&gt;commands.Bot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;discord.Client&lt;/code&gt;:&lt;br&gt;
‚Ä¢ Is more lightweight than commands.Bot&lt;br&gt;
‚Ä¢ Is best if you're not going to be using commands&lt;/p&gt;

&lt;p&gt;&lt;code&gt;commands.Bot&lt;/code&gt;:&lt;br&gt;
‚Ä¢ Is best if your bot is going to have commands&lt;br&gt;
‚Ä¢ Supports easy discord object conversion&lt;/p&gt;

&lt;p&gt;In this series we will make a bot with &lt;code&gt;commands.Bot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have to start by importing &lt;code&gt;discord&lt;/code&gt; and &lt;code&gt;discord.ext.commands&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;discord&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;discord.ext&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;

&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command_prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'YOUR TOKEN HERE'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We initialized a class as an object. We defined this class to the variable bot, which can be named whatever you want. Most people use &lt;code&gt;bot&lt;/code&gt; or &lt;code&gt;client&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now when our bot is defined, we can start with our first command. In discord.py we make commands like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'command_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description for help command"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other_arguments_here&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="c1"&gt;# Tell bot what to do here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's make a command which will greet the user with a hello. We'll use &lt;code&gt;ctx.author&lt;/code&gt; for doing this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Greets the sender"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# f-string
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, when we greet the user, it will say Hello USER!&lt;/p&gt;

&lt;p&gt;Congrats!! You've just written a bot using discord.py! Run the code. When you'll type &lt;code&gt;$hello&lt;/code&gt; it should respond!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UBj4R6Xn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruh32pmb5uexvjxvfxyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UBj4R6Xn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruh32pmb5uexvjxvfxyi.png" alt="Image description" width="395" height="216"&gt;&lt;/a&gt;&lt;br&gt;
Source Code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</description>
      <category>python</category>
      <category>discord</category>
      <category>discordpy</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build a mobile audio chat app in an afternoon with React Native</title>
      <author>Jess Mitchell</author>
      <pubDate>Wed, 24 Nov 2021 15:35:01 +0000</pubDate>
      <link>https://dev.to/trydaily/build-a-mobile-audio-call-app-in-an-afternoon-with-react-native-3j3g</link>
      <guid>https://dev.to/trydaily/build-a-mobile-audio-call-app-in-an-afternoon-with-react-native-3j3g</guid>
      <description>&lt;p&gt;At Daily, one of our primary focuses has been &lt;a href="https://www.daily.co/audio-only"&gt;supporting audio-only apps&lt;/a&gt; with our APIs. Lately, we‚Äôve been hearing more and more discussions about how to help app users avoid &lt;a href="https://news.stanford.edu/2021/02/23/four-causes-zoom-fatigue-solutions/"&gt;Zoom fatigue&lt;/a&gt; ‚Äî the feeling of being burnt out from sitting in video calls all day long.&lt;/p&gt;

&lt;p&gt;Audio-only apps are a great solution to this issue as they typically require less cognitive resources to participate in. They are also a great option for larger calls or calls on mobile devices as they tend to have lower CPU requirements. (So you &lt;em&gt;and&lt;/em&gt; your devices need to think less. üòâ) &lt;/p&gt;

&lt;p&gt;To help our customers support their &lt;a href="https://www.daily.co/blog/audio-only-social-networks-what-are-they-and-how-are-they-being-used/"&gt;audio-only use cases&lt;/a&gt;, we launched an audio &lt;a href="https://www.producthunt.com/posts/audio-apps-starter-kit"&gt;starter kit&lt;/a&gt; (a.k.a. Party Line) earlier this year, which includes demo apps in &lt;a href="https://github.com/daily-demos/party-line/tree/main/react"&gt;React (web)&lt;/a&gt;, &lt;a href="https://github.com/daily-demos/party-line/tree/main/ios"&gt;iOS&lt;/a&gt;, &lt;a href="https://github.com/daily-demos/party-line/tree/main/android"&gt;Android&lt;/a&gt;, and &lt;a href="https://github.com/daily-demos/party-line/tree/main/react-native"&gt;React Native&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In today's tutorial, we‚Äôll be doing a deeper dive into how the &lt;a href="https://github.com/daily-demos/party-line/tree/main/react"&gt;React Native version of Party Line&lt;/a&gt; works. &lt;/p&gt;

&lt;p&gt;By the end of this tutorial, you‚Äôll know how to build a &lt;a href="https://www.joinclubhouse.com/"&gt;Clubhouse&lt;/a&gt;-esque Daily audio app using our &lt;a href="https://github.com/daily-co/react-native-daily-js"&gt;&lt;code&gt;react-native-daily-js&lt;/code&gt;&lt;/a&gt; library and Daily‚Äôs customizable &lt;a href="https://docs.daily.co/call-object"&gt;call object&lt;/a&gt;. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#who-is-this-tutorial-for"&gt;
  &lt;/a&gt;
  Who is this tutorial for?
&lt;/h2&gt;

&lt;p&gt;To get the most out of this tutorial, some basic React Native knowledge is useful. If you‚Äôve never used React Native before but are familiar with React and React hooks, you should be able to follow along. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: React and React Native code is fairly similar but does have some differences, so we‚Äôll do our best to explain those differences as they come up!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-set-up-locally"&gt;
  &lt;/a&gt;
  Getting set up locally
&lt;/h2&gt;

&lt;p&gt;To run the Party Line app locally, follow the instructions located in the &lt;a href="https://github.com/daily-demos/party-line/tree/main/react-native"&gt;Github repo‚Äôs README&lt;/a&gt;. Instructions for both iOS and Android are included, depending which OS you prefer to primarily test React Native apps.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#feature-set-and-backlog"&gt;
  &lt;/a&gt;
  Feature set and backlog
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5MTYLZOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-18-at-14.47.58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5MTYLZOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-18-at-14.47.58.png" alt="Party Line app views" width="880" height="688"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs start by describing which audio call features will (and won‚Äôt) be included.&lt;/p&gt;

&lt;p&gt;Party Line will include two views:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A home screen with a form to join or create an audio call&lt;/li&gt;
&lt;li&gt;An in-call view once a call has been joined&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's review some of the basic functionality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From the home screen, the local user can fill out their name in the form and either specify a room code or leave the code blank. If they leave the code blank, Party Line will automatically create a new room and join it when the form is submitted. &lt;/li&gt;
&lt;li&gt;Each room created in Party Line will expire after 10 minutes. The expiry is set when the room is created via the &lt;a href="https://docs.daily.co/reference/rest-api/rooms/create-room"&gt;Daily REST API&lt;/a&gt; and something we‚Äôve included to avoid long-living demo rooms. This can be adjusted in the room settings to match your use case, however.&lt;/li&gt;
&lt;li&gt;Once the room is joined, the room code can be shared with anyone. Rooms created from one app are compatible with any of our other Party Line apps (iOS, Android, React/web, or React Native). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We‚Äôll allow for three different types of participants: moderator, speaker, listener. &lt;/p&gt;

&lt;p&gt;Participant types are handled as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The room creator is the moderator&lt;/li&gt;
&lt;li&gt;Moderators are indicated in the UI by a star next to their initials&lt;/li&gt;
&lt;li&gt;Moderators can promote listeners to speakers, speakers to listeners, and anyone to a moderator&lt;/li&gt;
&lt;li&gt;Listeners can raise (or lower) their hands to indicate they would like to speak&lt;/li&gt;
&lt;li&gt;Speakers and moderators can mute/unmute themselves, but only mute others&lt;/li&gt;
&lt;li&gt;When a moderator leaves the call and there are no other moderators present, the call ends for everyone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hapx7Fka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.04.00.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hapx7Fka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.04.00.gif" alt="Moderator updating their local audio settings" width="800" height="616"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In terms of constraints, we will not:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use any external account management or authentication&lt;/li&gt;
&lt;li&gt;Have a database, though we recommend handling the participant types with a database for production-level apps (‚ùó)&lt;/li&gt;
&lt;li&gt;Have a backend aside from serverless functions, which call the Daily REST API&lt;/li&gt;
&lt;li&gt;Offer a list of rooms to join; the participant will need to know the code for the room they want to join. This would be a great feature to add, though üòâ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We‚Äôll cover how most of this works below or share links to existing resources for anything we don‚Äôt have time to go over.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#component-structure"&gt;
  &lt;/a&gt;
  Component structure
&lt;/h2&gt;

&lt;p&gt;Before we dive into the code, let‚Äôs plan the structure we‚Äôre going to use for our components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZfUB6FF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/PartyLineFinal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZfUB6FF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/PartyLineFinal.png" alt="Component structure" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we have our &lt;code&gt;App&lt;/code&gt; component as the top-level parent component. It will render the &lt;code&gt;Header&lt;/code&gt; component with the app title and information. It will also conditionally render &lt;em&gt;either&lt;/em&gt; the &lt;code&gt;InCall&lt;/code&gt; component, which handles the Daily audio call, &lt;em&gt;or&lt;/em&gt; the &lt;code&gt;PreJoinRoom&lt;/code&gt;, which has a form to join a Daily audio call, depending on our app state.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;InCall&lt;/code&gt; component has the most complexity because it handles our Daily call.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;InCall&lt;/code&gt; contains the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One &lt;code&gt;Counter&lt;/code&gt; component, which displays how much time is left in the call&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;CopyLinkBox&lt;/code&gt; to copy and share the room code&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Tray&lt;/code&gt; to control your local microphone, raise your hand, or leave the call&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Participant&lt;/code&gt; component for each participant. It renders:

&lt;ul&gt;
&lt;li&gt;Participant UI, with each participant represented by a box with their initials and a ‚Äúshow more‚Äù menu button that renders the &lt;code&gt;Menu&lt;/code&gt; component in certain conditions. (More on that below)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;DailyMenuView&lt;/code&gt; component, which provides the participant‚Äôs audio for the call. 
&lt;em&gt;Note: In a React project, you would just render an &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; element.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#callproviderjsx-the-brain-of-this-operation"&gt;
  &lt;/a&gt;
  CallProvider.jsx: The brain of this operation üß†
&lt;/h2&gt;

&lt;p&gt;To keep our logic organized and in (mostly) one place, we are using the &lt;a href="https://reactjs.org/docs/context.html"&gt;React Context API&lt;/a&gt;, which helps us store global app state. Our &lt;code&gt;App&lt;/code&gt; component wraps its contents in the &lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx"&gt;&lt;code&gt;CallProvider&lt;/code&gt; component&lt;/a&gt; (our context), which means all of our app‚Äôs contents can access the data set in our call context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.jsx&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CallProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AppContent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CallProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: The Context API can be used by any React app (not just React Native). In fact, we did just that in the &lt;a href="https://github.com/daily-demos/party-line/blob/main/react/src/CallProvider.jsx"&gt;web version of this app!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, let‚Äôs spend some time understanding what‚Äôs happening in &lt;code&gt;CallProvider&lt;/code&gt;. (We can‚Äôt cover every detail here, so &lt;a href="https://www.daily.co/contact/support"&gt;let us know&lt;/a&gt; if you have questions.) &lt;/p&gt;

&lt;p&gt;There are several actions (i.e. methods) we define in &lt;code&gt;CallProvider&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating a new Daily room (&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L31"&gt;&lt;code&gt;createRoom&lt;/code&gt;&lt;/a&gt;) with the &lt;a href="https://docs.daily.co/reference/rest-api/rooms/create-room"&gt;Daily REST API&lt;/a&gt;. We‚Äôre using a &lt;a href="https://www.netlify.com/products/functions/"&gt;Netlify serverless function&lt;/a&gt; for this but you can use the Daily REST API endpoints however works best for your app.&lt;/li&gt;
&lt;li&gt;Creating a Daily meeting token (&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L46"&gt;&lt;code&gt;createToken&lt;/code&gt;&lt;/a&gt;) for meeting moderators with the &lt;a href="https://docs.daily.co/reference/rest-api/meeting-tokens/create-meeting-token"&gt;Daily REST API&lt;/a&gt;. (Same as above regarding using serverless functions.)&lt;/li&gt;
&lt;li&gt;Joining a Daily room (&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L65"&gt;&lt;code&gt;joinRoom&lt;/code&gt;&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;Leaving a room the local participant is currently attending (&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L172"&gt;&lt;code&gt;leaveCall&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Muting/unmuting (&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L225"&gt;&lt;code&gt;handleMute&lt;/code&gt;, &lt;code&gt;handleUnmute&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Raising/lowering your hand (&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L257"&gt;&lt;code&gt;raiseHand&lt;/code&gt;, &lt;code&gt;lowerHand&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L278"&gt;Changing&lt;/a&gt;/getting a participant‚Äôs account type (e.g. upgrading a listener to a speaker)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.daily.co/reference/rn-daily-js/events"&gt;Adding Daily event listeners&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L22"&gt;Initializing app state&lt;/a&gt; that will be shared with other components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting with our app state, let‚Äôs look at which values we‚Äôll initialize and export to be used throughout our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// CallProvider.jsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CallProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setView&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PREJOIN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// pre-join | in-call&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCallFrame&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setParticipants&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRoom&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;roomExp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRoomExp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;activeSpeakerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setActiveSpeakerId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updateParticipants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUpdateParticipants&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="err"&gt;‚Ä¶&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CallContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;
     &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
       &lt;span class="nx"&gt;getAccountType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;changeAccountType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;handleMute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;handleUnmute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;joinRoom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;leaveCall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;endCall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;removeFromCall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;raiseHand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;lowerHand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;activeSpeakerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;roomExp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CallContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-updating-a-participant-type-works-using-raw-sendappmessage-endraw-"&gt;
  &lt;/a&gt;
  How updating a participant type works using &lt;code&gt;sendAppMessage&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In this demo, we manage participant types (moderator, speaker, or listener) by appending a string to the end of each participant‚Äôs username, which is not shown in the UI (e.g. &lt;code&gt;${username}_MOD&lt;/code&gt; for moderators).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ùóNote: For production-level apps, we recommend building a backend for participant type management. This current solution is meant to keep the code client-side for demo purposes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That said, let‚Äôs look at how participant type management works.&lt;/p&gt;

&lt;p&gt;Whenever a moderator updates another participant‚Äôs account type, that update will be communicated to other participants with the Daily method &lt;a href="https://docs.daily.co/reference/rn-daily-js/instance-methods/send-app-message"&gt;&lt;code&gt;sendAppMessage&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All participants will receive that app message via the &lt;code&gt;app-message&lt;/code&gt; event listener, which is added in &lt;code&gt;CallProvider&lt;/code&gt;: &lt;br&gt;
&lt;code&gt;callFrame.on('app-message', handleAppMessage);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will use the callback method &lt;code&gt;handleAppMessage&lt;/code&gt;, which will update the appended string on the username to the new account type (e.g.&lt;code&gt;_LISTENER&lt;/code&gt; to &lt;code&gt;_SPEAKER&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// CallProvider.jsx&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleAppMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[APP MESSAGE]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;MSG_MAKE_MODERATOR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[LEAVING]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leave&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
           &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[REJOINING AS MOD]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

           &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="c1"&gt;// Remove the raised hand emoji&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;‚úã&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;‚úã &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
             &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="nx"&gt;joinRoom&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
             &lt;span class="na"&gt;moderator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="p"&gt;});&lt;/span&gt;
           &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;MSG_MAKE_SPEAKER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="nx"&gt;updateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SPEAKER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;MSG_MAKE_LISTENER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="nx"&gt;updateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LISTENER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;FORCE_EJECT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="c1"&gt;//seeya&lt;/span&gt;
           &lt;span class="nx"&gt;leaveCall&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
           &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dIBqHf5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.05.38.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dIBqHf5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.05.38.gif" alt="Promoting a listener to speaker" width="800" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Making someone a moderator is slightly more complicated because they need to rejoin the call with a Daily token, which will give them the owner privileges they need to be able to mute other participants. To do this, we kick them out of the call quietly (&lt;code&gt;callFrame.leave()&lt;/code&gt;) and then immediately rejoin them as a moderator with an &lt;a href="https://docs.daily.co/reference/rest-api/meeting-tokens/create-meeting-token"&gt;owner token&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: To make a participant a meeting owner with a meeting token, the &lt;code&gt;is_owner&lt;/code&gt; token property must be &lt;code&gt;true&lt;/code&gt;. See our &lt;a href="https://docs.daily.co/reference/rest-api/meeting-tokens/config"&gt;token configuration docs&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we go through specific components below, we‚Äôll loop back to some of the other specific methods outlined in &lt;code&gt;CallProvider&lt;/code&gt; as they‚Äôre used.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prejoinroom-form"&gt;
  &lt;/a&gt;
  PreJoinRoom form
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;PreJoinRoom&lt;/code&gt; component is a form with three inputs (first name, last name, join code), and a button to submit the form. Only the first name is a required field; the last name is optional and if no join code is provided, we take that to mean the user wants to create a new room to join. &lt;/p&gt;

&lt;p&gt;Let‚Äôs focus on what happens when you submit the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// PreJoinRoom.jsx&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PreJoinRoom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;handleLinkPress&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;joinRoom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRoomName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;submitting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSubmitting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRequired&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submitForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;setRequired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;submitting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;setSubmitting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;setRequired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
       &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()?.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="cm"&gt;/**
        * We track the account type by appending it to the username.
        * This is a quick solution for a demo; not a production-worthy solution!
        */&lt;/span&gt;
       &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;LISTENER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;MOD&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;joinRoom&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;joinRoom&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;submitForm&lt;/code&gt;, we first make sure the first name is filled out. If not, we update our &lt;code&gt;required&lt;/code&gt; state value, which blocks the form from being submitted.&lt;/p&gt;

&lt;p&gt;Next, we get the local user‚Äôs username by joining the first and optional last name values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there‚Äôs a room code (&lt;code&gt;roomName&lt;/code&gt;) provided in the form, we assign that to our &lt;code&gt;name&lt;/code&gt; variable and update the username to have &lt;code&gt;_LISTENER&lt;/code&gt; appended to it.&lt;/p&gt;

&lt;p&gt;If there is no room code, we don‚Äôt set a room &lt;code&gt;name&lt;/code&gt; and append &lt;code&gt;_MOD&lt;/code&gt; to the username. As mentioned, the person creating the room is the moderator by default so we track that in the name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (roomName?.trim()?.length) {
    name = roomName;

    userName = `${userName}_${LISTENER}`;
} else {
    userName = `${userName}_${MOD}`;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have our &lt;code&gt;userName&lt;/code&gt; and optional room &lt;code&gt;name&lt;/code&gt;, we can then call &lt;code&gt;joinRoom&lt;/code&gt;, a method from &lt;code&gt;CallProvider&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinRoom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moderator&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leave&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;roomInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="cm"&gt;/**
    * The first person to join will need to create the room first
    */&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;moderator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;roomInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createRoom&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nx"&gt;setRoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;roomInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="cm"&gt;/**
    * When a moderator makes someone else a moderator,
    * they first leave and then rejoin with a token.
    * In that case, we create a token for the new mod here.
    */&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;moderator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// create a token for new moderators&lt;/span&gt;
     &lt;span class="nx"&gt;newToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Daily&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCallObject&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;videoSource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// This can be changed to your Daily domain&lt;/span&gt;
     &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://devrel.daily.co/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;roomInfo&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;roomInfo&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;roomInfo&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newToken&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;setCallFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalAudio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
       &lt;span class="nx"&gt;setView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;INCALL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;joinRoom&lt;/code&gt; has the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It leaves the current room if you‚Äôre somehow already in one. (This is mostly defensive programming for those terrible, horrible, no good, very bad code bug days.)&lt;/li&gt;
&lt;li&gt;It creates a new room with our &lt;code&gt;createRoom&lt;/code&gt; method mentioned above if a room name isn‚Äôt provided&lt;/li&gt;
&lt;li&gt;It creates a token if the participant joining is a moderator. This can happen if they are the first person to join &lt;em&gt;or&lt;/em&gt; if they‚Äôre rejoining as a moderator after being upgraded&lt;/li&gt;
&lt;li&gt;Next, we create our local Daily call object instance:
&lt;code&gt;const call = Daily.createCallObject({videoSource: false});&lt;/code&gt;
(We‚Äôll go into more detail about the &lt;code&gt;videoSource&lt;/code&gt; property below.)&lt;/li&gt;
&lt;li&gt;We also set our call options that we‚Äôll need before joining the call (room URL being joined, username, and optional token for moderators
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://devrel.daily.co/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;roomInfo&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; Finally, we join the call and update our local state accordingly, including updating our &lt;code&gt;view&lt;/code&gt; value to &lt;code&gt;incall&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;setCallFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="cm"&gt;/**
        * Now mute, so everyone joining is muted by default.
        */&lt;/span&gt;
       &lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalAudio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;setView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;INCALL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this is complete, we‚Äôll be brought to our &lt;code&gt;InCall&lt;/code&gt; component because of this condition in &lt;code&gt;App.js&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{view === INCALL &amp;amp;&amp;amp; &amp;lt;InCall handleLinkPress={handleLinkPress} /&amp;gt;}&lt;/code&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-incall-experience-moderators-and-the-rest-of-us"&gt;
  &lt;/a&gt;
  The in-call experience: Moderators and the rest of us
&lt;/h2&gt;

&lt;p&gt;Now that we know how to get into a call, let‚Äôs focus on how we actually use the &lt;a href="https://github.com/daily-co/react-native-daily-js#readme"&gt;&lt;code&gt;react-native-daily-js&lt;/code&gt;&lt;/a&gt; library to get our audio working. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;InCall&lt;/code&gt; component renders a &lt;code&gt;Participant&lt;/code&gt; component for each participant in the call, and displays them in the UI based on who can speak. Moderators and speakers are shown at the top and listeners are at the bottom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sT_pFo4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.12.43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sT_pFo4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.12.43.png" alt="Speakers and listeners in-call" width="880" height="704"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at how we render the &lt;code&gt;Speakers&lt;/code&gt; section, which includes moderators and speakers, i.e. anyone who can unmute themselves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// InCall.jsx&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;getAccountType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;]);&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;speakers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
     &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getAccountType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;SPEAKER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}),&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getAccountType&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The individual participant UI includes details like their name, initials, a star emoji if they‚Äôre a moderator, and a ‚Äúmore‚Äù menu with some actions depending on their participant type. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MfLv7Kqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.34.32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MfLv7Kqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.34.32.png" alt="Participant UI" width="163" height="177"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most important aspect of the &lt;code&gt;Participant&lt;/code&gt; component is not visible in the UI, though: the &lt;code&gt;DailyMediaView&lt;/code&gt; component!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Participant.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;DailyMediaView&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@daily-co/react-native-daily-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Participant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;modCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;zIndex&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;audioTrack&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DailyMediaView&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`audio-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;videoTrack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;audioTrack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;audioTrack&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a component imported from &lt;code&gt;react-native-daily-js&lt;/code&gt; and accepts audio and/or video tracks from your participants list, also provided by Daily's call object (recall: &lt;code&gt;callObject.participants()&lt;/code&gt;). Since this is an audio-only app, we set &lt;code&gt;videoTrack&lt;/code&gt; to null, and &lt;code&gt;audioTrack&lt;/code&gt; to each participant‚Äôs audio track:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Participant.jsx&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audioTrack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
     &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;playable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
       &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;
       &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the audio track is set, you will be able to hear the participant. üëÇ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sir-this-is-an-arbys-letting-moderators-mute-speakers"&gt;
  &lt;/a&gt;
  Sir, this is an Arby‚Äôs: Letting moderators mute speakers
&lt;/h3&gt;

&lt;p&gt;Now that we have the audio playing, let‚Äôs take a quick look at how we mute participants. &lt;/p&gt;

&lt;p&gt;As mentioned, only participants who joined with an &lt;a href="https://docs.daily.co/reference/rest-api/meeting-tokens/config"&gt;owner meeting token&lt;/a&gt; are permitted to mute others. (And, by the way, we don‚Äôt recommend ever letting participants &lt;em&gt;unmute&lt;/em&gt; other participants. It‚Äôs a bit invasive! üò¨)&lt;/p&gt;

&lt;p&gt;To do this, we can take advantage of Daily‚Äôs &lt;a href="https://docs.daily.co/reference/rn-daily-js/instance-methods/update-participant"&gt;&lt;code&gt;updateParticipant&lt;/code&gt; method&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;CallProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jsx&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleMute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[MUTING]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalAudio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateParticipant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;setAudio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;setUpdateParticipants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`unmute-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here in &lt;code&gt;CallProvider&lt;/code&gt;, we have one &lt;code&gt;handleMute&lt;/code&gt; method for participants to mute themselves or others. If they‚Äôre muting themselves, they call &lt;a href="https://docs.daily.co/reference/rn-daily-js/instance-methods/set-local-audio"&gt;&lt;code&gt;setLocalAudio(false)&lt;/code&gt;&lt;/a&gt;. If they‚Äôre muting someone else, they call &lt;code&gt;updateParticipant&lt;/code&gt; with the to-be-muted participant‚Äôs &lt;code&gt;session_id&lt;/code&gt; and a properties object with &lt;code&gt;setAudio&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-you-you-oughta-know"&gt;
  &lt;/a&gt;
  You, you, you, oughta know
&lt;/h2&gt;

&lt;p&gt;One important aspect of audio-only apps to be aware of is device permissions. Since Daily‚Äôs React Native library is compatible with audio and video apps, it will ask for microphone &lt;em&gt;and&lt;/em&gt; camera permissions, unless we intervene. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cw4ua-dG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/permissions.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cw4ua-dG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/permissions.png" alt="Device permission requests" width="880" height="688"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don‚Äôt address this issue, your app users will see both of these device permission requests, which may be a bit of a red flag üö© for them. (Why would you need camera permissions for an audio app? ü§î)&lt;/p&gt;

&lt;p&gt;To help your apps seem less ‚Äî well ‚Äî creepy, you can simply set &lt;code&gt;videoSource&lt;/code&gt; to false when you create the local call object instance. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;const call = Daily.createCallObject({videoSource: false});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Adding this one detail means your users are only asked for microphone permissions. üí´&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;We hope this overview of the Party Line app helps you better understand how it works under the hood. We couldn‚Äôt cover every detail, so check out these existing tutorials/resources that cover related topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our &lt;a href="https://www.daily.co/blog/how-to-build-a-billion-dollar-audio-app-in-a-weekend/"&gt;overview of the Party Line project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Creating &lt;a href="https://www.daily.co/blog/create-audio-only-meetings-with-daily/"&gt;audio-only calls with &lt;code&gt;daily-js&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://www.daily.co/blog/build-a-react-form-to-generate-daily-meeting-tokens/"&gt;tutorial on creating owner meeting tokens&lt;/a&gt; in React&lt;/li&gt;
&lt;li&gt;Our &lt;a href="https://github.com/daily-co/react-native-daily-js-playground"&gt;Playground app repo&lt;/a&gt; in case you‚Äôre interested in seeing a React Native video call example&lt;/li&gt;
&lt;li&gt;Building a video or &lt;a href="https://www.daily.co/blog/tutorial-embed-a-daily-video-call-in-any-notion-workspace-page/"&gt;audio-only call embedded in a webpage&lt;/a&gt; via a Chrome extension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our next React Native tutorial, we‚Äôll focus on building a video call app, so stay tuned for that! &lt;/p&gt;

&lt;p&gt;As always, if you have any questions, &lt;a href="https://www.daily.co/contact/support"&gt;let us know&lt;/a&gt;! &lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Cookie Cutter Flask - Generate Websites with ease</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 24 Nov 2021 15:31:54 +0000</pubDate>
      <link>https://dev.to/sm0ke/cookie-cutter-flask-generate-websites-with-ease-4c8a</link>
      <guid>https://dev.to/sm0ke/cookie-cutter-flask-generate-websites-with-ease-4c8a</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents an open-source tool that we can use to generate simple, yet modern presentation websites on top of Flask Framework. &lt;a href="https://blog.appseed.us/cookie-cutter-flask-generate-website-templates/"&gt;Cookie Cutter Flask&lt;/a&gt; extends the popular &lt;code&gt;CookieCutter&lt;/code&gt; command-line tool to build simple &lt;code&gt;Flask&lt;/code&gt; projects enhanced with database, authentication, and Docker support using a theme-able approach where the user can select the design during the generation process.  In the end, without any coding effort, the generator will provide a seed project similar to these LIVE samples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üëâ &lt;a href="https://flask-pixel-lite.appseed-srv1.com/"&gt;Flask Pixel Lite&lt;/a&gt; - LIVE demo (&lt;a href="https://github.com/app-generator/flask-pixel-lite"&gt;source code&lt;/a&gt; üîó)&lt;/li&gt;
&lt;li&gt;üëâ &lt;a href="https://flask-material-kit.appseed-srv1.com/"&gt;Flask Material Kit&lt;/a&gt; - LIVE demo (&lt;a href="https://github.com/app-generator/flask-material-kit"&gt;source code&lt;/a&gt; üîó)
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2G6P3qd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcz4zhpp1av7p4l1p2wi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2G6P3qd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcz4zhpp1av7p4l1p2wi.gif" alt="Cookie Cutter Flask - Material Kit Design, generated sample project." width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  ‚ú® How It works
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;CookieCutter&lt;/code&gt; tool is a popular open-source generator written in Python that knows how to build software projects using templates and user input. Basically, a codebase or a template project can be customized during the generation process based on the user input. Types of customizations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project name, author, and license type&lt;/li&gt;
&lt;li&gt;Decide the database type we will use in our project&lt;/li&gt;
&lt;li&gt;Inject deployment scripts for Docker&lt;/li&gt;
&lt;li&gt;Add or remove basic features (authentication, for instance)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to use our simple Flask generator, a short-list with tools should be already present in the workstation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Python3&lt;/code&gt; - the language that powers &lt;strong&gt;CookieCutter&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GIT&lt;/code&gt; - versioning command-line tool&lt;/li&gt;
&lt;li&gt;A modern editor like &lt;code&gt;VsCode&lt;/code&gt; or &lt;code&gt;Atom&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all the tools properly installed and accessible in the terminal window, we can proceed further with our setup.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;üëâ &lt;strong&gt;Step #1&lt;/strong&gt; - Install Python modules: CookieCutter and GitPython&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;cookiecutter
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;GitPython
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;üëâ &lt;strong&gt;Step #2&lt;/strong&gt; - Generate the project via &lt;a href="https://github.com/app-generator/cookiecutter-flask-sites"&gt;Flask Cookie Cutter&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cookiecutter https://github.com/app-generator/cookiecutter-flask-sites.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important step is when we select the design:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Select theme:
1 - material-kit
2 - pixel-lite
Choose from 1, 2 &lt;span class="o"&gt;[&lt;/span&gt;1]: 1      &amp;lt;&lt;span class="nt"&gt;---&lt;/span&gt; HERE We &lt;span class="k"&gt;select &lt;/span&gt;the UI
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As mentioned before, the generator is theme-able and we can choose the design: &lt;a href="https://flask-pixel-lite.appseed-srv1.com/"&gt;Pixel Lite&lt;/a&gt; or &lt;a href="https://flask-material-kit.appseed-srv1.com/"&gt;Material Kit&lt;/a&gt;.  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Pixel Lite - The Freelancer page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F6WGOIuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82z7hcza2n6nyxt08ker.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F6WGOIuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82z7hcza2n6nyxt08ker.png" alt="Pixel Lite - The Freelancer page." width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Material Kit Website - User Page  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fP4JEzZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqh57ya6kk5jjda5s4bh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fP4JEzZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqh57ya6kk5jjda5s4bh.png" alt="Material Kit Website - User Page." width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Once the &lt;code&gt;Cookie Cutter&lt;/code&gt; collects the input from the user, the selected theme is downloaded from Github and the project is generated by taking into account all user options.&lt;/p&gt;

&lt;p&gt;After the process is completed, we can compile and start the project using Docker or simply via a manual classic build for a Flask/Python project.&lt;/p&gt;

&lt;p&gt;For the complete build instructions, please access the source code published on Github or ask for support via email or &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;.  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources and support, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;üëâ AppSeed for &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; via Email and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üëâ &lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Free Dashboards&lt;/a&gt; - crafted in Django, Flask, and &lt;a href="https://appseed.us/apps/react"&gt;React&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>flask</category>
      <category>generators</category>
      <category>appseed</category>
    </item>
    <item>
      <title>Building A Text To Speech Converter For Beginners!</title>
      <author>Jai Krishna</author>
      <pubDate>Wed, 24 Nov 2021 15:28:58 +0000</pubDate>
      <link>https://dev.to/jaikt/building-a-text-to-speech-converter-for-beginners-4gpc</link>
      <guid>https://dev.to/jaikt/building-a-text-to-speech-converter-for-beginners-4gpc</guid>
      <description>&lt;p&gt;Hey everyone! Today we‚Äôll be building something just too awesome in this article, you will learn how to create a Text To Speech Converter with HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;I have worked very hard on this project to make it come true, all that for not even a single penny üòç. Do stargaze and support this project at the official repository for this project on &lt;a href="https://github.com/RoyalityFreeWebHosting/TextToSpeech"&gt;GitHub&lt;/a&gt; and a demo is available &lt;a href="https://royalityfree.com/opensource/TextToSpeech/"&gt;here&lt;/a&gt;!&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9VBAmKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gstatic.com/bricks/image/8ebd398d2db3f7da5bbd1a36ecfd8cb9cf41265d5250d5279fea0ac41823c4c6.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9VBAmKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gstatic.com/bricks/image/8ebd398d2db3f7da5bbd1a36ecfd8cb9cf41265d5250d5279fea0ac41823c4c6.svg" alt="Text To Speech" width="737" height="211"&gt;&lt;/a&gt;How Cloud Speech Works (Source: Google)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-text-to-speech-converter-in-the-first-place-core-basics"&gt;
  &lt;/a&gt;
  What Is Text To Speech Converter In The First Place? (Core Basics)
&lt;/h2&gt;

&lt;p&gt;Text To Speech (TTS) is a technology that empowers your text to be converted into speech verbal sounds.&lt;/p&gt;

&lt;p&gt;In this project (Text To Speech Converter), you can convert your text into speech with different voices and accents powered by native output methods for every type of device.&lt;/p&gt;

&lt;p&gt;A pause and resume button that is embedded into the core of your text is above the minimum requirement of ~125 words/characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-text-to-speech-converter-project-understanding-basics"&gt;
  &lt;/a&gt;
  About The Text To Speech Converter Project (Understanding Basics)
&lt;/h2&gt;

&lt;p&gt;In the JavaScript code, originally, I got the user text and call a function &lt;code&gt;textToSpeech()&lt;/code&gt; with parsing the user input text as an argument.&lt;/p&gt;

&lt;p&gt;Inside this function, leveraging the speech synthesis property of the window object, I converted the user input text to speech.&lt;/p&gt;

&lt;p&gt;Speech Synthesis is defined as a web speech API that moderates the speech service using native speech verbal‚Äôs available on the base device.&lt;br&gt;
After this, I got all the available verbal voices from the user device using the &lt;code&gt;getVoices()&lt;/code&gt; scheme of Speech Synthesis and insert it into the attributed HTML select tag. &lt;/p&gt;

&lt;p&gt;That‚Äôs all and I request you to continue reading to get more knowledge depth on what the code is actually performing.&lt;/p&gt;

&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RS-04ToN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sugermint.com/wp-content/uploads/2021/06/text-to-speech-software.jpg" alt="Best Text To Speech Software For Voice Over &amp;amp; Youtube Videos (USA 2021) - Text  To Speech Converter" width="728" height="405"&gt;Source: SugarMint
&lt;h2&gt;
  &lt;a href="#building-text-to-speech-converter-project-free-source-code-"&gt;
  &lt;/a&gt;
  Building Text To Speech Converter Project (Free Source Code üéâ)
&lt;/h2&gt;

&lt;p&gt;To build this Text To Speech Converter project, you need to create three core files, namely a &lt;code&gt;&lt;strong&gt;.html&lt;/strong&gt;&lt;/code&gt;, &lt;code&gt;&lt;strong&gt;.css&lt;/strong&gt;&lt;/code&gt; and a &lt;code&gt;&lt;strong&gt;.js&lt;/strong&gt;&lt;/code&gt; file. After organizing these files just paste the given codes into your file.&lt;/p&gt;

&lt;p&gt;You can further download the source code files of this Text To Speech Project from the proffered download button below at the end of this article.&lt;/p&gt;

&lt;p&gt;Firstly, create an HTML file with a filename of &lt;code&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/code&gt; and paste the following codes into your HTML file. &lt;strong&gt;Save It&lt;/strong&gt;, you‚Äôve to create a file with an &lt;code&gt;&lt;strong&gt;.html&lt;/strong&gt;&lt;/code&gt; extension at the last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
&amp;lt;!-- Built By RoyalityFree's Blog--&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Text To Speech | RoyalityFree Codes&amp;lt;/title&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css" integrity="sha512-YWzhKL2whUzgiheMoBFwW8CKV4qpHQAEuvilg9FAn5VJUDwKZZxkJNuGM4XkWuk94WCrrwslk8yWNGmY1EduTA==" crossorigin="anonymous" referrerpolicy="no-referrer" /&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous"&amp;gt;
    &amp;lt;link rel="stylesheet" href="assets/style.css"&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class="wrapper"&amp;gt;
     &amp;lt;div class="container-fluid"&amp;gt;
      &amp;lt;h2 class="h2 text-center"&amp;gt;
          Text To Speech
      &amp;lt;/h2&amp;gt;
      &amp;lt;form&amp;gt;
        &amp;lt;div class="form-group row"&amp;gt;
          &amp;lt;label class="col-sm- col-form-label"&amp;gt;Enter Text &amp;lt;span class="badge badge-success"&amp;gt;Max 5000 Letters&amp;lt;/span&amp;gt;
          &amp;lt;/label&amp;gt;
          &amp;lt;div class="col-15"&amp;gt;
              &amp;lt;textarea maxlength="5000"&amp;gt;&amp;lt;/textarea&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="form-group row"&amp;gt;
            &amp;lt;label&amp;gt;Select Voice&amp;lt;/label&amp;gt;
            &amp;lt;div class="outer"&amp;gt;
              &amp;lt;select&amp;gt;&amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="form-group row"&amp;gt;
          &amp;lt;div class="col-15"&amp;gt;
            &amp;lt;button type="submit" class="btn btn-primary"&amp;gt;Convert To Speech&amp;lt;/button&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/form&amp;gt;
     &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Secondly, create a CSS file with the filename of &lt;code&gt;&lt;strong&gt;style.css&lt;/strong&gt;&lt;/code&gt; and paste the following code in the file. &lt;strong&gt;Save It&lt;/strong&gt;, you have to create a file with &lt;strong&gt;&lt;code&gt;.css&lt;/code&gt;&lt;/strong&gt; extension at the last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Built By RoyalityFree's Blog | Codes */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&amp;amp;display=swap');
*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
} /*Applied Universally*/

body{
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background-image: linear-gradient(90deg, #1d4aff, #829bff,#1d4aff);
}

::selection{
  color: #fff;
  background: #5256AD; /* Change Selection Colour*/
}

.wrapper{
  width: 370px;
  padding: 25px 30px;
  border-radius: 7px;
  background: #fff;
  box-shadow: 7px 7px 20px rgba(0,0,0,0.05);
} /*Box Behind*/

.wrapper header{
  font-size: 28px;
  font-weight: 500;
  text-align: center;
}

.wrapper form{
  margin: 35px 0 20px;
}

form .row{
  display: flex;
  margin-bottom: 20px;
  flex-direction: column;
}

form .row label{
  font-size: 18px;
  margin-bottom: 5px;
}

form .row:nth-child(2) label{
  font-size: 17px;
}

form :where(textarea, select, button){
  outline: none;
  width: 100%;
  height: 100%;
  border: none;
  border-radius: 5px;
}

form .row textarea{
  resize: none;
  height: 110px;
  font-size: 15px;
  padding: 8px 10px;
  border: 1px solid #999;
}

form .row textarea::-webkit-scrollbar{
  width: 0px;
}

form .row .outer{
  height: 47px;
  display: flex;
  padding: 0 10px;
  align-items: center;
  border-radius: 5px;
  justify-content: center;
  border: 1px solid #999;
}

form .row select{
  font-size: 14px;
  background: none;
}

form .row select::-webkit-scrollbar{
  width: 8px;
}

form .row select::-webkit-scrollbar-track{
  background: #fff;
}

form .row select::-webkit-scrollbar-thumb{
  background: #888;
  border-radius: 8px;
  border-right: 2px solid #ffffff;
}

form button{
  height: 52px;
  color: #fff;
  font-size: 17px;
  cursor: pointer;
  margin-top: 10px;
  background: #675AFE;
  transition: 0.3s ease;
}

form button:hover{
  background: #4534fe;
}

@media(max-width: 728px){
  .wrapper{
    max-width: 345px;
    width: 100%;
    margin-left: 7px;
    margin-right: 7px;
  }
} /*For Mobile View*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, create a JavaScript file with a filename of &lt;strong&gt;&lt;code&gt;script.js&lt;/code&gt;&lt;/strong&gt; and paste the following code in your JavaScript file. &lt;strong&gt;Save It&lt;/strong&gt;, you have to create a file with &lt;strong&gt;&lt;code&gt;.js&lt;/code&gt;&lt;/strong&gt; extension at last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const textarea = document.querySelector("textarea"),
voiceList = document.querySelector("select"), // Selection
speechBtn = document.querySelector("button");

let synth = speechSynthesis,
isSpeaking = true;

voices();

function voices(){
    for(let voice of synth.getVoices()){
        let selected = voice.name === "Google US English" ? "selected" : "";
        let option = `&amp;lt;option value="${voice.name}" ${selected}&amp;gt;${voice.name} (${voice.lang})&amp;lt;/option&amp;gt;`;
        voiceList.insertAdjacentHTML("beforeend", option); // Getting Verbal's 
    }
}

synth.addEventListener("voiceschanged", voices);

function textToSpeech(text){
    let utterance = new SpeechSynthesisUtterance(text);
    for(let voice of synth.getVoices()){
        if(voice.name === voiceList.value){
            utterance.voice = voice;
        }
    }
    synth.speak(utterance);
}

speechBtn.addEventListener("click", e =&amp;gt;{
    e.preventDefault();
    if(textarea.value !== ""){
        if(!synth.speaking){
            textToSpeech(textarea.value);
        }
        if(textarea.value.length &amp;gt; 80){
            setInterval(()=&amp;gt;{
                if(!synth.speaking &amp;amp;&amp;amp; !isSpeaking){
                    isSpeaking = true;
                    speechBtn.innerText = "Convert To Speech"; //Execute
                }else{
                }
            }, 500);
            if(isSpeaking){
                synth.resume();
                isSpeaking = false;
                speechBtn.innerText = "Pause Speech"; //Pause
            }else{
                synth.pause();
                isSpeaking = true;
                speechBtn.innerText = "Resume Speech"; //Resume
            }
        }else{
            speechBtn.innerText = "Convert To Speech"; //Execute
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JB9ehwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://voximplant.com/assets/images/2020/05/28/text-to-speech-api-scheme-3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JB9ehwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://voximplant.com/assets/images/2020/05/28/text-to-speech-api-scheme-3.jpg" alt="How auto Text-to-Speech works?" width="880" height="386"&gt;&lt;/a&gt;Source: VoximPlant&lt;/p&gt;

&lt;h2&gt;Text To Speech  Converter (Last Words)&lt;/h2&gt;

&lt;p&gt;That‚Äôs it, you‚Äôve now successfully built a Text To Speech Converter Project in native HTML, CSS, and JavaScript. &lt;/p&gt;

&lt;p&gt;If your code does not work or you have faced any problem/issue, try downloading the source files from the provided download button below. &lt;/p&gt;

&lt;p&gt;It‚Äôs priceless and a &lt;strong&gt;&lt;code&gt;.zip&lt;/code&gt;&lt;/strong&gt; file will be downloaded and then just extract it to your filemanager, server, etc.&lt;/p&gt;



&lt;center&gt;&lt;a href="https://gplinks.co/text-to-speech"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K2xmvfpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6MyzmJa.png%3F1" width="200" height="64"&gt;&lt;/a&gt;&lt;/center&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Rust from the beginning, project management with Cargo</title>
      <author>Chris Noring</author>
      <pubDate>Wed, 24 Nov 2021 15:27:13 +0000</pubDate>
      <link>https://dev.to/azure/rust-from-the-beginning-project-management-with-cargo-3kfk</link>
      <guid>https://dev.to/azure/rust-from-the-beginning-project-management-with-cargo-3kfk</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TLDR; this article covers how to work with Rust projects using Cargo. As soon as you are dealing with more than one file, it's a good idea to adopt Cargo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/rust-from-the-beginning-your-first-program-30cp"&gt;Your first program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/rust-from-the-beginning-variables-3g7c"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/rust-from-the-beginning-functions-5gal"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust projects with Cargo, &lt;strong&gt;you are here&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Control flow&lt;/li&gt;
&lt;li&gt;IO, read and write from the console&lt;/li&gt;
&lt;li&gt;Error handling&lt;/li&gt;
&lt;li&gt;Working with files
Advanced&lt;/li&gt;
&lt;li&gt;Ownership &amp;amp; Borrowing&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project-management"&gt;
  &lt;/a&gt;
  Project management
&lt;/h2&gt;

&lt;p&gt;When you develop software, you have a few things you want need to consider. The following are some of the major things you need to keep track of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Many files&lt;/strong&gt;. For reasons of order, you quickly grow out of using more than one file to code in. Dividing up you code in many files enables you to get a clearer picture of what you're building, which creates order but makes it easier to collaborate with others and other benefits.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;3rd party libraries&lt;/strong&gt;. You can definitely write all the code yourself but it will take you a while, especially if your project is complicated. A better approach is to write business related code yourself and rely on standard libraries as well as 3rd party libraries for the remaining code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Building your project&lt;/strong&gt;. As your project grows, it becomes more and more complicated to build. You might need to build it differently for different operating systems and for development vs production for example.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Run tasks&lt;/strong&gt;. As part of creating a large project with many files, you will find yourself wanting to run various tasks on your project, like building, testing, linting and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/cargo/index.html"&gt;Cargo book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/learn/paths/rust-first-steps?wt.mc_id=academic-0000-chnoring"&gt;Learning path on Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://crates.io/"&gt;Crates.io&lt;/a&gt; Here you can find crates, i.e. packages you can use for your projects. You can also search for packages via the command line. Refer to Cargo book for how to search for that.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/learn/paths/rust-first-steps?wt.mc_id=academic-0000-chnoring"&gt;Rust path on Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cargo"&gt;
  &lt;/a&gt;
  Cargo
&lt;/h2&gt;

&lt;p&gt;Ok, now that we know a little more about projects and what we're expected to manage, how does Rust approach project management? The answer is Cargo. Cargo comes with your Rust install and helps you with a lot of things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creating a project&lt;/strong&gt;. Cargo helps you create a project and helps you track things like name, version, your dependencies, and other concepts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build and run your code&lt;/strong&gt;. Cargo can help you compile and run your code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Feature management&lt;/strong&gt;. You can also divide up your project in features, if you say have a client that only paid for a subset of features. In such a case you only want to ship part of the code to said client. Read more here on &lt;a href="https://doc.rust-lang.org/cargo/reference/features.html"&gt;feature management&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dependency management&lt;/strong&gt;. Your project will likely consist of dependencies, libraries or binaries that you use to build your app. You don't want to write code if there is code out there that already solves what you're trying to do.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Package management&lt;/strong&gt;. When you create a project with Cargo, it assumes your project will be a package. A package is something you can theoretically share with others&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Running tests&lt;/strong&gt;. Cargo can run tests. Read more here on &lt;a href="https://doc.rust-lang.org/cargo/commands/cargo-test.html"&gt;running tests&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above is some of Cargo's features, but hopefully right now, you know that Cargo is your best friend and that it's fantastic that a tool like this comes built-in with a Rust install.&lt;/p&gt;

&lt;p&gt;The topic of Cargo is so large there's a whole book dedicated to it, &lt;a href="https://doc.rust-lang.org/cargo/index.html"&gt;Cargo book&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exercise-your-first-project"&gt;
  &lt;/a&gt;
  Exercise - Your first project
&lt;/h2&gt;

&lt;p&gt;To create your first project using Cargo, you invoke the &lt;code&gt;cargo&lt;/code&gt; executable with keyword &lt;code&gt;new&lt;/code&gt; and lastly with the name of the project like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo new project-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creates a &lt;em&gt;project-name&lt;/em&gt; subdirectory. In said directory we get the following files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
  main.rs
.gitignore
Cargo.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what the files mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;main.rs&lt;/em&gt;, The &lt;em&gt;main.rs&lt;/em&gt; is our projects main file, the entry for our app. Here's what &lt;em&gt;main.rs&lt;/em&gt; contains:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;   &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Cargo.toml&lt;/em&gt;, this project file that does two things, manage meta information on this project and manage any dependencies your app needs to function. Here's what the file looks like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;   &lt;span class="nn"&gt;[package]&lt;/span&gt;
   &lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"project-name"&lt;/span&gt;
   &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;
   &lt;span class="py"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"email, inferred from Git"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="py"&gt;edition&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2018"&lt;/span&gt;

   &lt;span class="c"&gt;# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html&lt;/span&gt;

   &lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, you've got information on your project under the &lt;code&gt;[package]&lt;/code&gt; portion like name, version, authors, and edition. There's another section &lt;code&gt;[dependencies]&lt;/code&gt; that's empty for now, as you don't have any external dependencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-and-run-your-code"&gt;
  &lt;/a&gt;
  Build and run your code
&lt;/h3&gt;

&lt;p&gt;To build and run your project, call &lt;code&gt;cargo run&lt;/code&gt; in your project directory root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see an output resembling this text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Compiling project-name v0.1.0 (/&amp;lt;path&amp;gt;/project-name)
    Finished dev [unoptimized + debuginfo] target(s) in 21.51s
     Running `target/debug/project-name`
Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you see is Cargo building and running your code and it ends up showing the text "Hello world!".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exercise-make-a-change"&gt;
  &lt;/a&gt;
  Exercise - Make a change
&lt;/h2&gt;

&lt;p&gt;We've decided to make a nice looking CLI, command line application. For that, we will use an external library &lt;code&gt;termion&lt;/code&gt; that gives us a colored output. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;termion&lt;/code&gt; by opening up &lt;em&gt;Cargo.toml&lt;/em&gt; and located the [dependencies] section and make the following alteration:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;   &lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
   &lt;span class="py"&gt;termion&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now we're telling Cargo we want the library &lt;code&gt;termion&lt;/code&gt;, next let's leverage that library in our code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up &lt;em&gt;main.rs&lt;/em&gt; and change the code to the following:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;   &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;crate&lt;/span&gt; &lt;span class="n"&gt;termion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;termion&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}Red"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;color&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Fg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;color&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Red&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
     &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}Blue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;color&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Fg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;color&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Blue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
     &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Run your project with &lt;code&gt;cargo run&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   cargo run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you see now is your project going to "crates.io", where the "termion" package is located and attempt to download it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Updating crates.io index
   Downloaded termion v1.5.6
   Downloaded numtoa v0.1.0
   Downloaded libc v0.2.108
   Downloaded 3 crates (591.2 KB) in 0.52s
   Compiling libc v0.2.108
   Compiling numtoa v0.1.0
   Compiling termion v1.5.6
   Compiling project-name v0.1.0 (/&amp;lt;path&amp;gt;/project-name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;last in your terminal output, you see the colored output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--04DvYPBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vq38theauqew1edwktq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--04DvYPBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vq38theauqew1edwktq.png" alt="Colored output" width="146" height="68"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I read somewhere that this might not work on Windows, please let me know in the comments if you have issues getting this to work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article, we looked at a "grow up" story, when we went from using &lt;code&gt;rustc&lt;/code&gt; to compile our code and starting using Cargo for that and many other things. Project management means you have a lot of things to consider, and Cargo handles many of them. Cargo is your new best friend and hopefully you can learn more about using Cargo by the links provided in the resources section in this article. All future parts in this series will use Cargo. &lt;/p&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>3 Ways to CENTER a div in CSS</title>
      <author>CodeOz</author>
      <pubDate>Wed, 24 Nov 2021 15:11:19 +0000</pubDate>
      <link>https://dev.to/codeoz/3-ways-to-center-a-div-in-css-gl1</link>
      <guid>https://dev.to/codeoz/3-ways-to-center-a-div-in-css-gl1</guid>
      <description>&lt;p&gt;3 ways to center a div in HTML/CSS!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-position"&gt;
  &lt;/a&gt;
  With Position
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Using positions */&lt;/span&gt;

&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
     &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
     &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background: blue; width: 500px; height: 250px;"&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
         &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;
         &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: white;"&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      I'm center  
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/codeozz/embed/jOLoKYE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-flexbox"&gt;
  &lt;/a&gt;
  With Flexbox
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Using flexbox */&lt;/span&gt;
&lt;span class="nc"&gt;.container-flexbox&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
     &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-flexbox"&lt;/span&gt;
     &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background: green; width: 500px; height: 250px;"&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
         &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: white;"&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      I'm center  
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/codeozz/embed/mdMYKQv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-grid"&gt;
  &lt;/a&gt;
  With Grid
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Using Grid */&lt;/span&gt;

&lt;span class="nc"&gt;.container-grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;place-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
     &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-flexbox"&lt;/span&gt;
     &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background: orange; width: 500px; height: 250px;"&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
         &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: white;"&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      I'm center  
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/codeozz/embed/vYJwrMv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;I hope you like this reading!&lt;/p&gt;

&lt;p&gt;üéÅ You can get my new book &lt;code&gt;Underrated skills in javascript, make the difference&lt;/code&gt; for FREE if you follow me on &lt;a href="https://twitter.com/code__oz"&gt;Twitter&lt;/a&gt; and send message to me üòÅ and &lt;strong&gt;SAVE 19$&lt;/strong&gt; üíµüíµ&lt;/p&gt;

&lt;p&gt;Or get it &lt;a href="https://codeoz.gumroad.com/l/RXLYp"&gt;HERE&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;üá´üá∑ü•ñ For french developper you can check my &lt;a href="https://www.youtube.com/channel/UCC675U1ZUPFASsK9-FjawtA"&gt;YoutubeChannel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üéÅ &lt;a href="https://www.getrevue.co/profile/code__oz"&gt;MY NEWSLETTER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚òïÔ∏è You can &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;SUPPORT MY WORKS&lt;/a&gt; üôè&lt;/p&gt;

&lt;p&gt;üèÉ‚Äç‚ôÇÔ∏è You can follow me on üëá&lt;/p&gt;

&lt;p&gt;üïä Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë®‚Äçüíª Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can mark üîñ this article!&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>JAVASCRIPT CHEAT SHEET FOR BEGINNERS</title>
      <author>Keshav</author>
      <pubDate>Wed, 24 Nov 2021 15:08:27 +0000</pubDate>
      <link>https://dev.to/keshav44483499/javascript-cheat-sheet-for-beginners-kp3</link>
      <guid>https://dev.to/keshav44483499/javascript-cheat-sheet-for-beginners-kp3</guid>
      <description>&lt;p&gt;This video covers all topics in JavaScript Cheatsheet for beginners and this javascript cheat sheet contains all the commands which you will require while writing javascript code. Hope you will find this javascript cheat sheet helpful!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6tXroqr98aE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Drawing with Mr. Fourier and Typescript</title>
      <author>NordicBeaver</author>
      <pubDate>Wed, 24 Nov 2021 15:06:59 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/drawing-with-mr-fourier-and-typescript-5h70</link>
      <guid>https://dev.to/nordicbeaver/drawing-with-mr-fourier-and-typescript-5h70</guid>
      <description>&lt;p&gt;What if we connect a couple of rotating sticks together and trace the shape they make? We can get something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/VDbjh7etUnHmXXE05U/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/VDbjh7etUnHmXXE05U/giphy.gif" alt="Rotating Sticks" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most interesting part about this is if we get enough sticks we can draw anything we want!&lt;/p&gt;

&lt;p&gt;You can try it yourself &lt;a href="https://fourier-painter.nordicbeaver.io/"&gt;here&lt;/a&gt;. Just draw a &lt;strong&gt;closed&lt;/strong&gt; (that's pretty important) shape and press 'Start'.&lt;/p&gt;

&lt;p&gt;This is based on a thing caller &lt;em&gt;Fourier Transform&lt;/em&gt;. Basically, every complex function on a set interval can be represented as an infinite sum of exponents:&lt;/p&gt;

&lt;p&gt;

&lt;/p&gt;
&lt;div class="katex-element"&gt;
  &lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;f(t)=‚àën=‚àíinf‚Å°inf‚Å°cnen2œÄit,0‚â§t‚â§1
f(t) = \sum_{n=-\inf}^{\inf}c_n e^{n 2 \pi i t}, 
0 \le t \le 1
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;f&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord mathnormal"&gt;t&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mop op-limits"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;n&lt;/span&gt;&lt;span class="mrel mtight"&gt;=&lt;/span&gt;&lt;span class="mord mtight"&gt;‚àí&lt;/span&gt;&lt;span class="mspace mtight"&gt;&lt;/span&gt;&lt;span class="mop mtight"&gt;&lt;span class="mtight"&gt;i&lt;/span&gt;&lt;span class="mtight"&gt;n&lt;/span&gt;&lt;span class="mtight"&gt;f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="mop op-symbol large-op"&gt;‚àë&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mop mtight"&gt;&lt;span class="mtight"&gt;i&lt;/span&gt;&lt;span class="mtight"&gt;n&lt;/span&gt;&lt;span class="mtight"&gt;f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;‚Äã&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;c&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;‚Äã&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;n&lt;/span&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;œÄi&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mpunct"&gt;,&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;0&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;‚â§&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;t&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;‚â§&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;


&lt;p&gt;Where&lt;/p&gt;


&lt;div class="katex-element"&gt;
  &lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;cn=‚à´01f(t)e‚àín2œÄit
c_n = \int_0^1 f(t) e^{-n 2 \pi i t}
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;c&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathnormal mtight"&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;‚Äã&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mop"&gt;&lt;span class="mop op-symbol large-op"&gt;‚à´&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;‚Äã&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;f&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord mathnormal"&gt;t&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;&lt;span class="mord mtight"&gt;‚àí&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;n&lt;/span&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;œÄi&lt;/span&gt;&lt;span class="mord mathnormal mtight"&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;


&lt;p&gt;But if we look closer we may notice that every element of that sum is actually a rotating vector Cn. So if we manage to represent a shape as a complex function, we could find these vectors (maybe not all, since there is infinite number of them, but we don't need all) and that would mean drawing the shape just by rotating those vectors!&lt;/p&gt;

&lt;p&gt;I made a video where I tried to explain this in more detail and code it in TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sGwtJzLh6_k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Caching Anaconda environments on GitHub Actions</title>
      <author>epassaro</author>
      <pubDate>Wed, 24 Nov 2021 15:03:39 +0000</pubDate>
      <link>https://dev.to/epassaro/caching-anaconda-environments-on-github-actions-2d08</link>
      <guid>https://dev.to/epassaro/caching-anaconda-environments-on-github-actions-2d08</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;One of the most time-consuming tasks on my workflows is the solving, download and installation of Anaconda environments. In some cases, just solving the dependencies can take up to 10 minutes depending on the platform you are building on.&lt;/p&gt;

&lt;p&gt;This workflow aims to save time and computational resources by caching deployed Anaconda environments using the &lt;a href="https://github.com/actions/cache"&gt;&lt;code&gt;actions/cache&lt;/code&gt;&lt;/a&gt; task and the &lt;a href="https://github.com/conda-incubator/setup-miniconda"&gt;&lt;code&gt;conda-incubator/setup-miniconda&lt;/code&gt;&lt;/a&gt; action.&lt;/p&gt;

&lt;p&gt;Shorter build times and better resource management will benefit not just your organization but also the environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/epassaro"&gt;
        epassaro
      &lt;/a&gt; / &lt;a href="https://github.com/epassaro/cache-conda-envs"&gt;
        cache-conda-envs
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Speed up your builds by caching Anaconda environments on GitHub Actions
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
cache-conda-envs üêç ‚ö°
&lt;/h1&gt;
&lt;p&gt;Speed up your builds by caching Anaconda environments on GitHub Actions&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/epassaro/cache-conda-envs"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;I'm glad to say that the results of my work have been &lt;a href="https://github.com/conda-incubator/setup-miniconda/pull/200"&gt;recently added&lt;/a&gt; to the &lt;code&gt;conda-incubator/setup-miniconda&lt;/code&gt; action's &lt;a href="https://github.com/conda-incubator/setup-miniconda#caching-environments"&gt;documentation&lt;/a&gt; and should reach more developers soon.&lt;/p&gt;

&lt;p&gt;It's worth mentioning that the documentation of &lt;code&gt;actions/cache&lt;/code&gt; included use cases for many package managers, but not for &lt;code&gt;conda&lt;/code&gt;. On the other hand, the &lt;code&gt;setup-miniconda&lt;/code&gt; documentation described a way to cache the downloaded packages, but that method makes the pipelines even slower.&lt;/p&gt;

&lt;p&gt;Finally, I published a post describing the workflow step-by-step.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/epassaro" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ASgNKYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HsPDDyer--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/153937/0f98dd59-8ed3-4b1a-98fc-f6c903a48fb8.jpg" alt="epassaro"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/epassaro/caching-anaconda-environments-in-github-actions-5hde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Reduce your build times on GitHub Actions by caching Anaconda environments&lt;/h2&gt;
      &lt;h3&gt;epassaro „Éª Nov 8 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#actionshackathon21&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>actionshackathon21</category>
    </item>
    <item>
      <title>Client-side rendering, server-side rendering or static site generation. Which one should you choose?</title>
      <author>Niels Stubbe</author>
      <pubDate>Wed, 24 Nov 2021 15:01:34 +0000</pubDate>
      <link>https://dev.to/nstubbe/client-side-rendering-vs-server-side-rendering-vs-static-site-generation-41mh</link>
      <guid>https://dev.to/nstubbe/client-side-rendering-vs-server-side-rendering-vs-static-site-generation-41mh</guid>
      <description>&lt;p&gt;There's more to developing a website than throwing some HTML and back-end code together. An important consideration that is often overlooked, is how a website gets rendered and delivered to users. This can make or break the experience users have, and even severely influence a website's rankings in search engines.&lt;/p&gt;

&lt;p&gt;In this article we'll be taking a look at 3 different approaches to rendering websites with dynamic content, alongside their pros and cons&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-clientside-rendering"&gt;
  &lt;/a&gt;
  1. Client-side rendering
&lt;/h2&gt;

&lt;p&gt;Currently the most popular approach when it comes to web applications. Client-site rendering means the client (our user's browser) is responsible for rendering the dynamic parts of our website by leveraging JavaScript and a separate back-end API.&lt;/p&gt;

&lt;p&gt;React, Angular, Vue, JQuery, ... are mostly used for this approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;Let's say we have a website that shows a list of products. When a client loads the website, the browser fetches all the HTML, CSS and JavaScript files needed to initially display the page. &lt;/p&gt;

&lt;p&gt;However, our list of products isn't in those files. That's because we want our list to be dynamic. We want users to be able to sort, filter and search our list to find exactly what they are looking for.&lt;/p&gt;

&lt;p&gt;Instead the client will send a request to our back-end API to retrieve a list of products that match the selected filters. We get that list as a response, and then our client generates the necessary HTML elements to show the products on the page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-good"&gt;
  &lt;/a&gt;
  ‚úÖ The good
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Excellent for pages with a lot of dynamic and interactive content.&lt;/li&gt;
&lt;li&gt;Cost. We offload processing power (and thus costs) to our clients. Rendering the page is almost entirely done on their machine.&lt;/li&gt;
&lt;li&gt;Easier to scale. We can set up load balancers in front of our back-end API, without having to make changes in our client-side rendered application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-bad"&gt;
  &lt;/a&gt;
  üÖæÔ∏è The bad
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Client performance. Offloading the work to the client can have an impact on clients with lower end machines. This could be problematic when trying to provide services in lower income areas of the world.&lt;/li&gt;
&lt;li&gt;Bad for SEO. Not a good approach for pages that need to score high in search rankings. The dynamically loaded content could be missed by the crawlers that visit our website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;p&gt;Client-side rendering is best used when dealing with websites that have a lot of dynamic and interactive content, where scaling is important and where we don't really care about SEO. Usually these types of websites are web applications.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-serverside-rendering"&gt;
  &lt;/a&gt;
  2. Server-side rendering
&lt;/h2&gt;

&lt;p&gt;Another approach to showing users dynamic and interactive content, is rendering the page on the server and then sending the page to the client with all dynamic content already filled in. This approach is usually found on pages that don't have too many users and have 'basic' interactivity such as internal applications in companies.&lt;/p&gt;

&lt;p&gt;PHP and .NET MVC typically use this approach. We can also configure front-end frameworks such as Vue, React, etc... to use server-side rendering. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;Looking back at the previous example, we can still create a website with a dynamic list of products. However, instead of retrieving the list of products every time we change one of the filters and letting the client generate and render the HTML, we'll send the filter parameters to a back-end service. This back-end service will then generate the entire page and send it back to the client to display.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-good"&gt;
  &lt;/a&gt;
  ‚úÖ The good
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Faster setup time. Since all logic is in our back-end, there's a lot less boilerplate code we need to write, which can save a lot of time at the start.&lt;/li&gt;
&lt;li&gt;Can be faster than client-side rendering, depending on the clients machine and the complexity of the page that is being loaded.&lt;/li&gt;
&lt;li&gt;No JavaScript needed to create a functioning, interactive website.&lt;/li&gt;
&lt;li&gt;Good for search engines. Since all content is already included in the page on first load, this approach works much better for pages that need to have high search engine scores (such as product description pages).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-bad"&gt;
  &lt;/a&gt;
  üÖæÔ∏è The bad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Higher cost. A website with a lot of traffic will be much more costly to run when using server-side rendering, since all that rendering work on the server requires a lot of extra processing power.&lt;/li&gt;
&lt;li&gt;Does not scale as well. The required resources are directly proportional to the traffic on our website.&lt;/li&gt;
&lt;li&gt;Not using JavaScript has certain limits. It's important to know these limits and to accept them, instead of trying to work around them down the line. That last situation is something seen a lot in legacy applications, resulting in an unmaintainable mess for a code base.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;p&gt;Server-side rendering is best used for sites where we have a good idea of what traffic we can expect. An example of this is a corporate portal that's only accessible to employees. Here we know exactly how many users we can expect, and the amount of users will not be growing x1000 over night. A server-side rendered website that is open to the public however, can see its costs sky-rocket if the service suddenly goes viral. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-static-site-generation"&gt;
  &lt;/a&gt;
  3. Static site generation
&lt;/h2&gt;

&lt;p&gt;The final approach to rendering pages is to actually generate them up front. Both client-side and server-side rendering are 'on demand' approaches. The client visits our website and then our server or the clients renders the page they requested. &lt;/p&gt;

&lt;p&gt;Static site generation however will already have all the pages and their content stored on the hosting server, exactly how they'll be shown in the clients browser. This is also why the word 'rendering' is absent here. We don't render anything, because we generate everything up front, removing the burden of rendering content from both the server and the client. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;A static site it basically the default of how the web worked for a long time. We created the pages we wanted our website to have (home, about, contact, ...) and then hosted those on a web server. However, if we have a product catalogue, we don't want to create a new HTML page manually for each of the products we offer. &lt;/p&gt;

&lt;p&gt;Instead, we can use a static site generator. This way we can provide the list of products from an external API, and the static site generator will then use that list to create a page for each of our products that has all the information needed such as description, pictures, etc...&lt;/p&gt;

&lt;p&gt;My personal website, &lt;a href="http://www.stubbe.io"&gt;www.stubbe.io&lt;/a&gt;, is created using a static site generator. I use Nuxt.js which is based on Vue.js, but there are plenty of others such as Next.js, Hugo, Jekyll, etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-good"&gt;
  &lt;/a&gt;
  ‚úÖ The good
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Scales incredibly well. The page generation step only runs when deploying a new version of our website, so the bulk of needed processing power is limited to a short moment in time during each new deploy.&lt;/li&gt;
&lt;li&gt;Very cheap. Static pages can be hosted on almost any server. Combined with a form of caching, we can easily have thousands of visitors with almost no costs.&lt;/li&gt;
&lt;li&gt;Fast and lightweight. Because the pages already exist, clients only need to download and view the page. Neither the client nor the server need to waste any time processing logic.&lt;/li&gt;
&lt;li&gt;Excellent for SEO. Indexing a static website is a breeze for a crawler. The fast load times will also positively impact our ranking in most search engines.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-bad"&gt;
  &lt;/a&gt;
  üÖæÔ∏è The bad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Not for interactive pages. A fully searchable and filterable product list page is impossible to make static.&lt;/li&gt;
&lt;li&gt;Updates aren't instant. If we add a new product to our catalogue, we will need to re-generate and deploy our website before the product page can be visited.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;p&gt;Static site generation is best used when we have content that doesn't change often, and where our ranking in search engines is important. A blog is an excellent example of this. Another example are product description pages. &lt;/p&gt;

&lt;p&gt;More interactive pages such as tables, comment sections, etc... are not suitable to use with static site generation, since we expect them to change often due to actions of our users.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#in-conclusion-which-one-should-we-use"&gt;
  &lt;/a&gt;
  In conclusion, which one should we use?
&lt;/h2&gt;

&lt;p&gt;As with anything programming-related, there's no 'one size fits all' answer. I recommend taking a look at the pros and cons listed in this article and doing some further research before committing to an approach.&lt;/p&gt;

&lt;p&gt;Finally, keep in mind it's possible to combine different technologies. It would be great for interactive pages to be client-site rendered, because we want our user to be able to sort or filter our products, or edit their own profile. Meanwhile we want our product pages to score as high as possible in search engines, so why not statically generated those for the best possible performance?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this article and now have a better understanding of these three different approaches to generating and rendering dynamic pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Questions, remarks, feedback?&lt;/strong&gt; Reach out to me by email via &lt;a href="//mailto:niels@stubbe.io"&gt;niels@stubbe.io&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
