<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Mistakes I made while learning Web Development as a beginner</title>
      <author>Harshit Aditya</author>
      <pubDate>Fri, 03 Dec 2021 12:42:58 +0000</pubDate>
      <link>https://dev.to/harshitaditya1/mistakes-i-made-while-learning-web-development-as-a-beginner-4m7n</link>
      <guid>https://dev.to/harshitaditya1/mistakes-i-made-while-learning-web-development-as-a-beginner-4m7n</guid>
      <description>&lt;p&gt;This blog is all about mistakes I made while learning Full Stack Web Development as a beginner. I started my Web Development journey in November 2020. I made a lot of mistakes in Web Development and realized it while learning throughout the year. I have been doing Web Development for the past 1 year and am still learning it. In this blog, I will be talking about some of the major mistakes I made while learning Web Development and also provide solutions for them so that you won't make these mistakes. My major mistakes include: &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#not-taking-breaks"&gt;
  &lt;/a&gt;
  Not taking breaks
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/RicRd3dDNQJM3fmkzt/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/RicRd3dDNQJM3fmkzt/giphy.gif" alt="Breaks" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was very enthusiastic when learning Web Development in the beginning but I was not taking breaks after completing one part or portion of the course which I was following which broke my enthusiasm. Taking breaks is very important whether you are learning or building projects. If you are tired while learning then take a break and do it later when you feel free and energetic. If you got stuck in an error while building any project and you are trying to solve that issue for the last 2 to 4 hours then I would highly recommend leaving that problem and try to solve it the next day with a fresh mind. Most of the time I found that the very next day the issue or problem is solved.  This technique has worked with me 95% of the time. &lt;strong&gt;Working in a fresh mind and mood is very important. Do take breaks in an interval of time.&lt;/strong&gt;   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/cjKgv8Len6mwO0983e/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/cjKgv8Len6mwO0983e/giphy.gif" alt="Breaks" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#not-building-projects"&gt;
  &lt;/a&gt;
  Not Building Projects
&lt;/h1&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbrufIrO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1352965238388359169/VXfnxwaL_normal.jpg" alt="Harshit Aditya profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Harshit Aditya
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/harshitaditya1"&gt;@harshitaditya1&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Whenever you learn something in tech whether it's a programming language or a framework, do projects side by side this will help you to remember the concepts.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:05 AM - 13 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1392722604046176258" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1392722604046176258" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1392722604046176258" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
 

&lt;p&gt;Building projects are very important while learning any tech stack. Building projects will make your concepts clear and memorable. I will highly suggest you to start building projects while and after learning any concepts. For example, if you are learning HTML and CSS then you can create many static websites, and also if you have completed JavaScript you can create a ton of new projects. If you are following any course then most probably you will also get projects to build but I will recommend you to also build projects separate from the courses. This will help you to learn and grab more things faster related to the tech stack you are learning. YouTube and blogs are some great resources where you can get awesome project ideas. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbrufIrO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1352965238388359169/VXfnxwaL_normal.jpg" alt="Harshit Aditya profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Harshit Aditya
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/harshitaditya1"&gt;@harshitaditya1&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      This was one of the main points I lack during learning Web Development. I learned frontend and backend but I didn't do any projects side by side due to which I forgot many concepts.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:05 AM - 13 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1392722605669457922" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1392722605669457922" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1392722605669457922" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h1&gt;
  &lt;a href="#not-using-developer-tools"&gt;
  &lt;/a&gt;
  Not using Developer Tools
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Vhk9HwPx3TO0w/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Vhk9HwPx3TO0w/giphy.gif" alt="Mistakes" width="500" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was one the biggest mistake I committed with myself while learning Web Development. We can do a lot of things with Developer Tools. One of its features is that we can inspect our web app and find errors on it.  When I started building projects I faced two types of errors which are simple errors and internal errors. Simple errors include typing errors, missed semicolons, etc. Whereas internal errors are those which happens when you missed some important or major line of code or you typed it completely wrong. A simple error does not take much time to debug but an internal error takes a lot of time in debugging if we can't find where the problem is. Missing an import in React is an example of an internal error. I will also add a screenshot of an internal error that I faced while I was building a project.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c3KMjed6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s6hx325p25yy7d0gxfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c3KMjed6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s6hx325p25yy7d0gxfn.png" alt="Internal Errors" width="880" height="521"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;One of the internal error I faced while creating app in React &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer tools save a lot of time in debugging.&lt;/strong&gt; You can open Developer Tools in your browser by pressing Ctrl+Shift+I in windows and  ⌘ + ⌥ + I in Mac and start exploring the tools. There are various videos on YouTube where you can learn about Developer Tools and how to use them.    &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5LcLHRAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/wcFnnxfA70g/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5LcLHRAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/wcFnnxfA70g/maxresdefault.jpg" alt="Chrome Developer Tools" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
Chrome Developer Tools



&lt;h1&gt;
  &lt;a href="#not-taking-help-from-internet-and-developer-communities"&gt;
  &lt;/a&gt;
  Not taking help from internet and developer communities
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6shqFJbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FDh3wuQUcAAJnJI%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6shqFJbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FDh3wuQUcAAJnJI%3Fformat%3Djpg%26name%3Dlarge" alt="Mistakes" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the mistakes I made in the beginning while learning Web Development is that I don't take help from the internet. If you are stuck in an error then do take help from Google and Stack Overflow. &lt;strong&gt;Googling is a very important skill.&lt;/strong&gt; You can also take help from documentation for additional reference. Also, I will recommend you to take help from Developer communities. You can get one on one guidance and doubt clearing in developer communities. Also in Developer communities, you get an opportunity to grow your network and collaborate with more like-minded folks for a project or hackathons.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_xauBES4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FEGMGvvVkAMXcCr%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_xauBES4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FEGMGvvVkAMXcCr%3Fformat%3Djpg%26name%3Dlarge" alt="Community" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;
Community FTW 💯🎉



&lt;p&gt;These are some of the major mistakes I made while learning Web Development as an absolute beginner. I hope that this will save you a lot of time while learning web development. &lt;strong&gt;Mistakes will always happen while developing or building projects and these mistakes will give you the experience to become a better developer so never get scared or tensed when an error or issue occurs instead think that you are going to learn something new.&lt;/strong&gt; At last, I would like to thank you for taking the time for reading this blog. Please comment and do express your thoughts on this blog. If you have any queries regarding this blog, Web Development, etc. then feel free to contact me on Twitter (&lt;a href="https://twitter.com/HarshitAditya1"&gt;@HarshitAditya1&lt;/a&gt;). I am highly active on Twitter and I would be happy to solve your queries and have a conversation with you.    &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/m2WQBH7DhSdgLfnTUi/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/m2WQBH7DhSdgLfnTUi/giphy.gif" alt="Thank You" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Geolocation with Postgresql+Nestjs+Typeorm</title>
      <author>Ronny Medina</author>
      <pubDate>Fri, 03 Dec 2021 12:41:13 +0000</pubDate>
      <link>https://dev.to/ronnymedina/geolocation-with-postgresqlnestjstypeorm-1lc9</link>
      <guid>https://dev.to/ronnymedina/geolocation-with-postgresqlnestjstypeorm-1lc9</guid>
      <description>&lt;p&gt;Hi everyone. It's been a long time since I last posted something.&lt;/p&gt;

&lt;p&gt;Some time ago I needed create an application that using geolocation to find ads nearby. &lt;/p&gt;

&lt;p&gt;In my search, I take the easy solution which was to use Firebase.&lt;/p&gt;

&lt;p&gt;Integration was easy because it was a new project. I did some testing and this worked great. I don't have much experience with &lt;code&gt;Firebase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some problems I had were the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try modeling tables in &lt;code&gt;Firebase&lt;/code&gt; collections.&lt;/li&gt;
&lt;li&gt;Thinking about the cost.&lt;/li&gt;
&lt;li&gt;Difficulty trying to query multiple related collections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I had more experience with Firebase this would be easy for me, but it is not the case.&lt;/p&gt;

&lt;p&gt;So I found another solution that I think is easy to integrate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postindustria.com/postgresql-geo-queries-made-easy/"&gt;Geo postgresql&lt;/a&gt;. You can visit the original publication and see in more detail all the explanations.&lt;/p&gt;

&lt;p&gt;I did an example with &lt;a href="https://github.com/ronnymedina/geolocalizacion-con-postgresql-and-nodejs"&gt;Nestjs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can download this repository and run &lt;code&gt;docker-compose up -d&lt;/code&gt;, this should get the server up. And you can access url &lt;code&gt;/docs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope this publication is helpful to you. I made a video tutorial in Spanish.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yK8wK2O7Ge0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What are Snippets in VSCode?</title>
      <author>Mohammad Reza Ghasemi</author>
      <pubDate>Fri, 03 Dec 2021 12:40:22 +0000</pubDate>
      <link>https://dev.to/mrghasemi1992/what-are-snippets-in-vscode-1cfp</link>
      <guid>https://dev.to/mrghasemi1992/what-are-snippets-in-vscode-1cfp</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Code snippets are templates that make it easier to enter repeating code patterns, such as loops or conditional-statements. (&lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets"&gt;Visual Studio Code&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, in JavaScript, instead of inserting &lt;code&gt;console.log(’Hello World…’)&lt;/code&gt; you can use VSCode built-in snippet &lt;code&gt;log&lt;/code&gt; by inserting it, then press the tab button to show that entirely on the editor. There are many other built-in snippets on the VSCode that you can use:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Press &lt;code&gt;shift+cmd+p&lt;/code&gt; in Mac or &lt;code&gt;shift+ctrl+p&lt;/code&gt; in Windows to open the Command Palette.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Insert Insert Snippet command in the Command Palette to get a list of the snippets for the language of the current file, then press the enter button to see them.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;blockquote&gt;
&lt;p&gt;Many &lt;a href="https://code.visualstudio.com/docs/editor/extension-marketplace"&gt;extensions&lt;/a&gt; on the &lt;a href="https://marketplace.visualstudio.com/vscode"&gt;VS Code Marketplace&lt;/a&gt; include snippets. You can search for extensions that contain snippets in the Extensions view (&lt;code&gt;shift+cmd+x&lt;/code&gt; in Mac or &lt;code&gt;shift+ctrl+x&lt;/code&gt; in Windows) using the &lt;code&gt;@category:"snippets"&lt;/code&gt; filter. (&lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_install-snippets-from-the-marketplace"&gt;Visual Studio Code&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-your-own-snippets"&gt;
  &lt;/a&gt;
  How to create your own snippets?
&lt;/h2&gt;

&lt;p&gt;I’m working with React, and there is a popular snippet extension for React on the VS Code Marketplace, but most of its snippets are useless for me. So I prefer to create my own snippets instead.&lt;/p&gt;

&lt;p&gt;I want to create a React TypeScript component snippet which takes its name from the file name:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the Command Palette by pressing &lt;code&gt;shift+cmd+p&lt;/code&gt; in Mac or &lt;code&gt;shift+ctrl+p&lt;/code&gt; in Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Insert &lt;code&gt;configure user snippets&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the language for which the snippets &lt;br&gt;
should appear.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, to create a snippet for a React &lt;br&gt;
TypeScript file, choose &lt;code&gt;typescriptreact&lt;/code&gt; then press the enter button.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VSCode will open a &lt;code&gt;***.json&lt;/code&gt; (&lt;code&gt;typescriptreact.json&lt;/code&gt; for the previous selection).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Insert the below attribute on the &lt;code&gt;***.json&lt;/code&gt; (&lt;code&gt;typescriptreact.json&lt;/code&gt;) object:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React Arrow Function Component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prefix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trafc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type Props = {};&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;const $TM_FILENAME_BASE = ({}: Props) =&amp;gt; {&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;  return &amp;lt;&amp;gt;&amp;lt;/&amp;gt;;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;};&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;export default $TM_FILENAME_BASE;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Create TypeScript React arrow function component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;You can use &lt;code&gt;trafc&lt;/code&gt; snippet for React TypeScript file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now I want to describe what the above code says:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“React Arrow Function Component” is the snippet name. It is displayed via IntelliSense if no &lt;code&gt;description&lt;/code&gt; is provided.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;prefix&lt;/code&gt; is the snippet that we can use on the VSCode to display the &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;body&lt;/code&gt; is an array of strings consisting of the code we want to be displayed via the &lt;code&gt;prefix&lt;/code&gt; snippet. Every line of our codes should be placed in a string. If you need to use enter character type &lt;code&gt;\n&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;description&lt;/code&gt; as its name shows is the description of our snippet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Another example is to create a ‍‍&lt;code&gt;console.log&lt;/code&gt; with a description like &lt;code&gt;console.log("status:", status)&lt;/code&gt;. The snippet configuration is shown in the below section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;console.log with description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prefix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;console.log('${1:desc}:', ${1:desc})&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Insert a console.log() with description as the           same as the variable.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The new thing is the &lt;code&gt;${1:desc}&lt;/code&gt;. The &lt;code&gt;1&lt;/code&gt; means after you insert the snippet, the cursor will be placed on that position.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;desc&lt;/code&gt; means these two parts should be the same in order to VSCode type them simultaneously. For more information &lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets"&gt;check this link&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>vscode</category>
      <category>snippet</category>
      <category>react</category>
      <category>typescript</category>
    </item>
    <item>
      <title>React</title>
      <author>Doordashcon</author>
      <pubDate>Fri, 03 Dec 2021 12:38:56 +0000</pubDate>
      <link>https://dev.to/doordashcon/react-2ini</link>
      <guid>https://dev.to/doordashcon/react-2ini</guid>
      <description>&lt;p&gt;All our handlers have been created, now it's time to connect our server to the client.&lt;br&gt;
Remember including &lt;a href="https://docs.rs/actix-cors/0.5.3/actix_cors/struct.Cors.html#method.permissive"&gt;&lt;code&gt;Cors::permissive()&lt;/code&gt;&lt;/a&gt; as one of the middle ware services available for the server, this will enable our client connect to the server. Also keep in mind that this particular way of granting access to an external service is only for development, &lt;a href="https://docs.rs/actix-cors/0.5.3/actix_cors/struct.Cors.html#example"&gt;&lt;code&gt;Cors::default()&lt;/code&gt;&lt;/a&gt; is the standard for production.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-client"&gt;
  &lt;/a&gt;
  Create Client
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# run the setup command&lt;/span&gt;
npx create-reat-app client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Delete the following files in the &lt;code&gt;src&lt;/code&gt; &amp;amp; &lt;code&gt;public&lt;/code&gt; directory except.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/App.js&lt;/code&gt;&lt;br&gt;
&lt;code&gt;src/index.js&lt;/code&gt;&lt;br&gt;
&lt;code&gt;src/reportWebVitals.js&lt;/code&gt;&lt;br&gt;
&lt;code&gt;public/index.html&lt;/code&gt;&lt;br&gt;
&lt;code&gt;public/favicon.ico&lt;/code&gt;&lt;br&gt;
&lt;code&gt;public/manifest.json&lt;/code&gt;&lt;br&gt;
&lt;code&gt;public/robot.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Update the following files, as seen on the repo&lt;br&gt;
&lt;a href="https://github.com/Doordashcon/rust-server-react-client/blob/master/client/public/index.html"&gt;&lt;code&gt;public/index.html&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Doordashcon/rust-server-react-client/blob/master/client/public/manifest.json"&gt;&lt;code&gt;public/manifest.json&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Doordashcon/rust-server-react-client/blob/master/client/src/index.js"&gt;&lt;code&gt;src/index.js&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-axios"&gt;
  &lt;/a&gt;
  Using Axios
&lt;/h3&gt;

&lt;p&gt;In this context axios is used to send request from our JavaScript client to our Rust server and also receive response from our Rust server to our JavaScript client, install &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a new file in the src directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/config.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INVITATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:8080/api/invitation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;REGISTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:8080/api/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FOMO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:8080/api/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each constant variable represent routes for request handlers we previously defined.&lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;src/App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;INVITATION&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;REGISTER&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FOMO&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPath&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;invitation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;INVITATION&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;doordashcon@gmaill.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="na"&gt;withCredentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; 
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;REGISTER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pikachu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="na"&gt;withCredentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; 
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fomo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;FOMO&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;doordashcon@gmaill.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pikachu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;withCredentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;invitation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;Invitation&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&amp;gt;&amp;lt;br /&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nx"&gt;register&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fomo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;fomo&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>rust</category>
    </item>
    <item>
      <title>Full Stack Interview Help</title>
      <author>Medam Mahesh</author>
      <pubDate>Fri, 03 Dec 2021 12:36:53 +0000</pubDate>
      <link>https://dev.to/memahesh/full-stack-interview-help-1g4h</link>
      <guid>https://dev.to/memahesh/full-stack-interview-help-1g4h</guid>
      <description>&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;I have a Interview with Full Stack which requires NodeJS and ReactJs next weekend. I have worked with them for Freelance projects up until a year ago.&lt;/p&gt;

&lt;p&gt;The interview has pair coding round it seems. Now, I want to know the &lt;strong&gt;best coding practices to used for let's say a MERN stack&lt;/strong&gt; application. Any good open source projects for coding practices will be helpful.&lt;/p&gt;

&lt;p&gt;Also a good resource for interview questions preparation will be very helpful.&lt;/p&gt;

&lt;p&gt;Thanks in advance,&lt;/p&gt;

</description>
      <category>help</category>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>OAuth2 Authentication with API Gateway in a Distributed Environment</title>
      <author>znaczek</author>
      <pubDate>Fri, 03 Dec 2021 12:36:37 +0000</pubDate>
      <link>https://dev.to/sonalake/oauth2-authentication-with-api-gateway-in-a-distributed-environment-2ik8</link>
      <guid>https://dev.to/sonalake/oauth2-authentication-with-api-gateway-in-a-distributed-environment-2ik8</guid>
      <description>&lt;p&gt;Recently I was involved in a project in which the application was structured as a group of microservices. Users were interacting with the system through a web portal. The challenge we were facing was to prepare a tailored solution that would allow users to easily authenticate across the multiple components of the system.&lt;/p&gt;

&lt;p&gt;A lot has been written about distributed systems, as well as OAuth2, API gateways and Kubernetes separately. But when I was looking for ways to combine these technologies to build an end-to-end solution, I found that they are mostly described in isolation from other parts of the system. That’s why I decided to do a small experiment and find an elegant way to authenticate within this specific infrastructure.&lt;/p&gt;

&lt;p&gt;If you ever get a similar challenge, I hope that this will show you an example of integrating systems that don’t necessarily show you an easy way to do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;Before jumping straight to the project, let’s take a look at the specifics of the environment I was working with. You’ll need these if you try to reproduce the solution:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Kubernetes as an orchestration platform for the distributed environment.&lt;/li&gt;
&lt;li&gt; Users managed by an identity provider (IDP) following OAuth2/OIDC specification (e.g. Keycloak, Azure Active Directory etc.).&lt;/li&gt;
&lt;li&gt; Backend services authenticate/authorize users using stateless access token added to the request as Authorization header.&lt;/li&gt;
&lt;li&gt; AGW is the client application in OAuth2 terminology. In case the frontend needs data about authenticated users, it gets it from AGW.&lt;/li&gt;
&lt;li&gt; Session timeout – access to the system is denied after a given period of time since the last request.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#solution-overview"&gt;
  &lt;/a&gt;
  Solution overview
&lt;/h2&gt;

&lt;p&gt;This diagram shows the relationships between the individual components:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZSXKmPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sonalake.com/wp-content/uploads/2021/11/OAuth2-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZSXKmPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sonalake.com/wp-content/uploads/2021/11/OAuth2-1.png" alt="Kubernetes OAuth2 " width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s follow the request path (red arrows). Once a client browser reaches the K8s cluster, it enters the system through Kubernetes’ specialized load balancer, the Ingress controller, which in our case is implemented with Nginx. As we can see, all traffic goes through AGW. A natural consequence is that all routing happens inside AGW.&lt;/p&gt;

&lt;p&gt;We can see two streams of calls to IDP (the black arrows on the diagram). The first, coming out of AGW, is responsible for driving the authentication process which consists of acquiring the token and refreshing it within the requests so it doesn’t timeout. Additionally, AGW adds a login page URL (as a header) to unauthenticated requests to allow the client to start authentication. That’s the only small bit of FE participation in the authentication process.&lt;/p&gt;

&lt;p&gt;Why couldn’t AGW just send a redirect itself and mention the redirect location in a header? Because we are talking here about API calls only (which in a browser are XMLHttpRequest, not browser top-level navigation), we return 401 for unauthenticated requests, hence the browser won’t do top-level redirection based on these calls.&lt;/p&gt;

&lt;p&gt;The second stream coming out from the microservices is fetching public keys for token validation. We will take a closer look at that later on a sequence diagram.&lt;/p&gt;

&lt;p&gt;It is worth mentioning that AGW doesn’t authenticate requests. Someone could ask “why”, as authentication is very often associated with API gateways. Well, based on the above we can say that AGW drives the authentication, knows how to authenticate users, can acquire a token for a user (after user consent is given), but doesn’t authenticate the requests going through it. The reason behind this approach is that some of the services are protected, and some are public. Even in a single service, sometimes only a couple of endpoints could be protected instead of each one of them. That’s why I left the authentication/authorization of requests to the specific services. The implementation of course doesn’t prevent us from doing authentication also in AGW. It’s just a matter of choice.&lt;/p&gt;

&lt;p&gt;AGW (as we will see in the next section) is backed with &lt;em&gt;&lt;strong&gt;spring-cloud-gateway&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;spring-security-oauth2-client&lt;/strong&gt;&lt;/em&gt;. In this setup, the user session is kept inside the AGW. On the other hand, AGW is a regular Kubernetes deployment, which means that it can be evicted, restarted, scaled up and down at any time. That’s why we need a distributed session that persists throughout the service lifecycle. I decided to use a Redis backed WebSession.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-details"&gt;
  &lt;/a&gt;
  Implementation details
&lt;/h2&gt;

&lt;p&gt;In order to keep this clear and easy to read, I will focus only on the most important building blocks. If you’d like to see the full source code, you &lt;a href="https://github.com/sonalake/k8s-agw-oauth2"&gt;can find it on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The project consists of three components; two Java modules and a client portal. The first Java module named &lt;em&gt;&lt;strong&gt;&lt;code&gt;agw&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; is the AGW component, and the second called &lt;em&gt;&lt;strong&gt;&lt;code&gt;customers&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; is a BE microservice. Under the &lt;em&gt;&lt;strong&gt;&lt;code&gt;portal&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; directory we will find a React app that serves as a FE client.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#agw"&gt;
  &lt;/a&gt;
  AGW
&lt;/h3&gt;

&lt;p&gt;Let’s start with the dependencies. If we look inside &lt;em&gt;&lt;strong&gt;build.gradle&lt;/strong&gt;&lt;/em&gt;, we will find a few crucial dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring-boot-starter-oauth2-client&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; provides all the security mechanisms around OAuth2&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring-cloud-starter-gateway&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; is the spring implementation of gateway functionality, e.g. routing, enhancing the requests via filters etc.&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; together with &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring-session-data-redis&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; provide the distributed session functionality backed with Redis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we look at the application properties, we will find two especially interesting sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring.security.oauth2.client&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; – the configuration of OAuth2 client that the spring security will consume, for development purposes I used Keycloak as IDP (check README file in the source code for more reference)&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring.cloud.gateway&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; configures static routing rules and default filters. The first route exposes jwks-uri as an internal Kubernetes endpoint and the next two are rules for routing traffic to the portal and the customers service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let’s go through the code. We shall start from spring security configuration, as most of the functionality of this component relies on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Bean&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;SecurityWebFilterChain&lt;/span&gt; &lt;span class="nf"&gt;springSecurityFilterChain&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ServerHttpSecurity&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;formLogin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ServerHttpSecurity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FormLoginSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authorizeExchange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;     &lt;span class="c1"&gt;//1&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;anyExchange&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;permitAll&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;oauth2Login&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authorizedClientRepository&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authorizedClientRepository&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;   &lt;span class="c1"&gt;//2&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authenticationSuccessHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authenticationSuccessHandler&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//3&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;authenticationFailureHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authenticationFailureHandler&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//4&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;    
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logoutSuccessHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logoutSuccessHandler&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;// 5&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;csrf&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s look at what this does, other than some basic configuration:&lt;/p&gt;

&lt;p&gt;1) As mentioned earlier, AGW doesn’t authenticate requests, so we permit all of them.&lt;/p&gt;

&lt;p&gt;2) We need to make spring security work with a distributed session. Almost all classes that store some data are leveraging WebSession. Only the ServerOAuth2AuthorizedClientRepository needs to be defined to use the WebSession backed solution.&lt;/p&gt;

&lt;p&gt;3), 4), 5) Minor behaviours customisation in case of login success/failure and logout, mainly redirecting to the right place in the app after these actions complete.&lt;/p&gt;

&lt;p&gt;We also add 2 filters in the filters package:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;Global401Filter&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; – when downstream service returns 401 it adds login page URL in &lt;em&gt;&lt;strong&gt;&lt;code&gt;X-auth-entrypoint&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; header to allow the caller client to navigate the user to it.&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;&lt;strong&gt;&lt;code&gt;SessionFilter&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; – spring maintains the session itself, but it doesn’t expose session expiration to the requests, that’s why we calculate the expiration and add it as a cookie to every request so that the client app can react to it to improve user experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The controller package exposes the &lt;em&gt;&lt;strong&gt;&lt;code&gt;/whoami&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; endpoint that a client app can call to figure out whether the user is authenticated or not. If the user is authenticated, the endpoint returns status 200 with the user details payload. Otherwise, 401 status is returned with the login page URL in a header.&lt;/p&gt;

&lt;p&gt;At this point, let’s discuss the idea behind the above setup. &lt;em&gt;&lt;strong&gt;spring-security&lt;/strong&gt;&lt;/em&gt; will handle everything related to authentication, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  redirecting to the IDP login page after user reaches &lt;em&gt;&lt;strong&gt;&lt;code&gt;/oauth2/authorization/&amp;lt;client-registration-name&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; where – in our case – the registration name is &lt;em&gt;&lt;strong&gt;&lt;code&gt;iam&lt;/code&gt;&lt;/strong&gt;,&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  performing the OAuth2 authorization code exchange and automatically refreshing the access token,&lt;/li&gt;
&lt;li&gt;  storing users authentication details data in the session,&lt;/li&gt;
&lt;li&gt;  clearing the session on logout.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The session is persisted between requests using a SESSION cookie containing the session id. No other sensitive data (like OAuth token) is exposed to the frontend.&lt;/p&gt;

&lt;p&gt;One of the &lt;em&gt;&lt;strong&gt;spring-cloud-gateway&lt;/strong&gt;&lt;/em&gt; functionalities is routing traffic to the underlying services. A TokenRelay filter will also extract the access token stored in the user session and add it to outgoing requests as an &lt;em&gt;&lt;strong&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; header. That allows downstream services to authenticate the request.&lt;/p&gt;

&lt;p&gt;If the client app wants to authenticate the user, it can call the &lt;em&gt;&lt;strong&gt;&lt;code&gt;/whoami&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; endpoint. Based on the result it can perform any operation it wants (e.g. redirecting to the login page to start the authentication process). AGW doesn’t force any client behaviour, it only exposes the necessary data to perform authentication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-customers-microservice"&gt;
  &lt;/a&gt;
  The ‘customers’ microservice
&lt;/h3&gt;

&lt;p&gt;As stated in the requirements, BE microservices should do the authentication/authorization. We achieve that by using &lt;em&gt;&lt;strong&gt;&lt;code&gt;org.springframework.boot:spring-boot-starter-oauth2-resource-server&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;. To make it work, we need two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  In application properties under the &lt;em&gt;&lt;strong&gt;&lt;code&gt;spring.security.oauth2.resourceserver.jwt.jwk-set-uri&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; key, we define a URL under which the public keys are available,&lt;/li&gt;
&lt;li&gt;  when configuring &lt;em&gt;&lt;strong&gt;&lt;code&gt;HttpSecurity&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;, we enable the JWT resource server like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;http&lt;/span&gt;
  &lt;span class="err"&gt;…&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;oauth2ResourceServer&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jwtAuthenticationConverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jwtAuthenticationConverter&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;em&gt;&lt;strong&gt;&lt;code&gt;jwtAuthenticationConverter\&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; is responsible for converting token claims to &lt;em&gt;&lt;strong&gt;&lt;code&gt;Collection&amp;lt;GrantedAuthority&amp;gt;\&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;. We store the roles as a comma-separated list in one of the user claims.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#portal"&gt;
  &lt;/a&gt;
  Portal
&lt;/h3&gt;

&lt;p&gt;As mentioned above, the portal isn’t too involved in the authentication process. However, there are a few points that are worth highlighting.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;&lt;strong&gt;&lt;code&gt;src/index.tsx&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;, before the application starts, we call &lt;em&gt;&lt;strong&gt;&lt;code&gt;/whoami&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; (endpoint already discussed in the AGW section) and store the result for later usage. Once the user reaches the protected section of the app, which technically means entering an &lt;em&gt;&lt;strong&gt;src/AppInternal.tsx&lt;/strong&gt;&lt;/em&gt; component, the component will consume the &lt;em&gt;&lt;strong&gt;whoami&lt;/strong&gt;&lt;/em&gt; call result and it will either let the user in or redirect the user to the login page.&lt;/p&gt;

&lt;p&gt;To improve the user experience, we store the page URL when the &lt;em&gt;&lt;strong&gt;whoami&lt;/strong&gt;&lt;/em&gt; call returns 401. Then, after the user comes back authenticated, we can redirect the user back to the stored URL.&lt;/p&gt;

&lt;p&gt;Additionally, the &lt;em&gt;&lt;strong&gt;&lt;code&gt;src/components/session/Session.tsx&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; component will track the session expiration. It consumes the session expiration stored in the cookie set by the AGW. If the session is about to finish, the user gets notified with a pop-up. When the session expires, the user is logged out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sequence-diagram"&gt;
  &lt;/a&gt;
  Sequence diagram
&lt;/h2&gt;

&lt;p&gt;Let’s see what an example user scenario would look like. We assume that the user hasn’t been authenticated yet. The user wants to see the &lt;em&gt;&lt;strong&gt;&lt;code&gt;/customers&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; page. If we have looked at the portal behaviour for &lt;em&gt;&lt;strong&gt;&lt;code&gt;/customers&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; we would also notice that for an authenticated user, it will try to fetch data from the &lt;em&gt;&lt;strong&gt;&lt;code&gt;/api/customers&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt; endpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--po87EZPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sonalake.com/wp-content/uploads/2021/11/OAuth2-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--po87EZPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sonalake.com/wp-content/uploads/2021/11/OAuth2-2.png" alt="" width="880" height="1173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;As we can see, this is not a complicated setup. It’s just a bit of configuration. The &lt;em&gt;&lt;strong&gt;spring-cloud-gateway&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;spring-security-oauth2-client&lt;/strong&gt;&lt;/em&gt; libraries put together cover the claimed requirements almost out of the box. However, to correctly understand the capabilities of these libraries, I had to spend some time going through their source code.&lt;/p&gt;

&lt;p&gt;Additionally, due to the fact that &lt;em&gt;&lt;strong&gt;spring-cloud-gateway&lt;/strong&gt;&lt;/em&gt; is implemented using Spring WebFlux, it should by definition provide better resource utilisation. I strongly recommend looking at &lt;a href="https://spring.io/projects/spring-cloud"&gt;Spring Cloud&lt;/a&gt; solutions for any cloud-related topic.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>microservices</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Typing Effect by using CSS</title>
      <author>Jatin Sharma</author>
      <pubDate>Fri, 03 Dec 2021 12:35:11 +0000</pubDate>
      <link>https://dev.to/j471n/typing-effect-by-using-css-50p</link>
      <guid>https://dev.to/j471n/typing-effect-by-using-css-50p</guid>
      <description>&lt;p&gt;As you may have already seen some website which has some kind of typing animation. It looks cool right but what if I tell you it is very easy to do and you can do it with just CSS only, not without using JS.&lt;/p&gt;

&lt;p&gt;First of all, let's visualize what I am talking about - &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview"&gt;
  &lt;/a&gt;
  Preview
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e0J3cZIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/7PBxp4Q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e0J3cZIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/7PBxp4Q.gif" alt="preview" width="539" height="107"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's look at the code, how can we make that happen&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"typing"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;You had me at 'hello'.&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;HTML is very simple we just need to use only one element in order to make this work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Typing Class */&lt;/span&gt;
&lt;span class="nc"&gt;.typing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;t&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.15em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.15em&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;orangered&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typing&lt;/span&gt; &lt;span class="m"&gt;3.5s&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;cursor-blink&lt;/span&gt; &lt;span class="m"&gt;0.75s&lt;/span&gt; &lt;span class="n"&gt;step-end&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* The typing effect for the text */&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;typing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* The cursor  blinking effect */&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;cursor-blink&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;orangered&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/JjrdRmL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/JjrdRmL"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AKOF1Df--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MNtTdVp.png" alt="codepen" width="300" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;It is as simple as that, now you can use this in your projects wherever you want. You can also make that work with JS, but that's another story for another time. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/j471n"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUX4imFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/2QWo3cm.png" alt="buymecoffee" width="374" height="88"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#also-read"&gt;
  &lt;/a&gt;
  Also Read
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/curved-css-timeline-5ab3"&gt;Curved Timeline in CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/how-to-use-web-storage-api-3o28"&gt;How to use Web Storage API?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/video-as-text-background-using-css-58im"&gt;Video as Text background using CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Array - ArrayList / Array List - Linked List</title>
      <author>Agustin Tosco</author>
      <pubDate>Fri, 03 Dec 2021 12:20:09 +0000</pubDate>
      <link>https://dev.to/agustintosco/array-arraylist-in-java-jbp</link>
      <guid>https://dev.to/agustintosco/array-arraylist-in-java-jbp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#array-and-array-lists"&gt;
  &lt;/a&gt;
  Array and Array Lists
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fixed length&lt;/li&gt;
&lt;li&gt;Anything =&amp;gt; Primitives (integer, long, boolean) and also Objects (string, Dog, etc) &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#arraylist"&gt;
  &lt;/a&gt;
  ArrayList
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Dynamic length&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Only hold objects. ArrayList =&amp;gt; Error! but can you can use its class wrapper, e.g.: Integer for int.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access elements&lt;br&gt;
&lt;code&gt;array[1];&lt;/code&gt;&lt;br&gt;
&lt;code&gt;arrayList.get(1);&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get length&lt;br&gt;
&lt;code&gt;array.length;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;arrayList.size();&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add elements&lt;br&gt;
&lt;code&gt;Cannot do it with Arrays&lt;/code&gt;&lt;br&gt;
&lt;code&gt;arrayList.add("New element"));&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set an element&lt;br&gt;
&lt;code&gt;array[0] = "New element";&lt;/code&gt;&lt;br&gt;
&lt;code&gt;arrayList.set(0, "New element");&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove elements&lt;br&gt;
&lt;code&gt;Cannot be done it in arrays&lt;/code&gt;&lt;br&gt;
&lt;code&gt;arrayList.remove(1)&lt;/code&gt;&lt;br&gt;
or&lt;br&gt;
&lt;code&gt;arrayList.remove("Name of element to be removed")&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#array-lists-and-linked-lists"&gt;
  &lt;/a&gt;
  Array Lists and Linked Lists
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;They are both part of the Collection framework and they implement the List interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#linkedlist"&gt;
  &lt;/a&gt;
  LinkedList
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Each element is called a node and it has a reference / pointer to the next  and the previous node.&lt;/li&gt;
&lt;li&gt;The linked list start with a pointer to the first element (HEAD).&lt;/li&gt;
&lt;li&gt;They are not in contiguous memory spots.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#arraylist"&gt;
  &lt;/a&gt;
  ArrayList
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Good performance for random access.&lt;/li&gt;
&lt;li&gt;Not so good when adding or removing new elements, because it needs to run over all the array for changing only one element.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
    </item>
    <item>
      <title>Quick minilanguage to steer a submarine with Quackery</title>
      <author>Alex Esoposting</author>
      <pubDate>Fri, 03 Dec 2021 11:46:33 +0000</pubDate>
      <link>https://dev.to/olus2000/quick-minilanguage-to-steer-a-submarine-with-quackery-5401</link>
      <guid>https://dev.to/olus2000/quick-minilanguage-to-steer-a-submarine-with-quackery-5401</guid>
      <description>&lt;p&gt;Every year I try to solve &lt;a href="//adventofcode.com"&gt;Advent of Code&lt;/a&gt; with some esolang for as long as possible. This year's language of choice was &lt;a href="//github.com/GordonCharlton/Quackery"&gt;Quackery&lt;/a&gt;: a cute concatenative language based on Lisp and Forth, and when I saw the second puzzle I knew that language was perfect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h3&gt;

&lt;p&gt;Puzzle for day 2 of this year's AoC is about steering a submarine and figuring up what coordinates you end up on. Input is a set of simple commands like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;forward 5
down 5
forward 8
up 3
down 8
forward 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each command consists of one of three directions: &lt;code&gt;forward&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt; or &lt;code&gt;down&lt;/code&gt;, and a number indicating how far in this direction to swim. The important note is that we care about &lt;strong&gt;depth&lt;/strong&gt; and &lt;strong&gt;horizontal distance&lt;/strong&gt;, so &lt;code&gt;down&lt;/code&gt; would &lt;strong&gt;increase&lt;/strong&gt; depth, and &lt;code&gt;up&lt;/code&gt; would &lt;strong&gt;decrease&lt;/strong&gt; it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-idea"&gt;
  &lt;/a&gt;
  The idea
&lt;/h3&gt;

&lt;p&gt;A standard approach to such problem would be to iterate over the input string word by word and changing some state based on what words are read. For anyone familiar with concatenative languages this should sound familiar: it's exactly what the interpreter does to execute code! Given that one of the rules of concatenative programming is to never write the same code twice we should use the interpreter to run interpret our input for us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-quackery"&gt;
  &lt;/a&gt;
  About Quackery
&lt;/h3&gt;

&lt;p&gt;Quackery is a stack based concatenative language. Every word executed interacts with the main Data Stack: numbers put themselves on the stack and operators and user defined words act on top values of the stack. There are plenty of stack shuffling words to arrange the top of the stack for other operators. Most notable are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;dup&lt;/code&gt; - duplicate the top of the stack&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;drop&lt;/code&gt; - remove the top of the stack&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;swap&lt;/code&gt; - swap top two values on the stack
The rest will be explained when used.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-implementation"&gt;
  &lt;/a&gt;
  The implementation
&lt;/h3&gt;

&lt;p&gt;The Quackery inerpreter already recognises numbers so the only thing we need to define are direction words: &lt;code&gt;forward&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt;. In addition to that we need some state that these words would update, which I chose to be two numbers on the stack indicating depth and horizontal distance.&lt;/p&gt;

&lt;p&gt;To make things nicer I will define a state constructor word which just puts two zeroes on the stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight factor"&gt;&lt;code&gt;&lt;span class="nf"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;state:&lt;/span&gt; &lt;span class="nv"&gt;depth,&lt;/span&gt; &lt;span class="nv"&gt;horizontal-distance&lt;/span&gt; &lt;span class="nf"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;new-state&lt;/span&gt; &lt;span class="nf"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nf"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parenthesis in Quackery indicate comments, just as in Forth.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; should take a number that follows them and add or subtract from the second item on the stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight factor"&gt;&lt;code&gt;&lt;span class="n"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;swap&lt;/span&gt; &lt;span class="n"&gt;]'[&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;swap&lt;/span&gt; &lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="nf"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;'n&lt;/span&gt; &lt;span class="nf"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nf"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;swap&lt;/span&gt; &lt;span class="n"&gt;]'[&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;swap&lt;/span&gt; &lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="nf"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;'n&lt;/span&gt; &lt;span class="nf"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nf"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;]'[&lt;/code&gt; is used to take the item following the word currently executed, so it would be the number after &lt;code&gt;up&lt;/code&gt; or &lt;code&gt;down&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;forward&lt;/code&gt; is a bit tricky because it's already defined as a &lt;em&gt;builder word&lt;/em&gt; in Quackery, and redefining builders requires some trickery. I need to first define a normal word with the behaviour I want &lt;code&gt;forward&lt;/code&gt; to have and then redefine the builder &lt;code&gt;forward&lt;/code&gt; to build that behaviour:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight factor"&gt;&lt;code&gt;&lt;span class="n"&gt;[&lt;/span&gt; &lt;span class="n"&gt;]'[&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;forward-behaviour&lt;/span&gt; &lt;span class="nf"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;'n&lt;/span&gt; &lt;span class="nf"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nf"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;dip&lt;/span&gt; &lt;span class="n"&gt;[&lt;/span&gt; &lt;span class="n"&gt;'&lt;/span&gt; &lt;span class="n"&gt;forward-behaviour&lt;/span&gt;
        &lt;span class="n"&gt;nested&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt; &lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="n"&gt;]&lt;/span&gt;      &lt;span class="n"&gt;builds&lt;/span&gt; &lt;span class="n"&gt;forward&lt;/span&gt; &lt;span class="nf"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that the interpreter can understand our input as source code we just need to run it on said source code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight factor"&gt;&lt;code&gt;&lt;span class="n"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;dip&lt;/span&gt; &lt;span class="n"&gt;new-state&lt;/span&gt;
  &lt;span class="n"&gt;quackery&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;]&lt;/span&gt;   &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;solve-puzzle&lt;/span&gt; &lt;span class="nf"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;input&lt;/span&gt; &lt;span class="nf"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nf"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;dip&lt;/code&gt; takes the top item off the stack, runs the operator that follows it (in this case &lt;code&gt;new-state&lt;/code&gt;) and puts the item back on the stack. Coordinates are multiplied at the end to produce the answer that AoC will accept.&lt;/p&gt;

&lt;p&gt;Full code, along with the second part of the puzzle, can be found in my &lt;a href="https://github.com/olus2000/AoC/tree/main/2021/Quackery"&gt;AoC github repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This solution is a very minimalistic way of showing how easy and convenient it is to implement new languages in stack languages. This is a very useful feature because you don't need to implement a whole new interpreter, just define what each command does and tell the user what commands you support.&lt;/p&gt;

&lt;p&gt;If you want to fully understand the code I wrote there check out &lt;a href="https://github.com/GordonCharlton/Quackery/blob/main/The%20Book%20of%20Quackery.pdf"&gt;The Book of Quackery&lt;/a&gt;, a 100 page tutorial and documentation for the Quackery language written by it's author and available for free as a PDF. It's very newbie-friendly.&lt;/p&gt;

</description>
      <category>adventofcode</category>
      <category>concatenative</category>
      <category>esoteric</category>
      <category>programming</category>
    </item>
    <item>
      <title>Introducing GitLive's Early Access Program for JetBrains</title>
      <author>Agnieszka Stec</author>
      <pubDate>Fri, 03 Dec 2021 11:33:57 +0000</pubDate>
      <link>https://dev.to/gitlive/introducing-gitlives-early-access-program-for-jetbrains-1g8i</link>
      <guid>https://dev.to/gitlive/introducing-gitlives-early-access-program-for-jetbrains-1g8i</guid>
      <description>&lt;p&gt;We are always working on improving our product and would like our users to take an active part in shaping the future of GitLive. That’s why we are introducing an Early Access Program for the teams that use JetBrains IDEs (VS Code support coming soon)!&lt;/p&gt;

&lt;p&gt;By joining GitLive’s EAP you can test our latest features before the major release. Your feedback will help us address issues and make improvements before the official release.&lt;/p&gt;

&lt;p&gt;The EAP starts today with version 15.0.0 available via the EAP channel on the JetBrains marketplace. Please note, as is the case with all our major version updates, make sure your whole team installs the EAP, otherwise you may find some features do not work correctly. Of course, this means until we announce our Early Access Program for VS Code, teams that only use JetBrains IDEs should participate in the program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-in-gitlive-1500-eap"&gt;
  &lt;/a&gt;
  What’s new in GitLive 15.0.0 EAP?
&lt;/h2&gt;

&lt;p&gt;The latest version of GitLive shows changes from all branches in the team tree and via the change markers in the gutter of the editor (previously only the changes from each user’s current branch were shown). With this huge increase in visibility, we’ve also introduced powerful new filters to make it easier to find the users, issues, branches and changes you are interested in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;See all work in progress in a single view.&lt;/strong&gt; The team tree now shows every branch ahead of the repository’s default branch as well as unpushed changes from teammates’ local working copies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Enhanced tree view filters.&lt;/strong&gt; New view filters in the team tree allow you to filter users (online or offline), branches/issues (todo, in progress, stale) and changes (pushed or unpushed).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get notified of merge conflicts across all branches.&lt;/strong&gt; The change indicators in the gutter of the editor now shows changes from all branches as well as unpushed changes from teammates’ local working copies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;New gutter indicator filters.&lt;/strong&gt; You can now filter the change indicators shown in the gutter of your editor by change status (pushed, unpushed, non-conflicting, stale).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-join-the-eap"&gt;
  &lt;/a&gt;
  How to join the EAP
&lt;/h2&gt;

&lt;p&gt;By default, JetBrains IDEs are configured to use plugins from the JetBrains Plugin Repository. In order to install our EAP GitLive version, you will need to add EAP repository in your IDE settings.&lt;/p&gt;

&lt;p&gt;Open the IDE settings and select Plugins.&lt;br&gt;
Click the settings icon and select Manage Plugin Repositories.&lt;br&gt;
In the Custom Plugin Repositories dialog add the EAP repository: &lt;a href="https://plugins.jetbrains.com/plugins/eap/list"&gt;https://plugins.jetbrains.com/plugins/eap/list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zbpmTD_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638526573198/-srv7oOj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zbpmTD_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638526573198/-srv7oOj3.png" alt="eap-nord-scaled.png" width="880" height="392"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, when you search for plugins, your JetBrains IDE will show you results both from the default JetBrains Plugin Repository and the Early Access Program Repository. To learn more about the process you can visit &lt;a href="https://www.jetbrains.com/help/idea/managing-plugins.html#repos"&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharing-your-feedback-with-us"&gt;
  &lt;/a&gt;
  Sharing your feedback with us
&lt;/h2&gt;

&lt;p&gt;For suggestions, improvements and general feedback, you can open a new issue on our &lt;a href="https://github.com/GitLiveApp/GitLive/issues"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For bugs and unexpected behavior, it’s best to send an error report directly from your JetBrains IDE.&lt;/p&gt;

&lt;p&gt;You can report an issue by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;navigating to Find Action ( ⌘ ⇧ A) &amp;gt; Report Issue to GitLive. Click on the IDE error occurred notification, add a message with details and submit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For errors that have already occurred:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;click on IDE error occurred once you see it in your Event Logs. Check when the error occurred, add a message with details and submit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rza-C-KJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638527431957/aJytnG6wR.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rza-C-KJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638527431957/aJytnG6wR.gif" alt="eap-nord.gif" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now go ahead and look for GitLive in the JetBrains marketplace and install the newest GitLive version from EAP channel. Happy developing!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>news</category>
      <category>tooling</category>
      <category>programming</category>
    </item>
    <item>
      <title>Java Programming #2: Data Types</title>
      <author>luthfisauqi17</author>
      <pubDate>Fri, 03 Dec 2021 11:09:52 +0000</pubDate>
      <link>https://dev.to/luthfisauqi17/java-programming-2-data-types-4l2i</link>
      <guid>https://dev.to/luthfisauqi17/java-programming-2-data-types-4l2i</guid>
      <description>&lt;p&gt;When talking about programming and coding, it cannot be far away from &lt;strong&gt;Data&lt;/strong&gt;. Data by definition means an individual fact, and one example of a fact is the number. In the context of programming, there is a thing called &lt;strong&gt;Data Types&lt;/strong&gt;. From the name itself, Datatype literally means the type of data. The data types in Java is often be refering as the &lt;strong&gt;primitive data types&lt;/strong&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-primitive-data-types"&gt;
  &lt;/a&gt;
  1. Primitive data types
&lt;/h3&gt;

&lt;p&gt;There are three most common data types used in Java (you can refer to the rest of the types &lt;a href="https://www.baeldung.com/java-primitives#:~:text=2.-,Primitive%20Data%20Types,about%20memory%20management%20in%20Java"&gt;here&lt;/a&gt;), in which are &lt;strong&gt;int (Integer), double (Double), and char (Character)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Integer is the type of data that is used to store &lt;strong&gt;whole number&lt;/strong&gt;, in which is the number that consists of 0, 1, 2, 3, 4, ... (contains no fractions). Double is the type of data that is used to store &lt;strong&gt;decimal number&lt;/strong&gt;, in which is the number that consists of 0.1, 0.2, 0.3, 0.4, ... (contains fractions). And finally, Character is the type of data that define a &lt;strong&gt;character&lt;/strong&gt;, such as 'a', 'b', 'c'. &lt;/p&gt;

&lt;p&gt;You might ask, how about a text? is there any way that Java can define the datatype of a text? The answer is YES, in Java there is a thing called &lt;strong&gt;String&lt;/strong&gt;, String is a "Wrapper" class and I will cover this in later article.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-implementation-in-java"&gt;
  &lt;/a&gt;
  2. Implementation in Java
&lt;/h3&gt;

&lt;p&gt;The following is the coding along with its explanation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;chicken&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;cow&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;bird&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is the example of the data type implementation in Java. For you that wondering what is "chicken", "cow", and "bird" are, they are the "variable", and is used to store a data / value. To define the data type of a variable, a certain keyword needs to be placed beforehand. &lt;/p&gt;

&lt;p&gt;Let us see the variable &lt;code&gt;chicken&lt;/code&gt; in here, this variable is an &lt;strong&gt;Integer&lt;/strong&gt; variable, because the keyword &lt;code&gt;int&lt;/code&gt; is placed before the variable name. The same concept is also applied with the &lt;code&gt;cow&lt;/code&gt; in which a &lt;strong&gt;Double&lt;/strong&gt; variable and lastly the &lt;code&gt;bird&lt;/code&gt; that is a &lt;strong&gt;Character&lt;/strong&gt; variable.&lt;/p&gt;




&lt;p&gt;Alright, in this article we have seen what is a data type and how to implement it in a variable in Java. Eventhough the variable is already defined with its own data type, we have not define its value yet!, but do not worry, as in the later article, I will show you how to assign a value to each variable corresponding to their own data type.&lt;/p&gt;




&lt;p&gt;I hope that my article helps you to getting started in learning Java programming language. You can give this article some comments, as any feedback is very valuable and important to me (also suggest me some ideas that you think I need to cover). Thank you for reading this article, and have a nice day 😃&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.baeldung.com/java-primitives#:%7E:text=2.-,Primitive%20Data%20Types,about%20memory%20management%20in%20Java"&gt;https://www.baeldung.com/java-primitives#:~:text=2.-,Primitive%20Data%20Types,about%20memory%20management%20in%20Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://i.picsum.photos/id/730/1920/1080.jpg?hmac=zgyUxfPyOloYiT9MqMUZr8D-nVVZkhvm5EG2R1rTq7Q"&gt;https://i.picsum.photos/id/730/1920/1080.jpg?hmac=zgyUxfPyOloYiT9MqMUZr8D-nVVZkhvm5EG2R1rTq7Q&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Improve Your Coding Skills &amp; Productivity</title>
      <author>Yogesh Chavan</author>
      <pubDate>Fri, 03 Dec 2021 11:03:12 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/improve-your-coding-skills-productivity-5381</link>
      <guid>https://dev.to/myogeshchavan97/improve-your-coding-skills-productivity-5381</guid>
      <description>&lt;h2&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h2&gt;

&lt;p&gt;If you're following me on &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;LinkedIn&lt;/a&gt;, then you might already know that I regularly share useful tips, tricks &amp;amp; articles to help others.&lt;/p&gt;

&lt;p&gt;Many developers found the content useful But I was not having any resource where you will find my all tips, tricks and article together.&lt;/p&gt;

&lt;p&gt;And Because "A lot of my connections asked me whether I have a single resource where they can find the useful tips and tricks I share regularly and which are also shared in my lot of articles and tutorials."&lt;/p&gt;

&lt;p&gt;And the answer was always &lt;strong&gt;No&lt;/strong&gt;. So I wanted to create such a resource that is quick and easy to access whenever needed in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-of-ebook"&gt;
  &lt;/a&gt;
  Launch of Ebook
&lt;/h2&gt;

&lt;p&gt;So, I'm very excited to announce the launch of &lt;a href="https://tipsntricks.netlify.app/"&gt;130+ Tips, Tricks &amp;amp; Resources&lt;/a&gt; ebook today.&lt;/p&gt;

&lt;p&gt;The ebook includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; HTML, JavaScript, CSS, React, Node.js Tips &amp;amp; Tricks&lt;/li&gt;
&lt;li&gt;Useful JavaScript Code Snippets&lt;/li&gt;
&lt;li&gt;List of Useful Articles and Tutorials&lt;/li&gt;
&lt;li&gt;Resources of Preparing for Interview&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and a lot more.&lt;/p&gt;

&lt;p&gt;This ebook will help you to improve your coding skills and productivity.&lt;/p&gt;

&lt;p&gt;As a part of the launch offer, only for 2 days (Dec 03 - Dec 04), you will get the book  at just &lt;strong&gt;$8&lt;/strong&gt; instead of the regular price of &lt;strong&gt;$13&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, you can get my &lt;a href="https://modernjavascript.yogeshchavan.dev/"&gt;Mastering Modern JavaScript&lt;/a&gt; book and &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux Course&lt;/a&gt; at just &lt;strong&gt;$8&lt;/strong&gt; instead of the original price of &lt;strong&gt;$13&lt;/strong&gt; and &lt;strong&gt;$19&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;p&gt;I have also added a combined package where you can get both the books and the course at just $20.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I have never offered such a huge discount and will never be offered again so get your copy of the course and book today.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm sure you will find it useful. &lt;/p&gt;

&lt;p&gt;That's it about this short annoucement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Click the below image and get your copy of the ebook.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tipsntricks.netlify.app/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJmNkH0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tipsntricks.netlify.app/book_cover.jpg" width="479" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
      <category>node</category>
    </item>
  </channel>
</rss>
