<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Myths about Web Accessibility (Intro)</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 10 Sep 2021 21:32:07 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/myths-about-web-accessibility-29li</link>
      <guid>https://dev.to/alvaromontoro/myths-about-web-accessibility-29li</guid>
      <description>&lt;blockquote&gt;&lt;small&gt;&lt;strong&gt;There is an &lt;a href="https://dev.to/alvaromontoro/myths-about-web-accessibility-237k"&gt;all-in-one article including every part from this series&lt;/a&gt; (if you want prefer to read it all at once instead of "by installments")&lt;/strong&gt;&lt;/small&gt;&lt;/blockquote&gt;


&lt;p&gt;Web Accessibility is a must in every web development project, yet it seems to remain a mystery for many web developers. Like it's something legendary instead of an essential skill needed for the job.&lt;/p&gt;

&lt;p&gt;There are many misconceptions surrounding Web Accessibility, most of the time fueled by a lack of knowledge (or interest) in the matter. This article is a collection of some of those accessibility misconceptions or myths.&lt;/p&gt;

&lt;p&gt;Content of the series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accessibility is difficult&lt;/li&gt;
&lt;li&gt;Accessibility is expensive&lt;/li&gt;
&lt;li&gt;Accessible websites are ugly&lt;/li&gt;
&lt;li&gt;Accessibility is for blind people/screen readers&lt;/li&gt;
&lt;li&gt;Accessibility is for people with disabilities&lt;/li&gt;
&lt;li&gt;Automatic tests are enough for accessibility&lt;/li&gt;
&lt;li&gt;Accessibility overlays are enough to ensure Web Accessibility&lt;/li&gt;
&lt;li&gt;HTML is accessible by default&lt;/li&gt;
&lt;li&gt;No ARIA &amp;gt; Bad ARIA&lt;/li&gt;
&lt;li&gt;Prefers reduced motion means no motion&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thank you &lt;a href="https://twitter.com/toddlibby"&gt;Todd Libby&lt;/a&gt;, &lt;a href="https://twitter.com/ldenoue"&gt;Laurent Denoue&lt;/a&gt;, &lt;a href="https://twitter.com/ItsCrisDiaz"&gt;Cristian Diaz&lt;/a&gt;, &lt;a href="https://twitter.com/InHuOfficial"&gt;InHuOfficial&lt;/a&gt;, and &lt;a href="https://twitter.com/MaciejPedzich"&gt;Maciej Pędzich&lt;/a&gt;, for all your insights, feedback, and (constructive) criticism when writing the article.&lt;/p&gt;

&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/photos/YHR1vZ4-asY"&gt;Mike Hindle&lt;/a&gt; on Unsplash.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Myths about Web Accessibility</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 10 Sep 2021 20:22:03 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/myths-about-web-accessibility-237k</link>
      <guid>https://dev.to/alvaromontoro/myths-about-web-accessibility-237k</guid>
      <description>&lt;p&gt;Web Accessibility is a must in every web development project, yet it seems to remain a mystery for many web developers. Like it's something legendary instead of an essential skill needed for the job.&lt;/p&gt;

&lt;p&gt;There are many misconceptions surrounding Web Accessibility, most of the time fueled by a lack of knowledge (or interest) in the matter. This article is a collection of some of those accessibility misconceptions or myths.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accessibility is difficult&lt;/li&gt;
&lt;li&gt;Accessibility is expensive&lt;/li&gt;
&lt;li&gt;Accessible websites are ugly&lt;/li&gt;
&lt;li&gt;Accessibility is for blind people/screen readers&lt;/li&gt;
&lt;li&gt;Accessibility is for people with disabilities&lt;/li&gt;
&lt;li&gt;Automatic tests are enough for accessibility&lt;/li&gt;
&lt;li&gt;Accessibility overlays are enough to ensure Web Accessibility&lt;/li&gt;
&lt;li&gt;HTML is accessible by default&lt;/li&gt;
&lt;li&gt;No ARIA &amp;gt; Bad ARIA&lt;/li&gt;
&lt;li&gt;Prefers reduced motion means no motion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-is-difficult"&gt;
  &lt;/a&gt;
  Accessibility is difficult
&lt;/h2&gt;

&lt;p&gt;We often hear this term when a project is at an advanced stage and not accessible. "Accessibility is difficult!" As if it was a justifiable reason because of all the delays they are experiencing. &lt;/p&gt;

&lt;p&gt;But there's nothing further from the truth. &lt;strong&gt;Accessibility is not difficult.&lt;/strong&gt; Do you know what's difficult? Running at an Olympic level. Even more, just running is difficult. A baby needs 12 months to start crawling, walking, and finally running. It's a slow process that requires strengthening the muscles, getting coordination, practice, practice, and more practice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkXxvoaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ya5i5avoenellymas9xo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkXxvoaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ya5i5avoenellymas9xo.png" alt="A young woman and a young man athletes prepare to run in a training hall"&gt;&lt;/a&gt;&lt;/p&gt;
Alt text is difficult? Try running 100m in under 10 seconds (picture: &lt;a href="https://www.pexels.com/photo/young-athletes-preparing-for-running-in-training-hall-3764014/"&gt;
Andrea Piacquadio&lt;/a&gt;)&lt;br&gt; 



&lt;p&gt;On the other hand, a Web Developer can learn &lt;em&gt;at least&lt;/em&gt; the basics of Web Accessibility within hours, practice within days, and have a good grasp within weeks. Of course, they won't be experts. Still, they would be able to fix and prevent many of the issues highlighted in the &lt;a href="https://webaim.org/projects/million/"&gt;WebAIM Million report&lt;/a&gt; and avoid the main accessibility issues that plague the Internet nowadays.&lt;/p&gt;

&lt;p&gt;Obviously, there are more things to Web Accessibility than just the basics. Learning and mastering more advanced approaches takes time, but a good enough level is possible within a reasonable time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-is-expensive"&gt;
  &lt;/a&gt;
  Accessibility is expensive
&lt;/h2&gt;

&lt;p&gt;Is it expensive in time? Expensive in money? Both of them? Either way, it is a dubious claim that can be heard towards the end of projects in which they did not consider Web Accessibility at the early stages... which makes it expensive! Teams will have to work on issues after the fact, rebuilding the solution (almost from scratch in some cases), which will waste time and money. Something that they could have avoided if they had implemented accessibility at the start.&lt;/p&gt;

&lt;p&gt;If you have a car and the oil light goes on, you change the oil. It will take you a few minutes, either done by yourself or at the shop, and it will cost you just a few bucks. However, if you don't change the oil, chances are that your engine will seize up and break down after a while. The repair will be in the hundreds (or thousands) of dollars, and it will require a mechanic using special tools and parts. Not to mention that the car will be off-service for days or weeks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rBSwslqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9htrxkmdirxbj3g2kl1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rBSwslqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9htrxkmdirxbj3g2kl1.jpg" alt="A car with the hood up while a man looks inside"&gt;&lt;/a&gt;&lt;/p&gt;
Don't blame the car! You drove with the oil light on for 50 miles! (picture: &lt;a href="https://www.pexels.com/photo/repairing-a-car-6078/"&gt;
Kaboompics&lt;/a&gt;)&lt;br&gt; 



&lt;p&gt;&lt;strong&gt;If you apply Web Accessibility at the right time (at the start of a project), it will cost less in the long run and save many headaches and stress to the team&lt;/strong&gt;. But if you wait to do it until you have to (e.g., after users complain or you get a lawsuit), then it will be expensive and painful. In addition, it will require specialists and be time-consuming.&lt;/p&gt;

&lt;p&gt;Taking into consideration that &lt;a href="https://www.ruhglobal.com/disability-influences-trillion-dollars-david-perez/"&gt;people with disabilities have a purchasing power of 1.3 trillion dollars&lt;/a&gt; (over &lt;a href="https://www.computerworld.com/article/2701645/8-trillion-reasons-to-make-your-technology-accessible.html"&gt;8 trillion including relatives and friends&lt;/a&gt;), maybe it's time to stop talking about Web accessibility as an expensive feature, and start presenting it as a profitable one. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessible-websites-are-ugly"&gt;
  &lt;/a&gt;
  Accessible websites are ugly
&lt;/h2&gt;

&lt;p&gt;Nothing could be further from the truth. Accessibility doesn't determine if a website is ugly or not. There are beautiful, accessible websites and really ugly non-accessible websites. Accessible websites will be as ugly (or as beautiful) as they are designed to be. Like any other website!&lt;/p&gt;

&lt;p&gt;This myth has gone a long way. It has existed since Web Accessibility is a thing (which means, basically since the beginning of the Internet) and it is rooted in a misconception. Before, the idea of accessibility was linked to no styles, no animations, no images, no videos... no nothing. A bland, dull, ugly site. But that doesn't have to be the case.&lt;/p&gt;

&lt;p&gt;Some of the accessibility requirements will indeed limit the creativity of designers and developers (e.g., sometimes finding an accessible color palette can be a challenge), but there are many tools online that will help with that. Plus, the different standards have evolved to include many accessibility features.&lt;/p&gt;

&lt;p&gt;We need to ditch the idea of building a website and then uglifying it to make it accessible. That's an old-school mentality. Accessible websites can be visually striking, animated, fun, interactive sites from the start. And good designers are doing a great job at infusing inclusiveness and accessibility out of the box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-is-for-blind-peoplescreen-readers"&gt;
  &lt;/a&gt;
  Accessibility is for blind people/screen readers
&lt;/h2&gt;

&lt;p&gt;With the most popular assistive technologies being focused on people with visual disabilities, it is &lt;em&gt;tempting&lt;/em&gt; to think that accessibility is mainly for blindness.&lt;/p&gt;

&lt;p&gt;But there's more to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deaf or deaf-blind people,&lt;/li&gt;
&lt;li&gt;People using automatic page-turners, adaptive pencil grips, or assistive pointer devices,&lt;/li&gt;
&lt;li&gt;People with vestibular disorders,&lt;/li&gt;
&lt;li&gt;Keyboard users, braille devices users, sip-and-puff device users, to name a few.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The people who require Web Accessibility are not a homogeneous group. Therefore, we cannot apply a one-size-fits-all type of solution and move forward with it.&lt;/p&gt;

&lt;p&gt;Take the online controversy that happened not so long ago as an example: a blind person organized a ClubHouse meeting about Web Accessibility. Soon, he got some backlash from the Deaf community as ClubHouse is a notoriously inaccessible platform, and the gathering excluded people with hearing problems.&lt;/p&gt;

&lt;p&gt;Is it really possible to talk about accessibility while focusing only on visual disabilities? Without including all people involved? The answer is no.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-is-for-people-with-disabilities"&gt;
  &lt;/a&gt;
  Accessibility is for people with disabilities
&lt;/h2&gt;

&lt;p&gt;This myth is a variation of the above. We already made clear that accessibility is not only for blind people, but we must not think it only impacts people with disabilities. It actually affects everyone!&lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://userway.org/blog/how-situational-disabilities-impact-us-all"&gt;invisible and situation disabilities&lt;/a&gt; that impair people and limit what they can do temporarily (or even permanently). You may...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;...break a bone while playing basketball and be unable to use the mouse/keyboard on your computer. &lt;/li&gt;
&lt;li&gt;...be pregnant or have restless children that don't let you sleep at night, and then have sleep deprivation that doesn't let you focus during the day.&lt;/li&gt;
&lt;li&gt;...get an ear infection that baffles the sounds and prevents you from hearing your phone.&lt;/li&gt;
&lt;li&gt;...have common migraines that cause you to have "clouded vision" and short attention spans.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are surrounded by examples like these. Every day. Everywhere. Pay attention, and you will start noticing them more and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39z0wnUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37uliedl4sylfq00311m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39z0wnUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37uliedl4sylfq00311m.jpg" alt="Photography showing different runners in a race. One of them is in a wheelchair"&gt;&lt;/a&gt;&lt;/p&gt;
If I said 3 of these people had disabilities. Could you tell who? (picture: &lt;a href="https://www.pexels.com/photo/group-of-men-running-on-streets-2403057/"&gt;
RUN 4 FFWPU&lt;/a&gt;)&lt;br&gt; 



&lt;p&gt;Some people may think now:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Those are disabilities! Also, that's great... but that's not me. I have never broken a bone, and I don't plan on having kids, and I have loud ringtones... Oh, and I will stay young forever, too. So Web Accessibility doesn't apply to me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Great confidence there, but that's wrong. Even if you are a fully healthy individual, you may find yourself in situations where Web Accessibility will help you. For example, using your laptop outside and the reflection doesn't let you read, wouldn't you want more contrast? Camping in the forest and the key images for the "what to do when a snake bites you?" article timeout or don't load correctly, wouldn't you want an alternative text that would help you?&lt;/p&gt;

&lt;p&gt;There are many more examples like that: people in remote areas with low connection, people with not state-of-the-art computers and phones, granny asking you for help because the text is too small to read... Don't underestimate the reach of Web Accessibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-tests-are-enough-for-accessibility"&gt;
  &lt;/a&gt;
  Automatic tests are enough for accessibility
&lt;/h2&gt;

&lt;p&gt;Automated testing for accessibility is possible and highly recommended. But it is not a replacement for manual testing: automatic tests only &lt;a href="https://alphagov.github.io/accessibility-tool-audit/index.html"&gt;detect ~30% of the issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even if we can simulate a user's behavior with the keyboard and tab, check for color contrast, or a specific HTML structure, there are still tests that we cannot automate and behaviors that we cannot simulate. Thus, limiting the capacity of what automated tests can do.&lt;/p&gt;

&lt;p&gt;This is not to say that we should drop automatic accessibility tests. On the contrary, we should embrace them and use them in all our projects. It is important to remember that they complement and not replace good old manual testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overlays-are-enough-to-ensure-web-accessibility"&gt;
  &lt;/a&gt;
  Overlays are enough to ensure Web Accessibility
&lt;/h2&gt;

&lt;p&gt;This is more a misconception among executives and people who make decisions about buying these types of solutions. The consensus in the Accessibility community is almost unanimous: overlays don't work. &lt;a href="https://overlayfactsheet.com/"&gt;None of them fully work&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An overlay is an automated technology aimed at improving the accessibility of a website. It may come in many flavors: plug-ins, add-on libraries, toolbars, widgets... but their functionality is similar: modify the page's source code on the fly and repair the non-accessible code, replacing it with an accessible version. Something really tempting at an affordable price and with just a single line of JavaScript.&lt;/p&gt;

&lt;p&gt;One line of JavaScript does not make a website 100% accessible. In some cases, the results may even be damaging. And all for just a little benefit, as people with disabilities already use tools that fix many of the issues that the overlays claim to fix.&lt;/p&gt;

&lt;p&gt;As we mentioned in a previous section, there is no one-size-fits-all solution for Web Accessibility. And that's exactly what overlays try to be.&lt;/p&gt;

&lt;p&gt;Things may change. While accessibility overlays may not be enough to ensure Web Accessibility at the moment, with the advances in AI and machine learning, they might become an alternative in the future. But currently, they aren't a solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-is-accessible-by-default"&gt;
  &lt;/a&gt;
  HTML is accessible by default
&lt;/h2&gt;

&lt;p&gt;We've heard many times developers say, "&lt;em&gt;HTML is accessible out of the box&lt;/em&gt;," almost as if the definition of HTML in the dictionary was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Accessible.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But that is not always the case. There are HTML elements that are not accessible by themselves or may present challenges to the users.&lt;/p&gt;

&lt;p&gt;For example, elements like &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/Multimedia"&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; have controls that are not fully keyboard-accessible&lt;/a&gt; and that differ considerably from browser to browser and cause frustration. Or the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element has many types that open pop-ups, which may not be accessible for everyone.&lt;/p&gt;

&lt;p&gt;There are many components and structures that are not native HTML elements (e.g., tab panels), and once we start combining HTML, accessibility issues may pop up from the interaction.&lt;/p&gt;

&lt;p&gt;The definition of HTML in that imaginary Hitchhiker's Guide to the (Web) Galaxy should be updated to something more appropriate:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Mostly accessible.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That looks much better, and it is definitely more accurate to reality. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-aria-gt-bad-aria"&gt;
  &lt;/a&gt;
  No ARIA &amp;gt; Bad ARIA
&lt;/h2&gt;

&lt;p&gt;Before all accessibility experts start crying foul and cursing my name, let me clarify something: &lt;strong&gt;&lt;strong&gt;No ARIA is better than bad ARIA&lt;/strong&gt;&lt;/strong&gt;. ARIA is not supported by all browsers/screen readers, and it should be a last resort. The way to go should be using semantic HTML when possible.&lt;/p&gt;

&lt;p&gt;Unfortunately, using semantic HTML is not always possible and not enough to cover all the cases needed for a good experience. For example, there are widgets and patterns (e.g., tab panels again) that cannot be done using semantic elements and, in those cases, ARIA is a must.&lt;/p&gt;

&lt;p&gt;The myth/misconception of "No ARIA &amp;gt; Bad ARIA" is that it leaves out an important part of the equation: where does "Good ARIA" go? And the answer is actually quite simple:&lt;/p&gt;


&lt;center&gt;&lt;strong&gt;Good ARIA &amp;gt; No ARIA &amp;gt; Bad ARIA&lt;br&gt; &lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;We can all agree that bad ARIA is bad. But no ARIA isn't ideal either: the solution to providing a bad experience (bad ARIA) should not be providing a subpar experience (no ARIA). There should be a good experience too!&lt;/p&gt;

&lt;p&gt;If a kid is learning to ride a bike and struggles and falls, we don't tell them, "stop! don't ever ride a bike!" Instead, we teach them. We encourage them to keep learning and trying... until they can do it by themselves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0eNMsZYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpmvqtmo6xqptfgnk8cg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0eNMsZYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpmvqtmo6xqptfgnk8cg.jpeg" alt="A little kid pushes a bicycle with the help of an adult"&gt;&lt;/a&gt;&lt;/p&gt;
Sorry, Timmy. You fell once. No point on trying again. (picture: &lt;a href="https://www.pexels.com/photo/full-body-of-father-and-child-in-protective-helmet-pushing-bike-along-road-3932890/"&gt;
Tatiana Syrikova&lt;/a&gt;)&lt;br&gt; 



&lt;p&gt;"No ARIA &amp;gt; bad ARIA" perpetuates a false dichotomy. There's good ARIA, too. And we can learn ARIA, practice ARIA, improve ARIA... We won't be good at the beginning, but we will get better and provide a better experience with time and practice than with no ARIA.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prefers-reduced-motion-means-no-motion"&gt;
  &lt;/a&gt;
  Prefers reduced motion means no motion
&lt;/h2&gt;

&lt;p&gt;This is more of developers' good intentions based on a misconception. We (myself included) found an option to reduce motion, and we "brute-force" our way through it, cancelling all transitions and animations like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;*,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not everything is black or white. There are many shades of grey, and not all animations and transitions are bad. &lt;a href="https://alistapart.com/article/designing-safer-web-animation-for-motion-sensitivity/"&gt;Some of them are worse than others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We don't need to cancel every motion on a website. Instead, we need to think through them, check what's appropriate and not, and provide an expanded/animated experience for everybody.&lt;/p&gt;

&lt;p&gt;In An Event Apart, &lt;a href="https://aneventapart.com/news/post/making-motion-inclusive-aea-video"&gt;Val Head had a great presentation about accessibility and animation&lt;/a&gt;. In the video, she explains different animations and transitions and which ones are better when trying to avoid triggering a negative reaction: color changes, opacity fades, small movements...&lt;/p&gt;

&lt;p&gt;Also, related to this myth, reduced motion applies to more than just animations and transitions: background videos, animated GIFs, or scroll behavior are examples of things that need changes when the user opted for reduced motion. So let's not forget them.&lt;/p&gt;




&lt;p&gt;Thank you &lt;a href="https://twitter.com/toddlibby"&gt;Todd Libby&lt;/a&gt;, &lt;a href="https://twitter.com/ldenoue"&gt;Laurent Denoue&lt;/a&gt;, &lt;a href="https://twitter.com/ItsCrisDiaz"&gt;Cristian Diaz&lt;/a&gt;, &lt;a href="https://twitter.com/InHuOfficial"&gt;InHuOfficial&lt;/a&gt;, and &lt;a href="https://twitter.com/MaciejPedzich"&gt;Maciej Pędzich&lt;/a&gt;, for all your insights, feedback, and (constructive) criticism when writing the article.&lt;/p&gt;

&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/photos/YHR1vZ4-asY"&gt;Mike Hindle&lt;/a&gt; on Unsplash.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Rendering large datasets in Vue.js</title>
      <author>Matt Angelosanto</author>
      <pubDate>Fri, 10 Sep 2021 19:27:40 +0000</pubDate>
      <link>https://dev.to/logrocket/rendering-large-datasets-in-vue-js-j4n</link>
      <guid>https://dev.to/logrocket/rendering-large-datasets-in-vue-js-j4n</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/indrajithekanayake/"&gt;Indrajith Ekanayake&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;Let’s say you are trying to implement a large dataset into a table. How large, you ask? Let’s say 100,000 rows need to be viewed in a single tabular format. &lt;/p&gt;

&lt;p&gt;If you use the native implementation in Vue.js, it will take forever for the page to render all that data. Just because you are a frontend developer doesn’t mean you get a free pass at having to worry about performance issues! &lt;/p&gt;

&lt;p&gt;Even if you are rendering a table with just 1,000 rows, it’s not going to be fun for the user to work through a table of that length. You’ll notice that scrolling isn’t as smooth as it typically is, especially when using the mouse wheel. &lt;/p&gt;

&lt;p&gt;In this article we will talk about several ways to reduce rendering time and increase overall performance for large datasets in Vue, as well as a few memory handling tips that will help your data-heavy sites run more smoothly and use less RAM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pagination"&gt;
  &lt;/a&gt;
  Pagination
&lt;/h2&gt;

&lt;p&gt;This is one of the most common solutions for rendering large datasets. Pagination means breaking down the table into separate pages, so it will only render a single page at a time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ATOfB-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/pagination-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ATOfB-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/pagination-example.png" alt="Example of pagination"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;items&lt;/code&gt; prop, which accepts the item’s provider function to fetch data from a remote database. Then, use pagination and filtering in your API request to fetch only the required data for about 100 items on each request. &lt;/p&gt;

&lt;p&gt;That seems simple enough. But what if you need to load the whole table on a single page? Maybe you need an endpoint to pull everything back and run some calculations on the data. &lt;/p&gt;

&lt;p&gt;In such a case, there’s another method we can use to load our table.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#load-and-display-specific-areas-of-data"&gt;
  &lt;/a&gt;
  Load and display specific areas of data
&lt;/h2&gt;

&lt;p&gt;There are a few ways we can load specific areas of data without pagination: with Clusterize.js and with Vue-virtual-scroller and other related components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clusterizejs"&gt;
  &lt;/a&gt;
  Clusterize.js
&lt;/h3&gt;

&lt;p&gt;Clusterize.js is a JavaScript library that solves this problem quite easily. It enables us to load and display just a specific area of the table. So how does it work? &lt;/p&gt;

&lt;p&gt;The table is put inside &lt;a href="https://blog.logrocket.com/create-performant-virtual-scrolling-list-vuejs/"&gt;a scrollable container&lt;/a&gt; that displays a few rows at a time and allows you to move through the entire table. Only the visible part of the table will be created in the DOM structure. &lt;/p&gt;

&lt;p&gt;As soon as the user scrolls within the table container, new table data is loaded. So the data loading happens in the background, and the user won’t notice any difference. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AV1OM7Eg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/clusterize-js-example.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AV1OM7Eg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/clusterize-js-example.gif" alt="Clusterize.js in action"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Using Clusterize.js in your code is quite straightforward. &lt;/p&gt;

&lt;p&gt;The difference in performance after adding this plugin is remarkable. However, if you need to be sure, there’s a compelling example &lt;a href="https://clusterize.js.org/"&gt;at the top of their website&lt;/a&gt; that allows you to easily compare a regular table to a Clusterize.js-optimized table. Make sure you check out their playground, too, for even more proof. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e4WZ3Zq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Clusterize-js-playground.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e4WZ3Zq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Clusterize-js-playground.png" alt="Clusterize.js playground"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vuevirtualscroller-and-vuevirtualscrolllist"&gt;
  &lt;/a&gt;
  Vue-virtual-scroller and Vue-virtual-scroll-list
&lt;/h3&gt;

&lt;p&gt;These popular components allow for quick scrolling through large amounts of data in Vue apps, but do come with a caveat; &lt;a href="https://github.com/Akryum/vue-virtual-scroller"&gt;Vue-virtual-scroller&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/vue-virtual-scroll-list"&gt;Vue-virtual-scroll-list&lt;/a&gt; don’t deal with dynamic heights unless you hardcode them. If you want to test it out, there is a playground available for Vue Virtual Scroller &lt;a href="https://akryum.github.io/vue-virtual-scroller/#/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Another option is the &lt;a href="https://github.com/flowstudio/vue-collection-cluster"&gt;Vue-collection-cluster&lt;/a&gt; component, which allows you to calculate heights dynamically, but it lags miserably at about 50,000 items. &lt;/p&gt;

&lt;p&gt;However, even with these drawbacks, each of these libraries allow you to build an adequate virtual scroll. In the end, if you have a database pushing about 10–100MB of JSON data, you are all set in performance. &lt;/p&gt;

&lt;p&gt;If your website is performance-optimized, we can move on to the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memory-handling"&gt;
  &lt;/a&gt;
  Memory handling
&lt;/h2&gt;

&lt;p&gt;When dealing with a large dataset, the biggest thing you need to worry about is handling memory usage. If you allow users to edit a data-heavy table, you are going to be hitting a memory limit, and your web browser will stop running JavaScript altogether. &lt;/p&gt;

&lt;p&gt;Loading that much data puts a burden on web browsers (and the number of nodes they can retain in memory) and causes your devices’ RAM use to skyrocket. &lt;/p&gt;

&lt;p&gt;The problem will be amplified on devices with less memory, like smartphones and tablets, and could even cripple those devices. It’s biting off more than you can chew. &lt;/p&gt;

&lt;p&gt;Now, memory handling can be improved in many ways. I’ll separate it into five steps below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-limit-unnecessary-data-passing"&gt;
  &lt;/a&gt;
  1. Limit unnecessary data passing
&lt;/h3&gt;

&lt;p&gt;We can keep things simple and reduce the stress on our back end by fetching plain objects without related models. Then, the main results will only have ID keys to related objects. &lt;/p&gt;

&lt;p&gt;Plus, by using Axios (or a similar library) to fetch related data with separate AJAX requests (e.g., “customers”, “projects”, “locations”), we &lt;a href="https://blog.logrocket.com/how-to-consume-apis-with-vuex-and-axios/#:~:text=Introducing%20Axios%20and%20Vuex"&gt;can use VueX to store them&lt;/a&gt; in their own list properties. This will avoid fetching full-model trees. &lt;/p&gt;

&lt;p&gt;First, create getters for each object so we can use related models for fetching labels (or full objects when required) and our back end doesn’t need to fetch related data more than once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;projectsById&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we can fetch different lists, each with its own controller endpoint, and cache the results to the VueX store. Keep in mind that you can send multiple requests using &lt;code&gt;Axios.all([...]).&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-optimize-data-handling"&gt;
  &lt;/a&gt;
  2. Optimize data handling
&lt;/h3&gt;

&lt;p&gt;It is necessary to optimize the way we handle our data. You can use the component object as data storage for your custom objects and object lists. An optimized list component setup looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
   &lt;span class="na"&gt;mixins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sharedUtils&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="na"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
   &lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-make-it-nonreactive"&gt;
  &lt;/a&gt;
  3. Make it non-reactive
&lt;/h3&gt;

&lt;p&gt;It’s better to handle an item array as non-reactive, but how can we handle it in a nonreactive manner if we want the table to be reactive with real time filters? &lt;/p&gt;

&lt;p&gt;Whenever a user clicks a filter button or inputs a string filter (such as a name), we need to trigger the filtering of the items array. This &lt;code&gt;processFilters&lt;/code&gt; method goes through the nonresponsive items array and returns &lt;code&gt;filteredItems&lt;/code&gt;, which are stored in DataContext, so it automatically becomes reactive as it is transformed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item in filteredItems&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, all the items within &lt;code&gt;filteredItems&lt;/code&gt; stay reactive, but also lose reactivity when they are filtered out, saving a lot of memory. &lt;/p&gt;

&lt;p&gt;However, the issue here is that we can’t just use items in DataContext directly within a template. So you cannot use this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"items.length &amp;gt; 0 &amp;amp;&amp;amp; everythingElseIsReady"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, you have to store the length of the items array to a separate data prop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-having-a-hidden-container"&gt;
  &lt;/a&gt;
  4. Having a hidden container
&lt;/h3&gt;

&lt;p&gt;With a nonreactive main data array, modifications made directly against items within that main array won’t trigger any changes to the UI or subcomponents. &lt;/p&gt;

&lt;p&gt;To solve this issue, we need a separate container that holds all the results from the back end with a smaller (filtered) presentation array of that larger container. In this case, we use good REST architecture to handle nonreactive data storage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-differentiate-instanced-vs-referenced-objects"&gt;
  &lt;/a&gt;
  5. Differentiate instanced vs. referenced objects
&lt;/h3&gt;

&lt;p&gt;Sometimes when representing the same sub-object multiple times for different master records, without even realizing it, you might be creating objects that do not reference other objects. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhp60d5h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/reference-object-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhp60d5h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/reference-object-example.png" alt="Graphic example of a reference object"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For example, imagine you have a &lt;code&gt;student-object&lt;/code&gt; that contains a &lt;code&gt;university-object&lt;/code&gt;. Now, multiple students go to the same university. But when you fetch JSON data from the back end, are you sure those duplicated &lt;code&gt;university-object&lt;/code&gt;s are the same university? Or are they multiple representations of the same object? &lt;/p&gt;

&lt;p&gt;You can, of course, pass &lt;code&gt;university&lt;/code&gt; as a property to your &lt;code&gt;student-object&lt;/code&gt;. At the same time, if you are unsure whether you are referring to a shared &lt;code&gt;university-object&lt;/code&gt; or using dozens of instances of the same sub-objects, you could simply do the referencing inside your &lt;code&gt;student-list&lt;/code&gt; component. &lt;/p&gt;

&lt;p&gt;A student will contain a &lt;code&gt;university-id&lt;/code&gt;, so fetch a list of Universities with a separate REST-method (e.g., &lt;code&gt;getUniversities()&lt;/code&gt;), and do the pairing on the UI level. This way, you have only one list of Universities, and you can resolve the University from that list and inject it into a person, thereby making reference to only one. &lt;/p&gt;

&lt;p&gt;Basically, you need to manage your master records (e.g., &lt;code&gt;persons&lt;/code&gt; or &lt;code&gt;products&lt;/code&gt;) vs. related records (sub-objects or relational objects). &lt;/p&gt;

&lt;p&gt;Keep in mind that you can’t use this method if the sub-object is reactive. If it needs to be editable, then you need to make sure that you are not using the referred object!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we briefly discussed pagination and using Clusterize.js to optimize a website’s performance. Then, we dove into memory handling with five easy steps: limiting unnecessary data passing, optimizing data handling, making it non-reactive, having a hidden container, and differentiating instances of objects from referenced ones. &lt;/p&gt;

&lt;p&gt;All things considered, Vue is fairly efficient in handling large datasets. But like everything, the best way to see if it is suitable for your needs would be to create the type of components, filter, and sorts that you need, then load them with large sets of (seed or testing) data to check if they are performant enough for your needs.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#experience-your-vue-apps-exactly-how-a-user-does"&gt;
  &lt;/a&gt;
  Experience your Vue apps exactly how a user does
&lt;/h2&gt;

&lt;p&gt;Debugging Vue.js applications can be difficult, especially when there are dozens, if not hundreds of mutations during a user session. If you’re interested in monitoring and tracking Vue mutations for all of your users in production, &lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Rso_joi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Rso_joi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://logrocket.com/signup/"&gt;https://logrocket.com/signup/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens in your Vue apps including network requests, JavaScript errors, performance problems, and much more. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred.&lt;/p&gt;

&lt;p&gt;The LogRocket Vuex plugin logs Vuex mutations to the LogRocket console, giving you context around what led to an error, and what state the application was in when an issue occurred.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your Vue apps - &lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting Started With Angular Material</title>
      <author>Dev By RayRay</author>
      <pubDate>Fri, 10 Sep 2021 19:23:36 +0000</pubDate>
      <link>https://dev.to/devbyrayray/getting-started-with-angular-material-20a7</link>
      <guid>https://dev.to/devbyrayray/getting-started-with-angular-material-20a7</guid>
      <description>&lt;p&gt;A lot of developers are using Angular Material in their Angular applications. But what is the best way to add the library, and why do you want to use &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="#what-is-angular-material"&gt;What Is Angular Material?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#why-use-angular-material"&gt;Why Use Angular Material?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#how-to-add-angular-material"&gt;How To Add Angular Material?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#how-to-use-angular-material"&gt;How To Use Angular Material?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#how-to-load-all-angular-material-components-at-once"&gt;How To Load All Angular Material Components At Once&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-angular-material"&gt;
  &lt;/a&gt;
  What Is Angular Material?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zaaEwZkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631300625484/dmyoLS4_h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zaaEwZkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631300625484/dmyoLS4_h.png" alt="Screenshot_2021-09-02_at_15.59.01.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Angular Material is an Angular Component library build and maintained by Google.&lt;/p&gt;

&lt;p&gt;It's a component library filled with a ton of easy to use Angular components. The library includes components like a &lt;a href="https://material.angular.io/components/datepicker/overview"&gt;datepicker&lt;/a&gt;, &lt;a href="https://material.angular.io/components/input/overview"&gt;input elements&lt;/a&gt;, &lt;a href="https://material.angular.io/components/slide-toggle/overview"&gt;toggle switches&lt;/a&gt;, &lt;a href="https://material.angular.io/components/table/overview"&gt;tables&lt;/a&gt; and, &lt;a href="https://material.angular.io/components/categories"&gt;a lot more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Components support customization in various ways. You can use their pre-built themes or build your own with the custom color scheme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-angular-material"&gt;
  &lt;/a&gt;
  Why Use Angular Material?
&lt;/h2&gt;

&lt;p&gt;Angular Material is updated simultaneously with Angular, which is one of the best advantages of using Angular Material and not other component libraries. Every time Google brings a new update for Angular, it will update Angular Material simultaneously.&lt;/p&gt;

&lt;p&gt;When you update your Angular application with &lt;code&gt;ng update&lt;/code&gt;, it will also update Angular Material simultaneously, which is pretty handy.&lt;/p&gt;

&lt;p&gt;With Angular Material, you know for sure, as long as Google keeps developing Angular, it will stay Angular Material up-to-date. &lt;/p&gt;

&lt;p&gt;All the components have been tested for a long time. I've been an Angular Material user for a long time, but I've never had an actual error in an Angular Material component.&lt;/p&gt;

&lt;p&gt;But if you don't like the style of Angular Material, you can also change their styling. Picking another Angular component library is an excellent alternative if you want something different.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-add-angular-material"&gt;
  &lt;/a&gt;
  How To Add Angular Material?
&lt;/h2&gt;

&lt;p&gt;Before installing Angular Material in an existing project, we have to make sure you installed the Angular CLI. If you haven't, run this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @angular/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's start with installing Angular Material in an existing project.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng add @angular/material
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When you perform the command above, you will get a few configuration options to choose from. Make the choice you want.&lt;/p&gt;

&lt;p&gt;After this process, you can use Angular Material in your Angular project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-angular-material"&gt;
  &lt;/a&gt;
  How To Use Angular Material?
&lt;/h2&gt;

&lt;p&gt;Angular Material components can be used by importing the module.&lt;/p&gt;

&lt;p&gt;For example, if you want to use the &lt;a href="https://material.angular.io/components/checkbox/overview"&gt;checkbox component&lt;/a&gt;, you have to import the following module in the &lt;code&gt;app.module.ts&lt;/code&gt; if you're going to use it in all the components across the entire application.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MatCheckboxModule&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/material/checkbox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This code can be found on every component page in the API tab.&lt;/p&gt;

&lt;p&gt;Now you can go to a component where you want to use your imported component. Check the examples tab for an example of the components and code sample's on how to use the component.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;mat-checkbox&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"example-margin"&lt;/span&gt; &lt;span class="na"&gt;[(ngModel)]=&lt;/span&gt;&lt;span class="s"&gt;"checked"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Checked&lt;span class="nt"&gt;&amp;lt;/mat-checkbox&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-load-all-angular-material-components-at-once"&gt;
  &lt;/a&gt;
  How To Load All Angular Material Components At Once
&lt;/h2&gt;

&lt;p&gt;There is no default way to load all Angular Material component modules at once. I think there is a good reason for that.&lt;/p&gt;

&lt;p&gt;You can create an Angular Module to import all the Angular Material modules and import that module in your &lt;code&gt;app.module.ts&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The question is, are you going to use all the Angular Material components in your application? I don't think so because you're going to waste a whole lot of data that the user needs to download.&lt;/p&gt;

&lt;p&gt;I think it's wiser to load the module of the Angular Material component in the Angular Module where you need it. And not load them all at once.&lt;/p&gt;

&lt;p&gt;But if you want to do it, check out this &lt;a href="https://gist.github.com/pimatco/d5b1891feb90b60ca4681011b6513873"&gt;Gist on Github&lt;/a&gt; which has all the available Angular Material modules for you.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Angular Material offers a great set of well-tested and configurable Angular components. The most significant benefit is, it's developed simultaneously by the Angular team.&lt;/p&gt;

&lt;p&gt;I'm looking forwards to see all the projects you build with Angular Material!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DymzaNFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629789655319/nBF6anHH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DymzaNFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629789655319/nBF6anHH4w.png" alt="hashnode-footer.png"&gt;&lt;/a&gt;&lt;br&gt;
*I hope you learned something new or are inspired to create something new after reading this story! 🤗 If so, consider subscribing via email (scroll to the top of this page) or follow me here on Hashnode.&lt;br&gt;
*&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you know that you can create a &lt;a href="https://hashnode.com/@devbyrayray/joinme"&gt;Developer blog like this one, yourself&lt;/a&gt;? It's entirely for free. 👍💰🎉🥳🔥&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;If I left you with questions or something to say as a response, scroll down and type me a message. Please send me a &lt;a href="https://twitter.com/@devbyrayray"&gt;DM on Twitter @DevByRayRay&lt;/a&gt; when you want to keep it private. My DM's are always open 😁&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>GitHub Workflow,  Merge and Rebase</title>
      <author>AaronDski</author>
      <pubDate>Fri, 10 Sep 2021 19:16:34 +0000</pubDate>
      <link>https://dev.to/aarondski/github-workflow-merge-and-rebase-1cig</link>
      <guid>https://dev.to/aarondski/github-workflow-merge-and-rebase-1cig</guid>
      <description>&lt;p&gt;If you are just getting into coding and are working on projects, ether solo or in a group, you probably use GitHub, a platform to house your projects. Or you use it at your job and are always doing adds and commits, waiting for you superior to approve the merge. If you already know how all of that works, then you most likely won't need to read this post. I am writing this as more of a quick reference guide for us newbies... and there is a lot of additional good documentation from GitHub and lots of extra resources on the web.&lt;/p&gt;

&lt;p&gt;There are 2 major ways to update a main/master branch in GitHub: the first is the good old &lt;code&gt;git merge&lt;/code&gt;, and the second is &lt;code&gt;git rebase&lt;/code&gt;. Both of these commands accomplish the same thing: they update the main/master branch with your newly written code.&lt;/p&gt;

&lt;p&gt;This is coming from the view point that you are working on a branch that is not the main. Make sure you have the most up-to-date version of the main repository by running &lt;code&gt;git pull&lt;/code&gt;. To make your own branch, you can run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch 
#this will display all of the branches in the current repo
git branch example_branch
#this will make a branch off the main if you are currently on the main branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to get into the new branch we just made. We can do this with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout example_branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you have been working on a feature for the main code file; let's talk about when you are ready to have your code reviewed and potentially merged into the main branch. First we check the status to make sure we only edited the files we were supposed to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we add all of our changes to the staging area to be committed by running one of the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git add -A
git add 'file name'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now your code is ready for a commit. This is where we are able to leave a detailed message about what we did with our code. Here are some commit commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "message"
git commit -am "message"
#This command will add your changes and commit them in one go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then once you have your code committed, you can push your code to the origin branch with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally it is ready to be reviewed and sent back for editing, or it can be merged into the main. If there is no more code for you to add, when your branch and the main branch are merged, you have the option to delete your branch. If you will need to use it again soon, then you can just leave it be.&lt;/p&gt;

&lt;p&gt;To merge to 2 branches, we will want to go into the main/master branch, then run &lt;code&gt;git pull&lt;/code&gt;, just in case there have been any changes (it will let you know if you are up to date, or it will automatically load the changes). Our commands can look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#currently not on main branch

git checkout main
#now we are on the main branch

git pull
# just to double check for any changes

git merge example_branch   
#now the branch has been merged into main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hopefully there are no merge conflicts, and if not, you are done! That is the easy way to do a merge and its called a "fast forward merge."&lt;/p&gt;

&lt;p&gt;If you do get some merge conflicts you will need to resolve those conflicts before you can move on. &lt;/p&gt;

&lt;p&gt;A merge is pretty self explanatory, you are combining the contents of 2 items into 1.  There are a few ways that a merge can happen, 1) you can do it strait in your terminal, 2) you can use the GitHub webpage, 3) Github also has an app for OSX that works pretty well.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5MP3twR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53brudbvuzzlixtlx6bd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5MP3twR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53brudbvuzzlixtlx6bd.jpeg" alt="Merge Sign"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;When there are commits on the main branch that are added after you made your branch, it will prompt what is called a "merge commit," once the merge is initiated. You can leave a message and move on to write more code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UpNTGv_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htznp8biw1ckvwyv67y5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UpNTGv_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htznp8biw1ckvwyv67y5.jpg" alt="Merge commit image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A merge commit will have a lot of "~" symbols and you need to leave a message to move forward in the commit, it would look like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~
~
~
~
~
~
~
~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can hit the &lt;em&gt;escape&lt;/em&gt; key, then type &lt;em&gt;&lt;strong&gt;: w q&lt;/strong&gt;&lt;/em&gt; which will save the commit and get you through the merge commit. Then you should double check with &lt;code&gt;git log&lt;/code&gt; to make sure all the commit history looks correct to you. &lt;/p&gt;

&lt;p&gt;"Rebase" is a git command that will get us a similar result of adding our code to the main branch, but it works very differently. Rather than having branches come together into the main, you are basically adding your 'example_branch' onto the end of the master branch. To do this you follow all of the same steps above, but when it comes time to merge, you will instead run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#you will want to be in your "example_branch" when you run this command

git rebase main/master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ahL1gJAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/833qgimnve3370t1taxk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ahL1gJAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/833qgimnve3370t1taxk.png" alt="Rebase example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The links below are some good resources that I found, and they go into greater detail of whats going on behind the scenes.&lt;/p&gt;

&lt;p&gt;Resources &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=oFYyTZwMyAg"&gt;GITHUB PULL REQUEST, Branching, Merging &amp;amp; Team Workflow&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=7Mh259hfxJg"&gt;Git Rebase Vs. Merge&lt;/a&gt;&lt;br&gt;
&lt;a href="https://education.github.com/git-cheat-sheet-education.pdf"&gt;Git Cheat Sheet&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>github</category>
      <category>merge</category>
      <category>rebase</category>
    </item>
    <item>
      <title>5 React performance optimization techniques</title>
      <author>Matt Angelosanto</author>
      <pubDate>Fri, 10 Sep 2021 19:10:15 +0000</pubDate>
      <link>https://dev.to/logrocket/5-react-performance-optimization-techniques-107c</link>
      <guid>https://dev.to/logrocket/5-react-performance-optimization-techniques-107c</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ibadehinmojeed/"&gt;Ibadehin Mojeed&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;Optimizing application performance is key for developers who are mindful of keeping a user’s experience positive to keep them on an app and engaged. &lt;/p&gt;

&lt;p&gt;According to research by Akamai, a second delay in load time can cause a 7% reduction in conversions, making it imperative for developers to create apps with optimized performance. &lt;/p&gt;

&lt;p&gt;For applications built with React, we are guaranteed a very fast UI by default. However, as an application grows, developers may encounter some performance issues. &lt;/p&gt;

&lt;p&gt;In this guide, we will discuss five important ways to optimize the performance of a React application, including pre-optimization techniques. These include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://blog.logrocket.com/5-react-performance-optimization-techniques/#keeping-component-state-local"&gt;Keeping component state local where necessary&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://blog.logrocket.com/5-react-performance-optimization-techniques/#memoizing-reactcomponents-prevent-rerenders"&gt;Memoizing React components to prevent unnecessary rerenders&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://blog.logrocket.com/5-react-performance-optimization-techniques/#code-splitting-dynamic-import"&gt;Code-splitting in React using dynamic &lt;code&gt;import()&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://blog.logrocket.com/5-react-performance-optimization-techniques/#windowing-list-virtualization"&gt;Windowing or list virtualization in React&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://blog.logrocket.com/5-react-performance-optimization-techniques/#lazy-loading-images"&gt;Lazy loading images in React&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#react-preoptimization-techniques"&gt;
  &lt;/a&gt;
  React pre-optimization techniques
&lt;/h2&gt;

&lt;p&gt;Before optimizing a React application, we must understand how React updates its UI and how to measure an app’s performance. This makes it easy to solve any React performance problems. &lt;/p&gt;

&lt;p&gt;Let’s start by reviewing how the React UI updates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-how-react-updates-its-ui"&gt;
  &lt;/a&gt;
  Understanding how React updates its UI
&lt;/h3&gt;

&lt;p&gt;When we create a rendered component, React creates a virtual DOM for its element tree in the component. Now, whenever the state of the component changes, React recreates the virtual DOM tree and compares the result with the previous render. &lt;/p&gt;

&lt;p&gt;It then only updates the changed element in the actual DOM. This process is called diffing. &lt;/p&gt;

&lt;p&gt;React uses the concept of a virtual DOM to minimize the performance cost of rerendering a webpage because the actual DOM is expensive to manipulate. &lt;/p&gt;

&lt;p&gt;This is great because it speeds up the UI render time. However, this concept can also slow down a complex app if it’s not managed very well. &lt;/p&gt;

&lt;p&gt;What we can deduce here is that a state change in a React component causes a rerender. Likewise, when the state passes down to a child component as a prop, it rerenders in the child and so on, which is fine because React must update the UI. &lt;/p&gt;

&lt;p&gt;The issue comes when the child components are not affected by the state change. In other words, they do not receive any prop from the parent component. &lt;/p&gt;

&lt;p&gt;React nonetheless rerenders these child components. So, as long as the parent component rerenders, all of its child components rerender regardless of whether a prop passes to them or not; this is the default behavior of React. &lt;/p&gt;

&lt;p&gt;Let’s quickly demonstrate this concept. Here, we have an &lt;code&gt;App&lt;/code&gt; component holding a state and a child component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setInput&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Input text: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChildComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;child component is rendering&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is child component.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever the state of the &lt;code&gt;App&lt;/code&gt; component updates, the &lt;code&gt;ChildComponent&lt;/code&gt; rerenders even when it is not directly affected by the state change. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/eager-euler-hurvv?file=/src/App.js"&gt;Open the console in this CodeSandbox demo&lt;/a&gt; and write something in the input field. We’ll see that for every keystroke, the &lt;code&gt;ChildComponent&lt;/code&gt; rerenders. &lt;/p&gt;

&lt;p&gt;In most cases, this rerendering shouldn’t cause performance issues, and we shouldn’t notice any lag in our application. However, if the unaffected component renders an expensive computation and we notice performance issues, then we should optimize! &lt;/p&gt;

&lt;p&gt;This brings us to the second pre-optimization technique.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#profiling-the-react-app-to-understand-where-bottlenecks-are"&gt;
  &lt;/a&gt;
  Profiling the React app to understand where bottlenecks are
&lt;/h3&gt;

&lt;p&gt;React allows us to measure the performance of our apps using the &lt;a href="https://blog.logrocket.com/debugging-react-applications-with-the-react-profiler-api-and-the-profiler-devtool/"&gt;Profiler in the React DevTools&lt;/a&gt;. There, we can gather performance information every time our application renders. &lt;/p&gt;

&lt;p&gt;The profiler records how long it takes a component to render, why a component is rendering, and more. From there, we can investigate the affected component and provide the necessary optimization. &lt;/p&gt;

&lt;p&gt;To use the Profiler, we must install the React DevTools for our browser of choice. If you don’t have it installed yet, head over to their extension page and install it (choose for &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"&gt;Chrome here&lt;/a&gt; or for &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/react-devtools/"&gt;Firefox here&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;Now, we should see the &lt;strong&gt;Profiler&lt;/strong&gt; tab when working on a React project. &lt;/p&gt;

&lt;p&gt;Back to our code, if we profile the application, we see the following behavior: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GGSdwnFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Profiler-rendering-commit-info.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GGSdwnFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Profiler-rendering-commit-info.gif" alt=""&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The DevTools profiler highlights every rendered component while the input text field updates and we receive every detail from the rendered components. In the flame chart below, we can see how long it took to render the components and why the &lt;code&gt;App&lt;/code&gt; component is rendering. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vAHTlQCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Recieving-details-rendered-components.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vAHTlQCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Recieving-details-rendered-components.png" alt="Receiving Details From Rendered Components, Shows Why App Renders"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Likewise, the image below shows the child component is rendering because the parent component rendered. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--woaixPia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Child-component-rendering-because-parent-component-rendering.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--woaixPia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Child-component-rendering-because-parent-component-rendering.png" alt="Shows Child Component Rendering Because Parent Component Rendering"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This can impact the app’s performance if we have an operation in a child component that takes time to compute. This brings us to our optimization techniques.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-performance-optimization-techniques"&gt;
  &lt;/a&gt;
  React performance optimization techniques
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-keeping-component-state-local-where-necessary"&gt;
  &lt;/a&gt;
  1. Keeping component state local where necessary
&lt;/h3&gt;

&lt;p&gt;We’ve learned that a state update in a parent component rerenders the parent and its child components. &lt;/p&gt;

&lt;p&gt;So, to ensure rerendering a component only happens when necessary, we can extract the part of code that cares about the component state, making it local to that part of the code. &lt;/p&gt;

&lt;p&gt;By refactoring our earlier code, we have the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormInput&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChildComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FormInput&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setInput&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Input text: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;child component is rendering&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is child component.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This ensures that only the component that cares about the state renders. In our code, only the input field cares about the state. So, we extracted that state and the input to a &lt;code&gt;FormInput&lt;/code&gt; component, making it a sibling to the &lt;code&gt;ChildComponent&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This means, when the state changes in the &lt;code&gt;FormInput&lt;/code&gt; component, only the component rerenders. &lt;/p&gt;

&lt;p&gt;If we &lt;a href="https://codesandbox.io/s/mystifying-currying-8cq04?file=/src/App.js"&gt;test the app once again in our CodeSandbox demo&lt;/a&gt;, the &lt;code&gt;ChildComponent&lt;/code&gt; no longer rerenders on every keystroke. &lt;/p&gt;

&lt;p&gt;But sometimes, we cannot avoid having a state in a global component while passing it down to child components as a prop. In this case, let’s learn how to avoid rerendering the unaffected child components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-memoizing-react-components-to-prevent-unnecessary-rerenders"&gt;
  &lt;/a&gt;
  2. Memoizing React components to prevent unnecessary rerenders
&lt;/h3&gt;

&lt;p&gt;Unlike the previous performance technique where refactoring our code gives us a performance boost, here we trade memory space for time. So, we must only memoize a component when necessary. &lt;/p&gt;

&lt;p&gt;Memoization is an optimization strategy that caches a component-rendered operation, saves the result in memory, and returns the cached result for the same input. &lt;/p&gt;

&lt;p&gt;In essence, if a child component receives a prop, a memoized component shallowly compares the prop by default and skips rerendering the child component if the prop hasn’t changed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setInput&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Input text: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Count: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChildComponent&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;child component is rendering&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a child component.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Count: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By updating the input field, the &lt;a href="https://codesandbox.io/s/elegant-fast-6nmig?file=/src/App.js"&gt;count button rerenders the&lt;/a&gt; &lt;code&gt;[App](https://codesandbox.io/s/elegant-fast-6nmig?file=/src/App.js)&lt;/code&gt; &lt;a href="https://codesandbox.io/s/elegant-fast-6nmig?file=/src/App.js"&gt;and&lt;/a&gt; &lt;a href="https://codesandbox.io/s/elegant-fast-6nmig?file=/src/App.js"&gt;&lt;code&gt;ChildComponent&lt;/code&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Instead, the &lt;code&gt;ChildComponent&lt;/code&gt; should only rerender when clicking the count button because it must update the UI. In this case, we can memoize the &lt;code&gt;ChildComponent&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-raw-reactmemo-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;React.memo()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;By wrapping a purely functional component in &lt;code&gt;React.memo&lt;/code&gt;, we want to rerender the component only if its prop changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;child component is rendering&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a child component.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Count: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the count prop never changes, React will skip rendering the &lt;code&gt;ChildComponent&lt;/code&gt; and reuse the previous rendered result. Hence improving the app performance. &lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://codesandbox.io/s/black-leftpad-fgrei?file=/src/App.js"&gt;try this in the tutorial on CodeSandbox&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;React.memo()&lt;/code&gt; works pretty well when we pass down primitive values, such as a number in our example. And, if you are familiar with &lt;a href="http://blog.logrocket.com/rethinking-hooks-memoization/#use-usememe-referential-equalities"&gt;referential equality&lt;/a&gt;, primitive values are always referentially equal and return true if values never change. &lt;/p&gt;

&lt;p&gt;Nonprimitive values like &lt;code&gt;object&lt;/code&gt;, which include arrays and functions, always return false between rerenders. This is because when the component rerenders, the object is being redefined. &lt;/p&gt;

&lt;p&gt;When we pass down &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, or &lt;code&gt;function&lt;/code&gt; as a prop, the memoized component always rerenders. Here, we are &lt;a href="https://codesandbox.io/s/angry-frost-rl829?file=/src/App.js"&gt;passing down a function to the child component&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChildComponent&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;incrementCount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;child component is rendering&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code focuses on the &lt;code&gt;incrementCount&lt;/code&gt; function passing to the &lt;code&gt;ChildComponent&lt;/code&gt;. When the &lt;code&gt;App&lt;/code&gt; component rerenders, even when the count button is not clicked, the function redefines, making the &lt;code&gt;ChildComponent&lt;/code&gt; also rerender. &lt;/p&gt;

&lt;p&gt;To prevent the function from always redefining, we will use a &lt;code&gt;useCallback&lt;/code&gt; Hook that returns a memoized version of the callback between renders.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-the-raw-usecallback-endraw-hook"&gt;
  &lt;/a&gt;
  Using the &lt;code&gt;useCallback&lt;/code&gt; Hook
&lt;/h4&gt;

&lt;p&gt;With the &lt;code&gt;useCallback&lt;/code&gt; Hook, the &lt;code&gt;incrementCount&lt;/code&gt; function only redefines when the &lt;code&gt;count&lt;/code&gt; dependency array changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/trusting-fire-ef7i2?file=/src/App.js"&gt;You can try it for yourself on CodeSandbox&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-the-raw-usememo-endraw-hook"&gt;
  &lt;/a&gt;
  Using the &lt;code&gt;useMemo&lt;/code&gt; Hook
&lt;/h4&gt;

&lt;p&gt;When the prop we pass down to a child component is an array or object, we can use a &lt;code&gt;useMemo&lt;/code&gt; Hook to memoize the value between renders. This allows us to avoid recomputing the same value in a component. &lt;/p&gt;

&lt;p&gt;Similar to &lt;code&gt;useCallback&lt;/code&gt;, the &lt;code&gt;useMemo&lt;/code&gt; Hook also expects a function and an array of dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoizedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// return expensive computation&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-codesplitting-in-react-using-dynamic-raw-import-endraw-"&gt;
  &lt;/a&gt;
  3. Code-splitting in React using dynamic &lt;code&gt;import()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Code-splitting is another important optimization technique for a React application. &lt;/p&gt;

&lt;p&gt;By default, when a React application renders in a browser, a “bundle” file containing the entire application code loads and serves to users at once. This file generates by merging all the code files needed to make a web application work. &lt;/p&gt;

&lt;p&gt;The idea of bundling is useful because it reduces the number of HTTP requests a page can handle. However, as an application grows, the file sizes increase, thus increasing the bundle file. &lt;/p&gt;

&lt;p&gt;At a certain point, this continuous file increase slows the initial page load, reducing the user’s satisfaction. &lt;/p&gt;

&lt;p&gt;With code-splitting, React allows us to split a large bundle file into multiple chunks using dynamic &lt;code&gt;import()&lt;/code&gt; followed by lazy loading these chunks on-demand using the &lt;code&gt;React.lazy&lt;/code&gt;. This strategy greatly improves the page performance of a complex React application. &lt;/p&gt;

&lt;p&gt;To implement code-splitting, we transform a normal React import like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/About&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then into something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/About&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This syntax tells React to load each component dynamically. So, when a user follows a link to the home page, for instance, React only downloads the file for the requested page instead of loading a large bundle file for the entire application. &lt;/p&gt;

&lt;p&gt;After the import, we must render the lazy components inside a &lt;code&gt;Suspense&lt;/code&gt; component like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading page...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;About&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Suspense&lt;/code&gt; allows us to display a loading text or indicator as a fallback while React waits to render the lazy component in the UI. &lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://codesandbox.io/s/silly-ives-c03ln?file=/src/App.js"&gt;try this out yourself in the CodeSandbox tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-windowing-or-list-virtualization-in-react"&gt;
  &lt;/a&gt;
  4. Windowing or list virtualization in React
&lt;/h3&gt;

&lt;p&gt;Imagine we have an application where we render several rows of items on a page. Whether or not any of the items display in the browser viewport, they render in the DOM and may affect the performance of our application. &lt;/p&gt;

&lt;p&gt;With the concept of windowing, we can render to the DOM only the visible portion to the user. Then, when scrolling, the remaining list items render while replacing the items that exit the viewport. This technique can greatly improve the rendering performance of a large list. &lt;/p&gt;

&lt;p&gt;Both &lt;a href="https://blog.logrocket.com/how-to-virtualize-large-lists-using-react-window/"&gt;react-window&lt;/a&gt; and &lt;a href="https://blog.logrocket.com/windowing-wars-react-virtualized-vs-react-window/"&gt;react-virtualized are two popular windowing libraries&lt;/a&gt; that can implement this concept.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-lazy-loading-images-in-react"&gt;
  &lt;/a&gt;
  5. Lazy loading images in React
&lt;/h3&gt;

&lt;p&gt;To optimize an application that consists of several images, we can avoid rendering all of the images at once to improve the page load time. With lazy loading, we can wait until each of the images is about to appear in the viewport before we render them in the DOM. &lt;/p&gt;

&lt;p&gt;Similar to the concept of windowing mentioned above, lazy loading images prevents the creation of unnecessary DOM nodes, boosting the performance of our React application. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/the-top-choices-for-react-lazy-loading-libraries-in-2021/"&gt;react-lazyload and react-lazy-load-image-component&lt;/a&gt; are popular lazy loading libraries that can be used in React projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To start an optimization process, we must first find a performance problem in our application to rectify. In this guide, we’ve explained how to measure the performance of a React application and how to optimize the performance for a better user experience. &lt;/p&gt;

&lt;p&gt;If you like this guide, ensure you share it around the web. Also, let me know which of the techniques interest you the most.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-visibility-into-production-react-apps"&gt;
  &lt;/a&gt;
  Full visibility into production React apps
&lt;/h2&gt;

&lt;p&gt;Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, try &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your React app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your React apps — &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>performance</category>
    </item>
    <item>
      <title>Get Last Login Info of user in laravel</title>
      <author>Snehal </author>
      <pubDate>Fri, 10 Sep 2021 18:55:08 +0000</pubDate>
      <link>https://dev.to/snehalk/get-last-login-of-user-in-laravel-ckg</link>
      <guid>https://dev.to/snehalk/get-last-login-of-user-in-laravel-ckg</guid>
      <description>&lt;p&gt;Hello, in some of the cases we require to track the user's last login activity into our site for that we need to save there login details into our database. Login details can contains last login date/time, location, IP address and more.&lt;/p&gt;

&lt;p&gt;So, in this blog we are going to save user's last login and its IP address into our database.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#steps-to-follow-"&gt;
  &lt;/a&gt;
  Steps to follow -
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Create Migrations&lt;/li&gt;
&lt;li&gt;Register Event/Listener&lt;/li&gt;
&lt;li&gt;Save/Display Last login info&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First create a migration files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:migration add_last_login_at_column_to_users_table
php artisan make:migration add_last_login_ip_address_column_to_users_table
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Write the below code in migration file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;for last login field&lt;br&gt;
&lt;code&gt;$table-&amp;gt;timestamp('last_login_at')-&amp;gt;nullable();&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for last last_login_ip_address field&lt;br&gt;
&lt;code&gt;$table-&amp;gt;timestamp('last_login_ip_address')-&amp;gt;after('last_login_at')-&amp;gt;nullable();&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am  using Laravel default scaffolding which gives us login and registration blade.&lt;/p&gt;

&lt;p&gt;Go to the Laravel documentation and search Authentication in that go to Event you will see the Login Event/Listener&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'Illuminate\Auth\Events\Login' =&amp;gt; [
        'App\Listeners\LogSuccessfulLogin',
    ],
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to create our own Listener, so that when user logged in we will save its login details. Register this Event in EventServiceProvider into &lt;code&gt;$listen&lt;/code&gt; event listener mapping.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;protected $listen = [
 'Illuminate\Auth\Events\Login' =&amp;gt; [
        'App\Listeners\UserLoginAt',
  ],
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that run this command: It will create Listener file &lt;code&gt;UserLoginAt&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan event:generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open UserLoginAt listener file and in handle method write the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Carbon\Carbon;

public function handle(Login $event)
{
    $event-&amp;gt;user-&amp;gt;update([
       'last_login_at =&amp;gt; Carbon::now(),
       'last_login_ip_address' =&amp;gt; request()-&amp;gt;getClientIp()
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the simple code we require to store user login details into our database.&lt;/p&gt;

&lt;p&gt;Now we can access this information anywhere into our project, by using below code. I am accessing it in dashboard.blade.php file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{ auth()-&amp;gt;user()-&amp;gt;last_login_at-&amp;gt;diffForHumans() }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for reading. 😀😀&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>vue</category>
      <category>womenintech</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Deep Dive and Deploy onto IBM Cloud Kubernetes Service</title>
      <author>Mrinalini Sugosh (Mrina)</author>
      <pubDate>Fri, 10 Sep 2021 18:51:53 +0000</pubDate>
      <link>https://dev.to/ibmdeveloper/deep-dive-and-deploy-onto-ibm-cloud-kubernetes-service-3j51</link>
      <guid>https://dev.to/ibmdeveloper/deep-dive-and-deploy-onto-ibm-cloud-kubernetes-service-3j51</guid>
      <description>&lt;p&gt;Welcome to THINK Days!&lt;/p&gt;

&lt;p&gt;A weekly blog series where I discuss and share my journey with IBM Cloud Services. At some point most of us have come across containers and images that we have managed on our own DockerHub. And running a few containers on your own is fine, but what do you do when you're running hundreds or thousands? That's where you need a container orchestration and that's precisely where Kubernetes comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-kubernetes"&gt;
  &lt;/a&gt;
  What is Kubernetes?
&lt;/h2&gt;

&lt;p&gt;Kubernetes is an open source project under the Cloud Native Computing Foundation(CNCF). It's around seven years young, has thousands of commits, and is a vibrant, well-supported&lt;br&gt;
open source ecosystem with many vendors contributing to the project from IBM to Google to Microsoft to Amazon (you get this gist). In fact, there are over 150 certified Kubernetes providers on the market today!&lt;/p&gt;

&lt;p&gt;The goal of Kubernetes is to make everything associated with deploying and managing your containers easier. This means it has automated rollouts and rollbacks which will scale your services up or down based on utilization. This ensures that you're only running what you need when you need it. It will monitor the health of your services to prevent bad roll outs. They will also continuously run health checks against your services and thereby restart containers that fail.&lt;/p&gt;

&lt;p&gt;Most importantly, Kubernetes is built to be used anywhere, allowing you to orchestrate deployments to public clouds, private clouds, on premise, or even hybrid cloud deployments.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#kubernetes-high-level-overview"&gt;
  &lt;/a&gt;
  Kubernetes High Level Overview
&lt;/h2&gt;

&lt;p&gt;The most common way that a System Administrator would interact with Kubernetes is through the &lt;code&gt;kubectl&lt;/code&gt; CLI. This acts as the communication between System Admin and a specific Kubernetes Cluster.&lt;br&gt;
The natural question is what is a cluster and how does that relate to my containerized images? Well, each cluster will have a master node and at least one worker node. Each worker node can support running multiple pods. Each pod is intern running an image of a containerized application.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ibm-cloud-kubernetes-service"&gt;
  &lt;/a&gt;
  IBM Cloud Kubernetes Service
&lt;/h2&gt;

&lt;p&gt;IBM Cloud offers a fully managed Kubernetes service in a matter of minutes called IBM Cloud Kubernetes Service or IKS. You can spin up your own Kubernetes cluster, have access to worker nodes, and start deploying applications. IBM Cloud's Kubernetes service has many benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fully managed&lt;/li&gt;
&lt;li&gt;provides automatic upgrades&lt;/li&gt;
&lt;li&gt;Security Compliance (PCI ,HIPAA, SOC1, and more)&lt;/li&gt;
&lt;li&gt;configure as a single or multi zone cluster
IKS also has several supported add-on benefits:&lt;/li&gt;
&lt;li&gt;a service mesh or serverless onto your cluster.&lt;/li&gt;
&lt;li&gt;logging and monitoring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's dive a little deeper...&lt;/p&gt;

&lt;p&gt;IKS can be deployed to any of the six regions on IBM Cloud. This includes North America, East, West, South, the APAC Region, Europe and South America.&lt;br&gt;
There are different ways to deploy IBM Cloud Kubernetes service. The first is on a virtual shared instance. This will provision IKS on virtual machines.&lt;br&gt;
Next is a virtual dedicated instance which is going to provision your cluster on a dedicated server. Note, that this is a single tenant instance. &lt;br&gt;
Lastly, you can provision your Kubernetes cluster on a bare metal server.&lt;br&gt;
Each type of deployment has multiple profiles ranging from 2vCPU to 512 gigabytes of RAM. The billing for IKS is hourly, monthly or even has a LITE option which is free for one cluster upto a certain limit.&lt;br&gt;
There are two other services worth highlighting when discussing IKS:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ibm-cloud-container-registry"&gt;
  &lt;/a&gt;
  IBM Cloud Container Registry
&lt;/h3&gt;

&lt;p&gt;The first is the IBM Cloud Container Registry which is used to store container images in a fully managed multi-tenant registry. It's highly available as the service is hosted and managed by IBM Cloud. You can configure your images to be privately accessed by other users in your IBM Cloud&lt;br&gt;
account shareable with API keys or even make them publicly available. Images in the container registry will also be scanned by the vulnerability advisor tool which makes it secure. If you would like a tutorial on this service, be sure to checkout my blog to &lt;a href="https://dev.to/ibmdeveloper/deploy-a-nodejs-app-to-ibm-cloud-container-registry-46m2"&gt;Deploy a NodeJS app to IBM Cloud Container Registry&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#helm-catalog"&gt;
  &lt;/a&gt;
  Helm Catalog
&lt;/h3&gt;

&lt;p&gt;The other service is the Helm Catalog which is unique to IBM Cloud. It allows users to use helm to install and upgrade complex Kubernetes applications in a cluster. The helm catalog in IBM Cloud has access to IBM products, popular open source products, like Jenkins and Tecton, and supports multiple architectures like X86 power NZ.&lt;/p&gt;

&lt;p&gt;Now that we have dived into the features and availabilities on IBM Cloud Kubernetes service let's take a look at how to deploy an app onto this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tutorial"&gt;
  &lt;/a&gt;
  Tutorial
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#create-a-free-kubernetes-cluster"&gt;
  &lt;/a&gt;
  Create a free Kubernetes cluster
&lt;/h3&gt;

&lt;p&gt;Navigate to &lt;a href="https://cloud.ibm.com"&gt;https://cloud.ibm.com&lt;/a&gt; to log into IBM Cloud. You'll be presented with an empty console. Click on the Catalog button on the top-right.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQnTXgpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9boltuxpzobfy141kq6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQnTXgpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9boltuxpzobfy141kq6k.png" alt="Screen Shot 2021-09-10 at 2.01.19 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the catalog, choose the Kubernetes option.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PR2TfzEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ubdr7tcywpkkujgpn8x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PR2TfzEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ubdr7tcywpkkujgpn8x.png" alt="Screen Shot 2021-09-10 at 2.02.59 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose the Free tier option, give your cluster a unique name and click Create.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DvLGk5LY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gictbbb27cysq23joyoj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DvLGk5LY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gictbbb27cysq23joyoj.png" alt="Screen Shot 2021-09-10 at 2.04.03 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#launch-the-ibm-cloud-shell"&gt;
  &lt;/a&gt;
  Launch the IBM Cloud Shell
&lt;/h3&gt;

&lt;p&gt;Once your cluster is created click on the &lt;code&gt;Actions&lt;/code&gt; menu on the top right, and choose the &lt;code&gt;Connect via CLI&lt;/code&gt; option.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eteCIbr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89mar7jof58ho9jaweyl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eteCIbr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89mar7jof58ho9jaweyl.png" alt="Screen Shot 2021-09-10 at 2.05.50 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the clipboard to copy the command, the one using the ibmcloud ks cluster config command. This will set any kubectl commands to use your newly created cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jcWGhip4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hl00y7oobmwsyt1zka4m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jcWGhip4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hl00y7oobmwsyt1zka4m.png" alt="Screen Shot 2021-09-10 at 2.29.38 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we'll be using the IBM Cloud Shell, which is available by clicking on the terminal icon on the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B8lH8Ig0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d8u3i7idhfqc9i9oytm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8lH8Ig0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d8u3i7idhfqc9i9oytm.png" alt="Screen Shot 2021-09-10 at 2.38.13 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once loaded, you'll be presented with an embedded web terminal that has the &lt;code&gt;ibmcloud&lt;/code&gt; and &lt;code&gt;kubectl&lt;/code&gt; CLIs available.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BCUGv6A6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oncxrg18cpjol7rgwaxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCUGv6A6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oncxrg18cpjol7rgwaxj.png" alt="Screen Shot 2021-09-10 at 2.39.52 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#connect-to-your-cluster"&gt;
  &lt;/a&gt;
  Connect to your cluster
&lt;/h3&gt;

&lt;p&gt;From the IBM Cloud Shell, run the following command, replacing your cluster ID in the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ibmcloud ks cluster config --cluster &amp;lt;CLUSTER_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output should look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkv7-euV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vn5bci86wy4hnh7rkuxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkv7-euV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vn5bci86wy4hnh7rkuxg.png" alt="Screen Shot 2021-09-10 at 2.41.25 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploy-the-application"&gt;
  &lt;/a&gt;
  Deploy the application
&lt;/h3&gt;

&lt;p&gt;For this tutorial, we'll run a sample IBM Sample App that detects objects in a picture. Deploy the application by running the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/IBM/MAX-Object-Detector/master/max-object-detector.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XASpV1_y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldb0wrjj6wvdc804vjmk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XASpV1_y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldb0wrjj6wvdc804vjmk.png" alt="Screen Shot 2021-09-10 at 2.43.03 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#access-the-app-via-public-ip-and-port"&gt;
  &lt;/a&gt;
  Access the App via Public IP and Port
&lt;/h3&gt;

&lt;p&gt;After a few minutes, the application should be available. To access it we need to find the public IP address of the cluster, and the port the application is running on.&lt;/p&gt;

&lt;p&gt;To find the public IP address of the cluster run the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ibmcloud cs workers --cluster &amp;lt;CLUSTER_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to find the port the application is running on, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl describe service max-object-detector | grep NodePort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's finally put it all together and access the app. From your browser navigate to the URL with the information above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://&amp;lt;public-ip-address:&amp;lt;port&amp;gt;/app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--htLPxfd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ijnj8kxfmtwvurlpw7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htLPxfd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ijnj8kxfmtwvurlpw7v.png" alt="Screen Shot 2021-09-10 at 2.50.55 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oila! You have successfully deployed an app onto a cluster in IBM Cloud Kubernetes Service.&lt;/p&gt;

&lt;p&gt;Thank you for following along this THINK Day's Tutorial and be sure to look out for my next post, where I will continue sharing my Journey with IBM Cloud Services!!!&lt;/p&gt;

&lt;p&gt;==== Follow me on Social Media(&lt;code&gt;@mrinasugosh&lt;/code&gt;) ====&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;
 &lt;br&gt;
Github: &lt;a href="https://github.com/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/mrinasugosh/"&gt;@mrinasugosh&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>cloud</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Seed Data Fast with the Faker Gem ⚡️🏃🏻💨</title>
      <author>Maxine Meurer</author>
      <pubDate>Fri, 10 Sep 2021 18:38:59 +0000</pubDate>
      <link>https://dev.to/mmeurer00/seed-data-fast-with-the-faker-gem-nej</link>
      <guid>https://dev.to/mmeurer00/seed-data-fast-with-the-faker-gem-nej</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;What is Faker?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;Installation &amp;amp; Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Chances are you're here because you saw the word combination &lt;em&gt;Seed Data Fast&lt;/em&gt;, and I don't blame you! Creating a database is enough work itself, so coming up with custom seed data can become an unnecessary and time-consuming task. But all thanks to the Ruby &lt;strong&gt;&lt;a href="https://github.com/faker-ruby/faker"&gt;Faker gem&lt;/a&gt;&lt;/strong&gt;, seeding data can be done in a &lt;strong&gt;quick&lt;/strong&gt;, &lt;strong&gt;easy&lt;/strong&gt;, and &lt;strong&gt;fun&lt;/strong&gt; way!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-faker"&gt;
  &lt;/a&gt;
  What is Faker? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Faker is a Ruby gem written by Jason Kohles. Like many of us, Jason got sick of spending time writing out seed data, so he made a gem to make all of our lives easier. &lt;em&gt;Thanks, Jason!&lt;/em&gt; Faker comes with a handful of generators that allow you to generate fake data such as names, emails, phone numbers, addresses, Twitter posts, job titles, and more! There are also methods available to provide you with &lt;a href="https://github.com/faker-ruby/faker#ensuring-unique-values"&gt;unique data&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This is a Ruby Gem and will only work for Ruby applications.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First, install the Ruby Faker Gem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem install faker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the gem has successfully installed, head over to the &lt;code&gt;seeds.rb&lt;/code&gt; file, and require the gem at the top of the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'faker'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You're ready to go, all there's left to do is... &lt;em&gt;Seed&lt;/em&gt;. &lt;em&gt;That&lt;/em&gt;. &lt;em&gt;Data&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;seeds.rb&lt;/code&gt; file, go ahead and write a small script using the Faker gem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# generate 10 users&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Esport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;player&lt;/span&gt;
    &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
    &lt;span class="n"&gt;profession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Internet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;full_address&lt;/span&gt;
    &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PhoneNumber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cell_phone&lt;/span&gt;
    &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;username: &lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;profession: &lt;/span&gt;&lt;span class="n"&gt;profession&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;address: &lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;phone: &lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've created a beautiful script containing all your lovely data, seed it! In your terminal run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails db:seed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check everything was seeded correctly by confirming your data is present within the rails console, or if you have your server up and running, you can check your routes. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: If no seed data shows up, see that you are meeting all validations in your model that may be prohibiting the data from being created in the first place.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There you have it! ✨&lt;em&gt;Data&lt;/em&gt;✨&lt;/p&gt;

&lt;p&gt;If you need to create data that there are not necessarily generators for, get creative with ones that already exist! As you can see in the example script provided above, there was no username generator, so the Esport generator with the &lt;code&gt;.player&lt;/code&gt; method was used instead. Most of the generators provide multiple methods for various types of, as well as unique data. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Creating seed data can be a tedious task, but it doesn't have to be! The Faker gem is fantastic for fast, simple, and sometimes funny seed data. &lt;/p&gt;

&lt;p&gt;If you have any alternative ways/gems to seed data, feel free to share them below! Happy Seeding! 🌱  &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>javascript</category>
      <category>database</category>
      <category>devops</category>
    </item>
    <item>
      <title>Developer Diaries: Week 4 - The exploding brain</title>
      <author>Brittany Joiner</author>
      <pubDate>Fri, 10 Sep 2021 18:34:27 +0000</pubDate>
      <link>https://dev.to/brittany_join/developer-diaries-week-4-the-exploding-brain-23ph</link>
      <guid>https://dev.to/brittany_join/developer-diaries-week-4-the-exploding-brain-23ph</guid>
      <description>&lt;p&gt;What a week! Let's dive right in. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#imposter-syndrome"&gt;
  &lt;/a&gt;
  Imposter Syndrome
&lt;/h1&gt;

&lt;p&gt;Let's start off with the &lt;em&gt;worst&lt;/em&gt; part of this week. I was getting a little discouraged because I had a PR that it just seemed no matter what I did on it, it wasn't good enough. And I 💯% know it's because I have a team that wants to push me and help me be the best version I can be, but man sometimes it's just a little deflating when you can't get something quite right. &lt;/p&gt;

&lt;p&gt;It had &lt;strong&gt;over 74 comments on it and 9 commits&lt;/strong&gt; before it was finally ready to go. And with each commit, I'd be like, okay this is perfect now, right? And it wasn't. 😭 I was like &lt;em&gt;"Do I even know what I'm doing? Should I be here if I can't write code well yet?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But honestly, when I look at where it started vs where it ended, I could tell it was totally worth it, and I learned a lot along the way. Everyone was very patient with me and there was zero shaming for my lack of knowledge or anything like that - it was definitely a "let's do this better together" type of thing, and I was extremely grateful for it in the end, but in the process, I felt a little deflated at having to keep on trying and not getting it quite perfect.&lt;/p&gt;

&lt;p&gt;I actually found Reddit to be a nice space to vent for a bit and got a ton of encouragement on this post. So if you're having down days, that's totally normal. There's no such thing as perfect code, and more feedback is totally normal and helps you grow. Reach out to your folks and #TrustTheProcess.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learning-how-to-test-with-jest"&gt;
  &lt;/a&gt;
  Learning How To Test with Jest
&lt;/h1&gt;

&lt;p&gt;Part of my Really Long PR (as it will henceforth be named) involved a request for setting up test. This is great, but I had never set up a test before, and it proved to be a little challenging - not just for me, but also another senior dev who was helping me! I was honestly a little encouraged that it wasn't a cut and dry, super simple thing for him either, but together we were able to figure it out, and I actually started added tests to my other PR that I had out, as well!&lt;/p&gt;

&lt;p&gt;So I'm going to try to start incorporating more of that to practice. I found Google a little frustrating here, because I'd be like "how do i x with Jest and Enzyme" and i saw all sorts of answers, and honestly, a lot of them didn't work at all. It was super strange. But with some patience and tweaking I was able to get it. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#standup-improvements"&gt;
  &lt;/a&gt;
  Standup Improvements
&lt;/h1&gt;

&lt;p&gt;We currently do standups on M/W/F, but we're contemplating moving those 15 minute meetings to T/TR, and on the other days do an "asynchronous" standup. To do that, we are evaluating if we want to just create a Slackbot reminder message in our channel, or if we want to involve a more formal Standup Bot tool, like &lt;a href="https://geekbot.com/"&gt;Geekbot&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I got to check into the standup bot tools, and I think Geekbot is actually pretty cool. Sends users a DM with questions, and then compiles those answers in a standup report in the channel. I had some fun while I was testing it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6jQz0ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627656787232/KYOBPxkTX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6jQz0ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627656787232/KYOBPxkTX.png" alt="image (15).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for this week! 👋&lt;/p&gt;

</description>
      <category>testing</category>
      <category>devjournal</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>The Top-10 reasons you should attend CascadiaJS 2021</title>
      <author>CascadiaJS Staff</author>
      <pubDate>Fri, 10 Sep 2021 18:29:49 +0000</pubDate>
      <link>https://dev.to/cascadiajs_staff/the-top-10-reasons-you-should-attend-cascadiajs-2021-3nlc</link>
      <guid>https://dev.to/cascadiajs_staff/the-top-10-reasons-you-should-attend-cascadiajs-2021-3nlc</guid>
      <description>&lt;p&gt;This year's CascadiaJS is going to be so big and so awesome, it's hard to fit everything that we're putting together for you into a single tweet.&lt;/p&gt;

&lt;p&gt;So here's a quick Top-10 list of why this year's event is going to be our best one yet. Don't miss out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-speakers"&gt;
  &lt;/a&gt;
  1. The speakers
&lt;/h2&gt;

&lt;p&gt;This year's &lt;a href="https://2021.cascadiajs.com/speakers"&gt;speaker lineup&lt;/a&gt; is just out of this world Ringed planet&lt;/p&gt;

&lt;p&gt;From #web3 to #ML to #OpenSource to #a11y, there are talks for every kind of web developer and every stage in their career. And all in a single track, so you won't miss anything!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-an-awesome-virtual-experience"&gt;
  &lt;/a&gt;
  2. An awesome virtual experience
&lt;/h2&gt;

&lt;p&gt;For folks who don't live in Cascadia or prefer to stay at home, we are shipping the same, &lt;a href="https://2021.cascadiajs.com/conf"&gt;amazing virtual experience&lt;/a&gt; that we shipped last year!&lt;/p&gt;

&lt;p&gt;📺 Live streamed talks&lt;br&gt;
🤝 Networking activities&lt;br&gt;
🎉 Virtual parties &amp;amp; trivia &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-inperson-options"&gt;
  &lt;/a&gt;
  3. In-person options
&lt;/h2&gt;

&lt;p&gt;This year's conference is the 1st to feature &lt;a href="https://2021.cascadiajs.com/conf/hybrid"&gt;3 simultaneous in-person events&lt;/a&gt; in the major cities of Cascadia: Seattle, Portland and Vancouver BC Flag of United StatesFlag of Canada&lt;/p&gt;

&lt;p&gt;You can attend CascadiaJS from the comfort of your own city (and your own bed)!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-an-epic-goodie-box-shipped-to-you"&gt;
  &lt;/a&gt;
  4. An epic Goodie Box shipped to you!
&lt;/h2&gt;

&lt;p&gt;For every attendee who registers before &lt;code&gt;Sept 17&lt;/code&gt;, we are shipping them their own Goodie Box that will include a conference hoodie plus a bunch of other awesome goodies.&lt;/p&gt;

&lt;p&gt;We built a &lt;a href="https://2021.cascadiajs.com/hoodie-fit-guide"&gt;fit guide&lt;/a&gt; this year because people come in all shapes and sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-scholarships"&gt;
  &lt;/a&gt;
  5. Scholarships
&lt;/h2&gt;

&lt;p&gt;We have an &lt;a href="https://2021.cascadiajs.com/scholarships"&gt;Opportunity Scholarship program&lt;/a&gt; for folks who belong to under-represented groups or have issues purchasing tickets at full price.&lt;/p&gt;

&lt;p&gt;And, so far, it's been funded by &lt;em&gt;our community&lt;/em&gt; to the tune of $1360.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-a-hack-day"&gt;
  &lt;/a&gt;
  6. A Hack Day
&lt;/h2&gt;

&lt;p&gt;We are hosting our first ever &lt;a href="https://2021.cascadiajs.com/hackday"&gt;Hack Day&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The folks from &lt;a href="http://battlesnake.com"&gt;Battlesnake&lt;/a&gt; are going to help us run the CascadiaJS Cup where developers code their very own BattleSnake and pit them against each other in 2 dimensional combat.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-central-venues-for-the-inperson-daytime-events"&gt;
  &lt;/a&gt;
  7. Central venues for the in-person daytime events
&lt;/h2&gt;

&lt;p&gt;The venues in Seattle, Portland and Vancouver BC for the daytime events are going to be EPIC.&lt;/p&gt;

&lt;p&gt;We've announced UBC Robson Square in Vancouver, and are on the cusp of making big announcements for SEA and PDX.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-epic-nighttime-after-parties"&gt;
  &lt;/a&gt;
  8. Epic night-time after parties
&lt;/h2&gt;

&lt;p&gt;The night-time Opening and Closing in-person after parties are going to be 🔥&lt;/p&gt;

&lt;p&gt;Like the daytime events, these events will be 100% private and will require everyone to be vaccinated.&lt;/p&gt;

&lt;p&gt;We're still working on the details, but the probability of karaoke 🎤 is &lt;em&gt;very&lt;/em&gt; high.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-postconference-workshops"&gt;
  &lt;/a&gt;
  9. Post-conference workshops
&lt;/h2&gt;

&lt;p&gt;Following the conference is an ENTIRE WEEK of &lt;a href="https://2021.cascadiajs.com/workshops"&gt;world-class programming workshops&lt;/a&gt; being hosted by &lt;a class="mentioned-user" href="https://dev.to/eveporcello"&gt;@eveporcello&lt;/a&gt;
 &lt;a class="mentioned-user" href="https://dev.to/blove"&gt;@blove&lt;/a&gt;
 &lt;a class="mentioned-user" href="https://dev.to/marcysutton"&gt;@marcysutton&lt;/a&gt;
 and Ben Ilegbodu 👀&lt;/p&gt;

&lt;p&gt;They are covering everything from #javascript to #a11y to #performance to #graphql and more!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-the-community"&gt;
  &lt;/a&gt;
  10. The community
&lt;/h2&gt;

&lt;p&gt;Finally, the last reason to attend CascadiaJS is because you'll be joining a kind of inclusive community of web developers.&lt;/p&gt;

&lt;p&gt;You may find a new job, you'll probably learn some new skills, but we KNOW you'll make some great friends Growing heart&lt;/p&gt;

&lt;p&gt;&lt;a href="http://2021.cascadiajs.com"&gt;http://2021.cascadiajs.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How to become a better developer.</title>
      <author>Tech Job Insight Newsletter</author>
      <pubDate>Fri, 10 Sep 2021 18:28:20 +0000</pubDate>
      <link>https://dev.to/techjobinsight/how-to-become-a-better-developer-76a</link>
      <guid>https://dev.to/techjobinsight/how-to-become-a-better-developer-76a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#code-a-little-every-day"&gt;
  &lt;/a&gt;
  Code a little every day
&lt;/h2&gt;

&lt;p&gt;If you are starting out, it’s super important that you code a little every day. It doesn’t need to be in 5 hour-long sessions, even just 10–20 minutes a day. Doing a simple coding challenge is enough, ideally the longer the better.&lt;br&gt;
Find code challenges on &lt;a href="https://www.codewars.com/"&gt;https://www.codewars.com/&lt;/a&gt; or &lt;a href="https://www.hackerrank.com/"&gt;https://www.hackerrank.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I was starting out, I created a repository on my Github account, which contained all of my solutions for various coding challenges. By doing this, I was getting experience with using version control in my projects. This came in handy when I eventually landed a job and had to know how to use git.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-up-on-best-practices"&gt;
  &lt;/a&gt;
  Read up on best practices
&lt;/h2&gt;

&lt;p&gt;You can find lots of articles on Clean Code around the internet, but I would recommend getting a copy of clean code by Robert C. Martin. or just read someone’s notes on the book (&lt;a href="https://github.com/JuanCrg90/Clean-Code-Notes"&gt;https://github.com/JuanCrg90/Clean-Code-Notes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Understanding what clean code is when you are first starting out will put you on the right track to develop good habits. This book will teach the best practices of variable naming conventions, when and when not to write comments, how big your functions should be and much, much more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#put-your-code-on-github"&gt;
  &lt;/a&gt;
  Put your code on Github
&lt;/h2&gt;

&lt;p&gt;It’s a great way to share your code and collaborate with others. It also lets employers know you are familiar with version control and know at least some basic git operations.&lt;/p&gt;

&lt;p&gt;Another cool thing about GitHub is that you can look at other people’s code. This comes in handy when you’re trying to use a library and you’re not sure how to use it. You can just look on GitHub to see how people are using it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-project"&gt;
  &lt;/a&gt;
  Create a project
&lt;/h2&gt;

&lt;p&gt;This is really important, the project doesn’t have to be amazing, just have some degree of complexity i.e Frontend + Backend, and is hosted online. Ideally on some cloud platform (cloud is all the rage these days). The goal is to have something to talk about during a job interview.&lt;br&gt;
The app can be something simple, like a weather app or film/music database. I had a simple app that displayed crypto coin prices; I hosted it on AWS. The goal here is to show your ability to figure out an array of different technologies and make them work together.&lt;/p&gt;

&lt;p&gt;If you are stuck for ideas, there is a great website &lt;a href="https://www.frontendmentor.io/"&gt;https://www.frontendmentor.io/&lt;/a&gt; that allows you to solve real-world HTML, CSS and JavaScript challenges whilst working to professional designs.&lt;br&gt;
Practice Test Driven Development (TDD)&lt;br&gt;
It can seem like there is a lot of information to absorb when you are starting out, but remember you don’t need to be an expert, just understand enough to get going.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-pyramid"&gt;
  &lt;/a&gt;
  Testing Pyramid
&lt;/h2&gt;

&lt;p&gt;When learning TDD, familiarising yourself with the Testing Pyramid will give you a head start. When I was first learning about TDD, I would practice writing tests after I had completed a coding challenge. Here is a great in-depth article on TDD.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-yourself-updated"&gt;
  &lt;/a&gt;
  Keep yourself updated
&lt;/h2&gt;

&lt;p&gt;Technology is always changing, frameworks come and go, languages rise and fall in popularity, some quicker than others. Change is the only constant in tech. Keeping up to date with technology trends is important. I do this primarily through newsletters and podcasts. Here are some of my favourites:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#podcasts"&gt;
  &lt;/a&gt;
  Podcasts
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.blog/podcast/"&gt;https://stackoverflow.blog/podcast/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.serverlesschats.com/"&gt;https://www.serverlesschats.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://devchat.tv/show/javascript-jabber/"&gt;https://devchat.tv/show/javascript-jabber/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#newsletters"&gt;
  &lt;/a&gt;
  Newsletters
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://javascriptweekly.com/"&gt;https://javascriptweekly.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://webtoolsweekly.com/"&gt;https://webtoolsweekly.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://react.statuscode.com/"&gt;https://react.statuscode.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.techjobinsight.com/"&gt;https://www.techjobinsight.com/&lt;/a&gt; (My own newsletter)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If any of this was helpful consider signing up to my newsletter for weekly insights on the tech industry, the latest tech trends, and advice on how to get into the industry&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
