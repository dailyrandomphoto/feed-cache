<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The REAL difference between 5gz or 2.4gz WiFi</title>
      <author>Ben Halpern</author>
      <pubDate>Fri, 17 Sep 2021 22:18:50 +0000</pubDate>
      <link>https://dev.to/ben/the-real-difference-between-5gz-or-2-4gz-wifi-5046</link>
      <guid>https://dev.to/ben/the-real-difference-between-5gz-or-2-4gz-wifi-5046</guid>
      <description>&lt;p&gt;This post comes from some interesting tweets I saw, and really speaks to how difficult it can be to get the right amount of "correctness" when you seek to find out about how technology works.&lt;/p&gt;

&lt;p&gt;Maybe you know the answer posed in the title, maybe you think you know, maybe you were afraid to ask. Lucky for you, &lt;a class="mentioned-user" href="https://dev.to/bnb"&gt;@bnb&lt;/a&gt;
 came asking.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--QC642jpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1433091103318814723/fuQwkhru_normal.jpg" alt="Tierney Cyren profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tierney Cyren
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @bitandbang
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Honest question: is 5gz or 2.4gz better for WiFi?&lt;br&gt;&lt;br&gt;I thought it was the former but have seen some tech people making the inverse assertion.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:25 PM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438886755156045832" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438886755156045832" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438886755156045832" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Several folks popped in with answers...&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tlk3BB5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1432101325529964545/FH-g7eA4_normal.jpg" alt="Laurie Voss profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Laurie Voss
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/seldo"&gt;@seldo&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/bitandbang"&gt;@bitandbang&lt;/a&gt; They're not better or worse, just different. 5ghz being higher frequency can provide higher bandwidth under optimal conditions; 2.4ghz being lower frequency can travel "through" more things. So which is best depends how far you are from the router and what's between you and it.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:28 PM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438887540132438016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438887540132438016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438887540132438016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_CxK5FY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/897079141719195648/_mvh-QJH_normal.jpg" alt="Abraham Williams profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Abraham Williams
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/abraham"&gt;@abraham&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/bitandbang"&gt;@bitandbang&lt;/a&gt; 5 is faster and has short range and poor wall penetration. 2.4 is slower with better range
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:27 PM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438887304878333963" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438887304878333963" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438887304878333963" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPBRHrfS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1385606593690017793/9rWH23Os_normal.jpg" alt="vantreeseba profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        vantreeseba
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @vantreeseba
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/bitandbang"&gt;@bitandbang&lt;/a&gt; It depends.&lt;br&gt;&lt;br&gt;5ghz has higher bandwidth, 2.4ghz has better penetration.&lt;br&gt;E.G. Phones use tons of diff freq for this reason, 5g uses 36-24ghz, 2.5-3.7ghz and 600-850mhz, all because of penetration problems with higher freq.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:06 PM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438897154500792322" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438897154500792322" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438897154500792322" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;We have consensus, right?&lt;/p&gt;

&lt;p&gt;Basic Internet research would back this up...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lWpzQ6th--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drazdenpas61tlwef994.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lWpzQ6th--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drazdenpas61tlwef994.png" alt="5 vs 2.4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Case closed... Except.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vk8AeXq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1247154720080191490/RTBtUks5_normal.jpg" alt="Malte Ubl profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Malte Ubl
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @cramforce
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/bitandbang"&gt;@bitandbang&lt;/a&gt; 5GHz is better in every way. The myth (see other replies) that 2.4 GHz is longer range comes from bad APs which scan for open channels and pick the least busy ones which are the subset of channels that are permitted for less power output than 2.4 GHz.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:46 PM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438892061487366144" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438892061487366144" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438892061487366144" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vk8AeXq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1247154720080191490/RTBtUks5_normal.jpg" alt="Malte Ubl profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Malte Ubl
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @cramforce
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/bitandbang"&gt;@bitandbang&lt;/a&gt; The main benefit of 5 GHz comes from the many more available channels and hence less congestion. If you really want good Wifi you want&lt;br&gt;- a modern AP (they got sooo much better over the last 4 years)&lt;br&gt;- have many APs on the same SSID (ideally one per room) and wire them together.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:48 PM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438892507480289284" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438892507480289284" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438892507480289284" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;That's a whole different story. But the whole Internet is telling me about "shorter range" at 5GHz.&lt;/p&gt;

&lt;p&gt;I don't want to leave anyone here with an absolute conclusion, as I don't want to take anyone here "at face value".&lt;/p&gt;

&lt;p&gt;If anyone wants to go deeper in the comments in the comments with some absolute facts on the issue, I very much welcome them.&lt;/p&gt;

</description>
      <category>wifi</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>All Day Mobbing Can Lead to a Poor Developer Experience</title>
      <author>Attila Komaromi</author>
      <pubDate>Fri, 17 Sep 2021 21:58:58 +0000</pubDate>
      <link>https://dev.to/twinbird24/all-day-mobbing-can-lead-to-a-poor-developer-experience-1ahi</link>
      <guid>https://dev.to/twinbird24/all-day-mobbing-can-lead-to-a-poor-developer-experience-1ahi</guid>
      <description>&lt;h1&gt;
  &lt;a href="#all-day-mobbing-can-lead-to-a-poor-developer-experience"&gt;
  &lt;/a&gt;
  All Day Mobbing Can Lead to a Poor Developer Experience
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-mobbing"&gt;
  &lt;/a&gt;
  What is mobbing?
&lt;/h3&gt;

&lt;p&gt;Mob programming is like pairing, but with 3 or more people, sometimes up to 8 or more. It doesn’t have to be just programmers in the mob, it could be designers or product managers too, for example. There will be one keyboard, mouse, and monitor—only one person in control at a time, who is dubbed “the driver.” Besides the driver, you also have the navigator, who is in charge of keeping the driver focused on the main goals at hand, offering direction on what to write and how to write it. The remaining group is also part of the mob, usually not directly engaged but may occasionally offer suggestions or ask questions. The individuals in these roles will regularly rotate, the navigator becomes the driver, the driver moves into the mob, and a new person previously in the mob will now navigate. The mob usually decides when to rotate, and may do it after each commit, or at specific timed intervals, for example. In my experience, 5 minute timed intervals are common. The teams I work with often use the following tool to set up and manage their mobs: &lt;a href="https://mobti.me"&gt;https://mobti.me&lt;/a&gt;. Taking a look at how this tool works may also give you a better understanding of how mob programming is generally structured.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mob-programming-all-day"&gt;
  &lt;/a&gt;
  Mob programming all day
&lt;/h3&gt;

&lt;p&gt;Mobbing has benefits, it can be a great idea when working on a complex architectural set up, for example, where you want your entire team to understand the foundational concepts and have experience in setting up the infrastructure. It can be great when making modifications to a design, where you can have input from someone who is more design oriented and someone more business oriented, which can cut down the time needed to fix a design issue. It can be great for ramping up a junior dev on a project. Problems arise, however, when you take several programmers, especially those with related expertise, and force them to mob &lt;em&gt;all&lt;/em&gt; day, on &lt;em&gt;every&lt;/em&gt; feature.&lt;/p&gt;

&lt;p&gt;When engaged in constant mobbing sessions, I'm not given the opportunity to dig through the code individually without distractions and I'm not given the responsibility to make individual contributions. Instead, I'm constrained by the remote "mobbing" server—I can't take advantage of my crisp 4K monitor and local set-up that I've grown accustomed to over the years. My team is at the whims of the remote server that occasionally goes down, or suffers from connection issues.&lt;/p&gt;

&lt;p&gt;Over time, constant mobbing on every issue, every day, creates a diffusion of responsibility, leading to less individual ownership of the code and less incentive to be creative yourself—it creates a reliance on the mob that decreases personal problem solving skills and discourages creativity and curiosity.&lt;/p&gt;

&lt;p&gt;Personally, I learn much faster by being alone with the codebase and struggling with the solution myself—using tools like pairing only when required, if I get stuck on a problem for too long or need extra input, for example. Having to mob constantly isn't a permanent solution for situations like this, and instead leads to &lt;a href="https://en.wikipedia.org/wiki/Zoom_fatigue"&gt;Zoom fatigue&lt;/a&gt;, only causing further frustration.&lt;/p&gt;

&lt;p&gt;Mobbing certainly has benefits, like I mentioned earlier, but it's a tool, and just like any other tool, it has a time and place to be used. When mobbing is turned into a golden hammer, and everything becomes a nail, is when mobbing stops being an effective tool. All-day mobbing becomes the new paradigm—the standard way to solve issues—rather than just another tool in our belts. It's just assumed that every problem can be solved by the mob, and mobbing is the quintessential way of delivering code. This couldn't be further from the truth, however. The reality is that the majority of software teams deploy the currently accepted, tried and tested methods of creating software: individual focused work (sometimes referred to as "flow"), occasionally pairing or mobbing, code reviews, and open communication. When paired with remote and asynchronous work (which has become commonplace since 2019) we have a developer experience that allows the individual to contribute meaningful, creative and  thoughtful code while still having the luxury to use whatever tools necessary to finish the job at their own convenience, at the pace they find comfortable and, most of all, without the constant distractions of an all-day mob.&lt;/p&gt;

&lt;p&gt;And it's the constant distraction of the all-day mob that is one of its greatest downfalls. Having to rotate every 5 minutes for 1.5 hour periods, for example, is quite draining. The context switching leads to Zoom fatigue much faster, and can prevent an individual from doing focused work. While you are driving (i.e. actively writing code) you are at the whims of the navigator who dictates what you should do and how you should do it. The navigator is constantly derailing your train of thought with suggestions, opinions, and questions. While you are navigating, you are giving commands to another user, who from my personal experience, usually already knows what they should be doing. While in a non-active mob role (i.e. neither driving nor navigating) you are essentially just watching someone else work—it's a very disengaging position to be in. The situation is made worse when the work at hand isn't particularly engaging to begin with—when it's work that absolutely doesn't need 3 engineers to work on at the same time. Bug tickets, or data entry work, for example. I've personally come into situations like this many times, where the mob is needlessly drudging through a bug ticket or data fix only because it's "just the way we work" irrespective of the fact that it's wasting time and resources. That’s not to say that this setup always leads to a terrible developer experience, the point I’m trying to drive home is that mobbing has a time and place. It’s up to the team to decide what is an acceptable time to mob, what is an acceptable issue to work on, and who can benefit the most from—or contribute the most to—the mob.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#does-mobbing-lead-to-faster-delivery"&gt;
  &lt;/a&gt;
  Does mobbing lead to faster delivery
&lt;/h3&gt;

&lt;p&gt;One major argument I’ve heard a lot is that mobbing leads to a tighter feedback loop, and ultimately faster deployment of features. You have your entire team mobbing on the feature, so you can skip the code review. You have your entire team mobbing on the feature, so bugs are spotted more frequently and squashed. You have your entire team mobbing on the feature, so instead of spending time researching or browsing Stack Overflow, you’re more likely to have another experienced member jump in with the solution. In theory, this is what should happen. From experience, this is often not the case.&lt;/p&gt;

&lt;p&gt;In many scenarios, it’s hard to completely eliminate the PR review process. Your client’s devs will still want to review it, or perhaps a team member couldn’t make it to the mob and they still need to review the code. Perhaps an individual in another department, or overseas, needs to review the code before it gets merged. I’ve almost never encountered a situation where the mob was able to actually skip the PR review process completely and push the code directly to staging or production.&lt;/p&gt;

&lt;p&gt;When your entire team is mobbing on the same feature, they eventually adopt the same train of thought. Their experience with the codebase begins to converge and knowledge transfer of important concepts has already occurred. In the long run, this means that knowledge transfer and experience will only grow in the constraints of the mobbing computer—and this decreases diversity and could lead to groupthink. A feature developed by this team may actually benefit from a code review by a fresh pair of eyes—someone not as familiar with the system who can offer a unique perspective.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mobbing-is-just-another-tool"&gt;
  &lt;/a&gt;
  Mobbing is just another tool
&lt;/h3&gt;

&lt;p&gt;Mob programming can be a great tool, but it should not be the default way to work. It should not be the &lt;em&gt;de facto&lt;/em&gt; solution for all problems. Your team should discuss what it means to mob, what benefits it brings, and every individual involved should be on board with the process. These thoughts align with those of Peter Nycander, another developer who has experience with mob programming. He echoes the same sentiments—mobbing should not be something we do all the time. He does an excellent job summarizing a lot of the things I bring up here and expanding on the issues that constant mobbing can create, you can read his article here: &lt;a href="https://dev.to/peternycander/why-you-should-not-only-do-mob-programming-4jo9"&gt;https://dev.to/peternycander/why-you-should-not-only-do-mob-programming-4jo9&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Mobbing has benefits, but when it's used as a golden hammer and not practically applied, it leads to fatigue, frustration, and an overall worse developer experience. Mobbing should be used as a tool, not as a doctrine.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>workplace</category>
      <category>mobbing</category>
    </item>
    <item>
      <title>What is Data Wrangling? Definition, Benefits and data wrangling operations.</title>
      <author>Phylis Jepchumba</author>
      <pubDate>Fri, 17 Sep 2021 21:18:10 +0000</pubDate>
      <link>https://dev.to/phylis/what-is-data-wrangling-definition-benefits-and-data-wrangling-operations-5881</link>
      <guid>https://dev.to/phylis/what-is-data-wrangling-definition-benefits-and-data-wrangling-operations-5881</guid>
      <description>&lt;p&gt;Data wrangling, also known as data munging and data cleaning enables  businesses tackle complex data with less time, make concrete and timely solutions and also produce more accurate results.&lt;br&gt;
This article provides you with a detailed understanding of;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is data wrangling?&lt;/li&gt;
&lt;li&gt;Benefits of data wrangling.&lt;/li&gt;
&lt;li&gt;Data wrangling operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#what-is-data-wrangling"&gt;
  &lt;/a&gt;
  What is data wrangling?
&lt;/h6&gt;

&lt;p&gt;Data wrangling is the process of cleaning, organizing and transforming raw data into a desired format to make it appropriate and valuable for various purposes.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#benefits-of-data-wrangling"&gt;
  &lt;/a&gt;
  Benefits of data wrangling.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Data wrangling acts as preparation stage for data mining mining process which involves data gathering.&lt;/li&gt;
&lt;li&gt;Data wrangling improves usability by converting it into compatible format.&lt;/li&gt;
&lt;li&gt;Enables users process large volumes of data easily.&lt;/li&gt;
&lt;li&gt;Enables users cleanse data from noise, flawed and missing elements.&lt;/li&gt;
&lt;li&gt;Helps business users make timely and concrete decisions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#data-wrangling-operations"&gt;
  &lt;/a&gt;
  Data wrangling operations.
&lt;/h6&gt;

&lt;p&gt;1.Data manipulation.&lt;br&gt;
Includes sorting, merging, grouping, and altering the data.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#sorting"&gt;
  &lt;/a&gt;
  Sorting.
&lt;/h6&gt;

&lt;p&gt;Sorts a dataframe in ascending (default) or descending order.&lt;br&gt;
Uses &lt;strong&gt;sort_values&lt;/strong&gt; function. &lt;br&gt;
It uses quicksort by default for sorting and can be replaced with mergesort or heapsort using kind property. &lt;/p&gt;

&lt;p&gt;Example.&lt;br&gt;
Sorting a column in a dataframe in descending order as shown;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--037aw_IR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sckwrgg7tfuinpvgup2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--037aw_IR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sckwrgg7tfuinpvgup2.png" alt="Screenshot (125)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html"&gt;Read more about sorting&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#merging-and-concatenation"&gt;
  &lt;/a&gt;
  Merging and concatenation.
&lt;/h6&gt;

&lt;p&gt;Merge function is  used to combine two dataframes.&lt;br&gt;
concat function combines two dataframes into a new one.&lt;/p&gt;

&lt;p&gt;For example when we have two dataframes df1 and df2 we can concatenate them into one dataframe as follows;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#grouping"&gt;
  &lt;/a&gt;
  Grouping.
&lt;/h6&gt;

&lt;p&gt;Grouping is used to aggregate the data into different categories.&lt;br&gt;
A groupby operation involves  combining of splitting the object, applying a function, and combining the results.&lt;br&gt;
&lt;a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html"&gt;Read more about groupby()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Data Filtration.&lt;br&gt;
Data Filtration is the process of choosing a smaller part of your data set and using that subset for viewing or analysis.&lt;/p&gt;

&lt;p&gt;Given a dataset with several columns, you can choose columns that are useful by filtering the column names as shown;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Course'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.filter.html"&gt;Read more about data Filtration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.Dealing with missing values.&lt;br&gt;
On my previous article, I wrote about ways to handle missing values in a dataset.&lt;br&gt;
&lt;a href="https://dev.to/phylis/how-to-handle-missing-values-in-a-dataset-using-python-1d2e"&gt;Handling missing values in python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.Encoding data.&lt;br&gt;
Not all datasets have numeric data and since most machine learning models accept numerical values, encoding categorical variables is an important operation in data wrangling.&lt;br&gt;
Categorical variables are usually represented as &lt;strong&gt;strings&lt;/strong&gt; or &lt;strong&gt;categories&lt;/strong&gt; and are finite in number. &lt;br&gt;
There are many ways of encoding categorical data. In this article we are going to look at &lt;strong&gt;label encoding technique&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d7Dxsx3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9x7xchfpi6nf1bymx0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d7Dxsx3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9x7xchfpi6nf1bymx0f.png" alt="Screenshot (126)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the above code, ' Gender ' column has categorical variables . Using label encoder each label is converted into an integer value.&lt;/p&gt;

&lt;p&gt;5.Normalization.&lt;br&gt;
A dataset may contain data with multiple features and each has a different unit of measurement. Normalization involves converting all possible features to the same standard scale.&lt;/p&gt;

&lt;p&gt;Min-Max scaling is a commonly used technique in normalizing the data where the data is scaled to a fixed range - usually 0 to 1.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html"&gt;More about Min-Max scaling &lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>What is the DRY/ KISS Principal</title>
      <author>Albert Bennett</author>
      <pubDate>Fri, 17 Sep 2021 20:59:26 +0000</pubDate>
      <link>https://dev.to/albertbennett/what-is-the-dry-kiss-principal-1h3n</link>
      <guid>https://dev.to/albertbennett/what-is-the-dry-kiss-principal-1h3n</guid>
      <description>&lt;p&gt;If you learned something new feel free to connect with me on &lt;a href="https://www.linkedin.com/in/albert-bennett/"&gt;linkedin&lt;/a&gt; or follow me on dev.to :)&lt;/p&gt;

&lt;p&gt;I feel like this is one of those topics in clean coding that doesn't get talked about too much, it's almost as if it's a little old fashioned and yet, once every so often I get asked about it in an interview or it comes up in conversation. So, I'm taking the opportunity to talk about it now.&lt;/p&gt;

&lt;p&gt;Both DRY (Don't Repeat Yourself) and KISS (Keep it Stupidly Simple) are software design principals. When followed they can lead to better designed and easier maintained code. Now with adhering to any principals, I have found that they each have a time and a place and that time isn't every-time. The reason I say this is that there can be situations when following them to strictly can lead to unnecessary complexity or even OVER-KILL (think trying to swat a fly with a bazooka). We don't want that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The DRY Principal&lt;/strong&gt;&lt;br&gt;
Some might have seen it as WET (Wasting Everyone's Time). To say that something is DRY is to make sure that the code written, is as reusable and small as possible. Code re-usability can be better achieved by introducing abstractions, and by refactoring the code into smaller more manageable pieces. The overall goal should be to reduce, reuse and recycle. The benefits of this is firstly to make the code look better, and easier to maintain. Also it helps to reduce the number of bugs in your software, and should help with identifying where bugs are if any occur. Again it is possible to make something overly DRY such as abstracting an already small object with little reusability, so watch out!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The KISS Principal&lt;/strong&gt;&lt;br&gt;
Essentially, keep methods small &amp;lt;20 lines. Also each method should do one thing, and only one thing (single responsibility). The benefits of using KISS is that it, again makes your code easier to maintain and also helps with readability. The simpler, more Englishly reading your code can be the better. You are coding so that someone else will read it after all. Easier to read code == easier to maintain. I'd like to think that when writing code if someone looked over my shoulder they should be able to tell what is going on like in a book... well maybe a complex book with variables in it. Also for the love of all things codey, watch out when using magic strings/ numbers. I'd avoid them altogether if you can. And that methods at most have 4 parameters in them, anymore and it is clearly is doing more than what it needs to be or you need to pass in a object that incapsulates the parameters of the method.&lt;/p&gt;

&lt;p&gt;In conclusion each principal should be used where appropriate, and each of them should be in the forefront of your mind when developing/ maintaining software.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>cleancoding</category>
    </item>
    <item>
      <title>24 YouTube Channels 📺 that will help you become a better Developer 🧑‍💻</title>
      <author>Roden</author>
      <pubDate>Fri, 17 Sep 2021 20:44:01 +0000</pubDate>
      <link>https://dev.to/kerthin/24-youtube-channels-that-will-help-you-become-a-better-developer-45k5</link>
      <guid>https://dev.to/kerthin/24-youtube-channels-that-will-help-you-become-a-better-developer-45k5</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;The profession of a programmer, like many other professions related to IT, implies constant training. For even if you are a good specialist in your field, this does not mean that you have comprehended all the peaks of your profession. We always have something to learn. You can't just learn certain rules and formulas in order to become a professional.&lt;/p&gt;

&lt;p&gt;You can study in different ways: read books and articles, find a mentor who will help you in mastering the knowledge of your profession, and so on.&lt;/p&gt;

&lt;p&gt;But as a rule, in most cases we turn to YouTube. The fact is that it is much easier for us to perceive information through video, when there is a person who will explain everything to us simply and easily, how some function or technology works, what types of algorithms there are, and so on. Unfortunately, sometimes it is difficult for us to perceive information through simple text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8QK3fLFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/1iu8uG2cjYFZS6wTxv/giphy-downsized-large.gif%3Fcid%3Decf05e4788yw5v31rh5cg72qxhp3prrccavusnqatig0absz%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8QK3fLFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/1iu8uG2cjYFZS6wTxv/giphy-downsized-large.gif%3Fcid%3Decf05e4788yw5v31rh5cg72qxhp3prrccavusnqatig0absz%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But fortunately we have YouTube. What would we do without him? He is our savior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e9DNQ3ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ek4CUx2FONgHaMz9V5/giphy-downsized-large.gif%3Fcid%3Decf05e47lcjxmne36ii3yyekd9sqsxqlz7aul208xbir92ho%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e9DNQ3ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ek4CUx2FONgHaMz9V5/giphy-downsized-large.gif%3Fcid%3Decf05e47lcjxmne36ii3yyekd9sqsxqlz7aul208xbir92ho%26rid%3Dgiphy-downsized-large.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that is why today I decided to give a list of channels that could at least help you become a better specialist for a little bit. (But this is not a fact)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DAe9_daF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/JtLrtaN4VPoKXJRKGB/giphy.gif%3Fcid%3Decf05e479mvs1h9tcx7ketd3mw8ygktwisl9wv0rm43kozk4%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DAe9_daF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/JtLrtaN4VPoKXJRKGB/giphy.gif%3Fcid%3Decf05e479mvs1h9tcx7ketd3mw8ygktwisl9wv0rm43kozk4%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;1. &lt;a href="https://www.youtube.com/c/TraversyMedia"&gt;Traversy Media&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hKtd7VMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uruurvzbchwezqagkgrd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKtd7VMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uruurvzbchwezqagkgrd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here you can find excellent tutorials on layout, on the programming languages JS and PHP, as well as on the React and Vue frameworks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;2. &lt;a href="https://www.youtube.com/c/DevTipsForDesigners"&gt; DevTips&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYOSKt9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkh2zkk1ngtyk3ey45ua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYOSKt9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkh2zkk1ngtyk3ey45ua.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The channel has a number of interesting videos like how to make CSS animation with physics simulation or how to work with legacy code, as well as many interesting videos on CSS animations and React lessons. There are also videos where conversations with other developers are conducted. The only disadvantage is that the videos rarely come out, but they will not clog your tape. 😁&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;3. &lt;a href="https://www.youtube.com/c/programmingwithmosh/featured"&gt; Programming with Mosh&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X_HyuLmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lehc50lsz85ilzqe875d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_HyuLmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lehc50lsz85ilzqe875d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Courses on React, React Native, Redux. Videos about Java, Python, MySQL and many other interesting things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;4. &lt;a href="https://www.youtube.com/c/DesignCourse/featured"&gt; DesignCourse&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HVw3RBE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgol3cegc8nzam7y9oep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HVw3RBE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgol3cegc8nzam7y9oep.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An amazing channel where you can learn various CSS tricks, how to create beautiful animations, how to create SVG, which you can then animate, and so on. A great channel with a very interesting feed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;5. &lt;a href="https://www.youtube.com/c/FryingPan/featured"&gt;Frying Pan&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vEB_GIaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66n9om5dtaqwlxobddn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vEB_GIaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66n9om5dtaqwlxobddn5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A young channel where a guy who studies at a university and interns at a big tech company talks about general lifestyle, coding, academics/career paths, tech industry. There are no courses on the channel, but its videos are interesting to watch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;6. &lt;a href="https://www.youtube.com/c/BenAwad97/featured"&gt;Ben Awad&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Y76UmQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka6g0cd3d0bxd02m3oc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Y76UmQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka6g0cd3d0bxd02m3oc4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel Description&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm a software developer who makes videos about React, React Native, GraphQL, Typescript, Node.js, PostgreSQL, Python, and all things coding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;7. &lt;a href="https://www.youtube.com/c/Fireship"&gt;Fireship&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68FAy6aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ognr4eb3130c4leqyrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68FAy6aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ognr4eb3130c4leqyrt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A great channel that contains videos that, from a theoretical point of view, tell you how various programming languages work. There are also a number of videos on the topic of layout and animation creation. There are many great short and informative videos like "Tailwind in 100 Seconds" or "PostCSS in 100 Seconds". I think many people may like this channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;8. &lt;a href="https://www.youtube.com/user/flintyara"&gt;Yuri Artyukh&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UNq2J_ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuxk8lfnlicjfk0ct1kp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UNq2J_ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuxk8lfnlicjfk0ct1kp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On the channel you can find a lot of good videos on working with libraries such as Three.js and Pixi.js. There are also videos on Canvas and Webgl. Suitable for those who study 3D on the Web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;9. &lt;a href="https://www.youtube.com/c/AdamWathan/featured"&gt;Adam Wathan&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8P6N6Dkd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpjbphj89eaxbk3muzmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8P6N6Dkd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpjbphj89eaxbk3muzmm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A channel where there are a huge number of videos on the Tailwind Css framework.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;10. &lt;a href="https://www.youtube.com/c/LevelUpTuts/featured"&gt;LevelUpTuts&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hh9XTIgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99bj0a0g9oexrb1oy642.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hh9XTIgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99bj0a0g9oexrb1oy642.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel Description&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1000+ free video tutorials created, recorded, edited, published and maintained by Scott Tolinski.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;11. &lt;a href="https://www.youtube.com/c/DesignMedium/featured"&gt;Design Medium&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aXTWqyZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7ui5g7f4lj455ljts86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aXTWqyZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7ui5g7f4lj455ljts86.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel Description&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Design Medium is all about UI Design and Front-end Development. Here you'll find videos on Adobe XD, Web Design using HTML, CSS and JavaScript and Mobile App Design using React Native.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;12. &lt;a href="https://www.youtube.com/c/WrongAkram/videos"&gt;Wrong Akram&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IkkcQc_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnivbb2s2jb5fw3s2n5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkkcQc_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnivbb2s2jb5fw3s2n5k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The channel is dedicated to creating a user interface using Adobe Xd and Invision Studio. There is also a video on how to implement these interfaces and animations using React.js and Node.js.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;13. &lt;a href="https://www.youtube.com/c/CodingNepal/videos"&gt;CodingNepal&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0mc5wIp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uthqy02v07b8uofm690.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mc5wIp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uthqy02v07b8uofm690.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel Description&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Welcome to my channel "CodingNepal". Here I upload videos related to HTML, CSS, JavaScript, and PHP along with creative coding stuff such as CSS Animations &amp;amp; Effects.&lt;/p&gt;

&lt;p&gt;I always provide the source codes of each video on my website - codingnepalweb.com for free. I believe my videos or codes help to inspire web designers &amp;amp; developers and also help to improve their skills.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;14. &lt;a href="https://www.youtube.com/c/dcode-software"&gt;dcode&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZgtD5cM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whoo7na3ykvtgdvtgc03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZgtD5cM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whoo7na3ykvtgdvtgc03.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel Description&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On my channel you can find HTML, CSS &amp;amp; JavaScript tutorials, PHP tutorials, Node.js tutorials and Rust tutorials, as well as many other topics covered in web development. I also enjoy building JavaScript projects every now and then&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CC23u1Cw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmvbhpo989kavn68fuhq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CC23u1Cw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmvbhpo989kavn68fuhq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;15. &lt;a href="https://www.youtube.com/c/Freecodecamp/videos"&gt;freeCodeCamp.org&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRa5ZOLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r8ler0ulicaqyuhz9en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRa5ZOLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r8ler0ulicaqyuhz9en.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The channel is dedicated to everything related to programming. Learning various APIs, React, JS, GIT, browsers, and much more. A very good channel with a lot of useful information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;16. &lt;a href="https://www.youtube.com/c/JavaScriptMastery/videos"&gt;JavaScript Mastery&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uwwHE5Kv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r63ozzwpmq7kosh7rkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uwwHE5Kv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r63ozzwpmq7kosh7rkr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A channel with videos on how to create various chats, messengers, travel apps and much more using React.js.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;17. &lt;a href="https://www.youtube.com/channel/UCsKsymTY_4BYR-wytLjex7A"&gt;Brian Design&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KDSacTNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vglynx5f48zjjsaq01v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KDSacTNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vglynx5f48zjjsaq01v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On this channel you can find a lot of videos on how to create a slider, animation when scrolling, adaptive website design and also a lot of different elements using React.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;18. &lt;a href="https://www.youtube.com/kepowob/videos"&gt;Kevin Powell&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V_fX0eq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mmb6opk1gmy1kh4gssv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V_fX0eq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9mmb6opk1gmy1kh4gssv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A wonderful channel dedicated to the deep study of CSS. Required for any Frontend developer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;19. &lt;a href="https://www.youtube.com/c/WebDevSimplified/featured"&gt;Web Dev Simplified&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K6TFHkNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56qsjh65f61eulwtckzc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K6TFHkNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56qsjh65f61eulwtckzc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel Description&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Web Dev Simplified is all about teaching web development skills and techniques in an efficient and practical manner. If you are just getting started in web development Web Dev Simplified has all the tools you need to learn the newest and most popular technologies to convert you from a no stack to full stack developer. Web Dev Simplified also deep dives into advanced topics using the latest best practices for you seasoned web developers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;20. &lt;a href="https://www.youtube.com/c/wcandillon/videos"&gt;William Candillon&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtNIwEyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzsbc3fxd6y8m0zpeno7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtNIwEyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzsbc3fxd6y8m0zpeno7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All content on the channel is strictly only about React.js. Here you will learn how to create interfaces and animations. Also on the channel there are many interesting conversational videos on the topic React.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;21. &lt;a href="https://www.youtube.com/c/CodingTech/videos"&gt;Coding Tech&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8UGD3Udd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ofyshj011scjy6jo3vj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8UGD3Udd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ofyshj011scjy6jo3vj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The site is dedicated to It technologies. Here you will find videos from the usual videos on CSS, JS, Python and Django to blockchain and microservices. A very informative channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;22. &lt;a href="https://www.youtube.com/channel/UCxhgW0Q5XLvIoXHAfQXg9oQ/videos"&gt;Hunor Márton Borbély&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1T2GmK4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad7d8e9arafrnls82vhm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1T2GmK4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad7d8e9arafrnls82vhm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An interesting channel about the development of games in the browser, as well as the creation of SVG and 3D elements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;23. &lt;a href="https://www.youtube.com/c/AniaKub%C3%B3w/videos"&gt;Code with Ania Kubów&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NEGhpCsx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dejn29z1yyu0qa16dogp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NEGhpCsx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dejn29z1yyu0qa16dogp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Channel about JavaScript, React, React-Native, Next.js, Node.js, Express, GraphQL, serverless functions, working with databases and much more!&lt;/p&gt;

&lt;h1&gt;24. &lt;a href="https://www.youtube.com/c/JomaOppa/videos"&gt;Joma Tech&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aNSDf8gZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s646kcnbr2mxrwxxaa0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aNSDf8gZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s646kcnbr2mxrwxxaa0l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The author of the channel talks about his life in Silicon Valley and about working at big tech companies. Very interesting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Thank you for taking the time to my post. I want to warn you right away that in this collection I have made exactly those channels that I like. I am well aware that you may not like some of them, but believe me, they at least deserve attention. Thank you again and you can also offer your options for good YouTube channels in the comments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFkahiFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/h7No5m3tAeV4Q/giphy.gif%3Fcid%3Decf05e47ggknq0jqnus8032t9hgjxx45q6l49xtl3k4bdtfe%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFkahiFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/h7No5m3tAeV4Q/giphy.gif%3Fcid%3Decf05e47ggknq0jqnus8032t9hgjxx45q6l49xtl3k4bdtfe%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can advise you to subscribe to my &lt;a href="https://twitter.com/BelichenkoRoden"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;, I also post my works there.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to use Gatsby with Typescript.</title>
      <author>Manos Menexis</author>
      <pubDate>Fri, 17 Sep 2021 20:19:23 +0000</pubDate>
      <link>https://dev.to/skil3e/how-to-use-gatsby-with-typescript-2d79</link>
      <guid>https://dev.to/skil3e/how-to-use-gatsby-with-typescript-2d79</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;As a JAMstack &amp;amp; React enthusiast one of my favorite SSG - (Static Site Generator) Frameworks is &lt;a href="https://www.gatsbyjs.org/"&gt;Gatsbyjs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have used &lt;a href="https://www.gatsbyjs.org/"&gt;Gatsbyjs&lt;/a&gt; to create my &lt;a href="http://emmbrand.com/"&gt;company's website&lt;/a&gt; as well as a bunch of other customers' too.&lt;/p&gt;

&lt;p&gt;A couple of years ago I started playing around with Typescript and instantly fell in love with it. It helped me write better and more predictable code, while it also provided a level of documentation around my codebase.&lt;/p&gt;

&lt;p&gt;While Gatsbyjs supports Typescript out of the box, I found out that there was not enough documentation about their &lt;a href="https://www.gatsbyjs.com/docs/reference/config-files/"&gt;Config Files&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Inside its configuration files, Gatsby provides a rich set of lifecycle APIs to hook into its bootstrap, build, and client runtime operations. They allow sourcing data, creating pages, and customizing generated HTML pages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article we will take a look on how to set up our Gatsby website and support it fully with Typescript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial setup
&lt;/h2&gt;

&lt;p&gt;After generating a Gatsby site with &lt;code&gt;gatsby new&lt;/code&gt;, you can immediately rename any file inside of &lt;code&gt;/src&lt;/code&gt; from &lt;code&gt;.js&lt;/code&gt; to &lt;code&gt;.tsx&lt;/code&gt; and it will work out of the box. So that's done. What you will find though is that files like &lt;code&gt;gatsby-browser.js&lt;/code&gt;, &lt;code&gt;gatsby-node.js&lt;/code&gt; or &lt;code&gt;gatsby-ssr.js&lt;/code&gt; wont work out of the box with this method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-packages"&gt;
  &lt;/a&gt;
  Installing packages
&lt;/h2&gt;

&lt;p&gt;Its really useful to install types for react, react-dom, node and probably react-helmet. You can install thouse via npm like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @types/node @types/react @types/react-dom @types/react-helmet &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we also need ts-node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;ts-node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then on &lt;code&gt;gatsby-config.js&lt;/code&gt; in the beginning of the file add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-config.js&lt;/span&gt;

&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ts-node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;compilerOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;commonjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;es2017&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// rest of the config&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tsconfigjson"&gt;
  &lt;/a&gt;
  tsconfig.json
&lt;/h2&gt;

&lt;p&gt;Even though there is a plugin for it, I usually like to add my own &lt;code&gt;tsconfig.json&lt;/code&gt; file in the root of my project. My &lt;code&gt;tsconfig.json&lt;/code&gt; file looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"commonjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"esnext"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"preserve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"dom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"es2015"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"es2017"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"noEmit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"isolatedModules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"skipLibCheck"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"noUnusedLocals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"noUnusedParameters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"experimentalDecorators"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"emitDecoratorMetadata"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"resolveJsonModule"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"./src/**/*"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-rest-of-the-files"&gt;
  &lt;/a&gt;
  The rest of the files
&lt;/h2&gt;

&lt;p&gt;After setting up my &lt;code&gt;tsconfig.json&lt;/code&gt; I create a folder inside &lt;code&gt;/src&lt;/code&gt; called &lt;code&gt;app&lt;/code&gt;. I usually store all my config and provider files there.&lt;/p&gt;

&lt;p&gt;For the sake of time i will provide two example files that i use in every project and I am pretty sure you can figure out how to apply it to the rest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gatsbynodejs-createpages"&gt;
  &lt;/a&gt;
  gatsby-node.js - createPages
&lt;/h2&gt;

&lt;p&gt;If you worked with Gatsby before this should look familiar with the only difference being that is written in Typescript.&lt;/p&gt;

&lt;p&gt;Let's assume we want to create pages from a list of article we fed into Gatsby's internal graphql.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/GatsbyNode.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GatsbyNode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TypePost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TypeData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;allPost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TypePost&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createPages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GatsbyNode&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;createPages&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createPage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TypeData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;`
      {
          allPost {
              nodes {
                  id
                  title
                  slug
                  content
              }
          }
      }
      `&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Create Post Pages  &lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/templates/Post.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createPostPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;allPost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;createPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;component&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postTemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;context&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="c1"&gt;// anything else you want to pass to your context&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;createPostPromise&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then on &lt;code&gt;gatsby-node.js&lt;/code&gt; we do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-node.js&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onCreatePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/app/GatsbyNode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;onCreatePages&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using multiple apis inside of &lt;code&gt;./src/app/GatsbyNode.ts&lt;/code&gt; &lt;br&gt;
like &lt;code&gt;onCreatePage&lt;/code&gt; or &lt;code&gt;onCreateWebpackConfig&lt;/code&gt; you can also do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-node.js&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/app/GatsbyNode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will run all the functions of &lt;code&gt;./src/app/GatsbyNode.ts&lt;/code&gt;, but you have to make sure you export the functions with the correct name based on Gatsby's documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gatsbybrowserjs-amp-gatsbyssrjs-wraprootelement"&gt;
  &lt;/a&gt;
  gatsby-browser.js &amp;amp; gatsby-ssr.js - wrapRootElement
&lt;/h2&gt;

&lt;p&gt;So let's assume we also want to add a theme provider to our app. On the &lt;code&gt;src/app/&lt;/code&gt; folder that we created before we add the file &lt;code&gt;WrapRootElement.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/WrapRootElement.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GatsbyBrowser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./ThemeContext&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapRootElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GatsbyBrowser&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrapRootElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;            
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;wrapRootElement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then on &lt;code&gt;gatsby-browser.js&lt;/code&gt; &amp;amp; &lt;code&gt;gatsby-ssr.js&lt;/code&gt; files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-browser.js &amp;amp; gatsby-ssr.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;WrapRootElement&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/app/WrapRootElement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapRootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WrapRootElement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this tutorial helps you use Gatsby &amp;amp; Typescript more effectively and save you some time searching how to actually use the config files of Gatsby with Typesript. Thank you for your time!!!&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>gatsby</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>[PT-BR] O Poder do Módulo Task do Elixir -Task.Supervisor</title>
      <author>Felipe Araujo </author>
      <pubDate>Fri, 17 Sep 2021 20:09:38 +0000</pubDate>
      <link>https://dev.to/felipearaujos/pt-br-o-poder-do-modulo-task-do-elixir-task-supervisor-2697</link>
      <guid>https://dev.to/felipearaujos/pt-br-o-poder-do-modulo-task-do-elixir-task-supervisor-2697</guid>
      <description>&lt;p&gt;Caso prefira em inglês você pode encontrar &lt;a href="https://dev.to/felipearaujos/the-power-of-elixir-task-module-into-task-supervisor-5365"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A  &lt;a href="https://dev.to/felipearaujos/pt-br-o-poder-do-modulo-task-do-elixir-o-inicio-3eh6"&gt;publicação anterior&lt;/a&gt; foi uma intro sobre o módulo task e como ele funciona de uma forma geral.&lt;/p&gt;

&lt;p&gt;Agora vamos tornar as coisas um pouco mais complexas em nossa jornada com &lt;code&gt;Task.Supervisor&lt;/code&gt; e ver mais alguns conceitos do elixir.&lt;/p&gt;

&lt;p&gt;Antes de avançar, vamos dar uma olhada da definição desses conceitos:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hexdocs.pm/elixir/Supervisor.html"&gt;&lt;strong&gt;Supervisor&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Um &lt;em&gt;supervisor&lt;/em&gt; é um processo que supervisiona outros processos, que nós chamamos de &lt;em&gt;child processes&lt;/em&gt;. Supervisors são usados para construir a estrutura de  processos hierárquicos chamados &lt;em&gt;supervision tree&lt;/em&gt;. &lt;em&gt;Supervision trees&lt;/em&gt; provem tolerância a falha e encapsulam como nossas aplicação iniciam ou desligam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://elixir-lang.org/getting-started/processes.html#:~:text=In%20Elixir%2C%20all%20code%20runs,and%20communicate%20via%20message%20passing.&amp;amp;text=Processes%20in%20Elixir%20are%20extremely,in%20many%20other%20programming%20languages"&gt;&lt;strong&gt;Processes&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No Elixir, todo código é executado dentro de processos. Os processos são isolados uns dos outros, são executados simultaneamente entre si e se comunicam por meio da passagem de mensagens.&lt;/p&gt;

&lt;p&gt;Os processos do Elixir não devem ser confundidos com os processos do sistema operacional. Os processos no Elixir são extremamente leves em termos de memória e CPU (mesmo em comparação com os threads usados ​​em muitas outras linguagens de programação). Por causa disso, não é incomum ter dezenas ou mesmo centenas de milhares de processos em execução simultaneamente.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos usar &lt;code&gt;Task.Supervisor&lt;/code&gt; para criar processos responsáveis ​​por gerenciar o &lt;em&gt;child process&lt;/em&gt; relacionado.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#criando-o-playground"&gt;
  &lt;/a&gt;
  Criando o Playground
&lt;/h1&gt;

&lt;p&gt;O primeiro passo é criar uma nova aplicação elixir com árvore de supervisão, mais informações sobre &lt;code&gt;mix&lt;/code&gt; pode ser encontrada &lt;a href="https://hexdocs.pm/mix/Mix.html"&gt;na documentação oficial&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;mix&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;newsample&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;sup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos ver o que foi criado:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  lib
  lib/newsample
  lib/newsample.ex
  lib/newsample/application.ex
test
  test/newsample_test.exs
  test/test_helper.exs
README.md
mix.exs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nesse momento vamos trabalhar somente com os arquivos &lt;code&gt;lib/newsample.ex&lt;/code&gt; e &lt;code&gt;lib/newsample/application.ex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O próximo passo será criar a mesma função do &lt;a href="https://dev.to/felipearaujos/pt-br-o-poder-do-modulo-task-do-elixir-o-inicio-3eh6"&gt;post anterior&lt;/a&gt; dentro do arquivo &lt;code&gt;lib/newsample.ex&lt;/code&gt; com algumas pequenas mudanças para facilitar os testes.&lt;/p&gt;

&lt;p&gt;Para forçar um comportamento explosivo usar um &lt;em&gt;pattern matching&lt;/em&gt; dentro da função &lt;code&gt;say_hello&lt;/code&gt; com o valor "alpha":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"alpha"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Error to say hello to &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;:ok&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"alpha"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"beta"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"gama"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hora de usar o &lt;a href="https://hexdocs.pm/iex/IEx.html"&gt;elixir's interactive shell&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex -S mix
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E então executar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;
&lt;span class="c1"&gt;#PID&amp;lt;0.145.0&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;beta&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;gama&lt;/span&gt;

&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;54.276&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt; &lt;span class="c1"&gt;#PID&amp;lt;0.148.0&amp;gt; started from #PID&amp;lt;0.145.0&amp;gt; terminating&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;anonymous&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_mfa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;erl:&lt;/span&gt;&lt;span class="mi"&gt;226&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_p_do_apply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="ss"&gt;Function:&lt;/span&gt; &lt;span class="c1"&gt;#Function&amp;lt;1.13017213/0 in Newsample.process/1&amp;gt;&lt;/span&gt;
    &lt;span class="ss"&gt;Args:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;EXIT&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="c1"&gt;#PID&amp;lt;0.145.0&amp;gt;) shell process exited with reason: an exception was raised:&lt;/span&gt;
    &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;anonymous&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_mfa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;erl:&lt;/span&gt;&lt;span class="mi"&gt;226&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_p_do_apply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="no"&gt;Interactive&lt;/span&gt; &lt;span class="no"&gt;Elixir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;press&lt;/span&gt; &lt;span class="no"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="no"&gt;C&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;exit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="no"&gt;ENTER&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;
&lt;span class="c1"&gt;#PID&amp;lt;0.151.0&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como podemos ver a exception foi propagada até a sessão do &lt;code&gt;iex&lt;/code&gt; podemos checar comparando o &lt;code&gt;PID&lt;/code&gt; antes &lt;code&gt;#PID &amp;lt;0.145.0&amp;gt;&lt;/code&gt; e após &lt;code&gt;#PID &amp;lt;0.151.0&amp;gt;&lt;/code&gt; executar o código.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ent%C3%A3o-como-podemos-evitar-esse-comportamento-explosivo"&gt;
  &lt;/a&gt;
  Então, como podemos evitar esse comportamento explosivo?
&lt;/h1&gt;

&lt;p&gt;Finalmente chegamos no momento de usar &lt;code&gt;supervised task&lt;/code&gt;, hora de abrir o arquivo &lt;code&gt;lib/newsample/application.ex&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;strategy:&lt;/span&gt; &lt;span class="ss"&gt;:one_for_one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hora de criar o &lt;code&gt;Task.Supervisor&lt;/code&gt; como um  &lt;em&gt;child process&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;TaskSupervisor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E agora com essa &lt;em&gt;supervised task&lt;/em&gt; a function &lt;code&gt;process&lt;/code&gt; e inicie como &lt;code&gt;async_no_link&lt;/code&gt;. Isso significa que não há vínculo entre esse &lt;em&gt;child process&lt;/em&gt; e o &lt;em&gt;parent&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"alpha"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"beta"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"gama"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async_nolink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;TaskSupervisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se executarmos novamente tudo vai funcionar sem essa propagação de erro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;
&lt;span class="c1"&gt;#PID&amp;lt;0.158.0&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;beta&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;gama&lt;/span&gt;

&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;48.200&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt; &lt;span class="c1"&gt;#PID&amp;lt;0.161.0&amp;gt; started from #PID&amp;lt;0.158.0&amp;gt; terminating&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_mfa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;erl:&lt;/span&gt;&lt;span class="mi"&gt;226&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_p_do_apply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="ss"&gt;Function:&lt;/span&gt; &lt;span class="c1"&gt;#Function&amp;lt;1.39266525/0 in Newsample.process/0&amp;gt;&lt;/span&gt;
    &lt;span class="ss"&gt;Args:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;exited&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;owner:&lt;/span&gt; &lt;span class="c1"&gt;#PID&amp;lt;0.158.0&amp;gt;, pid: #PID&amp;lt;0.161.0&amp;gt;, ref: #Reference&amp;lt;0.1303494724.713818114.156158&amp;gt;}, 5000)&lt;/span&gt;
    &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;EXIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="ss"&gt;raised:&lt;/span&gt;
        &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Newsample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invoke_mfa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervised&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;erl:&lt;/span&gt;&lt;span class="mi"&gt;226&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:proc_lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_p_do_apply&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;639&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;1411&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"-map/2-lists^map/1-0-"&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;
&lt;span class="c1"&gt;#PID&amp;lt;0.158.0&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como podemos ver, o &lt;code&gt;PID&lt;/code&gt; é o mesmo antes e depois da execução.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Processes&lt;/code&gt; e &lt;code&gt;Supervision trees&lt;/code&gt; são os componentes importantes do elixir para construir sistemas resiliente e tolerante a falhas.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>braziliandevs</category>
      <category>task</category>
      <category>async</category>
    </item>
    <item>
      <title>Inspector, a better way to debug Elixir Code</title>
      <author>Marcio Lopes de Faria</author>
      <pubDate>Fri, 17 Sep 2021 20:03:10 +0000</pubDate>
      <link>https://dev.to/marciol/inspector-a-better-way-to-debug-elixir-code-25nf</link>
      <guid>https://dev.to/marciol/inspector-a-better-way-to-debug-elixir-code-25nf</guid>
      <description>&lt;p&gt;I have been tinkering with better ways to improve my Elixir workflow and during this journey I realized that I am, somehow, &lt;a href="https://dev.to/marciol/execute-and-watch-elixir-tests-from-iex-3gf8"&gt;trying to bring things&lt;/a&gt; which I'm used with from other environments, the same way a foreign citizen does when living in a different country. &lt;/p&gt;

&lt;p&gt;Elixir prizes highly the Developer Experience, so that we have the astounding tools to generate documentation, first quality package management, and an excellent and mature build tool, and a REPL, &lt;code&gt;iex&lt;/code&gt; that allows fast experiments, but I think that may I have pushed a lot the expected usage of it, in a not intended way as it was planned by the creators.&lt;/p&gt;

&lt;p&gt;We can feel it during a &lt;code&gt;IEx.pry/0&lt;/code&gt; usage, it's a pretty limited tool, if you are accustomed to use Ruby pry for example, but given that Elixir doesn't hold mutable state, maybe it isn't necessary at all, so I started to think about the root cause of my dissatisfaction and I found it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h2&gt;

&lt;p&gt;Elixir is blaze fast, and we can notice it clearly when running a test suite with a lot of tests, they run really fast and the maintainers &lt;a href="https://github.com/elixir-lang/elixir/issues/10983"&gt;are working hard&lt;/a&gt; to make it even faster, so the so called Puts debugging is more than enough.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSrFzFam--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372299370691842052/KHLAURcj_normal.jpg" alt="Aaron Patterson profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Aaron Patterson
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @tenderlove
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I am a `puts` debugger. &lt;a href="https://twitter.com/hashtag/secret"&gt;#secret&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:14 AM - 23 Jan 2016
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=690689000617603072" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=690689000617603072" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=690689000617603072" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;But what really hurts is to type always and everyplace the same think, &lt;code&gt;IO.inspect/2&lt;/code&gt;, passing ad-hoc variables. It's not uncommon to make several calls to &lt;code&gt;IO.inspect/2&lt;/code&gt; during a debugging session, so if we improve it, enhancing the &lt;code&gt;IO.inspect/2&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;This is how &lt;a href="https://hexdocs.pm/inspector/0.1.0/Inspector.html"&gt;Inspector&lt;/a&gt; was born, a library that makes debugging less annoying. You need only to place it in the calling site, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# If this code is on lib/my_module.ex&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyModule&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;awesome_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:foo&lt;/span&gt;
    &lt;span class="n"&gt;amazing_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt;
    &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Inspector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="no"&gt;Inspector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;MyModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:hey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you will see in the &lt;code&gt;stdout&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;inspector: %{
  bindings: [
    args: :hey,
    awesome_var: :foo,
    amazing_var: :bar
  ],
  file: "lib/my_module.ex:5",
  location: "MyModule.my_function/1"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you uses Vim or Neovim, like me, you can even make it better with a key-map:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt; orequire Inspector; Inspector&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hight recommend use it running this simple command:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_5NiS5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/667973757181431808/IdQgSAH__normal.jpg" alt="José Valim profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        José Valim
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @josevalim
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Not a lot of people know this but mix test has a --listen-on-stdin option. So if you want to run only the stale tests as you work, this does the trick:&lt;br&gt;&lt;br&gt;    fswatch lib test | mix test --stale --listen-on-stdin&lt;br&gt;&lt;br&gt;It requires brew install fswatch or similar.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:02 AM - 22 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1363791170745348097" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1363791170745348097" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1363791170745348097" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Or with &lt;code&gt;mix test.watch&lt;/code&gt; found &lt;a href="https://github.com/lpil/mix-test.watch"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is it folks. Happy debugging!&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>programming</category>
      <category>debugging</category>
      <category>debug</category>
    </item>
    <item>
      <title>Ultimate Guide to Creating a Programming Portfolio With CodeCast</title>
      <author>CodeCast</author>
      <pubDate>Fri, 17 Sep 2021 19:46:24 +0000</pubDate>
      <link>https://dev.to/codecast/ultimate-guide-to-creating-a-programming-portfolio-with-codecast-18a</link>
      <guid>https://dev.to/codecast/ultimate-guide-to-creating-a-programming-portfolio-with-codecast-18a</guid>
      <description>&lt;p&gt;Prior to landing a job as a software developer or engineer at an exciting tech startup or a renowned company of which you have been keeping your eye out for possible job openings, you first need to update and refine your resume, or better yet, have your portfolio ready to be shared. &lt;/p&gt;

&lt;p&gt;A programmer’s portfolio is the secret sauce to capturing the attention of future employers or business partners. It’s hard to ignore someone when they have documented and clearly demonstrated their talent, growth &amp;amp; devotion as a web developer. We’re breaking down why you need to start building your portfolio with CodeCast. &lt;/p&gt;

&lt;p&gt;If we could condense this blog into a sentence, here’s what we’d say. ‘Employers don’t want to hear or read about what you’re capable of doing, they want to see it in action.’ &lt;/p&gt;

&lt;p&gt;And although this statement captures the core message of this blog, stick with us because we’ve got some tips that will help you along the way. &lt;/p&gt;

&lt;p&gt;Let’s take a few steps back. What is a portfolio? &amp;amp; Why do you need one?&lt;/p&gt;

&lt;p&gt;A programmer’s portfolio serves as a way to showcase your coding skills as opposed to just listing them on a simple resume. These portfolios are typically made up of Casts and videos with teachable elements. A portfolio allows prospective employers to engage and review your skills and previous work and projects. Creating a portfolio to apply for a specific job can take a lot of time, so we recommend documenting your work now in order to keep your portfolio consistent and frequently updated. &lt;/p&gt;

&lt;p&gt;Building Your Portfolio with CodeCast&lt;br&gt;
CodeCast has provided you with a space to inspire learners and teach groups of all different sizes which assists in expanding your skillset and monetizing your work all while easily assembling and construction your portfolio that will captivate future employers. Essentially, CodeCast is a platform that provides you with the tools and techniques you need to build your professionally curated portfolio by also attracting viewers, gaining an audience, and building a loyal community of followers. The culture of CodeCast greatly encourages you to craft your brand and let your personality shine through in each cast. &lt;/p&gt;

&lt;p&gt;What To Include In Your Portfolio&lt;br&gt;
Your portfolio can be made up of series of videos/Casts, possibly blogs, and breakdowns of each video released.  &lt;/p&gt;

&lt;p&gt;Remember to add in your contact information, and social channels if you feel comfortable. Being reachable is helpful when employers are seeking you out or your community wants to ask questions and connect with you directly. &lt;/p&gt;

&lt;p&gt;Within your Casts, don’t forget to speak to and engage with your audience and ask what they want to learn so you can appeal to this group and exemplify that you are adaptable and willing to shift your style when needed. When speaking within your Casts, ensure you’re talking slowly and clearly so there is no confusion and anyone can understand. &lt;/p&gt;

&lt;p&gt;Adding dates of your published work is important so employers can see how current your projects are, and it doesn’t hurt to mention how your previous experience helped you learn the skills you now possess. &lt;/p&gt;

&lt;p&gt;Be sure to avoid naming errors. This means take the time to name each project or cast correctly. As we previously mentioned, speak to your audience and help them understand what you’re demonstrating and how this will help them down the road. &lt;/p&gt;

&lt;p&gt;Lastly, don’t forget to add in your schedule of when you will be posting your next video to ensure you're building anticipation and staying accountable! &lt;/p&gt;

&lt;p&gt;All of these things together help to make up a professional portfolio. &lt;/p&gt;

&lt;p&gt;In Conclusion&lt;br&gt;
If you want to stand apart from others in the developer space, a portfolio can help differentiate you from your competitors and cut through the noise of basic resumes applying for the same position. Your programmer portfolio not only showcases your prior work samples while allowing people to see your sense of professionalism and personality, but it also displays your competence and acts as an additional example of your work. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Everything you need to know about Execution Context in JavaScript</title>
      <author>Neha Gupta</author>
      <pubDate>Fri, 17 Sep 2021 19:38:43 +0000</pubDate>
      <link>https://dev.to/nayyyhaa/everything-you-need-to-know-about-execution-context-in-javascript-2jha</link>
      <guid>https://dev.to/nayyyhaa/everything-you-need-to-know-about-execution-context-in-javascript-2jha</guid>
      <description>&lt;p&gt;Okay! You may be writing your code in JavaScript for ages, you know what logic to use when but, have you ever wondered how variable or function created holds information about its environment?&lt;br&gt;
Well, there's something called &lt;strong&gt;Execution Context&lt;/strong&gt; which gets created by our JS Engine which does all the magic in the background. Let's demystify it in this article.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-is-execution-context"&gt;
  &lt;/a&gt;
  What is Execution Context?
&lt;/h1&gt;

&lt;p&gt;By the name we can decode it as:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Execution&lt;/strong&gt; = to execute out code,&lt;br&gt;
&lt;strong&gt;Context&lt;/strong&gt; = specific environment&lt;/p&gt;

&lt;p&gt;Hence, Execution Context provides information about our &lt;em&gt;environment&lt;/em&gt; where our &lt;em&gt;specific&lt;/em&gt; code is &lt;em&gt;stored and executed&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Whenever a script is executed by the JS engine, a new execution context is created. By default &lt;strong&gt;Global Execution Context&lt;/strong&gt; is created.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#globaldefault-execution-context"&gt;
  &lt;/a&gt;
  Global/Default Execution Context
&lt;/h2&gt;

&lt;p&gt;It is the first thing that is created when we write JavaScript code. Hence referred to as Default Context. Since JS is a single-threaded language, only one Global Execution Context(GEC) is created for executing the code.&lt;/p&gt;

&lt;p&gt;It has two phases:&lt;/p&gt;

&lt;p&gt;1) Creation phase&lt;br&gt;
2) Execution phase&lt;/p&gt;

&lt;p&gt;Let's dive deep into it!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creation-phase"&gt;
  &lt;/a&gt;
  Creation Phase
&lt;/h3&gt;

&lt;p&gt;In this phase, the compilation of JS code is done but doesn't involve the execution of code. Let's consider the following program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello Kitty!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;printHello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we debug this program with our developer's tool of our browser, we could notice that the value of &lt;code&gt;x&lt;/code&gt; variable is coming as &lt;code&gt;undefined&lt;/code&gt; in our scripts and &lt;code&gt;"Hello Kitty!"&lt;/code&gt; has not been printed in our console. Also, there's something called &lt;code&gt;window&lt;/code&gt; present in our global scope.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tto4nlDM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k31d8k0hzy4jebqouweg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tto4nlDM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k31d8k0hzy4jebqouweg.png" alt="globalScope"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means in Creation Phase following this happens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;variables&lt;/strong&gt; - initialized with &lt;em&gt;undefined&lt;/em&gt; value&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;functions&lt;/strong&gt; - declared and initialized but are NOT executed yet&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;window/global&lt;/strong&gt; object - gets created (holds information about function arguments, variables as well as inner functions declaration)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;this&lt;/strong&gt; - created which points to the global object created above&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To sum it up,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nGW6jBFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aocmxql0t3eiu60ssur9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nGW6jBFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aocmxql0t3eiu60ssur9.jpeg" alt="Creation Phase"&gt;&lt;/a&gt;&lt;/p&gt;
Image src: https://www.instagram.com/nehacode/



&lt;h3&gt;
  &lt;a href="#execution-context"&gt;
  &lt;/a&gt;
  Execution Context:
&lt;/h3&gt;

&lt;p&gt;Finally! Our code gets executed in this phase. JS engine executes the code line-by-line where all the variables are finally initialized with their value and functions get invoked. For each function invocation, &lt;strong&gt;Functional Execution Context&lt;/strong&gt; gets created. Let's learn about this.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#functionallocal-execution-context"&gt;
  &lt;/a&gt;
  Functional/Local Execution Context
&lt;/h4&gt;

&lt;p&gt;Whenever a new function gets called, a new execution context is created with basic two phases: The creation phase and the execution phase. This new execution context is known as &lt;strong&gt;Local/Functional Execution Context (FEC)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Hence in the above code, while parsing the function invocation we could notice our function being present in the local scope.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--stb_znXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu4uk62h9onqefgcrbt2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--stb_znXG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu4uk62h9onqefgcrbt2.png" alt="local scope"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This FEC is similar to GEC, the difference is that it creates the &lt;code&gt;arguments object&lt;/code&gt; instead of creating the &lt;code&gt;global object&lt;/code&gt; where &lt;code&gt;this&lt;/code&gt; points to the current object.&lt;/p&gt;

&lt;p&gt;Hence, In Execution Phase:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zkkVhpS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsz44n1syexithh1u6o4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zkkVhpS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsz44n1syexithh1u6o4.jpeg" alt="Execution phase"&gt;&lt;/a&gt;&lt;/p&gt;
Image src: https://www.instagram.com/nehacode/



&lt;h3&gt;
  &lt;a href="#visual-representation"&gt;
  &lt;/a&gt;
  Visual Representation
&lt;/h3&gt;

&lt;p&gt;Since, for each function invocation =&amp;gt; new execution context is created. Let's visualize this whole concept:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yu3txMS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8k0llsgxo40s3ysn2vf.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yu3txMS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8k0llsgxo40s3ysn2vf.jpeg" alt="Execution Contexts"&gt;&lt;/a&gt;&lt;/p&gt;
Image src: https://www.instagram.com/nehacode/


 

&lt;p&gt;and, this feels trippy! 😵‍💫&lt;/p&gt;

&lt;p&gt;For ease of storing Global Execution Context and all Local Execution Context, we have a data structure called &lt;strong&gt;Call Stack&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Whenever a new execution context is created, it gets stacked above the previous execution context, and so on. The JS engine takes care of keeping track of this stack's execution so that one execution context gets executed at a time to maintain the Single-threaded nature of JS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;Great! Now we know what execution context it and why is it so useful for our beloved JS engine ❤️ We got a good grasp of the differences between Global Execution Context &amp;amp; Local Execution Context, along with the phases required in their creation.&lt;/p&gt;

&lt;p&gt;👏&lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>computerscience</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Couchbase CRUD with .Net Core</title>
      <author>parasmm</author>
      <pubDate>Fri, 17 Sep 2021 19:26:34 +0000</pubDate>
      <link>https://dev.to/parasmm/couchbase-crud-with-netcore-5217</link>
      <guid>https://dev.to/parasmm/couchbase-crud-with-netcore-5217</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--soefRFcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5fki6qjvdcsyug5n41e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--soefRFcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5fki6qjvdcsyug5n41e.jpg" alt="CRUD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, I got an opportunity to work on .Net Core 3.1 with Couchbase. I wanted to share steps to create a new .Net Core Web API and implement CRUD operations with Couchbase as backend.  &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Pre-requisites:&lt;/b&gt; &lt;/p&gt;

&lt;p&gt;Install Couchbase Community Edition 7.0.0 &lt;br&gt;
Install sample bucket – “travel-sample” &lt;br&gt;
DotNet Core 3.1 SDK &lt;br&gt;
Visual Studio Code &lt;/p&gt;

&lt;p&gt;&lt;b&gt;What is Couchbase? &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Couchbase Server is an open source, distributed, JSON document database. It exposes a scale-out, key-value store with managed cache for sub-millisecond data operations, purpose-built indexers for efficient queries and a powerful query engine for executing SQL-like queries. More details can be found at their site &lt;a href="https://docs.couchbase.com/server/current/introduction/why-couchbase.html"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Create new WebAPI project: &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Execute below command to create a new .Net 3.1 project of type webapi&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new webapi --name CouchbaseWebAPI 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;Add Package reference: &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Package References and versions added for this example: &lt;/p&gt;

&lt;p&gt;Couchbase.Extensions.DependencyInjection Version 3.0.5.931 &lt;br&gt;
CouchbaseNetClient Version 3.2 &lt;/p&gt;

&lt;p&gt;Run below command in the project folder -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet add package Couchbase.Extensions.DependencyInjection --version 3.2.0 

dotnet add package CouchbaseNetClient --version 3.2 

dotnet restore 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;Update appsettings.json: &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Update appsettings.json to include required configuration for Couchbase – &lt;/p&gt;

&lt;p&gt;In default generated appsettings.json file you can add below configuration after the setting for AllowedHosts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  "Couchbase" : { 
    "ConnectionString": "couchbase://127.0.0.1", 
    "UseSsl": false, 
    "UserName": "&amp;lt;Couchbase userid&amp;gt;", 
    "Password": "&amp;lt;Couchbase password&amp;gt;" 
  } 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update ConfigureSevices to add Couchbase&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public void ConfigureServices(IServiceCollection services) 
{ 
      services.AddControllers();
      services.AddCouchbase(Configuration.GetSection("Couchbase"));
      services.AddCouchbaseBucket&amp;lt;INamedBucketProvider&amp;gt;("travel-sample"); 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;AddCouchbase&lt;/em&gt; is an extension method from “Couchbase.Extensions.DependencyInjection” which allows us to add couchbase  configurations to your application. This is reading all the settings from appsettings.json which we updated in last step. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;AddCouchbaseBucket&lt;/em&gt; is an extension method which allows us to add a particular bucket to the system. While accessing documents, application will be looking at travel-sample bucket to work with documents. This has wired up dependency injection for the application. Now, based on this in our controller class, where we want to work with travel-sample bucket we update the class. As we are about to interact with Airport documents from the travel-sample bucket, lets create a Controller class as AirportController.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private readonly IBucket _bucket;  

public AirportController(INamedBucketProvider bucketProvider) 
{
       _bucket = bucketProvider.GetBucketAsync().GetAwaiter().GetResult(); 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, in AirportController’s constructor, dependency injection is requesting for INamedBucketProvider (part of “Couchbase.Extensions.DependencyInjection”) object, which based on ConfigureServices above, gets couchbase bucket “travel-sample” assigned to _bucket which is of type IBucket (part of “Couchbase”). Now the controller is wired up to work with buckets. We can dive into individual endpoints for CRUD operations. &lt;/p&gt;

&lt;p&gt;Let’s start with Read (CRUD): - &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Read: &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Create model classes named Airport and Geo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class Airport 
{         
    public string airportname { get; set; } 
    public string city { get; set; } 
    public string country { get; set; } 
    public string faa { get; set; } 
    public Geo geo { get; set; } 
    public string icao { get; set; } 
    public int id { get; set; } 
    public string type { get; set; } 
    public string tz { get; set; } 
} 

public class Geo 
{ 
    public double alt { get; set; } 
    public double lat { get; set; } 
    public double lon { get; set; } 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add below function in AirportController for HttpGet verb&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[HttpGet] 
[Route("{Id}")] 
public async Task&amp;lt;Airport&amp;gt; Get(string Id) 
{ 
      // Get default collection object 
      var collection = await _bucket.DefaultCollectionAsync(); 

      // Get single document using KV search 

      var getResult = await collection.GetAsync(Id); 
      return getResult.ContentAs&amp;lt;Airport&amp;gt;(); 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Access below link to get response from above functionality –  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://localhost:5001/Airport/airport_3494"&gt;https://localhost:5001/Airport/airport_3494&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;airport_3494 is a key in the travel-sample bucket we installed. The key format in this sample bucket is type_Id, where type is the document type, here airport. And the Id is the unique identifier of the document, here 3494. The same format has been used in Create, update and delete below. &lt;/p&gt;

&lt;p&gt;Next, let us look at Create (CRUD): - &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Create: &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Add an HttpPut endpoint as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[HttpPut] 
public async Task put([FromBody]Airport airport) 
{ 
      if (airport.id != 0)
      {
           throw new Exception("Error in input data, Id should not be set!");
      } 

      // get default collection of the bucket
      var collection = await _bucket.DefaultCollectionAsync(); 

      // defaulting the id value to insert. New Id generation has different approaches which is not discussed here.
       airport.id = 1; 

       // using the collection object insert the new airport object
        await collection.InsertAsync&amp;lt;Airport&amp;gt;($"airport_{airport.id}", airport); 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we’ve hard coded airport Id as 1 and the same value is being passed for the key name in InsertAsync call. This will throw an error (Couchbase.Core.Exceptions.KeyValue.DocumentExistsException) for subsequent calls as soon as one record is entered in the couchbase DB with Id as 1. &lt;strong&gt;Note:&lt;/strong&gt; generating a new Id has couple of different approaches which is outside scope of this article. &lt;/p&gt;

&lt;p&gt;Next up is update (CRUD): - &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update: &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Add an HttpPost endpoint as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[HttpPost] 
public async Task post([FromBody]Airport airport) 
{ 
      if (airport.id == 0) 
      {
           throw new Exception("Error in input data, Id is required!"); 
      } 

       // get default collection of the bucket
       var collection = await _bucket.DefaultCollectionAsync(); 

       // call ReplaceAsync function to save the modified version of the document 
      await collection.ReplaceAsync&amp;lt;Airport&amp;gt;($"airport_{airport.id}", airport);
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ReplaceAsync function of collection object can be used to modify / update / replace the document. The first parameter is the KV search Key for the given document. Same as read, the key is in format type_id. &lt;/p&gt;

&lt;p&gt;Additionally, Couchbase SDK provides us with UpsertAsync function as well, which as names suggest is for update or insert. &lt;/p&gt;

&lt;p&gt;Lastly, let us look at Delete (CRUD): - &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Delete: &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Add HttpDelete endpoint to our controller&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[HttpDelete] 
[Route("{Id}")] 
public async Task delete(string Id) 
{ 
    if (string.IsNullOrEmpty(Id)) 
    {     
        throw new Exception("Error in input data, Id is required!"); 
    } 

    var collection = await _bucket.DefaultCollectionAsync(); 

    // Id contains key in required k/v search. e.g. airport_1 
    await collection.RemoveAsync(Id); 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;RemoveAsync function of collection object removes the document associated with key provided in input “Id”. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Bonus&lt;/b&gt;, Custom Bucket Provider: &lt;/p&gt;

&lt;p&gt;Additionally, if we want to access multiple buckets from the system, we can use below method -  &lt;/p&gt;

&lt;p&gt;If we want to access multiple buckets, we need to create interfaces which extend from INamedBucketProvider and use that provider while adding it to controllers. &lt;/p&gt;

&lt;p&gt;e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public interface ICustomBucketProvider1 : Couchbase.Extensions.DependencyInjection.INamedBucketProvider { 

} 

public interface ICustomBucketProvider2 : Couchbase.Extensions.DependencyInjection.INamedBucketProvider { 

} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And change the Configure services function as below –&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;services.AddCouchbaseBucket&amp;lt;ICustomBucketProvider1&amp;gt;("travel-sample"); 

services.AddCouchbaseBucket&amp;lt;ICustomBucketProvider2&amp;gt;("gamesim-sample"); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in controller we can add reference to both these buckets as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private readonly IBucket _bucket1; 
private readonly IBucket _bucket2; 

public AirportController(ICustomBucketProvider1 bucketProvider1, 
  ICustomBucketProvider2 bucketProvider2) 
{ 
      _bucket1 = bucketProvider1.GetBucketAsync().GetAwaiter().GetResult();
      _bucket2 = bucketProvider2.GetBucketAsync().GetAwaiter().GetResult(); 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will wireup _bucket1 with travel-sample bucket and _bucket2 with gamesim-sample.  &lt;/p&gt;

&lt;p&gt;Please refer below link for complete code sample -&lt;br&gt;
&lt;a href="https://github.com/parasmm/CouchbaseWebAPI"&gt;https://github.com/parasmm/CouchbaseWebAPI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Conclusion: &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;So we went through wiring up .Net Core web api with Couchbase SDK and Couchbase dependency injection. Created endpoint to work with Airport documents from travel-sample bucket provided by Couchbase. Created all the usual endpoints for CRUD operations. Additionally, we saw how to connect to more than one bucket in the application. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;References: &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.couchbase.com/server/current/introduction/why-couchbase.html"&gt;https://docs.couchbase.com/server/current/introduction/why-couchbase.html&lt;/a&gt; &lt;br&gt;
&lt;a href="https://blog.couchbase.com/dependency-injection-aspnet-couchbase/"&gt;https://blog.couchbase.com/dependency-injection-aspnet-couchbase/&lt;/a&gt; &lt;br&gt;
&lt;a href="https://docs.couchbase.com/dotnet-sdk/current/hello-world/start-using-sdk.html"&gt;https://docs.couchbase.com/dotnet-sdk/current/hello-world/start-using-sdk.html&lt;/a&gt; &lt;br&gt;
&lt;a href="https://docs.couchbase.com/tutorials/quick-start/quickstart-dotnet27-aspnetcore31-visualstudio-firstquery-cb65.html"&gt;https://docs.couchbase.com/tutorials/quick-start/quickstart-dotnet27-aspnetcore31-visualstudio-firstquery-cb65.html&lt;/a&gt; &lt;/p&gt;

</description>
      <category>couchbase</category>
      <category>dotnet</category>
      <category>csharp</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Microsoft Engage to SWE internship at Microsoft</title>
      <author>apurva866</author>
      <pubDate>Fri, 17 Sep 2021 19:15:50 +0000</pubDate>
      <link>https://dev.to/apurvatech/microsoft-engage-to-swe-internship-at-microsoft-44pj</link>
      <guid>https://dev.to/apurvatech/microsoft-engage-to-swe-internship-at-microsoft-44pj</guid>
      <description>&lt;p&gt;Each year, over 25–30k students apply for the Microsoft engage program and only 500–700 students get selected for the mentorship. I was one of the lucky candidates to get this amazing opportunity, and I sought to make the most out of it and in the end I received an SWE 2022 summer internship offer at Microsoft ❤. And I'm going to share my journey with you through this article.&lt;/p&gt;

&lt;p&gt;Microsoft engage is a mentorship program conducted by Microsoft in the month of June-July, and opens for only 2nd-year students, application opens towards the end of 2nd year (this timeline may vary with college), and students from some specific colleges are selected. People with the following qualifications are allowed to apply to this program:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Graduation year: 2nd&lt;/li&gt;
&lt;li&gt;CGPA: 7 and above.&lt;/li&gt;
&lt;li&gt;Course: B.Tech/B.E/Dual Degree&lt;/li&gt;
&lt;li&gt;Branch: Any&lt;/li&gt;
&lt;li&gt;No pending backlogs&lt;/li&gt;
&lt;li&gt;Strong CS Fundamentals and Coding principles required&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G460QdCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsuad52cdtahw86oqoba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G460QdCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsuad52cdtahw86oqoba.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;One can find all the details of the application at their &lt;a href="https://careers.microsoft.com/us/en/job/1049887"&gt;career portal&lt;/a&gt;. After 2–3 weeks of initial shortlisting through resumes, the shortlisted people received an invite for a test link. Create an amazing resume to pass this round and focus on your CGPA starting from the first year of your college &amp;amp; create good projects and practice problem-solving. The quiz test consists of 15–20 questions in 45 min. And the following topics are important: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data structures and Algorithms&lt;/li&gt;
&lt;li&gt;Operating system&lt;/li&gt;
&lt;li&gt;Database Management System&lt;/li&gt;
&lt;li&gt;Java Programming&lt;/li&gt;
&lt;li&gt;Problem solving
- with 4–5 coding questions and the rest were reasoning-based &amp;amp; MCQ questions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After 1 week we received the qualification mail and I qualified to participate in Engage🎉&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aKyakIad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7x54f595j4mqmdv5ogg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aKyakIad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7x54f595j4mqmdv5ogg.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I was very excited to be mentored by mentors from Microsoft and attend amazing AMA sessions.&lt;br&gt;
The theme for our year was Agile Development where we were supposed to create a Video conferencing application i.e. Clone of Microsoft Teams, find more details of the task on this &lt;a href="https://microsoft.acehacker.com/engage2021/"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sM1W_mHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pow4fyzj1gc6kbm5cba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sM1W_mHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pow4fyzj1gc6kbm5cba.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We were allotted 2 mentors, mine was &lt;a href="https://www.linkedin.com/in/tushar-malhotra-54250b111/"&gt;Tushar&lt;/a&gt; and Gulbir sir, along with a group of 6 students. And I couldn't have asked for better mentors ❤, we had 2 meetings weekly, one was a group meeting and the other was a one-on-one meeting with a mentor, to discuss the obstacles during the development phase and get insights about work at Microsoft along with a plethora of informative AMA sessions.&lt;/p&gt;

&lt;p&gt;After 5 weeks of hard work and with the help of my mentors and friends(&lt;a href="https://www.linkedin.com/in/cryptus-neoxys/"&gt;Dev Sharma&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/dikwickley/"&gt;Aniket Singh&lt;/a&gt;, and &lt;a href="https://www.linkedin.com/in/mahera-furniturewala/"&gt;Mahera&lt;/a&gt;), I was able to complete my project and it was very well received.&lt;/p&gt;

&lt;p&gt;Link to my submission: &lt;a href="https://github.com/Apurva-tech/unite"&gt;https://github.com/Apurva-tech/unite&lt;/a&gt;&lt;br&gt;
And the application: &lt;a href="https://unite-apurva.herokuapp.com/"&gt;https://unite-apurva.herokuapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The evaluation of submission could either give me the opportunity to get a direct offer or an interview opportunity.&lt;br&gt;
After 3–4 weeks of evaluation, some people received a direct offer for the internship and I was not one of them 😔. I decided to work hard on my DSA skills and ace the interviews whenever I receive interview slots.&lt;/p&gt;

&lt;p&gt;And in the end, all the work did pay off and I was recommended for the Final (AA) round of the interview, i.e I had to give only the final interview. I was asked about my project in the Engage program and a 45 minutes discussion on a real-world application of DSA. The interviewer was very sweet and helped throughout the interview, it was one of the best experiences of my journey. One thing that my mentor &lt;a href="https://www.linkedin.com/in/joshika/"&gt;Joshika&lt;/a&gt; di told me is &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"The way you speak and react in interviews, is actually who you really are"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;, I kept this in mind, and remained calm during the whole interview, and thought of each aspect of the questions asked.&lt;/p&gt;

&lt;p&gt;I gave my interview on August 18 in the morning and was scared to death about the results, and to my surprise, I received the results in the afternoon, my happiness knew no bounds, it was soooo overwhelming (obviously I couldn't stop screaming 😂), I had received the internship offer 🎉🎉&lt;br&gt;
I hope this article helps you in some way. Happy learning ❤&lt;/p&gt;

</description>
      <category>microsoftindia</category>
      <category>internships</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
