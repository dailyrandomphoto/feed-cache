<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 takeaways from my first software developers Meetup </title>
      <author>Damian Demasi</author>
      <pubDate>Thu, 18 Nov 2021 20:53:22 +0000</pubDate>
      <link>https://dev.to/colocodes/10-takeaways-from-my-first-software-developers-meetup-1kec</link>
      <guid>https://dev.to/colocodes/10-takeaways-from-my-first-software-developers-meetup-1kec</guid>
      <description>&lt;p&gt;Yesterday evening I went to my first software development Meetup. I was hesitating in going because I'm sort of an introvert and going into a room full of strangers is not what I imagine when I think about doing something &lt;em&gt;fun&lt;/em&gt;. Fortunately, I pushed myself to go, thinking that, at least, I would listen to what the speakers had to say.&lt;/p&gt;

&lt;p&gt;To my surprise, I enjoyed the experience quite much. I didn't do much networking, but I could see and hear about people from different backgrounds trying to start (and continue) their careers in software development. The Meetup was focused on junior developers, so the discussion was focused on how to get jobs and the first steps after getting a job. I was glad to know many recommended a process to land jobs that are very similar to the one I followed to get my first job as a software developer, of which you can read more here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/colocodes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iYbdtIsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2sZPQzQE--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/420036/7f62b9dd-71f0-4e06-9466-1340b5d8a038.png" alt="colocodes"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/colocodes/how-ive-got-a-web-development-job-one-week-after-publishing-my-portfolio-3o6g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I’ve got a web development job one week after publishing my portfolio&lt;/h2&gt;
      &lt;h3&gt;Damian Demasi ・ Nov 1 ・ 13 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#portfolio&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#my-takeaways"&gt;
  &lt;/a&gt;
  My takeaways
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-no-one-regrets-being-brave"&gt;
  &lt;/a&gt;
  1. No one regrets being brave
&lt;/h3&gt;

&lt;p&gt;There is a saying that I heard on the Netflix show &lt;em&gt;Luis Miguel&lt;/em&gt; (a great show, by the way) in which one of the characters says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No one regrets being brave&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I used that phrase as my mantra, and that is what pushed me beyond my introversion and allowed me to face the uncomfortable situation of facing strangers (in a strange language, as English is not my mother tongue).&lt;/p&gt;

&lt;p&gt;I knew I would regret not going more than the regret of going and, potentially, making a fool of myself. In the end, it was a great experience, although I didn't manage to extract all the juice out of it (maybe next time!).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-importance-of-culture"&gt;
  &lt;/a&gt;
  2. The importance of culture
&lt;/h3&gt;

&lt;p&gt;There was a general consensus among speakers and the senior developer to whom I talked to that, for junior developers, culture fit is more important than knowledge. This is something that I experienced myself during the interview I had for my current position.&lt;/p&gt;

&lt;p&gt;Having the right mindset, caring about the craftsmanship of building things with your code, and having emotional and social intelligence to become a positive addition to a team, is what companies are looking for, and something they won't be teaching you. On the other hand, knowing the right framework or Git workflow (and other technical skills) is something you can learn on the job.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0MYt5jPR6QX5pnqM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0MYt5jPR6QX5pnqM/giphy.gif" width="370" height="208"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When it comes to more senior positions, technical knowledge is often more important, as you will have to know your stuff really well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-job-posts-are-wish-lists"&gt;
  &lt;/a&gt;
  3. Job posts are wish lists
&lt;/h3&gt;

&lt;p&gt;Junior developers may find it difficult to land their first job because most of the job postings demand too many skills. The speakers at the Meetup agreed that the job posts are sometimes not well written, and they just list, from more to less important, all the skills they wish a junior had for that position. Chances are that, if you don't know all the skills they are asking for, many other juniors will also lack those, so you should apply for the role.&lt;/p&gt;

&lt;p&gt;In my case, I applied to a job position that was looking for a senior developer, but I was familiar with, roughly, half the skills they asked for. They ended up hiring me, and continue looking for that senior position later on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-meetups-are-great-places-to-find-companies-to-work-at"&gt;
  &lt;/a&gt;
  4. Meetups are great places to find companies to work at
&lt;/h3&gt;

&lt;p&gt;I could see that the Meetup was packed with people from different companies looking for developers. So, if you want to start working in this industry, or change jobs, going to this kind of Meetups could be your best investment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/t6lGyl8QLylqFQJkiA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/t6lGyl8QLylqFQJkiA/giphy.gif" width="500" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Someone told me that, in his company, they are actually struggling to find developers. The job market for software developers seems to be in good health, as there is a high demand for developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-the-interview-goes-both-ways"&gt;
  &lt;/a&gt;
  5. The interview goes both ways
&lt;/h3&gt;

&lt;p&gt;Regarding the interview process, the speakers emphasised that an interview is not only the chance for a company to know more about you but the opportunity for you to know more about the company (research the company before going to the interview!). You should ask about the culture, the professional development plan, salary, what you should be doing to succeed at the position, and any other relevant questions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/dJxiI2Tmgxsi9irVpQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/dJxiI2Tmgxsi9irVpQ/giphy.gif" width="500" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regarding coding challenges, you should be wary of companies that give you a coding challenge to test how intelligent you are. A good company will give you the challenge to see how you work out problems, how you work in teams, and how you react to feedback. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-dont-chase-shiny-objects"&gt;
  &lt;/a&gt;
  6. Don't chase shiny objects
&lt;/h3&gt;

&lt;p&gt;Some companies will offer you a lot of perks, but you shouldn't let that blind you. Instead of chasing shiny objects, chase culture fit and growth opportunities. Are you going to be a better developer if you work at that company?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-opensource-contribution"&gt;
  &lt;/a&gt;
  7. Open-source contribution
&lt;/h3&gt;

&lt;p&gt;Things that will help you to land an interview (and a job) are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build side projects, from start to finish.&lt;/li&gt;
&lt;li&gt;Display those projects on a portfolio.&lt;/li&gt;
&lt;li&gt;Use an online repository, like GitHub, to display your code.&lt;/li&gt;
&lt;li&gt;Have an updated LinkedIn account.&lt;/li&gt;
&lt;li&gt;Build a compelling resume showing all your skills, especially if you are coming from a different industry and they are transferable to a software development position.&lt;/li&gt;
&lt;li&gt;Contribute to open-source projects. I was surprised how many of the speakers said that this is really important.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#8-selfthought-vs-university-degree"&gt;
  &lt;/a&gt;
  8. Self-thought vs university degree
&lt;/h3&gt;

&lt;p&gt;None of the speakers said that their companies will prefer a uni graduate over a self-thought developer (or the other way around). Instead, they focus on what is your thinking process, how you tackle problems, and how well you react to feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-to-succeed-show-interest"&gt;
  &lt;/a&gt;
  9. To succeed, show interest
&lt;/h3&gt;

&lt;p&gt;To succeed in your recent position as a software developer (assuming you landed a job), you should get interested in the different departments the company may have. Try to learn a bit about everything, put yourself in the client's shoes, chat with other coworkers, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-good-companies-are-social"&gt;
  &lt;/a&gt;
  10. Good companies are social
&lt;/h3&gt;

&lt;p&gt;By the end of the Meetup, the idea of how a good company looks like was becoming clearer. Cool companies build social relationships in their communities. They host or talk at Meetups. They are interested in how you can become a great software developer. They are more human-like than cold entity-like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/2FayYXU90QS9MmAIo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2FayYXU90QS9MmAIo/giphy.gif" width="350" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;I'm amazed about how much value you can extract from these Meetups. If you have the chance to go to one, do it. Put aside your doubts and anxiety, and just go. We are all humans, we share the same struggles, so you are not alone. Remember: &lt;strong&gt;no one regrets being brave&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>discuss</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to deploy your Python Django project</title>
      <author>Adam Miedema</author>
      <pubDate>Thu, 18 Nov 2021 20:37:27 +0000</pubDate>
      <link>https://dev.to/armiedema/how-to-deploy-your-python-django-project-28dl</link>
      <guid>https://dev.to/armiedema/how-to-deploy-your-python-django-project-28dl</guid>
      <description>&lt;p&gt;&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; is a top Python web-framework known for its features, scalability, and flexibility.&lt;/p&gt;

&lt;p&gt;In this guide, we'll walk through how you can deploy your Django projects with &lt;a href="https://cleavr.io"&gt;Cleavr.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before proceeding, you'll need to have an active &lt;a href="https://cleavr.io"&gt;Cleavr.io&lt;/a&gt; account and have a server provisioned and ready-to-go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-add-a-nodejs-ssr-app"&gt;
  &lt;/a&gt;
  Step 1 - Add a NodeJS SSR app
&lt;/h2&gt;

&lt;p&gt;Add a new NodeJS SSR site to your server in Cleavr.&lt;/p&gt;

&lt;p&gt;We're using NodeJS SSR as the site's app type as it will install Node AND PM2 to the server. PM2 manages more than just node applications, so we'll take advantage of this to serve our Django app and keep it alive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-configure-allowed-hosts"&gt;
  &lt;/a&gt;
  Step 2 - Configure allowed hosts
&lt;/h2&gt;

&lt;p&gt;In the Django project, locate the &lt;code&gt;settings.py&lt;/code&gt; file, or wherever you have &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; defined, and add the domain used in the previous step to the list of allowed hosts.&lt;/p&gt;

&lt;p&gt;For example, this is what our example looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'c2lbzu22oxujfgnr2848.cleaver.rocks']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Push your changes to your GIT repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-configure-app-repo"&gt;
  &lt;/a&gt;
  Step 3 - Configure app repo
&lt;/h2&gt;

&lt;p&gt;Once the site has successfully been added to the server, click the &lt;strong&gt;Setup and deploy&lt;/strong&gt; link to configure the web app.&lt;/p&gt;

&lt;p&gt;On the settings &amp;gt; repo tab, add &lt;code&gt;armgitaar/django-helloworld&lt;/code&gt; to the repo and keep branch as &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this example, we're using a Django repo originally by &lt;a href="https://github.com/django-ve"&gt;Django Venezuela&lt;/a&gt; that I've modified a bit to make the port number use the one automatically assigned by Cleavr. &lt;a href="https://github.com/armgitaar/django-helloworld"&gt;View the example repo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To view the modification, open the &lt;a href="https://github.com/armgitaar/django-helloworld/blob/master/manage.py"&gt;manage.py&lt;/a&gt; file and take note of the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.core.management.commands.runserver import Command as runserver
runserver.default_port = os.environ.get('PORT', 8000)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Django apps default to run on port &lt;code&gt;8000&lt;/code&gt; and the above configuration will first check what the environment port is and will select that port if available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-configure-entry-and-pm2-ecosystem"&gt;
  &lt;/a&gt;
  Step 4 - Configure entry and PM2 ecosystem
&lt;/h2&gt;

&lt;p&gt;On the &lt;strong&gt;Build&lt;/strong&gt; tab, set &lt;strong&gt;Entry Point&lt;/strong&gt; to &lt;code&gt;manage.py&lt;/code&gt; and &lt;strong&gt;Arguments&lt;/strong&gt; to &lt;code&gt;runserver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the PM2 ecosystem, we'll need to set the interpreter to Python3 as well as remove a couple of configs that aren't compatible with Python apps.&lt;/p&gt;

&lt;p&gt;Add interpreter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"interpreter": "/usr/bin/python3",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "instances": "max",
 "exec_mode": "cluster_mode",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ecosystem should look similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "your.domain.com",
  "script": "manage.py",
  "args": "runserver",
  "log_type": "json",
  "cwd": "/home/cleavr/your.domain.com/current",
  "interpreter": "/usr/bin/python3",
  "env": {
    "PORT": assigned port number,
    "CI": 1,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-configure-deployment-hooks"&gt;
  &lt;/a&gt;
  Step 5 - Configure deployment hooks
&lt;/h2&gt;

&lt;p&gt;On the deployment hooks page,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Disable &lt;strong&gt;Install NPM Packages&lt;/strong&gt; hook&lt;/li&gt;
&lt;li&gt;Disable &lt;strong&gt;Build Assets&lt;/strong&gt; hook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a new hook to install Python dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add a new hook for migration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Order the above hooks to run before the activation deployment hook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-deploy"&gt;
  &lt;/a&gt;
  Step 6 - deploy!
&lt;/h2&gt;

&lt;p&gt;Once all of the above is complete, deploy the app!&lt;/p&gt;

&lt;p&gt;For this example, there is one more thing we need to do, which is create an admin. The easiest way is to SSH into the server and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 manage.py createsuperuser --username admin --email admin@mail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be prompted to add and confirm a password.&lt;/p&gt;

&lt;p&gt;Once completed, you should now see 'Hello World' render on the app's domain.&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
    </item>
    <item>
      <title>How to install Apache Tomcat 9 on Ubuntu 20.04 LTS</title>
      <author>Dhanusha Perera</author>
      <pubDate>Thu, 18 Nov 2021 20:21:19 +0000</pubDate>
      <link>https://dev.to/dhanushaperera07/how-to-install-apache-tomcat-9-on-ubuntu-2004-lts-b5m</link>
      <guid>https://dev.to/dhanushaperera07/how-to-install-apache-tomcat-9-on-ubuntu-2004-lts-b5m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#about-this-article"&gt;
  &lt;/a&gt;
  About This Article
&lt;/h2&gt;

&lt;p&gt;This article is about how to install Apache Tomcat 9 using 'tar.gz' on Ubuntu 20.04 LTS. Hope you will learn something. Cheers!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;p&gt;You need to have Java 8 installed on your machine. &lt;br&gt;
Tomcat 9 works on only Java 8. &lt;a href="https://tomcat.apache.org/whichversion.html"&gt;More Information&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can confirm the java version with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;java -version
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-install-apache-tomcat-9"&gt;
  &lt;/a&gt;
  Let's install Apache Tomcat 9
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Visit &lt;a href="https://tomcat.apache.org/download-90.cgi"&gt;Apache Tomcat Site&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download Apache Tomcat 9.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download &lt;code&gt;tar.gz (pgp, sha512)&lt;/code&gt;  the Core Binary Distributions of the Apache Tomcat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open up your terminal and &lt;code&gt;cd&lt;/code&gt; into the directory where you have downloaded the Apache Tomcat &lt;code&gt;tar.gz&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; You can open up the terminal by pressing Ctrl + Alt + T on your keyboard.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;cd /home/&amp;lt;type-username-here&amp;gt;&lt;/span&gt;/Downloads
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Extract the &lt;code&gt;tar.gz&lt;/code&gt; file to &lt;code&gt;/opt&lt;/code&gt; directory with the following command.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;sudo tar -xf apache-tomcat-9.0.55.tar.gz -C /opt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-the-catalina-environment-variable"&gt;
  &lt;/a&gt;
  Setting up the Catalina environment variable.
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Let's cd into the Tomcat directory.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;cd /opt/apache-tomcat-9.0.55/
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;You can see the current directory by running the following command. Copy the path of the current directory. This is the path of the tomcat 9.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;pwd
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now open up the terminal and type the following command to get the root access. You will need to provide the password if needed.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;sudo su
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Open up the ~/.bashrc file using gedit and the Catalina environment variable.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;gedit ~/.bashrc
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Scroll down to the end of the document and set the Catalina environment variable. &lt;code&gt;/opt/apache-tomcat-9.0.55&lt;/code&gt; is the path of the tomcat which you copied earlier.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export CATALINA_HOME=/opt/apache-tomcat-9.0.55
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Save the &lt;code&gt;~/.bashrc&lt;/code&gt; file and close gedit window.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-tomcat-9"&gt;
  &lt;/a&gt;
  Run Tomcat 9
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;You can run Tomcat 9 by running the following command.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;sh startup.sh
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now you can open up a web browser and navigate to the tomcat URL. If you can see the Tomcat initial page. Then you have successfully installed and the tomcat 9 server is up and running.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:8080/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;If you want to shut down the Tomcat server, you can do so by running the following command.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;sh shutdown.sh
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;br&gt;
Below you can find a screenshot of my terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TLYH7pBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybgmr0ntn6hlcifc6hs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TLYH7pBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybgmr0ntn6hlcifc6hs8.png" alt="Screenshot of the terminal" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>tomcat</category>
      <category>beginners</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>AzureFunBytes Episode 62 - Supercharge your Java Apps on Azure with @rorypreddy</title>
      <author>Jay Gordon</author>
      <pubDate>Thu, 18 Nov 2021 20:17:09 +0000</pubDate>
      <link>https://dev.to/azure/azurefunbytes-episode-62-supercharge-your-java-apps-on-azure-with-rorypreddy-539k</link>
      <guid>https://dev.to/azure/azurefunbytes-episode-62-supercharge-your-java-apps-on-azure-with-rorypreddy-539k</guid>
      <description>&lt;p&gt;After a short break for some Microsoft streaming events, AzureFunBytes returns to LearnTV for another fun conversation about the products, people, and services that make for a delightful Azure experience. &lt;/p&gt;

&lt;p&gt;AzureFunBytes is a weekly opportunity to learn more about the fundamentals and foundations that make up Azure. It's a chance for me to understand more about what people across the Azure organization do and how they do it. Every week we get together at 11 AM Pacific on &lt;a href="https://cda.ms/226"&gt;Microsoft LearnTV&lt;/a&gt; and learn more about Azure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJzmXQeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7BxBMz1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2xzw2g664tj31jij13t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJzmXQeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7BxBMz1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2xzw2g664tj31jij13t.gif" alt="AzureFunBytes animation" width="880" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java is one of the most used and trusted programming languages in software engineering.  It's creation dates back to 1995 with the 1.0 JD released on January 23, 1996.  In March of 2022 we should see the release of Java SE 18!  That's a lot of progress! &lt;/p&gt;

&lt;p&gt;There are many ways to deploy your Java applications on Azure including Azure App Service, Azure Spring Cloud, Azure Kubernetes Service (AKS), and Azure Red Hat OpenShift for hardware and software infrastructure management.&lt;/p&gt;

&lt;p&gt;This week our friend, Microsoft Senior Cloud Advocate, &lt;a href="https://twitter.com/rorypreddy"&gt;Rory Preddy&lt;/a&gt; returns to the show to discuss how to supercharge your Java apps on Azure. This session is a fast-paced tour of all things Java and Azure at the modern Microsoft of today. You’ll hear about the broad range of tools, services, and APIs that Azure offers for Java developers. Short demos will show how you can easily get started deploying Java applications... Who is it aimed at? Developers that want to learn about building and running Java applications on Azure. Why should you attend? As a developer, you want to use a cloud platform that supports familiar tools and frameworks. Wherever you are in Java—from Java EE/Jakarta EE to Spring and microservices—Azure offers a choice of services and first-class integration with DevOps tooling popular with Java shops.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZwbxvRreYdc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/ZwbxvRreYdc"&gt;00:00:00 - Opening&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZwbxvRreYdc?t=156"&gt;00:02:36 - Back live!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZwbxvRreYdc?t=298"&gt;00:04:48 - Rory Returns!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZwbxvRreYdc?t=498"&gt;00:08:18 - Rory's beginnings with Java&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZwbxvRreYdc?t=889"&gt;00:14:49 - Java Coding Pack for Visual Studio Code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZwbxvRreYdc?t=951"&gt;00:15:51 - Microsoft OpenJDK&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZwbxvRreYdc?t=1177"&gt;00:19:27 - Azure Spring Cloud&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZwbxvRreYdc?t=1264"&gt;00:21:04 - Why does moving to the Azure Cloud make app maintenance easier?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZwbxvRreYdc?t=1688"&gt;00:28:08 - Why Azure Spring Cloud?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZwbxvRreYdc?t=1925"&gt;00:32:05 - Live demo time!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZwbxvRreYdc?t=2299"&gt;00:38:19 - Java on App Service&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZwbxvRreYdc?t=2785"&gt;00:46:25 - Cost savings, the "cloud mindset"&lt;/a&gt;&lt;br&gt;
[00:50:57 - Zero trust](&lt;/p&gt;

&lt;p&gt;We've got a big agenda planned, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft OpenJDK&lt;/li&gt;
&lt;li&gt;Java hosting options on Azure

&lt;ul&gt;
&lt;li&gt;Virtual Machines&lt;/li&gt;
&lt;li&gt;Jakarta EE Images&lt;/li&gt;
&lt;li&gt;App service&lt;/li&gt;
&lt;li&gt; Azure Spring Cloud&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Devops Tool Integrations

&lt;ul&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;li&gt;GitHub Actions&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Monitoring and tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#about-rory-preddy"&gt;
  &lt;/a&gt;
  About Rory Preddy:
&lt;/h2&gt;

&lt;p&gt;Rory works in the Developer Relations team at Microsoft as a Senior Cloud Advocate. Cloud Advocates use their deep research skills to help professional cloud developers discover and successfully use Microsoft’s platforms.&lt;/p&gt;

&lt;p&gt;A seasoned speaker whose talks are both meaningful and humorous, Rory speaks around the world empowering developers to achieve more.  Rory is a passionate advocate for Accessibility in programming working to help understand the need to consider inclusivity of those with disabilities as a priority in their development cycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Rory's own words:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My life is a hilarious roller coaster of miss-intended programming bugs because at 120 cm tall and 50 kilograms I completely fall off your radar.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why did my scale call me! Why does facial recognition see me as a child? These are all valid questions I often ask myself as I navigate my weird and different world. Have you heard the phrase “You have to be this tall for Micro-services”? well what about: “You have to be this tall to operate a mobile phone?”. I am finding it harder and harder to reach any button except for “#” and “9”.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Building accessibility into the planning stages of programming can eliminate barriers for participation and create an inclusive environment for people with disabilities. Programming for diversity serves as an unquestionable indicator that your software embraces the diversity of your users and cares about their safety and comfort.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Learn about Azure fundamentals with me!&lt;/p&gt;

&lt;p&gt;Live stream is normally found on Twitch, YouTube, and &lt;a href="https://cda.ms/226"&gt;LearnTV&lt;/a&gt; at 11 AM PT / 2 PM ET Thursday. You can also find the recordings here as well:&lt;/p&gt;

&lt;p&gt;Useful Docs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cda.ms/219"&gt;Get $200 in free Azure Credit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/243"&gt;Microsoft Learn: Introduction to Azure fundamentals&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3cs"&gt;Azure for Java developer documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3c2"&gt;Microsoft OpenJDK&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3cf"&gt;Getting Started - Java Coding Pack&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3cj"&gt;Use the Azure SDK for Java&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3ck"&gt;Microsoft Learn: Java on Azure Learning Path&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3cn"&gt;Microsoft Learn: Monitoring Java Applications on Azure&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3ct"&gt;What is Azure Spring Cloud?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3cq"&gt;Spring on Azure integration documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3cx"&gt;Azure Spring Cloud CI/CD with GitHub Actions&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3cy"&gt;Automate application deployments to Azure Spring Cloud&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>azure</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Lab 9 - GitHub Actions Workflow</title>
      <author>Kevan Y</author>
      <pubDate>Thu, 18 Nov 2021 20:14:29 +0000</pubDate>
      <link>https://dev.to/pandanoxes/lab-9-github-actions-workflow-joi</link>
      <guid>https://dev.to/pandanoxes/lab-9-github-actions-workflow-joi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;For my ninth lab, I have to set up GitHub Action for my text ssg project. Then pick another student that has GitHub Actions setup and create a PR to his repo.&lt;br&gt;
In my previous I had a bit of experience with GitHub Action, I had a chance to set up with my mentor a GitHub Action to enable e2e testing with Cypress on the new build application when a PR is created, to have continuous integration. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup-github-action"&gt;
  &lt;/a&gt;
  Setup GitHub Action
&lt;/h2&gt;

&lt;p&gt;First of all, I create a folder called &lt;code&gt;.github/workflows&lt;/code&gt;, this folder contains the file for setup for GitHub Action.&lt;/p&gt;

&lt;p&gt;I created a file called &lt;code&gt;ci_workflow.yml&lt;/code&gt; and put&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CI&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;16.x&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Use Node.js ${{ matrix.node-version }}&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.node-version }}&lt;/span&gt;
        &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;npm'&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install and test&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;npm install&lt;/span&gt;
        &lt;span class="s"&gt;npm run test-silent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make it simple, this file means, on push to main or create PR to be pushed to main will run this workflow.&lt;br&gt;
The job of this workflow is to run a node-version 16.x on a ubuntu-latest system, and install all my application dependencies and run a test. &lt;br&gt;
If test fails it will return -1, if pass it will return 0.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEbzrw8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyoiz0nj3n9brggwzs6m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEbzrw8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyoiz0nj3n9brggwzs6m.png" alt="Image description" width="880" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-more-test-cases-to-another-student-repo"&gt;
  &lt;/a&gt;
  Add more test cases to another student repo
&lt;/h2&gt;

&lt;p&gt;I pick Andre &lt;a href="https://github.com/AndreWillomitzer/textToHTML_V2"&gt;repo&lt;/a&gt;, I created an issue stating, to separate generate HTML into a function, then add test case for that function.&lt;br&gt;
After finishing my fix. I created a PR, I see that the workflow Andre setup is working correctly.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ABDhlKJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cqovdmoth1rtn2q60px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ABDhlKJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cqovdmoth1rtn2q60px.png" alt="Image description" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;GitHub action is a powerful tool, it enables developers to shift some manual work into automation. Yet I still have a lot to learn of GitHub Actions.&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>What does "functional programming" mean to you?</title>
      <author>Andrew (he/him)</author>
      <pubDate>Thu, 18 Nov 2021 20:11:55 +0000</pubDate>
      <link>https://dev.to/awwsmm/what-does-functional-programming-mean-to-you-knh</link>
      <guid>https://dev.to/awwsmm/what-does-functional-programming-mean-to-you-knh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://www.pexels.com/@magda-ehlers-pexels"&gt;Magda Ehlers&lt;/a&gt; from Pexels&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What crosses your mind when you hear the phrase "functional programming"? Some people imagine arcane, esoteric code, built around functors and monads and applicatives, but I think of&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;immutability and referential transparency&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Immutability just means you create new objects instead of &lt;em&gt;mutating&lt;/em&gt; (changing) old ones. This means every variable is effectively &lt;code&gt;final&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; or whatever your language calls it. Instead of&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;rename&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;your &lt;code&gt;rename&lt;/code&gt;d &lt;code&gt;Dog&lt;/code&gt; would be a new object, à la&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt; &lt;span class="nf"&gt;rename&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;Immutability makes it easy to reason about objects (&lt;code&gt;Dog doug = new Dog("doug")&lt;/code&gt; will always have &lt;code&gt;name.equals("doug")&lt;/code&gt;), but it can make your program less efficient, both in terms of memory usage and in terms of performance -- always creating new objects takes more time and space than reusing existing ones.&lt;/p&gt;

&lt;p&gt;Referential transparency is a closely-related concept. In a nutshell, what it means is that -- wherever you have the value &lt;code&gt;x&lt;/code&gt; in your code, you can replace it with whatever you initially declared &lt;code&gt;x&lt;/code&gt; to be. So if &lt;code&gt;const x = 10&lt;/code&gt;, then &lt;code&gt;x&lt;/code&gt; &lt;em&gt;always&lt;/em&gt; equals &lt;code&gt;10&lt;/code&gt;. You can replace every instance of &lt;code&gt;x&lt;/code&gt; with the literal &lt;code&gt;10&lt;/code&gt; and your program should do the exact same thing. (This does not work, of course, if your objects and variables are mutable and you can do something like &lt;code&gt;x = x + 1&lt;/code&gt;!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;higher-order functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In many languages, functions and objects are separate things: you can pass objects as arguments to functions, and functions can be scoped as object &lt;em&gt;methods&lt;/em&gt;. But languages which encourage a functional style will allow you to pass functions as arguments to functions, like in Scala&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;)*)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;foreach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;The above &lt;code&gt;process&lt;/code&gt; method takes a &lt;code&gt;String&lt;/code&gt; argument &lt;code&gt;text&lt;/code&gt; and a &lt;code&gt;(String =&amp;gt; Unit)*&lt;/code&gt; argument &lt;code&gt;fs&lt;/code&gt; -- that is, zero or more functions which themselves take a &lt;code&gt;String&lt;/code&gt; and return &lt;code&gt;Unit&lt;/code&gt;, Scala's equivalent of &lt;code&gt;void&lt;/code&gt;. Once you get used to working with higher-order functions, their utility is immense&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Console._&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"this does nothing"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"print to stdout"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"print to stderr"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"print to both"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"etc"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myLogFunc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;Adding a new output device is as easy as passing a new function to &lt;code&gt;process&lt;/code&gt;. Treating functions as "first-class citizens" of a language opens a huge array of new possibilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pure functions (side-effect-free functions)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A "pure" function is a function without "side effects". What does that mean? In a nutshell, it means that a function should behave similar to a &lt;em&gt;mathematical&lt;/em&gt; function (think &lt;code&gt;y = f(x)&lt;/code&gt;) -- it should take some value, &lt;code&gt;x&lt;/code&gt;, and &lt;em&gt;return&lt;/em&gt; or &lt;em&gt;become&lt;/em&gt; some other value, &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mathematical functions don't write to log files or print text to a terminal or change the value of other variables on the page -- they turn &lt;code&gt;x&lt;/code&gt; into &lt;code&gt;y&lt;/code&gt;, that's it.&lt;/p&gt;

&lt;p&gt;Of course, computer programs are kind of useless if they can't take input from a user, or read a config file, or communicate with external resources. Input / Output, or IO, is required to make programs "interactive". Functions which perform output (typically returning no value) typically return a &lt;code&gt;void&lt;/code&gt; or &lt;code&gt;Unit&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; value of some kind. Haskell, for instance, uses its &lt;a href="https://wiki.haskell.org/Introduction_to_IO"&gt;IO monad&lt;/a&gt; for input and output.&lt;/p&gt;

&lt;p&gt;We can't eliminate side-effecting functions, but we should try to make it as clear as possible what the intent of our functions are. If you want to calculate a value, and log it to a file, &lt;a href="https://en.wikipedia.org/wiki/Separation_of_concerns"&gt;separate those concerns&lt;/a&gt; into two separate routines, if possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;declarative programming and lambdas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"Functional programming" also makes me think of a particular &lt;em&gt;style&lt;/em&gt; of programming: iterating over data structures (like arrays, dictionaries, maps, sets, etc.) using &lt;em&gt;declarative&lt;/em&gt;-style functions like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Imperative&lt;/em&gt; programming is (in a sense) the opposite of declarative programming. An imperative program declares exactly what is to be done:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;A declarative program specifies &lt;em&gt;what&lt;/em&gt; is to be done, and the language itself figures out how to do that. For example, in a declarative program, we might rewrite the above as&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;foreach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// lambda&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;...or&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;fold&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;partialSum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;partialSum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;...or even just &lt;code&gt;array.sum&lt;/code&gt;. Functional programming also tends to make heavy use of "lambda" functions, like the one used above, &lt;code&gt;x =&amp;gt; sum += x&lt;/code&gt;. This is an anonymous function (it doesn't have a name like &lt;code&gt;addToSum&lt;/code&gt;) which takes a value &lt;code&gt;x&lt;/code&gt; and adds it to the value &lt;code&gt;sum&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Declarative programming, and lambda functions, are hallmarks of functional programming, in my view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;stream processing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All of the above leads me to routinely return to the (not at all novel) metaphor of plumbing for functional programming. You put data in one end of a "processing pipeline", like water entering a pipe. It may be split into multiple streams, sent down different paths, siphoned off into some database, or dumped ultimately into some data lake, but the data moves from producers / sources (input), through flows / transformers / conductors, and into consumers / sinks.&lt;/p&gt;

&lt;p&gt;Stream processing is quite similar to reactive programming, which has a whole &lt;a href="https://www.reactivemanifesto.org/"&gt;manifesto&lt;/a&gt; and is implemented in several languages (here's one for &lt;a href="https://doc.akka.io/docs/akka/current/general/stream/stream-design.html"&gt;Scala&lt;/a&gt;, and another for &lt;a href="https://shiny.rstudio.com/articles/reactivity-overview.html"&gt;R&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Remember:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"The Internet is... a series of tubes."&lt;/em&gt;&lt;br&gt;
-- U.S. Senator Ted Stevens &lt;a href="https://en.wikipedia.org/wiki/Series_of_tubes#Partial_text_of_Stevens's_comments"&gt;[source]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;Wikipedia&lt;/a&gt; also mentions lazy evaluation and recursion, but these don't immediately jump into my mind as "pillars" of functional programming.&lt;/p&gt;

&lt;p&gt;How about you? What comes to &lt;em&gt;your&lt;/em&gt; mind when someone says "functional programming"?&lt;/p&gt;

</description>
      <category>functional</category>
      <category>haskell</category>
      <category>scala</category>
      <category>erlang</category>
    </item>
    <item>
      <title>Definitive Guide for CSS Selectors</title>
      <author>Aravind Sanjeev</author>
      <pubDate>Thu, 18 Nov 2021 19:54:26 +0000</pubDate>
      <link>https://dev.to/aravsanj/definitive-guide-for-css-selectors-368n</link>
      <guid>https://dev.to/aravsanj/definitive-guide-for-css-selectors-368n</guid>
      <description>&lt;p&gt;A selector in CSS does what its name says it would do - select stuff. To apply CSS to an element or a group of elements, we need to select them first. However, things aren't that easy as selection process can become complicated as the code grows. CSS offers a multitude of ways to deal with the issue. In this post, I aim to cover everything you need to know about CSS selectors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-css-rule"&gt;
  &lt;/a&gt;
  1. CSS Rule
&lt;/h2&gt;

&lt;p&gt;When CSS is applied to an element, it is called a CSS rule. Because it's a rule that the element has to follow. Every CSS rule must consist of at least 4 parts - selector, declaration, property, and value.&lt;/p&gt;

&lt;p&gt;The below image shows the anatomy of a CSS rule.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pHXxjT0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggqhcil9hlrq0bzgen9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pHXxjT0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggqhcil9hlrq0bzgen9w.png" alt="CSS Anatomy" width="700" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it contains all the 4 parts - selector, declaration, property, and value. We will discuss each in the coming sections.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-selectors"&gt;
  &lt;/a&gt;
  1.1 Selectors
&lt;/h3&gt;

&lt;p&gt;A selector is used to select an element or a group of elements to apply CSS rules. In the above example, we used a &lt;em&gt;class selector&lt;/em&gt;. It selects every element having the class &lt;code&gt;container&lt;/code&gt;. Since CSS selectors are the main subject of this post, we will take a deep dive into understanding them later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-declaration"&gt;
  &lt;/a&gt;
  1.2 Declaration
&lt;/h3&gt;

&lt;p&gt;A declaration is the rule the selected element has to obey. In the above example, we are telling element containing class &lt;code&gt;container&lt;/code&gt; that it can only have a maximum width of 1000px.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-property"&gt;
  &lt;/a&gt;
  1.3 Property
&lt;/h3&gt;

&lt;p&gt;While CSS selectors determine which element to target, a CSS property determines what to target in that element. The &lt;code&gt;max-width&lt;/code&gt; property shown above determines the maximum width of that element. CSS has well over 500 properties. &lt;a href="https://www.w3.org/Style/CSS/all-properties.en.html"&gt;Here&lt;/a&gt; is a list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-value"&gt;
  &lt;/a&gt;
  1.4 Value
&lt;/h3&gt;

&lt;p&gt;Value is the most obvious to explain. In the above example, the value is 1000px. The type of value depends on the property being used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-simple-selectors"&gt;
  &lt;/a&gt;
  2. Simple selectors
&lt;/h2&gt;

&lt;p&gt;Simple selectors are - well, simple. They are easy to use and the target is obvious. Simple selectors include universal selector, type selector, class selector, and the ID selector.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-universal-selector"&gt;
  &lt;/a&gt;
  2.1 Universal selector
&lt;/h3&gt;

&lt;p&gt;A universal selector is used to select every element. We can use universal selector to apply rules to every element on the page. Asterisk &lt;code&gt;*&lt;/code&gt; is the universal selector in CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, text of every element is applied the color red.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-type-selector"&gt;
  &lt;/a&gt;
  2.2 Type selector
&lt;/h3&gt;

&lt;p&gt;A type selector is used to select all elements of the same type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, every pargraph element is selected and font size 20 px is applied.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#23-class-selector"&gt;
  &lt;/a&gt;
  2.3 Class selector
&lt;/h3&gt;

&lt;p&gt;A class selector selects all elements having a particular class. We already saw the class selector above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;max-wdith&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember, multiple elements can have the same class. So the class selector is the ideal way to apply CSS rules to a group of elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#24-id-selector"&gt;
  &lt;/a&gt;
  2.4 ID selector
&lt;/h3&gt;

&lt;p&gt;An ID selector is used to select an element by ID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS rule is applied to an element having ID &lt;code&gt;content&lt;/code&gt;. We typically don't use IDs for CSS because only a single element can have an ID. Normally IDs are reserved for DOM manipulation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-pseudo-selectors"&gt;
  &lt;/a&gt;
  3. Pseudo selectors
&lt;/h2&gt;

&lt;p&gt;There are two types of pseudo selectors in CSS, pseudo-class selector and pseudo-element selector.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-pseudo-classes"&gt;
  &lt;/a&gt;
  3.1 Pseudo classes
&lt;/h3&gt;

&lt;p&gt;A pseudo-class represents a particular state of an HTML element. An example would be a mouse hover. We can target that using &lt;code&gt;:hover&lt;/code&gt; pseudo class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS will make text of every anchor &lt;code&gt;a&lt;/code&gt; element show underline while being hovered. A pseudo class is target by using the &lt;code&gt;:&lt;/code&gt; symbol followed by the class name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-pseudo-elements"&gt;
  &lt;/a&gt;
  3.2 Pseudo elements
&lt;/h3&gt;

&lt;p&gt;A pseudo-element is used to style a part of an element. For example, the first letter of a pragraph.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS makes first letter of every paragraph red. A pseudo-element is targeted using the &lt;code&gt;::&lt;/code&gt; symbol followed by the element name.&lt;/p&gt;

&lt;p&gt;Originally both pseudo classes and elements had &lt;code&gt;:&lt;/code&gt; symbol. However since CSS3, pseudo elements starts with &lt;code&gt;::&lt;/code&gt;. To ensure backward compatibility, old syntax is still working for pseudo elements introduced before CSS3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-selections-using-attribute"&gt;
  &lt;/a&gt;
  4. Selections using attribute
&lt;/h2&gt;

&lt;p&gt;We can also select elements using specifc HTML attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;content-type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'main'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS will target elements having attribute &lt;code&gt;content-type&lt;/code&gt; with value &lt;code&gt;main&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;content-type=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is a paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can drop the value part and target all the elements having a specfic attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;content-type&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every element with attribute &lt;code&gt;content-type&lt;/code&gt; will now be selected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-complex-selectors"&gt;
  &lt;/a&gt;
  5. Complex selectors
&lt;/h2&gt;

&lt;p&gt;Complex selectors are used for more specific targets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#51-concept-of-combinators"&gt;
  &lt;/a&gt;
  5.1 Concept of combinators
&lt;/h3&gt;

&lt;p&gt;A combinator is used to combine selections. For example, simple space is used to select every child of a parent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt; &lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;article&lt;/code&gt; is the parent and &lt;code&gt;p&lt;/code&gt; is the child. Every paragraph element that comes under an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag will now have grey text. Hence space is called a &lt;em&gt;descendant combinator&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Note: Combinators only work from parent to child. It can never work vice versa. It's called &lt;em&gt;cascading&lt;/em&gt; style sheets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#52-descendant-combinator"&gt;
  &lt;/a&gt;
  5.2 Descendant combinator
&lt;/h3&gt;

&lt;p&gt;You already saw the descedant combinator and chances are you've already used them. We can combine multiple descedant combinator operations to acheive specificity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here paragraphs inside &lt;code&gt;article&lt;/code&gt; and &lt;code&gt;section&lt;/code&gt; tag inside the &lt;code&gt;main&lt;/code&gt; class will have blue color. Every other pargraphs will have red color. This concept of specificity is ingrained into CSS. It is very important to be as specific about your target to future-proof the code. You don't want a random element to have a weird styling and try to find the problem in a large style sheet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#53-next-sibling-combinator"&gt;
  &lt;/a&gt;
  5.3 Next sibling combinator
&lt;/h3&gt;

&lt;p&gt;The next sibling combinator is used to select a element that comes after a specific element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, any &lt;code&gt;section&lt;/code&gt; element that comes after the &lt;code&gt;img&lt;/code&gt; tag is selected and 20px margin is added.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#54-general-sibling-combinator"&gt;
  &lt;/a&gt;
  5.4 General sibling combinator
&lt;/h3&gt;

&lt;p&gt;A general sibling combinator will select all elements that comes after a specific element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.thumb&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, all image tags that comes after the element containing class &lt;code&gt;.thumb&lt;/code&gt; will be selected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#55-child-combinator"&gt;
  &lt;/a&gt;
  5.5 Child combinator
&lt;/h3&gt;

&lt;p&gt;Child combinator selects all elements that are children of a specific element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above CSS, all paragraph elements that comes under the div element is selected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-grouping-selectors"&gt;
  &lt;/a&gt;
  6. Grouping selectors
&lt;/h2&gt;

&lt;p&gt;We can easily group selectors using commas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* css rules */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we can select all elements that need the same CSS and only apply them once.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The JavaScript event loop execution order, summarized in a simple manner</title>
      <author>Leonard Ginters</author>
      <pubDate>Thu, 18 Nov 2021 19:50:08 +0000</pubDate>
      <link>https://dev.to/leonard/the-javascript-event-loop-execution-order-simplified-5ah1</link>
      <guid>https://dev.to/leonard/the-javascript-event-loop-execution-order-simplified-5ah1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-simplified-order"&gt;
  &lt;/a&gt;
  The simplified order
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Everything in sync&lt;/li&gt;
&lt;li&gt;Microtask queue&lt;/li&gt;
&lt;li&gt;Task queue&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tasks"&gt;
  &lt;/a&gt;
  Tasks
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt;, &lt;code&gt;setImmediate&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microtasks"&gt;
  &lt;/a&gt;
  Microtasks
&lt;/h3&gt;

&lt;p&gt;Promises, &lt;code&gt;queueMicrotask&lt;/code&gt;, &lt;code&gt;MutationObserver&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Schedules a new microtask&lt;/span&gt;
&lt;span class="nx"&gt;queueMicrotask&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;microtask&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Schedules a new task&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;task&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Output order: main, microtask, task&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Please note that this describes a really, really simplified perfect-world case. If you would like to find out more about this topic, I can highly recommend &lt;a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"&gt;Jake Archibald's article&lt;/a&gt; on this topic.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>No More Contacting Employees Off Hours in Portugal, Trojan Source Attacks, Another Apple Settlement, &amp; more on DevNews!</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 18 Nov 2021 19:48:21 +0000</pubDate>
      <link>https://dev.to/devteam/no-more-contacting-employees-off-hours-in-portugal-trojan-source-attacks-another-apple-settlement-more-on-devnews-59i1</link>
      <guid>https://dev.to/devteam/no-more-contacting-employees-off-hours-in-portugal-trojan-source-attacks-another-apple-settlement-more-on-devnews-59i1</guid>
      <description>&lt;p&gt;The DevNews editorial team is back for this week's episode of our show where we investigate and discuss the latest and most important software developer news stories&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E4 - Trojan Source Attacks, Features in .NET 6, Another Apple Settlement, and No More Contacting Employees Off Hours...At Least in Portugal&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal"&gt;
      &lt;img id="episode-profile-image" alt="S6:E4 - Trojan Source Attacks, Features in .NET 6, Another Apple Settlement, and No More Contacting Employees Off Hours...At Least in Portugal" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guests:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://twitter.com/@_NickBoucher"&gt;Nicholas Boucher&lt;/a&gt; is a PhD Candidate at the University of Cambridge and a graduate of Harvard University. He performs research on the security of systems ranging from machine learning pipelines to compilers. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/captainsafia"&gt;Safia Abdalla&lt;/a&gt; helps build open source web frameworks at Microsoft and helps build the Nteract Solutions universe.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__user ltag__user__id__37984"&gt;
  
    .ltag__user__id__37984 .follow-action-button {
      background-color: #3498DB !important;
      color: #FFFFFF !important;
      border-color: #3498DB !important;
    }
  
    &lt;a href="/captainsafia" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SdWxbhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZuYLEVYS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/37984/46b8bf0f-9fb1-4e3b-bd68-3590ea5737b4.jpeg" alt="captainsafia image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/captainsafia"&gt;Safia Abdalla&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/captainsafia"&gt;I make open source at @nteractio, make software at 
@Microsoft, and write books and blogs. Dream big and follow through even bigger.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;In this episode, we talk about a new Apple settlement and a big win for workers in Portugal. Then we speak with Nicholas Boucher, PhD candidate at the University of Cambridge about new research into something they are calling a “Trojan Source” attack. And finally, we chat with Safia Abdalla, senior software engineer at Microsoft about new updates and features in the recently released .NET 6.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;— or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/devnews/id1525581923"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/1YVbyTFMCLLuORSISOjxlK"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzQ0?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjYtvSU1qL0AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal-88390107"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews/s6e4-trojan-source-attacks-cA3UO4y-Tgj/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/231"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Our Season 6 sponsors: &lt;a href="https://www.hackatom.org/"&gt;Cosmos HackAtom&lt;/a&gt; &amp;amp; &lt;a href="https://www.microsoft.com/en-us/dev-community/Event/Register?eventId=DevNewsPodcast_FI2YKJLHvJdZ&amp;amp;ocid=aid3038582"&gt;Microsoft Azure&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy the show this week! 📰 &lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Highlight the Youtube URL</title>
      <author>Kien Nguyen Chi</author>
      <pubDate>Thu, 18 Nov 2021 19:44:13 +0000</pubDate>
      <link>https://dev.to/kiennguyenchi/highlight-the-link-for-react-app-a1c</link>
      <guid>https://dev.to/kiennguyenchi/highlight-the-link-for-react-app-a1c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This week, I work on an issue on a really large project. It is a JavaScript platform that implement a website for developers to publish blogs related to web development. You can take a look at the &lt;a href="https://github.com/Planet-NULLCAST/curriculum"&gt;GitHub Repo&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h1&gt;

&lt;p&gt;I work on an existing &lt;a href="https://github.com/Planet-NULLCAST/curriculum/issues/462"&gt;Issue&lt;/a&gt; filed by an owner. It is about Highlighting of the Youtube video url in the Blog Preview. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#process"&gt;
  &lt;/a&gt;
  Process
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;First, I added &lt;em&gt;HightlightedLink&lt;/em&gt; element in the page returning. This element will process the preview post text in &lt;em&gt;props.posts&lt;/em&gt; to hightlight Youtube Link.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        &amp;lt;HighlightedLink
          text = {props.posts}
        /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Second, after getting text into &lt;em&gt;HightlightedLink&lt;/em&gt; element. I splitted the text by wherever has the youtube link.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    var regexLink = new RegExp(`(${"^(https://www.youtube.com/).* $"})`, "gi");
    var textParts = text.split(regexLink);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Third, if there are youtube link. I added style attribute for span tag to color the link with blue. The other text would be put into a span tag with default black color.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      return (
        textParts.filter(String).map((part) =&amp;gt; {
            return regexLink.test(part) ? (
              &amp;lt;span style="color:blue;"&amp;gt;{part}&amp;lt;/span&amp;gt;
            ) : (
              &amp;lt;span&amp;gt;{part}&amp;lt;/span&amp;gt;
            );
          })
      );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Otherwise, if there are no youtube link, I would return the whole text in a span tag.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return &amp;lt;span&amp;gt;{text}&amp;lt;/span&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;It is interesting to work in a huge project like this, although you would fix just a small part of it.&lt;/p&gt;

&lt;p&gt;Take a look at my &lt;a href="https://github.com/Planet-NULLCAST/curriculum/pull/499"&gt;pull request&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>angularday report</title>
      <author>Radovan Racak</author>
      <pubDate>Thu, 18 Nov 2021 19:40:39 +0000</pubDate>
      <link>https://dev.to/vanrado/angularday-report-1nfh</link>
      <guid>https://dev.to/vanrado/angularday-report-1nfh</guid>
      <description>&lt;p&gt;November 2021, seems that pandemic situation is still not getting better but on the other hand several frontend or javascript focused conferences provide online attendance. So, why not visit the Italian one and meet several known and impressive people from the dev community :-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angularday"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/angularday"&gt;AngularDay&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This Italian Angular international conference was organized by &lt;a href="https://twitter.com/grusp"&gt;GrUSP community&lt;/a&gt; on November 12th 2021. The event happened online, on &lt;a href="https://hopin.com/"&gt;Hopin&lt;/a&gt; easy-to-use web platform for conferences.&lt;/p&gt;

&lt;p&gt;There were various known speakers from the Angular community and also the official Angular Core Team joined (&lt;a href="https://twitter.com/twerske"&gt;Emma Twersky&lt;/a&gt;, &lt;a href="https://twitter.com/marktechson"&gt;Mark Thompson&lt;/a&gt;, &lt;a href="https://twitter.com/@thepunderwoman"&gt;Jessica Janiuk&lt;/a&gt;) in the last part.&lt;/p&gt;

&lt;p&gt;The atmosphere of the conference was easy going and was moderated by &lt;a href="https://twitter.com/giuliatosato"&gt;Giulia Tosato&lt;/a&gt;, &lt;a href="https://twitter.com/tomastrajan"&gt;Tomas Trajan&lt;/a&gt; and also &lt;a href="https://twitter.com/ladyleet"&gt;Tracy Lee&lt;/a&gt; joined in the last part.&lt;/p&gt;

&lt;p&gt;I decided to highlight the top points per talk which impressed me and I’ll briefly explain why.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#state-of-angular-maxim-salnikov"&gt;
  &lt;/a&gt;
  State of Angular, &lt;a href="https://twitter.com/webmaxru"&gt;Maxim Salnikov&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Maxim talked about the current status and future roadmap of the Angular framework. He summarized highlights of the improvements in &lt;a href="https://blog.angular.io/angular-v13-is-now-available-cce66f7bc296"&gt;Angular v13 that was released on November 5th 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The top improvements which impressed me were following topics:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ivy-everywhere"&gt;
  &lt;/a&gt;
  “Ivy Everywhere”
&lt;/h3&gt;

&lt;p&gt;View Engine renderer is no longer available. In the case of our project, it means faster compilation and eventually faster builds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-api-updates"&gt;
  &lt;/a&gt;
  Component API updates
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Better forms - Enable/disable validators dynamically (maxlength example)&lt;/li&gt;
&lt;li&gt;Simpler API for creating dynamic components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#end-of-ie11-support"&gt;
  &lt;/a&gt;
  End of IE11 support
&lt;/h3&gt;

&lt;p&gt;Solution for old school clients would be to run MS Edge and set IE11 mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angular-cli-improvements"&gt;
  &lt;/a&gt;
  Angular CLI improvements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Big improvement in build cache - basically faster builds&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-4.html"&gt;Typescript v4.4 support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rxjs.dev/6-to-7-change-summary"&gt;RxJS 7.4 support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automatic cleanup with Testbed - we can expect faster, less memory intensive and more optimized tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#whats-next-topic"&gt;
  &lt;/a&gt;
  What’s next topic
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular/discussions/43784"&gt;Standalone components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Strongly typed forms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.angular.io/angular-v13-is-now-available-cce66f7bc296"&gt;Angular v13 is now Available&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nosql-data-modeling-for-fe-developers-stanimira-vlaeva"&gt;
  &lt;/a&gt;
  NoSQL Data Modeling for FE Developers, &lt;a href="https://twitter.com/StanimiraVlaeva"&gt;Stanimira Vlaeva&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This topic was mostly about data modeling in the context of MongoDB, a NoSQL document database. That was quite a different topic from Front-end, but for someone who is also interested in server side technologies that could be also beneficial. &lt;/p&gt;

&lt;p&gt;While this topic had nothing to do with front-end I would highlight following points which impressed me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NoSQL document database approach in general, which is non-relational nor tabular

&lt;ul&gt;
&lt;li&gt;no tables, different data model from relational DB approach&lt;/li&gt;
&lt;li&gt;Documents - js or json object. Additional types in json, schema is flexible, every doc has own schema&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;When to use Referencing and when Embedding - pros and cons&lt;/li&gt;
&lt;li&gt;Managing duplication and staleness with batch updates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-smart-angular-apps-using-azure-computer-vision-ankit-sharma"&gt;
  &lt;/a&gt;
  Create Smart Angular Apps Using Azure Computer Vision - &lt;a href="https://twitter.com/ankitsharma_007"&gt;Ankit Sharma&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Very interesting topic about integration of &lt;a href="https://azure.microsoft.com/en-us/services/cognitive-services/computer-vision/"&gt;Microsoft Cognitive Services Computer Vision APIs&lt;/a&gt; with Angular app. While there was no talk about some specific Angular techniques, this speech showed how easy it could be to implement a text recognition feature by using easy-to-use services provided by Azure Cloud. I was impressed. Now I am familiar with following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Computer Vision, OCR API, Image Analysis API, Spatial Analysis&lt;/li&gt;
&lt;li&gt;How to set up easily Smart Angular app that has ability to recognize text from pictures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/smart-angular-app"&gt;Smart Angular app Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ankitsharmablogs.com"&gt;Ankit Sharma Blog&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#betterer-incremental-improvement-craig-spence"&gt;
  &lt;/a&gt;
  Betterer: Incremental Improvement, &lt;a href="https://twitter.com/phenomnominal"&gt;Craig Spence&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Craig spoke about something that was completely new for me. And that was a tool called Betterer. Wow wow I was so fascinated how he explained topics like Genetic Algorithms, Evolutionary Architecture, which inspired Betterer to make incremental improvement to our codebases easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;Betterer&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s basically a test runner that is similar to Jest or Mocha. But output from Betterer tells you if your new implementation made the codebase/workspace better, worse or  of whether this state is the same in comparison with the stored state in your main branch.&lt;/p&gt;

&lt;p&gt;That tool enables you to lock the quality of your codebase and what you can do is to go just in one direction and move closer towards a better solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GWFot_Ry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x23mzpje45dippqs9wtq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWFot_Ry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x23mzpje45dippqs9wtq.png" alt="Betterer" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Betterer possible use cases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The typical use case would be when you want to introduce some stricter rule to your codebase - for example migrate JS to TS, replacement of an old component with a new component or just check if the number of eslint warnings is not increasing.&lt;/p&gt;

&lt;p&gt;So if you’ve introduced new errors/warnings that are bad and it will throw an error, if you’ve fixed some it keeps letting you fix them until eventually there are none.&lt;/p&gt;

&lt;p&gt;Betterer comes with many built-in tests, and of course &lt;a href="https://phenomnomnominal.github.io/betterer/docs/angular-test"&gt;Angular tests&lt;/a&gt; are supported, let's check &lt;a href="https://phenomnomnominal.github.io/betterer/docs"&gt;others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=BCdDEhNWpUU&amp;amp;ab_channel=AngularNation"&gt;Meetup with Craig at AngularNation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;Betterer site&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-best-way-to-architect-your-angular-libraries-tomas-trajan"&gt;
  &lt;/a&gt;
  The best way to Architect Your Angular Libraries, &lt;a href="https://twitter.com/tomastrajan"&gt;Tomas Trajan&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Very helpful and useful tips from Tomas about this topic. Great live coding, during which he demonstrated how useful &lt;a href="https://material.angular.io/guide/schematics"&gt;Angular Schematics&lt;/a&gt; are and how it could generate output without writing any code. He focused by showing an example of how to architect the library and how to get the smallest possible bundle size by avoiding specific mistakes.&lt;/p&gt;

&lt;p&gt;Everything is well described in the &lt;a href="https://www.youtube.com/watch?v=2vHJ3_Om_gU"&gt;youtube video&lt;/a&gt; or in his &lt;a href="https://tomastrajan.medium.com/the-best-way-to-architect-your-angular-libraries-87959301d3d3"&gt;article&lt;/a&gt; about this topic. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CommonJS dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tomas showed how CommonJS dependencies in our library module could affect our final bundle size. In specific cases Ivy just doesn’t know if it should tree-shake it, even though it has not been consumed in our code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Destroying code splitting in lazy loaded modules&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There was an example of how easily we can break code splitting of our lazy loaded modules. The library module that was consumed just in the lazy loaded module finally landed in main.js file. It is described in this &lt;a href="https://tomastrajan.medium.com/the-best-way-to-architect-your-angular-libraries-87959301d3d3#0b90"&gt;scenario&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using &lt;a href="https://tomastrajan.medium.com/the-best-way-to-architect-your-angular-libraries-87959301d3d3"&gt;Sub-Entries architecture&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This technique solves the problem with code splitting of used library modules across our lazy loaded modules. Then everything is tree-shaken properly even though we use CommonJS dependencies in our library modules.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2vHJ3_Om_gU"&gt;Tomas Trajan - The Best Way To Architect Your Angular Libraries&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tomastrajan.medium.com/"&gt;Tomas Trajan Medium - Angular In depth articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tomastrajan.medium.com/the-best-way-to-architect-your-angular-libraries-87959301d3d3"&gt;The Best Way To Architect Your Angular Libraries&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#destructuring-frontend-monoliths-with-micro-frontends-trishul-goel"&gt;
  &lt;/a&gt;
  Destructuring frontend monoliths with Micro Frontends, &lt;a href="https://twitter.com/trishulgoel"&gt;Trishul Goel&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Trishul explained the general architecture behind Micro Frontends. That tells you how a common enterprise app monolith can be broken into smaller micro front-end parts. He showed an example in Angular which uses the Module federation approach.&lt;/p&gt;

&lt;p&gt;I summarized the basic concepts of it in the following points.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AppShell&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;load and serve the specific Micro Frontend, for example loading the home page micro front-end&lt;/li&gt;
&lt;li&gt;can encapsulate header, footer, global config or shared business logic which could be shared among Micro Frontends&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Communication&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How the communication is handled between Micro Frontends and AppShell will rely on your tech stack. It will be easy in Angular with Angular cases, but worse in Angular using other frameworks. We can communicate by the following techniques&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;passing data as an argument of the function&lt;/li&gt;
&lt;li&gt;as a route parameter or pass the function and data as an argument of the module&lt;/li&gt;
&lt;li&gt;custom DOM events&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.angulararchitects.io/en/aktuelles/the-microfrontend-revolution-part-2-module-federation-with-angular/"&gt;Module federation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Webpack 5 feature allows you to reference remote modules which are not available or known to the compiler at the compile time. These modules are known only at the run time. Let’s say that we can split our architecture and our AppShell module will encapsulate some remote Micro Frontend modules, then the deployment of them is decoupled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular side&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have to set the host and remote module federation configuration file (each per remote). It is done via &lt;a href="https://webpack.js.org/plugins/module-federation-plugin/"&gt;ModuleFederationPlugin&lt;/a&gt;. Where we say which dependencies will be used from the host, what should be shared between remotes and also remotes references.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/tenpureto/tenpureto"&gt;Tenpureto&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As each individual Micro Frontend has its own setup, Trishul’s team uses Tenpureto templating engine for initializing new Micro Frontend. Whenever they need a new Micro Frontend it wraps up a new repository according to the specified template with all settings and scripts.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=nBqUCkQHJu0"&gt;Destructuring frontend monoliths with Microfrontends - By Trishul Goel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tenpureto/tenpureto"&gt;Tenpureto&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-needs-inheritance-and-composition-when-you-can-copy-paste-the-same-code-in-every-class-kate-sky"&gt;
  &lt;/a&gt;
  Who needs Inheritance and composition, when you can copy paste the same code in every class!, &lt;a href="https://twitter.com/KateSky8"&gt;Kate Sky&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This talk focused on identifying&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when to use composition&lt;/li&gt;
&lt;li&gt;how to apply Decorator Pattern&lt;/li&gt;
&lt;li&gt;how to take dynamic behavior of the components and refactor them into directives&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kate emphasized that custom directives are another way of refactoring things out of our components. And this idea is based basically on Angular code in itself, wherever the Decorator Pattern can be used.&lt;/p&gt;

&lt;p&gt;The goals of these concepts are to make our Angular code&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;well-organized and maintainable&lt;/li&gt;
&lt;li&gt;cleaner, easier to change and easier to read&lt;/li&gt;
&lt;li&gt;with great design that minimizes the duplication of code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/katesky/angular-day-it"&gt;AngularDay demo app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=50ALR6JRNrk"&gt;AngularAir - Using composition over inheritance in building Angular Components with Kate Sky&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;… aaaand summary. As I gather my impressions and learnings from that conference, the best talks, from my perspective were &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maxim Salnikov where he clearly explained what's new and where it goes&lt;/li&gt;
&lt;li&gt;Tomas Trajan, that cool guy who always does live coding and so far was the only participant to try that during a conference. So I appreciate his courage, despite that he had some connection problems. That was a really beneficial introduction to sub-entries architecture in the angular libraries. I will head straight for that in future&lt;/li&gt;
&lt;li&gt;Craig Spence - the creator of Betterer. It's amazing what this guy has done for the whole community. This tool is worth consideration in every project. It tries to solve problems of Angular projects (at least from my experience). Betterer has so much potential&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Create a React App (Video)</title>
      <author>Saleh Mubashar</author>
      <pubDate>Thu, 18 Nov 2021 19:29:55 +0000</pubDate>
      <link>https://dev.to/salehmubashar/create-a-react-app-video-4fcj</link>
      <guid>https://dev.to/salehmubashar/create-a-react-app-video-4fcj</guid>
      <description>&lt;p&gt;Hi guys!&lt;/p&gt;

&lt;p&gt;Ok so in many of my tutorials related to react JS, I have not mentioned how to get started with React JS or how to create a react app.&lt;br&gt;
If you want to learn how to create an application in react js and follow along with my tutorials you can watch the below video in which I tell step-by-step how to create a react app and the commands needed.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zLiMsF0UlpI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commands-used-in-terminal"&gt;
  &lt;/a&gt;
  Commands Used in terminal
&lt;/h3&gt;

&lt;p&gt;These are the commands I used in the VS code terminal in the video. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new app (replace appname with any name but make sure it is letters only and does not begin with uppercase)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app appname
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Change directory
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd directoryname
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open your app or run it in the browser.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;I hope you all found the video useful.&lt;br&gt;
Check out my other &lt;a href="https://discover.hubpages.com/technology/useRef"&gt;tutorials&lt;/a&gt; on &lt;a href="https://hubpages.com/@salehmubashar"&gt;hubpages&lt;/a&gt;.&lt;br&gt;
Also follow me on &lt;a href="https://twitter.com/SyntaxE85827144"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Like my work? Buy me a coffee!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/salehmubashar"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until next time,&lt;br&gt;
Cheers :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
  </channel>
</rss>
