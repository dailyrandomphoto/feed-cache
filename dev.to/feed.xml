<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Communicating your Vision</title>
      <author>Curious Web Addicts</author>
      <pubDate>Mon, 20 Dec 2021 15:29:51 +0000</pubDate>
      <link>https://dev.to/curious_web_addicts/communicating-your-vision-gfg</link>
      <guid>https://dev.to/curious_web_addicts/communicating-your-vision-gfg</guid>
      <description>&lt;p&gt;In the previous article of this series we talked about developing a company vision and we defined three key questions that can guide us in this process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why does the company exist?&lt;/li&gt;
&lt;li&gt;What identifies the success of our work?&lt;/li&gt;
&lt;li&gt;How should we act to ensure success?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we will focus on another important aspect of being an effective leader: &lt;em&gt;communication&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communicating-your-vision"&gt;
  &lt;/a&gt;
  Communicating your Vision
&lt;/h3&gt;

&lt;p&gt;In order to clearly communicate a vision and inspire the team, we can use a simple 7-steps checklist:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Refer to core values&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use the power of storytelling&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;*&lt;em&gt;Use rhetorical questions *&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use the Rule of Three&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Express moral conviction&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use inclusive language&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;*&lt;em&gt;Repeat! *&lt;/em&gt; &lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;🔷 &lt;strong&gt;Step 1: Refer to core values&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When communicating your vision, refers to the same fundamental values that guided you in developing that vision. Ask yourself: &lt;em&gt;What are the values you want to communicate?.&lt;/em&gt; Once you defined this, move to next step.&lt;/p&gt;

&lt;p&gt;🔷 &lt;strong&gt;Step 2: Use the power of storytelling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a list of core values we want to convey, imagine you are on stage as you tell your audience: "We want to be bold! We want to be honest!".&lt;br&gt;
Not really effective, right? I could almost say boring.&lt;/p&gt;

&lt;p&gt;To be effective, you must convey the meaning of the core values in a way that is compelling to your audience. This is where storytelling comes in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Communication in the form of stories will generate a stronger reaction when compared to a passive list of data. It influences not only the mind but the heart as well by engaging emotionally and personally with the listeners (2)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A good story is something a person can relate to. &lt;/p&gt;

&lt;p&gt;To create a good story ask yourself: &lt;em&gt;What do I want my audience to learn from my story?&lt;/em&gt;. You don't have to use your own personal experience. If you relate the story in general terms, you can use something you read, saw or heard and then share it with your audience. If it is a particular story that someone else related, then give that person recognition. (3)&lt;/p&gt;

&lt;p&gt;Once you have your story, enrich it with anecdotes, metaphors and analogies that resonate with your audience.&lt;/p&gt;

&lt;p&gt;🔷 &lt;strong&gt;Step 3: Use rhetorical questions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is a nice article, isn't it?&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Rhetorical questions can be used as an effective communication tool during a speech. They are especially useful in engaging the audience and persuading them to agree with you. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To &lt;strong&gt;engage the audience&lt;/strong&gt;, use a rhetorical question that force them to think about an answer. (4)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, to convey a message in the form of "Doing X can be useful for Y", a better approach could be "Why doing X can be beneficial for Y?".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To &lt;strong&gt;persuade the audience&lt;/strong&gt;, use a rhetorical question where the answer is clearly "yes". Once the audience begins agreeing with you, they are more likely to continue agreeing. (4)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That was the purpose of my question at the begging of this paragraph 😜.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also try to predict your audience questions and then use them as rhetorical questions in your speech. (4)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, you can say something like: "As a team/person/astronaut you may think: what should I do for solving...?". &lt;/p&gt;

&lt;p&gt;🔷 &lt;strong&gt;Step 4: Use the Rule of Three&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you paid attention during the most popular speeches, there is an high change you heard the speaker saying something like: "Here are the three things I'm going to tell you".&lt;/p&gt;

&lt;p&gt;The Rule of Three is a very powerful technique that allows people to remember the message you are trying to convey.  In fact, it's pretty popular in slogans and catchphrases. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Liberté, égalité, fraternité!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ideas that are presented in threes seem to be more easier to remember, more persuasive and enjoyable. So, next time you need to deliver an important message, divide it into three parts!&lt;/p&gt;

&lt;p&gt;🔷 &lt;strong&gt;Step 5: Express moral conviction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Moral conviction is the subjective belief that something is fundamentally right or wrong. (5)&lt;/p&gt;

&lt;p&gt;We can take advantage of your audience's moral beliefs by reminding them: &lt;em&gt;Why do we ultimately do what we do? Why does it matter?  Who are we benefiting through our work?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The more you can clearly communicate to your audience the moral reasons behind your vision, the more they will be willing to embrace it.&lt;/p&gt;

&lt;p&gt;🔷 &lt;strong&gt;Step 6: Use inclusive language&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are trying to engage your audience, you want definitively avoid using words like &lt;em&gt;I want, I see, I expect...&lt;/em&gt; . &lt;/p&gt;

&lt;p&gt;Instead, what you should do is using the so-called &lt;em&gt;inclusive language&lt;/em&gt; : &lt;em&gt;we want, we will accomplish, our team...&lt;/em&gt; .&lt;/p&gt;

&lt;p&gt;Inclusive language is respectful and promotes the acceptance and value of all people. (6) When used, is shows a positive effects on people and make them feel included, valued, empowered and part of the vision that you ultimately are trying to create. &lt;/p&gt;

&lt;p&gt;🔷 &lt;strong&gt;Step 7: Repeat!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And finally, don't forget to repeat the key points of your vision!&lt;/p&gt;

&lt;p&gt;Repetition is important because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Helps to emphasize a point and make a speech easier to follow.&lt;/li&gt;
&lt;li&gt;It leverage the power of persuasion. In fact, studies show that repetition of a phrase can convince people of its truth. (7)&lt;/li&gt;
&lt;li&gt; Is an opportunity to reinforce the message that you are trying to convey.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t use Repetition more than 5-6 times. A moderate to low levels of repetition can serve as a great persuasive tactic, but when it is used more than that it serves the opposite purpose. Studies prove that the audience seems to disagree with arguments when repetition is used excessively. (8)&lt;/p&gt;

&lt;p&gt;So, repeat your vision multiple times, any time you have the opportunity to communicate it to your team.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow this checklist if you want to improve your communication skills, but don't forget that also body language plays an important role in influencing your audience. &lt;br&gt;
Therefore, in the next article of the series we will talk about the importance of non-verbals communication. Stay tuned!&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inspiring and Motivating Individuals on Coursera.&lt;/li&gt;
&lt;li&gt;How top companies use storytelling to drive results &lt;a href="https://www.insidehr.com.au/how-top-companies-use-storytelling-to-drive-results/"&gt;https://www.insidehr.com.au/how-top-companies-use-storytelling-to-drive-results/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Communicate Your Point Of View Through Storytelling 
&lt;a href="https://www.forbes.com/sites/forbescoachescouncil/2019/10/14/communicate-your-point-of-view-through-storytelling/?sh=44e586ba541b"&gt;https://www.forbes.com/sites/forbescoachescouncil/2019/10/14/communicate-your-point-of-view-through-storytelling/?sh=44e586ba541b&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;How to use Rhetorical Questions in your Speech
&lt;a href="https://virtualspeech.com/blog/rhetorical-questions-speech-examples"&gt;https://virtualspeech.com/blog/rhetorical-questions-speech-examples&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;In the Mind of the Perceiver: Psychological Implications of Moral Conviction by Christopher W. Bauman and Linda J. Skitka&lt;/li&gt;
&lt;li&gt;UQ Guide to using inclusive language, University of Queensland.&lt;/li&gt;
&lt;li&gt;Writing 101: What Is Repetition? 7 Types of Repetition in Writing With Examples
&lt;a href="https://www.masterclass.com/articles/writing-101-what-is-repetition-7-types-of-repetition-in-writing-with-examples"&gt;https://www.masterclass.com/articles/writing-101-what-is-repetition-7-types-of-repetition-in-writing-with-examples&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The Complete Guide To Use Repetition In Speeches by Hrideep Barot
&lt;a href="https://franticallyspeaking.com/the-complete-guide-to-use-repetition-in-speeches/"&gt;https://franticallyspeaking.com/the-complete-guide-to-use-repetition-in-speeches/&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>management</category>
      <category>leadership</category>
      <category>softskills</category>
    </item>
    <item>
      <title>Golang Tutorial for Beginners [FREE Course] 🎉</title>
      <author>Techworld with Nana</author>
      <pubDate>Mon, 20 Dec 2021 15:13:23 +0000</pubDate>
      <link>https://dev.to/techworld_with_nana/golang-tutorial-for-beginners-free-course-330</link>
      <guid>https://dev.to/techworld_with_nana/golang-tutorial-for-beginners-free-course-330</guid>
      <description>&lt;p&gt;In &lt;a href="https://youtu.be/yyUHQIec83I"&gt;this full Golang course&lt;/a&gt; you will learn about one of the youngest programming languages that is becoming more and more popular in the cloud engineering world.&lt;/p&gt;

&lt;p&gt;You will learn &lt;strong&gt;everything you need to get started with Go&lt;/strong&gt; and start using it in your projects. ✅&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-go"&gt;
  &lt;/a&gt;
  What is Go? 💡
&lt;/h1&gt;

&lt;p&gt;Go is a programming language, which was &lt;strong&gt;developed at Google in 2007&lt;/strong&gt; and open sourced in 2009. So it's a pretty young language. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The language is called Go. However, it's also commonly known as Golang. This is because the website was originally &lt;em&gt;golang.org&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now whenever you hear about a new programming language the first question you probably have is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why do we need yet another programming language? 🙄&lt;/li&gt;
&lt;li&gt;What is the purpose of it or how is it better or different from other already existing languages?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So before diving into the syntax, let's see what was the motivation behind creating the Go language?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-go-was-developed-how-its-different-from-other-programming-languages"&gt;
  &lt;/a&gt;
  Why Go was developed? How it's different from other programming languages? 🧐
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#infrastructure-changed"&gt;
  &lt;/a&gt;
  Infrastructure changed
&lt;/h3&gt;

&lt;p&gt;Well the infrastructure, where the applications were deployed changed a lot in the last few years:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multi-core processors became common &lt;/li&gt;
&lt;li&gt;and also using cloud infrastructure with hundreds or thousands of servers with multiple processors to deploy applications became pretty universal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So infrastructure became much more &lt;strong&gt;scalable, dynamic and had more capacity&lt;/strong&gt;. However, most languages couldn't help in writing applications that would take advantage of these infrastructure improvements. So basically you had applications that would just execute one task at a time in order. &lt;/p&gt;

&lt;p&gt;But with infrastructure improvements it was possible to now&lt;br&gt;
write applications that would execute tasks in parallel, do multiple things at once. This way making the application faster and more user-friendly. 🚀&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#multithreading-do-multiple-things-at-once"&gt;
  &lt;/a&gt;
  Multi-Threading - Do multiple things at once
&lt;/h3&gt;

&lt;p&gt;A simple example is, if you are using Google Drive you may be uploading or downloading files and folders, but you can keep navigating back and forth in the UI. So downloading, uploading and navigating the UI all happen &lt;strong&gt;in parallel&lt;/strong&gt;. &lt;br&gt;
So the application allows you to do multiple things at once without affecting any other task:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKRXUQeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/offl2gk3de0ub91ji3ul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKRXUQeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/offl2gk3de0ub91ji3ul.png" alt="Google Drive - work in parallel" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is a concept of multi-threading. So each thread is basically processing one task and you can have many of them running in parallel and this makes applications fast but may also cause some issues. 👀&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges
&lt;/h3&gt;

&lt;p&gt;For example on Google Docs, many users can work on the same document at the same time. So when you have two users changing and adding stuff at the same time to the same document, this should work smoothly without one user overriding all the changes that another user is making.&lt;/p&gt;

&lt;p&gt;Another example where such issues may happen, when things are processed in parallel is a booking system for buying tickets or booking a hotel etc. Let's say again two users are trying to book the last remaining ticket at the same time. Of course &lt;strong&gt;this should work in a way that no double booking happens&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And this concept is called &lt;strong&gt;concurrency&lt;/strong&gt; and needs to be handled by developers in code. So they must write code that prevents any conflicts between the tasks, when multiple tasks are running in parallel and updating the same data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qPw4B9ks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vmfpmdrpah7zpq0qbjw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qPw4B9ks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vmfpmdrpah7zpq0qbjw.png" alt="Concurrency" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#language-concurrency-support"&gt;
  &lt;/a&gt;
  Language Concurrency Support
&lt;/h3&gt;

&lt;p&gt;Many languages do have features for implementing such applications, however the code can get pretty complex and&lt;br&gt;
handling and preventing the concurrency issues can be pretty hard. And &lt;strong&gt;with complexity there is always a higher risk of human errors&lt;/strong&gt; and that's where the main purpose and difference of Go comes into the picture.&lt;/p&gt;

&lt;p&gt;So Go was designed exactly for that purpose to &lt;strong&gt;make writing multi-threaded concurrent applications that take advantage of the new performance infrastructure much easier&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QqcpZAN8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi8nb47runrnlqyizup0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QqcpZAN8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi8nb47runrnlqyizup0.png" alt="Multi-Core Concurrency Support" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will learn about this in more detail at the end of the course, when we use &lt;em&gt;goroutines&lt;/em&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MSc3eeLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n46qnc0slx6kfymf7428.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MSc3eeLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n46qnc0slx6kfymf7428.png" alt="Goroutine vs OS Threads" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#main-use-case-of-go"&gt;
  &lt;/a&gt;
  Main Use Case of Go
&lt;/h3&gt;

&lt;p&gt;So logically enough the main use case of Go or what it's best used for is writing &lt;strong&gt;applications that need to be very performant and will run on the modern scaled and distributed infrastructure&lt;/strong&gt; with hundreds and thousands of servers typically on a cloud platform. &lt;/p&gt;

&lt;p&gt;Go is used on the server side or the &lt;strong&gt;backend&lt;/strong&gt; of the applications and these types of applications can range from microservices and web applications to database services.&lt;br&gt;
And so in fact, &lt;strong&gt;many cloud technologies or technologies that run on modern cloud environments are actually written in Go&lt;/strong&gt;, like Docker 🐳, Hashicorp Vault, Kubernetes, CockroachDB and so on.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#characterstics-of-go-language"&gt;
  &lt;/a&gt;
  Characterstics of Go Language
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#compiled-language"&gt;
  &lt;/a&gt;
  Compiled Language
&lt;/h3&gt;

&lt;p&gt;Go is a &lt;strong&gt;compiled language&lt;/strong&gt; and it compiles actually very quickly into a single binary. You can deploy and run it on different platforms in a consistent way, so no matter which operating system or which environment you're using you can take that same binary and basically use it across different platforms.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#combine-ease-of-programming-with-efficiency-and-safety"&gt;
  &lt;/a&gt;
  Combine Ease of Programming with Efficiency and Safety
&lt;/h3&gt;

&lt;p&gt;For developing Go, they wanted to take the simplicity of syntax of a more high-level language, like Python and the speed and efficiency of a lower level language like C++.&lt;br&gt;
So you will see the combination of these things in Go.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EG9nHuKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z519zlj1kkrqbylls4bc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EG9nHuKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z519zlj1kkrqbylls4bc.png" alt="Go combines Python and C++" width="880" height="365"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Language features left out on purpose for simplicity 💡 The goal was that the code should be easy to maintain over time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;The simple syntax makes your code very &lt;strong&gt;maintainable, easy to read and extend&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Go applications can be &lt;strong&gt;built very fast&lt;/strong&gt;, they are also very fast in startup and also when they're running. &lt;/li&gt;
&lt;li&gt;Go is very &lt;strong&gt;resource efficient&lt;/strong&gt;, which means it uses few resources or it requires fewer resources like CPU and RAM to run.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering all these benefits of simplicity and speed and so on, Go is also becoming more and more popular for writing simple automation applications and CLI applications for DevOps and SRE tasks as well.&lt;/p&gt;



&lt;p&gt;So now that we know why Go was created and what differentiates it from other languages 👍 , let's jump right into learning the core concepts and syntax of Go.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#learn-syntax-and-concepts-while-writing-a-simple-application"&gt;
  &lt;/a&gt;
  Learn Syntax and Concepts while writing a simple application 👩‍💻
&lt;/h1&gt;

&lt;p&gt;In the tutorial, we're going to write a very simple ticket booking application to learn the basics of Go. So instead of learning the concepts and syntax of Go with isolated examples, you will learn them while building an actual application throughout the tutorial. 😎&lt;/p&gt;

&lt;p&gt;But for the demo part, let's continue with the video, so you can follow along more easily: 🤓&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yyUHQIec83I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%96%AC%E2%96%AC%E2%96%AC%E2%96%AC%E2%96%AC%E2%96%AC-course-overview-%E2%96%AC%E2%96%AC%E2%96%AC%E2%96%AC%E2%96%AC%E2%96%AC"&gt;
  &lt;/a&gt;
  ▬▬▬▬▬▬ COURSE OVERVIEW 📚  ▬▬▬▬▬▬
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#part-01-introduction-to-go"&gt;
  &lt;/a&gt;
  💎  Part 01: Introduction to Go
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;What is Go? Why Go?&lt;/li&gt;
&lt;li&gt;How it's different from other programming languages?&lt;/li&gt;
&lt;li&gt;Characteristics of Go and Go Use Cases&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#part-02-local-setup"&gt;
  &lt;/a&gt;
  💎  Part 02: Local Setup
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Install Go &amp;amp; Editor&lt;/li&gt;
&lt;li&gt;Write our First Program &amp;amp; Structure of a Go File&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#part-03-go-syntax-amp-concepts"&gt;
  &lt;/a&gt;
  💎  Part 03: Go Syntax &amp;amp; Concepts
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Variables &amp;amp; Constants in Go&lt;/li&gt;
&lt;li&gt;Formatted Output - printf &lt;/li&gt;
&lt;li&gt;Data Types in Go&lt;/li&gt;
&lt;li&gt;Getting User Input&lt;/li&gt;
&lt;li&gt;What is a Pointer?&lt;/li&gt;
&lt;li&gt;Arrays &amp;amp; Slices&lt;/li&gt;
&lt;li&gt;Loops in Go&lt;/li&gt;
&lt;li&gt;Conditionals (if / else) and Boolean Data Type&lt;/li&gt;
&lt;li&gt;Validate User Input&lt;/li&gt;
&lt;li&gt;Switch Statement&lt;/li&gt;
&lt;li&gt;Encapsulate Logic with Functions&lt;/li&gt;
&lt;li&gt;Organize Code with Go Packages&lt;/li&gt;
&lt;li&gt;Scope Rules in Go&lt;/li&gt;
&lt;li&gt;Maps&lt;/li&gt;
&lt;li&gt;Structs&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#part-04-concurrency-in-go"&gt;
  &lt;/a&gt;
  💎  Part 04: Concurrency in Go
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Goroutines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you will learn a lot in this beginner tutorial!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 😍 for more content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/techworldwithnana"&gt;Private FB group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//linkedin.com/in/nana-janashia"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Njuchi_"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA?sub_confirmation=1"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/techworld_with_nana/"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Advanced typescript for React developers - part 3</title>
      <author>Nadia Makarevich</author>
      <pubDate>Mon, 20 Dec 2021 14:46:42 +0000</pubDate>
      <link>https://dev.to/adevnadia/advanced-typescript-for-react-developers-part-3-p4j</link>
      <guid>https://dev.to/adevnadia/advanced-typescript-for-react-developers-part-3-p4j</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BKeW2pxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udt6xc4ais2ld6lehdwx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BKeW2pxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udt6xc4ais2ld6lehdwx.png" alt="Image description" width="500" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a third article in the series of “Advanced typescript for React developers”. In the previous chapters we together with ambitious developer Judi figured out how and why &lt;a href="https://www.developerway.com/posts/typescript-generics-for-react-developers"&gt;Typescript generics&lt;/a&gt; are useful for creating reusable React components, and understood such typescript concepts as &lt;a href="https://www.developerway.com/posts/advanced-typescript-for-react-developers"&gt;type guards, keyof, typeof, is, as const and indexed types&lt;/a&gt;. We did it while implementing with Judi a competitor to Amazon: an online website that has different categories of goods and the ability to select them via a select component. Now it’s time to improve the system once again, and to learn in the process what is the purpose of &lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-never-type"&gt;exhaustiveness checking&lt;/a&gt;, how the narrowing of types works and when &lt;a href="https://www.typescriptlang.org/docs/handbook/enums.html"&gt;typescript enums&lt;/a&gt; could be useful.&lt;/p&gt;

&lt;p&gt;You can see the code of the example we’re starting with in &lt;a href="https://codesandbox.io/s/immutable-wildflower-n4r8z?file=/src/tabs.tsx"&gt;this codesandbox&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exhaustiveness-checking-with-never"&gt;
  &lt;/a&gt;
  Exhaustiveness checking with never
&lt;/h2&gt;

&lt;p&gt;Let’s remember how we implemented our Tabs with categories. We have an array of strings, a &lt;code&gt;switch&lt;/code&gt; case that for every tab returns a select component, and a select component for categories themselves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ["Books", "Movies", "Laptops"] as const;
type Tabs = typeof tabs;
type Tab = Tabs[number];

const getSelect = (tab: Tab) =&amp;gt; {
  switch (tab) {
    case "Books":
      return (
        &amp;lt;GenericSelect&amp;lt;Book&amp;gt; ... /&amp;gt;
      );
    case "Movies":
      return (
        &amp;lt;GenericSelect&amp;lt;Movie&amp;gt; ... /&amp;gt;
      );
    case "Laptops":
      return (
        &amp;lt;GenericSelect&amp;lt;Laptop&amp;gt; ... /&amp;gt;
      );
  }
};

export const TabsComponent = () =&amp;gt; {
  const [tab, setTab] = useState&amp;lt;Tab&amp;gt;(tabs[0]);

  const select = getSelect(tab);

  return (
    &amp;lt;&amp;gt;
      Select category:
      &amp;lt;GenericSelect&amp;lt;Tab&amp;gt;
        onChange={(value) =&amp;gt; setTab(value)}
        values={tabs}
        formatLabel={formatLabel}
      /&amp;gt;
      {select}
    &amp;lt;/&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything is perfectly typed, so if a typo happens anywhere it will be picked up by Typescript. But is it &lt;em&gt;perfectly&lt;/em&gt; typed though? What will happen if I want to add a new category to the list: &lt;code&gt;Phones&lt;/code&gt;? Seems easy enough: I just add it to the array and to the switch statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ["Books", "Movies", "Laptops", "Phones"] as const;

const getSelect = (tab: Tab) =&amp;gt; {
  switch (tab) {
    // ...
    case "Phones":
      return (
        &amp;lt;GenericSelect&amp;lt;Phone&amp;gt; ... /&amp;gt;
      );
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in a simple implementation like this, it wouldn’t bring much trouble. But in real life more likely than not this code will be separated, abstracted away, and hidden behind layers of implementation. What will happen then if I just add Phones to the array, but forget about the switch case?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ["Books", "Movies", "Laptops", "Phones"] as const;

const getSelect = (tab: Tab) =&amp;gt; {
  switch (tab) {
    case "Books":
      // ...
    case "Movies":
      // ...
    case "Laptops":
      // ...
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this implementation - nothing good, unfortunately. Typescript will be totally fine with it, the bug might be missed during manual testing, it will go to production, and when customers select “Phones” in the menu, they won’t see anything on the screen.&lt;/p&gt;

&lt;p&gt;It doesn’t have to be like this though. When we use operators like &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt; typescript performs what is known as &lt;strong&gt;“narrowing”&lt;/strong&gt;, i.e. it reduces the available options for the union types with every statement. If, for example, we have a switch case with only “Books”, the “Books” type will be eliminated at the first &lt;code&gt;case&lt;/code&gt; statement, but the rest of them will be available later on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ["Books", "Movies", "Laptops"] as const;

// Just "Books" in the switch statement
const getSelect = (tab: Tab) =&amp;gt; {
  switch (tab) {
    case "Books":
      // tab's type is Books here, it will not be available in the next cases
      return &amp;lt;GenericSelect&amp;lt;Book&amp;gt; ... /&amp;gt;
    default:
      // at this point tab can be only "Movies" or "Laptops"
      // Books have been eliminated at the previous step
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we use all the possible values, typescript will represent the state that will never exist as &lt;code&gt;never&lt;/code&gt; type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ["Books", "Movies", "Laptops"] as const;

const getSelect = (tab: Tab) =&amp;gt; {
  switch (tab) {
    case "Books":
      // "Books" have been eliminated here
    case "Movies":
      // "Movies" have been eliminated here
    case "Laptops":
      // "Laptops" have been eliminated here
    default:
      // all the values have been eliminated in the previous steps
      // this state can never happen
      // tab will be `never` type here
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And watch the hands very carefully for this trick: in this “impossible” state you can explicitly state that tab should be &lt;code&gt;never&lt;/code&gt; type. And if for some reason it’s not &lt;em&gt;actually&lt;/em&gt; impossible (i.e. we added “Phones” to the array, but not the &lt;code&gt;switch&lt;/code&gt; - typescript will fail!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Added "Phones" here, but not in the switch
const tabs = ["Books", "Movies", "Laptops", "Phones"] as const;

// Telling typescript explicitly that we want tab to be "never" type
// When this function is called, it should be "never" and only "never"
const confirmImpossibleState = (tab: never) =&amp;gt; {
  throw new Error(`Reacing an impossible state because of ${tab}`);
};

const getSelect = (tab: Tab) =&amp;gt; {
  switch (tab) {
    case "Books":
      // "Books" have been eliminated
    case "Movies":
      // "Movies" have been eliminated
    case "Laptops":
      // "Laptops" have been eliminated
    default:
      // This should be "impossible" state,
      // but we forgot to add "Phones" as one of the cases
      // and "tab" can still be the type "Phones" at this stage.

      // Fortunately, in this function we assuming tab is always "never" type
      // But since we forgot to eliminate Phones, typescript now will fail!
      confirmImpossibleState(tab);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the implementation is perfect! Any typos will be picked up by typescript, non-existing categories will be picked up, and missed categories will be picked up as well! This trick is called &lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#exhaustiveness-checking"&gt;Exhaustiveness checking&lt;/a&gt; by the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exhaustiveness-checking-without-never"&gt;
  &lt;/a&gt;
  Exhaustiveness checking without never
&lt;/h2&gt;

&lt;p&gt;Interestingly enough, for the exhaustiveness trick to work, you don’t actually &lt;em&gt;need&lt;/em&gt; &lt;code&gt;never&lt;/code&gt; type and the “impossible” state. All you need is just to understand this process of narrowing and elimination, and how to “lock” the desired type at the last step.&lt;/p&gt;

&lt;p&gt;Remember, we had our &lt;code&gt;formatLabel&lt;/code&gt; function that we pass to the select component, that returns the desired string for the select options based on the value type?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export type DataTypes = Book | Movie | Laptop | string;

export const formatLabel = (value: DataTypes) =&amp;gt; {
  if (isBook(value)) return `${value.title}: ${value.author}`;
  if (isMovie(value)) return `${value.title}: ${value.releaseDate}`;
  if (isLaptop(value)) return value.model;

  return value;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another perfect candidate for exactly the same bug - what will happen when we add &lt;code&gt;Phone&lt;/code&gt; as one of the data types, but forget the actual check? With the current implementation - nothing good again, the Phone select options will be broken. But, if we apply the exhaustiveness knowledge to the function, we can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export type DataTypes = Book | Movie | Laptop | Phone | string;

 // When this function is called the value should be only string
 const valueShouldBeString = (value: string) =&amp;gt; value;

 const formatLabel = (value: DataTypes) =&amp;gt; {
  // we're eliminating Book type from the union here
  if (isBook(value)) return `${value.title}: ${value.author}`;

  // here value can only be Movie, Laptop, Phone or string

  // we're eliminating Movie type from the union here
  if (isMovie(value)) return `${value.title}: ${value.releaseDate}`;

  // here value can only be Laptop, Phone or string

  // we're eliminating Laptop type from the union here
  if (isLaptop(value)) return value.model;

  // here value can only be Phone or string

  // But we actually want it to be only string
  // And make typescript fail if it is not
  // So we just call this function, that explicitly assigns "string" to value

  return valueShouldBeString(value);

  // Now, if at this step not all possibilities are eliminated
  // and value can be something else other than string (like Phone in our case)
  // typescript will pick it up and fail!
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have eliminated all the possible union types except &lt;code&gt;string&lt;/code&gt;, and “locked” string in the final step. Pretty neat, huh?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/jolly-kowalevski-rx7db?file=/src/tabs.tsx"&gt;See fully working example in this codesandbox.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-code-readability-with-enums"&gt;
  &lt;/a&gt;
  Improving code readability with Enums
&lt;/h2&gt;

&lt;p&gt;Now it’s the time for the final polish of this beautiful piece of typescript art that is our categories implementation. I don’t know about you, but this part worries me a bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ["Books", "Movies", "Laptops"] as const;
type Tabs = typeof tabs;
type Tab = Tabs[number];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is nothing wrong with it &lt;em&gt;per se&lt;/em&gt;, it just slightly breaks my brain every time I’m looking at the constructs like that. It always takes one-two additional seconds to understand what &lt;em&gt;exactly&lt;/em&gt; is going on here. Fortunately, there is a way to improve it for those who suffer from the same issue. Did you know that Typescript supports &lt;a href="https://www.typescriptlang.org/docs/handbook/enums.html"&gt;enums&lt;/a&gt;? They allow defining a set of named constants. And the best part of it - those are strongly typed from the get-go, and you can literally use the same enum as type and as value &lt;strong&gt;at the same time&lt;/strong&gt;. 🤯&lt;/p&gt;

&lt;p&gt;Basically this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tabs = ["Books", "Movies", "Laptops"] as const;
type Tabs = typeof tabs;
type Tab = Tabs[number];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Could be replaced with this, which is arguably much easier and more intuitive to read:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum Tabs {
  'MOVIES' = 'Movies',
  'BOOKS' = 'Books',
  'LAPTOPS' = 'Laptops',
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, when you need to access a specific value, you’d use dot notation, just like an object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const movieTab = Tabs.MOVIES; // movieTab will be `Movies`
const bookTab = Tabs.BOOKS; // bookTab will be `Books`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And just use &lt;code&gt;Tabs&lt;/code&gt; when you want to reference the enum as a type!&lt;/p&gt;

&lt;p&gt;If we look at our tabs code, we can just replace all the Tab types with enum Tabs and all the tabs strings with enum’s values:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtKAd8bB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56zq5naz0bp2zshfoj3b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtKAd8bB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56zq5naz0bp2zshfoj3b.png" alt="Image description" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And, in the actual implementation of the Tabs component the same: replace the type, replace values, and pass to select component enum’s values in the form of an array:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dmV6uCou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6jhhs3w2zafpcqedb7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dmV6uCou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6jhhs3w2zafpcqedb7h.png" alt="Image description" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/distracted-noether-lxere?file=/src/tabs.tsx"&gt;See the full code example in this codesandbox.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfection! 😍 😎&lt;/p&gt;

&lt;p&gt;That is all for today, hope you enjoyed the reading and now feel a little bit more confident with typescript’s narrowing, exhaustiveness checking and enums. See ya next time 😉&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Originally published at &lt;a href="https://www.developerway.com"&gt;https://www.developerway.com&lt;/a&gt;. Check out the website for more articles like this. Subscribe to the newsletter to get notified as soon as the next article comes out.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Get In-app Messaging Right</title>
      <author>Christian Nwamba</author>
      <pubDate>Mon, 20 Dec 2021 14:26:56 +0000</pubDate>
      <link>https://dev.to/codebeast/how-to-get-in-app-messaging-right-3nf2</link>
      <guid>https://dev.to/codebeast/how-to-get-in-app-messaging-right-3nf2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-to-get-inapp-messaging-right"&gt;
  &lt;/a&gt;
  How to Get In-app Messaging Right
&lt;/h1&gt;

&lt;p&gt;If you build apps that rely on continuously engaging with the customer, there are chances that shipping the finished app is not enough to drive that engagement. I am sure you have been on a shopping site that offered you discounts because you added a product to cart.&lt;/p&gt;

&lt;p&gt;When such cart campaigns are done right, it makes a difference on whether you purchase more item or not. If done wrong, it could lead to a terrible experience that might cost you a customer.&lt;/p&gt;

&lt;p&gt;Here’s an example of such experience and we are going to use it as example for this article.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/R_1R9WXtjTg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And here’s a &lt;a href="https://github.com/christiannwamba/in-app-cart"&gt;GitHub repo&lt;/a&gt; if you want to build along.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#push-notification-vs-inapp-messaging"&gt;
  &lt;/a&gt;
  Push Notification vs In-App Messaging
&lt;/h2&gt;

&lt;p&gt;It is easy to confuse the difference between push notification and in-app messaging.&lt;/p&gt;

&lt;p&gt;Let’s say you hypothetically have an app called Popper on your phone. If your phone is idle and you get a message from Popper, that is a push notification. On the contrary, if you’re scrolling through feeds on Popper and a notification slides in from the top or bottom, that is likely an in-app message.&lt;/p&gt;

&lt;p&gt;With push notifications, the app needs to ask for permission to send a message to the user. The user must have given the app the permission to send messages. Permissions are REQUIRED (at least for iOS and Android) to send push notifications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6JLxM02o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/330bpj6diprnvia33k8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6JLxM02o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/330bpj6diprnvia33k8r.png" alt="A push notification" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a developer, in-app messaging is your land of freedom. You do not need permissions to do anything. Its your app, so your rules! The only downside is that you can only show it when a customer is on the app. That said, this unlimited amount of freedom can be easily abused.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUaqIYLa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8j3jjmvbgui0afazdcuu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUaqIYLa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8j3jjmvbgui0afazdcuu.png" alt="An image of in-app notification" width="428" height="926"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-you-need-a-cloud-service-for-inapp-messaging"&gt;
  &lt;/a&gt;
  Why do you need a cloud service for in-app messaging
&lt;/h2&gt;

&lt;p&gt;Since its your world, your rules, your app, you can do things however you want without relying on the device, on a service, etc. To be honest, that is true. But we are not only talking about messaging, we are also talking about getting it right.&lt;/p&gt;

&lt;p&gt;You can have a global event in your app that listens to users’ actions and shows pop ups based on those actions. But how do you know which users have interacted with the pop up? How do you segment users that responded negatively and positively? How do you give control to marketing department to send in-app messaging if they don’t have developers?&lt;/p&gt;

&lt;p&gt;These questions will force you to build a service from scratch but you don’t have to. Amplify’s in-app messaging uses Amazon Pinpoint Analytics services to provide the toolset you need. With this option you can add in-app messaging in a short period of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-inapp-messaging-right"&gt;
  &lt;/a&gt;
  How to get in-app messaging right
&lt;/h2&gt;

&lt;p&gt;It’s 2021 and everybody hates unsolicited notifications but there is a few reason you wouldn’t mind that one message:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Segmentation and timing&lt;/li&gt;
&lt;li&gt;Native experience&lt;/li&gt;
&lt;li&gt;Product pairing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Segmentation and timing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you segment users, they feel special. Here’s what I mean — if I put you in a segment called musician because you bought a piano, you will feel special when I inform you that a guitar is now 50% off.&lt;/p&gt;

&lt;p&gt;It wouldn’t make sense to tell you that basketballs are 50%. From my perspective as the business, I just wanted to inform my customers. From my customer’s perspective, the customer doesn’t care about basketballs.&lt;/p&gt;

&lt;p&gt;Segmentation without timing is also annoying and sometimes customers can feel attacked. Don’t just ask me to buy guitars for 50%, one hour after buying a piano. Space it, give me time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Native experience&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUaqIYLa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8j3jjmvbgui0afazdcuu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUaqIYLa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8j3jjmvbgui0afazdcuu.png" alt="An image of in-app notification showing native features" width="428" height="926"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one seems to be a no-brainer but because in-app messaging is one of those afterthought feature, most of them look like they were not thought through. You can’t have a dark mode checkout with a message confirmation button that is in light mode.&lt;/p&gt;

&lt;p&gt;Make your interfaces and also the experience feel consistent with reference to all other features in your app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product pairing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Product pairing is similar to segmentation but goes one level deeper. In segmentation we talked about offering a customer 50% off a guitar because they bought a piano. Product pairing works better when they have not checked out.&lt;/p&gt;

&lt;p&gt;For pairing to work well, you have to ensure that the paired products solve a problem for the user. Pair guitars with tuners, karaoke boxes with singing courses, swimsuits with towels, you get the point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inapp-messaging-with-amplify"&gt;
  &lt;/a&gt;
  In-app Messaging with Amplify
&lt;/h2&gt;

&lt;p&gt;In-app messaging is now natively available in Amplify and here are the steps to set it up:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an Amplify project with Pinpoint Analytics enabled&lt;/li&gt;
&lt;li&gt;Attach IAM policy to Pinpoint&lt;/li&gt;
&lt;li&gt;Create campaigns and segments&lt;/li&gt;
&lt;li&gt;Dispatch and listen to in-app messages&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can setup in-app messaging for any kind of frontend/mobile framework that is supported by Amplify. Currently, there are UI components for only React Native but you can write custom components for other frameworks. The demo will be based on React so I will show you how to create a custom UI for notifications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-an-amplify-project"&gt;
  &lt;/a&gt;
  Create an Amplify Project
&lt;/h2&gt;

&lt;p&gt;Create a new project and run the init command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are not familiar with how to set up an Amplify project, refer to the &lt;a href="https://docs.amplify.aws/start/q/integration/react/"&gt;Getting Started&lt;/a&gt; docs to get you up to speed.&lt;/p&gt;

&lt;p&gt;Run the following command to add Amazon Pinpoint to your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify add analytics
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When asked to choose a provider, select &lt;strong&gt;Amazon Pinpoint&lt;/strong&gt;. Choose the default answers for the rest of the questions.&lt;/p&gt;

&lt;p&gt;Push your Amplify setup to the cloud with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Amplify will generate an &lt;code&gt;aws-exports.js&lt;/code&gt; file in your &lt;code&gt;src&lt;/code&gt; folder. Your AWS credentials are stored here and Amplify libraries need it when making requests. Add the following before the closing curly braces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;const awsmobile &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  ...
  &lt;span class="s2"&gt;"Notifications"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"InAppMessaging"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"AWSPinpoint"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"appId"&lt;/span&gt;: &lt;span class="s2"&gt;"&amp;lt;pinpoint-project-id&amp;gt;"&lt;/span&gt;,
        &lt;span class="s2"&gt;"region"&lt;/span&gt;: &lt;span class="s2"&gt;"&amp;lt;aws-region&amp;gt;"&lt;/span&gt;,
      &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get the Pinpoint project ID by going to &lt;a href="https://console.aws.amazon.com/pinpoint/home"&gt;Pinpoint home&lt;/a&gt; in your AWS console. You should see the project you just created on the list:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sp6XSk77--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5C0B640499F176D9B52FC4679D8241FE3E95A4140E1F6CC9D6AAD7FC7A76F910_1638335618521_CleanShot%2B2021-12-01%2Bat%2B09.12.552x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sp6XSk77--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5C0B640499F176D9B52FC4679D8241FE3E95A4140E1F6CC9D6AAD7FC7A76F910_1638335618521_CleanShot%2B2021-12-01%2Bat%2B09.12.552x.png" alt="Pinpoint console" width="880" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;region&lt;/code&gt; should be the same value as the generated value for &lt;code&gt;aws_mobile_analytics_app_region&lt;/code&gt; in the &lt;code&gt;aws-exports.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-and-attach-iam-policy-to-pinpoint"&gt;
  &lt;/a&gt;
  Create and Attach IAM Policy to Pinpoint
&lt;/h2&gt;

&lt;p&gt;Next you need to grant your users access to the Pinpoint service you have just created. This step will end up being baked into the automatic process for you. So you won’t have to do it manually.&lt;/p&gt;

&lt;p&gt;That said, you need to create it in the AWS console by following &lt;a href="https://docs.amplify.aws/lib/in-app-messaging/prerequisites/q/platform/js/#create-and-attach-iam-policy"&gt;these steps&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-campaigns-and-segments"&gt;
  &lt;/a&gt;
  Create Campaigns and Segments
&lt;/h2&gt;

&lt;p&gt;This is the most important step for setting up in-app messaging. We talked about segmentation at the beginning of the article and why it is very important for conversion. This step shows how to set segmentation up.&lt;/p&gt;

&lt;p&gt;From &lt;a href="https://console.aws.amazon.com/pinpoint/home"&gt;Pinpoint home&lt;/a&gt;, select the Pinpoint project you have just created. Next click &lt;strong&gt;Campaigns&lt;/strong&gt; from the sidebar menu and click the &lt;strong&gt;Create a campaign&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JYKkfqnJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.amplify.aws/images/lib/in-app-messaging/create-pinpoint-campaign.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JYKkfqnJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.amplify.aws/images/lib/in-app-messaging/create-pinpoint-campaign.png" alt="Create pinpoint campaign" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give the Campaign a name, choose &lt;strong&gt;in-app messaging&lt;/strong&gt; as the channel and click next:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fjtmLiG4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5C0B640499F176D9B52FC4679D8241FE3E95A4140E1F6CC9D6AAD7FC7A76F910_1638336697944_CleanShot%2B2021-12-01%2Bat%2B09.31.052x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjtmLiG4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5C0B640499F176D9B52FC4679D8241FE3E95A4140E1F6CC9D6AAD7FC7A76F910_1638336697944_CleanShot%2B2021-12-01%2Bat%2B09.31.052x.png" alt="" width="880" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the Choose a segment page, choose &lt;strong&gt;Create a segment&lt;/strong&gt; and give the segment a name. Click &lt;strong&gt;Next&lt;/strong&gt; afterwards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evo6aJ_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5C0B640499F176D9B52FC4679D8241FE3E95A4140E1F6CC9D6AAD7FC7A76F910_1638336863633_CleanShot%2B2021-12-01%2Bat%2B09.33.542x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evo6aJ_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5C0B640499F176D9B52FC4679D8241FE3E95A4140E1F6CC9D6AAD7FC7A76F910_1638336863633_CleanShot%2B2021-12-01%2Bat%2B09.33.542x.png" alt="Create a segment for the campaign" width="880" height="172"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the Create your message page, choose &lt;strong&gt;Create a new in-app message&lt;/strong&gt;. This is where you can customize your UI components. As you customize the UI, you will get a preview on the phone screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vNa2S4BY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5C0B640499F176D9B52FC4679D8241FE3E95A4140E1F6CC9D6AAD7FC7A76F910_1638336993111_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNa2S4BY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_5C0B640499F176D9B52FC4679D8241FE3E95A4140E1F6CC9D6AAD7FC7A76F910_1638336993111_image.png" alt="Customize the UI for the campaign" width="880" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What makes Pinpoint great is that anyone without a developer experience can create campaigns and messages for those campaigns. Someone from marketing department can customize this as deep as what the message looks like.&lt;/p&gt;

&lt;p&gt;The last step is to create an event. This event is what you dispatch from your app to notify Amplify that a user has perfomed an action to trigger the in-app notification.&lt;/p&gt;

&lt;p&gt;Give the event a name and optionally choose some attributes that can trigger this campaign:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k-0DRgxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhkibqao52kxl9jq4feh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k-0DRgxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhkibqao52kxl9jq4feh.png" alt="Set event that will trigger the campaign" width="880" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the example above, I want the cart_event to be triggered only when the event payload object contains a name property with a value that contains any of the above attribute values.&lt;/p&gt;

&lt;p&gt;Scroll down to choose the start and end date for the campaign and select the timezone for the time you’ve set:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y73AHsmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5j4q6dnoj7fwp5fnrmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y73AHsmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5j4q6dnoj7fwp5fnrmw.png" alt="Set start and end date for campaign" width="880" height="312"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click Next and the console will show you a page to review the campaign. Click the &lt;strong&gt;Launch Campaign&lt;/strong&gt; button at the bottom right of the review page. The date must be 15mins in the future so you will get a validation error if the time is ealiar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dispatch-and-listen-to-inapp-messages"&gt;
  &lt;/a&gt;
  Dispatch and Listen to in-App Messages
&lt;/h2&gt;

&lt;p&gt;To the fun part!&lt;/p&gt;

&lt;p&gt;Install Amplify library, In-app UI library and other supporting dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;aws-amplify@in-app-messaging aws-amplify-react-native@in-app-messaging amazon-cognito-identity-js @react-native-community/netinfo @react-native-async-storage/async-storage @react-native-picker/picker react-native-get-random-values react-native-url-polyfill
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setup the required polyfills and configure the library with the &lt;code&gt;aws-exports&lt;/code&gt; config in the &lt;code&gt;App.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native-get-random-values&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native-url-polyfill/auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppRegistry&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;appName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Amplify&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;awsExports&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/aws-exports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;Amplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;awsExports&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;AppRegistry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;App.js&lt;/code&gt; component, tell Amplify to sync in-app messages between Pinpoint and the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
Summarized version of:
https://github.com/christiannwamba/in-app-cart/blob/master/App.js
*/&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Notifications&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Notifications&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InAppMessaging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;syncMessages&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You also need to wrap your tree with the &lt;code&gt;InAppMessagingProvider&lt;/code&gt; and render &lt;code&gt;InAppMessageDisplay&lt;/code&gt; component. This is how the UI library knows to show the user a message when an event is triggered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
Summarized version of:
https://github.com/christiannwamba/in-app-cart/blob/master/App.js
*/&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;InAppMessagingProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;InAppMessageDisplay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify-react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Notifications&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InAppMessaging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;syncMessages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;InAppMessagingProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NavigationContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Screen&lt;/span&gt;
            &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HomeScreen&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="nx"&gt;navigation&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
              &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Shop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;headerRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CartIcon&lt;/span&gt;
                  &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
                  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;})}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Screen&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;CartScreen&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Screen&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ProductScreen&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Stack.Navigator&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NavigationContainer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;InAppMessageDisplay&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/InAppMessagingProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you call &lt;code&gt;syncMessages()&lt;/code&gt;, Amplify will start asking Pinpoint for all the messages that has been created if any. You want to call this function as early as possible in your app. That’s why I am calling it at the top of the component tree.&lt;/p&gt;

&lt;p&gt;Here is how to dispatch and listen to events from your app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
Summarized version of:
https://github.com/christiannwamba/in-app-cart/blob/master/screens/ProductScreen.js
*/&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ProductScreen&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;navigation&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;productId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProduct&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inCart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setInCart&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchProduct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;models&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ProductModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cartItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eq&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setInCart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;cartItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;fetchProduct&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addToCart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cart_event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;Analytics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setInCart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you call the &lt;code&gt;record&lt;/code&gt; function, you have to give it an object that contains the event name you created when you created the campaign. Notice how I’ve also set the prduct name attributes. Unless the attribute matches the attribute you set in your Pinpoint dashboard, this event will not fire. Once the event is dispatched, Pinpoint keeps a record of it and also notifies all active listeners.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/R_1R9WXtjTg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As a recap, remember to segment your users based on their behavior and customize your UI so it feels native to your customers.  Amplify gives you the tools you need to &lt;a href="https://docs.amplify.aws/lib/in-app-messaging/identify-user/q/platform/js/"&gt;identify users&lt;/a&gt; based on the data you’ve collected from them. Take advantage of the feature when segmenting users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clean-up"&gt;
  &lt;/a&gt;
  Clean up
&lt;/h3&gt;

&lt;p&gt;Now that you have finished this walkthrough, we recommend that you delete your Amplify app if you aren’t going to use it anymore. This ensures that your resources won’t be abused in the event that someone gains access to your project’s credentials.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bg36j9bZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsz0ghur6g6ezx5eotre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bg36j9bZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsz0ghur6g6ezx5eotre.png" alt="Alt text: Screen capture of an Amplify app’s console and its delete button" width="880" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To delete all of the local Amplify associated files and the Amplify project in the backend, go to your Amplify console, select the app you want to delete, and expand the dropdown in the top right to delete your app.&lt;/p&gt;

&lt;p&gt;Alternatively, you can run the following command in your working directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;`amplify delete`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This action cannot be undone. Once the project is deleted, you cannot recover it and will have to reconfigure the categories and the project configuration files if you need to use the project again.&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Elixir in the eyes of Node.js developer</title>
      <author>Łukasz Czyszczonik</author>
      <pubDate>Mon, 20 Dec 2021 13:50:33 +0000</pubDate>
      <link>https://dev.to/czystyl/elixir-in-the-eyes-of-nodejs-developer-fee</link>
      <guid>https://dev.to/czystyl/elixir-in-the-eyes-of-nodejs-developer-fee</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@kaizennguyen?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Kaizen Nguyễn&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;I got into Elixir some time ago, but at that time, I was more interested in statically typed languages. I didn't exclude Elixir at that time, but instead, I moved it to a second plan. One of the signals to give Elixir a try was the talk from &lt;em&gt;Saša Jurić - The Soul of Erlang and Elixir&lt;/em&gt;. I highly recommend watching this talk. I discovered that the BEAM VM and Elixir features could offer many benefits. So I decided to try and see how all the pieces are working together in an actual application. I'd like to share some critical ecosystem points that convinced me to try.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Community&lt;/strong&gt; &lt;br&gt;
One of the first things that I noticed when I started was the community libraries. Almost all the libraries shared the same structure and had all the API interfaces generated along with the type spec. So I searched for a few libraries that I often use, like web framework, GraphQL implementation or Database management. I can say that all of them look solid, and the documentation also contains a lot of guidelines, so I didn't need to leave the page to have a good understanding of them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Phoenix framework&lt;/strong&gt;&lt;br&gt;
The Phoenix is a web framework that makes building web servers easy and fast. Great thing is that Phoenix has a built-in code generator. This generator is done via the mix task and you can generate almost all needed parts for creating an endpoint, context or database schema. Additionally, the documentation and guidelines described in the next point make you much more comfortable in the first place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Testing and documentation&lt;/strong&gt;&lt;br&gt;
When looking back on different projects, documentation and testing are some of the forgotten things during development. Within the Elixir, those things are built in the language, making a considerable change for development and maintenance. You can write the documentation and examples right next to the code, and as we advance, you can turn these examples into quick tests. It was a nice thing that convinced me to write more tests and documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GenServer&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
The GenServer allows you to abstract logic around small services. For example, all these services might have a separate state and business logic encapsulated inside. The service code is executed as a lightweight BEAM process, which is fast compared to standalone microservice solutions. Therefore, you do not need any extra HTTP layer or queue to communicate within the service.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Type system, pattern matching and language itself&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
I need to say that I'm a big fan of statically typed languages. So, when I heard about the Elixir for the first time, missing a type system was a big downside for me. Also, I understand that making such a dynamic language static would be a big challenge. To fill this gap, I used Dialixir and Typespecs. The experience is slightly different, but you have some tangibility of the type system, called success typing.&lt;/p&gt;

&lt;p&gt;Elixir has a functional language style that fits my personality best, but everyone can feel differently. On top of this, you have a great set of language features like With statements, function guards, the pipe operator and excellent pattern matching.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BEAM virtual machine&lt;/strong&gt;&lt;br&gt;
I think it was one of the biggest deal-breaker for using the Elixir heavier. The BEAM architecture, combined with the language features described above, make it a great combo! &lt;br&gt;
The virtual machine is responsible for running your code in small, cheap and fast processes. One of the philosophies that are coming from Erlang is &lt;code&gt;Let it fail&lt;/code&gt;. The philosophy allows writing the system that is working more consistently and reliably. I could compare this to our systems like Linux, Windows or macOS. The system is working, but some programs that we installed are crashing from time to time, but usually, your system is still working, and only what you have to do is open your program once again. Like BEAM VM, one process might crash, but the whole system is still working as usual. &lt;/p&gt;

&lt;p&gt;Overall, I feel surprised how good working with Elixir was. One of the gaps is the lack of a static type system. To fill this gap, I used Credo, Dialixir and TypeSpecs to analyze the codebase statically. The language features make writing the code quicker, easier and cleaner to maintain. For example, built-in documentation and testing might turn your codebase into an environment that is a pleasure to work with. The last piece of this whole stack is that all of this runs on BEAM VM, which is the cherry on the cake! So I need to say that the lack of a static type system is no longer a significant disadvantage with such a combo! &lt;/p&gt;

&lt;p&gt;It is the first blog about my elixir journey, and I plan to share more detailed knowledge soon in my next blog.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>elixir</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Mistakes I want to Overcome  in my Software Engineering Journey in 2022</title>
      <author>Joseph Mania</author>
      <pubDate>Mon, 20 Dec 2021 13:44:25 +0000</pubDate>
      <link>https://dev.to/techmaniacc/mistakes-i-want-to-overcome-in-my-software-engineering-journey-in-2022-28c4</link>
      <guid>https://dev.to/techmaniacc/mistakes-i-want-to-overcome-in-my-software-engineering-journey-in-2022-28c4</guid>
      <description>&lt;p&gt;I am not a perfect programmer, but I can design software using the right software engineering techniques, from stage 1 to the last. The more you dig into this industry, the more familiar you become with new techniques.&lt;/p&gt;

&lt;p&gt;Many people have ideas which they yearn to implement, but you will lose when you think like a developer in everything. There are many things involved before Google releases software to the market. So throughout my three-year journey, I am still learning more. I was blessed to join campus to take computer science, but that doesn’t guarantee a job😂. I made mistakes in these years, but I promise to rectify them in 2022.&lt;/p&gt;

&lt;p&gt;Learning every technology&lt;/p&gt;

&lt;p&gt;I thank myself that this year, I rectified this mistakes 😂😂. In my first year, very charming boy eager to learn and become a big title software engineer. I was doing everything, and I mean everything. Maybe that’s how I understood the term software engineer. From Monday to Saturday, I had a timetable, learning AI, ML, Android, web technologies, and all this was sucking. At the end of the year, I could not develop a complete model using these technologies.&lt;/p&gt;

&lt;p&gt;Of course, they have helped me in one way; I can easily jump into a new field and become successful within a short period of time. Since 2021 started, I have focused on web development and am a happy man who can write clean JS and python codes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cramming-my-code"&gt;
  &lt;/a&gt;
  Cramming my code
&lt;/h2&gt;

&lt;p&gt;This is not a laughing matter. Everyone has done this, but it is never significant. Companies don’t look for people who can write code for the same thing. Or they don’t even want you to be as good at all the languages as most of you think. Organizations yearn for a person who has a strong basic foundation of programming, in that they can easily learn a new technology whenever the company suggests.&lt;/p&gt;

&lt;p&gt;Please don’t cram multi-threading in c++; understand it. The same logic for algorithms and data structure is used in almost all languages; the only difference is the syntax. Understanding the ideal concepts will help you be fast in implementing useful functionality.&lt;/p&gt;

&lt;p&gt;Bragging about the technology rather than providing a solution&lt;/p&gt;

&lt;p&gt;Hear this for free; businesspeople and other non-technical individuals in the company don’t want to know what you will do it. Stop bragging about the technology you know, instead offer solutions to society. Yes, I know &lt;em&gt;to react, SQL, Django&lt;/em&gt;, but how can they be used to create an optimized e-commerce platform? Is there a way I can optimize my SEO using the right technology?&lt;/p&gt;

&lt;p&gt;As you are in the software development field, learn to train your mind on solving problems. Knowing a lot of technology will help you develop your favorite solution. It’s not a must you know everything, but using the three-four technologies you know, can lead to something great.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#listening-to-negative-talks"&gt;
  &lt;/a&gt;
  Listening to negative talks
&lt;/h2&gt;

&lt;p&gt;This has affected a number of people who have left the journey they started. Before I knew how important tech was, someone said that coding wasn’t helpful and was outdated. That brought a lot of questions to my mind, provided I was studying computer science to get a well-paying job. I liked the software part, and so that sentence reduced my confidence.&lt;/p&gt;

&lt;p&gt;But over time, I have learned to fight such spirits. I believe in what I do. For newbies, any technology you learn is being used somewhere; a person or company needs those skills. So keep working and never let other people’s words kill your dream.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#joining-mediocre-group"&gt;
  &lt;/a&gt;
  Joining Mediocre Group
&lt;/h2&gt;

&lt;p&gt;Wow! I could not forget this. If you want to grow, find a group of people. They will guide and share their mistakes with you. Last year, we made a group where we were to learn various technologies and create minor startups for freelancing😂😂. Two weeks, I realized how everyone was learning at their own pace; no one is willing to accept mistakes. I call it a mediocre group where you are no longer on the same page.&lt;/p&gt;

&lt;p&gt;Runaway from this. Who told you online doesn’t have great teams. If you cannot find physical friends with whom you share the same goal, look for an online group. Twitter has great teams. Also, learning alone can help you achieve great things, don’t underestimate your knowledge. But, a team, will make you go far, don’t forget this.&lt;/p&gt;

&lt;p&gt;Important Bonus&lt;/p&gt;

&lt;p&gt;Don’t forget! Don’t forget! Push your code on GitHub. However small the project is, it’s important. They create new friends on linked in. DM those connections from major companies and ask them about their culture. This is to make connections with people in your field.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>8 most useful PhpStorm keyboard shortcuts</title>
      <author>Damian Brdej</author>
      <pubDate>Mon, 20 Dec 2021 13:40:12 +0000</pubDate>
      <link>https://dev.to/quentindamianino/8-most-useful-phpstorm-keyboard-shortcuts-4476</link>
      <guid>https://dev.to/quentindamianino/8-most-useful-phpstorm-keyboard-shortcuts-4476</guid>
      <description>&lt;h3&gt;
  &lt;a href="#-raw-double-shift-endraw-search-everywhere"&gt;
  &lt;/a&gt;
  &lt;code&gt;Double Shift&lt;/code&gt; - Search Everywhere
&lt;/h3&gt;

&lt;p&gt;Quickly find any file, action, class, symbol, tool window, or setting in PhpStorm, in your project, and in the current Git repository.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ctrlshifta-endraw-find-action"&gt;
  &lt;/a&gt;
  &lt;code&gt;Ctrl+Shift+A&lt;/code&gt; - Find Action
&lt;/h3&gt;

&lt;p&gt;Find a command and execute it, open a tool window, or search for a setting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-altenter-endraw-show-context-actions"&gt;
  &lt;/a&gt;
  &lt;code&gt;Alt+Enter&lt;/code&gt; - Show Context Actions
&lt;/h3&gt;

&lt;p&gt;Quick fixes for highlighted errors and warnings, intention actions for improving and optimizing your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-f2-endraw-and-raw-shiftf2-endraw-navigate-between-code-issues"&gt;
  &lt;/a&gt;
  &lt;code&gt;F2&lt;/code&gt; and &lt;code&gt;Shift+F2&lt;/code&gt; - Navigate between code issues
&lt;/h3&gt;

&lt;p&gt;Jump to the next or previous highlighted error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ctrle-endraw-view-recent-files"&gt;
  &lt;/a&gt;
  &lt;code&gt;Ctrl+E&lt;/code&gt; - View recent files
&lt;/h3&gt;

&lt;p&gt;Select a recently opened file from the list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ctrlw-endraw-and-raw-ctrlshiftw-endraw-extend-or-shrink-selection"&gt;
  &lt;/a&gt;
  &lt;code&gt;Ctrl+W&lt;/code&gt; and &lt;code&gt;Ctrl+Shift+W&lt;/code&gt; - Extend or shrink selection
&lt;/h3&gt;

&lt;p&gt;Increase or decrease the scope of selection according to specific code constructs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ctrl-endraw-and-raw-ctrlshift-endraw-addremove-line-or-block-comment"&gt;
  &lt;/a&gt;
  &lt;code&gt;Ctrl+/&lt;/code&gt; and &lt;code&gt;Ctrl+Shift+/&lt;/code&gt; - Add/remove line or block comment
&lt;/h3&gt;

&lt;p&gt;Comment out a line or block of code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-altf7-endraw-find-usages"&gt;
  &lt;/a&gt;
  &lt;code&gt;Alt+F7&lt;/code&gt; - Find Usages
&lt;/h3&gt;

&lt;p&gt;Show all places where a code element is used across your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;To master your programming skills first you have to master tools you use. &lt;br&gt;
Which keyboard shortcut you use most often?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>php</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>بهترین های جاوا</title>
      <author>خشک استور</author>
      <pubDate>Mon, 20 Dec 2021 13:36:12 +0000</pubDate>
      <link>https://dev.to/khoshkstoree/bhtryn-hy-jw-2fmf</link>
      <guid>https://dev.to/khoshkstoree/bhtryn-hy-jw-2fmf</guid>
      <description>&lt;p&gt;بهترین های تفاوت را احساس کنید.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What `javascript:void(0);` actually means?</title>
      <author>Creative Tim</author>
      <pubDate>Mon, 20 Dec 2021 13:27:12 +0000</pubDate>
      <link>https://dev.to/creativetim_official/what-javascriptvoid0-actually-means-ffo</link>
      <guid>https://dev.to/creativetim_official/what-javascriptvoid0-actually-means-ffo</guid>
      <description>&lt;p&gt;As a frontend developer or even as a backend developer maybe you have found &lt;code&gt;javascript: void(0);&lt;/code&gt; written as a value for a href attribute inside an anchor tag (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) and you wondered what that means.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;a href="javascript:void(0);" onclick="clickFunction()"&amp;gt;
  Click
&amp;lt;/a&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this article, we will try to provide an explanation for the above syntax in order for you to know when and why it's used. To do that we will have to take it element by element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-raw-void-endraw-keyword"&gt;
  &lt;/a&gt;
  Javascript &lt;code&gt;void&lt;/code&gt; keyword
&lt;/h2&gt;

&lt;p&gt;As in other programming languages, &lt;code&gt;void&lt;/code&gt; keyword from Javascript, is an operator that has the role to tell the program NOT to return the result of an expression and it returns &lt;code&gt;undefined&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;For example, the following expression will return the value of the mathematical operation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
let sum = 1 + 1;
console.log(sum); // 2

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the next expression will return &lt;code&gt;undefined&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
let sum = void(1 + 1);
console.log(sum); // undefined

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though the variable &lt;code&gt;sum&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, Javascript still executes the expression &lt;code&gt;(1 + 1)&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
let sum = void console.log(1 + 1); // 2
console.log(sum); // undefined

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above, we can observe that the code that it is after the &lt;code&gt;void&lt;/code&gt; operator will always be executed but the return of the expression will always be &lt;code&gt;undefined&lt;/code&gt;. The role of &lt;code&gt;0&lt;/code&gt; inside the void operator is simply just the one of a placeholder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-raw-javascriptvoid0-endraw-as-the-value-of-href"&gt;
  &lt;/a&gt;
  Use &lt;code&gt;javascript:void(0);&lt;/code&gt; as the value of href
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;javascript:&lt;/code&gt; part is a possible value for the &lt;code&gt;href&lt;/code&gt; attribute. This value tells your browser that the next text is a Javascript code and it should be treated accordingly. There are also other possible values for the &lt;code&gt;href&lt;/code&gt; attribute like mailto:, file:, tel:, sms: etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--36cvwc3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.creative-tim.com/blog/content/images/2021/12/coder.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--36cvwc3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.creative-tim.com/blog/content/images/2021/12/coder.gif" alt="developer" width="480" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-raw-javascriptvoid0-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;javascript:void(0);&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;By using &lt;code&gt;javascript:void(0)&lt;/code&gt;, the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag will not send you to other web address. It will also not refresh the page as links usually do when you don't specify a value for the href attribute.&lt;/p&gt;

&lt;p&gt;If you are wondering why we don't just remove the &lt;code&gt;href&lt;/code&gt; attribute, the answer is that by removing the &lt;code&gt;href&lt;/code&gt; attribute we will also remove the link appearance of the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element. That means that the cursor will not change when hovering the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag. The cursor will act like it is on normal text.&lt;/p&gt;

&lt;p&gt;In other words, by adding &lt;code&gt;javascript:void(0)&lt;/code&gt; as the value of href attribute we will create a link that does nothing.&lt;/p&gt;

&lt;p&gt;The example link from the beginning of this article will run the &lt;code&gt;clickFunction&lt;/code&gt; function when the tag is clicked, but without refreshing the page or sending you to a different page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.creative-tim.com/blog/courses/javascript-courses-learn-web-development?ref=devto"&gt;You may be interested: 15 JavaScript Courses - Learn Web Development, HTML, and CSS&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-raw-javascriptvoid0-endraw-"&gt;
  &lt;/a&gt;
  When to use &lt;code&gt;javascript:void(0);&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;Thankfully, with all the updates made in Javascript, you will never have to use it as there are better alternatives to it.&lt;/p&gt;

&lt;p&gt;In order to prevent the default behavior of a &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag, it's generally recommended to use the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; tag for buttons and the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag for links. Also, if you need or want to change the cursor, it's recommended to use CSS instead of changing the tag to &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In conclusion, we hope that now you have a better understanding of what &lt;code&gt;javascript:void(0);&lt;/code&gt; is. Since it does nothing that you can't do with only HTML/CSS, the syntax presented at the beginning is not so common these days. Use this piece of information only to know what role it has when you see it somewhere, but keep your code clean and follow our advice on best practices.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>🎥Responsive Footer Section using Flexbox | HTML CSS🙌</title>
      <author>Robson Muniz</author>
      <pubDate>Mon, 20 Dec 2021 13:20:10 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/responsive-footer-section-using-flexbox-html-css-1m5p</link>
      <guid>https://dev.to/robsonmuniz16/responsive-footer-section-using-flexbox-html-css-1m5p</guid>
      <description>&lt;p&gt;In this video, I have shown you how you can create a responsive footer section using HTML and CSS only. &lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vaaeeOczpPA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha512-Fo3rlrZj/k7ujTnHg4CGR2D7kSs0v4LLanw2qksYuRlEzO+tcaEPQogQ0KaoGN26/zrn20ImR1DfuLWnOo7aBA=="&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt; &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Your Content Here!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"left box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;About us&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Harum sunt saepe maxime consequatur, architecto cum quos quo ut id totam laborum veritatis quaerat esse atque, doloremque facere hic. Odit, eum.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"social"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-facebook-f"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-instagram"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-youtube"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"center box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Adress&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"place"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-map-marker-alt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;London, UK&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"phone"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-phone-alt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;+089-5689754993&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-envelope"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;webdev@dev.com&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"right box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Contact US&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Email:&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Message:&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;cols=&lt;/span&gt;&lt;span class="s"&gt;"25"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Send&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bottom"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;center&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"credit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Created by &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;WebDev&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; |
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"far fa-copyright"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;2021 All Rights Reserved.&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#d9d9d9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Montserrat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;bisque&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Just for parent demo size */&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;65vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;48px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-content&lt;/span&gt; &lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-basis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.125&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/*  border: 2px solid red;*/&lt;/span&gt;
  &lt;span class="c"&gt;/*  Show them the file*/&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1a1a1a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f12020&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.left&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.social&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.left&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.social&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.left&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.social&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1a1a1a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.left&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.social&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f12020&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.center&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.fas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.4375rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1a1a1a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.center&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.fas&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f12020&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/*Now we grab the text*/&lt;/span&gt;

&lt;span class="nc"&gt;.center&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.07rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.center&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="nc"&gt;.phone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.07rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#656565&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nc"&gt;.msg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.07rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#151515&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#222222&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3498db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f12020&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.07rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right&lt;/span&gt; &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bottom&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.94rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#151515&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bottom&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#656565&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bottom&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f12020&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bottom&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.main-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.main-content&lt;/span&gt; &lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>footer</category>
    </item>
    <item>
      <title>Things you might not know about Windows Terminal</title>
      <author>jonosellier</author>
      <pubDate>Mon, 20 Dec 2021 13:08:06 +0000</pubDate>
      <link>https://dev.to/jonosellier/things-you-might-not-know-about-windows-terminal-ma2</link>
      <guid>https://dev.to/jonosellier/things-you-might-not-know-about-windows-terminal-ma2</guid>
      <description>&lt;p&gt;With Microsoft announcing that Windows Terminal will be the &lt;a href="https://www.theverge.com/2021/12/15/22837218/microsoft-windows-terminal-default-windows-11-changes"&gt;new default terminal&lt;/a&gt;, I wanted to take the time to share some of the things you might not know about the new default.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-anything"&gt;
  &lt;/a&gt;
  Launch anything
&lt;/h2&gt;

&lt;p&gt;You can configure Windows Terminal with various profiles that let you launch into any program you want. &lt;/p&gt;

&lt;p&gt;Say you needed to remote into a machine super often. Setting up a profile with &lt;code&gt;ssh user@hostname&lt;/code&gt; puts you right into that machine with a &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; keystroke. The same can be done for WSL containers or REPLs. I literally use my Node REPL profile daily for quickly transforming objects or making quick calculations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-anywhere"&gt;
  &lt;/a&gt;
  Launch Anywhere
&lt;/h2&gt;

&lt;p&gt;You can also set your starting directory so you can have shortcuts to open a new tab in any directory you choose. I use this to quickly get between my main projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-as-anyone"&gt;
  &lt;/a&gt;
  Launch as anyone
&lt;/h2&gt;

&lt;p&gt;This is more of a hacky workaround for the PowerShell "Run as different user" option but as long as you have an SSH server running you can SSH into your own system as another user. Simply run &lt;code&gt;ssh [domain\]username@localhost&lt;/code&gt; and you're able to log in (as admin)! If you find yourself doing this often, put it in a profile since it's no different to any other SSH command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRGNBgy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://content.spiceworksstatic.com/service.community/p/post_images/0000350437/5c93d00b/attached_image/Untitled.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRGNBgy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://content.spiceworksstatic.com/service.community/p/post_images/0000350437/5c93d00b/attached_image/Untitled.png" alt="The feature we are trying to emulate" width="220" height="124"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The feature we are trying to emulate&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-a-terminal-that-looks-like-its-been-updated-since-the-90s"&gt;
  &lt;/a&gt;
  Have a terminal that looks like it's been updated since the 90s
&lt;/h2&gt;

&lt;p&gt;Windows Terminal supports ligatures and &lt;a href="https://www.nerdfonts.com/"&gt;Nerd Fonts&lt;/a&gt; so installing one of those opens the door to alternative prompts like &lt;a href="https://ohmyposh.dev"&gt;Oh My Posh&lt;/a&gt; that gives you inline Git info, privilege level and so on. I have mentioned this before and go into greater detail on &lt;a href="https://dev.to/jonosellier/4-must-have-tools-for-developing-on-windows-3eg8"&gt;another post&lt;/a&gt; but it's worth mentioning again because it's so good. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-modernization-features-you-should-install-anyways"&gt;
  &lt;/a&gt;
  Bonus modernization features you should install anyways
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/devblackops/Terminal-Icons"&gt;Terminal Icons&lt;/a&gt; makes your &lt;code&gt;ls&lt;/code&gt; a bit prettier and more useful. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://tech.ligthartnet.nl/powershell-tab-completion/"&gt;Change Tab Completion&lt;/a&gt; so you can see all arguments and options available to you. You can also bind &lt;code&gt;UpArrow&lt;/code&gt; and &lt;code&gt;DownArrow&lt;/code&gt; to &lt;code&gt;HistorySearchForward&lt;/code&gt; and &lt;code&gt;HistorySearchBackward&lt;/code&gt; in the same way to cycle the history of commands starting with what you typed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
      <category>windows</category>
      <category>terminal</category>
      <category>cli</category>
    </item>
    <item>
      <title>Angular Project Ideas For Beginners 2022</title>
      <author>ThemeSelection</author>
      <pubDate>Mon, 20 Dec 2021 12:50:07 +0000</pubDate>
      <link>https://dev.to/theme_selection/angular-project-ideas-for-beginners-2022-12mb</link>
      <guid>https://dev.to/theme_selection/angular-project-ideas-for-beginners-2022-12mb</guid>
      <description>&lt;p&gt;Looking for Angular Project Ideas for practice? Then here is the collection of the best &lt;strong&gt;&lt;a href="https://dev.to/theme_selection/angular-project-ideas-for-beginners-2022-12mb"&gt;Angular Project Ideas For Beginners&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before we start the collection of Angular Beginners Project Ideas, let's know what Angular is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-angular"&gt;
  &lt;/a&gt;
  What Is Angular?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;&lt;/strong&gt; is one of the elite JavaScript frameworks developed by &lt;a href="https://www.google.com/"&gt;Google&lt;/a&gt; and based on TypeScript, Angular is capable of delivering great web applications with high web page performances.&lt;/p&gt;

&lt;p&gt;Furthermore, it is fully extensible and works well with other libraries. Besides, every feature can be modified or replaced as per your need for development workflow and feature needs. With consistent updates, Angular has rooted its place in the list of best web development frameworks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Angular offers following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two-way Data binding&lt;/li&gt;
&lt;li&gt;Modular development structure&lt;/li&gt;
&lt;li&gt;Ease in Maintaining&lt;/li&gt;
&lt;li&gt;Dependency Injection&lt;/li&gt;
&lt;li&gt;TypeScript-based (superset of JavaScript)&lt;/li&gt;
&lt;li&gt;High performance for Single Page Hefty Apps&lt;/li&gt;
&lt;li&gt;Offers great flexibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before you go through the list you can check some of the best &lt;strong&gt;&lt;a href="https://themeselection.com/angular-admin-template/"&gt;Angular admin template free download&lt;/a&gt;&lt;/strong&gt;. You may also like the collection of &lt;a href="https://themeselection.com/angular-ui-component-libraries/"&gt;&lt;strong&gt;Angular UI Component Libraries&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's check the Angular Project Ideas For Beginners..!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtDeIfOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmeidayo6wmo3rjenv6d.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtDeIfOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmeidayo6wmo3rjenv6d.gif" alt="Let's begin" width="498" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-projects"&gt;
  &lt;/a&gt;
  Angular Projects
&lt;/h2&gt;

&lt;p&gt;Well, the software industry has a high demand for professionals Angular Developers. It is one of the most widely used JavaScript frameworks. Popular brands like &lt;a href="https://www.paypal.com/in/home"&gt;PayPal&lt;/a&gt;, &lt;a href="https://www.upwork.com/"&gt;Upwork&lt;/a&gt;, &lt;a href="https://www.netflix.com/in/"&gt;Netflix&lt;/a&gt; also use Angular in their frontend development.&lt;/p&gt;

&lt;p&gt;Angular projects offer a great way to build single-page client applications by implementing HTML and Typescript functionalities. So, if you are a beginner, the best thing you can do is work on some real-time  &lt;strong&gt;angular projects.&lt;/strong&gt; An activity-based learning approach works best for understanding the architecture of web frameworks. So, let us explore what the Angular platform is all about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why to practice Angular projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, when it comes to software development careers, it is necessary for beginner developers to practice on their own projects. Besides, developing real-world angular project is the best way to sharpen your skills and execute your theoretical knowledge into practical experience. The more you practice and experiment with different angular projects, the more knowledge you will gain.&lt;/p&gt;

&lt;p&gt;As you start working on angular projects, you will be able to analyze your strengths and weaknesses. Also, you will know the exposure that can be immensely helpful to boost your career. In this collection, you will find  some awesome angular projects ideas for beginners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-constructing-apps-with-angular"&gt;
  &lt;/a&gt;
  Steps to constructing apps with Angular:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The first step - writing code using Typescript, HTML, CSS, etc.&lt;/li&gt;
&lt;li&gt;Second step: Compile Typescript code to JavaScript.&lt;/li&gt;
&lt;li&gt;Finally, Hosting the application on a web server.&lt;/li&gt;
&lt;li&gt;An angular view combines a component and template.&lt;/li&gt;
&lt;li&gt;Navigation between different views is defined by services (i.e., router provided by the dependency injector).&lt;/li&gt;
&lt;li&gt;Automatic synchronization or data-binding occurs between the model and view components in the model, offering a reactive user experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, the building blocks of the Angular workspace are fit for designing impressive  Single Page Applications (SPAs).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-prerequisites"&gt;
  &lt;/a&gt;
  Angular Prerequisites
&lt;/h2&gt;

&lt;p&gt;There are three main prerequisites that you'll need during developing your Angular Project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;Angular CLI&lt;/li&gt;
&lt;li&gt;Text Editors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#angular-project-ideas-for-beginners"&gt;
  &lt;/a&gt;
  Angular Project Ideas For Beginners:
&lt;/h2&gt;

&lt;p&gt;These Angular projects will get you going with all the practicalities you need to succeed in your career. This list of angular project ideas for students  is suited for beginners, and those just starting out in general. These  &lt;strong&gt;angular projects for beginners&lt;/strong&gt;  will get you going with all the practicalities you need to succeed in your career.&lt;/p&gt;

&lt;p&gt;While working on Angular projects you can use the &lt;a href="https://themeselection.com/go/download-vuexy-vuejs/"&gt;Vuexy - Angular Admin Dashboard Template&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://themeselection.com/go/download-vuexy-vuejs/"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X2dFVlPj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvfiwnnxyx33s3acen7u.jpg" alt="Vuexy VueJS Admin Template" width="880" height="563"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vuexy – Angular Admin Dashboard Template&lt;/strong&gt; is the most developer-friendly &amp;amp; highly customizable Admin Dashboard Template. It is based on Angular CLI + NgBootstrap. If you’re a developer looking for an admin dashboard that is developer-friendly, rich with features, and highly customizable look no further than Vuexy. &lt;/p&gt;

&lt;p&gt;Besides, it has followed the highest industry standards to bring you the very best admin template that is not only fast and easy to use but highly scalable. Offering ultimate convenience and flexibility, you’ll be able to build whatever application you want with very little hassle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pixinvent.com/demo/vuexy-angular-admin-dashboard-template/landing/"&gt;Demo&lt;/a&gt; &lt;a href="(https://themeselection.com/go/download-vuexy-vuejs/)"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, Let's start the collection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angular-hello-world-project"&gt;
  &lt;/a&gt;
  Angular Hello World Project
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aAsnGER3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lbjdyf07iy41a8xp7mht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aAsnGER3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lbjdyf07iy41a8xp7mht.png" alt="Angular Hello World Project" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if you are just starting with Angular and Typescript, then "Hello World" project can be a good start. This project offers a tremendous opportunity to boost your skills. It contains a single module and component, creating an open environment for experimentation. Here you will use package.json and npm to load Angular modules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.simplilearn.com/tutorials/angular-tutorial/angular-hello-world"&gt;Angular Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netjstech.com/2020/03/angular-first-app-hello-world-example.html"&gt;Angular First App Hello World Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oBuTWzuZkA4/"&gt;Angular 12 tutorial Hello World&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DanWahlin/Angular-HelloWorld"&gt;Angular Hello World&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#to-do-app"&gt;
  &lt;/a&gt;
  To Do App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MoQ233n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05i3tizpm38l9mgtsqg1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MoQ233n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05i3tizpm38l9mgtsqg1.jpg" alt="To do app" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The to-do app is one of the most common beginner apps. You can do experiments while developing a to-do app. Normally, we are either able to complete a preset number of tasks on time or fail miserably. Although the success rate depends on many factors, there is one common thing that is mostly seen in several use cases. That would be the use of to-do list apps.&lt;/p&gt;

&lt;p&gt;You can offer the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users can edit a to-do&lt;/li&gt;
&lt;li&gt;A list with all the completed to-do’s&lt;/li&gt;
&lt;li&gt;Users can see a list with all the active to-do’s&lt;/li&gt;
&lt;li&gt;User can see the date when he created the to-do&lt;/li&gt;
&lt;li&gt;When closing the browser window the to-do’s will be stored and when the User returns, the data will be retrieved&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tutorials&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gvWxMQ_Zios"&gt;To Do App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning"&gt;Angular todo_list_beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.teclogiq.com/blog/angular-todo-application/"&gt;angular-todo-application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weather-app"&gt;
  &lt;/a&gt;
  Weather App
&lt;/h2&gt;

&lt;p&gt;This is one of the best Angular project ideas for beginners. It is a straightforward project. You can code it in a matter of a few hours! In this project, you have to build a weather app that can display a weather forecast. For this app, you can leverage fake, hard-coded data until you get all the features correct.&lt;/p&gt;

&lt;p&gt;A weather app is a good start for any beginners as it deals not only with data but also focuses on design as well. You can start with basic features such as temperature, sunrise/sunset time, climate map, etc.&lt;/p&gt;

&lt;p&gt;Besides, you can try new features once you are done with the basics. For example, you can show data visualization with animation, rain prediction, wind prediction, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zoaibkhan.com/blog/rxjs-in-angular-creating-a-weather-app/"&gt;RxJs in angular creating a weather app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/duluca/local-weather-app"&gt;https://github.com/duluca/local-weather-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rchristian/angular-weather-app-v1"&gt;https://github.com/rchristian/angular-weather-app-v1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-calculator"&gt;
  &lt;/a&gt;
  Angular Calculator
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ivWS7qJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vopgbom3l5901o9ycily.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ivWS7qJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vopgbom3l5901o9ycily.png" alt="Angular Calculator" width="466" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can simply start with a Angular-based calculator. Not the complex one but a simple calculator. Calculators are not only one of the most useful tools available, but they are also a great way to understand UI and event processing in an application. Here, you will create a calculator that supports basic arithmetic calculations on integers.&lt;/p&gt;

&lt;p&gt;The styling is up to you so use your imagination and get creative! You might also find it worth your time to experiment with the calculator app on your mobile device to better understand basic functionality and edge cases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codingdiksha.com/angular-calculator-application-source-code/"&gt;Angular Calculator App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tektutorialshub.com/angular/angular-calculator-application/"&gt;Calculator in Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.techiediaries.com/angular-8-tutorial-build-first-angular-calculator-app/"&gt;Angular 8 calculator app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/LewisBriffa/pen/RRgaqm"&gt;https://codepen.io/LewisBriffa/pen/RRgaqm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/techiediaries/angular-calculator-app"&gt;https://github.com/techiediaries/angular-calculator-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codezup.com/create-build-angular-calculator-application/"&gt;https://codezup.com/create-build-angular-calculator-application/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#place-locator"&gt;
  &lt;/a&gt;
  Place Locator
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dv9Qqvlc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp966hwv75eg6cdqrawy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dv9Qqvlc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp966hwv75eg6cdqrawy.jpg" alt="Place locator" width="612" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Place Locator project aims at finding the exact location of a person  by identifying its geological coordinates. Those who are recognized as frequent travelers and geologists may now traverse to unknown places without any fear of getting lost. &lt;/p&gt;

&lt;p&gt;Well, working of this project is relatable to that of Google Maps. You can develop place locator app that lets you find hotels, shops, stadiums, petrol stations, and much more. This app should let your audience access every powerful component of this project consisting of preconfigured APIs, sophisticated GIS mapping techniques backed by customized data sources fulfilling the users’ requirements well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simple-currency-converter"&gt;
  &lt;/a&gt;
  Simple Currency Converter
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cZB4-Qf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijrft9c2lpttcdleymk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cZB4-Qf1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijrft9c2lpttcdleymk6.png" alt="Currency Converter" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple Currency Converter reciprocates exchange rates of different currencies. These currencies can be Dollars, Rupees, Pound, and so on. Aim of this app is to plan the travel expenses, calculate education expenses or to calculate financial markets. In addition, you can make this interesting by adding features such as adding multiple countries, and later, you can check the historical data and the futuristic fluctuations in fixed, pegged float, and floating exchange rates. &lt;/p&gt;

&lt;p&gt;You can also include a feature such as auto select. Here, Based on your current location, the currency convertor will select the currency by fetching your current location. Also, you can give some eye catchy look to the app facilitated by beautiful designs and price configurations. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iOXgFZHqpe4"&gt;Currency converter with SVG chart and Angular 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MG_6FdH3gXs"&gt;Angular 9 Tutorial - CurrencyPipe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackblitz.com/edit/angular-example-simple-currency-converter"&gt;https://stackblitz.com/edit/angular-example-simple-currency-converter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vgupta1192/currency-converter"&gt;https://github.com/vgupta1192/currency-converter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-bare-bone"&gt;
  &lt;/a&gt;
  Angular Bare Bone
&lt;/h3&gt;

&lt;p&gt;Angular Bare Bones project displays Angular routing. Such routing supports a number of routing components like RouterOutlet, RouterLink, RouterModule, and other imported routes. Also, the easy-to-serve understandable code has made this project a preferred alternative for AngularJS beginners. In this project, you may expect a single feature component i.e. Barebones injected with data dependency and flexible routing between the homepage and the feature component. &lt;/p&gt;

&lt;p&gt;For running this project, you first install Node.js (a platform for building scalable network applications efficiently). Then, you would be installing the Angular CLI (via npm install -g @angular/cli). At last, what you will be doing is running npm install (for successfully installing app dependencies) and then, running ng serve -o for launching the Bare Bones application based on the event-driven AngularJS model.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DanWahlin/Angular-BareBones"&gt;https://github.com/DanWahlin/Angular-BareBones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mraible/ng-demo"&gt;https://github.com/mraible/ng-demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#url-shortener"&gt;
  &lt;/a&gt;
  URL Shortener
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DsGxKlyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2v0n79xroaipl1da4vr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DsGxKlyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2v0n79xroaipl1da4vr.jpg" alt="url shortner" width="777" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the trending angular project for beginners. In this application, the main feature will be the input for the link you’d like to shorten and the result’s output space. You can check the &lt;a href="https://polrproject.org/"&gt;Polr&lt;/a&gt; for example. It is an open-source web application written in PHP and powered by Lumen. It uses MySQL as the primary database and provides a robust interface to manage your links. You can host it on your domain to shorten URLs, brand them, and provide an overall modern theme.&lt;/p&gt;

&lt;p&gt;Also, you can create a function to copy the shortened link by clicking the icon. The process should happen with the external API call. You can build this angular project more eye-catching than just plain data displayed from the API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/examples/package/angular-shorturl"&gt;https://codesandbox.io/examples/package/angular-shorturl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/CryceTruly/ng-url-shortener"&gt;https://github.com/CryceTruly/ng-url-shortener&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#notepad-application"&gt;
  &lt;/a&gt;
  Notepad Application
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVE-4iiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neoz3s6rzfzva8kwarih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVE-4iiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neoz3s6rzfzva8kwarih.png" alt="notepad app" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notepad Application is no doubt a wonderful choice for the Angular project for beginners. It is a digital pocket app through which you can  modify, create, modify, or add new notes. Purpose of this app is to organize (or reorder if required) the notes on the basis of the date and time they were modified.  To create such app, you can use a smart combination of technologies like Angular CLI, Bootstrap, and NodeJS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dlXEeOk-MrI&amp;amp;t=14s"&gt;Build a Notes App from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zhoodar/notepad-app"&gt;https://github.com/zhoodar/notepad-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#electronic-musical-instrument"&gt;
  &lt;/a&gt;
  Electronic musical instrument
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNo7cnud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9hfrgm4qy4x1652pyxu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNo7cnud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9hfrgm4qy4x1652pyxu.png" alt="Electronic musical instrument" width="568" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With an Electronic musical instrument project, you can possibly  synthesize filtered sounds through a variety of techniques. These techniques can be consonance, rhythm, repetition, alliteration, and many more. It would be good to  use Web Audio API that  synchronizes well with browsers like Safari, Google Chrome, and Opera. Such an innovative project idea will surely boost up your confidence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-projects-with-source-code-github"&gt;
  &lt;/a&gt;
  Angular Projects With Source Code GitHub
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Soundnode/soundnode-app"&gt;Soundnode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ganatan/angular-starter"&gt;Angular Starter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ganatan/angular12-app"&gt;Angular 12 / Bootstrap 5 &amp;amp; CRUD REST API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gothinkster/angular-realworld-example-app"&gt;Angular real-world example app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tomastrajan/angular-ngrx-material-starter"&gt;Angular NgRx material starter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=G0bBLvWXBvc"&gt;Angular for Beginners - Let's build a Tic-Tac-Toe PWA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bezkoder/angular-10-crud-app"&gt;Angular 10 crud app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/trungk18/jira-clone-angular"&gt;Jira clone angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;So, here in this collection of &lt;strong&gt;&lt;a href="https://dev.to/theme_selection/angular-project-ideas-for-beginners-2022-12mb"&gt;Angular Project Ideas For Beginners&lt;/a&gt;&lt;/strong&gt; we have covered some of the Angular projects for practice as a beginner. Besides knowing the framework inside-out, you should also be trained in TypeScript, npm, HTML, CSS, RxJs, and so on.&lt;/p&gt;

&lt;p&gt;Practice on these angular projects to sharpen your coding skills with the above Angular project ideas and develop impressive applications with confidence! If you wish to improve your angular skills, you need to get your hands on these  &lt;strong&gt;Angular projects.&lt;/strong&gt; Now go ahead and put to test all the knowledge that you’ve gathered through our angular project ideas guide to build your very own angular projects!&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
