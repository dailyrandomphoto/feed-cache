<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Understanding front-end data visualization tools ecosystem in 2021 📊📈</title>
      <author>Nikita Kakuev</author>
      <pubDate>Fri, 05 Feb 2021 17:08:36 +0000</pubDate>
      <link>https://dev.to/cubejs/understanding-front-end-data-visualization-tools-ecosystem-in-2021-2nog</link>
      <guid>https://dev.to/cubejs/understanding-front-end-data-visualization-tools-ecosystem-in-2021-2nog</guid>
      <description>&lt;p&gt;Data is the new oil, and it's still true in 2021. However, to turn data into insights, we need to analyze and visualize. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, here's the question: how to pick the right tool? 🛠&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this post we're going to go through JavaScript frameworks and libraries that you can use to visualize your data. And I'd like to do a bit more than just list a few frameworks — I'm going to divide the list by the type of data or data visualization because "one size" doesn't fit all. There are different kinds of data, and each needs a specific visualization strategy.&lt;/p&gt;

&lt;p&gt;We'll go through...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;📈 general-purpose charting libraries&lt;/li&gt;
&lt;li&gt;📉 low-level and complex charting libraries&lt;/li&gt;
&lt;li&gt;🏁 tables and data grids&lt;/li&gt;
&lt;li&gt;⏰ timeline charts &amp;amp; time-based tools&lt;/li&gt;
&lt;li&gt;🗺 geospatial and mapping tools&lt;/li&gt;
&lt;li&gt;⛅️ word clouds&lt;/li&gt;
&lt;li&gt;🌎 3D visualization tools&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, to help you choose the right tool for your project, I'm going to include a brief summary of each framework, i.e.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;💵 whether it's paid or open-source&lt;/li&gt;
&lt;li&gt;⭐️ number of stargazers on GitHub, if it's open source&lt;/li&gt;
&lt;li&gt;📅 when it was last released (as of today)&lt;/li&gt;
&lt;li&gt;🧱 the size of the bundle (unpacked size on npm), and&lt;/li&gt;
&lt;li&gt;🔌 whether it's specific for a particular framework (e.g., React) or it can be used in any JavaScript-based project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided to sort the frameworks and libraries by the number of stargazers because it roughly approximates their popularity and community size (but that's debatable).&lt;/p&gt;

&lt;p&gt;Also note that you won't find here an extensive list of every data visualization library which can be found on the internet. However, I hope that this post will help you build your own understanding of the ecosystem.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;📊 And the icing on the cake: I'll provide links to guides and tutorials on data visualization tools built by the Cube.js team. &lt;a href="https://cube.dev?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=dataviz-ecosystem-2021"&gt;Cube.js&lt;/a&gt; helps to create an API over any database with ease, and it's often used as a very performant backend for analytical data visualizations.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-generalpurpose-charting-libraries" class="anchor"&gt;
  &lt;/a&gt;
  1. General-purpose charting libraries
&lt;/h1&gt;

&lt;p&gt;The first category is probably the most popular. Most data can be visualized with charts: either temporal (when you include time values to the plot, e.g., on the X axis), or non-temporal (when you have only numeric values or labels). Those include bar chart, pie chart, line graph, and similar. And because it's the most used type of charts, there are numerous options to choose from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chartjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.chartjs.org"&gt;Chart.js&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 51.8K / 📅 19 Oct 2020 / 🧱 1.44 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Simple yet flexible JavaScript charting for designers &amp;amp; developers&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most popular open-source library for building responsive bar, pie, and line charts. I'd say this is the go-to library for most of the projects, as it fits most of the use cases.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;📊 See &lt;a href="https://cube.dev/blog/chart-js-example-with-dynamic-dataset/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=dataviz-ecosystem-2021"&gt;Chart.js Example with Dynamic Dataset&lt;/a&gt; to learn how to modify the data being displayed with Chart.js on-the-fly.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recharts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://recharts.org/en-US/"&gt;Recharts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 15.6K / 📅 13 Jan 2021 / 🧱 11.2 MB / 🔌 React&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A composable charting library built on React components&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As per description, "It was built on top of SVG elements with a lightweight dependency on D3 submodules." It's a good choice for React-based projects, because you can use it natively as a component, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LineChart&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;XAxis&lt;/span&gt; &lt;span class="na"&gt;dataKey&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;YAxis&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CartesianGrid&lt;/span&gt; &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#eee"&lt;/span&gt; &lt;span class="na"&gt;strokeDasharray&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"5 5"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"monotone"&lt;/span&gt; &lt;span class="na"&gt;dataKey&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"uv"&lt;/span&gt; &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#8884d8"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Line&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"monotone"&lt;/span&gt; &lt;span class="na"&gt;dataKey&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"pv"&lt;/span&gt; &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#82ca9d"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;LineChart&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;📊 See &lt;a href="https://react-dashboard.cube.dev?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=dataviz-ecosystem-2021"&gt;React Dashboard: an Ultimate Guide&lt;/a&gt; to for a comprehensive all-in-one walkthrough exploring how to build a dashboard with Recharts and connect it to a backend.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_6jFo-vG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x2hochifady5ugw82h24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_6jFo-vG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x2hochifady5ugw82h24.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highcharts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.highcharts.com/blog/products/highcharts/"&gt;Highcharts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 Paid &amp;amp; non-commercial licenses / ⭐️ 9.8K / 📅 22 Oct 2020 / 🧱 43.2 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Highcharts is a JavaScript charting library based on SVG, with fallbacks to VML and canvas for old browsers.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Highcharts is good for large companies whose products rely heavily on data visualization. You can see the code on GitHub, try and use it for non-commercial purposes. And then you can purchase Highcharts license just for Hightcharts or Highcharts plugin for Stocks, Maps, or Gantt if you'd like to use it for commercial purposes. We'll cover those later in this post as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;📊 See &lt;a href="https://cube.dev/blog/react-highcharts-example/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=dataviz-ecosystem-2021"&gt;React Highcharts Example with Cube.js&lt;/a&gt; for a practical tutorial on creating a dashboard with numerous Highcharts components.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBAKM-M9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x24lgis5mrr6dpzyrivq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBAKM-M9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x24lgis5mrr6dpzyrivq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chartistjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="http://gionkunz.github.io/chartist-js/"&gt;Chartist.js&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 12.4K / 📅 11 Sep 2019 / 🧱 535 KB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Chartist.js is the product of a community that was disappointed about the abilities provided by other charting libraries.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This library is not as actively maintained as others, however, it still worths a mention because of its size with no dependencies. Less than a megabyte, wow!&lt;/p&gt;

&lt;p&gt;Just like others, it uses SVGs, it's flexible and it has clear separation of concerns, i. e., CSS is in CSS and JS is in JS, which may not fit all projects, considering that a lot of projects are using CSS-in-JS approach, yet it still deserves our attention.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#victory" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://formidable.com/open-source/victory/"&gt;Victory&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 8.6K / 📅 1 Sep 2020 / 🧱 2.81 MB / 🔌 React&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;An ecosystem of composable React components for building interactive data visualizations.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Built by &lt;a href="https://formidable.com"&gt;Formidable Labs&lt;/a&gt;, a company behind such tools as &lt;a href="https://formidable.com/open-source/urql/"&gt;urqls&lt;/a&gt; and &lt;a href="https://formidable.com/open-source/spectacle/"&gt;Spectacle&lt;/a&gt;. Provides an opinionated, but fully overridable React components to use both in web and mobile (&lt;a href="https://github.com/FormidableLabs/victory-native"&gt;victory-native&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactvis" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://uber.github.io/react-vis/"&gt;React-vis&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 7.6K / 📅 19 Apr 2019 / 🧱 1.81 MB / 🔌 React&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A collection of React components to render common data visualization charts, such as line/area/bar charts, heat maps, scatterplots, contour plots, hexagon heatmaps, pie and donut charts, sunbursts, radar charts, parallel coordinates, and tree maps.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This library is React-friendly, high-level and customisable, expressive and industry-strong, because it is backed by Uber, so chances are you'll get your answers in case you bump into an issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amcharts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.amcharts.com/javascript-charts/"&gt;amCharts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 864 / 📅 18 Dec 2020 / 🧱 22.6 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A go-to library for data visualization. When you don't have time to learn new technologies.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is not as popular as the rest, however, it's actively maintained and claims to be easy to use. It could be a good choice if you'd like to combine it with other data viz library for geo and timeline data. I'll cover those in Geo and Timeline sections.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;📊 See &lt;a href="https://dev.to/cubejs/slack-vibe-the-open-source-analytics-for-slack-2khl"&gt;Slack Vibe, the Open Source Analytics for Slack&lt;/a&gt; for a story of an analytical tool that uses amCharts to visualize Slack data.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBAKM-M9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x24lgis5mrr6dpzyrivq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBAKM-M9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x24lgis5mrr6dpzyrivq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anycharts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.anychart.com"&gt;AnyCharts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 Paid &amp;amp; non-commercial licenses / ⭐️ 284 / 📅 29 Sep 2020 / 🧱 11.9 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Interactive JavaScript charts designed to be embedded and integrated into web, desktop, and mobile apps.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a paid library with non-commercial license, which could work well for a company who wants to save time and money on charts development, because a lot of charts pre-configured for you, just insert your data. Even such rear charts as Jump Line Chart, Sunburst Chart, or Circular Gauge.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-lowlevel-and-complex-dataviz-tools" class="anchor"&gt;
  &lt;/a&gt;
  2. Low-level and complex dataviz tools
&lt;/h1&gt;

&lt;p&gt;Here go tools for a more complicated and more advanced way to visualize your data. The main reason to go with this approach is either because none of the simple charts can be used to visualize your data, or you need to have more advanced interactivity on your elements.&lt;/p&gt;

&lt;p&gt;This approach requires a more advanced and specific knowledge in the area, e.g., SVG drawing or WebGL. Not everyone has access to such resource, so that's why there are libraries that expose a much simpler API for simple cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#d3js" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://d3js.org"&gt;D3.js&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 95.4K / 📅 22 Jan 2021 / 🧱 1 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;D3 (or D3.js) is a JavaScript library for visualizing data using web standards. D3 helps you bring data to life using SVG, Canvas, and HTML. D3 combines powerful visualization and interaction techniques with a data-driven approach to DOM manipulation, giving you the full capabilities of modern browsers and the freedom to design the right visual interface for your data.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is probably the most popular low-level data visualization library on the internet. There's a few keys to its popularity: first, its flexibility (many other data visualization tools are based on D3.js, we'll discuss them below); second, it's massive &lt;a href="https://observablehq.com/@d3/gallery"&gt;examples gallery&lt;/a&gt; which contains literally every visual you can imagine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;📊 See &lt;a href="https://d3-dashboard.cube.dev?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=dataviz-ecosystem-2021"&gt;D3 Dashboard Tutorial&lt;/a&gt; for a good jump-starting point to learn how to use D3.js with a backend.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tu9n4svr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m09nslq7fn2ug702kaol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tu9n4svr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m09nslq7fn2ug702kaol.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;d3-based-tools&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And here are a few D3-based libraries: &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plotlyjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://plotly.com/javascript/"&gt;Plotly.js&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;💵 OSS / ⭐️ 12.7K / 📅 21 Dec 2020 / 🧱 60.4 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Built on top of D3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Plotly allows you to combine the best of two words: simple api and power of a D3.js. It's good for quick prototyping as well as complex projects that require complicated graphs and need to be done in a timely manner.&lt;/p&gt;

&lt;p&gt;Plotly also has commercial offerings, but that's more in regard to its end-to-end development &amp;amp; deployment platform, Dash Enterprise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c3js" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://c3js.org"&gt;C3.js&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;💵 OSS / ⭐️ 9K / 📅 8 Aug 2020 / 🧱 1.46 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;D3-based reusable chart library.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#semiotic" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://semiotic.nteract.io"&gt;Semiotic&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;💵 OSS / ⭐️ 2.1K / 📅 21 Jan 2021 / 🧱 2.77 MB / 🔌 React&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Semiotic is a data visualization framework combining React &amp;amp; D3&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#taucharts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://taucharts.com"&gt;Taucharts&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;💵 OSS / ⭐️ 1.9K / 📅 26 Feb 2020 / 🧱 1.54 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Taucharts is a data-focused JavaScript charting library based on D3 and designed with passion.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/d3-based-tools&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apache-echarts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://echarts.apache.org/en/index.html"&gt;Apache ECharts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 44.9K / 📅 16 Jan 2021 / 🧱 36.3 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A Declarative Framework for Rapid Construction of Web-based Visualizations&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another open source charting library that has enormous pre-defined charts ready to be used. The reason I put it in this category, is because not only it has simple charts, like line and bar graphs, but also more complicated ones, like 3D globe, 3D lines, Scatter GL and others. Checkout their &lt;a href="https://echarts.apache.org/examples/en/index.html"&gt;example page&lt;/a&gt; and prepare to be amazed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rapha%C3%ABl" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dmitrybaranovskiy.github.io/raphael/"&gt;Raphaël&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 10.8K / 📅 14 Aug 2019 / 🧱 1.11 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Raphaël is a small JavaScript library that should simplify your work with vector graphics on the web&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Raphael is similar in D3.js in a way that it also allows you to draw your own svg graphics in html. E.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates canvas 320 × 200 at 10, 50&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;paper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Raphael&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;320&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creates circle at x = 50, y = 40, with radius 10&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;paper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Sets the fill attribute of the circle to red (#f00)&lt;/span&gt;
&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#f00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Sets the stroke attribute of the circle to white&lt;/span&gt;
&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stroke&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It hasn't been actively maintained and now most of the preference goes to D3.js. Yet it's still relevant and last release wasn't that long ago, so it does deserve a mention in the list.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-tables-and-data-grids" class="anchor"&gt;
  &lt;/a&gt;
  3. Tables and data grids
&lt;/h1&gt;

&lt;p&gt;Some data is tabular and thus belongs to a table. But tables are more framework-specific, so it's hard to collect data tables for every framework in one post. However, here are a few options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aggrid" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ag-grid.com"&gt;ag-Grid&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS &amp;amp; paid / ⭐️ 6.9K / 📅 15 Jan 2021 / 🧱 n/a / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Advanced Data Grid / Data Table supporting JavaScript / React / AngularJS / Web Components&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or, as it claims on its website, "The Best JavaScript Grid in the World." It's packed with features and has both OSS and Enterprise versions with bindings for vanilla JS, React, Angular, Vue, and even Polymer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#material-ui-data-grid" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://material-ui.com/components/data-grid/"&gt;Material UI Data Grid&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS &amp;amp; paid / ⭐️ 272 / 📅 26 Jan 2021 / 🧱 n/a / 🔌 React&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A fast and extendable data table and data grid for React.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's a feature-rich component which is complementary to the whole &lt;a href="https://material-ui.com"&gt;Material UI&lt;/a&gt; set of React components. It's available in MIT and commercial versions, too.&lt;/p&gt;

&lt;p&gt;There's also some competition here. For the sake of comparison, I should mention the &lt;a href="https://ant.design/components/table/"&gt;data table&lt;/a&gt; component of Ant Design library, which is great to use if you need a complete set of UI components.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-timeline-charts-amp-timebased-tools" class="anchor"&gt;
  &lt;/a&gt;
  4. Timeline charts &amp;amp; time-based tools
&lt;/h1&gt;

&lt;p&gt;Not all charting libraries include timelines and Gantt charts, they're quite unique in that sense. So if you have some time-based data to plot, then you may be interested in these libraries or plugins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highcharts-gantt" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.highcharts.com/blog/products/gantt/"&gt;Highcharts Gantt&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Similar to word clouds, you can have Highcharts Gantt plugin provided by the company. Check out out their page to learn more about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amcharts-timeline" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.amcharts.com/timeline-chart/"&gt;amCharts timeline&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Similar approach: get the main amCharts library and use additional timeline plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vistimeline" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/visjs/vis-timeline"&gt;vis-timeline&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 3.3K / 📅 3 years ago / 🧱 n/a / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Create a fully customisable, interactive timelines and 2d-graphs with items and ranges.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is an open-source alternative to the above two libs. It's quite flexible, well-designed, although its last release was about 3 years ago.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-geospatial-and-mapping-tools" class="anchor"&gt;
  &lt;/a&gt;
  5. Geospatial and mapping tools
&lt;/h1&gt;

&lt;p&gt;Now we've arrived to geo data, the type of data that has a geographic component to it and should have map-based data visualizations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leaflet" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://leafletjs.com"&gt;Leaflet&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 30K / 📅 4 Sep 2020 / 🧱 5.96 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Leaflet is the leading open-source JavaScript library for mobile-friendly interactive maps. Weighing just about 39 KB of gzipped JavaScript plus 4 KB of gzipped CSS code, it has all the mapping features most developers ever need.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Leaflet is lightweight, simple, and flexible, and is probably the most popular open-source mapping library at the moment. Leaflet was developed by Vladimir Agafonkin, who is currently in Mapbox (see below), and OSS community.&lt;/p&gt;

&lt;p&gt;There are numerous tutorials and guides on how to work with leaflet. So it's very cost and time efficient to start and keep working with Leaflet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mapbox" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mapbox.com"&gt;Mapbox&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 Free-ish &amp;amp; paid / ⭐️ 7.2K / 📅 28 Jan 2021 / 🧱 34 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Mapbox is a mapping and location cloud platform for developers.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These guys provide SDKs and APIs to companies like Foursquare, Lonely Planet, and Facebook. You can do a lot with Mapbox, and their APIs are a pleasure to work with, well-documented, and well-supported. Check out &lt;a href="https://docs.mapbox.com/mapbox-gl-js/example/"&gt;their examples page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mapbox isn't completely free. It has a free tier for low volume apps. So it's free for up to 25,000 mobile users and 50,000 web loads. Beyond that you'd need to pay per additional requests.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;📊 See &lt;a href="https://mapbox-guide.cube.dev?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=dataviz-ecosystem-2021"&gt;JavaScript Map Data Visualization with Mapbox&lt;/a&gt; for a complete guide on Mapbox and different kinds of maps, from heatmaps to choropleths.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uhz25l0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lqjyagillikigd8t95k1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uhz25l0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lqjyagillikigd8t95k1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-maps" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://developers.google.com/maps/documentation/javascript/visualization"&gt;Google Maps&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Google Maps can do a lot more than just show places on a map. You can map data across the world, create heatmaps, and even size circles.&lt;/p&gt;

&lt;p&gt;Google has a CDN URL you'd need to include in your project or use a framework-specific wrapper, like &lt;a href="https://www.npmjs.com/package/@react-google-maps/api"&gt;&lt;code&gt;@react-google-maps/api&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amcharts-maps" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.amcharts.com/javascript-maps/"&gt;amCharts maps&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If your project is already using amCharts, then you might be interested in using amCharts maps. There is no need to install anything extra, the main amCharts package already includes everything needed for creating a map visualization.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-word-clouds" class="anchor"&gt;
  &lt;/a&gt;
  6. Word clouds
&lt;/h1&gt;

&lt;p&gt;Not all data is quantifiable. Some data can only be illustrated with words. This is a perfect use case scenario for word clouds. A few libraries allow you to do those.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#d3cloud" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.jasondavies.com/wordcloud/"&gt;d3-cloud&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 3.3K / 📅 3 years ago / 🧱 n/a / 🔌 universal&lt;/p&gt;

&lt;p&gt;Great library to use if you already have D3.js as a part of your code ecosystem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amcharts-word-clouds" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.amcharts.com/demos/word-cloud/"&gt;amCharts word clouds&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is a plugin for amCharts. See more details about amCharts earlier in this post. To create word cloud you'd need the main library + the &lt;code&gt;wordCloud&lt;/code&gt; plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highcharts-word-clouds" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.highcharts.com/docs/chart-and-series-types/word-cloud-series"&gt;Highcharts word clouds&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Similar to amCharts word clouds, if you want to make word clouds with Highcharts, you'd need &lt;code&gt;modules/wordcloud.js&lt;/code&gt; module.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-3d-visualization-tools" class="anchor"&gt;
  &lt;/a&gt;
  7. 3D visualization tools
&lt;/h1&gt;

&lt;p&gt;While every tool we've observed above was focused on planar, two-dimensional data visualizations, there's one more dimension to it 😀 The following tools help create 3D visuals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#threejs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://threejs.org"&gt;Three.js&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 66.6K / 📅 24 Dec 2020 / 🧱 24.4 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The aim of the project is to create an easy to use, lightweight, 3D library with a default WebGL renderer. The library also provides Canvas 2D, SVG and CSS3D renderers in the examples.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Three.js is a different take on visualizing data. It's used to create and display animated 3D computer graphics in a web browser using WebGL. Three.js can be used not only visualize data, but also create such pieces of art as &lt;a href="https://threejs.org/examples/#webgl_animation_keyframes"&gt;Littlest Tokyo&lt;/a&gt;. The data can take ANY form your like. Literary. It's only limited by your creativity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visgraph3d" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/visjs/vis-graph3d"&gt;vis-graph3d&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;💵 OSS / ⭐️ 44.9K / 📅 16 Jan 2021 / 🧱 36.3 MB / 🔌 universal&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Graph3d is an interactive visualization chart to draw data in a three dimensional graph. You can freely move and zoom in the graph by dragging and scrolling in the window.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a very interesting lightweight alternative to D3.js and Three.js.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-remarks" class="anchor"&gt;
  &lt;/a&gt;
  Final remarks
&lt;/h1&gt;

&lt;p&gt;Honestly, it's impossible to include everything in one list. But I hope this post helped you get a better idea about the "big players" and types of data visualizations.&lt;/p&gt;

&lt;p&gt;It's worth mentioning that to communicate your data better to your user, it's always a good idea to mix and match different types of data visualizations. Moreover, you can also have a date formatting library (such as &lt;a href="https://momentjs.com"&gt;Moment.js&lt;/a&gt;) or number formatting library (such as &lt;a href="http://numeraljs.com"&gt;numeral.js&lt;/a&gt;) that could accompany your graphs and highlight any special or outstanding number in your dataset. &lt;/p&gt;

&lt;p&gt;Also, if you need an API to serve data to your charts or data visualization components, please consider to use &lt;a href="https://cube.dev?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=dataviz-ecosystem-2021"&gt;Cube.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any particular recommendation or personal experience with any of the listed libraries to share, please feel free to comment below! 🙌&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>frontend</category>
      <category>dataviz</category>
    </item>
    <item>
      <title>A snippy JS function to trim those long strings</title>
      <author>Brett Thurston</author>
      <pubDate>Fri, 05 Feb 2021 16:23:04 +0000</pubDate>
      <link>https://dev.to/brettthurs10/a-snippy-js-function-to-trim-those-long-strings-116h</link>
      <guid>https://dev.to/brettthurs10/a-snippy-js-function-to-trim-those-long-strings-116h</guid>
      <description>&lt;p&gt;In this article you'll find a method to use whenever you have a long string that may funk up your UI components. &lt;/p&gt;

&lt;p&gt;I was working on a list item component for a project and found a problem we run into a lot. What I have is a list of cards that bring in a title, publish date, and an episode description. Instead of manually trimming the string in the component itself, what if we could trim the string on the fly? This is especially useful when working with JS frameworks like React JS and Vue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_OyW4Q2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a38faqhp502ort0lg0zr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_OyW4Q2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a38faqhp502ort0lg0zr.png" alt="Screen Shot 2021-02-05 at 9.27.07 AM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The description length of each episode will vary from each publication. I'm positive the descriptions will run past the limit I want them to in these card components. Then my list of cards will all have different heights. I like symmetry so I needed to trim these description strings on the fly. Here's how I did it and one of many different ways to do it.&lt;/p&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function truncate(string, characterLimit) {
/* first argument, pass in a string */
/* optional second argument: pass in a character 
      limit for this string. */
/* reminder: ?? is a nullish coalescing operator. 
      if we find that the 2nd argument passed in is 
      null or undefined, we default the character limit 
      to 160 characters */
  let limit = characterLimit ?? 160;
/* set up a variable called finalString to return at the end.  */
  let finalString;
/* if condition that asks if the string character count is 
       greater than or equal to the limit variable. if it is then 
       we want to remove everything after the number of the 
       limit set and append ellipse ("...") */
  if (string.length &amp;gt;= limit) {
    finalString = string.substring(0, limit);
    finalString = finalString + "...";
  } else {
/* if the string is less than or equal to the limit, let's go 
       ahead and pass the string by assigning it to our 
       finalString variable */
    finalString = string;
  }
  return finalString;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's see what happens when we use this method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const shortDescription = "If a parsley farmer gets sued, can they garnish his wages?"

const longDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam ex ante, molestie eu nisl non, tempor rutrum tortor. Suspendisse ultricies odio ac turpis porta volutpat. Vestibulum rhoncus laoreet elit ut dictum. Ut id lorem ut ipsum cursus eleifend sed vitae dui. Mauris commodo elit at leo consectetur, ut blandit lacus laoreet. Vivamus placerat congue consectetur. Vivamus non nisi a tortor aliquet dictum. Sed ut condimentum nunc. In hac habitasse platea dictumst. Praesent id egestas libero. Vivamus sed tellus orci. Ut luctus mauris nunc, pulvinar bibendum urna dictum non. Duis bibendum commodo arcu, ut elementum diam vulputate vitae."

truncate(longDescription)
/* "Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
Etiam ex ante, molestie eu nisl non, tempor rutrum tortor. 
Suspendisse ultricies odio ac turpis porta v..." */

truncate(longDescription, 250)
/* "Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
Etiam ex ante, molestie eu nisl non, tempor rutrum tortor. 
Suspendisse ultricies odio ac turpis porta volutpat. Vestibulum 
rhoncus laoreet elit ut dictum. Ut id lorem ut ipsum cursus 
eleifend s..." */

truncate(shortDescription)
/* "If a parsley farmer gets sued, can they garnish his wages?" */

shortDescription.length
/* 58
58 is less than the default 160 limit, so the string is passed 
through unmodified */
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So this function not only trims your long copy descriptions, but it also allows you to pass in a limit to override whatever default limit you set. This is super handy because now, you've written a function that becomes super nimble. For instance, I used the same truncate function in this fixed audio player bar I'm working on. Notice it's trimming the episode title.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IA43C8ny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hiwxd57ms9oizuy6ig9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IA43C8ny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hiwxd57ms9oizuy6ig9i.png" alt="Screen Shot 2021-02-05 at 10.02.55 AM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Whenever you're writing your functions make sure they have one responsibility, but allow for customization as needed. &lt;/p&gt;

&lt;p&gt;So now you've got one way to trim a long description in the UI. You've seen how to write a function that considers future use in other areas of your program too.&lt;/p&gt;

&lt;p&gt;How would you handle this equation? Share your solutions below. &lt;/p&gt;

&lt;p&gt;Thanks for reading and happy snipping!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@triconautes?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Les Triconautes&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/scissors-thread?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Typescript can be confusing</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 05 Feb 2021 15:08:19 +0000</pubDate>
      <link>https://dev.to/codesphere/typescript-can-be-confusing-5be4</link>
      <guid>https://dev.to/codesphere/typescript-can-be-confusing-5be4</guid>
      <description>&lt;p&gt;At Codesphere, we code mostly in Typescript, not necessarily because it is our favorite language, but because we found out that it made us the most productive.&lt;/p&gt;

&lt;p&gt;To start off, here are some benefits of Typescript that make us more efficient:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ability to code in the same language in both frontend and backend&lt;/li&gt;
&lt;li&gt;(mostly) great OO + types&lt;/li&gt;
&lt;li&gt;asynchronous code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, recently I came across two very strange behaviors, (I know, they are common in the JavaScript Bubble) and I felt the urge to share them!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-1-2-10mapparseint" class="anchor"&gt;
  &lt;/a&gt;
  1: ['1', '2', '10'].map(parseInt);
&lt;/h3&gt;

&lt;p&gt;I came across this when I wanted to format some user input, convert it into numbers and put them in a chart.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gR1NG6zp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qw0lh9siscqdo1s6x0sm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gR1NG6zp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qw0lh9siscqdo1s6x0sm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't believe me? Open up a console in your browser, paste in the following, and press enter.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;['1', '2', '10'].map(parseInt);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This does not work, because map passes three arguments into &lt;code&gt;parseInt()&lt;/code&gt; on each iteration. The second argument index is passed into parseInt as a radix parameter. So each string in the array is parsed using a different radix. &lt;code&gt;'2'&lt;/code&gt; is parsed as radix 1, which results in NaN, &lt;code&gt;'10'&lt;/code&gt; is parsed as radix 2, which is 3, and &lt;code&gt;'1'&lt;/code&gt; is parsed as the default radix 10 because its index 0 is falsy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-inheritance-of-readonly-in-typescript" class="anchor"&gt;
  &lt;/a&gt;
  2: Inheritance of 'readonly' in Typescript
&lt;/h3&gt;

&lt;p&gt;During a code review at Codesphere, my colleague Roman came across the idea to make methods readonly. What happened next left us a little confused.&lt;/p&gt;

&lt;p&gt;It's actually not possible to make a method readonly, but it is possible to make a readonly property with a function type, which has the same effect.&lt;/p&gt;

&lt;p&gt;Interestingly enough, it is not possible to assign the property again for instances of the same class, but it is possible to inherit a class and override the property, as well as, assign the property on an instance of a subclass.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Roman {
    readonly jonas: () =&amp;gt; void = () =&amp;gt; console.log("huh?");
}

class Elias extends Roman {
    jonas: () =&amp;gt; void = () =&amp;gt; console.log("oh no, override works!");
}

const elias = new Elias();
elias.jonas(); // oh no, override works!
elias.jonas = () =&amp;gt; console.log("oh no, assignment works too!");
elias.jonas(); // oh no, assignment works too!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's all for now, I hope that you enjoyed the read! The support for Typescript is one of the core features of Codesphere IDE. By the way - my name is Saji and I joined the Codesphere team because I love coding and our vision to improve the developer experience.&lt;/p&gt;

&lt;p&gt;What is your experience with Typescript? Feel free to share your story about the things you find confusing in Typescript!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>codequality</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Question to Ask Yourself When Imposter Syndrome Strikes</title>
      <author>Ana Vela</author>
      <pubDate>Fri, 05 Feb 2021 14:40:16 +0000</pubDate>
      <link>https://dev.to/anaveecodes/the-question-to-ask-yourself-when-imposter-syndrome-strikes-kmk</link>
      <guid>https://dev.to/anaveecodes/the-question-to-ask-yourself-when-imposter-syndrome-strikes-kmk</guid>
      <description>&lt;p&gt;Imposter Syndrome is what happens when you feel inadequate as a developer. Despite all the skills and experience you have, this feeling still creeps up from time to time. From junior to senior developers, everyone will face this at one point or another.&lt;/p&gt;

&lt;p&gt;After reading this article by Mark Manson, I found one way to recalibrate when it comes to the way I'm feeling about my work.  &lt;a href="https://markmanson.net/question"&gt;The Most Important Question of Your Life&lt;/a&gt; can apply to just about anything, so I modified the question for developers. And the question is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are you willing to sustain the pain that comes with learning, improving, and working in web development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And how do developers suffer? Well, here are a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Debugging issues with no clear solution&lt;/li&gt;
&lt;li&gt;Learning difficult concepts that don't sink in easily&lt;/li&gt;
&lt;li&gt;Having to learn more new technology to stay relevant&lt;/li&gt;
&lt;li&gt;Deleting code you worked hard to write because it is not needed anymore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your answer to the question above is &lt;strong&gt;yes&lt;/strong&gt;, then here are some tips to ease the pain of pursuing web development:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reverse-engineer-the-role-you-want-to-have" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Reverse Engineer the Role You Want to Have&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Look up and carefully read job descriptions for your dream role. Find interviews of developers holding that role to learn more about what they do. Some great podcasts where you can find interviews are &lt;a href="https://www.codenewbie.org/podcast"&gt;The Code Newbie Podcast&lt;/a&gt; and &lt;a href="https://learntocodewith.me/podcast/"&gt;The Learn Code With Me Podcast&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Reach out to companies who hire for that role and ask them how they evaluate potential applicants so you can plan to build those skills.  Create goals and review them every day to make sure you are on the right path. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-with-others" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Connect with Others&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;If you are going to suffer anyway, why not suffer together? Join meetups, discord servers, and/or get more active on social media. I highly recommend learning more about communities such as &lt;a href="https://devinitelyhealthy.xyz/"&gt;#devinitelyhealthy&lt;/a&gt; and &lt;a href="https://www.100daysofcode.com/"&gt;#100daysofcode&lt;/a&gt; that have great support for developers of all levels. &lt;/p&gt;

&lt;p&gt;If you prefer one-on-one interaction, either look into getting a mentor or become a mentor yourself.  &lt;a href="https://blog.pragmaticengineer.com/"&gt;Gergely Orosz&lt;/a&gt; wrote a comprehensive article about &lt;a href="https://blog.pragmaticengineer.com/developers-mentoring-other-developers/"&gt;developers mentoring other developers&lt;/a&gt; that gives you a good sense of what mentorship is like.  &lt;a href="https://www.samjulien.com/"&gt;Sam Julien&lt;/a&gt;  has useful recommendations if you prefer to  &lt;a href="https://samjulien.hashnode.dev/how-to-self-mentor-ckiz5pad900ttr1s1fjqg4fah"&gt;self-mentor&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-projects" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Build Projects&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Whether you are solidifying your current skills or trying to learn new concepts, building projects is a way to show what your learning. These projects can be talking points for interview questions or ways to share what you are learning with others. Create small projects and constantly keep building. You don’t need to add so many technologies to one project. It could be focused on concepts you want to reinforce or maybe you want to try something new.&lt;/p&gt;

&lt;p&gt;If you need project ideas, take a look at Florin Pop's  &lt;a href="https://github.com/florinpop17/app-ideas"&gt;App Ideas Collection&lt;/a&gt; on GitHub. Project ideas are organized by level with lots of detailed information to get you started. You could also try some coding challenges that come with designs and specs for you to build a project from sites like &lt;a href="https://www.frontendmentor.io/"&gt;Frontend Mentor&lt;/a&gt;  or  &lt;a href="https://www.frontendmentor.io/"&gt;Dev Challenges&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teach-what-you-know" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Teach What You Know&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Sharing your knowledge forces you to get clear about basic concepts in a way that is easy for others to understand. For example, you could create tutorials or share how you went about learning a new technology. You can write blogs, start a YouTube channel, or even write an e-book. You can also help other developers troubleshoot issues. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maintain-a-career-doc" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Maintain a Career Doc&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;With all this activity, you'll want to keep track of what you are doing and learning.  &lt;a href="https://udaraw.com/"&gt;Udara Weerasinghe&lt;/a&gt; wrote a detailed post about this called  &lt;a href="https://udaraw.com/career-docs/"&gt;Level Up Your Resume: Why You Should Start a Career Doc&lt;/a&gt;. You'll see how much progress you've made by regularly logging what you're learning and these details will be ready for you when you are job hunting. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Imposter Syndrome does not have to stop you from pursuing what you want. Make it the fuel that gets you out of your comfort zone, into your dream role, or leveling up in your current position.&lt;/p&gt;

&lt;p&gt;What are some ways you deal with imposter syndrome? Feel free to add a comment here or reach out to me on  &lt;a href="https://twitter.com/anaveecodes"&gt;Twitter&lt;/a&gt;  or  &lt;a href="https://www.instagram.com/anaveecodes/"&gt;Instagram&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@jeshoots?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;JESHOOTS.COM&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/frustrated?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>motivation</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>Generators in Javascript: How to use them</title>
      <author>Karim Elghamry</author>
      <pubDate>Fri, 05 Feb 2021 14:04:54 +0000</pubDate>
      <link>https://dev.to/karimelghamry/generators-in-javascript-how-to-use-them-372d</link>
      <guid>https://dev.to/karimelghamry/generators-in-javascript-how-to-use-them-372d</guid>
      <description>&lt;h1&gt;
  &lt;a href="#opening-note" class="anchor"&gt;
  &lt;/a&gt;
  Opening Note
&lt;/h1&gt;

&lt;p&gt;Hello fellow programmers 👋 In this article, we will walk-through the basics of generators in Javascript, which was introduced in ES6, and get across some real use cases.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-generator" class="anchor"&gt;
  &lt;/a&gt;
  What is a generator?
&lt;/h1&gt;

&lt;p&gt;From its name, a generator is a &lt;strong&gt;function&lt;/strong&gt; that allows you to &lt;strong&gt;generate&lt;/strong&gt; one or more values by exiting and re-entering the execution procedure whilst saving its state (context) across multiple calls. To put it in simpler words, a generator is similar to normal functions, but has the ability to continue execution on demand at the point at which it was previously terminated, simply by saving its previous state. The following flowchart illustrates the difference between a normal function and a generator function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMVZ21Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wmj54httcqn0v71kpe7l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMVZ21Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wmj54httcqn0v71kpe7l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax" class="anchor"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h2&gt;

&lt;p&gt;As you've already guessed, there are some syntactic differences between a normal function and a generator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Normal Function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;normalFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// your logic goes here&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* --------------------------------- */&lt;/span&gt;

&lt;span class="c1"&gt;// Generator Function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;generatorFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// your logic&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// your logic&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/*
    .
    .
    .
  */&lt;/span&gt;

  &lt;span class="c1"&gt;// your logic&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;valueN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first noticeable difference in syntax is that a generator is declared using the &lt;code&gt;function*&lt;/code&gt; keyword instead of &lt;code&gt;function&lt;/code&gt;. Also, notice how we use the &lt;code&gt;return&lt;/code&gt; keyword in a normal function, while we use the &lt;code&gt;yield&lt;/code&gt; keyword in a generator function instead, respectively. The &lt;code&gt;yield&lt;/code&gt; keyword inside the generator allows us to 'return' a value, terminate execution, save the state (context) of the current lexical scope and waits for the next invocation to resume execution at the last termination point. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; In a normal function, you can only execute the &lt;code&gt;return&lt;/code&gt; keyword once, which will return a value and terminate the function completely. In a generator, you can use the &lt;code&gt;yield&lt;/code&gt; keyword multiple times as much as you want to 'return' values on consecutive calls. You can also use the &lt;code&gt;return&lt;/code&gt; keyword inside a generator, but leave this discussion for a different day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#invocation" class="anchor"&gt;
  &lt;/a&gt;
  Invocation
&lt;/h2&gt;

&lt;p&gt;Now that we've covered the differences in syntax between both functions, let us see how does one invoke a generator and yield its values. First, consider the following piece of code which illustrates the invocation of a normal function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;normalFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I have been invoked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// invocation&lt;/span&gt;
&lt;span class="nx"&gt;normalFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In general, you can invoke a normal function by typing the function's signature followed by a pair of parentheses &lt;code&gt;()&lt;/code&gt;. The previous code will output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;invoked&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's try to use the same procedure to invoke a generator. Inspect the following piece of code closely:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;generatorFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I have been invoked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resuming execution&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// does this invoke the generator?&lt;/span&gt;
&lt;span class="nx"&gt;generatorFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What do you expect from such program? Technically, we would expect that the function is to be executed until it hits the first yield keyword. However, the output of the previous program was empty:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;that is because the normal invocation syntax &lt;strong&gt;does not&lt;/strong&gt; actually execute the body of the generator function. Instead, it creates a &lt;code&gt;Generator&lt;/code&gt; Object that holds multiple properties and methods. To prove this, we can try to print out &lt;code&gt;console.log(generatorFunction())&lt;/code&gt; and the output should be as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Generator&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, the question is; &lt;strong&gt;how do we actually yield our values from a generator?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;well, there are some important methods that belong to the &lt;code&gt;Generator&lt;/code&gt; Object that we can utilize. The first and the most important method is called &lt;code&gt;next()&lt;/code&gt;, which, from its name, yields the next value from the defined generator. Now lets modify our previous code to actually yield our values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;generatorFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I have been invoked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resuming execution&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// store the Generator Object in a variable&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generatorFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// execute until we yield the first value&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// resume execution until we yield the second value&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// execute until the function ends&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;the output of the previous code is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;invoked&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;resuming&lt;/span&gt; &lt;span class="nx"&gt;execution&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's inspect the output line by line. When calling the first &lt;code&gt;foo.next()&lt;/code&gt; method, the generator began to execute until it hit the first yield keyword and stops the execution. This is reflected in the first two lines of the output. Notice how the &lt;code&gt;foo.next()&lt;/code&gt; returned an &lt;code&gt;Object&lt;/code&gt; instead of the actual yielded value. This Object should always contain the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;'value': which holds the current yielded value from the generator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;'done': a boolean flag which indicates whether the generator execution has reached the end or not.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets move on to the second &lt;code&gt;foo.next()&lt;/code&gt; call. As expected, the generator resumes the execution from the last termination step and executes until it hits the second yield keyword, which is reflected in the third and fourth lines of the output. Notice how the &lt;code&gt;done&lt;/code&gt; flag is still set by &lt;code&gt;false&lt;/code&gt;, as it did not yet reach the end of the function.&lt;/p&gt;

&lt;p&gt;On the last &lt;code&gt;foo.next()&lt;/code&gt; call, the function resumes execution after the second yield keyword and finds nothing to execute, which indicates that we've reached the end of the function. At this point, there are no more values to yield and the &lt;code&gt;done&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt; as reflected in the last line of the output.&lt;/p&gt;

&lt;p&gt;Now that we've covered the basic concepts of generators in Javascript, lets take a look at some of its useful use cases.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-cases" class="anchor"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#use-case-1-mimic-the-raw-range-endraw-function-from-python" class="anchor"&gt;
  &lt;/a&gt;
  Use case 1: Mimic the &lt;code&gt;range()&lt;/code&gt; function from Python
&lt;/h2&gt;

&lt;p&gt;According to the Python docs, "the &lt;code&gt;range&lt;/code&gt; type represents an immutable sequence of numbers and is commonly used for looping a specific number of times in for loops." The &lt;code&gt;range()&lt;/code&gt; function in Python usually contains the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;start&lt;/code&gt; (optional, default = 0): the first number in the sequence, inclusive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;end&lt;/code&gt; (required): the last number of the sequence, exclusive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;step&lt;/code&gt; (optional, default = 1): the difference between any two given numbers in the sequence.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, the usage of the &lt;code&gt;range()&lt;/code&gt; function in Python is shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Python code
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# output:
# 0
# 1
# 2
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;what we need to do is to mimic this functionality in Javascript using generators. Inspect the following piece of code closely:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
range function implemented in Javascript
*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets take it step by step. Firstly, the function signature defines a generator that takes three params: &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;step&lt;/code&gt;, in which &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;step&lt;/code&gt; are defaulted to &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; respectively. Moving onto the function body, it contains a basic for loop that starts iterating from &lt;code&gt;start&lt;/code&gt; inclusive till &lt;code&gt;end&lt;/code&gt; exclusive. Inside the loop's scope, we yield the value &lt;code&gt;i&lt;/code&gt; of the current number in the sequence.&lt;/p&gt;

&lt;p&gt;Lets see it in action. The following piece of code illustrates different examples of the implemented &lt;code&gt;range&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// first example&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
output:
0
1
2
3
*/&lt;/span&gt;

&lt;span class="c1"&gt;// second example&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
output:
2
3
*/&lt;/span&gt;

&lt;span class="c1"&gt;// third example&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
output:
1
3
5
7
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-case-2-visualize-the-bubble-sort-algorithm" class="anchor"&gt;
  &lt;/a&gt;
  Use case 2: Visualize the Bubble Sort algorithm
&lt;/h2&gt;

&lt;p&gt;In this use case, we will attempt to output a step-by-step execution of the Bubble Sort algorithm on a given array to easily visualize it. Briefly, bubble sort works as follows; given an array of length &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; as the current iteration, propagate the &lt;code&gt;max(array[0:n - i])&lt;/code&gt; to the index &lt;code&gt;n - i&lt;/code&gt; repeatedly until the array is sorted. The default implementation is shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
Bubble Sort implementation in javascript
*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bubbleSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// if the current value is larger than its adjacent&lt;/span&gt;
      &lt;span class="c1"&gt;// swap them together&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our job is to visualize the step-by-step comparisons and swaps that are carried out throughout this algorithm. This can be easily done using generators. We simply yield the current array after each iteration in the inner loop. The new function will be as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
visualize Bubble Sort implementation in javascript
*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;visualizeBubbleSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will yield the array for each iteration in the inner loop, showing us the current state of the array. Consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;inputArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentStep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;visualizeBubbleSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputArray&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`step #&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentStep&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: [&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;currentStep&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The output of the previous program will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;we can clearly see what is happening throughout the algorithm thanks to the implemented generator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;step 1 -&amp;gt; swap &lt;code&gt;40&lt;/code&gt; with &lt;code&gt;30&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;step 2 -&amp;gt; swap &lt;code&gt;40&lt;/code&gt; with &lt;code&gt;2&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;step 3 -&amp;gt; swap &lt;code&gt;40&lt;/code&gt; with &lt;code&gt;20&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;step 4 -&amp;gt; swap &lt;code&gt;30&lt;/code&gt; with &lt;code&gt;2&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;step 5 -&amp;gt; swap &lt;code&gt;30&lt;/code&gt; with &lt;code&gt;20&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;step 6 -&amp;gt; do not swap anything, array is sorted&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this technique can be used to visualize any given algorithm easily. It can be very helpful sometimes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-case-3-generate-distinct-random-numbers-on-demand" class="anchor"&gt;
  &lt;/a&gt;
  Use case 3: Generate distinct random numbers on demand
&lt;/h2&gt;

&lt;p&gt;In this use case, we will try to generate a series of &lt;strong&gt;distinct&lt;/strong&gt; random numbers using generators. First, we would put some constraints on the inputs and outputs as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The function should only generate &lt;strong&gt;positive integers.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The function should take a parameter &lt;code&gt;limit&lt;/code&gt;, which determines the maximum number of generated integers as well as the largest possible generated integer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The function should have a way to store the valid pool of integers to choose from.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following the previous constrains carefully, we can implement this functionality using generators easily:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
distinctRandom implementation in js 
*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;distinctRandom&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// we create an array that contains all numbers in range [0:limit)&lt;/span&gt;
  &lt;span class="c1"&gt;// this is our initial pool of numbers to choose from&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;availableValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// we repeatedly loop until the available pool of numbers is empty&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;availableValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// generate a random index in range [0: availableValues.length)&lt;/span&gt;
    &lt;span class="c1"&gt;// then, yield the number that is present at the chosen index&lt;/span&gt;
    &lt;span class="c1"&gt;// Finally, remove the picked item from the pool of available numbers&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentRandom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;availableValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;availableValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentRandom&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;availableValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentRandom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Briefly, the previous generator tries to maintain a pool of available integers to choose from. In each iteration, we randomly choose a number from this pool, then yield it and remove it from the valid pool. Theoretically, the maximum number of generated integers should be equal to &lt;code&gt;limit&lt;/code&gt; and all generated integers must be distinct. We can easily proof this by exhausting the implemented generator until the end of execution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// we set the limit to 8&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;distinctRandom&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*
sample output:
3
7
5
2
4
0
1
6
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#closing-note" class="anchor"&gt;
  &lt;/a&gt;
  Closing Note
&lt;/h1&gt;

&lt;p&gt;Generators are a great addition to ES6 which provides a solution for multiple problems and use cases. You can use them anywhere for sure, but I would suggest looking into alternative solutions for the problem in-hand before settling for a generator, as they can introduce more complexity to your code as well as they can be hard to debug at times. Nevertheless, happy coding 🎉  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hosting Kotlin/JS on GitHub Pages via GitHub Actions</title>
      <author>Sebastian Aigner</author>
      <pubDate>Fri, 05 Feb 2021 12:16:28 +0000</pubDate>
      <link>https://dev.to/kotlin/hosting-kotlin-js-on-github-pages-via-github-actions-3gep</link>
      <guid>https://dev.to/kotlin/hosting-kotlin-js-on-github-pages-via-github-actions-3gep</guid>
      <description>&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; is an easy way to &lt;strong&gt;host your Kotlin/JS application&lt;/strong&gt; - and in combination with the &lt;strong&gt;continuous integration&lt;/strong&gt; service &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;, you can easily set up a smooth development (and deployment!) experience for your projects. Read on to learn how you can &lt;strong&gt;build and test your application on GitHub's CI&lt;/strong&gt;, and get your &lt;strong&gt;Kotlin/JS web apps published for free&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we are going to configure GitHub Actions and Pages so that &lt;strong&gt;new code&lt;/strong&gt; pushed to our repository or added via pull request &lt;strong&gt;is automatically validated&lt;/strong&gt; (by having the project built and our tests run on GitHub's servers), and code pushed to the main branch of our project is automatically made &lt;strong&gt;available to the public&lt;/strong&gt; (by generating and publishing production artifacts of our app).&lt;/p&gt;

&lt;p&gt;To achieve this, we are going to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#sample-setup"&gt;Set up a quick Kotlin/JS project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#github-integration"&gt;Share its code on GitHub&lt;/a&gt; (via IntelliJ IDEA's Git integration)&lt;/li&gt;
&lt;li&gt;&lt;a href="#gh-action-setup"&gt;Set up GitHub Actions' workflow YAML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gh-pages-setup"&gt;Set up GitHub pages to work with the result of our Actions workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If you already know the basics, and want to skip straight to the configuration section, &lt;a href="#gh-action-setup"&gt;click here&lt;/a&gt; – or &lt;a href="https://github.com/SebastianAigner/kotlin-js-on-gh-pages"&gt;find the sample project directly on GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-sample-kotlinjs-application" class="anchor"&gt;
  &lt;/a&gt;
  Setting up our sample Kotlin/JS application &lt;a&gt;
&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To &lt;em&gt;deploy&lt;/em&gt; a project, we must first &lt;em&gt;have&lt;/em&gt; a project. For this demo, I will use an &lt;strong&gt;example generated via project wizard&lt;/strong&gt; – if you already have a Kotlin/JS application you would like to deploy, feel free to skip ahead and use it instead.&lt;/p&gt;

&lt;p&gt;A boilerplate Kotlin/JS project is quickly generated in &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ IDEA&lt;/a&gt; by navigating to File | New | Project..., selecting "Kotlin" in the sidebar, and choosing a &lt;strong&gt;project template&lt;/strong&gt; in the "Kotlin/JS" section (I'm choosing a React project). We just need to make sure that a Project JDK is selected. For everything else, the default settings are fine and don't need to be adjusted:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8F45ZQep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1nzk5keyrms4u7bh619e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8F45ZQep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1nzk5keyrms4u7bh619e.png" alt="new-project-wizard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a basic project, let's start by &lt;strong&gt;getting it on GitHub&lt;/strong&gt; - creating a repository and pushing our code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-our-code-on-github" class="anchor"&gt;
  &lt;/a&gt;
  Putting our code on GitHub &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We could, of course, use &lt;a href="https://guides.github.com/activities/hello-world/#repository"&gt;GitHub's web interface&lt;/a&gt; to set up our repository, and wire up our local repository manually – but &lt;strong&gt;&lt;a href="https://www.jetbrains.com/help/idea/version-control-integration.html"&gt;IntelliJ IDEA's Version Control Integration&lt;/a&gt;&lt;/strong&gt; makes it &lt;strong&gt;even smoother&lt;/strong&gt; to move our project code into a new GitHub Repository. We simply select "&lt;strong&gt;Share Project on GitHub&lt;/strong&gt;" in the "VCS" tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WkkRshol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e5y09kdv0ube2dmztwq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkkRshol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e5y09kdv0ube2dmztwq9.png" alt="share project on github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If this is your first time using this feature, IntelliJ IDEA might ask you to &lt;strong&gt;authenticate&lt;/strong&gt; using your GitHub account. You then get to specify your repository name, its visibility (private/public), and can provide a short description that will show up on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zWudM5hT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i42fc1w8jug5l95wafiv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWudM5hT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i42fc1w8jug5l95wafiv.png" alt="share proj"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once confirmed, IntelliJ IDEA will create a GitHub project for you, and show you the "Add Files For Initial Commit" window, which we can simply accept by pressing "Add":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rZIM4gfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/29g49u26awwu8ebz8ig3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rZIM4gfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/29g49u26awwu8ebz8ig3.png" alt="initial commit including gitignore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you might have noticed, IntelliJ IDEA makes our life a bit easier here by &lt;strong&gt;auto-generating&lt;/strong&gt; a default set of &lt;code&gt;.gitignore&lt;/code&gt; files, making sure that any files which shouldn't be checked into source control (such as build artifacts or local configurations) are &lt;strong&gt;correctly ignored&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the commit is finished, we see a small notification bubble containing a &lt;strong&gt;link to our GitHub repository&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PseGI43A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/st0uwzx0v3qi9s66k4w6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PseGI43A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/st0uwzx0v3qi9s66k4w6.png" alt="success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-github-actions" class="anchor"&gt;
  &lt;/a&gt;
  Setting up GitHub Actions &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Time to set up GitHub Actions! Actions will be responsible for &lt;strong&gt;building and testing&lt;/strong&gt; our project – turning our Kotlin source files into &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.html&lt;/code&gt; artifacts, running any unit tests we might have, and copying files into the right location for deployment on GitHub Pages (a branch called &lt;code&gt;gh-pages&lt;/code&gt; by convention). We configure Actions using so-called &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;&lt;strong&gt;workflows&lt;/strong&gt;&lt;/a&gt;, which are YAML configuration files containing instructions on how to transform and build code.&lt;/p&gt;

&lt;p&gt;GitHub looks for workflows in the &lt;code&gt;.github/workflows&lt;/code&gt; directory, so let's create this directory structure at our project's root. Inside, let's create a new file called &lt;code&gt;build-and-publish-kjs.yml&lt;/code&gt;, and add the following configuration to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Publish&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;pull_request&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test and Build&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

      &lt;span class="c1"&gt;# Setup Java 1.8 environment for the next steps&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup Java&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-java@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;java-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.8&lt;/span&gt;

      &lt;span class="c1"&gt;# Check out current repository&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Fetch Sources&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="c1"&gt;# Build application&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test and Build&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./gradlew build&lt;/span&gt;

      &lt;span class="c1"&gt;# If main branch update, deploy to gh-pages&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JamesIves/github-pages-deploy-action@3.7.1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;BRANCH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt; &lt;span class="c1"&gt;# The branch the action should deploy to.&lt;/span&gt;
          &lt;span class="na"&gt;FOLDER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build/distributions&lt;/span&gt; &lt;span class="c1"&gt;# The folder the action should deploy.&lt;/span&gt;
          &lt;span class="na"&gt;CLEAN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;# Automatically remove deleted files from the deploy branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#understanding-our-action-yaml" class="anchor"&gt;
  &lt;/a&gt;
  Understanding our Action YAML
&lt;/h3&gt;

&lt;p&gt;We could just use this configuration as is, and move on to the next step – but it's always good to try and understand what's going on in our project. And while the YAML configuration reads quite naturally, I still want to quickly look at this configuration file section by section (Additionally, feel free to consult the &lt;a href="https://docs.github.com/en/actions/learn-github-actions"&gt;GitHub Actions documentation&lt;/a&gt; for more information):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We first give our workflow a &lt;code&gt;name&lt;/code&gt; – in this case, &lt;code&gt;Build and Publish&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Next, we define the triggers for this workflow – what events &lt;strong&gt;kick off&lt;/strong&gt; this process. Because we want to make sure that pushed code always compiles, and that pull requests are also fine, we set the value to &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pull_request&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Next, we define a &lt;code&gt;job&lt;/code&gt;, which &lt;strong&gt;groups&lt;/strong&gt; the different steps we want to run in a given environment (in our case, &lt;code&gt;ubuntu-latest&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Now, we define the different &lt;code&gt;steps&lt;/code&gt; our build needs to go through:

&lt;ul&gt;
&lt;li&gt;The Kotlin compiler needs Java to be present, so we use a &lt;a href="https://github.com/actions/setup-java"&gt;predefined GitHub Action&lt;/a&gt; to &lt;strong&gt;install Java &lt;code&gt;1.8&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;We use &lt;a href="https://github.com/actions/checkout"&gt;another predefined Action&lt;/a&gt; to &lt;strong&gt;check out the code&lt;/strong&gt; for our project.&lt;/li&gt;
&lt;li&gt;We run the &lt;code&gt;./gradlew build&lt;/code&gt; command. &lt;code&gt;build&lt;/code&gt; is a &lt;strong&gt;standard lifecycle&lt;/strong&gt; task for Kotlin/JS projects which installs all dependencies from npm and Gradle, compiles the application, and runs any tests included in the project.&lt;/li&gt;
&lt;li&gt;Lastly, we use &lt;a href="https://github.com/JamesIves/github-pages-deploy-action"&gt;another Action&lt;/a&gt; to &lt;strong&gt;deploy our project&lt;/strong&gt; to GitHub Pages – but &lt;strong&gt;only if the workflow is running on the &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;main&lt;/code&gt; branch&lt;/strong&gt; (we don't want development branches to be deployed to the public!). We point this action to the &lt;code&gt;build/distributions&lt;/code&gt; folder, which is where building a Kotlin/JS project creates the final &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.html&lt;/code&gt; artifacts.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: This workflow &lt;strong&gt;builds and tests all commits and pull requests&lt;/strong&gt; – if the commit is on the &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;main&lt;/code&gt; branch, the changes are prepared for &lt;strong&gt;publishing via Pages&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#committing-the-workflow-file" class="anchor"&gt;
  &lt;/a&gt;
  Committing the workflow file
&lt;/h3&gt;

&lt;p&gt;To enable our newly created workflow in the GitHub project, we &lt;strong&gt;commit and push&lt;/strong&gt; our new &lt;code&gt;build-and-publish-kjs.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you do this via IntelliJ IDEA's "Commit and Push" functionality, please note that, depending on how your GitHub account is authenticated, you may encounter the following error when pushing a commit containing workflow files to your GitHub repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;error: failed to push some refs to 'https://github.com/SebastianAigner/kotlin-js-on-github-pages.git'
To https://github.com/SebastianAigner/kotlin-js-on-github-pages.git
!   refs/heads/master:refs/heads/master [remote rejected] (refusing to allow an OAuth App to create or update workflow `.github/workflows/build-and-publish-kjs.yml` without `workflow` scope)
Done
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is because of an OAuth issue with GitHub requiring a specific scope to push workflow-modifying commits. You can find more info on it and &lt;a href="https://youtrack.jetbrains.com/issue/IDEA-247361"&gt;vote on it here&lt;/a&gt;. Instead, you can commit the code via the terminal integrated in IntelliJ IDEA, using &lt;code&gt;git push origin master&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ru3o1w5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h3rijixf4qmhfsezqpc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ru3o1w5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h3rijixf4qmhfsezqpc4.png" alt="git-push-origin-master"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the push has finished, we can watch the progress of our Kotlin/JS application being built and prepared for publishing in the "Actions" tab of our GitHub repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s1H33EX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ztnb7qdc5qpk4phezuqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s1H33EX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ztnb7qdc5qpk4phezuqa.png" alt="action_running"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-github-pages" class="anchor"&gt;
  &lt;/a&gt;
  Setting up GitHub Pages &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After it finished, the workflow we created and triggered in the previous section put our final &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.html&lt;/code&gt; artifacts on the &lt;code&gt;gh-pages&lt;/code&gt; branch of our repository, just as we planned:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EB3RP9ij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6lhyhlsxutuk9tux4oh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EB3RP9ij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6lhyhlsxutuk9tux4oh.png" alt="gh-pages-branch"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;It's time to &lt;strong&gt;enable the GitHub Pages feature&lt;/strong&gt; of our repository, and point it to this branch. We can do this using the "Settings" tab.&lt;/p&gt;

&lt;p&gt;Somewhere close to the bottom, we can find a section labelled "GitHub Pages". We select the &lt;code&gt;gh-pages&lt;/code&gt; branch and &lt;code&gt;/ (root)&lt;/code&gt; (default) and hit "Save":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQV31bBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/66pf58m8og9xrbnzg01z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQV31bBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/66pf58m8og9xrbnzg01z.png" alt="github-pages-enable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After saving our changes, scrolling back to this section reveals the &lt;strong&gt;URL under which our application is available&lt;/strong&gt;. (I have previously set up a custom domain for GitHub pages, so this one is used by default.) If you don't have a &lt;a href="https://docs.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site"&gt;custom configuration&lt;/a&gt;, the URL of your application usually takes the shape of &lt;code&gt;&amp;lt;username&amp;gt;.github.io/&amp;lt;reponame&amp;gt;&lt;/code&gt;. Visiting this URL shows our Kotlin/JS application in all its glory, and for the world to see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kQajKrUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xr3ooqc9l4rgrpjia265.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kQajKrUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xr3ooqc9l4rgrpjia265.png" alt="ready to be published"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can use this link to &lt;strong&gt;share your Kotlin/JS application&lt;/strong&gt; with friends and colleagues, or post it on your favorite news aggregator and wait for the upvotes to roll in! 😉&lt;/p&gt;

&lt;p&gt;(If your project is located in a private repository, you might want to change the GitHub Pages visibility. You can find more info on this in the &lt;a href="https://docs.github.com/en/github/working-with-github-pages/changing-the-visibility-of-your-github-pages-site"&gt;GitHub docs&lt;/a&gt;.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-your-project-for-a-spin" class="anchor"&gt;
  &lt;/a&gt;
  Take your project for a spin!
&lt;/h2&gt;

&lt;p&gt;We're done! From now on, whenever you push code, your project will automatically be built on GitHub's CI servers. If a commit is faulty, you can see so on the web interface – and you will even be reminded via email!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh9fs7_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvu8r28kptsqq99ys2rd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh9fs7_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvu8r28kptsqq99ys2rd.png" alt="checks failed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pushing to the main branch of the repository means your page (which is reachable at &lt;code&gt;&amp;lt;username&amp;gt;.github.io/&amp;lt;reponame&amp;gt;&lt;/code&gt;) will &lt;strong&gt;automatically&lt;/strong&gt; be updated.&lt;/p&gt;

&lt;p&gt;And when somebody makes a pull request, build and test status is also shown &lt;strong&gt;directly in context&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQSE8eUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u3wl5tcsahepdma6pbbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQSE8eUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u3wl5tcsahepdma6pbbq.png" alt="pr failed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you" class="anchor"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;I hope you found this post useful. &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; is a &lt;strong&gt;powerful, but also complex tool&lt;/strong&gt;, and I hope that these instructions make it a bit easier to get started together with Kotlin/JS. You can find the &lt;a href="https://github.com/SebastianAigner/kotlin-js-on-gh-pages"&gt;sample project I used&lt;/a&gt; to create the screenshots for this tutorial on GitHub as well, and use it as a source of inspiration or template for a future project.&lt;/p&gt;

&lt;p&gt;If you're interested in similar content, consider &lt;strong&gt;giving me a follow&lt;/strong&gt;, here on dev.to or on Twitter &lt;a href="https://twitter.com/sebi_io"&gt;@sebi_io&lt;/a&gt; to stay up to date.&lt;/p&gt;

&lt;p&gt;If you have ideas for future tutorials, please &lt;strong&gt;share them&lt;/strong&gt; in the comments below, or anywhere else you can get a hold of me!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Special thanks to &lt;a href="https://twitter.com/hszanowski"&gt;Jakub Chrzanowski&lt;/a&gt; for sharing some of his CI wisdom with me for this blog post.&lt;/em&gt;!&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>javascript</category>
      <category>github</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Ultimate Meeting Joiner?</title>
      <author>Virej Dasani</author>
      <pubDate>Fri, 05 Feb 2021 11:23:26 +0000</pubDate>
      <link>https://dev.to/virejdasani/the-ultimate-meeting-joiner-56pe</link>
      <guid>https://dev.to/virejdasani/the-ultimate-meeting-joiner-56pe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-meeting-assistant" class="anchor"&gt;
  &lt;/a&gt;
  What is &lt;a href="https://github.com/virejdasani/MeetingAssistant"&gt;Meeting Assistant&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Meeting Assistant is an open-source, free app that helps you join recurring online meetings with ease. With Meeting Assistant, you can bring all your online meeting links to one place from where you can join meetings with a simple click of a button!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FBMAqKYz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/virejdasani/MeetingAssistant/blob/master/Assets/meetingAssistantSCLight.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FBMAqKYz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/virejdasani/MeetingAssistant/blob/master/Assets/meetingAssistantSCLight.png%3Fraw%3Dtrue" alt="Meeting Assistant"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/virejdasani/MeetingAssistant/releases"&gt;Download Meeting Assistant&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-i-made-it" class="anchor"&gt;
  &lt;/a&gt;
  Why I made it
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I made Meeting Assistant because I had to scroll down a couple of minutes over old assignments, notes, etc. on google classroom before I found my lecture link and was able to join my class.&lt;/li&gt;
&lt;li&gt;I thought to myself, I can't be the only one facing this issue, right?&lt;/li&gt;
&lt;li&gt;So I made an app (available for all operating systems) that solves the problem of searching for your lecture or meeting links. You just enter your meeting links along with a title and/or a note. Then, when you have to join the meeting, you can do so with a simple click on the 'Launch Meeting' button.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#for-inbrowser-meetings-the-meeting-opens-in-the-app-itself" class="anchor"&gt;
  &lt;/a&gt;
  For in-browser meetings, the meeting opens in the app itself
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This is because I made the app using Electron so the app is based on chromium which comes in pretty handy.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>electron</category>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Concurrency in modern programming languages: JavaScript on NodeJS</title>
      <author>Deepu K Sasidharan</author>
      <pubDate>Fri, 05 Feb 2021 11:07:01 +0000</pubDate>
      <link>https://dev.to/deepu105/concurrency-in-modern-programming-languages-javascript-on-nodejs-epo</link>
      <guid>https://dev.to/deepu105/concurrency-in-modern-programming-languages-javascript-on-nodejs-epo</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://deepu.tech/concurrency-in-modern-languages-js/"&gt;deepu.tech&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Please follow me on &lt;a href="https://twitter.com/deepu105"&gt;Twitter&lt;/a&gt; for updates and let me know what can be improved in the post.&lt;/p&gt;




&lt;p&gt;This is a multi-part series where I'll be talking about concurrency in modern programming languages and will be building and benchmarking a concurrent web server, inspired by the example from the &lt;a href="https://doc.rust-lang.org/book/ch20-00-final-project-a-web-server.html"&gt;Rust book&lt;/a&gt;, in popular languages like Rust, Go, JavaScript (NodeJS), TypeScript (Deno), Kotlin and Java to compare concurrency and its performance between these languages/platforms. The chapters of this series are as below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-introduction-ckk"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-rust-19co"&gt;Concurrent web server in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-golang-439i"&gt;Concurrent web server in Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concurrent web server in JavaScript with NodeJS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Concurrent web server in TypeScript with Deno&lt;/li&gt;
&lt;li&gt;Concurrent web server in Java with JVM&lt;/li&gt;
&lt;li&gt;Concurrent web server in Kotlin with JVM&lt;/li&gt;
&lt;li&gt;Comparison and conclusion of benchmarks&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#concurrency-in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Concurrency in JavaScript
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript has a concurrency model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. This model is quite different from models in other languages like C and Java.&lt;/p&gt;

&lt;p&gt;-- MDN Web Docs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Concurrency in JavaScript is quite different from other languages we are looking at. The biggest difference is that JavaScript is single-threaded and hence multi-threading and parallelism is out of the question -- at least not traditional multi-threading or parallelism like in other languages, we will come to that later. But concurrency on the other hand is the heart and soul of the JavaScript event loop. It is how JavaScript is able to bridge the gap of multi-threading making JavaScript a serious contender in an arena filled with multi-threaded languages like Java, Go, Python, Rust, and so on. Read the &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-introduction-ckk"&gt;introduction chapter&lt;/a&gt; to see why the difference matters.&lt;/p&gt;

&lt;p&gt;The JavaScript event loop relies on message passing concurrency to execute items on its stack in a non-blocking way, more like, it gives a perception of being non-blocking, because, in reality, it does block for a short moment since its single-threaded and execution is interleaved. This makes it perfect for most of the concurrency use cases you would encounter and you will rarely miss having multi-threading and true parallelism support and in many use cases, you can go head to head with a fully multi-threaded language.&lt;/p&gt;

&lt;p&gt;While languages like Rust offer &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-rust-19co"&gt;flexibility and power&lt;/a&gt; and Go &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-golang-439i"&gt;offers simplicity and performance&lt;/a&gt;, JavaScript was never meant for concurrency but that didn't stop the awesome people behind NodeJS to come up with a platform that was fully focused on concurrency and non-blocking I/O. While JavaScript event loop already paved the way for it, NodeJS made JS a truly viable option for server-side concurrency. All this is made possible thanks to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"&gt;event loop&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function"&gt;Callbacks&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promises&lt;/a&gt;, and &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await"&gt;Async/Await&lt;/a&gt; support in JavaScript.&lt;/p&gt;

&lt;p&gt;Unlike in many other languages, maybe except Go, concurrency is used a lot in JavaScript by developers, sometimes without even realizing it, especially in NodeJS applications. It's due to the programming model followed by NodeJS which relies heavily on callbacks and Promises and also because it is extremely easy to do so due to the flexible nature of JavaScript. The NodeJS standard library also uses concurrency where ever possible and there is no much overhead in doing so.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The default for concurrency in JavaScript is an asynchronous programming model using callbacks, Promise or async/await.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With JavaScript, it's possible to do some level of multi-threaded concurrency and parallelization. It's not as flexible as Rust or as simple as Go, but still, you can achieve almost everything possible in other languages and still get quite decent performance for most of those use cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multithreading" class="anchor"&gt;
  &lt;/a&gt;
  Multi-threading
&lt;/h3&gt;

&lt;p&gt;JavaScript is single-threaded hence the only way to achieve multi-threading is by spinning up multiple instances of the JS Engine. But then how do you communicate between these instances? That is where &lt;a href="https://developer.mozilla.org/en-us/docs/Web/API/Web_Workers_API"&gt;Web Workers&lt;/a&gt; come in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Web Workers makes it possible to run a script operation in a background thread separate from the main execution thread of a web application&lt;/p&gt;

&lt;p&gt;-- MDN Web Docs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the help of web workers, it is possible to offload heavy computations to a separate thread hence freeing up the main thread. These workers and the main thread communicate using events and a worker thread can spawn other worker threads.&lt;/p&gt;

&lt;p&gt;Now when it comes to NodeJS, there are few ways to spawn additional threads and processes. There is the classical &lt;a href="https://nodejs.org/api/child_process.html"&gt;&lt;code&gt;child_process&lt;/code&gt;&lt;/a&gt; module, the more modern &lt;a href="https://nodejs.org/dist/latest-v15.x/docs/api/worker_threads.html"&gt;&lt;code&gt;worker_threads&lt;/code&gt;&lt;/a&gt; module which is quite similar to web workers, and the &lt;a href="https://nodejs.org/api/cluster.html#cluster_cluster"&gt;&lt;code&gt;cluster&lt;/code&gt;&lt;/a&gt; module for creating clusters of NodeJS instances.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Workers (threads) are useful for performing CPU-intensive JavaScript operations. They do not help much with I/O-intensive work.&lt;/p&gt;

&lt;p&gt;-- NodeJS docs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be it web workers or worker threads, they are not as flexible or easy as the multi-threading implementations in other languages and has many limitations and hence these are mostly used only when there are CPU intensive tasks or background tasks to be performed for other use cases concurrency using asynchronous processing would be sufficient.&lt;/p&gt;

&lt;p&gt;JavaScript doesn't provide access to OS threads or green threads, the same applies for NodeJS however worker threads and the cluster comes close, and hence advanced multi-threading is not feasible. Message-passing concurrency is possible and is used by the JS event loop itself and can be used for both workers and the standard concurrency model in JS. Shared-state concurrency is possible in the standard concurrency model and with workers using array buffers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asynchronous-processing" class="anchor"&gt;
  &lt;/a&gt;
  Asynchronous processing
&lt;/h3&gt;

&lt;p&gt;Technically asynchronous programming is not part of concurrency but in practice, it goes hand in hand for many use cases and improves performance, and makes resource usage more efficient. Since the JavaScript event loop is non-blocking and asynchronous, it's perfect for asynchronous programming and that's why the concept is so popular among JS developers than in other languages and is heavily used especially in NodeJS and on the client-side with modern SPA frameworks. In a way, asynchronous programming was made popular by JavaScript and NodeJS. JavaScript provides 3 ways to do asynchronous programming, Callbacks, Promises, and Async/Await. In recent times Async/Await is becoming more widely used instead of or together with promises and callbacks due to its cleaner approach (Read, no callback hell). In NodeJS all I/O operations are async(non-blocking) by default, you would have to use sync alternatives provided to do synchronous I/O. This makes it easy to write concurrent applications in NodeJS using these constructs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// sequential&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// do stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// concurrent&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;()]);&lt;/span&gt;
  &lt;span class="c1"&gt;// do stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#benchmarking" class="anchor"&gt;
  &lt;/a&gt;
  Benchmarking
&lt;/h2&gt;

&lt;p&gt;Now that we have some basic understanding of concurrency features in JavaScript &amp;amp; NodeJS, let us build a simple concurrent web server in NodeJS. Since asynchronous concurrency is the best way to achieve this in NodeJS we'll build a sample application using the standard &lt;code&gt;http&lt;/code&gt; module and then improve it using the &lt;code&gt;cluster&lt;/code&gt; module. The NodeJS version used is the latest (15.8.0) at the time of writing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#async-http-concurrent-webserver" class="anchor"&gt;
  &lt;/a&gt;
  Async HTTP concurrent webserver
&lt;/h3&gt;

&lt;p&gt;This example is closer to the Rust Asynchronous example we built in the &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-rust-19co"&gt;second chapter&lt;/a&gt;. You can find the full example on &lt;a href="https://github.com/deepu105/concurrency-benchmarks/tree/main/jsws"&gt;GitHub here&lt;/a&gt;. We are not using any external dependency in this case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// set router&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;requestListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// set listen port&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// add 2 second delay to every 10th request&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adding delay. Count: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/hello.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// read html file&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keep-alive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 200 OK&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// send data to client side&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see we create an HTTP server and bind it to port 8080 and listen to all incoming requests. Each request is processed in a callback function that internally uses &lt;code&gt;async/await&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let us run a benchmark using ApacheBench. We will make 10000 requests with 100 concurrent requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ab &lt;span class="nt"&gt;-c&lt;/span&gt; 100 &lt;span class="nt"&gt;-n&lt;/span&gt; 10000 http://127.0.0.1:8080/

This is ApacheBench, Version 2.3 &amp;lt;&lt;span class="nv"&gt;$Revision&lt;/span&gt;: 1879490 &lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt;
...

Server Software:
Server Hostname:        127.0.0.1
Server Port:            8080

Document Path:          /
Document Length:        174 bytes

Concurrency Level:      100
Time taken &lt;span class="k"&gt;for &lt;/span&gt;tests:   21.329 seconds
Complete requests:      10000
Failed requests:        0
Total transferred:      2540000 bytes
HTML transferred:       1740000 bytes
Requests per second:    468.85 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       213.286 &lt;span class="o"&gt;[&lt;/span&gt;ms] &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       2.133 &lt;span class="o"&gt;[&lt;/span&gt;ms] &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          116.30 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec] received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean[+/-sd] median   max
Connect:        0    0   0.9      0      11
Processing:     0  207 599.9      4    2048
Waiting:        0  206 600.0      3    2038
Total:          0  208 599.9      4    2048

Percentage of the requests served within a certain &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
  50%      4
  66%      8
  75%     13
  80%     19
  90%   2000
  95%   2004
  98%   2012
  99%   2017
 100%   2048 &lt;span class="o"&gt;(&lt;/span&gt;longest request&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's see if there is a difference in performance with multi-threading using the &lt;code&gt;cluster&lt;/code&gt; package.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multithreaded-webserver-cluster" class="anchor"&gt;
  &lt;/a&gt;
  Multi-threaded webserver cluster
&lt;/h3&gt;

&lt;p&gt;This example is quite similar to the previous one except that we are using the &lt;code&gt;cluster&lt;/code&gt; module to fork into master and worker threads, one worker per CPU thread. We are still using the &lt;code&gt;http&lt;/code&gt; module and callbacks here. You can find the full example on &lt;a href="https://github.com/deepu105/concurrency-benchmarks/tree/main/jsws_thread"&gt;GitHub here&lt;/a&gt;. We are not using any external dependency in this case as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cluster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cluster&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numCPUs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;os&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;cpus&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// set router&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;requestListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isMaster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Master &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is running`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Fork workers.&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numCPUs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`worker &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; died`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// set listen port, TCP connection is shared by all workers&lt;/span&gt;
  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Worker &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: Server is running on http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// add 2 second delay to every 10th request&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adding delay. Count: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/hello.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// read html file&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keep-alive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 200 OK&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// send data to client side&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// sleep function since NodeJS doesn't provide one&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see we used the same code from previous example and moved the &lt;code&gt;server.listen&lt;/code&gt; to the worker nodes. The cluster module forks into master and workers. We assign a callback function to handle each request which internally calls the &lt;code&gt;requestListener&lt;/code&gt; method. The code here is a bit more complex compared to the previous one.&lt;/p&gt;

&lt;p&gt;Let us run a benchmark using ApacheBench. We will make 10000 requests with 100 concurrent requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ab &lt;span class="nt"&gt;-c&lt;/span&gt; 100 &lt;span class="nt"&gt;-n&lt;/span&gt; 10000 http://127.0.0.1:8080/

This is ApacheBench, Version 2.3 &amp;lt;&lt;span class="nv"&gt;$Revision&lt;/span&gt;: 1879490 &lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt;
...

Server Software:
Server Hostname:        127.0.0.1
Server Port:            8080

Document Path:          /
Document Length:        174 bytes

Concurrency Level:      100
Time taken &lt;span class="k"&gt;for &lt;/span&gt;tests:   21.075 seconds
Complete requests:      10000
Failed requests:        0
Total transferred:      2540000 bytes
HTML transferred:       1740000 bytes
Requests per second:    474.50 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       210.747 &lt;span class="o"&gt;[&lt;/span&gt;ms] &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       2.107 &lt;span class="o"&gt;[&lt;/span&gt;ms] &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          117.70 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec] received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean[+/-sd] median   max
Connect:        0    0   0.8      0      11
Processing:     0  206 600.1      4    2047
Waiting:        0  205 600.1      3    2045
Total:          1  206 600.1      4    2047

Percentage of the requests served within a certain &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
  50%      4
  66%      8
  75%     11
  80%     14
  90%     88
  95%   2005
  98%   2012
  99%   2016
 100%   2047 &lt;span class="o"&gt;(&lt;/span&gt;longest request&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We got almost identical results here. If you look close, the multi-threaded one is slightly faster but then the added complexity might not be worth it for all use cases. So it might be preferable to just use the &lt;code&gt;http&lt;/code&gt; package without clustering for such use cases as it's cleaner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As I explained in the &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-introduction-ckk"&gt;first part&lt;/a&gt; of this serious, this simple benchmarking is not an accurate representation for all concurrency use cases. It's a simple test for a very particular use case, a simple concurrent web server that just serves a file. The idea is to see the differences in solutions and to understand how concurrency works in JavaScript specifically on NodeJS. And for this particular use case, an asynchronous server using the &lt;code&gt;http&lt;/code&gt; module provided by the standard library does seem to be the best choice.&lt;/p&gt;

&lt;p&gt;So stay tuned for the next post where we will look at concurrency in &lt;a href="https://deno.land/"&gt;Deno&lt;/a&gt; and build the same use case in TypeScript.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"&gt;developer.mozilla.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tsh.io/blog/simple-guide-concurrency-node-js/"&gt;tsh.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@onejohi/concurrency-in-javascript-f5bb387708d8"&gt;medium.com/@onejohi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/a-complete-guide-to-threads-in-node-js-4fa3898fe74f/"&gt;blog.logrocket.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/node-js-multithreading-what-are-worker-threads-and-why-do-they-matter-48ab102f8b10/"&gt;blog.logrocket.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/ideas-at-igenius/some-beginner-tips-for-concurrency-with-async-await-and-promise-all-dc28b5a4411e"&gt;medium.com/ideas-at-igenius&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/deepu105"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/deepu05/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cover image credit: Photo by &lt;a href="https://unsplash.com/@mparzuchowski?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Michał Parzuchowski&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>languages</category>
      <category>concurrency</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>3 ways to convert HTML text to plain text
</title>
      <author>Sanchithasr</author>
      <pubDate>Fri, 05 Feb 2021 10:35:42 +0000</pubDate>
      <link>https://dev.to/sanchithasr/3-ways-to-convert-html-text-to-plain-text-52l8</link>
      <guid>https://dev.to/sanchithasr/3-ways-to-convert-html-text-to-plain-text-52l8</guid>
      <description>&lt;p&gt;I was working with a rich text editor the other day and needed to strip the HTML tags from the string and store it in the database. And here are the few ways I learned that could come in handy to anyone who is trying to do the same.&lt;br&gt;
What we are trying to do is remove the tags from the string and make the string printable as plain text. Let’s dive in and see how it works.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-using-replaceltgtgtg-" class="anchor"&gt;
  &lt;/a&gt;
  1) Using .replace(/&amp;lt;[^&amp;gt;]*&amp;gt;/g, ‘’)
&lt;/h2&gt;

&lt;p&gt;This method is a simple and efficient way to remove the tags from the text. This method uses the string method &lt;code&gt;.replace(old value,new value)&lt;/code&gt; which replaces the HTML tag values with the empty string. The &lt;code&gt;/g&lt;/code&gt; is used for it to happen globally (every value found in the string is replaced with the specified if the &lt;code&gt;/g&lt;/code&gt; is used).&lt;br&gt;
The drawback of this method is that we can’t remove some HTML entities. It still works well though.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;Jimbo.&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;p&amp;gt;That's what she said&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;strippedHtml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myHTML&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="se"&gt;[^&lt;/span&gt;&lt;span class="sr"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&amp;gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Jimbo.&lt;/span&gt;
&lt;span class="c1"&gt;// That's what she said&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripedHtml&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-create-a-temporary-dom-element-and-retrieve-the-text" class="anchor"&gt;
  &lt;/a&gt;
  2) Create a temporary DOM element and retrieve the text
&lt;/h2&gt;

&lt;p&gt;This is the most efficient way of doing the task. Create a dummy element and assign it to a variable. We can extract later using the element objects. Assign the HTML text to innerHTML of the dummy element and we will get the plain text from the text element objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;convertToPlain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="c1"&gt;// Create a new div element&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tempDivElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Set the HTML content with the given value&lt;/span&gt;
    &lt;span class="nx"&gt;tempDivElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Retrieve the text property of the element &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tempDivElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;tempDivElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;htmlString&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;Bears Beets Battlestar Galactica &amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;p&amp;gt;Quote by Dwight Schrute&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;convertToPlain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlString&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Expected Result:&lt;/span&gt;
&lt;span class="c1"&gt;// Bears Beets Battlestar Galactica &lt;/span&gt;
&lt;span class="c1"&gt;// Quote by Dwight Schrute&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-htmltotext-npm-package" class="anchor"&gt;
  &lt;/a&gt;
  3) html-to-text npm package
&lt;/h2&gt;

&lt;p&gt;This is the package I discovered recently. This is the converter that parses HTML and returns beautiful text. It comes with many options to convert it to plain text like &lt;code&gt;wordwrap&lt;/code&gt;, &lt;code&gt;tags&lt;/code&gt;, &lt;code&gt;whitespaceCharacters&lt;/code&gt; , &lt;code&gt;formattersetc&lt;/code&gt;.&lt;br&gt;
Package.json is needed to use the package. We need to install the package first and then use it in our file.&lt;br&gt;
You can find the official doc of the package &lt;a href="https://www.npmjs.com/package/html-to-text"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;htmlToText&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;html-to-text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlToText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;div&amp;gt;Nope Its not Ashton Kutcher. It is Kevin Malone. &amp;lt;p&amp;gt;Equally Smart and equally handsome&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;wordwrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// expected result: &lt;/span&gt;
&lt;span class="c1"&gt;// Nope Its not Ashton Kutcher. It is Kevin Malone.&lt;/span&gt;

&lt;span class="c1"&gt;// Equally Smart and equally handsome&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Find the example of the project &lt;a href="https://github.com/Sanchithasharma/htmlToText"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And that sums it up. Thank you!!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>intermediate</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Writing clean JavaScript code: Variables</title>
      <author>stephanieopala</author>
      <pubDate>Fri, 05 Feb 2021 10:15:45 +0000</pubDate>
      <link>https://dev.to/stephanieopala/writing-clean-javascript-code-variables-2kij</link>
      <guid>https://dev.to/stephanieopala/writing-clean-javascript-code-variables-2kij</guid>
      <description>&lt;p&gt;What is clean code? &lt;strong&gt;It is code that is easy to understand by humans and easy to change or extend.&lt;/strong&gt;&lt;br&gt;
In this post, I will cover JavaScript clean coding best practices when it comes to variables.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use meaningful and pronounceable variables.
You should name your variables such that they reveal the intention behind it. This makes it easier to read and understand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DON'T&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Stephanie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;DO&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Stephanie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use ES6 constants when variable values do not change.&lt;br&gt;
At this point, you have interacted with JavaScript ES6 severally/ a few times depending on your level of expertise therefore, keep this in mind.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the same vocabulary for the same type of variable.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DON'T&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getUserInfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;getClientData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;getCustomerRecord&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;DO&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Use searchable names.
This is helpful when you are looking for something or refactoring your code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DON'T&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blastOff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;86400000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//what is 86400000???&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;DO&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MILLISECONDS_IN_A_DAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//86400000;&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blastOff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MILLISECONDS_IN_A_DAY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Do not add unneeded context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DON'T&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Laptop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;laptopMake&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dell&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;laptopColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Grey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;laptopPrice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2400&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;DO&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Laptop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dell&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Grey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2400&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Eleventy in eleven minutes</title>
      <author>Lea Rosema (she/her)</author>
      <pubDate>Fri, 05 Feb 2021 09:34:27 +0000</pubDate>
      <link>https://dev.to/s2engineers/eleventy-in-eleven-minutes-2mno</link>
      <guid>https://dev.to/s2engineers/eleventy-in-eleven-minutes-2mno</guid>
      <description>&lt;p&gt;&lt;em&gt;Image by &lt;a href="https://www.11ty.dev/"&gt;11ty.dev&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I would like to share my opinionated path how I got started using.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-eleventy"&gt;What is Eleventy?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-eleventy"&gt;Why Eleventy?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#new-project"&gt;Create a new project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-content"&gt;Adding content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-building"&gt;Running and building&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#html-templates"&gt;HTML templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#providing-data"&gt;Providing data for your site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collections"&gt;Collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#filters"&gt;Filters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#plugins"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tooling"&gt;Adding toolchains for CSS and JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-eleventy" class="anchor"&gt;
  &lt;/a&gt;
  What is Eleventy? &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://11ty.dev"&gt;Eleventy&lt;/a&gt; is a popular static site generator. It creates a static site from your input files. The input files eleventy looks for are content files, html template files and data files which will be covered in this article. &lt;/p&gt;

&lt;p&gt;It supports several data file formats, content file formats and html template engines which you can use together. In this article, I'm using &lt;a href="https://guides.github.com/features/mastering-markdown/"&gt;Markdown&lt;/a&gt; files together with &lt;a href="https://mozilla.github.io/nunjucks/"&gt;Nunjucks&lt;/a&gt; templates.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-eleventy" class="anchor"&gt;
  &lt;/a&gt;
  Why Eleventy? &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;There are many static site generators out there and you may wonder what benefits it offers compared to others. The key points which make me really love Eleventy are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is built on node.js&lt;/li&gt;
&lt;li&gt;it does one job and does that well: create markup from content plus templates&lt;/li&gt;
&lt;li&gt;it is completely unopinionated about client-side JS+CSS toolchains: bring your own&lt;/li&gt;
&lt;li&gt;no angular/react/vue knowledge necessary. &lt;/li&gt;
&lt;li&gt;html first approach which makes it great for progressive enhancement.&lt;/li&gt;
&lt;li&gt;easily extendible and combinable with npm packages&lt;/li&gt;
&lt;li&gt;similar to jekyll, but with node.js as a base&lt;/li&gt;
&lt;li&gt;easy to mock data via the data folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#create-a-new-project" class="anchor"&gt;
  &lt;/a&gt;
  Create a new project &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;my-awesome-site
&lt;span class="nb"&gt;cd &lt;/span&gt;my-awesome-site
git config &lt;span class="nt"&gt;--global&lt;/span&gt; init.defaultBranch main
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
npm i @11ty/eleventy &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initialize-your-repository" class="anchor"&gt;
  &lt;/a&gt;
  Initialize your repository &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Additionally, run &lt;code&gt;git init&lt;/code&gt; and provide a &lt;code&gt;.gitignore&lt;/code&gt; if you are working with git:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node_modules
.DS_Store
Thumbs.db

&lt;span class="c"&gt;# Eleventy output folder&lt;/span&gt;
public
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuration" class="anchor"&gt;
  &lt;/a&gt;
  Configuration &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Configuration is done via a single javascript file named &lt;code&gt;.eleventy.js&lt;/code&gt;. Providing a configuration is optional.&lt;/p&gt;

&lt;p&gt;My personal preference is to provide &lt;code&gt;src&lt;/code&gt; as input folder and  &lt;code&gt;public&lt;/code&gt; as output folder. Additionally, I use to specify folders that are copied over to the output folder on build. These are also automatically watched by eleventy when starting the development server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;module.exports &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;config&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  // specify folders to be copied to the output folder
  config.addPassthroughCopy&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./src/js/'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  config.addPassthroughCopy&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./src/css/'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    markdownTemplateEngine: &lt;span class="s1"&gt;'njk'&lt;/span&gt;,
    htmlTemplateEngine: &lt;span class="s1"&gt;'njk'&lt;/span&gt;,
    &lt;span class="nb"&gt;dir&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      input: &lt;span class="s1"&gt;'src'&lt;/span&gt;,    // default: &lt;span class="s1"&gt;'.'&lt;/span&gt;
      output: &lt;span class="s1"&gt;'public'&lt;/span&gt; // default: &lt;span class="s1"&gt;'_site'&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#adding-content" class="anchor"&gt;
  &lt;/a&gt;
  Adding content &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Create a markdown file and name it like this: &lt;code&gt;src/index.md&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;world"&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="gh"&gt;# Hello World&lt;/span&gt;

Welcome to my awesome {{title}} site! 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#markdown-and-front-matter" class="anchor"&gt;
  &lt;/a&gt;
  Markdown and front matter &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Markdown files can optionally provide a metadata block, which is marked via three hyphens &lt;code&gt;---&lt;/code&gt; in the beginning and the end of the block. In this block, you can specify meta data in &lt;a href="https://yaml.org/"&gt;YAML&lt;/a&gt; notation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-content-to-paths" class="anchor"&gt;
  &lt;/a&gt;
  From content to paths &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;For each markdown content file, eleventy creates a folder with an &lt;code&gt;index.html&lt;/code&gt; for nice urls:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;index.md            --&amp;gt; /
about.md            --&amp;gt; /about/
faq.md              --&amp;gt; /faq/
blog/hello-world.md --&amp;gt; /blog/hello-world/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#running-and-building" class="anchor"&gt;
  &lt;/a&gt;
  Running and building &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Finally, we can start adding the start and build tasks to our &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eleventy --serve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eleventy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;npm start&lt;/code&gt; -&amp;gt; start Development server&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run build&lt;/code&gt; -&amp;gt; build your website&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npx serve public&lt;/code&gt; -&amp;gt; test your build&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The development server is using &lt;code&gt;browsersync&lt;/code&gt; which automatically keeps track of changes and updates your DOM. Additionally, if you open the page in multiple browsers, events are kept in sync, which is useful for cross-browser-testing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#html-templates" class="anchor"&gt;
  &lt;/a&gt;
  HTML templates &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;To define your HTML structure and layouts, you can use HTML templates. There are several template engines available in Eleventy. In this example, I'm using the &lt;a href="https://mozilla.github.io/nunjucks/"&gt;Nunjucks&lt;/a&gt; template engine.&lt;/p&gt;

&lt;p&gt;Other template formats supported are &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.liquid&lt;/code&gt;, &lt;code&gt;.hbs&lt;/code&gt;, &lt;code&gt;.ejs&lt;/code&gt;, &lt;code&gt;.haml&lt;/code&gt;, &lt;code&gt;.pug&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A general approach is to build a base html file and then build &lt;br&gt;
several other structures as you need based upon it.&lt;/p&gt;

&lt;p&gt;Add a &lt;code&gt;src/_includes/base.njk&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ title }}&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
      {% block main %}
        {{ content | safe }}
      {% endblock %}
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Via the &lt;code&gt;{% block %}{% endblock %}&lt;/code&gt; syntax, you can add several slots into your template which you can use when extending your template. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;content&lt;/code&gt; variable is a reserved variable which contains the content body of the current content file. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;| safe&lt;/code&gt; directive is a builtin filter which tells the template engine that the content you want to insert is safe. This way, HTML tags are not converted to plain text containing &lt;a href="https://dev.w3.org/html5/html-author/charref"&gt;HTML entities&lt;/a&gt;. This allows using html inside your content.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-your-templates-in-your-content-files" class="anchor"&gt;
  &lt;/a&gt;
  Using your templates in your content files &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In the front matter of your markdown file, specify the layout you want to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;layout: base
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extending-your-templates" class="anchor"&gt;
  &lt;/a&gt;
  Extending your templates &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Next to your &lt;code&gt;base.njk&lt;/code&gt; file, create an &lt;code&gt;article.njk&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% extends "base.njk" %}

{% block main %}
  &lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ content | safe }}
  &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Nunjucks also has a section about inheritance in the documentation: &lt;a href="https://mozilla.github.io/nunjucks/templating.html#template-inheritance"&gt;https://mozilla.github.io/nunjucks/templating.html#template-inheritance&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#includes" class="anchor"&gt;
  &lt;/a&gt;
  Includes &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can include partial layouts anywhere in your njk or markdown files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% include "header.njk" %}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#providing-data-for-your-site" class="anchor"&gt;
  &lt;/a&gt;
  Providing data for your site &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;There are several ways to provide data that can be used from inside your templates or content files: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;file specific: in the markdown's front matter &lt;/li&gt;
&lt;li&gt;folder specific: add a json file to a content folder&lt;/li&gt;
&lt;li&gt;globally &lt;code&gt;_data&lt;/code&gt; directory: globally available&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_data&lt;/code&gt; supports &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.yaml&lt;/code&gt;, &lt;code&gt;.json&lt;/code&gt; files&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-data-endraw-example" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;_data&lt;/code&gt; example
&lt;/h2&gt;

&lt;p&gt;Imagine you would like to build a navigation and provide all the url entries from a JSON file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/_data/nav.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/blog/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, you can create a partial html snippet to include in your main template, eg. &lt;code&gt;src/_includes/nav.njk&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    {% for link in nav %}
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ link.url }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ link.title }}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    {% endfor %}
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-data-endraw-javascript-example" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;_data&lt;/code&gt; javascript example
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;_data/site.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My awesome site&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://awesome.site/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Can be used like this in the content: &lt;br&gt;
&lt;code&gt;{{ site.name }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Having a &lt;code&gt;.js&lt;/code&gt; file instead of a plain json or yaml file brings the flexibility to use node.js environment variables (like, checking if you're in the development or production environment). Also, you can do API fetches from there to pull in a headless CMS, for example.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#collections" class="anchor"&gt;
  &lt;/a&gt;
  Collections &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;You can tag your content with a keyword and then iterate through these via collections.&lt;/p&gt;

&lt;p&gt;This is useful for auto-generating table of contents or listing articles that are related to each other&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#collections-example" class="anchor"&gt;
  &lt;/a&gt;
  Collections example
&lt;/h2&gt;

&lt;p&gt;In your src folder, add a &lt;code&gt;blog&lt;/code&gt; folder with a bunch of markdown files. Tag them as &lt;code&gt;posts&lt;/code&gt; in your front matter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;tags: posts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, in your markdown or include files, you can iterate through these collection via a for loop:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.md&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# Blog&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;{% for post in collections.posts %}&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ post.url }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ post.date | date('YYYY-MM-DD') }}: {{ post.data.title }}
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;{% endfor %}&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#filters" class="anchor"&gt;
  &lt;/a&gt;
  Filters &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Filters provide a way to further process your content. You can use these filters from inside your content and template files by using the pipe. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-custom-filter" class="anchor"&gt;
  &lt;/a&gt;
  Adding a custom filter
&lt;/h2&gt;

&lt;p&gt;In your &lt;code&gt;.eleventy.js&lt;/code&gt; file, you can add several filters you can use inside your file. You can also use third party libraries here. This is an example for a scream filter and a date formatting filter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;moment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YYYY-MM-DD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scream&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="c1"&gt;// ...additional config &lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, you can use this filter in your content and template files like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{ content | scream | safe }}`
{{ page.date | date('YYYY-MM-DD') }}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#processing-include-files-with-a-filter" class="anchor"&gt;
  &lt;/a&gt;
  Processing include files with a filter
&lt;/h2&gt;

&lt;p&gt;If you would like to process an include with a filter, you can use the nunjucks &lt;code&gt;set&lt;/code&gt; directive to store includes into a variable. In my personal site, I've used this technique to minify WebGL shader code on the fly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% set vertexShader %}
{% include 'shaders/vertex-shader.vs' %}
{% endset %}

{{ vertexShader | glslminify | safe }}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#builtin-filters" class="anchor"&gt;
  &lt;/a&gt;
  Built-in filters
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;you can use all &lt;a href="https://mozilla.github.io/nunjucks/templating.html#builtin-filters"&gt;built-in nunjucks filters&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mozilla.github.io/nunjucks/templating.html#safe"&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; – the content is safe to insert, so html specific characters are not converted to html entities (use this to inject html and scripts). &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/docs/filters/url/"&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; – specify a prefix path (useful for deployment into a subdirectory, eg. on github pages).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/docs/filters/slug"&gt;&lt;code&gt;slug&lt;/code&gt;&lt;/a&gt; – convert a string to an url-friendly slug (eg &lt;code&gt;My site&lt;/code&gt; to &lt;code&gt;my-site&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.11ty.dev/docs/filters/collection-items/"&gt;&lt;code&gt;get*CollectionItem&lt;/code&gt;&lt;/a&gt; – get next or previous item in collection&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#plugins-and-tools" class="anchor"&gt;
  &lt;/a&gt;
  Plugins and tools &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Eleventy provides a rich plugin ecosystem where you can add further magic✨ to your workflow 🙌. &lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://www.11ty.dev/docs/plugins/"&gt;Eleventy plugins documentation&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-toolchains-for-css-and-js" class="anchor"&gt;
  &lt;/a&gt;
  Adding toolchains for CSS and JS &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In the article, we used a pass-through-copy command and used CSS and JS without any bundling or further processing. My favorite approach is to use a CSS preprocessor plus ES module JavaScript files. These are not supported in legacy browsers such as IE11. When using progressive enhancement, JavaScript is not required to read&lt;br&gt;
your content. &lt;/p&gt;

&lt;p&gt;In the following, I will demonstrate the approach I used (only using a CSS transpiles) and a complete JS+CSS toolchain using parcel as an alternative approach. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css-transpiler-only" class="anchor"&gt;
  &lt;/a&gt;
  CSS transpiler only
&lt;/h2&gt;

&lt;p&gt;In my personal project, I used the sass together with concurrently, to start two processes concurrently running in my &lt;code&gt;npm start&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i sass concurrently &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To build the CSS, I'm running &lt;code&gt;sass src/scss:src/css&lt;/code&gt; which compiles every .scss to CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"concurrently 'npm:watch-css' 'npm:serve-11ty'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  
    &lt;/span&gt;&lt;span class="nl"&gt;"build-11ty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eleventy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"serve-11ty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eleventy --serve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build-css"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sass src/scss/:src/css/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"watch-css"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sass src/scss/:src/css/ --watch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run build-css -s &amp;amp;&amp;amp; npm run build-11ty -s"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#or-complete-javascriptcss-toolchain" class="anchor"&gt;
  &lt;/a&gt;
  Or complete Javascript+CSS toolchain.
&lt;/h2&gt;

&lt;p&gt;If you would like to have a complete frontend toolchain taking care of compiling JavaScript and CSS, one way to do is is to use &lt;a href="https://parceljs.org/getting_started.html"&gt;Parcel&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i parcel-bundler concurrently &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;src/dist &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .gitignore
&lt;span class="nb"&gt;echo&lt;/span&gt; .cache &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the development mode, I'm also using &lt;code&gt;concurrently&lt;/code&gt; to start eleventy and parcel in parallel:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"concurrently 'npm:watch-bundle' 'npm:serve-11ty'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run build-bundle -s &amp;amp;&amp;amp; npm run build-11ty -s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"watch-bundle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcel watch src/app/index.js -d src/dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build-bundle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parcel build src/app/index.js -d src/dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"serve-11ty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eleventy --serve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build-11ty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eleventy"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;src/app&lt;/code&gt;, put an &lt;code&gt;index.js&lt;/code&gt; file. Additionally, put any CSS import of your choice into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./scss/styles.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, in your eleventy config, change the pass through copy to copy the parcel output into your eleventy output folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addPassthroughCopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/dist/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, parcel creates an index.js and index.css in the dist folder, which you can use in your html templates like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- in your head tag --&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/dist/index.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- right before your closing &amp;lt;/body&amp;gt; tag --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/dist/index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#example-project" class="anchor"&gt;
  &lt;/a&gt;
  Example project
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/terabaud/lea-codes/"&gt;https://github.com/terabaud/lea-codes/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://terabaud.github.io/eleventy-talk/"&gt;https://terabaud.github.io/eleventy-talk/&lt;/a&gt; - My slides for a talk about 11ty (useful as a summary of this article)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://11ty.dev/"&gt;https://11ty.dev/&lt;/a&gt; - Official site&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://11ty.rocks/"&gt;https://11ty.rocks/&lt;/a&gt; - Eleventy rocks&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://piccalil.li/course/learn-eleventy-from-scratch"&gt;https://piccalil.li/course/learn-eleventy-from-scratch&lt;/a&gt; - in-depth course&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#thank-you" class="anchor"&gt;
  &lt;/a&gt;
  Thank you 👩‍💻
&lt;/h1&gt;

</description>
      <category>eleventy</category>
      <category>thingsivelearned</category>
      <category>blazingfast</category>
      <category>staticsitegenerator</category>
    </item>
    <item>
      <title>Lockdown Fun: Pascal's Triangle</title>
      <author>Mads Stoumann</author>
      <pubDate>Fri, 05 Feb 2021 08:40:34 +0000</pubDate>
      <link>https://dev.to/madsstoumann/lockdown-fun-pascal-s-triangle-3dk1</link>
      <guid>https://dev.to/madsstoumann/lockdown-fun-pascal-s-triangle-3dk1</guid>
      <description>&lt;p&gt;About 7 or 8 years ago, there was a teachers-strike in Denmark, and I had to teach my daughter's class in Math. I made a lot of small "apps" and tasks, which I just uncovered from an old folder.&lt;/p&gt;

&lt;p&gt;Here's an updated version of one: "Pascal's Triangle" — for kids of all ages in Lockdown. &lt;/p&gt;

&lt;p&gt;Click on all numbers divisible by 5 to see the hidden pattern!&lt;/p&gt;

&lt;p&gt;When viewed on larger screens, you can toggle on/off the row explanations and colors. You'll also see the sum of each row at the left side of the screen. This should be a recognizable pattern to developers — tell your kids about &lt;a href="https://en.wikipedia.org/wiki/Power_of_two"&gt;the power of two&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/dyOozQV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you have kids that are &lt;em&gt;really&lt;/em&gt; bored — set the "rows" in the JavaScript-section of the Pen to more than 50 (requires a very large screen!), and have them click on &lt;em&gt;all&lt;/em&gt; numbers divisible by 5!&lt;/p&gt;

&lt;p&gt;Have a great weekend!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>codepen</category>
    </item>
  </channel>
</rss>
