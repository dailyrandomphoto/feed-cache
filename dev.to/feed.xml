<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HTML‚Üí the horns of the links</title>
      <author>Manu Martinez</author>
      <pubDate>Wed, 29 Dec 2021 08:48:14 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/html-the-horns-of-the-links-124l</link>
      <guid>https://dev.to/whitehatdevv/html-the-horns-of-the-links-124l</guid>
      <description>&lt;p&gt;Hello friends, today we are going to talk about links in html! YES because they exist! and they are an incredible tool to keep the information more connected without the need to search for it on our own. Creating something like a spider web.üï∏Ô∏èüï∑Ô∏è&lt;/p&gt;

&lt;p&gt;How does it work ?ü§î &lt;br&gt;
Very simple!! using the tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Link Text&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way we create a "hyperlink" similar to a word or google document.&lt;/p&gt;

&lt;p&gt;We can classify them in :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Internal&lt;/strong&gt;  links  üëâ inside the website &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;External&lt;/strong&gt; links üëâ within another website of the same domain.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Position&lt;/strong&gt; links üëâ inside a section of the website. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at some examples üòé:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#position-links"&gt;
  &lt;/a&gt;
  Position Links:
&lt;/h3&gt;

&lt;p&gt;When we create internal links inside the page,  the links are called ‚ú®&lt;strong&gt;&lt;em&gt;anchors&lt;/em&gt;&lt;/strong&gt;‚ú® and allow us to move in the page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;link 1&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;link 2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"closed"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#external-links"&gt;
  &lt;/a&gt;
  External Links
&lt;/h3&gt;

&lt;p&gt;The navigation menus of websites, which are an essential component, are built with links too! :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Website&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mailto: myemail@example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"tel: +75 19864321495"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Phone&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's not all! Links can be camouflaged between the different elements of the website! From an image to the logo almost everything can be a link but it is important to always keep the necessary ones because links are related to the SEO of a website.&lt;/p&gt;

&lt;p&gt;Alright guys! I think we'll call it a day, I hope you like today's post! Remember guys always be the best version of you!  üòé&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 WEB UX LAWS EVERY DEVELOPER SHOULD KNOW</title>
      <author>Visualway</author>
      <pubDate>Wed, 29 Dec 2021 08:21:55 +0000</pubDate>
      <link>https://dev.to/visualway/5-web-ux-laws-every-developer-should-know-f6h</link>
      <guid>https://dev.to/visualway/5-web-ux-laws-every-developer-should-know-f6h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-jakobs-law"&gt;
  &lt;/a&gt;
  1. JAKOB‚ÄôS LAW
&lt;/h2&gt;

&lt;p&gt;Users spend most of their time on other sites. This means that users prefer your site to work the same way as all the other sites they already know. Websites do better the more standardized their design is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHzwAKIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Jakobs-Law.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHzwAKIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Jakobs-Law.png" alt="jakob" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-fitts-law"&gt;
  &lt;/a&gt;
  2. FITT‚ÄôS LAW
&lt;/h2&gt;

&lt;p&gt;The time it takes someone to select an object in the screen depends on how far the cursor is from the object and the size of the object. Thus, the longer the distance and the smaller the target‚Äôs size, the longer it takes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PRvAjQVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Fittss-Law-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PRvAjQVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Fittss-Law-1.png" alt="fitt" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-millers-law"&gt;
  &lt;/a&gt;
  3. MILLER‚ÄôS LAW
&lt;/h2&gt;

&lt;p&gt;The average person can only keep 7 (plus or minus 2) items in their working memory. Organize content into smaller chunks to help users process, understand, and memorize easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YeGr_MSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Millerss-Law.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeGr_MSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Millerss-Law.png" alt="miller" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-law-of-proximity"&gt;
  &lt;/a&gt;
  4. LAW OF PROXIMITY
&lt;/h2&gt;

&lt;p&gt;Objects that are near, or proximate to each other, tend to be grouped together.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proximity helps to establish a relationship with nearby objects.&lt;/li&gt;
&lt;li&gt;Proximity helps users understand and organize information faster and more efficiently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVB_MSEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Law-of-Proximity.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVB_MSEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Law-of-Proximity.png" alt="proximity" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-hicks-law"&gt;
  &lt;/a&gt;
  5. HICK'S LAW
&lt;/h2&gt;

&lt;p&gt;The time it takes to make a decision increases with the number and complexity of choices. Hick‚Äôs Law is a fairly commonsense idea: the more choices you present to a person, the longer they take to make a decision. It‚Äôs essentially a fancier way to describe the KISS rule: Keep It Simple, Stupid!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZlfYtGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Hicks-Law.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZlfYtGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Hicks-Law.png" alt="hick" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading
&lt;/h3&gt;

&lt;p&gt;If you liked this post, subscribe to our newsletter to never miss out on our blogs, product launches and tech news.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tinyletter.com/visualway"&gt;Subsribe to Visualway's newsletter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
      <category>programming</category>
    </item>
    <item>
      <title>Custom Web Design and Development</title>
      <author>Ace Infoway</author>
      <pubDate>Wed, 29 Dec 2021 07:54:18 +0000</pubDate>
      <link>https://dev.to/ace_infoway/custom-web-design-and-development-4pl9</link>
      <guid>https://dev.to/ace_infoway/custom-web-design-and-development-4pl9</guid>
      <description>&lt;p&gt;&lt;strong&gt;Ace Infoway&lt;/strong&gt; has gained 21+ years of experience in a plethora of &lt;a href="https://www.aceinfoway.com/"&gt;&lt;strong&gt;Custom Web Design and Development&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://www.aceinfoway.com/"&gt;&lt;strong&gt;Custom Website Development Services&lt;/strong&gt;&lt;/a&gt;, IT Services and has access to resources and teams in the USA, UK, and India.&lt;/p&gt;

&lt;p&gt;We are proud to be an extended partner and offer &lt;a href="https://www.aceinfoway.com/website-development"&gt;&lt;strong&gt;Website Development Consultants&lt;/strong&gt;&lt;/a&gt; teams for over 50+ Web Agencies &amp;amp; Businesses in diverse industries. Ace‚Äôs value proposition lies in its diverse domain expertise, minimum learning curve period, and efficient turn-around time. We learn and invest for our customers and with an electrifying and eccentric team on board, we are ready to harness the force for good.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our Esteemed Services Include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/digital-transformation"&gt;Digital Transformation Consulting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/"&gt;Custom Web Design and Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/website-development"&gt;Website Development Consultants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/ui-ux"&gt;UI UX Design Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/product-engineering"&gt;Software Product Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/web-application-development"&gt;Web Application Development Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/mobile-app-development"&gt;Custom Mobile App Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/qa-testing"&gt;Quality Assurance Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aceinfoway.com/back-office-process"&gt;Back Office Solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Publishing Support&lt;/li&gt;
&lt;li&gt;Agencies and Marketing Tech Services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sales Contact:&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Email:&lt;/strong&gt; &lt;a href="mailto:success@aceinfoway.com"&gt;success@aceinfoway.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href="https://www.aceinfoway.com"&gt;https://www.aceinfoway.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>programming</category>
      <category>design</category>
    </item>
    <item>
      <title>How to handle loading progress flicker</title>
      <author>Giannis Koutsaftakis</author>
      <pubDate>Wed, 29 Dec 2021 07:37:48 +0000</pubDate>
      <link>https://dev.to/kouts/how-to-handle-loading-progress-flicker-11ne</link>
      <guid>https://dev.to/kouts/how-to-handle-loading-progress-flicker-11ne</guid>
      <description>&lt;p&gt;One of the most important things in our web apps UX is to provide a form of feedback when the app needs more time to process the user's action when e.g an ajax request is fired in the background. This is usually done using a progress bar, a spinner, or a combination of both. &lt;/p&gt;

&lt;p&gt;Have you ever noticed though a "flaky" behavior when a lot of API calls happen at the same time?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GeTkE3nv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbmtxd8cnngrcxaes4ok.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GeTkE3nv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbmtxd8cnngrcxaes4ok.gif" alt="Image description" width="724" height="54"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We can provide a smooth experience to our users, so let's fix that!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-well-build"&gt;
  &lt;/a&gt;
  What we'll build
&lt;/h2&gt;

&lt;p&gt;We'll create a simple loader handler function for &lt;code&gt;Promises&lt;/code&gt; that will make sure our loading indicator will disappear only when the last unresolved &lt;code&gt;Promise&lt;/code&gt; gets resolved. We'll also make sure that the function is &lt;strong&gt;reusable&lt;/strong&gt; so that it can be used with any project and with any progress loading indicator plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;createLoader.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createLoader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;slackTime&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...{&lt;/span&gt;
      &lt;span class="na"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
      &lt;span class="na"&gt;slackTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slackTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We created a factory function that takes an options object that defines which operations will be performed on loading start/end and optionally an operation to execute when a &lt;code&gt;Promise&lt;/code&gt; is resolved.&lt;/p&gt;

&lt;p&gt;We can also define a &lt;code&gt;slackTime&lt;/code&gt; that will be used as a delay to wait until the last &lt;code&gt;Promise&lt;/code&gt; is resolved. This is useful in cases that we have e.g an API call that starts shortly after another call has just finished, causing a "flickering" effect in our loader.&lt;/p&gt;

&lt;p&gt;The factory function will return our &lt;code&gt;load&lt;/code&gt; method which will accept a &lt;code&gt;Promise&lt;/code&gt; or a function that returns a &lt;code&gt;Promise&lt;/code&gt;. Instead of firing our &lt;code&gt;async&lt;/code&gt; functions directly, we'll pass them through our &lt;code&gt;load&lt;/code&gt; function instead. Our loader then will make sure that the loading progress ends when the last of the &lt;code&gt;Promises&lt;/code&gt; is resolved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  Options
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;start&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A function to execute on loading start, this is where we start our progress loader&lt;/td&gt;
&lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A function to execute when loading ends, this is where we stop our progress loader&lt;/td&gt;
&lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;inc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An optional function to execute when a promise resolves (valid for all promises except the last one). We can use this function to increment our loading progress.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;() =&amp;gt; {}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;slackTime&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Time in &lt;code&gt;ms&lt;/code&gt; to wait until last promise is resolved as to enable multiple operations in a sequence without re-triggering a loader progress start&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#creating-our-loader"&gt;
  &lt;/a&gt;
  Creating our loader
&lt;/h2&gt;

&lt;p&gt;It's time to create our loader. Here we're using the popular &lt;a href="https://github.com/rstacruz/nprogress"&gt;nprogress&lt;/a&gt; library for our progress loading indicator as an example.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;loader.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NProgress&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nprogress&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createLoader&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./createLoader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;NProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;minimum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;NProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;NProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;NProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createLoader&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;slackTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inc&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have configured the &lt;code&gt;NProgress&lt;/code&gt; instance and setup a new loader that will start, end, or increment the &lt;code&gt;nprogress&lt;/code&gt; progress bar depending on the &lt;code&gt;Promises&lt;/code&gt;' state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;Using our loader is fairly simple, we just need to pass our &lt;code&gt;Promises&lt;/code&gt; into the &lt;code&gt;load&lt;/code&gt; function and our loader will take care of the rest. Here's an example using &lt;code&gt;axios&lt;/code&gt; that dispatches two requests so that they get registered in our loader.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/todos`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/todos/1`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;That's it&lt;/strong&gt;, no more loading progress flicker!&lt;/p&gt;

&lt;p&gt;If you want to see how this feels in a browser, checkout a live example of the loader that implements a global page progress bar (and some extra stuff too) in this stackblitz &lt;a href="https://stackblitz.com/edit/vitejs-vite-yv9gg4?"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure you open this with a Chromium-based browser (e.g Chrome) and run &lt;code&gt;npm run dev&lt;/code&gt; on the console.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>ux</category>
    </item>
    <item>
      <title>Public Solving: Let it snow</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 29 Dec 2021 07:16:46 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/public-solving-let-it-snow-29ik</link>
      <guid>https://dev.to/dailydevtips1/public-solving-let-it-snow-29ik</guid>
      <description>&lt;p&gt;Today the elves asked us to make some snow animations!&lt;br&gt;
This is a pretty exciting task as we have to get out our creative hats.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/devadvent/puzzle-19"&gt;You can find the complete puzzle here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far I've done some &lt;a href="https://daily-dev-tips.com/posts/happy-birthday-confetti-animation/"&gt;confetti in CSS&lt;/a&gt;, and an &lt;a href="https://daily-dev-tips.com/posts/css-animated-snake/"&gt;animated snake&lt;/a&gt;.&lt;br&gt;
Today we can add animated snow to the list.&lt;/p&gt;

&lt;p&gt;We are free to make it in any way we want.&lt;/p&gt;

&lt;p&gt;My results looks like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/gOGRzJq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-a-solution"&gt;
  &lt;/a&gt;
  Thinking about a solution
&lt;/h2&gt;

&lt;p&gt;I'm right away thinking in the lines of the CSS confetti I made, where we repeat 50 divs and use CSS to randomize some elements of every snowflake.&lt;/p&gt;

&lt;p&gt;The things I want to randomize:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Size of the snowflake&lt;/li&gt;
&lt;li&gt;Position left to right on the screen&lt;/li&gt;
&lt;li&gt;Animation speed and delay&lt;/li&gt;
&lt;li&gt;Falling animation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This would be the easiest to use SASS, which isn't mentioned as a no-go, so we'll be implementing that.&lt;/p&gt;

&lt;p&gt;For the creation of 50 divs, we could use &lt;code&gt;pug&lt;/code&gt;, but I inject them through JavaScript.&lt;/p&gt;

&lt;p&gt;Let me guide you through this process step by step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-animated-snow-in-javascript"&gt;
  &lt;/a&gt;
  Making animated snow in JavaScript
&lt;/h2&gt;

&lt;p&gt;First, we need to add our 50 divs into the main container.&lt;br&gt;
This main container already exists and looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"snow"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can fetch this element in our provided JavaScript file by using the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snowContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.snow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll need to create a loop that runs 50 times and adds a new element into this one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snowFlake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;snowFlake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snowflake&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;snowContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snowFlake&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;forEach&lt;/code&gt; hack is a simple way to generate x looped lines.&lt;br&gt;
We then use the &lt;code&gt;createElement&lt;/code&gt; function to create a new div and add the &lt;code&gt;snowflake&lt;/code&gt; class.&lt;br&gt;
After which, we add out to our container element.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#enable-scss-in-vite"&gt;
  &lt;/a&gt;
  Enable SCSS in Vite
&lt;/h3&gt;

&lt;p&gt;Now that we have these 50 divs in the viewport, we need to change the default CSS import to work with SASS files.&lt;/p&gt;

&lt;p&gt;Luckily for us, Vite already supports this out of the box. We just need to install the preprocessor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; sass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can change our file from &lt;code&gt;style.css&lt;/code&gt; to &lt;code&gt;style.scss&lt;/code&gt;.&lt;br&gt;
And modify the import in the &lt;code&gt;main.js&lt;/code&gt; to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./style.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right, we can now leverage the massive powers of SCSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-the-snowflake-elements"&gt;
  &lt;/a&gt;
  Styling the snowflake elements
&lt;/h3&gt;

&lt;p&gt;There are some elements to our snowflake that never really change.&lt;br&gt;
We can style those in a general fashion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.snowflake&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-5vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This sets a basic viewport-based snowflake.&lt;br&gt;
It will start outside of the viewport on the negative top side.&lt;/p&gt;

&lt;p&gt;Then we want to create a loop to add our differences to each individual snowflake.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@for&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.snowflake&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;random(100)&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;snowfall&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;10&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="err"&gt;random(10)&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;linear&lt;/span&gt; &lt;span class="nt"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;animation-delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;random(15)&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we loop 50 times, and for each of the snowflake, we set the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Random size: between &lt;code&gt;0.1vw&lt;/code&gt; and &lt;code&gt;1vw&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The left position 0-100% of the viewport width&lt;/li&gt;
&lt;li&gt;The animation time and a custom delay, so they don't all fall at the same time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The animation looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;snowfall&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110vh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we get the random flakes falling down, but they fall straight down, so maybe we should add a slight offset to mix things up.&lt;/p&gt;

&lt;p&gt;To achieve this, we need a horizontal start and endpoint.&lt;br&gt;
This should be a random number based on a percentage of the viewport's width.&lt;br&gt;
As we don't want the snowflakes to fall across the whole screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;--horizontal-start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;random(20)&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;--horizontal-end&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;random(20)&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, we can modify our animation to start and end on these values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;snowfall&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--horizontal-start&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--horizontal-end&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;110vh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, my version of CSS-based animated snow ‚ùÑÔ∏è.&lt;/p&gt;

&lt;p&gt;I would be delighted to see other people's snow animations, as some are wizards with CSS üëÄ.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>PHP deployment to SSH server using Github action and bash script</title>
      <author>es404020</author>
      <pubDate>Wed, 29 Dec 2021 07:04:15 +0000</pubDate>
      <link>https://dev.to/es404020/php-deployment-to-ssh-server-using-github-action-and-bash-script-58e</link>
      <guid>https://dev.to/es404020/php-deployment-to-ssh-server-using-github-action-and-bash-script-58e</guid>
      <description>&lt;p&gt;In this tutorial we would lean how to deploy our PHP code to a remote server using github action .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1.
&lt;/h2&gt;

&lt;p&gt;ssh into remote server by &lt;/p&gt;

&lt;p&gt;for Windows users use Power shell, while Mac users use Terminal.&lt;/p&gt;

&lt;p&gt;yyyy : username&lt;br&gt;
xxxx.xxxx.xxxx : Remote IP address&lt;br&gt;
-p :Reference to a port&lt;br&gt;
ZZZZ: port number &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;In the root directory on your linux server create a bash file and write into by using &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
touch phpdeploy.sh &amp;amp;&amp;amp; vi phpdeploy.sh&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;To start typing on the vi editor type press the "a" key and input the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "Deploying changes..."


cd /var/www/html

DIR="ECOMM"

if [ -d "$DIR" ]; then

  cd DIR
  echo "Pull update "
  git  pull 
fi

else 
 echo "Clone repo"
 git clone 
 https://username:password@github.com/username/projectname.git


fi

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To exit insert mode on vi editor press escape key followed by shift column and type wq(save and quite).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h2&gt;

&lt;p&gt;This is our final step, this involves creating our .github/main.yaml file in the root of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name:project name
on:
  push:
    branches: main
jobs:
  build-and-deploy:
    name: Build and deploy next site
    runs-on: ubuntu-latest
    steps:
        - name: copy file via ssh key
        uses: appleboy/scp-action@master
        env:
          HOST:  XXXXXXX
          PORT:  XXXXX
          USERNAME:  XXXXX
          PASSWORD: XXXXXX
          command_timeout: 100m
          script: sh phpdeploy.sh

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For every time your code is merger to "main" branch  the yaml file above would execute.Thanks for reading.&lt;/p&gt;

</description>
      <category>php</category>
      <category>github</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Weekly web development resources #102</title>
      <author>Vincent Will</author>
      <pubDate>Wed, 29 Dec 2021 07:00:42 +0000</pubDate>
      <link>https://dev.to/vincenius/weekly-web-development-resources-102-2n86</link>
      <guid>https://dev.to/vincenius/weekly-web-development-resources-102-2n86</guid>
      <description>

&lt;h2&gt;
  &lt;a href="#alternate-column-scroll-animation"&gt;
  &lt;/a&gt;
  &lt;a href="https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/"&gt;Alternate Column Scroll Animation &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://tympanus.net/codrops/2021/12/21/alternate-column-scroll-animation/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ErlkUnTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/column-layout.jpg" alt="Alternate Column Scroll Animation " width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
A grid layout with columns that scroll in opposite directions and a content preview animation.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#colorhuddle"&gt;
  &lt;/a&gt;
  &lt;a href="https://colorhuddle.co/"&gt;ColorHuddle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://colorhuddle.co/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QFgAnKIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/colorhuddle.jpg" alt="ColorHuddle" width="880" height="462"&gt;&lt;/a&gt;&lt;br&gt;
A collection of color palettes on which you can easily copy the hex codes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#alternativefrontends"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/mendel5/alternative-front-ends"&gt;alternative-front-ends&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/mendel5/alternative-front-ends"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bBdN2p9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/frontends.jpg" alt="alternative-front-ends" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
Overview of alternative open source front-ends for popular internet platforms (e.g. YouTube, Twitter, etc.)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vitest"&gt;
  &lt;/a&gt;
  &lt;a href="https://vitest.dev/"&gt;Vitest&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://vitest.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4pIOGMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/vitest.jpg" alt="Vitest" width="880" height="461"&gt;&lt;/a&gt;&lt;br&gt;
A  fast unit test framework powered by Vite.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#intab-resources"&gt;
  &lt;/a&gt;
  &lt;a href="https://intab.io/resources/"&gt;Intab Resources&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://intab.io/resources/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymD3JMQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/devbox.jpg" alt="Intab Resources" width="880" height="527"&gt;&lt;/a&gt;&lt;br&gt;
A curated list of 84+ web development resources.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-react-context-effectively"&gt;
  &lt;/a&gt;
  &lt;a href="https://kentcdodds.com/blog/how-to-use-react-context-effectively"&gt;How to use React Context effectively&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://kentcdodds.com/blog/how-to-use-react-context-effectively"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wnAfecpm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/react-context.jpg" alt="How to use React Context effectively" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
An interesting article on React Context by Kent C. Dodds.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#deploy-a-gmaillike-email-server"&gt;
  &lt;/a&gt;
  &lt;a href="https://andycallaghan.com/posts/deploy-a-gmail-like-email-server-in-30-minutes/"&gt;Deploy a Gmail-like email server&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://andycallaghan.com/posts/deploy-a-gmail-like-email-server-in-30-minutes/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---vPuYVqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/gmail.jpg" alt="Deploy a Gmail-like email server" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
An article by Andy Callaghan on how to run your own email infrastructure.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#blackmagic"&gt;
  &lt;/a&gt;
  &lt;a href="https://blackmagic.so/"&gt;BlackMagic&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blackmagic.so/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXNl7Xbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/blackmagic.jpg" alt="BlackMagic" width="880" height="461"&gt;&lt;/a&gt;&lt;br&gt;
A browser plugin to enhance your Twitter experience.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#coding-fonts"&gt;
  &lt;/a&gt;
  &lt;a href="https://coding-fonts.css-tricks.com/"&gt;Coding Fonts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://coding-fonts.css-tricks.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O7lewHiM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/coding-fonts.jpg" alt="Coding Fonts" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
A collection of coding fonts with infos about designers, character charts, features, and more.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bangleio"&gt;
  &lt;/a&gt;
  &lt;a href="https://bangle.io/"&gt;Bangle.io&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://bangle.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ppYs42W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/bangle.jpg" alt="Bangle.io" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
A powerful note taking web app that works on top of your locally saved Markdown files. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#icon-shelf"&gt;
  &lt;/a&gt;
  &lt;a href="//An%20icon%20manager%20for%20developers%20to%20have%20all%20icons%20in%20one%20place,%20easily%20copyable%20as%20code."&gt;Icon Shelf&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://icon-shelf.github.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-lftyMh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/icon-shelf.jpg" alt="Icon Shelf" width="880" height="481"&gt;&lt;/a&gt;&lt;br&gt;
An icon manager for developers to have all icons in one place, easily copyable as code.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#github-repositories"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/denicmarko/status/1475803138498207746"&gt;GitHub repositories&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/denicmarko/status/1475803138498207746"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oGsr5GYF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/102/github-repos.jpg" alt="GitHub repositories" width="880" height="498"&gt;&lt;/a&gt;&lt;br&gt;
A nice Twitter thread with GitHub repositories to improve your programming skills.&lt;/p&gt;




&lt;p&gt;To see all the weeklies check: &lt;a href="https://wweb.dev/weekly"&gt;wweb.dev/weekly&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>weekly</category>
    </item>
    <item>
      <title>Why I'm excited about web3.0</title>
      <author>Eda</author>
      <pubDate>Wed, 29 Dec 2021 06:59:04 +0000</pubDate>
      <link>https://dev.to/edatweets_/why-im-excited-about-web30-1i94</link>
      <guid>https://dev.to/edatweets_/why-im-excited-about-web30-1i94</guid>
      <description>&lt;p&gt;You may have heard of web3. It made quite the buzz this year; it seems like people either love it or hate it. Honestly, I didn't know what web3 was until I somehow ended up in the web3 world itself. I didn't even know that the traditional tech world, which I am in, is called the web2 world (ps: no one calls it web2 there).&lt;/p&gt;

&lt;p&gt;After months of experimenting, learning and building in the web3 world, I decided it's time to explain how I see web3, why I'm excited about it, alongside some of the challenges.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-background"&gt;
  &lt;/a&gt;
  The background
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-even-is-web1-and-web2"&gt;
  &lt;/a&gt;
  What even is web1 and web2?
&lt;/h2&gt;

&lt;p&gt;To understand web3, we first need to understand the evolution of the web. The web has evolved a lot since it got into our lives: web1, web2 and web3 as terms to describe the different eras.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Web1&lt;/strong&gt; is the first web era, also known as the &lt;strong&gt;read-only web&lt;/strong&gt;. Web1 roughly covers the years between 1990-2005. During this period, users were mainly consumers of the technology‚Äîan era when static websites were a thing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then came &lt;strong&gt;web2&lt;/strong&gt;. Web2, the &lt;strong&gt;read-write web&lt;/strong&gt;, started around 2005 and is mainly used today. The web became a place where anyone can create content. It became a new collaborative and interactive environment. Social media has been a significant catalyst for web2. It's never been easier to upload a cat photo to Instagram, celebrate birthdays from Facebook and chat via Facetime.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, it went from only super shady coders doing something on web1 to making it so easy that now everyone can easily use web2. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here's a great intro video for the eras of the web by Whiteboard Crypto -&lt;a href="https://www.youtube.com/watch?v=nHhAEkG1y2U&amp;amp;ab_channel=WhiteboardCrypto"&gt;What is Web 3.0? (Explained with Animations)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-issues-with-web2"&gt;
  &lt;/a&gt;
  What are the issues with web2?
&lt;/h2&gt;

&lt;p&gt;Web2 is &lt;strong&gt;highly centralized&lt;/strong&gt;. In web2, large companies own servers that provide messaging, searching, storing etc. These companies have complete control and ownership over the services they provide.&lt;/p&gt;

&lt;p&gt;You need to agree to the terms and services to use the platforms. This makes sense as the companies pay to operate these servers and provide you with certain services. That been said, with every term and condition agreement, we &lt;strong&gt;give the ownership and control of our data&lt;/strong&gt;. Companies use this data to monetize their platform; it's fair to say that many large companies solely exist to collect data. Not to get into many buzzwords, but this is also called the &lt;a href="https://en.wikipedia.org/wiki/Data_economy"&gt;&lt;strong&gt;data economy&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Aside from the issues with companies using and selling our data, these entities are the &lt;strong&gt;primary targets for hackers&lt;/strong&gt;. Cyberattacks and data breaches are inevitable when there is a single point of failure.&lt;/p&gt;

&lt;p&gt;Last but not least is the &lt;strong&gt;control that the centralized cooperations&lt;/strong&gt; have. They can change the product and the features anytime, affecting others using their platforms. Companies also have the power to censor and block any account.&lt;/p&gt;

&lt;p&gt;In this environment, we see web3 emerging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-i-get-into-web3"&gt;
  &lt;/a&gt;
  How did I get into web3?
&lt;/h2&gt;

&lt;p&gt;Before moving on to what web3 is, I want to explain how I ended up here. Because quite honestly, it wasn't due to the issues in the web2 world. I got in as an investor (sounds cooler than just saying money), but I saw all the prices going up and tried to give it a go. You can read more about how I got into web3 in this &lt;a href="https://eda.hashnode.dev/my-web3-journey-day-50-of-100daysofweb3"&gt;post&lt;/a&gt;. In short, after getting in for the money, I fell in love with the technology and community. I started to learn, build, contribute, and that's how my web3 journey started.&lt;/p&gt;

&lt;p&gt;The way I see it is that there are these problems in web2, but there's no denying that it's a working system and has great benefits. The disadvantages feel like something most people accept without diving deep when using web2 platforms. People love to use Instagram, TikTok, Google, Twitter etc. I did too, but &lt;strong&gt;once I learned that an alternative exists, I started to dig deeper and ask interesting questions; that was a turning point for me.&lt;/strong&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#web3"&gt;
  &lt;/a&gt;
  Web3
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-web3"&gt;
  &lt;/a&gt;
  What is web3?
&lt;/h2&gt;

&lt;p&gt;Web3 is mainly described as &lt;strong&gt;the decentralized web&lt;/strong&gt;; it's still a term under construction.&lt;/p&gt;

&lt;p&gt;Here is a more detailed definition that I enjoyed from &lt;a href="https://www.psl.com/feed-posts/web3-engineer-take"&gt;this article&lt;/a&gt; by Dave Peck &amp;amp; the PSL Team:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúWeb3‚Äù is the name* given to a suite of peer-to-peer technologies ‚Äî particularly blockchains and distributed filesystems (like IPFS)‚Äî that are used to build modern ‚Äúdecentralized apps‚Äù, or dApps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essentially it's &lt;strong&gt;a group of technologies that are all decentralized and used to create decentralized applications.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This means that in web3, there isn't any single company in control but instead individual contributors that own and control the underlying technology stack. So basically, now service providers and users become the same person. Decentralization takes away the power from a single entity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-would-anyone-want-to-become-a-service-provider"&gt;
  &lt;/a&gt;
  Why would anyone want to become a service provider?
&lt;/h2&gt;

&lt;p&gt;Now, this is where &lt;strong&gt;cryptocurrencies&lt;/strong&gt; come into play.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cryptocurrencies are the economic incentives given to network contributors&lt;/strong&gt; (aka service providers). Each contributor provides resources to the network and gets rewarded in cryptocurrencies. Anyone can become a service provider, like you and me. &lt;/p&gt;

&lt;p&gt;Consumers pay with cryptocurrencies to use the services. So it's a &lt;strong&gt;different economic relationship from the traditional web world that we know&lt;/strong&gt;. &lt;em&gt;For example, in web2, a user might pay AWS or Microsoft for cloud services; in web3, the money goes to the network participants.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is value for both the creator and the consumer of the network. &lt;strong&gt;It's a relationship based on the protocol rules without any entity in between.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-this-blockchain-thing"&gt;
  &lt;/a&gt;
  What about this "blockchain" thing?
&lt;/h2&gt;

&lt;p&gt;Today we mainly see the use of &lt;strong&gt;decentralized blockchain technology&lt;/strong&gt; for building web3. &lt;/p&gt;

&lt;p&gt;Now two important notes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A blockchain does not have to be decentralized. I mostly see people take decentralization when they refer to blockchain technology. However, blockchain does not imply decentralization.&lt;/li&gt;
&lt;li&gt;Web3 does not have to use blockchain technology. In the context of Ethereum, that is the technology used. However, keep in mind that web3 and blockchain are not the same things.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, &lt;strong&gt;blockchain is a shared ledger&lt;/strong&gt; where each transaction is recorded and shared between the participants. Instead of having a central location for information, the information is shared among multiple computers on the network.  &lt;/p&gt;

&lt;p&gt;There are different layers to the web3 technology stack‚Äîwhich we will not cover in this post. Instead, here's a great &lt;a href="https://edgeandnode.com/blog/defining-the-web3-stack"&gt;post&lt;/a&gt; by Nader that I'd highly recommend if you'd like to dive deeper into the tech stack. &lt;/p&gt;

&lt;p&gt;Essentially, in web3, there isn't any person or marketplace in the middle, but instead, &lt;strong&gt;there are protocols governed by network contributors which have economic incentives to participate.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-am-i-excited-about-web3"&gt;
  &lt;/a&gt;
  Why am I excited about web3?
&lt;/h2&gt;

&lt;p&gt;Here are what I'm most excited for:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Individual ownership and control&lt;/strong&gt;: people can own and control what they create on web3. For example, you can have your self-sovereign identity without relying on any identity provider or you could create a blog post on a user-owned blogging platform where the content is yours.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://academy.binance.com/en/glossary/trustless"&gt;&lt;strong&gt;Trustless&lt;/strong&gt;&lt;/a&gt;: the web2 world is based on trust. We trust the centralized cooperations to provide services and give them control over our data. It's a single point of control and thus trust, which creates a massive power imbalance. Instead, in web3, there are protocols that the users can directly interact with; there isn't any marketplace in between. Users do not need to trust anyone in the middle to utilize the services.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Open and Global Ecosystem&lt;/strong&gt;:  The services and protocol are global and available to everyone regardless of location, age, sex etc. Every single contributor has a specific economic incentive to participate. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Boost of Innovation&lt;/strong&gt;: advertising is the dominant revenue model for the web that we know of today. Much time and energy is spent on advertising and learning the consumer better to show them the correct clothing item or even certain news. Alongside this, the boundaries of the web2 world are in some ways defined and limited. In web3, there is much room to explore and experiment, it raises many interesting questions, and people can try new things. I'm amazed when I hear about what some projects are trying to do. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you may be asking why I did not mention decentralization here. The reason being is that these properties are only possible with decentralization, so it's not the goal itself but the core component to get there. &lt;/p&gt;

&lt;p&gt;The more people contribute, the more decentralized the underlying technology becomes. Recall that this technology is very new, so we yet need to understand the degree of decentralization and how to distribute cryptocurrencies in the best way. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-the-cons-of-web3"&gt;
  &lt;/a&gt;
  What about the cons of web3?
&lt;/h2&gt;

&lt;p&gt;Here are some of the challenges I see for web3:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Regulations&lt;/strong&gt;: there's no regulatory clarity. Most of the space is experimental without any guidelines. This creates an uncertain environment for everyone participating.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Language&lt;/strong&gt;: There seems to be an invisible barrier of entry; at least, that was the case in my experience. There are too many new terminology and abbreviations. Alongside these, the false and overly-optimistic information make it complicated to understand. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Monetary Incentives&lt;/strong&gt;: Custodial wallets are growing faster than non-custodial; more people seem to be interested in the money than the tech. This does not speak well on the promise of decentralization. Additionally, there are "maxi's" (people who only like their coins and tokens, hate all the others), which creates a lot of intense discussions in the space. It's hard to tell if people believe in a particular tech or if it's their monetary incentives.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Narrative&lt;/strong&gt;: there are a lot of opposing views on crypto. I constantly find myself explaining why I'm interested in the technology and then get the response: "but bitcoin is used for illegal activities". It takes time to change this, and we need concrete killer-use cases to do so. &lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Centralized platforms have been the standard for so long that it is hard to imagine otherwise. However, there's no denying the issues of web2. Web3 is reshaping the web, redesigning at its core, and I'm super excited to see what it will bring!&lt;/p&gt;

&lt;p&gt;This post is my take on web3, and I'm sure there's more to learn as we see web3 evolving. &lt;/p&gt;

&lt;p&gt;Thanks for reading! If you have any questions or comments, drop them below or reach out to me from &lt;a href="https://twitter.com/edatweets_"&gt;Twitter&lt;/a&gt;. I'd love to hear from you!&lt;/p&gt;

</description>
      <category>web3</category>
      <category>beginners</category>
      <category>blockchain</category>
      <category>ethereum</category>
    </item>
    <item>
      <title>My New Python library</title>
      <author>Prince Verma</author>
      <pubDate>Wed, 29 Dec 2021 06:46:38 +0000</pubDate>
      <link>https://dev.to/vermaprince123/my-new-python-library-12h6</link>
      <guid>https://dev.to/vermaprince123/my-new-python-library-12h6</guid>
      <description>&lt;p&gt;Check it out my new library :- Share your views&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zvamI2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2f4s098r1jf40d0slhz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zvamI2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2f4s098r1jf40d0slhz.PNG" alt="Image description" width="880" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to choose a MongoDB shard key</title>
      <author>ChunTing Wu</author>
      <pubDate>Wed, 29 Dec 2021 06:40:36 +0000</pubDate>
      <link>https://dev.to/lazypro/how-to-choose-a-mongodb-shard-key-3c7d</link>
      <guid>https://dev.to/lazypro/how-to-choose-a-mongodb-shard-key-3c7d</guid>
      <description>&lt;p&gt;In this article, I will show you what is the ideal pattern of a MongoDB shard key. Although there is a good page on the &lt;a href="https://docs.mongodb.com/manual/core/sharding-choose-a-shard-key/"&gt;MongoDB official manual&lt;/a&gt;, it still not provides a formula to choose a shard key.&lt;/p&gt;

&lt;p&gt;TL;DR&lt;/p&gt;

&lt;p&gt;The formula is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{coarselyAscending : 1, search : 1}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will explain the reason in the following sections.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-scenario"&gt;
  &lt;/a&gt;
  User Scenario
&lt;/h2&gt;

&lt;p&gt;In order to well-describe the formula, I will use an example to illustrate the scenario. There is a collection within application logs, and the format is like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"4df16cf0-2699-410f-a07e-ca0bc3d3e153"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"high"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1635132899&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Database crash"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each log has the same template, &lt;code&gt;id&lt;/code&gt; is a &lt;code&gt;UUID&lt;/code&gt;, &lt;code&gt;ts&lt;/code&gt; is an epoch, and both &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;level&lt;/code&gt; are a finite enumeration. I will leverage the terminologies in the official manual to explain some incorrect designs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#low-cardinality-shard-key"&gt;
  &lt;/a&gt;
  Low Cardinality Shard Key
&lt;/h2&gt;

&lt;p&gt;From the mentioned example, we usually choose &lt;code&gt;type&lt;/code&gt; at first sight. Because, we always use &lt;code&gt;type&lt;/code&gt; to identify the logging scope. However, if we choose the &lt;code&gt;type&lt;/code&gt; as the shard key, it must encounter a hot-spot problem. Hot-spot problem means there is a shard size much larger than others. For example, there are 3 shards corresponding to 3 types of logs, app, web and admin, the most popular user is on app. Therefore, the shard size with app log will be very large. Furthermore, due to the low-cardinality shard key, the shards cannot be rebalanced anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ascending-shard-key"&gt;
  &lt;/a&gt;
  Ascending Shard Key
&lt;/h2&gt;

&lt;p&gt;Alright, if &lt;code&gt;type&lt;/code&gt; cannot be the shard key, how about &lt;code&gt;ts&lt;/code&gt;? We always search for the most recently logs, and &lt;code&gt;ts&lt;/code&gt; are fully uniform distributed, it should be a proper choice. Actually, no. When the shard key is an ascending data, it works at the very first time. Nevertheless, it will result in a performance impact soon. The reason is &lt;code&gt;ts&lt;/code&gt; is always ascending, so the data will always insert into the last shard. The last shard will be rebalanced frequently. Worst of all, the query pattern used to search from the last shard as well, i.e. the search will often be the rebalance period.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random-shard-key"&gt;
  &lt;/a&gt;
  Random Shard Key
&lt;/h2&gt;

&lt;p&gt;Based on the previous sections, we know &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;ts&lt;/code&gt; all are not good shard key candidates. Thus, we can use &lt;code&gt;id&lt;/code&gt; as the shard key, so that we can spread the data evenly without frequent changes. This approach will work fine when the data set is limited. After the data set becomes huge, the overhead of rebalance will be very high. Because the data is random, MongoDB has to random access the data while rebalancing. On the other hand, if the data is ascending, MongoDB can retrieve the data chunks via the sequential access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;A good MongoDB shard key should be like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{coarselyAscending : 1, search : 1}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to prevent the random access, we choose the coarsely ascending data be the former. This pick also won't meet the problem of frequently rebalancing. And we put a search pattern on the latter to ensure the related data can be located at the same shard as much as possible. In our example, I will not only choose the shard key but also redesign our search pattern. The &lt;code&gt;ts&lt;/code&gt; is fine to address the log at the specific time; however, it is a bit inefficient for a time range query like from 3 month ago til now. Hence, I will add one more key, &lt;code&gt;month&lt;/code&gt;, in the document, so we therefore can leverage the MongoDB date type and make a proper shard key. The collection will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4df16cf0-2699-410f-a07e-ca0bc3d3e153&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;level&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;high&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1635132899&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Database crash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;month&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// only month&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, the shard key is &lt;code&gt;{month: 1, type: 1}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The key point here is we use &lt;code&gt;month&lt;/code&gt; instead of &lt;code&gt;ts&lt;/code&gt; to avoid frequently rebalaning. The &lt;code&gt;month&lt;/code&gt; is not made just for the shard key; on the contrary, we also use it for our search pattern. Instead of calculating the relationship between timestamp and the date, we can use &lt;code&gt;getMonth&lt;/code&gt; to find results faster. For instance,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//1 month ago&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;$gte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;}});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To sum up, this article provides the concepts of designing MongoDB shard key. You might not have a coarsely ascending data so, but you can refer to the concepts and find out a proper key design for your applications.&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>distributedsystems</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>OOP in Python </title>
      <author>Md Shahriyar Al Mustakim Mitul</author>
      <pubDate>Wed, 29 Dec 2021 06:39:03 +0000</pubDate>
      <link>https://dev.to/mitul3737/oop-in-python-562k</link>
      <guid>https://dev.to/mitul3737/oop-in-python-562k</guid>
      <description>&lt;p&gt;Requirement: List, Dictionary , Function etc&lt;/p&gt;

&lt;p&gt;So, OOP is basically programming with Object&lt;br&gt;
So, What is Object? To know this, you have to know what is Class? &lt;br&gt;
Okay , do know about string? Let's see what are there in the directory of string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(dir(str))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so, what are they? There are methods under "str" class&lt;br&gt;
for example: upper is a method and &lt;strong&gt;doc&lt;/strong&gt; is a private method&lt;br&gt;
and method is mainly function within a class . Nothing else!&lt;/p&gt;

&lt;p&gt;So , you have a little knowledge of "class" now&lt;/p&gt;

&lt;p&gt;Let's create a class named example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example:
    print("Congratulations! you have created your first class")

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Congratulations! you have created your first class
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now we will create method within the class and remember that, while you create the method, you will have to give "self" parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example:
    def hello_world(self):
        print("Created 1st method")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now the question is that what is self? this self is basically to differ from other class . But to know about this, you need to know what is object. You may consider object/instance as a child of a class. Let's create a class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example1:
    def hello_world(self):
        print("Created 1st method")


object=example1()# created an object
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use the class, you just need  to create an object with the class name and you can then use all the method and variable within the class. Let's create an object and use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example1:
      def hello_world(self):
          print("Hello world")

      def details(self):
          print("We are learning OOP")

object1=example1()
object1.details()#using details method

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;We are learning OOP
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have created an object and used details method of the class through the object&lt;/p&gt;

&lt;p&gt;Now let's assume , you want to give some input and then work depending on those input, you can use &lt;strong&gt;init&lt;/strong&gt; method for that . Basically &lt;strong&gt;init&lt;/strong&gt; method is made to do must things of a class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example1:
    def __init__(self):
        print("Hey! used the __init__ method")

    def hello_world(self):
          print("Hello world")

    def details(self):
          print("We are learning OOP")

object1=example1()


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hey! used the __init__ method
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, look here we created an object but did not call any method , still this is printed . The reason is that, we have added that under &lt;strong&gt;init&lt;/strong&gt; . so these sort of things are done using &lt;strong&gt;init&lt;/strong&gt;&lt;br&gt;
.&lt;/p&gt;

&lt;p&gt;Now, let's take some input while creating an object and use them .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example1:
    def __init__(self,name, country):

        self.variable_1=name
        self.variable_2=country
        print(self.variable_1)
        print(self.variable_2)

object1=example1("Mitul", 'Bangladesh')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here, while creating the object we are taking 2 values. Name and country name. and then look def &lt;strong&gt;init&lt;/strong&gt;(self,name, country) here, we have set 3 parameter. self,name and country . Self is a must but other 2 are taken for 2 input we will take while creating an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example1:
    def __init__(self,name, country):

        self.variable_1=name
        self.variable_2=country
        print(self.variable_1)
        print(self.variable_2)
        print("-----------")

object1=example1("Mitul", 'Bangladesh')
object2=example1('Karim', "India")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now , you can see that we have 2 objects now and we can use as many time as we want providing name and country &lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mitul
Bangladesh
-----------
Karim
India
-----------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can again provide default values for variables within &lt;strong&gt;init&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example1:
    def __init__(self,name, country="default"):

        self.variable_1=name
        self.variable_2=country
        print(self.variable_1)
        print(self.variable_2)
        print("-----------")

object1=example1("Mitul")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mitul
default
-----------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's know more about self using 2 class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#class 1
class Hospital:
    def __init__(self,name):
           self.name=name
           self.d_dict={}
           self.p_dict={}
           self.d_count=0
           self.p_count=0

    def addDoctor(self,var):
        self.d_dict[var.d_id]=[var.d_name,var.d_spe]
        self.d_count+=1


    def getDoctorByID(self,val):
        if val in self.d_dict.keys():
            return f"Doctor's ID:{val}\nName:{self.d_dict[val][0]}\nSpeciality:{self.d_dict[val][1]}"


    def allDoctors(self):
        print("All Doctors")
        print(f"Number of Doctors: {self.d_count}")
        print(self.d_dict)

#class 2
class Doctor:
    def __init__(self,id,occ,name,spe):
        self.d_id=id
        self.d_occ=occ
        self.d_name=name
        self.d_spe=spe



h = Hospital("Evercare")# created an object with hospital name and Hospital class
d1 = Doctor("1d","Doctor", "Samar Kumar", "Neurologist") #created an object with Doctor class and with id, occupation , name , speciality 
h.addDoctor(d1) #used a method of Hospital class . Notice h is not an object under Doctor class but addDoctor is under the class Doctor. So, we are basically using a method called addDoctor with an object not created from his own class

print(h.getDoctorByID("1d"))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Doctor's ID:1d
Name:Samar Kumar
Speciality:Neurologist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, don't think about the code. Here we created "h" object through Hospital class and "d1" through Doctor class . so we used "getDoctorById" method  through the object "h" and here into the code, while we used this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    def addDoctor(self,var):
        self.d_dict[var.d_id]=[var.d_name,var.d_spe]
        self.d_count+=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you check the line self.d_dict[var.d_id]=[var.d_name,var.d_spe] here, var refers to object of other class or in a word this is of a different class but self refers here things of only Hospital class. so , self here differs between 2 class . &lt;/p&gt;

&lt;p&gt;So, stay cool. Don't need to panic if you don't realize anything.&lt;/p&gt;

&lt;p&gt;Let's learn things gradually to master OOP&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Public, Protected &amp;amp; Private Variable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Public variable : It can be used outside the class and in other class too&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Car:
    numberOfWheels=4

class Bmw(Car):
    def __init__(self):
        print("Inside the BMW Class",self.numberOfWheels)

car=Car()
print(car.numberOfWheels)#used outside of the class
bmw=Bmw()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;4
Inside the BMW Class 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Protected Variable: This variable can be used in other class and also outside of the class but you need to use "_" to create this sort of variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Car:
    _color = "Black" #proteced variable

class Bmw(Car):
    def __init__(self):
        print("Inside the BMW Class",self._color)#used within a different class

car=Car()
print(car._color)#used outside of the class
bmw=Bmw()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Black
Inside the BMW Class Black
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Private Variable: You cannot use Private variable outside a class but use it within a class . Don't forget to use "__" before the variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Car:
    __yearOfManufacture = 2017

    def Private_key(self):
        print("Private attribute yearOfManufacture: ",car.__yearOfManufacture)  # private variable only works with its own class


car=Car()
car.Private_key()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Private attribute yearOfManufacture:  2017
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example using all of the variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Public=membername
#Protected=_memberName
#Private=__memberName
class Car:
    numberOfWheels=4
    _color="Black"
    __yearOfManufacture=2017

    def Private_key(self):
        print("Private attribute yearOfManufacture: ", car.__yearOfManufacture) #private variable only works with its own class


class Bmw(Car):
    def __init__(self):
        print("Protected attribute color",self._color)#By using Inheritence we got Car class's variable

car=Car()
print("Public attribute numberOfWheels",car.numberOfWheels)
bmw=Bmw() # while we create this object . things under it's __init__ will be printed
car.Private_key()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Public attribute numberOfWheels 4
Protected attribute color Black
Private attribute yearOfManufacture:  2017
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Class variable &amp;amp; Instance Variable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instance Variable: Instance variable is variable dealing with the instance/object . You can change it's value outside of the class. You can access Instance variable by &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Book():

    def __init__(self):
        self.x = 100  # instance variable

    def display(self):
        print(self.x)


b = Book()
print(b.x)  # printing instance variable

b.x=101 #changing the value of x
print(b.x)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;100
101
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Class Variable: Class Variable is valid for the class and can be called with its &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Book():
    x = 5  # class variable
    y=6

    def __init__(self):
        self.x = 100  # instance variable

    def display(self):
        print(self.x)


b = Book()
print("class variable",Book.x)  # printing class variable
print("instance variable",b.x)  # printing instance variable
print("class variable",Book.y)

#changng the class variable changes the value for class and instance
Book.y=7
print("class variable",Book.y)
print("instance variable",b.y)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class variable 5
instance variable 100
class variable 6
class variable 7
instance variable 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Instance method, Class method ,Static method&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instance method: Instance method is method which can be used for instance/object .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MyClass():

    def __init__(self,x):
        self._x=x

    def method1(self):#instance method
        print(self._x)


value=MyClass(100)
value.method1()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Class method: class method can be used by the class and you have to create @classmethod to create a class method and it can be accessed through  . Again, you have to set cls as parameter of the class method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MyClass():
    a=5

    #class method
    @classmethod
    def method2(cls): #cls refers to class object
        print(cls.a)

MyClass.method2()#calling class method (prints 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But,if you don't want to use "cls", you can use your desired parameter name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MyClass():
    a=5


    #class method
    @classmethod
    def method2(class_method): #cls refers to class object
        print(class_method.a)


MyClass.method2()#calling class method (prints 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Static Method: Static method does not have any must parameter like self or cls . It just works like a random function we used to make&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MyClass():

    @staticmethod
    def method3(m,n): #takes 2 value
        return m+n #returns their sum

object=MyClass()
print(object.method3(10,20))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;30
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;property method&lt;/strong&gt;&lt;br&gt;
To get value from a method, you may set it as a property method using @property before the method name . You can access the property method using  . Don't use () at the end of the method name .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Product:
    def __init__(self, x, y):
        self._x = x
        self._y = y

    @property  # to get any value using this method written  as   object.method or, p.value not like p.value()
    def value(self): #property method
        return self._x


p = Product(23, 24)
print(p.value) # you cannot use p.value()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;23
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again you can set value of the property  method by using &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Product:
    def __init__(self, x, y):
        self._x = x
        self._y = y



    @property  # to get any value using this method written  as   object.method or, p.value not like p.value()
    def value(self):
        return self._x

    @value.setter  # to set  value
    def value(self, val):
        self._x=val


p = Product(23, 24)
print(p.value)

p.value=100
print("After setting the new value, it is now",p.value)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;23
After setting the new value, it is now 100

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To delete a value from property method, you can use &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Product:
    def __init__(self, x, y):
        self._x = x
        self._y = y



    @property  # to get any value using this method written  a variable ex: object.method or, p.value not like p.value()
    def value(self):
        return self._x

    @value.setter  # to set a function to assign value
    def value(self, val):
        self._x = val

    # while we delete a value,this method will be applied ex: del p.value
    @value.deleter
    def value(self):
        print('Value  deleted')


p = Product(12, 24)
print("Property object has the 1st value",p.value)
#to delete the value use del and then objectname.variable name
del p.value
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Property object has the 1st value 12
Value  deleted
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Dispatch method&lt;/strong&gt;&lt;br&gt;
Dispatch method is used to work with specific thing . for example if you want to work with 3 integers or 3 float or float and an integer, you can create a custom method. &lt;br&gt;
Note: Don't forget to install multipledispatch package &lt;/p&gt;

&lt;p&gt;for example to work with 3 integers, you can use  and then your desired method with 4 parameters including self .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@dispatch(int,int,int)#working for 3 integers
    def product(self,a,b,c):
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check a code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from multipledispatch import dispatch
class my_calculator():

    @dispatch(int,int)#when we have 2 input, it will work
    def product(self,a,b):
        print("Product of 2 integers : ",a*b)

    @dispatch(int,int,int)#working for 3 integers
    def product(self,a,b,c):
        print("Product of 3 integers : ",a*b)
    @dispatch(float,float,float)#working for 3 floats
    def product(self,a,b,c):
        print("Product of 3 floats : ",a*b*c)
    @dispatch(float,int)#working for a int and a float
    def product(self,c,d):
        print("Product of 1 float and 1 integer : ",c*d)
c1=my_calculator()
c1.product(4,5)
c1.product(4,7,6)
c1.product(4.0,5.0,3.0)
c1.product(4.0,3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Product of 2 integers :  20
Product of 3 integers :  28
Product of 3 floats :  60.0
Product of 1 float and 1 integer :  12.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Magic Method&lt;/strong&gt;&lt;br&gt;
Magic method starts with __ and ends with __&lt;/p&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Fraction:
    def __init__(self,nr,dr=1):
        self.nr=nr
        self.dr=dr
        if self.dr&amp;lt;0:
            self.nr*=-1
            self.dr*=-1
        self.__reduce__()

    def show(self):
        print(f'{self.nr}/{self.dr}')



    def __str__(self):
         return f'{self.nr}/{self.dr}'

    def __repr__(self):
         return f'Fraction({self.nr}/{self.dr})'

    def __add__(self, other):#magic method __method__
        if isinstance(other,int):
            other=Fraction(other)
        f=Fraction(self.nr*other.dr+other.nr*self.dr)
        f.__reduce__()
        return f
    def __radd__(self, other):#reverse add
        return self.__add__(other)


    def __sub__(self, other):
        if isinstance(other,int):
            other=Fraction(other)
        f=Fraction(self.nr*other.dr-other.nr*self.dr)
        f.__reduce__()
        return f

    def __mult__(self,other):
        if isinstance(other,int):
            other=Fraction(other)
        f=Fraction(self.nr*other.nr,self.dr*other.dr)
        f.__reduce__()
        return f
    def __eq__(self,other):
        return (self.nr*other.dr)==(self.dr*other.nr)

    def __lt__(self, other):
          return (self.nr*other.dr)&amp;lt;(self.dr*other.nr)

    def __le__(self, other):
          return (self.nr*other.dr)&amp;lt;=(self.dr*other.nr)

    def __reduce__(self):
        h=Fraction.hcf(self.nr,self.dr)
        if h==0:
            return
        self.nr//=h
        self.dr//=h
    @staticmethod
    def something():   pass

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Protected method  , Private method&lt;/strong&gt;&lt;br&gt;
You can use protected method outside of the class but cannot use private method outside of the method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Product:
    def __init__(self):
        self.data1=10
        self._data2=20 #protected variable
    def methodA(self):
        pass
    def _methodB(self): #pprotected  method
        print("Hello to protected method")
    def __methodC(self):#private method
        print("Hola")


p=Product()
print(dir(p)) #You can see additionally _data2', '_methodB', 'data1', 'methodA'
print(p._data2) #accessing the protected variable
p._methodB() #calling the proteced method

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['_Product__methodC', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_data2', '_methodB', 'data1', 'methodA']
20
Hello to protected method
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Operator Overloading&lt;/strong&gt;&lt;br&gt;
To set specific rules for a specific operator, we use operator overloading . For example, &lt;strong&gt;add&lt;/strong&gt; is used for "+" &lt;br&gt;
Check out this link: &lt;a href="https://www.geeksforgeeks.org/operator-overloading-in-python/"&gt;https://www.geeksforgeeks.org/operator-overloading-in-python/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to add 2 different object one has 1 and 6 and other has 9 and 3, we will use operator overloading to do so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def __str__(self): #if asked to print string type
        return "({0},{1})".format(self.x, self.y)

    def __add__(self, other): #works for + opetator
        x = self.x + self.y
        y = other.x + other.y
        return Point(x, y)


p1 = Point(1, 6)#worked for self
p2 = Point(9, 3)#other
print("P1 has 1st value",p1.x)
print("P1 has 2nd value", p1.y)
print("P2 has 1st value",p2.x)
print("P2 has 2nd value", p2.y)
print("Summation of p1+p2 is",p1+p2)#as p1 is first so self is for p1 and p2 gets others


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To realize it in a better way,use Thonny IDE from this link (&lt;a href="https://thonny.org/"&gt;https://thonny.org/&lt;/a&gt;) and paste this code and debug . You can see how the code is proceeding&lt;br&gt;
Ouput:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;P1 has 1st value 1
P1 has 2nd value 6
P2 has 1st value 9
P2 has 2nd value 3
Summation of p1+p2 is (7,12)

Process finished with exit code 0

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Polymorphism&lt;/strong&gt;&lt;br&gt;
There might be method of same name but to use them depending on their class, we use it like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Car:
    def start(self):
        print('Engine started')
    def move(self):
        print('Car is running')

    def stop(self):
        print('Brales applied')

class Clock:
    def move(self):
        print('Tick Tick Tick')

    def stop(self):
        print('Clock needles stopped')

class Person:
    def move(self):
        print('Person walking')
    def stop(self):
        print('Taking rest')
    def talk(self):
        print('Hello')


car=Car()
clock=Clock()
person=Person()

#this method will run with which instance you call it
def do_something(x):
    x.move()
    x.stop()


# calling with car instance
do_something(car) #car is an object of Car class

#calling with clock instance
do_something(clock) # clock is an object of Clock class

#calling with person instance
do_something(person) #person is an object of Person class
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Car is running
Brales applied
Tick Tick Tick
Clock needles stopped
Person walking
Taking rest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Inheritance&lt;/strong&gt;&lt;br&gt;
Let's assume that your college has CSE , BBA department . They have few things in common. All of them have student ID card, they are from he same college . So,, while you want to take all the information of BBA student or CSE student , you can do one thing. You can create a class names Student which works for common purposes and you can create 2 different class which will work with other extra information like BBA Students with have marketing classes where CSE Students will have Labs. So, to work with this code , we can use inheritance . So, while creating BBA Student class , we will use the "Student" class in the peremeter to mean inheritance&lt;br&gt;
Note: Here "Student": class will be called parent class and "BBA Student " class will be student class&lt;/p&gt;

&lt;p&gt;Again , to use something from the parent class, you will have to use &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Student:
    def __init__(self, name='Just a student', dept='nothing'):
        self.__name = name
        self.__department = dept

    def set_department(self, dept):
        self.__department = dept

    def get_name(self):
        return self.__name

    def set_name(self, name):
        self.__name = name

    def __str__(self):
        return f"Name: {self.__name} \nDepartment: {self.__department}\n"



# write your code here
class BBA_Student(Student):
    def __init__(self, name="default", department="BBA"):
        super().__init__(name, department)#used Student class's __init__ method
        print("I am a BBA Students . We do marketing courses")

class CSE_Student(Student):
    def __init__(self,name="default",department="CSE"):
        super().__init__(name,department)#used Student class's __init__ method
        print("I am a CSE Student and I have a lots of lab to complete")

print(BBA_Student('Karim Ali'))#using BBA_Student class inherited Student class
print(CSE_Student('Mitul'))# using CSE_Student class inherited Student class
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I am a BBA Students . We do marketing courses
Name: Karim Ali 
Department: BBA

I am a CSE Student and I have a lots of lab to complete
Name: Mitul 
Department: CSE

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>oop</category>
      <category>python</category>
    </item>
    <item>
      <title>Stop using Array.map() everywhere ü•µ</title>
      <author>Suprabha</author>
      <pubDate>Wed, 29 Dec 2021 06:38:59 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/stop-using-arraymap-everywhere-57lf</link>
      <guid>https://dev.to/suprabhasupi/stop-using-arraymap-everywhere-57lf</guid>
      <description>&lt;p&gt;&lt;span&gt;M&lt;/span&gt;ost of the time I used to see the snippet like this üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cherry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet, we are adding &lt;code&gt;fruits&lt;/code&gt; text to the DOM in &lt;code&gt;main&lt;/code&gt; ID.&lt;br&gt;
It seems there is no issue in the above snippet, Though there is one major issue, which we will be going see today.&lt;/p&gt;

&lt;p&gt;Let's understand the issue by definition of &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;map()&lt;/code&gt; method creates a new array populated with the results of calling a provided function on every element in the calling array.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;example:&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [3, 4, 5, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Using &lt;code&gt;map()&lt;/code&gt; method means returning a new collection of an array.&lt;/p&gt;

&lt;p&gt;As discussed, &lt;code&gt;map()&lt;/code&gt; method always returns a new array, so if you don‚Äôt have any use of a new array then never use &lt;code&gt;map()&lt;/code&gt; method.&lt;br&gt;
When you just need to iterate through an array, I will always recommend using other array methods like &lt;code&gt;forEach&lt;/code&gt; or &lt;code&gt;for..of&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;example:&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cherry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#why-do-we-care-about-it"&gt;
  &lt;/a&gt;
  Why do we care about it? üôÑ
&lt;/h3&gt;

&lt;p&gt;As we know, &lt;code&gt;map()&lt;/code&gt; method always returns an array. If you just need to update DOM then storing those elements into memory form doesn't add any point.&lt;br&gt;
Of course, for a small chunk of numbers nothing is going to happen, however, if we take a larger number here then it affects the performance side as it will store the value in memory which will be redundant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-%E2%85%80"&gt;
  &lt;/a&gt;
  Summary  ‚ÖÄ
&lt;/h3&gt;

&lt;p&gt;Stop using &lt;code&gt;map()&lt;/code&gt; method, if you just need to iterate through an array. &lt;br&gt;
Start using &lt;code&gt;forEach&lt;/code&gt; or &lt;code&gt;for...of&lt;/code&gt; method, if you want to iterate through an array.&lt;/p&gt;

&lt;p&gt;Thanks for reading the article ‚ù§Ô∏è&lt;br&gt;
Hope this post will be useful!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee" width="300" height="96"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        üåü &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        üìö &lt;a href="https://gum.co/css-pseudo-class-elements"&gt; Ebooks&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        üåü &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
