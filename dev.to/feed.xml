<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How Armory Makes Spinnaker Better</title>
      <author>Michael Bogan</author>
      <pubDate>Thu, 09 Sep 2021 14:59:25 +0000</pubDate>
      <link>https://dev.to/mbogan/how-armory-makes-spinnaker-better-189g</link>
      <guid>https://dev.to/mbogan/how-armory-makes-spinnaker-better-189g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Successful teams innovate often and deliver frequently. But because they move so fast, one of their challenges is ensuring that the rapid pace of releases doesn’t break their product. As more and more features are added, the risk of broken releases increases. &lt;/p&gt;

&lt;p&gt;As a solution, DevOps teams often look to &lt;a href="https://spinnaker.io/"&gt;Spinnaker&lt;/a&gt;—an open source deployment tool that helps teams to deploy quickly and consistently. But there’s an even more powerful solution available. &lt;a href="https://www.armory.io/"&gt;Armory&lt;/a&gt;—which is built on top of Spinnaker—gives teams all the benefits of Spinnaker, but adds mission-critical feature extensions and enterprise-grade stability.&lt;/p&gt;

&lt;p&gt;In this article, we'll see how Armory's enhancement of Spinnaker ensures that modern applications can be deployed safely.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-deployment-struggles"&gt;
  &lt;/a&gt;
  Application Deployment Struggles
&lt;/h2&gt;

&lt;p&gt;The first challenge to achieving a successful product rollout is understanding that unit, integration, and performance tests in isolated environments don’t always guarantee a successful release—and won’t completely prevent unforeseen issues in production. Issues can &lt;em&gt;still&lt;/em&gt; occur due to reasons such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Real-life user interactions and transactions can’t be emulated precisely in isolated environments, resulting in edge cases being missed in production.&lt;/li&gt;
&lt;li&gt;Third-party client applications that integrate with the developed API often can’t be tested for functionality and performance.&lt;/li&gt;
&lt;li&gt;Small—but critical—differences between the testing and production environments, such as IP addresses, configuration settings, firewall rules, and more can cause the application to fail.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Over time, robust deployment patterns have evolved to provide a safe way to address these above challenges. These include deployment models like blue-green, rolling, and canary, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nuFk9xuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/out202o1w0hfe997r0ac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nuFk9xuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/out202o1w0hfe997r0ac.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;Blue-Green&lt;/strong&gt; deployment creates a fully instantiated clone of the application stack in the target environment. During the release, the load balancer is simply reconfigured to redirect all application traffic to this new version. Rollback is fast and simple in a blue-green deployment, as only the load balancer needs reconfiguration.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Rolling deployment&lt;/strong&gt; deploys progressively with automated validation and health checks in each step. In a rolling deployment model, the new application services are added to the shared load balancer and the traffic will start to be shared between the old and new applications. Automated validation in each new replica helps determine if the release is still on track or if rollback is necessary.&lt;/li&gt;
&lt;li&gt;Finally, in a &lt;strong&gt;Canary deployment&lt;/strong&gt;, a new application replica is added to the load balancer, and the load balancer is configured to pass only a specific percentage of the application traffic to the new replica. Once configured, a full analysis of the traffic volume, response times, or activity on the replica is performed. If the analysis is successful, this deployment generally continues as a Rolling deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Deciding which of the above deployment models is the best for your team depends on the complexity of the application, the risk of degraded performance or outage, and your team’s capability to implement full analysis versus simple post-deployment tests.&lt;/p&gt;

&lt;p&gt;In general, however, a sound deployment infrastructure and process should be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Controlled&lt;/strong&gt;: This involves partially deploying an application, validating each step of that deployment, and incrementally completing that deployment or safely rolling back. Such control will reduce the impact if the deployment fails.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Simple&lt;/strong&gt;: Small deployment code size reduces the risk of issues during deployment. By decreasing the likelihood of introducing bugs, confidence in the deployment process increases.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Robust&lt;/strong&gt;: The deployment infrastructure should be a secure, stable, and scalable solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-spinnaker"&gt;
  &lt;/a&gt;
  What is Spinnaker?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://spinnaker.io/"&gt;Spinnaker&lt;/a&gt; is a popular open source, dedicated Continuous Deployment (CD) tool that can provide fast, safe, and repeatable application deployment of any size. It was created and open-sourced by Netflix and has since had contributions made by industry giants like Google.&lt;/p&gt;

&lt;p&gt;As a specialized CD tool, Spinnaker simplifies the integration with your cloud infrastructure by letting you directly manage the clusters, server groups, load balancers, and applications. Spinnaker natively implements the industry-standard deployment patterns described above, including a full deployment flow with validation steps, manual approval, and parallel deployments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dz8Gkw5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjjup26bcblw6ffpushj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dz8Gkw5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjjup26bcblw6ffpushj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sample deployment pipeline in Spinnaker&lt;/p&gt;

&lt;p&gt;Unlike Continuous Integration (CI) tools—which focus on the pre-deployment build phase—Spinnaker focuses on deployment capability. It expects the application to be already compiled, tested, and packaged in the build phase with CI tools such as Jenkins, CircleCI, Bamboo, and so on.&lt;/p&gt;

&lt;p&gt;By specializing in only the deployment phase, Spinnaker provides better control of this process and ensures a better outcome for complex deployments. (For a more detailed comparison, check out this analysis of &lt;a href="https://www.armory.io/blog/spinnaker-over-jenkins-x-for-enterprise/"&gt;Spinnaker over Jenkins X for Enterprise&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;As a deployment tool, Spinnaker integrates as a simple step in your CI/CD deployment pipeline and can be triggered based on Git events. The complexity of the build phase, which includes packaging and testing the application, is left to the CI tool. Meanwhile, the focus of Spinnaker is to provide a fully controlled deployment process, ensuring strict validation between each stage of the deployment and application release.&lt;/p&gt;

&lt;p&gt;Finally, with native support for multi-cloud environments such as AWS, GCE, Azure, and also Kubernetes, Spinnaker offers simple configuration of the services and deployment steps as well as secret management for your application.&lt;/p&gt;

&lt;p&gt;It’s clear that Spinnaker has a lot to offer, but there are certain use cases where Spinnaker &lt;em&gt;alone&lt;/em&gt;—without enterprise-grade enhancements—may not be a good fit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations-of-spinnaker"&gt;
  &lt;/a&gt;
  Limitations of Spinnaker
&lt;/h2&gt;

&lt;p&gt;Open source projects can be powerful options, but they rely on community support and engagement. Compared to a commercial solution, &lt;strong&gt;there’s no guarantee of timely assistance when things go wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If your organization’s infrastructure is mainly on-premise and not using Kubernetes or cloud-native tools, vanilla Spinnaker could be &lt;strong&gt;lacking the tools needed to manage deployments&lt;/strong&gt;. In this case, you would need to build those tools yourself.&lt;/p&gt;

&lt;p&gt;If your business is subject to strict compliance regulations, Spinnaker might &lt;strong&gt;lack the advanced security controls&lt;/strong&gt; needed for your deployment pipeline configuration. &lt;/p&gt;

&lt;p&gt;And finally, although Spinnaker has a strong Role-based Access Control (RBAC) feature, power users have a wide variety of permissions and can write pipeline configurations alone and run those without review and approval. They can even overwrite anyone else’s configuration without oversight. This &lt;strong&gt;lack of fine-grained permissions&lt;/strong&gt; can be an issue for organizations where one team is responsible for managing security and the application team is responsible for deployment.&lt;/p&gt;

&lt;p&gt;For companies in need of a solution to these limitations, that’s where Armory comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#armorypowered-spinnaker"&gt;
  &lt;/a&gt;
  Armory-powered Spinnaker
&lt;/h2&gt;

&lt;p&gt;Armory is a feature-packed, enterprise-grade, reliable deployment solution with Spinnaker at its core. Armory is suitable for organizations that have hit the limitations of Spinnaker or are looking for an easier way to maintain Spinnaker.&lt;/p&gt;

&lt;p&gt;As Armory is built on top of Spinnaker, it already includes all of Spinnaker's main features, while addressing some critical limitations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--by6YOI3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lowry030bar402k6v4zq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--by6YOI3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lowry030bar402k6v4zq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.armory.io/docs/overview/architecture/"&gt;Armory architecture&lt;/a&gt; expands on Spinnaker by using external agents and a custom halyard configuration module. Its bundled-in set of microservices bring robust and resilient tools which enable users to manage deployments more easily than with Spinnaker alone. This allows it to make better use of the Kubernetes resources and to scale in several dimensions like the number of users, application pipelines, rate of deployments, or cluster target size. When it comes to Kubernetes cluster deployment and management, Armory Spinnaker can manage clusters spanning thousands of nodes.&lt;/p&gt;

&lt;p&gt;With Armory, you can centrally manage all of your Spinnaker pipelines as code by using the &lt;a href="https://docs.armory.io/docs/spinnaker-user-guides/using-dinghy/"&gt;Armory Pipelines as Code&lt;/a&gt; feature. This feature decreases the time to set up a new pipeline in Spinnaker and provides the ability for review and change management of the pipeline configuration itself. For businesses limited by vanilla Spinnaker's lack of advanced security controls, the pipeline configuration management afforded by Armory is a god-send. This feature also integrates with GitHub to let you track all the code changes made to the pipeline configuration. By using Configuration as Code in GitHub, you’ll benefit from all version control systems patterns such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enforcement of branching and merging only via approved pull requests, bringing oversight of any changes made to the deployment pipelines by another person.&lt;/li&gt;
&lt;li&gt;Enforcement of syntax and security tests performed on the configuration code before the merge. (Note that this is different from and complementary to the Armory Policy Engine.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href="https://www.armory.io/armory-enterprise-spinnaker/policy-engine/"&gt;Armory Policy Engine&lt;/a&gt; extends the Spinnaker RBAC framework and allows enterprises to balance deployment velocity with control over the delivery process. Armory implements the policy using hooks during the pipeline configuration and execution. The Policy Engine helps to create a &lt;a href="https://www.armory.io/blog/deployment-policies-with-spinnaker/"&gt;division of ownership&lt;/a&gt; between the app owners (owning the pipeline configuration and deployments) with the compliance owners (ensuring the security of the organization). This addresses the compliance limitation of vanilla Spinnaker by allowing Spinnaker users to maintain their deployment pipelines within the guardrails defined by the security team.&lt;/p&gt;

&lt;p&gt;There’s a &lt;a href="https://www.armory.io/armory-enterprise-spinnaker/terraform-integration/"&gt;Terraform plugin&lt;/a&gt; available for Armory to manage additional cloud and on-prem infrastructure. The terraform plugin is simply another type of Task that Spinnaker can execute, and Armory uses a wide range of locations for the terraform manifests:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7EDk_Yh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lk53tzymgjmh6dhet2bf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7EDk_Yh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lk53tzymgjmh6dhet2bf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Armory Terraform manifest locations&lt;/p&gt;

&lt;p&gt;Finally, Armory provides certified releases and paid support (from Development to Enterprise level support) to ensure that the system is always stable and operational.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-armory"&gt;
  &lt;/a&gt;
  Implementing Armory
&lt;/h2&gt;

&lt;p&gt;There are three ways you can start using Armory in your organization:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An &lt;strong&gt;on-site model&lt;/strong&gt; where you deploy armory within your environment and maintain it. This would be suitable for companies with a strict perimeter security like an on-prem setup and have the resources and expertise to support it.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;on-site managed enterprise service&lt;/strong&gt; where Armory’s professional technical team will install and maintain the Spinnaker/Armory setup for you. This would be suitable for organizations looking to gain expertise with Armory while not wanting to manage it alone.&lt;/li&gt;
&lt;li&gt;Armory Deployments (Multi-cloud and Hybrid) let you deploy your workloads to major cloud providers and on-prem data centers, using cloud drivers that connect Spinnaker to all of your deployment targets.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Spinnaker is a great choice for CD, and Armory extends Spinnaker's already-robust deployment features to make it even better. To try out Armory, you can install Armory Enterprise for Spinnaker in a Lightweight Kubernetes environment using an open source command-line tool called &lt;a href="https://docs.armory.io/docs/installation/minnaker/"&gt;Minnaker&lt;/a&gt;. You can even install Armory to get &lt;a href="https://www.armory.io/blog/armory-enterprise-install-in-10-minutes/"&gt;up and running in 10 minutes&lt;/a&gt;. For the more adventurous, you can &lt;a href="https://www.armory.io/demo-request/"&gt;request a demo&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
    </item>
    <item>
      <title>React Native vs React Js!</title>
      <author>Shashank singh</author>
      <pubDate>Thu, 09 Sep 2021 14:22:31 +0000</pubDate>
      <link>https://dev.to/sshashank5690/react-native-vs-react-js-16f3</link>
      <guid>https://dev.to/sshashank5690/react-native-vs-react-js-16f3</guid>
      <description>&lt;p&gt;##Before comparing Reactjs vs React Native, let’s take a look at the small history of both of them.##&lt;/p&gt;

&lt;p&gt;Reactjs and React Native which are right now powering some of the most popular and widely used mobile apps and websites, have an interesting history: &lt;/p&gt;

&lt;p&gt;In 2011, when Facebook ads were expanding and bringing in newer, exciting features, the engineering team realized that the constant updates were slowing down their progress. Content cascading changes and updates forced the developers to realign the entire app. As the team size expanded, the problems grew in the same proportion. &lt;/p&gt;

&lt;p&gt;They had the right model, but the user-interface needed a revolution.&lt;/p&gt;

&lt;p&gt;At the same time, an engineer at Facebook, Jordan Walke, used XHP (an HTML component library for PHP) to create FaxJS, which was the first prototype of Reactjs.&lt;/p&gt;

&lt;p&gt;In 2011, Reactjs was deployed for Facebook’s timeline, and this was a big leap. &lt;/p&gt;

&lt;p&gt;In 2012, Instagram was acquired by Facebook, and then Reactjs was used for their timeline as well.&lt;/p&gt;

&lt;p&gt;The same year, Mark Zuckerberg quoted:&lt;/p&gt;

&lt;p&gt;“The biggest mistake we made as a company was betting too much on HTML as opposed to native”.&lt;/p&gt;

&lt;p&gt;This signified the development of React Native as a framework. And soon, the developer world witnessed the emergence of two of the most powerful technologies. Reactjs vs React Native is a fascinating comparison and forces developers to think hard into their usefulness and application for developing web apps, mobile apps mobile responsive websites, and more.&lt;/p&gt;

&lt;p&gt;This blog will decode Reactjs vs React Native and give app builders insights into this subject. &lt;/p&gt;

&lt;p&gt;Reactjs vs React Native – Comparing the individual features that make both unique in their league&lt;br&gt;
What exactly is Reactjs?&lt;br&gt;
Reactjs is a JavaScript library that supports both front-end and server. Furthermore, it can be used to create user interfaces for mobile apps and websites.&lt;/p&gt;

&lt;p&gt;What features of Reactjs is its USP from a Business perspective? (Advantages of Reactjs)&lt;br&gt;
Blazing Speed with DOM&lt;/p&gt;

&lt;p&gt;From a business perspective, one of the USPs of Reactjs is its ability to bring in blazing fast speed for the applications and websites developed, using the DOM or Document Object Model. &lt;/p&gt;

&lt;p&gt;This is how it happens: React creates an in-memory data structure cache that computes the resulting differences, and then updates the browser’s displayed DOM seamlessly. The programmer writes the code as if the entire page is rendered on each change, wherein in reality, only those sub-components which are changed are rendered. &lt;/p&gt;

&lt;p&gt;This gives an edge to Reactjs, compared to other platforms for developing mobile apps since speed is one of the important factors for making a successful mobile app.&lt;/p&gt;

&lt;p&gt;Component-Based Architecture Saves Time&lt;/p&gt;

&lt;p&gt;Reactjs introduced the concept of component-based architecture, which enforces the reusability of components, and thus, saves an enormous amount of time. &lt;/p&gt;

&lt;p&gt;This component-based architecture takes individual pieces of a larger user-interface and converts them into an independent, self-sustaining micro-system.&lt;/p&gt;

&lt;p&gt;Thus, for example, if any component within the Adset tab in Facebook Ads needs some major changes, then only that component will be reused and re-defined, rather than the entire UI of Facebook Ads.&lt;/p&gt;

&lt;p&gt;Reactjs Gives Powerboost To SEO&lt;/p&gt;

&lt;p&gt;Since Reactjs is capable of server-side rendering, it gives a power boost to the SEO of a  webpage/app and attracts more organic traffic. When a Google bot visits a server, which has already rendered the content and images, indexing and caching of the content becomes faster. It gives a huge heads up to the overall SEO strategy of the website. Besides, if the Google bot directly indexes the content from the server-side, the page load time also decreases. This fast visibility of web-pages gives the end-users a better user experience, thereby a win-win situation. &lt;/p&gt;

&lt;p&gt;Huge Ecosystem Of Developer Tools&lt;/p&gt;

&lt;p&gt;Reactjs is blessed to have a huge community of developers, who have created a massive ecosystem of tools, component libraries, IDEs, extensions for code editors, web browsers, and more.&lt;/p&gt;

&lt;p&gt;The availability of a wide range of third party tools and extensions unleashes a new dimension of innovation while saving time and resources at the same time. Community-powered innovation makes Reactjs one of the most popular options for creating innovative path-breaking apps and websites.&lt;/p&gt;

&lt;p&gt;So, these are the major advantages of Reactjs that make it unique.&lt;/p&gt;

&lt;p&gt;What exactly is React Native?&lt;br&gt;
React Native is a cross-platform mobile framework that uses Reactjs for building apps and websites. React Native compiles to native app components enables the programmer to build mobile applications that can run on different platforms such as Windows, Android, iOS in JavaScript.&lt;/p&gt;

&lt;p&gt;What’s more, Reactjs is used to build components under React Native, and React Native implements Reactjs under their framework.&lt;/p&gt;

&lt;p&gt;What features of React Native is its USP from a Business perspective? (Advantages of React Native)&lt;br&gt;
Advantage Platform-specific Code&lt;/p&gt;

&lt;p&gt;One of the biggest USPs of building apps and websites using React Native is the ability to generate platform-specific code. &lt;/p&gt;

&lt;p&gt;When you use React Native to build an app, the framework automatically detects the platform it’s being run on. This way, it generates the right code for the right platform.&lt;/p&gt;

&lt;p&gt;Even a Front-End Web Developer Can Create App Using React Native&lt;/p&gt;

&lt;p&gt;Since most of the code present in React Native is Javascript, it gets easier for a front-end developer to create an app quickly.&lt;/p&gt;

&lt;p&gt;It is rather simple for a front-end developer to grasp the technology and all they need to know is Javascript (specifically Reactjs), platform APIs, some native UI elements, and any platform-specific design patterns. &lt;/p&gt;

&lt;p&gt;This easy usability and learning curve enable non-programmers to create apps without much effort. This has induced a kind of transformation in the way apps and websites are created today. So all you need is an idea and plan to execute that idea. Even if the ideator is not a great programmer, that idea can materialize into reality.&lt;/p&gt;

&lt;p&gt;This changes so many things.&lt;/p&gt;

&lt;p&gt;Development Takes Less Time Due To Hot Reloading feature &lt;/p&gt;

&lt;p&gt;Reactjs supports the Hot Reloading feature, which gives developers the liberty to reload a mobile app automatically.&lt;/p&gt;

&lt;p&gt;This makes the process of development fast, and it saves time.&lt;/p&gt;

&lt;p&gt;Ready-to-use UI libraries for smoother UI experience&lt;/p&gt;

&lt;p&gt;Component UI libraries exist in the React Native ecosystem. Developers can use it for a smooth UI experience.&lt;/p&gt;

&lt;p&gt;Such sharing of UI libraries such as Shoutem, Expo, native base, and others save the time required to build them from scratch, and this means that more focus on innovation and ideas can be given, rather than creating libraries from scratch. &lt;/p&gt;

&lt;p&gt;So these are some major benefits of React Native that make it unique.&lt;/p&gt;

&lt;p&gt;What are the main differences between Reactjs and React Native?&lt;br&gt;
While there are several similarities between Reactjs and React Native, however, there are some notable differences as well. Let’s have a look:&lt;/p&gt;

&lt;p&gt;Reactjs can be described as a base derivative of React DOM, for the web platform while React Native is a base derivative in itself, which means that the syntax and workflow remain the same, but components alter.&lt;br&gt;
Reactjs, eventually, is a JavaScript library, which enables the programmer to create an engaging and high performing UI Layer while React Native is an entire framework for building cross-platform apps, be it web, iOS or Android. &lt;br&gt;
In Reactjs, virtual DOM is used to render browser code in Reactjs while in React Native, native APIs are used to render components in mobile.&lt;br&gt;
The apps developed with Reactjs renders HTML in UI while React Native uses JSX for rendering UI, which is nothing but javascript. &lt;br&gt;
CSS is used for creating styling in Reactjs while a stylesheet is used for styling in React Native.&lt;br&gt;
In Reactjs, the animation is possible, using CSS, just like web development while in React Native, an animated API is used for inducing animation across different components of the React Native application.&lt;br&gt;
If the need is to build a high performing, dynamic, and responsive UI for web interfaces, then Reactjs is the best option while if the need is to give mobile apps a truly native feeling, then React Native is the best option.&lt;/p&gt;

&lt;p&gt;React vs React Native –  The drawbacks and limitations&lt;br&gt;
Both Reactjs and React Native have some limitations and drawbacks when it comes to developing apps and websites. Before starting on either of them, the developer should be clear on these limitations and plan in advance how to overcome them.&lt;/p&gt;

&lt;p&gt;Limitations Of Using Reactjs&lt;br&gt;
Overhead Costs &amp;amp; Time: Often, it becomes a necessity to download another react-enabled library, which increases cost and time overheads. For instance, if the developer is using the Carbon framework for UI experience, then it becomes crucial to download Carbon components with react.&lt;br&gt;
Learning curve: For a new developer, learning Reactjs may take much more time, compared to React Native. It means that the learning curve for Reactjs is more, and this can be an issue for new developers who are attempting to build an app using Reactjs.&lt;br&gt;
External library support: Although Reactjs supports lots of external, third-party libraries, there are very few native libraries for Reactjs. Now, external libraries can help the developer to utilize both HTML and CSS functionalities and build it into JSX, which has its complexities and steep learning curve.&lt;br&gt;
Long data hierarchy: Data navigation within Reactjs is complicated and complex. For example, Reactjs doesn’t support parallel data handling, unlike other JS Scripting tools. To navigate from one Div to another Div in Reactjs, the user will need to first navigate to the parent node, then to the topmost parent node, and then navigate to the second hierarchy of the tree node. &lt;br&gt;
Limitations Of Using React Native&lt;br&gt;
Lack of native libraries: In case the app has heavy functionalities, then React Native can slow down the development process, and the reason is lack of native libraries, and reliance on external, third-party libraries. When one needs to make complex calculations at the same time, then Swift, Objective-C, and Java are observed to have more speed, compared to JavaScript, since there are overheads within JavaScript for controlling native elements. &lt;br&gt;
Loosely held abstraction layer: React Native is a loosely held framework, wherein programmers can get tags like HTML, stylesheets like CSS, and code from Javascript. This seems to be a positive aspect, as it provides more freedom to the developers, but at the same time, it poses challenges as well. For example, unlike Swift and Java languages, it doesn’t enforce any parameters or rules, and practically speaking, at any given time, a variable can be literally anything. This may cause a clash of logic, which is unlikely to happen with Swift or Java.&lt;br&gt;
Takes more time to initialize: The issue with React Native is that it takes more time to initialize the runtime for gadgets and devices. It is mainly due to JavaScript thread which takes time to initialize. &lt;br&gt;
Requires a lot of native workarounds: If specific functionality is not found in React Native, then developers have two options: Either write the native modules in Swift/Objective-C and Java or ask any native developer to write a new one. In a word, React Native increases overheads on both expenses and time. &lt;br&gt;
License &amp;amp; Patenting Issues: License and Patenting Issues also persists, and since Facebook controls React Native, the issue isn’t solving anytime soon. Now, React Native has received Version 2, Additional Grant of Patent Rights from Facebook along with a BSD-style license. But in 2017, Facebook updated the Open Source Licensing and Patent for React Native, as well as Reactjs and other open-source projects. As per this new update, in case any developer uses these open source platforms for any purpose which Facebook doesn’t like or violates the patent, then Facebook has a right to stop that developer from using that open-source platform. This has impacted both Reactjs and React Native developers, as their apps developed on these platforms can be actually stopped from operating, at any time. &lt;br&gt;
Which is better React or React native?&lt;br&gt;
Both Reactjs and React Native are important pillars for app and web development, and due to their flexible functionalities and an evolving eco-system of libraries, they are gaining momentum with each passing day.&lt;/p&gt;

&lt;p&gt;While Reactjs is basically a JavaScript library and React Native is the entire framework, the former is the heart of the latter, and compliments each other.&lt;/p&gt;

&lt;p&gt;If Reactjs is optimal for creating apps with high functionality and complex calculations, then React Native is ideal to give a native feeling to your mobile apps.&lt;/p&gt;

&lt;p&gt;Every technology or framework in the developer universe has some limitations, and so does Reactjs and React Native. This is why, it is advisable to map the pros and cons of both of these technologies, and then make an informed decision based on the priorities and expected outcome.&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>AWS'ye EC2 Makine olarak Django uygulaması deploy etme</title>
      <author>İbrahim Talha Asan</author>
      <pubDate>Thu, 09 Sep 2021 14:10:27 +0000</pubDate>
      <link>https://dev.to/talhaasan/aws-ye-ec2-makine-olarak-django-uygulamasi-deploy-etme-4517</link>
      <guid>https://dev.to/talhaasan/aws-ye-ec2-makine-olarak-django-uygulamasi-deploy-etme-4517</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1awsde-ec2-makine-ba%C5%9Flatmak"&gt;
  &lt;/a&gt;
  1)AWS'de EC2 makine başlatmak
&lt;/h1&gt;

&lt;p&gt;AWS hesabımıza giriş yapıp servisler kısmından EC2 servisine gelelim. Instances bölümüne gelip Launch Instance butonuna tıklayalım.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ay-yZ-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzs2egrka2euan5w35x7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ay-yZ-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzs2egrka2euan5w35x7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Bu makineyi oluştururken özellikle dikkat etmeniz gereken iki  konu var (diğer adımlardaki ayarları isteğinize göre şekillendirebilirsiniz). &lt;br&gt;
Bunlardan birincisi, Security Group ayarlarından aşağıda vereceğim portları doğru bir şekilde açmanız gerek.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4C42CdZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogztgg07h7qy2z652cmp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4C42CdZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogztgg07h7qy2z652cmp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Dikkat etmeniz gereken ikinci konu ise, makine ayarlarının sonunda eğer yeni bir anahtar çifti oluşturduysanız bu anahtar çiftini burada indirmezseniz bir daha bu dosyaya ulaşamazsınız.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EW8dcpkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtbj5da17e8tr8qges5c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EW8dcpkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtbj5da17e8tr8qges5c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
İndirdiğiniz bu dosyayı projenizin root klasörüne de taşımayı unutmayın.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-ec2-makinesine-ba%C4%9Flanmak"&gt;
  &lt;/a&gt;
  2) EC2 makinesine bağlanmak
&lt;/h1&gt;

&lt;p&gt;AWS Konsolunda EC2 Servisinin altında Instancelara gelip oluşturduğumuz instance üzerine tıklayalım.&lt;br&gt;
Sonrasında ise sağ üst taraftaki Connect butonununa tıklayın. Karşınıza çıkan pencerede bağlanma metodunu SSH Client seçin ve burada çıkan kodları terminalinizde çalıştırın.&lt;br&gt;
Kodları sırayla çalıştırdıktan sonra karşınıza çıkması gereken bu soruya da&lt;br&gt;
"Are you sure you want to continue connecting (yes/no)?"&lt;br&gt;
"yes" diyerek devam edin.&lt;br&gt;
Tebrikler! EC2 makinenizin içindesiniz.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3ec2-makine-ortam%C4%B1n%C4%B1-kurma"&gt;
  &lt;/a&gt;
  3)EC2 Makine Ortamını Kurma
&lt;/h1&gt;

&lt;p&gt;İlk olarak sudo apt update, sudo apt upgrade komutlarını sırasıyla çalıştırın. Sonrasında ise sanal ortamınıza projeninizin bağımlılıklarını kurup proje kodlarınızı makineye çekebilirsiniz.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4taray%C4%B1c%C4%B1dan-ip-adresiyle-makinenize-ba%C4%9Flanma"&gt;
  &lt;/a&gt;
  4)Tarayıcıdan IP adresiyle makinenize bağlanma
&lt;/h1&gt;

&lt;p&gt;Tekrardan Instances kısmına gelip, ordaki IP adresine tıklayıp linki açın. Sonrasında ise adres çubuğundaki linki https'den http yapıp(SSL sertifikası olmadığı için https olarak kalırsa hata alırsınız.) bir de sonuna :8000 portu ekleyin. Adresiniz "http://:8000" şeklinde olmalıdır.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Maintaining Quality Documentation</title>
      <author>Daniel Starner</author>
      <pubDate>Thu, 09 Sep 2021 13:25:14 +0000</pubDate>
      <link>https://dev.to/dstarner/keeping-documentation-debt-at-bay-clients-happy-53o</link>
      <guid>https://dev.to/dstarner/keeping-documentation-debt-at-bay-clients-happy-53o</guid>
      <description>&lt;p&gt;&lt;strong&gt;Communication is difficult.&lt;/strong&gt; As remote work becomes more of a thing, as teams work across six+ timezones, and as companies are looking for rapid growth, &lt;strong&gt;it is paramount that technical knowledge is able to be communicated correctly and effectively.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Over my past few professional experiences, it became apparent that I had started to spend more of my time communicating ideas and interfaces with others, and less time actually developing them. Now, obviously the design phase before building something is critical, but I was more concerned about the amount of time I spent discussing a feature &lt;em&gt;after&lt;/em&gt; finishing it. I found that if I spent some time building a new feature for our product, I would spend &lt;em&gt;at least&lt;/em&gt; two or three times the amount of time answering Slack messages for users who wanted to use it or who had questions.&lt;/p&gt;

&lt;p&gt;I realized that while we had good technical engineering practices, &lt;strong&gt;we were lacking the communication channels &amp;amp; skills to allow our clients to effectively use the product&lt;/strong&gt;. This resulted in a fair amount of precious engineering time lost to our on-call team member basically acting as tech support on Slack, as they'd have to answer very similar questions multiple times throughout the day.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1-zX-HHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/3orif0rjs49gsPWg1y/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-zX-HHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/3orif0rjs49gsPWg1y/giphy.gif" alt="Customer Support"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-curse-of-success"&gt;
  &lt;/a&gt;
  The Curse of Success
&lt;/h2&gt;

&lt;p&gt;Our product was still young, but it was quickly growing in popularity at the company. It was a cluster configuration and deployment system that managed many of our internal services. I was one of the lead engineers responsible for developing this ecosystem, and we had built out quite a few systems and solutions to solve all different categories of technical problems.&lt;/p&gt;

&lt;p&gt;We were able to implement these problems very well, but we had grow &lt;em&gt;so&lt;/em&gt; fast that we started to realize some problems with the way we were communicating and sharing our product with the rest of the company.&lt;/p&gt;

&lt;p&gt;As more users found the tooling and started using it, we had more users who ranged from "&lt;em&gt;Oh this is neat&lt;/em&gt;", to our advanced users &amp;amp; internal team members who knew the full "&lt;em&gt;in's and out's&lt;/em&gt;" of the tools. Somehow, we had to make sure every end user and effected client could effectively use our tooling to solve their deployment problems.&lt;/p&gt;

&lt;p&gt;This growth problem was easily manageable when we had just a few teams using the product, as many of those users had been with us since the start of the product and could use it moderately well. We had a page or two of loosely organized &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; documents that briefly explained how to get different environments up and running, and the users were expected to sort-of just figure out the rest.&lt;/p&gt;

&lt;p&gt;Our documentation at the time was like the Owl-drawing tutorial below; &lt;em&gt;we will walk you through the left-side picture, and then just throw you to the fire and hope you figure out all the details as you go to production.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LN6N6kYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--p65ClE-A--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_900%2Cq_auto%2Cw_1600/https://i.kym-cdn.com/photos/images/newsfeed/000/572/078/d6d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LN6N6kYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--p65ClE-A--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_900%2Cq_auto%2Cw_1600/https://i.kym-cdn.com/photos/images/newsfeed/000/572/078/d6d.jpg" alt="Rest of the F**king Owl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tribal-knowledge-and-the-silo-of-doom"&gt;
  &lt;/a&gt;
  Tribal Knowledge and the Silo of Doom
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Tribal knowledge is any unwritten information that is not commonly known by others within a company.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We quickly realized that our team and the original user base had quite a bit of tribal knowledge in the system. As our product grew in popularity and was used by new users, they did not have this knowledge that seemed &lt;em&gt;"trivial"&lt;/em&gt; to us, but in reality was confusing for these first-time users. &lt;strong&gt;We had no way to effectively communicate the silo of knowledge that we had developed over the years of building &amp;amp; using the product&lt;/strong&gt;. It's very difficult for people to use something if they don't know how to use it. They are even less likely to use it if they see others describe it as "easy" without seeing the path to attaining that knowledge. When people notice this gap of knowledge between it's users with no discernible way to resolve it, &lt;strong&gt;the reputation of the product is at stake.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our users wanted to learn our product, and we &lt;em&gt;wanted&lt;/em&gt; them to love the product, but &lt;strong&gt;we had a documentation problem.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cue-the-documentation-attempts"&gt;
  &lt;/a&gt;
  Cue the Documentation Attempts
&lt;/h2&gt;

&lt;p&gt;Our team set off to close this documentation gap between our users and tooling. We had three main areas of tooling &amp;amp; associated documentation that needed addressed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A web user interface&lt;/strong&gt; that provided a nice overview and data visualization of our system&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A RESTful API&lt;/strong&gt; that provided all of the deployment data and configurations for the web UI and any integrated services&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A CLI for command-line-based operations&lt;/strong&gt; which allowed for local development and cluster configuration management&lt;/li&gt;
&lt;li&gt;Our overall concepts and tutorials so that users could learn the system from a high level across the aforementioned tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was important for us to solve our documentation problem for each of the services above, because we know that good project documentation allowed the following situations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improved onboarding of new users and new team members&lt;/li&gt;
&lt;li&gt;Reduction in support questions by users&lt;/li&gt;
&lt;li&gt;Ability to quickly link users to documentation sections for answers and concepts&lt;/li&gt;
&lt;li&gt;Increased reputation and usage due to (hopefully) being more user-friendly&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#documenting-the-web-interface"&gt;
  &lt;/a&gt;
  Documenting the Web Interface
&lt;/h3&gt;

&lt;p&gt;Web interfaces are hard, because they should be designed intuitively and cleanly so that users familiar with the interface can interact with it as efficient as possible. This presents a challenge for newer users who are unfamiliar with the system, as the layouts and functions of components will be totally new to them.&lt;/p&gt;

&lt;p&gt;To overcome these documentation issues in our web interface, we had both &lt;strong&gt;proactive documentation&lt;/strong&gt; through means of initial popups that would call out certain elements on the first visit to a page type, and &lt;strong&gt;passive documentation&lt;/strong&gt; that would open a sidebar containing page-specific documentation when an icon button was pressed. We felt like this approach was a good trade-off of introducing new users to elements without being too intrusive. &lt;/p&gt;

&lt;p&gt;The highlighted element pop-ups used &lt;a href="https://reactour.vercel.app/#tourprovider"&gt;Reactour&lt;/a&gt; to display their information. To ensure that we covered future changes to the steps, we would hash the list of generated steps and save them to the client's &lt;code&gt;localStorage&lt;/code&gt; in the form of &lt;code&gt;[page URL]: &amp;lt;steps hash&amp;gt;&lt;/code&gt; where the &lt;code&gt;[page URL]&lt;/code&gt; was of generic form, such as &lt;code&gt;/settings&lt;/code&gt; or &lt;code&gt;/users/[user_id]&lt;/code&gt; so that we only showed the steps once per dynamically-rendered page type. These pop-ups provided very basic introductory information about the elements that they highlighted, such as what functions they performed.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/elrumordelaluz"&gt;
        elrumordelaluz
      &lt;/a&gt; / &lt;a href="https://github.com/elrumordelaluz/reactour"&gt;
        reactour
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Tourist Guide into your React Components
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;For our passive, yet detailed documentation, we allowed each page to pass a markdown page source to our core layout component that would &lt;a href="https://reactjs.org/docs/code-splitting.html#reactlazy"&gt;lazy load&lt;/a&gt; and render the markdown into a nice right-side drawer that could be toggled open and closed. This sidebar would be used for presenting more details about the overall page usage and components that existed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documenting-the-restful-api"&gt;
  &lt;/a&gt;
  Documenting the RESTful API
&lt;/h3&gt;

&lt;p&gt;Our RESTful API was actually the easiest to document, because we were able to rely on third-party libraries from the start. It was a &lt;a href="https://www.djangoproject.com/"&gt;Python Django&lt;/a&gt; and &lt;a href="https://www.django-rest-framework.org/"&gt;Django REST Framework&lt;/a&gt; project that leveraged the &lt;a href="https://github.com/axnsan12/drf-yasg"&gt;&lt;code&gt;drf-yasg&lt;/code&gt; OpenAPI generator library&lt;/a&gt; to create &lt;a href="https://swagger.io/specification/"&gt;OpenAPI&lt;/a&gt; and &lt;a href="https://swagger.io/"&gt;Swagger&lt;/a&gt; compatible documentation.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/axnsan12"&gt;
        axnsan12
      &lt;/a&gt; / &lt;a href="https://github.com/axnsan12/drf-yasg"&gt;
        drf-yasg
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Automated generation of real Swagger/OpenAPI 2.0 schemas from Django REST Framework code.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This library allowed us to write the API documentation in-place throughout the route definitions, and &lt;code&gt;drf-yasg&lt;/code&gt; would render documentation in either the form of an OpenAPI schema or as an interactive &lt;a href="https://github.com/Redocly/redoc"&gt;Redoc&lt;/a&gt;/&lt;a href="https://swagger.io/tools/swagger-ui/"&gt;Swagger UI&lt;/a&gt; web page. This meant that &lt;strong&gt;we were generating documentation from our code&lt;/strong&gt; and there was no extra developer steps to change documentation if a feature or route changed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documenting-the-cli"&gt;
  &lt;/a&gt;
  Documenting the CLI
&lt;/h3&gt;

&lt;p&gt;Our command line interface was a &lt;a href="https://golang.org/"&gt;Golang&lt;/a&gt; binary executable that was based off of the &lt;a href="https://cobra.dev/"&gt;&lt;code&gt;cobra&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/spf13/viper"&gt;&lt;code&gt;viper&lt;/code&gt;&lt;/a&gt; libraries which made creating advanced CLIs very easy.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/spf13"&gt;
        spf13
      &lt;/a&gt; / &lt;a href="https://github.com/spf13/cobra"&gt;
        cobra
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Commander for modern Go CLI interactions
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Amongst the many neat features of &lt;code&gt;cobra&lt;/code&gt;, we were able to extend the &lt;a href="https://github.com/spf13/cobra/blob/master/doc/md_docs.md"&gt;Markdown documentation generation feature&lt;/a&gt; which would create rich user documentation for each of the available commands. We would generate this documentation at release time and either deploy the static files as a &lt;a href="https://pages.github.com/"&gt;GitHub Pages site&lt;/a&gt;, or integrate them with our generic documentation below. We made sure to always include older release documentation for users who were not on the latest CLI version.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documenting-the-system"&gt;
  &lt;/a&gt;
  Documenting the System
&lt;/h3&gt;

&lt;p&gt;With the individual components laid out, it was finally time to document the entire system so that it made sense to users. We actually jumped through three or four documentation generators over the three years that I worked on the project.&lt;/p&gt;

&lt;p&gt;The loose timeline of our documentation services was:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; → &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt; → &lt;a href="https://docsify.js.org/"&gt;Docsify&lt;/a&gt; → &lt;a href="https://docusaurus.io/"&gt;Docusaurus&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#jekyll"&gt;
  &lt;/a&gt;
  Jekyll
&lt;/h4&gt;

&lt;p&gt;As mentioned earlier, our documentation started in &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, and it worked decently well for us. The two main drawbacks for us was that&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It slowly grew too difficult to manage large documentation as links &amp;amp; page references needed to be manually updated, and it became more difficult to manage as the number of pages grew&lt;/li&gt;
&lt;li&gt;Our team did not use Ruby, so the development process of putting docs together put users on an unfamiliar path.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We also found that some of the documentation templates seemed to be dated, and we were just looking for something that looked more refreshed and clean, but that's more of an subjective reason to switch than a technical one.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hugo"&gt;
  &lt;/a&gt;
  Hugo
&lt;/h4&gt;

&lt;p&gt;We gave &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt; a shot next, and it provided some more validation and speed in terms of development time. Since the associated program is just a binary, it could be very easily installed on our machines and in workflows without much fuss.&lt;/p&gt;

&lt;p&gt;Hugo provided more flexibility and validation across our documentation, and we quickly grew our documentation and made it look much more organized using the &lt;a href="https://learn.netlify.app/en/"&gt;Hugo Learn theme&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hugo was great, but it required a &lt;em&gt;Build&lt;/em&gt; step to be run between pages in a GitHub repository could show up in a GitHub pages site. We built workflows to handle this on merges to &lt;code&gt;main&lt;/code&gt;, but it wasn't perfect and would occasionally fail. This generation step had us looking at client-side generators again, and we ran into...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#docsify"&gt;
  &lt;/a&gt;
  Docsify
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://docsify.js.org/"&gt;Docsify&lt;/a&gt; is a client-side only documentation generator. As a user requests a documentation page, it would fetch the associated &lt;code&gt;.md&lt;/code&gt; file and render it all client-side. That meant that our documentation deployment process was simple again, as we could just push changes to the &lt;code&gt;main&lt;/code&gt; branch and &lt;em&gt;BOOM&lt;/em&gt; they would show up within seconds.&lt;/p&gt;

&lt;p&gt;The other draw of Docsify was that there were some really slick minimalist themes that we found and really enjoyed. We could pair these with &lt;a href="https://github.com/docsifyjs/awesome-docsify#plugins"&gt;the long list of extensions&lt;/a&gt; and provide users with clean, yet extensive documentation.&lt;/p&gt;

&lt;p&gt;The drawback with Docsify was that as our documentation continued to grow, it started to slow down the rendering process as the initial load would require fetching &lt;em&gt;a lot&lt;/em&gt; of information. On top of this, the searching functionality became more unusable as it wasn't a great interface, and it had to search &lt;em&gt;all&lt;/em&gt; files in a flat format to generate the results. My final gripe with Docsify was one of the reasons that I was initially drawn to it; anything more than generic markdown requires plugins. This introduced a bunch of documentation dependencies on libraries that didn't seem &lt;em&gt;fully&lt;/em&gt; legit and managed, and we found ourselves having to write custom plugins a lot to make things render as desired.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#docusaurus"&gt;
  &lt;/a&gt;
  Docusaurus
&lt;/h4&gt;

&lt;p&gt;After jumping from documentation generator to generator, we finally settled on &lt;a href="https://docusaurus.io/"&gt;Docusaurus&lt;/a&gt;. It introduced a build step again similar to Hugo, but we found that the trade off was worth it, as Docusaurus brought &lt;em&gt;a bunch of really nice features with it&lt;/em&gt;. Since everything was just React under the hood that could be customized, we naturally gravitated to it as we already had React experience.&lt;/p&gt;

&lt;p&gt;We found that it was much easier to customize and extend Docusaurus as compared to our other generators. This meant that we could provide the full &amp;amp; rich experience that we wanted. Our users also responded the best to this iteration of our documentation, but that may partially be accredited to us spending more time to organize the content as well as the overall layout.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-documentation-tips"&gt;
  &lt;/a&gt;
  My Documentation Tips
&lt;/h2&gt;

&lt;p&gt;The following tips and suggestions are just a few of the ways that our team overcame our documentation debt challenges, and how we ensured that our documentation was always in an acceptable state, no matter the level of user who was reading them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-documentation-from-code"&gt;
  &lt;/a&gt;
  Generating Documentation from Code
&lt;/h3&gt;

&lt;p&gt;As previously mentioned, our API and CLI documentation was generated directly from the underlying code. I highly recommend this strategy of &lt;em&gt;Documentation-from-Code&lt;/em&gt;; it makes the process of writing great documentation that much easier. Having one interface for developers to add and document features makes it more likely that they will actually write documentation.&lt;/p&gt;

&lt;p&gt;Most languages and application types have some set of libraries to assist in generating documentation from code, and I highly recommend implementing them in your user-facing projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-less-more-often"&gt;
  &lt;/a&gt;
  Writing Less More Often
&lt;/h3&gt;

&lt;p&gt;It's difficult to climb a mountain in a day, but it becomes easier if you take one small step periodically. Documentation works the same way; writing all of your team's documentation at once will most likely cause stress and annoyance. It's strongly encourages to write documentation in small increments, hopefully at the time that the associated feature is written.&lt;/p&gt;

&lt;p&gt;For older features that need documentation, don't fret; just try to write a few paragraphs, or even sentence, whenever you have some free time. As long as you are slowly crunching way at the documentation debt, you are improving the situation.&lt;/p&gt;

&lt;p&gt;Finally, I found that it was easy to add/improve documentation for a certain feature if a user had just asked a question about the topic. This showed either a gap in our documentation, or a discrepancy that confused users. By tackling these issues one at a time, it was easier to ensure good documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#organizing-documentation-by-user-story"&gt;
  &lt;/a&gt;
  Organizing Documentation by User Story
&lt;/h3&gt;

&lt;p&gt;As our product matured, our documentation evolved from a list of individual available features to tutorials and guides based around common user workflows. We had a section of tutorials for our common use cases that included users just getting started with the system, all the way to some of our most advanced use cases.&lt;/p&gt;

&lt;p&gt;Being a deployment system, we broke up our documentation into cluster timeline user stories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Day 0&lt;/strong&gt;: Gathering and provisioning infrastructure&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Day 1&lt;/strong&gt;: Implementing cluster tools such as monitoring and alerting&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Day 2&lt;/strong&gt;: Deploying application and configuring DNS amongst other things&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This layout provided users with a pretty linear approach to reading our documentation. They could either get the brief steps through a tutorial, or they could follow our guides in order to use the system. Our support questions have reduced slightly since we switched to this more linear documentation organization.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devoting-time-for-documentation-debt"&gt;
  &lt;/a&gt;
  Devoting Time for Documentation Debt
&lt;/h3&gt;

&lt;p&gt;It's not too unheard of to hear about engineering teams having hackathons during the workday to allow contributors to work on neat projects and squash &lt;a href="https://xkcd.com/2138/"&gt;technical debt&lt;/a&gt;. I would say teams need to go one step farther and have &lt;em&gt;Documentation Hackathons&lt;/em&gt;, or at least give individuals the ability to fully devote time to both their client-facing and internal documentation.&lt;/p&gt;

&lt;p&gt;This allows some time to "&lt;em&gt;refresh&lt;/em&gt;" the content and ensure its fully up to date.&lt;/p&gt;




&lt;p&gt;Good documentation practices are key to ensuring happy users and keeping technical support questions to a minimum. Hopefully the above experiences, technologies, and tips help you and your team present your products as positively and completely as possible!&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>productivity</category>
      <category>development</category>
      <category>ux</category>
    </item>
    <item>
      <title>🚀 React Landing Page Template Free with Tailwind CSS and TypeScript [Open source] ⚡️</title>
      <author>Remi W.</author>
      <pubDate>Thu, 09 Sep 2021 13:23:56 +0000</pubDate>
      <link>https://dev.to/ixartz/react-landing-page-template-free-with-tailwind-css-and-typescript-open-source-159</link>
      <guid>https://dev.to/ixartz/react-landing-page-template-free-with-tailwind-css-and-typescript-open-source-159</guid>
      <description>&lt;p&gt;A minimalist landing page theme built on top of React, Tailwind CSS, TypeScript 4.4 and Next JS 11. An open source and free React Landing Page hosted on GitHub. It includes everything with best developer experience in mind with linter ESLint, Code formatter Prettier, Git Hooks with Husky, VSCode configuration.&lt;/p&gt;

&lt;p&gt;You can deploy a React landing page in seconds, saving you development and design time with one-click deployment on Vercel, Netlify or you can choose manual deployment to any hosting services.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A picture is worth a thousand words&lt;/em&gt;, here is the screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qievzIIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ixartz/Next-JS-Landing-Page-Starter-Template/master/public/assets/images/nextjs-landing-page-screenshot.png" alt="React Landing Page Template Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check the source code on GitHub: &lt;a href="https://github.com/ixartz/Next-JS-Landing-Page-Starter-Template"&gt;React Landing Page Template&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ixartz"&gt;
        ixartz
      &lt;/a&gt; / &lt;a href="https://github.com/ixartz/Next-JS-Landing-Page-Starter-Template"&gt;
        Next-JS-Landing-Page-Starter-Template
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🚀 Free NextJS Landing Page Template written in Tailwind CSS 2.0 and TypeScript ⚡️ Made with developer experience first: Next.js 11 + TypeScript + ESLint + Prettier + Husky + Lint-Staged + VSCode + Netlify + PostCSS + Tailwind CSS
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Landing Page Template built with Next JS 11+, Tailwind CSS 2.0 and TypeScript &lt;a href="https://twitter.com/ixartz" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/22898de970db41d476e65546387c7b5147565904f1a4197980bb0e3eb30eb8ab/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f636c6f7564706f7373652e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f7725323025343049786172747a" alt="Twitter"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3WIPM87I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ixartz/Next-JS-Landing-Page-Starter-Templatepublic/assets/images/nextjs-landing-page-banner.png%3Fraw%3Dtrue" alt="Next js starter banner"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;🚀 Landing Page theme written in Next.js, Tailwind CSS and TypeScript ⚡️ Made with developer experience first: Next.js, TypeScript, ESLint, Prettier, Husky, Lint-Staged, VSCode, Netlify, PostCSS, Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Clone this project and use it to create your own &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; project. You can check a &lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/" rel="nofollow"&gt;Next js templates demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
DEMO&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3fSA1OVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ixartz/Next-JS-Landing-Page-Starter-Templatepublic/assets/images/nextjs-landing-page-screenshot.png%3Fraw%3Dtrue" alt="Nextjs Landing Page Template Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/" rel="nofollow"&gt;live demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
Features&lt;/h3&gt;

&lt;p&gt;Developer experience first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
🔥 &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; for Static Site Generator&lt;/li&gt;
&lt;li&gt;
🎨 Integrate with &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt; (w/ JIT mode)&lt;/li&gt;
&lt;li&gt;
💅 PostCSS for processing Tailwind CSS and integrated to &lt;code&gt;styled-jsx&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
🎉 Type checking &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
✅ Strict Mode for TypeScript and React 17&lt;/li&gt;
&lt;li&gt;
✏️ Linter with &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt; (default NextJS, NextJS Core Web Vitals and Airbnb configuration)&lt;/li&gt;
&lt;li&gt;
🛠 Code Formatter with &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🦊 Husky for Git Hooks&lt;/li&gt;
&lt;li&gt;
🚫 Lint-staged for running linters on Git staged files&lt;/li&gt;
&lt;li&gt;
🗂 VSCode configuration: Debug, Settings, Tasks and extension for…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ixartz/Next-JS-Landing-Page-Starter-Template"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This landing page includes out-of-the-box several React components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigation&lt;/li&gt;
&lt;li&gt;Hero&lt;/li&gt;
&lt;li&gt;Feature&lt;/li&gt;
&lt;li&gt;Banner&lt;/li&gt;
&lt;li&gt;Footer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to go further you can checkout our &lt;a href="https://creativedesignsguru.com/category/nextjs/"&gt;premium React templates&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-on-nextjs-boilerplate"&gt;
  &lt;/a&gt;
  Built on NextJS Boilerplate
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;React landing Page Template&lt;/strong&gt; is built on top of &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;React Boilerplate&lt;/a&gt;. Already reached 500+ ⭐ stars on GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-react-landing-page-template"&gt;
  &lt;/a&gt;
  More React Landing Page template
&lt;/h2&gt;

&lt;p&gt;Get access to React components like pricing, testimonial, FAQ, customer logo, statistics, banner, etc.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-purple-modern-react-theme/"&gt;Purple Saas React Theme&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-indigo-modern-react-theme/"&gt;Indigo React Tailwind Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-purple-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fsLIO5h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-purple-modern-nextjs-theme-xs.png" alt="Purple Saas React Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-indigo-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FvlCiWRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-indigo-modern-nextjs-theme-xs.png" alt="Indigo React Tailwind Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If you currently building a SaaS, checkout our &lt;a href="https://nextlessjs.com"&gt;React SaaS Boilerplate Template&lt;/a&gt;. A full-stack React template to build a SaaS faster with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Landing Page UI&lt;/li&gt;
&lt;li&gt;User Dashboard UI&lt;/li&gt;
&lt;li&gt;Form and Error management&lt;/li&gt;
&lt;li&gt;Payment Integration with Stripe&lt;/li&gt;
&lt;li&gt;Infra as code&lt;/li&gt;
&lt;li&gt;Deployment on AWS&lt;/li&gt;
&lt;li&gt;Serverless&lt;/li&gt;
&lt;li&gt;VSCode integration&lt;/li&gt;
&lt;li&gt;Code example with Todo app and CRUD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don't need any more to be designer or a DevOps engineer to build a SaaS. Save you development and designs time.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>I've published the first official Chakra UI course</title>
      <author>Lazar Nikolov</author>
      <pubDate>Thu, 09 Sep 2021 13:23:51 +0000</pubDate>
      <link>https://dev.to/nikolovlazar/i-ve-published-the-first-official-chakra-ui-course-1p58</link>
      <guid>https://dev.to/nikolovlazar/i-ve-published-the-first-official-chakra-ui-course-1p58</guid>
      <description>&lt;p&gt;Hey everyone 👋&lt;/p&gt;

&lt;p&gt;I've published the first &lt;a href="https://egghead.io/courses/build-a-modern-user-interface-with-chakra-ui-fac68106?af=5zzhqq"&gt;official Chakra UI course&lt;/a&gt; on egghead! It's free and it'll get you up to speed with Chakra UI in 40 minutes.&lt;/p&gt;

&lt;p&gt;Check it out and let me know what you think.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>react</category>
      <category>chakraui</category>
      <category>egghead</category>
    </item>
    <item>
      <title>Corepack: the Node.js' manager of package managers</title>
      <author>Axel Navarro</author>
      <pubDate>Thu, 09 Sep 2021 13:23:43 +0000</pubDate>
      <link>https://dev.to/cloudx/corepack-the-node-js-manager-of-package-managers-44dd</link>
      <guid>https://dev.to/cloudx/corepack-the-node-js-manager-of-package-managers-44dd</guid>
      <description>&lt;p&gt;Corepack is the new built-in tool for preparing the required package manager for our projects. Let's see what comes with this new package for packagers. 📦&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;The new Node.js LTS v16 will be released at the end of October (without a fancy name assigned yet), it'll have &lt;a href="https://github.com/nodejs/corepack"&gt;Corepack&lt;/a&gt; preinstalled in the default configuration since &lt;a href="https://github.com/nodejs/node/releases/tag/v16.9.0"&gt;v16.9.0&lt;/a&gt;. 👌&lt;/p&gt;

&lt;p&gt;If we want to use this tool with previous versions we just need to install it as a global package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; corepack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🧠 Remember that for now Corepack v0.9.0 only supports &lt;code&gt;pnpm&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-usage"&gt;
  &lt;/a&gt;
  Basic usage
&lt;/h2&gt;

&lt;p&gt;We can use the same package manager that we've always use in any machine without worrying if it's installed or not, using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;corepack pnpm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Corepack will see to it that the required manager is ready to process your request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#specific-versions"&gt;
  &lt;/a&gt;
  Specific versions
&lt;/h3&gt;

&lt;p&gt;The included &lt;code&gt;npm&lt;/code&gt; version with Node.js LTS v16 is v7, so what if we need &lt;code&gt;npm@6&lt;/code&gt; for one project and &lt;code&gt;npm@7&lt;/code&gt; for another?&lt;/p&gt;

&lt;p&gt;Well, in this scenario you'll will find &lt;code&gt;corepack&lt;/code&gt; very similar to &lt;a href="https://github.com/nvm-sh/nvm"&gt;&lt;code&gt;nvm&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;corepack prepare npm@6.14.15 &lt;span class="nt"&gt;--activate&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;node &lt;span class="nt"&gt;-v&lt;/span&gt;
v16.9.0
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nt"&gt;-v&lt;/span&gt;
7.21.1
&lt;span class="nv"&gt;$ &lt;/span&gt;corepack npm &lt;span class="nt"&gt;-v&lt;/span&gt;
6.14.15
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🤯 So with &lt;code&gt;corepack prepare&lt;/code&gt; you'll setup &lt;code&gt;npm@6&lt;/code&gt;, and you can use it every time you need just by prefixing your &lt;code&gt;npm&lt;/code&gt; usage with Corepack, e.g. &lt;code&gt;corepack npm ci&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And your global &lt;code&gt;npm&lt;/code&gt; command will continue untouched being &lt;code&gt;npm@7&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;🤔 But what is that &lt;code&gt;--activate&lt;/code&gt; flag? Corepack will keep a cache of used versions of a packager, so you should activate the specific version that you want to use; otherwise you will still be using &lt;code&gt;npm@7&lt;/code&gt; when you use &lt;code&gt;corepack npm -v&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#global-package-managers"&gt;
  &lt;/a&gt;
  Global package managers 🌎
&lt;/h2&gt;

&lt;p&gt;What if I want &lt;code&gt;pnpm&lt;/code&gt; as a global command in my terminal? You can enable Corepack to handle &lt;code&gt;pnpm&lt;/code&gt; and automatically install it when is used for the first time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;corepack &lt;span class="nb"&gt;enable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Corepack will install the handlers in the node directory because it's in the &lt;code&gt;$PATH&lt;/code&gt;, but you can use the destination of your choice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;corepack &lt;span class="nb"&gt;enable&lt;/span&gt; &lt;span class="nt"&gt;--install-directory&lt;/span&gt; path/to/bins_folder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it's done, you can use &lt;code&gt;pnpm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt; directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pnpm &lt;span class="nt"&gt;-v&lt;/span&gt;
6.11.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#docker-images"&gt;
  &lt;/a&gt;
  Docker images
&lt;/h2&gt;

&lt;p&gt;At the moment, the official Node.js images in Docker comes with &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt; preinstalled, but this may change in the near future. (no more &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt; preinstalled in the Docker image is possible! 🤯)&lt;/p&gt;

&lt;p&gt;If you use &lt;code&gt;pnpm&lt;/code&gt; in Docker you need to install it using &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;RUN npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; pnpm &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pnpm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Corepack is here to make this easier for you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;RUN corepack pnpm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or maybe you need a specific version like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;RUN corepack prepare npm@6.14.15 &lt;span class="nt"&gt;--activate&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; corepack npm ci
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With Corepack we can have more control about which package manager we're using and we don't need to check if Node.js upgrades &lt;code&gt;npm&lt;/code&gt; and we don't notice. Well, if that happens, by the time we realize that our application is on fire. 🔥&lt;/p&gt;

&lt;p&gt;Also, &lt;code&gt;npm&lt;/code&gt; is part of GitHub Inc. and it's not part of the Node.js governance, so it's a good decision if the Node.js project becomes agnostic and as developers we can use the package manager that we need without wasting space in our Docker images on packagers that we won't use.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>npm</category>
      <category>docker</category>
    </item>
    <item>
      <title>Make a image editor with HTML, CSS and JS.</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Thu, 09 Sep 2021 13:13:16 +0000</pubDate>
      <link>https://dev.to/rainboestrykr/make-a-image-editor-with-html-css-and-js-32ph</link>
      <guid>https://dev.to/rainboestrykr/make-a-image-editor-with-html-css-and-js-32ph</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introducing-fotoquick"&gt;
  &lt;/a&gt;
  Introducing &lt;a href="https://fotoquick.vercel.app"&gt;FOTOQUICK&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Ok, so I find myself needing quick and easy photo manipulation tools. I think many have too found them in my place. So recently, I was challenged to make a simple app within 2 hours. Well, I was searching for ideas for the first half an hour and then I realized about image manipulation. So, I created FOTOQUICK, a simple and easy-to-use photo editing app on the web, which is also built on nothing but HTML, CSS, and JAVASCRIPT !!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/RainboeStrykr/FotoQuick"&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fotoquick.vercel.app/"&gt;Live Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok so as usual our file structure will be as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zqYLBTRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-media-1.freecodecamp.org/images/1%2A5GAPClpa09DmNcCslMA23Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zqYLBTRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-media-1.freecodecamp.org/images/1%2A5GAPClpa09DmNcCslMA23Q.png" alt="filestructure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1st let's create our HTML file.&lt;/p&gt;

&lt;p&gt;We will first of all add bootstrap and other scripts. Also, this is where we will devise our title and favicon&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;FotoQuick by Abhiraj&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"shortcut icon"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/jpg"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"favicon.ico"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sidebar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image_filters"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;"#filters"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Image Filters &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"drop-down"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#9660;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"filters"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'btn btn-primary'&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 25px;"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"grayscale()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;GrayScale&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'btn btn-primary'&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 25px;"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"bright()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Brighen&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'btn btn-primary'&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 25px;"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"dark()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Darken&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 25px;"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"blur_effect()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blur Effect&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'btn btn-primary'&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 25px;"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"emboss()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Emboss&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'btn btn-primary'&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 25px;"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"sharp()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sharpen&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breaks"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"import_and_export"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;"#import_export"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Import and Export &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"drop-down"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#9660;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"import_and_export_buttons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"import_export"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 25px;"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"selectImage()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"foto-file"&lt;/span&gt; &lt;span class="na"&gt;accept=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            Import Image
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 25px;"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"download()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Export Image&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"breaks"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"edit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;"#edit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Editing &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"drop-down"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#9660;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"edit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 25px;"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"crop()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Crop Image&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 25px;"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"flip_img()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Flip Image&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"makeTransparent()"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 25px;"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"color-preview"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;Transparent&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"colorize-color-picker"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"#00000"&lt;/span&gt; &lt;span class="na"&gt;oninput=&lt;/span&gt;&lt;span class="s"&gt;"makeColorize(this)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 25px;"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"openColorPicker()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Colorize&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"foto-image"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://rawcdn.githack.com/kousik19/foto.js/045defe1a5ce06220e084e4e6f6fbaccb7621841/foto.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's put some spice in this HTML.&lt;/p&gt;

&lt;p&gt;Up next, we will add some CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.sidebar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;206&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;overflow-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.drop-down&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#foto-file&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;170px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.image&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#colorize-color-picker&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that our site is actually, let us make it actually work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UN8QV2PD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.wired.com/photos/59322df1a312645844993529/master/pass/testing.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UN8QV2PD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.wired.com/photos/59322df1a312645844993529/master/pass/testing.gif" alt="gif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;foto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Foto&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;selectImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foto-file&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;grayscale&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;foto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grayscale&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bright&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;foto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeBright&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;foto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeDark&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;blur_effect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;foto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyBlurFilter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;emboss&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;foto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyEmbossFilter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sharp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;foto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applySharpFilter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;foto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;flip_img&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;foto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flipVertically&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;crop&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;foto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cropSelected&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeTransparent&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;foto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeTransparent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;openColorPicker&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;colorize-color-picker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeColorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;foto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyColorFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And VOILA! You have created a simple photo editing app.&lt;/p&gt;

&lt;p&gt;if you liked this tutorial, then please do star the github repository or buy me a coffee maybe.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rainboestrykr"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What does return do in JavaScript</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Thu, 09 Sep 2021 13:06:21 +0000</pubDate>
      <link>https://dev.to/coderslang/what-does-return-do-in-javascript-1c4g</link>
      <guid>https://dev.to/coderslang/what-does-return-do-in-javascript-1c4g</guid>
      <description>&lt;p&gt;Like other programming languages, JavaScript allows using &lt;code&gt;return&lt;/code&gt; statements in functions. A &lt;code&gt;return&lt;/code&gt; statement does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Halts function execution and returns control to calling module&lt;/li&gt;
&lt;li&gt;Returns one or many values. This is optional.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial, you'll learn more about syntax and usage of this return statement. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-general-syntax"&gt;
  &lt;/a&gt;
  The general syntax
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;return&lt;/code&gt; statement has the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The keyword &lt;code&gt;value&lt;/code&gt; refers to a value that will be returned by your function. This is optional. You can use a return statement without specifying any value.&lt;/p&gt;

&lt;p&gt;You can use a single value variable such as string, integer, etc to return a single value. &lt;/p&gt;

&lt;p&gt;You can use an array with a &lt;code&gt;return&lt;/code&gt; statement, if you need return many values. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;return&lt;/code&gt; statement also can return objects of user defined types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-samples"&gt;
  &lt;/a&gt;
  Coding Samples
&lt;/h2&gt;

&lt;p&gt;Here comes a few simple examples. It helps in learning various ways to use return statements in JavaScript functions.&lt;/p&gt;

&lt;p&gt;You can use the return statement to put an immediate halt in function execution and return a value -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkPrimeNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkPrimeNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function &lt;code&gt;checkPrimeNumber()&lt;/code&gt; accepts a number as parameter. It checks if the number is a prime number or not. Once it makes a decision, it halts execution and return a true or false value to calling module. &lt;/p&gt;

&lt;p&gt;The example passes a prime number, 7 as input. Thus the program responds with a &lt;code&gt;true&lt;/code&gt; value. You can try running the source code with different input values. &lt;/p&gt;

&lt;p&gt;Often developers use a return statement with no value, to stop the function execution. The below example uses the function &lt;code&gt;greetUser()&lt;/code&gt; to display a greetings message to the user. The function uses a return statement with no value to halt the function execution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greetUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greetUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The program outputs a message, "Hello Steve!".&lt;/p&gt;

&lt;p&gt;A return statement can return user-defined types also. The below functions return JavaScript objects and an array of objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Example of a return statement returns an object&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;returnObj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;course&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Course&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;returnObj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chemistry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Example of a return statement returns an array of objects&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;returnObjectArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;course&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Physics&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Owen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;course&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chemistry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;returnObjectArray&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any JavaScript console can run the above source code. You can try experimenting, modifying these programs, or writing something new.&lt;/p&gt;

&lt;p&gt;Get my &lt;a href="https://learn.coderslang.com/free-ebooks/"&gt;free e-book&lt;/a&gt; to prepare for the technical interview or start to &lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What Are The Best Resources For Competitive Programming?</title>
      <author>Sumeet Vishwakarma</author>
      <pubDate>Thu, 09 Sep 2021 12:52:28 +0000</pubDate>
      <link>https://dev.to/legendsumeet/what-are-the-best-resources-for-competitive-programming-568a</link>
      <guid>https://dev.to/legendsumeet/what-are-the-best-resources-for-competitive-programming-568a</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kJEdqWDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82nixbvpw57v6xzinzwa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJEdqWDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82nixbvpw57v6xzinzwa.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Programming is one of the stupidest things((jokes apart…) to do in the entire universe because you need to tell your computer how to do something, but all the above names are famous for doing this stupidity. Now you can’t deny that this is a valuable skill set and if you are actually interested doing this stupidest and funniest (jokes apart) thing then a straight forward advice for you is…pick up a language, learn the fundamentals of coding, start practicing on coding challenges websites and jump into the Competitive Programming.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUcAOaCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsb28e106keooq7si01n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUcAOaCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsb28e106keooq7si01n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Competitive Programming is the best way to get noticed by top product-based companies and crack interviews there but the question is Where to start?. Which website is good if you are new to programming? What are some websites and what are the contests to participate and compete with others? So below we list out all &lt;br&gt;
those websites and contests that will provide you the answers to these questions about Competitive Programming… &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wQaquUpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0mjcvxqeke24qn6we8v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wQaquUpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0mjcvxqeke24qn6we8v.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GeeksforGeeks&lt;/p&gt;

&lt;p&gt;GeeksforGeeks. Whether programming excites you or you feel stifled, wondering how to prepare for interview questions or how to ace data structures and algorithms, GeeksforGeeks is a one-stop &lt;br&gt;
solution. Here are multiple coding challenges. These challenges are divided into different topics of Data Structures and Algorithms that will help you to build a solid foundation on each topic. You can find all the easy, medium and hard level coding problems on this website. You can also take various courses for practicing and preparing for the technical interviews. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7xFHujR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n83lov5c56ehnt9wne2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7xFHujR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n83lov5c56ehnt9wne2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TopCoder&lt;/p&gt;

&lt;p&gt;Topcoder community is the primary source of the workforce behind all Topcoder projects. It is open and global: anybody, with a few legal restrictions dictated by US laws, and listed in Community Terms, can join and compete, without any financial commitment to Topcoder. Also, participation in challenges organized in the interests of commercial clients generally requires the community member to sign a non-disclosure agreement. Intellectual property for the winning submissions to commercial challenges is passed to the client, in exchange for monetary prizes paid to the winners.&lt;/p&gt;

&lt;p&gt;While the majority of community members participate in Topcoder challenges as regular competitors, those who become recognized for their performance, and involvement in community life (via communication in Topcoder forums, attending Topcoder events, etc.), are offered additional roles in the community, which include: copilots (technical coordinators of challenges), problem writers, reviewers, etc.Since the end of 2014 till the end of 2017, a Community Advisory Board (CAB) was selected from active community members for a one-year term to help improve communications between Topcoder company and its community.In 2018 the CAB was replaced by the Topcoder MVP (Most Valuable Player) program&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZdjEZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rouo6lhu124grvn6vb20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZdjEZm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rouo6lhu124grvn6vb20.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Codeforces&lt;/p&gt;

&lt;p&gt;Codeforces is a Russian website which is best for competitive programmers and hosts contests more frequently. They organize 4 to 5 short contests of 2 hours in a month. Sometimes they also host contest 2-3 per week. They have a variety of language options for coding. After participating in a lot of contest you can also create your own contest and earn money through this site. &lt;br&gt;
This is one of the good site for the preparation of ACM-ICPC (Olympics of programming). You can sort the question and practice problem here, you can also use its blog system to ask questions. The site has a strong and huge community for help. We recommend this site for some experienced programmers because challenges here are most likely too advanced for beginners. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbUNRvnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ant7pve0fqdy37i0eyki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbUNRvnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ant7pve0fqdy37i0eyki.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodeChef&lt;/p&gt;

&lt;p&gt;Cook the best recipe with your code, become a master chef and get into the top companies. Sounds funny but CodeChef is really an awesome Indian based competitive programming website which has a large community of programmers. It is an Indian educational initiative of Directi. Problems are categorized in different levels like Beginner, Easy, Medium, and Hard. &lt;br&gt;
Some of the beginners find this website a bit difficult even if they are solving easy level questions over here. So switching to this website after HackerRank will be a good choice if you are starting from the very basic. The best thing about this website is that if you are unable to solve the problems, you can check the editorial, try to write a solution again and get it accepted and if you have solved the problem still you can check the code of other good coders to find the best solution for the same problem. In both of the way, you learn a lot. &lt;br&gt;
Codechef hosts mainly three contests every month i.e. Long Challenge (10 days long), Cook-off, and Lunchtime. Codechef also hosts a global programming event Snackdown to compete with the other programmers. They provide a variety of language choices and their programmers use the discussion boards to post the problems they encounter during practice or competition. AWS, Samsung, Alibaba Cloud. these are some top companies hire candidates from this website. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Choose the Rendering Method (SPA vs SSR vs SSG)</title>
      <author>PEXILIS</author>
      <pubDate>Thu, 09 Sep 2021 12:47:22 +0000</pubDate>
      <link>https://dev.to/pexilis/choose-the-rendering-method-spa-vs-ssr-vs-ssg-121f</link>
      <guid>https://dev.to/pexilis/choose-the-rendering-method-spa-vs-ssr-vs-ssg-121f</guid>
      <description>&lt;p&gt;Hi, for this first article, I'm going to present you the different rendering paradigms I met during my experience and give you some advices to choose the most adapted to your needs.&lt;/p&gt;

&lt;p&gt;I specify that I'm not an expert and that my advices won't necessarily be applicable to your job, but if it can give you some indications then it's all good 🚀🚀🚀&lt;/p&gt;

&lt;p&gt;Finally this is not a crash course on rendering, I will explain briefly the paradigms involved but I advise you to look at other articles if you don't know what it is &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#server-side-rendering"&gt;
  &lt;/a&gt;
  Server Side Rendering 🎨
&lt;/h2&gt;

&lt;p&gt;As the name suggests, the page is generated on the server side in this paradigm.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seo-oriented"&gt;
  &lt;/a&gt;
  SEO Oriented
&lt;/h3&gt;



&lt;h4&gt;
  &lt;a href="#page-generated-on-server-side"&gt;
  &lt;/a&gt;
  Page generated on server side
&lt;/h4&gt;

&lt;p&gt;First of all, a complete and standardized HTML5 document is generated and downloaded from the web server to the client. &lt;/p&gt;

&lt;p&gt;Thus, search engine can easily parse it and better understand their content because no javascript is needed to access content&lt;br&gt;
HTML semantic structure, textual content, keywords, meta data are a lot of informations related with each others, which are parsed and analysed by search engine and crawler to classify websites.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#multiple-page"&gt;
  &lt;/a&gt;
  Multiple Page
&lt;/h4&gt;

&lt;p&gt;Since the pages are generated on the server side, it's possible to establish several SEO strategies based on keywords. For example, imagine you have a cooking site. You can orient the content of your homepage according to the keywords related to your company and what differentiates you from your competitors. In the same way, it is interesting to implement a content machine that would target more generic keywords allowing to target a larger audience, an article or a recipe.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#very-fast-load"&gt;
  &lt;/a&gt;
  Very fast load
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#few-or-none-javascript-required"&gt;
  &lt;/a&gt;
  Few or none Javascript required 🖥️🖥️🖥️
&lt;/h4&gt;

&lt;p&gt;The first cool thing is that we don't need to write a ton of javascript to make our site work properly. This makes perfect sense, since all the work is done on the server side with a different language, whether it's templating, routing, application state management and GUI components. As a result, Javascript becomes less cumbersome and sometimes totally useless which results in a very fast loading and execution of Javascript.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#serverside-generation-performance"&gt;
  &lt;/a&gt;
  Server-side generation performance
&lt;/h4&gt;

&lt;p&gt;Server-side generation also has many performance benefits. &lt;/p&gt;

&lt;p&gt;First of all, you don't need to run Javascript to see the GUI, except for events and dynamic components among others. &lt;/p&gt;

&lt;p&gt;This makes your page very accessible, even if Javascript tends to be used by the vast majority of browsers, there are still cases where it can be done without. &lt;/p&gt;

&lt;p&gt;Given this fact, the majority of the components of the graphic interface are perfectly feasible in HTML/CSS no matter how dynamic your page is. &lt;/p&gt;

&lt;p&gt;For example, if you want to display the list of the last articles of your blog according to a page number, you don't need to make any call to the DOM of the browser but simply use the server side template engine&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks ❌❌❌
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#page-is-regenerate-every-refresh"&gt;
  &lt;/a&gt;
  Page is regenerate every refresh
&lt;/h4&gt;

&lt;p&gt;The advantage of server side rendering is also a problem when the application is used often. &lt;/p&gt;

&lt;p&gt;The page is regenerated and downloaded at each refresh, the same goes for images, fonts, styles, and scripts. &lt;/p&gt;

&lt;p&gt;Of course solutions like the browser cache exist but it is not infinite and the html page is not cacheable since its content is dynamic. Also, an html page can be very heavy because of the inline styles, the inline javascript and the dynamically generated content. &lt;/p&gt;

&lt;p&gt;If you are on a mobile network with a weak connection and little mobile data this can be a problem.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-i-use-it"&gt;
  &lt;/a&gt;
  Should I use it
&lt;/h3&gt;

&lt;p&gt;From my point of view and personal experience, server-side rendering should be chosen when the content of the site does not change frequently, e.g. once a week seems a reasonable limit.&lt;/p&gt;

&lt;p&gt;Secondly, I would recommend this paradigm if your business strategy is based on exclusive content rather than an exclusive service. This probably means that SEO is important to you and therefore server-side rendering is ideal, if not essential. &lt;/p&gt;

&lt;p&gt;Finally if SEO is essential to your business then server side rendering is a must. &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#single-page-app"&gt;
  &lt;/a&gt;
  Single Page App 🎨
&lt;/h2&gt;

&lt;p&gt;The single page app is a new way of designing a website. &lt;/p&gt;

&lt;p&gt;As its name indicates, a SPA is above all an application, which means that it is much more service and use oriented than content oriented.&lt;/p&gt;

&lt;p&gt;The browser here just retrieves an html file containing the minimal code to host the javascript bundle for the application and the page content. &lt;/p&gt;

&lt;p&gt;Then during all the use the graphical interface is entirely generated on the client side. The dynamic content is simply retrieved as JSON from a Stateless REST API and added to the GUI via the DOM&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance-in-use"&gt;
  &lt;/a&gt;
  Performance in use
&lt;/h3&gt;

&lt;p&gt;The use of a SPA is very fast and ergonomic.&lt;/p&gt;

&lt;p&gt;Since many aspects of the server have been moved to the client side, we don't end up with a set of unrelated pages, but with a real client-side application that manages &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;State management&lt;/li&gt;
&lt;li&gt;Template Engine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This makes SPA a very fast application to use, since the GUI is generated on the client side with the template engine, there is no need to refresh the page each time. &lt;/p&gt;

&lt;p&gt;Not generating the html page each time provides a more application-like user experience. For example when you change the current route, only the content to be changed changes and the page does not refresh, this gives a much smoother and more enjoyable browsing experience.&lt;/p&gt;

&lt;p&gt;The use of json for dynamic content is also a very beneficial point. Not only is it much faster to download but also much less expensive in terms of network resources. &lt;/p&gt;

&lt;p&gt;Moreover you have more control over it, allowing you to use the client side cache for example.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#separation-of-concern"&gt;
  &lt;/a&gt;
  Separation of concern
&lt;/h3&gt;

&lt;p&gt;A SPA allows for greater flexibility and better separation of concerns. &lt;/p&gt;

&lt;p&gt;As we have seen, the client truly becomes an application in its own right. &lt;/p&gt;

&lt;p&gt;This means that the server here no longer has a state and is totally independent of the client. &lt;/p&gt;

&lt;p&gt;In most cases, we use a REST API for the server. This API only performs the business logic and returns information independently of the context.&lt;/p&gt;

&lt;p&gt;In other words, all the server does is return information from its internal or external services. &lt;/p&gt;

&lt;p&gt;The advantage here is the total independence of the client and the server, you can use any client you want as long as it is capable of making requests. &lt;/p&gt;

&lt;p&gt;You want to design a mobile application? You can, just connect your mobile application to your API and you're done.&lt;/p&gt;

&lt;p&gt;Want to build a desktop application? Perfectly feasible with solutions like Electron&lt;/p&gt;

&lt;p&gt;The possibilities are endless, it all depends on your imagination.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks ❌❌❌
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#more-javascript-code"&gt;
  &lt;/a&gt;
  More javascript code
&lt;/h4&gt;

&lt;p&gt;Yes, managing part of the business logic of an application on the client side can have many advantages.&lt;/p&gt;

&lt;p&gt;But you should not forget that it takes code to perform all these actions, and all this has a cost in terms of performance and loading. &lt;/p&gt;

&lt;p&gt;More technical functionality means more code, which means a longer first page load. &lt;/p&gt;

&lt;p&gt;Of course solutions like caching exist, but they become very quickly outdated if you frequently make changes to your production code.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#not-adapted-for-seo"&gt;
  &lt;/a&gt;
  Not adapted for SEO
&lt;/h4&gt;

&lt;p&gt;Client-side generation is not at all suitable for SEO. You don't get a complete html file but only a boilerplate.&lt;/p&gt;

&lt;p&gt;Of course you can always modify the metadata of your page and try to position yourself with that but it's a waste. &lt;/p&gt;

&lt;p&gt;Then it is not possible to manage multiple pages, which means you can't target multiple keywords for a more generic audience.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-use-it"&gt;
  &lt;/a&gt;
  Should I use it 🔥
&lt;/h2&gt;

&lt;p&gt;As my point of view, I recommand that you choose SPA as your last option. Don't forget, unlike popular belief, most of websites are not web application. Your blog isn't a web application, a portfolio isn't a web application, a newspaper isn't a web application. &lt;/p&gt;

&lt;p&gt;What makes the difference between an application and a website is the type of service offered. &lt;/p&gt;

&lt;p&gt;Is your business differentiated by its content or by a unique service and functionality?  If it's the latter, then the single page APP may be an option worth the cost. &lt;/p&gt;

&lt;p&gt;The frequency of the dynamic content is also a key point. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does it change very frequently, every hour for example?&lt;/li&gt;
&lt;li&gt;If so, does this content need to be retrieved in near real time &lt;/li&gt;
&lt;li&gt;Is this content created most of the time by your users and therefore not suitable for SEO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is it worth it from a mobile data consumption point of view for a customer to download a whole bundle rather than several pages? &lt;/p&gt;

&lt;p&gt;For that users must spend time on your application. This means that your service must be attractive and exclusive. If the user only spends 5 minutes a day, then downloading a whole bundle of Javascript is totally useless. But if the user uses your application 1 hour per day, it's ok. &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-site-generated"&gt;
  &lt;/a&gt;
  Static Site ?Generated 🎨
&lt;/h2&gt;

&lt;p&gt;The last paradigm you may encounter is the dynamically generated static site. By dynamically generated I mean generated during build. &lt;/p&gt;

&lt;p&gt;It is not always necessary to use a framework for this, sometimes a backend route system with a set of static html/css pages do the trick very well.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#perfect-for-seo"&gt;
  &lt;/a&gt;
  Perfect for SEO
&lt;/h3&gt;

&lt;p&gt;As for the server-side rendering, the pages are fully generated on the server side and multi-pages are fully supported.&lt;/p&gt;

&lt;p&gt;Also, but this is just me, I think that forcing the team to write the content during the site build pushes them to write more detailed, targeted and relevant content. &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attack-surface"&gt;
  &lt;/a&gt;
  Attack surface
&lt;/h3&gt;

&lt;p&gt;For web security a static site is unattackable, you have no internal services running behind your site the user inputs are not used. &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drawback"&gt;
  &lt;/a&gt;
  Drawback ❌❌❌
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#content-generated-at-build-time"&gt;
  &lt;/a&gt;
  Content generated at build time
&lt;/h4&gt;

&lt;p&gt;This is the main problem with this kind of sites. You have no real time control over your site which makes most of the functionality impossible.&lt;/p&gt;

&lt;p&gt;Moreover, if a customer wants to make a modification on a site, he must master at least a templating language and have followed a small training on the use of the Framework&lt;/p&gt;

&lt;p&gt;If you need to make modifications regularly, this can cause many problems. The interface is not as ergonomic as a CMS and you need to have access to the source code.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#should-i-use-it"&gt;
  &lt;/a&gt;
  Should I use it 🔥
&lt;/h3&gt;

&lt;p&gt;A static site generated during the build is a perfect option if you simply want to create a site whose content changes very rarely but that you want to make known.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion ✨
&lt;/h2&gt;

&lt;p&gt;This article is here only to give indications about what I consider relevant from a personal point of view. &lt;/p&gt;

&lt;p&gt;I always invite you to adapt your solution as much as possible to your initial problem and never to foolishly follow fashionable recommendations.&lt;/p&gt;

&lt;p&gt;In real life, things are not set in stone, there are grey areas and it is up to you to detect them. &lt;/p&gt;

&lt;p&gt;Personally I always choose server side rendering as my first option, it allows me to be more flexible. It is quite possible to distribute a small SPA on an SSR via a different route, the reverse is not possible. &lt;/p&gt;

&lt;p&gt;Finally, don't overthink about this paradigm. Choose the simplest and least restrictive solution for you. If your site just needs a route system and a set of static pages, just go for it. &lt;/p&gt;

</description>
      <category>rendering</category>
      <category>frontend</category>
      <category>framework</category>
    </item>
    <item>
      <title>Practical complex data for unit testing</title>
      <author>Jon Dodd</author>
      <pubDate>Thu, 09 Sep 2021 12:44:28 +0000</pubDate>
      <link>https://dev.to/jdinnovensa/practical-complex-data-for-unit-testing-5dh3</link>
      <guid>https://dev.to/jdinnovensa/practical-complex-data-for-unit-testing-5dh3</guid>
      <description>&lt;p&gt;Unit testing is a long-established and essential part of the software development process particularly when using .NET.  The basic premise, if you are not aware, is to test the public methods of classes so that they work as expected. &lt;/p&gt;

&lt;p&gt;Unit tests follow the 3As: &lt;em&gt;Arrange&lt;/em&gt;, &lt;em&gt;Act &lt;/em&gt;and &lt;em&gt;Assert&lt;/em&gt;. In other words, set up the conditions for the test, run the code and finally, check that it worked as expected. If it did, great the test passed!  If not, then there’s some work to do.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUjBZZE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c1_637662758481588575.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUjBZZE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c1_637662758481588575.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article takes a look at the first step, arranging the test.  Although there are a few things to do during this stage, right now we are only concerned with creating the data required to run the test.&lt;/p&gt;

&lt;p&gt;Later, we are going to look at how to create complex test data that can be easily understood by using the Builder pattern.&lt;/p&gt;

&lt;h2&gt;Why is it important how test data is created?&lt;/h2&gt;

&lt;p&gt;Well, the test data can be confusing to look at and to understand.  It becomes time-consuming to follow and to update. This is especially the case where the test data has relationships to be maintained. &lt;/p&gt;

&lt;p&gt;If the test data is not clear it is easy to make a mistake and introduce bugs into test code.&lt;/p&gt;

&lt;p&gt;Test data which was written a long time ago becomes hard to recall.  As with everything it is fresh in the mind when it is written, but three or six months later, it becomes difficult to recall the intent of the data.&lt;/p&gt;

&lt;p&gt;It is easy and very tempting at times to break the &lt;a title="Read about the DRY principle" href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt; (Don't Repeat Yourself) principle and just repeat test data.  As new tests are set up, test data that is not well understood is typically copied and tweaked to suit the purpose.  This just increases the technical debt within the test data making the whole project harder to maintain.&lt;/p&gt;

&lt;h2&gt;Arranging test data&lt;/h2&gt;

&lt;p&gt;Most, if not all code depends on parameters or data to run.  So when it comes to unit testing and asserting that the code works some amount of data is usually required to run the test.  This can range from a simple value-type parameter to a complex object model, or even a larger set of related data. &lt;/p&gt;

&lt;p&gt;There are different ways of creating unit test data and we’ll take a look at some of them briefly.&lt;/p&gt;

&lt;p&gt;Test data can be created in a unit test directly, passed into a test in line, loaded from files, or created for use in an in-memory database. I consider in-memory database fine for unit testing.  A separate database hosted outside the test execution process would be considered integration testing.&lt;/p&gt;

&lt;h2&gt;Adding test data with xUnit Unit Test Framework&lt;/h2&gt;

&lt;p&gt;To manage and run my unit tests I use &lt;a title="xUnit website" href="https://xunit.net/"&gt;xUnit&lt;/a&gt;. It is a popular, free, open source and community-focused unit testing framework. xUnit provides a few useful ways to manage our test data.&lt;/p&gt;

&lt;h3&gt;Theory Unit Test&lt;/h3&gt;

&lt;p&gt;Theory unit tests allow a single test to act on sets of parameterised data .  Data is passed using the InlineData data attribute for as many different cases as needed.  This keeps the test code DRY and removes the need to repeat the test logic for different data values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DEF7hW4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c2_637662776465999193.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DEF7hW4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c2_637662776465999193.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In cases where test data is complex, xUnit also supports ClassData and MemberData data attribute for loading test data in from a method or from another class.  xUnit is extensible and custom data attributes can be written, for example, to &lt;a href="https://andrewlock.net/creating-a-custom-xunit-theory-test-dataattribute-to-load-data-from-json-files/" rel="noopener"&gt;load test data from files&lt;/a&gt; or from a database.&lt;/p&gt;

&lt;h3&gt;Fixtures&lt;/h3&gt;

&lt;p&gt;The final xUnit feature to look at is the Fixture class. Fixtures allow for sharing setup and clean up code for all tests in a class or even in multiple test classes.  This is a great place to create complex test data and the perfect place for creating an in-memory database for the tests that require one.&lt;/p&gt;

&lt;p&gt;For our development we often use SQL Server accessed via Entity Framework and to test we use SQLite in-memory database to simulate the database layer. We use this approach to initialise an in-memory database with the data we need which provides the context for a series of tests logically grouped in a class.&lt;/p&gt;

&lt;h3&gt;AutoFixture&lt;/h3&gt;

&lt;p&gt;One neat library for creating and generating test data is &lt;a href="https://github.com/AutoFixture/AutoFixture" rel="noopener"&gt;AutoFixture&lt;/a&gt;.  The creators describe it as follows:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;AutoFixture is an open source library for .NET designed to minimize the 'Arrange' phase of your unit tests in order to maximize maintainability. Its primary goal is to allow developers to focus on what is being tested rather than how to setup the test scenario, by making it easier to create object graphs containing test data.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We don’t use AutoFixture for our test data creation in this example, but it is worth mentioning as it can speed up the process of writing tests.&lt;/p&gt;

&lt;h2&gt;How the Builder Pattern can help create complex data&lt;/h2&gt;

&lt;p&gt;As touched upon before, there are issues that emerge when test data gets complex.  Thankfully there is an approach which we can use to help us and has been around for a long time.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Builder_pattern" rel="noopener"&gt;builder pattern is a well-understood design pattern&lt;/a&gt; in software development.  It allows the construction of complex objects step by step and can be used to create different representations of complex data.&lt;/p&gt;

&lt;p&gt;This is great for our needs as we can use this approach to create our test data.  The builder pattern enables us to create our test data with the intent clear. It does mean creating a concrete implementation of the pattern using knowledge of the domain. &lt;/p&gt;

&lt;p&gt;However, I think this approach can be worthwhile as it gives us the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single place to instantiate objects&lt;/li&gt;
&lt;li&gt;It leads to preventing the repetition of data&lt;/li&gt;
&lt;li&gt;Provides a way of controlling each step of the construction process. This leads to the code providing a clear intent of the data.&lt;/li&gt;
&lt;li&gt;The concrete implementation can be developed using domain-specific language. This also makes the intent of the data clearer. Name the builder methods as you wish to provide the most information to the developer/tester.&lt;/li&gt;
&lt;li&gt;As the construction of the object is encapsulated in code, it can be designed so that foreign keys are handled in code which reduces complexity.&lt;/li&gt;
&lt;li&gt;Also, it means collections are created when required. Collections can be navigated by accessing the last item by convention.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Builder Pattern In Action&lt;/h2&gt;

&lt;p&gt;For this project I used .NET Core 5.0, EFCore and SQLite.  Also included is xUnit for unit testing, AgileMapper for mapping and Fluent Assertions for the assertions.&lt;/p&gt;

&lt;p&gt;Our &lt;a href="https://github.com/JD-Innovensa/TestDataBuilderDemo" rel="noopener"&gt;demo project is a nascent itinerary planner and is available on GitHub&lt;/a&gt;. It has a model based around tourists who have excursions containing visits to places (e.g. Paris) and visits to points of interests (e.g. Eiffel Tower).&lt;/p&gt;

&lt;p&gt;The only bit of business logic is to swap the order of places to visit in an excursion.  This logic is the code under test, has a dependency on a database and is encapsulated in a &lt;code&gt;TouristService&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jdyAs8R8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c3_637662809038343271.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jdyAs8R8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c3_637662809038343271.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now for the data.  As mentioned before, we will simulate a database using an in-memory SQLite database as this will work nicely with our service under test.  This will be added using an xUnit fixture class so that all tests in the class can share the same data.  Finally, we have our custom implementation of the builder pattern used to create the test data.&lt;/p&gt;

&lt;h3&gt;What does the test builder look like?&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ITourist&lt;/code&gt; interface contains methods to create our Tourist. You can see that the builder enables the complex object model to be built step by step using method names that have domain relevance. Finally the &lt;code&gt;BuildTourist&lt;/code&gt; method will return our object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IlfCVPHa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c4_637662809039652693.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IlfCVPHa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c4_637662809039652693.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now for a sample of the implementation. &lt;/p&gt;

&lt;p&gt;Initially, we create our top-level object, a &lt;code&gt;Tourist&lt;/code&gt; which is kept in a private field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---JDq7V_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c5_637662809039843065.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---JDq7V_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c5_637662809039843065.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we add an &lt;code&gt;Excursion &lt;/code&gt;to our tourist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zE2uKiAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c6_637662809040100964.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zE2uKiAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c6_637662809040100964.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of the other steps are similar to the above to build up the object.&lt;/p&gt;

&lt;p&gt;Finally, the &lt;code&gt;BuildTourist &lt;/code&gt;method is implemented which returns our &lt;code&gt;Tourist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g7zAm4u4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c7_637662809040290097.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g7zAm4u4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c7_637662809040290097.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The test project includes an example of loading the data using the Builder pattern.  The order and indentation of items is important for readability, but not essential.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LqwXdVB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c8_637662809040485764.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LqwXdVB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c8_637662809040485764.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For contrast, it also includes an example of loading the same test data by direct object creation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eRefehRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c9_637662809040706277.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eRefehRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c9_637662809040706277.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comparing these two different implementations it is easy to see that using a Builder, the test data is more readable and easier to maintain.&lt;/p&gt;

&lt;p&gt;Now on to the unit tests.  The &lt;code&gt;TestsWithFixtureAndBuilder &lt;/code&gt;class uses the Fixture where our test data is created.  The test class contains a single test to check that the &lt;code&gt;SwapPlaceVisits &lt;/code&gt;method works as expected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nHfszTb---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c10_637662809041203367.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nHfszTb---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ivwebsitestorprod.blob.core.windows.net/iv-website-files/c10_637662809041203367.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember to check out the &lt;a href="https://github.com/JD-Innovensa/TestDataBuilderDemo" rel="noopener"&gt;entire code example in GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Further ideas for the Test Data Builder&lt;/h2&gt;

&lt;p&gt;As this is custom code, there is a huge amount of flexibility available and you can enhance the basic test data builder to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Include validation rules. This can be useful for ensuring the business logic constraints are correct before running a test and ensuring your test data is correctly formed.&lt;/li&gt;
&lt;li&gt;Set the primary keys automatically. Depending on how the tests are set up in your specific case, there could be the chance to set the primary keys in the builder.&lt;/li&gt;
&lt;li&gt;Create model with default values and update specific values only. This can be done using lambda functions.&lt;/li&gt;
&lt;li&gt;Add plain English descriptions to the builder and override the ToString() method. Textual information can be added inline.   This could also be outputted during unit test execution to help debug problematic tests.&lt;/li&gt;
&lt;li&gt;Add factory methods to generate common test data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As we’ve seen, there are many ways of creating test data. However, when the data starts to become complex it can become difficult to understand and maintain and lead to complications with our unit tests.  The builder pattern has been around for a long time and it has proven to be useful when creating test data to give context and make the test data easy to understand and maintain.&lt;/p&gt;

&lt;p&gt;Hopefully this article and code example will provide some useful pointers to building your test data.  Beyond this specific code example, the take home points are to find the approach which works best for you and the rest of your development and testing team.  So when creating test data, aim for the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The test data is easy to understand.&lt;/li&gt;
&lt;li&gt;The relationship of the data is easy to understand.&lt;/li&gt;
&lt;li&gt;The data is easy to change or add.&lt;/li&gt;
&lt;li&gt;The approach ensures developers stick to the DRY principle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>csharp</category>
      <category>dotnet</category>
      <category>testing</category>
    </item>
  </channel>
</rss>
