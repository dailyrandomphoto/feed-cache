<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create A Terminal Media Player</title>
      <author>Pratyush Kumar</author>
      <pubDate>Tue, 09 Nov 2021 06:52:59 +0000</pubDate>
      <link>https://dev.to/pratyushkumar/create-a-terminal-media-player-5h81</link>
      <guid>https://dev.to/pratyushkumar/create-a-terminal-media-player-5h81</guid>
      <description>&lt;p&gt;So, media players are no new thing right, we have the Windows Media Player, Apple Quicktime, and the absolute champion in media playing, VLC. So why would anyone want to create another?&lt;/p&gt;

&lt;p&gt;It's because it is in &lt;strong&gt;ASCII&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;We programmers have always been fond of TUIs (Text User Interfaces). From keeping our screensavers to the matrix code, to using Figlet to convert text to ASCII art, it just seems that ASCII art in the terminal makes anything cool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/AOSwwqVjNZlDO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/AOSwwqVjNZlDO/giphy.gif" alt="matrix" width="360" height="227"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;So cool&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So in this post, I will describe how I created a quick and dirty media player that displays video MPEG and JPEG files as character art, and we will discuss how we can improve upon the program in small, meaningful ways.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  üìù The Basics
&lt;/h2&gt;

&lt;p&gt;So I made this program in &lt;strong&gt;Python (version 3.9)&lt;/strong&gt;, primarily because it has excellent libraries to handle media files and images, of which I will be using &lt;strong&gt;Pillow&lt;/strong&gt; and &lt;strong&gt;OpenCV&lt;/strong&gt;. However, you can use any language you like and are comfortable with, after all, OpenCV has been ported to several languages, and for images you can use a binding of ImageMagick.&lt;/p&gt;

&lt;p&gt;Furthermore, to handle '.srt' (subtitle) files, I have used &lt;strong&gt;pysrt&lt;/strong&gt; module. However, you may parse subtitle files using regex, or some hacked up string algorithm. You may also opt not to include subtitles too.&lt;/p&gt;

&lt;p&gt;We also use a &lt;strong&gt;true-colour support POSIX terminal&lt;/strong&gt;, like GNOME terminal (the one used in all GNOME systems), Konsole (KDE based systems), iTerm (macOS), and the Windows terminal (using WSL). Basically almost all terminals, the exception being Terminal.app and Command Prompt support this. What this means is that we can use full 24 bit RGB colours in the terminal.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#taking-off"&gt;
  &lt;/a&gt;
  ‚úàÔ∏è Taking Off
&lt;/h2&gt;

&lt;p&gt;So the first thing to do is to read pixel data off a picture. We can deal with videos later, but first we need a test picture. Choose any picture on your computer that is simply enough to analyse the program and continue. To read a pixel, we first load it into Pillow and simply store the data into an array/list or a tuple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;your_filename&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"RGB"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
    &lt;span class="n"&gt;pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdata&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Could not open file!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in the above code we simply take the image and read its dimensions and its pixel data, which contains the RGB values (from 0 to 255) of each pixel in the image. Now we map these RGB values to our ASCII characters, which we arrange in increasing order of brightness.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;ASCII_CHARS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"`^&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;,:;Il!i~+_-?][}{1)(|&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&amp;amp;8%B@$"&lt;/span&gt;
&lt;span class="n"&gt;MAX_PIXEL_VALUE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;

&lt;span class="n"&gt;symbol_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intensity&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;MAX_PIXEL_VALUE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASCII_CHARS&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable &lt;code&gt;intensity&lt;/code&gt; above there is what we would compute the brightness to be from the RGB values (For the time being, let &lt;code&gt;intensity = 10&lt;/code&gt;). We subtract 1 to prevent overflow of indices above the length of the character string, and we use a simple modulo operation for the mapping.&lt;/p&gt;

&lt;p&gt;However that &lt;code&gt;-1&lt;/code&gt; turns up problem when the &lt;code&gt;intensity&lt;/code&gt; is zero. Because then it becomes -1, which means we map our most intense character to a zero intensity üò±&lt;/p&gt;

&lt;p&gt;So we simply include a check against it, and solve the problem üòâ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;symbol_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbol_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;symbol_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;symbol_index&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could then print the character onto the screen, and adding a newline character whenever we finish a row.&lt;/p&gt;

&lt;p&gt;Now that this is good to go, we should run and test it. This should give the output of a low intensity character for all pixels in the image.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solving-problems"&gt;
  &lt;/a&gt;
  üß® Solving Problems
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xTiTnGeUsWOEwsGoG4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xTiTnGeUsWOEwsGoG4/giphy.gif" alt="problems" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Running the program will show some outright problems, the most important being that the &lt;em&gt;image is too big!&lt;/em&gt; Even a small image is of 500 x 300 size, but a terminal typically just has 159 columns and 36 rows, even in full screen. So we would need to resize the image first. This is done by the method &lt;code&gt;img.resize(&amp;lt;length&amp;gt;, &amp;lt;width&amp;gt;)&lt;/code&gt;. However, using a few libraries and a clever line of code means that the image could be resized based upon the terminal size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_terminal_size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# new_rows, new_cols defined using image's aspect ratio and the terminal size
&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;new_cols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_rows&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So solving this, another thing we haven't yet implemented is an intensity measure, though &lt;code&gt;intensity = (pixel_red + pixel_blue + pixel_green) / 3&lt;/code&gt; works, the human eye is most sensitive to green light, and least to blue. So a better intensity formula would be&lt;/p&gt;

&lt;p&gt;&lt;code&gt;intensity = (0.299 * pixel_red_square + 0.587 * pixel_green_square + 0.114 * pixel_blue_square) ** 0.5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/eChf44Gyj2VrO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/eChf44Gyj2VrO/giphy.gif" alt="formula" width="320" height="137"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Yes I know, the formula is a mouthful.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another thing is that like you must have already noticed, the &lt;em&gt;ASCII render appear squished&lt;/em&gt;. This is because, font characters aren't squares (like pixels), but rectangles. So to preserve the image, we would have to print the characters twice, or thrice. This would also mean tweaking the resizing code to realise this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#video-time"&gt;
  &lt;/a&gt;
  üé• Video Time!
&lt;/h2&gt;

&lt;p&gt;Adding video support isn't that hard. All we have to do is to politely ask OpenCV to split the video into image frames for us, and it will comply.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt;
&lt;span class="n"&gt;vidcap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# a frame counter
&lt;/span&gt;&lt;span class="n"&gt;frame_skip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# to control the choppiness/frame rate
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"clear"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;vidcap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isOpened&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vidcap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;frame_skip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"frame.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="c1"&gt;# a call the old function to ASCII render image 'frame.jpg'
&lt;/span&gt;        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;vidcap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since vidcap can also open image files, you can use the same code to even read images and then call our old methods. You can also retouch the video/frames using OpenCV. For example, you could increase contrast by &lt;code&gt;image = cv2.convertScaleAbs(image, alpha=1.5, beta=50)&lt;/code&gt; which increase contrast to 1.25 and brightness to 50% more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%8D-showing-colour"&gt;
  &lt;/a&gt;
  üñç Showing Colour
&lt;/h2&gt;

&lt;p&gt;Adding colour is by far the easiest. We are going to use the ultimate tool (apart from curses) to create TUIs in POSIX compliant systems... &lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code"&gt;ANSI escape code&lt;/a&gt; ü•Å&lt;/p&gt;

&lt;p&gt;So the ANSI escape code to change the foreground colour in 24-RGB is (spaces added for readability)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"ESC[ 38;2;&amp;lt;r&amp;gt;;&amp;lt;g&amp;gt;;&amp;lt;b&amp;gt; m"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;"ESC"&lt;/code&gt; is actually &lt;code&gt;"\033"&lt;/code&gt; when using in code. (Since ASCII code of ESC is 033 in octal)&lt;br&gt;
and r, g, b are the 0-255 range values. So to say print something in red, we could have the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s"&gt;[38;2;255;0;0m Hello &lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s"&gt;[0m"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can output this escape code before printing the corresponding character. Just do not forget to reset all colours/settings by printing &lt;code&gt;ESC[0m&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%9B%A0-fine-tuning"&gt;
  &lt;/a&gt;
  üõ† Fine Tuning
&lt;/h2&gt;

&lt;p&gt;Experimenting uptil now, you must have observed that when playing a video, it sometimes gives that rolling shutter effect found in old TVs. This is because the program prints all the characters of a current frame below the ASCII render of the previous frame. However, the correct way to do things would be to replace characters in the ASCII render, overwriting them. This means we would have to navigate around the terminal to go to the first position, and then rewrite all characters upon the previous ones, which would give us a smoother, glitch free transition into frames.&lt;/p&gt;

&lt;p&gt;This is also done using ANSI escape codes, by simply going to the first position in the terminal (top left corner) every time we start printing. The ANSI code to move the cursor is (spaces for readability)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ESC[ &amp;lt;line_number&amp;gt;&lt;span class="p"&gt;;&lt;/span&gt;&amp;lt;column_number&amp;gt; H
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since this is &lt;em&gt;1-indexed&lt;/em&gt;, the code to move to start will be &lt;code&gt;ESC[1;1H&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-subtitles"&gt;
  &lt;/a&gt;
  üéô Subtitles
&lt;/h2&gt;

&lt;p&gt;To add subtitles, we would first need a &lt;strong&gt;.srt&lt;/strong&gt; file. This file contains everything heard in the video, with a count and time signatures as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1
00:00:00,000 --&amp;gt; 00:00:01,000
Hey, want to party?

2
00:00:01,001 --&amp;gt; 00:01:00,123
(Tense music plays)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, according to the above file, from time 0 to 1 second, the subtitle &lt;code&gt;Hey, want to party?&lt;/code&gt; should display, and then from 1.001 second (1 second, 001 millisecond) to 1 minute 123 millisecond, we should show the subtitle &lt;code&gt;(Tense music plays)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The time signatures are in the format &lt;code&gt;Hours:Minutes:Second,Milliseconds&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, since we traverse the video frame by frame, we first get our frame's timestamp by adding the following commands to the previous frame splitting code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt;
&lt;span class="n"&gt;vidcap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sub_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pysrt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;subtitle_srt_file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# a frame counter
&lt;/span&gt;&lt;span class="n"&gt;frame_skip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# to control the choppiness/frame rate
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"clear"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;vidcap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isOpened&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vidcap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;frame_skip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"frame.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vidcap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CAP_PROP_POS_MSEC&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# a call the old function to ASCII render image 'frame.jpg'
&lt;/span&gt;        &lt;span class="c1"&gt;# send timestamp &amp;amp; sub_file to a subtitle printing function
&lt;/span&gt;        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;vidcap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;cv2.CAP_PROP_POS_MSEC&lt;/code&gt; is an attribute that returns the current frame's time after start in milliseconds, we can directly use this in our subtitle printing function, as pysrt allows for a splice feature that selects subtitles for the specific timestamp.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;subs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starts_before&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'milliseconds'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;ends_after&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'milliseconds'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print line (a string)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The slice function is pretty straightforward to use, and also supports minutes, hours and seconds attributes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts-and-improvements"&gt;
  &lt;/a&gt;
  ü§î Final Thoughts And Improvements
&lt;/h2&gt;

&lt;p&gt;So there you have it, a pretty basic in-terminal media player. This is far from a finished program however, with features like playback speed, pause and play, and seek still missing. However you are advised to implement these and experiment around, and most of all, awe at what you just made!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/yidUzHnBk32Um9aMMw/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yidUzHnBk32Um9aMMw/giphy.gif" alt="shock" width="500" height="250"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;After all, it is the freaking terminal!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top Websites To Find Remote Jobs</title>
      <author>Danish Saleem</author>
      <pubDate>Tue, 09 Nov 2021 06:37:57 +0000</pubDate>
      <link>https://dev.to/mrdanishsaleem/top-websites-to-find-remote-jobs-4623</link>
      <guid>https://dev.to/mrdanishsaleem/top-websites-to-find-remote-jobs-4623</guid>
      <description>&lt;h2&gt;
  &lt;a href="#we-work-remotely"&gt;
  &lt;/a&gt;
  &lt;a href="https://weworkremotely.com/"&gt;We Work Remotely&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We Work Remotely is the¬†largest remote work community in the world.¬†With over 3M visitors, WWR is the number one destination to find and list incredible remote jobs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-vocations"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.virtualvocations.com/"&gt;Virtual Vocations&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Virtual Vocations is a small company with a big mission. We‚Äôre revolutionizing the way job-seekers find remote jobs. As a 100% remote company, we understand job-seekers unique challenges when looking for virtual work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flexjobs"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.flexjobs.com/"&gt;FlexJobs&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The #1 job site¬†to find vetted remote, work from home, and flexible job opportunities¬†since 2007.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#justremote"&gt;
  &lt;/a&gt;
  &lt;a href="https://justremote.co/"&gt;JustRemote&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Discover Remote Jobs from around the world. Give up the commute, work remotely and do what you love, daily, from anywhere. Find your perfect remote development, design, sales or marketing job today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remote"&gt;
  &lt;/a&gt;
  &lt;a href="https://remote.co/"&gt;Remote&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://remote.co/"&gt;Remote.co&lt;/a&gt; is a resource for companies that see remote work as an opportunity. We are focused on providing expert insight, best practices, and valuable support for organizations exploring or already embracing a remote team as a significant portion of their workforce.&lt;/p&gt;

&lt;p&gt;Let's connect!You can follow me on¬†Twitter,¬†LinkedIn¬†&amp;amp;¬†GitHub&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect!
&lt;/h2&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/MrDanishSaleem"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mrdanishsaleem/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mrdanishsaleem/"&gt;GitHub&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like this post. Kindly support me by &lt;a href="https://www.buymeacoffee.com/mrdanishsaleem"&gt;Buying Me a Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IrvJezlq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0ikih5nlsqs0oops11e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrvJezlq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0ikih5nlsqs0oops11e.png" alt="Buy Me a Coffee" width="880" height="193"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>PYTHON TRICKS FOR WRITING CLEAN AND EASY READABLE CODE.</title>
      <author>Sam Sonter</author>
      <pubDate>Tue, 09 Nov 2021 05:31:57 +0000</pubDate>
      <link>https://dev.to/asapsonter/python-tricks-for-writing-clean-and-easy-readable-code-5cc0</link>
      <guid>https://dev.to/asapsonter/python-tricks-for-writing-clean-and-easy-readable-code-5cc0</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hello-everybody-today-i-am-going-state-and-explain-few-python-tricks-with-examples"&gt;
  &lt;/a&gt;
  Hello everybody, Today  I am going state and explain few python tricks with examples.
&lt;/h1&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        TERNARY OPRATORS/CONDITIONALS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Ternary oprators/conditionals evaluate code on &lt;em&gt;True&lt;/em&gt; or &lt;em&gt;False&lt;/em&gt;. It allows a single line replacing multi-line &lt;em&gt;if&lt;/em&gt; and &lt;em&gt;else&lt;/em&gt; statements. This basicaily replaces multi-line code but still makes the code understandable. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SFzjP3XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jubtxswrfk0jaacba6bf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SFzjP3XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jubtxswrfk0jaacba6bf.png" alt="Image description" width="448" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Re-write using Ternary &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FjTF--MO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tkbzfzinp4uzzcc59d1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjTF--MO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tkbzfzinp4uzzcc59d1.png" alt="Image description" width="566" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have both if/else statement on a single line. Making the code simple and easier to read.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          ENUMERATE FUNCTION
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is a built-in python function that eases the task of interating through lists/tuples. &lt;br&gt;
Enumerated objects can be used directly in loops or converted into tuples using list() method. Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4LAZ1xlh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh1evduoru7v6c7kv6mc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4LAZ1xlh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh1evduoru7v6c7kv6mc.png" alt="Image description" width="874" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am now going to state a cleaner code using Enumerate function&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NlNc7xfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jpdybktnyoemp2l2p7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NlNc7xfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jpdybktnyoemp2l2p7i.png" alt="Image description" width="848" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      WRITING SIMPLIFIED NUMERIC LITERALS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I will show use to use &lt;strong&gt;_&lt;/strong&gt; to simplify large numeric literals in code. &lt;br&gt;
In the following example i will use an underscore help read large numeric values and an f string for easy read of its output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TBt5LcXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc0vqju9a0u25lly8e33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TBt5LcXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc0vqju9a0u25lly8e33.png" alt="Image description" width="866" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Tilld Devlog #1 - Building a Better Knowledge Source</title>
      <author>Brett Martin</author>
      <pubDate>Tue, 09 Nov 2021 05:26:47 +0000</pubDate>
      <link>https://dev.to/bamartindev/tilld-devlog-1-2o76</link>
      <guid>https://dev.to/bamartindev/tilld-devlog-1-2o76</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published @ &lt;a href="https://www.catstache.io/blog/tilld-devlog-1"&gt;catstach.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello, and welcome to the my first ever Devlog!  I wanted to attempt to build a new web application in public, mostly so I can look back on the experience one day, but also to possibly connect with other developers and builders that I wouldn't meet if I worked in the shadows!&lt;/p&gt;

&lt;p&gt;My plan for this first post is to explain the application and what it attempts to solve, and then talk about the first steps I have taken in the first week of development.  I will also try to do some small tweets about what I am doing throughout the week and if you are interested in seeing those, give me a follow &lt;a href="https://twitter.com/boudrobam"&gt;@BoudroBam&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;When trying to decide on what to build, I wanted to make sure that I was addressing a problem.  It didn't have to be a big problem - in fact I spent a lot of time thinking of smaller problems to try and attempt to solve, but I was usually greeted with a handful of Software as a Service (SaaS) solutions that already existed! However, I didn't let that deter me and I finally settled on a problem to attempt to solve...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finding information within a company is a massive pain!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I believe this is true for most industries, but it is especially true for software jobs.  Not only do you have to know about the systems you are developing and interacting with, you also need to know about the domain of the business, the business rules, which teams own what part of the system, and the list goes on and on.&lt;/p&gt;

&lt;p&gt;When you are part of a company for a long enough time you may learn a lot of the things that I pointed out above through conversations and past experiences, but there is usually still some gap in knowledge.  If you are new to a company those points are even worse as you drown in a flood of domain knowledge and acronym soup.&lt;/p&gt;

&lt;p&gt;I have found that if I was lucky my company had some sort of wiki or knowledge base where people published documentation.  However, I still find that with such a system in place, the issue still exists.  In fact, I feel that having a wiki gives false security that there is &lt;em&gt;correct&lt;/em&gt;, and &lt;em&gt;useful&lt;/em&gt; documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-goals"&gt;
  &lt;/a&gt;
  The Goals
&lt;/h2&gt;

&lt;p&gt;I decided to title this section "The Goals" because ill be honest, I don't really have a solution!  This will be a hard problem to solve, and I imagine there will be many mistakes, learning opportunities, and pivots as I start building.  Instead I want to state some goals that will help define what a system that wants to solve this problem should be able to do.  It should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Assist with clarifying documentation.&lt;/li&gt;
&lt;li&gt;Surface the subject matter experts (SMEs) of topics.&lt;/li&gt;
&lt;li&gt;Ensure knowledge is up to date.&lt;/li&gt;
&lt;li&gt;Enable users discovery.&lt;/li&gt;
&lt;li&gt;Identify knowledge gaps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I believe a system that does all of these things would massivly improve the correctness and usefulness of information sharing.  The goal that is the most daunting, but also the most important in terms of changing how information is compiled, is identifying knowledge gaps.  If the system can automatically detect, then ask for someone to fill the gap, that would be huge!&lt;/p&gt;

&lt;p&gt;Of course, these goals may change as time goes on.  I may add new ones, or rework existing ones to capture new ideas, all based on user feedback.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-milestone-clarifying-documentation-through-key-word-detection"&gt;
  &lt;/a&gt;
  First Milestone - Clarifying Documentation Through Key Word Detection
&lt;/h2&gt;

&lt;p&gt;With all of the goals laid out, I need to pick something to start driving toward.  While I can't tackle all of a singular goal in one go, I can at least start making milestones that I think will address them!  So the first goal area I am going to work on is assiting with clarifying documentation, and I think a good place to start would be to help highlight missing definitions.&lt;/p&gt;

&lt;p&gt;The idea is that as pages of documentation are added and modified, the system can start to pick out keywords and request that maintainers of the space add definitions to a glossary.  I want to start here because it &lt;em&gt;appears&lt;/em&gt; to be a pretty simple process and will allow me to get the basic infrastructure of the app set up.  I also think it would be a good launching point for starting to add layers of complexity to the process - first ill start with a simple detection and alert system, but then I can move on to suggesting definitions for industry terms, searching for "synonyms" if its a term used internally by the company, etc.&lt;/p&gt;

&lt;p&gt;So, that is what I will be working towards first!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-wireframes"&gt;
  &lt;/a&gt;
  Some Wireframes
&lt;/h2&gt;

&lt;p&gt;That has been a lot of words, so I figured now is a decent time for pictures!  I have drafted up some wireframes to get just enough of a UI to drive the system.  Most are pretty basic and boring, focusing on creating flows for creating Organizations and Workspaces.  What I do want to show is just the initial "dashboard", and the two concepts that will help me drive towards the first milestone, the inbox and glossary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g27z2Woj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.catstache.io/images/main-hub-wireframe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g27z2Woj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.catstache.io/images/main-hub-wireframe.png" alt="tilld dashboard" width="880" height="685"&gt;&lt;/a&gt;&lt;br&gt;
This is the main view when you are in an organization.  Its a pretty common layout but its a starting point, and there isn't really a point in reinventing the wheel at this point!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VA-A5rxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.catstache.io/images/inbox-wireframe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VA-A5rxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.catstache.io/images/inbox-wireframe.png" alt="tilld inbox" width="880" height="687"&gt;&lt;/a&gt;&lt;br&gt;
I wanted to add an inbox as the feedback loop for how the system will indicate to the user when something actionable is detected.  In this case, when something should have an entry created in the glossary.  You can see in the mock up some other ideas I have for use of the inbox such as identifying SMEs, calling out gaps in documentation, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_rzsWdzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.catstache.io/images/glossary-wireframe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_rzsWdzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.catstache.io/images/glossary-wireframe.png" alt="tilld glossary" width="880" height="685"&gt;&lt;/a&gt;&lt;br&gt;
Having an easily accessible glossary is and important first step in achieving usefulness and clarity.  At this point in time it will be a basic list of term to definition mappings, but I imagine this will become more content rich as time goes on.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#initial-system-design"&gt;
  &lt;/a&gt;
  Initial System Design
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sn-_jmEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.catstache.io/images/first-tilld-system-diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sn-_jmEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.catstache.io/images/first-tilld-system-diagram.png" alt="tilld system design" width="841" height="642"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you have seen some of the visual ideas for the initial UI, I thought it would be good to show the first pass at an overall system design.&lt;br&gt;
I went back and forth in my mind deciding on certain parts of the tech stack, seeing if there was any reason to use some languages and frameworks I wouldn't usually use on my own projects such as Rust with Actix Web or Haskell with Servant for the API but I ended up deciding to keep it simple and use Node with Express for the server since I was going to be using JavaScript anyways for the React front end!&lt;/p&gt;

&lt;p&gt;That API server will then be responsible for the common CRUD operations for the things we see in all apps such as Users, and domain specific things like Organizations and Workspaces.  These will be written to a PostgreSQL database, since a lot of this info makes sense in a relational database.  I decided to go with a second database, a NoSQL database, increasing complexity a bit.  This is where the documents will be stored but this may end up being a mistake that I try and roll back in the future.  My thinking is that because im not really sure what kind of metadata ill be associating with documents to power this app, it will be easier to work quickly and try new things.&lt;/p&gt;

&lt;p&gt;Finally the server will also be responsible for sending messages to a RabbitMQ queue for processors to consume.  Again, you can see that there is a plan to create a lot of processors to work off of messages being generated on document CRUD operations.  The first one is the keyword processor but ill need to process images to extract data, for example, and I will want to start building a graph of how things in the organization are connected, and who knows what else in the future!&lt;/p&gt;

&lt;p&gt;The processors themselves will be written in whatever language makes the most sense, since it is highly decoupled they don't need to interact.  That being said, I am starting with Python for the first few because it was the best option when it comes to machine learning and data libraries, and I am keeping them all in the same codebase to allow for code reuse for the common tasks of working with the queues and database.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#current-progress"&gt;
  &lt;/a&gt;
  Current Progress
&lt;/h2&gt;

&lt;p&gt;So, I am not sure the best way of showing progress from a coding and development standpoint.  &lt;strong&gt;If you have any suggestions of what you would like to see let me know in the comments!&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#general-notes"&gt;
  &lt;/a&gt;
  General Notes
&lt;/h3&gt;

&lt;p&gt;As of this writing I started working on the shell of the backend.  I wrote a docker-compose file to spin up containers to run the PostgreSQL DB, MongoDB, and RabbitMQ services for local development, and I created two new projects on Gitlab: api and data-processors.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#data-processors"&gt;
  &lt;/a&gt;
  Data Processors
&lt;/h3&gt;

&lt;p&gt;The data processor has been setup to take a command line argument to determine which processor to run on launch, so something like &lt;code&gt;python data-processors.py keyword&lt;/code&gt; will start the processor and kick off the logic to pull from the queue and take actions to determine keywords (currently it does nothing besides echo any messages it gets, no fun keyword extraction yet!).  It pulls from the message queue using the &lt;a href="https://pika.readthedocs.io/en/stable/"&gt;pika&lt;/a&gt;.  Unfortunately there isn't too much that is interesting going on in here yet to show code wise.&lt;/p&gt;

&lt;p&gt;The next thing to do will be to connect to the MongoDB instance to enable read/write operations on the documents. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  API
&lt;/h3&gt;

&lt;p&gt;Similar to the data processor, the first thing I did besides just the basic "Hello World" setup of an express server was create the functionality to write to the queue.  I set it up to be a singleton connection to avoid opening and closing all the time, and I can show the first pass of that code here real quick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amqp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amqplib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Function to create a singleton connection to the RabbitMQ host.
 * Returns a function `get` to return the connection to the caller, and
 * `release` to close the connection.
 * 
 * `release` should only really be invoked if the server is closing and is added
 * for completness.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;amqp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RABBITMQ_HOST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Failed to connect to RabbitMQ Host: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;release&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * A channel is just a multiplexed connection on the open TCP connection.  This allows us to have distinct channels for different logical
 * operations without maintaining extra TCP connections.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createChannel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * We make use of an exchange under the hood since most messages will be intended for more than
 * one consumer, and a standard queue is a 1-to-1 producer to consumer ratio.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createExchange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exhange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createChannel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assertExchange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exhange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;topic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;durable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * The only function that should be used outside of this file.
 * 
 * Given an exchange name and a topic, return two functions.  One to publish to the exchange, and one 
 * to close the channel connection when done.
 * 
 * TODO - Write up some documentation to link to where we record all the exchanges / keys in use.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mkQueue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exchange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createExchange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exchange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;publish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exchange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mkQueue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This allows me to make use of just the exported function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rabbitmq&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./queue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rabbitmq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;docs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So anywhere that I want to write to the queue (any API endpoint that needs to produce a message), I can pass a handle to the publish function to and boom!&lt;/p&gt;

&lt;p&gt;The next thing I did was setup my connection the PostgreSQL database using the &lt;a href="https://node-postgres.com/"&gt;node-postgres&lt;/a&gt; library, and setup migrations to define my schema with &lt;a href="https://salsita.github.io/node-pg-migrate/#/"&gt;node-pg-migrate&lt;/a&gt;.  I created some simple &lt;code&gt;create&lt;/code&gt; functions for the various parts of the database like this one for creating an organization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createOrganization&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;industry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INSERT INTO organizations (name, description, industry) VALUES ($1, $2, $3) RETURNING *&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;industry&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I might end up moving away from the migration library, but it seemed like it would work for my current use case.&lt;/p&gt;

&lt;p&gt;As you can see from the code above, its not really production ready.  I need to set up error handling &amp;amp; recovery when executing these operations and do some logging, but ill probably do that at a later time when I am getting close to releasing the first milestone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;This upcomming week I hope to achieve the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Establish the connection to MongoDB for both the API and the data processor.&lt;/li&gt;
&lt;li&gt;Build the &lt;code&gt;/api/docs&lt;/code&gt; route for all the verbs (GET, POST, PUT, DELETE)&lt;/li&gt;
&lt;li&gt;Persist docs to the MongoDB instance, send a message to the queue, and see the processor successfully retrieve the doc from MongoDB.&lt;/li&gt;
&lt;li&gt;Determine which data science package to use for keyword extraction

&lt;ul&gt;
&lt;li&gt;Implement the keyword extraction!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Stretch: setting up the rest of the API routes for CRUD operations would be good as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-you-building"&gt;
  &lt;/a&gt;
  What Are You Building?
&lt;/h2&gt;

&lt;p&gt;If you made it this far, thank you so much for reading!  I am hoping to release these either on a weekly or bi-weekly basis, so make sure to follow if you want to see the progress!&lt;/p&gt;

&lt;p&gt;I would love to hear about what you are building as well!  Is it a library, a program to solve a problem that has been nagging you, the next Google? Let me know in the comments!&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>design</category>
      <category>architecture</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Windows 11, but for Web</title>
      <author>Abdul Rehman</author>
      <pubDate>Tue, 09 Nov 2021 04:45:41 +0000</pubDate>
      <link>https://dev.to/abdulrrehman0/windows-11-but-for-web-2nh4</link>
      <guid>https://dev.to/abdulrrehman0/windows-11-but-for-web-2nh4</guid>
      <description>&lt;p&gt;Hey Devs,&lt;/p&gt;

&lt;p&gt;I just tried to make Windows-11 for the web.&lt;br&gt;
Made in HTML, CSS and JAVASCRIPT.![Image description]&lt;/p&gt;

&lt;p&gt;Live demo : &lt;a href="https://window-11.netlify.app/"&gt;https://window-11.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Start Menu&lt;br&gt;
Search Menu&lt;br&gt;
Widget Menu&lt;br&gt;
Context Menu&lt;br&gt;
Taskbar hidden apps menu&lt;br&gt;
File Explorer&lt;br&gt;
Taskbar&lt;br&gt;
Quick Settings&lt;br&gt;
Calendar&lt;br&gt;
Adjust Brightness&lt;br&gt;
Adjust Volume&lt;br&gt;
Adjust icons size&lt;br&gt;
Settings&lt;br&gt;
Refresh&lt;br&gt;
New features are adding continuously Day by Day &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By : Abdul Rehman&lt;/p&gt;

&lt;p&gt;About Me:&lt;br&gt;
I am 14 years old boy From Lahore, Pakistan. I belongs to a middle class family. I am interested in things related to computer and internet. I started my journey as a Web Developer From April, 2021 and start learning Html,CSS,Js from YouTube and created Windows 11 clone that is really awesome please Try once. I make Windows 11 on my PC(Which is too much slow) with 2gb ram and 32gb HDD.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Importance of double ampersand: logical AND(&amp;&amp;)in JavaScript</title>
      <author>Mohit Saud</author>
      <pubDate>Tue, 09 Nov 2021 04:36:20 +0000</pubDate>
      <link>https://dev.to/manutdmohit/importance-of-double-ampersand-logical-andin-javascript-31bf</link>
      <guid>https://dev.to/manutdmohit/importance-of-double-ampersand-logical-andin-javascript-31bf</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Saves time and code length.&lt;/li&gt;
&lt;li&gt;Gets rid of else statement.
Basic Example:
&amp;gt; if/else statement
let x= 2, y =5;
if(y&amp;gt;x){
console.log("y is greater than x");
return;
}&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Using logical AND (&amp;amp;&amp;amp;) as short-circuit property&lt;br&gt;
let x= 2, y =5;&lt;br&gt;
y&amp;gt;x &amp;amp;&amp;amp; console.log("y is greater than x");&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;The difference the Short-Circuit property makes that you are able to write the code in few lines and is considered as one of the important features of JavaScript and hence making the JavaScript so powerful. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Pull Requests need more cute animals</title>
      <author>Caleb Lemoine</author>
      <pubDate>Tue, 09 Nov 2021 04:14:43 +0000</pubDate>
      <link>https://dev.to/circa10a/pull-requests-need-more-cute-animals-3oi0</link>
      <guid>https://dev.to/circa10a/pull-requests-need-more-cute-animals-3oi0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;I created a new GitHub action called &lt;a href="https://github.com/circa10a/animal-action"&gt;animal-action&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a pull request is opened to a repository, it will comment with a cute picture of either a cat, dog, or fox!&lt;/p&gt;

&lt;p&gt;The types of animals and comment supplied are completely configurable.&lt;/p&gt;

&lt;p&gt;Current animals supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cats üêà&lt;/li&gt;
&lt;li&gt;dogs üêï&lt;/li&gt;
&lt;li&gt;foxes ü¶ä&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HENLbaoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/circa10a/animal-action/main/docs/img/example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HENLbaoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/circa10a/animal-action/main/docs/img/example.png" alt="alt text" width="880" height="639"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; Wacky Wildcards&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/circa10a"&gt;
        circa10a
      &lt;/a&gt; / &lt;a href="https://github.com/circa10a/animal-action"&gt;
        animal-action
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A github action to add smiles to pull requests
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
animal-action&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/circa10a/animal-action/workflows/release/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FoTSgUJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/circa10a/animal-action/workflows/release/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d9c534d5c602357d2e664552f67b66bcbae398cf72edf27f251cce00230cee27/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f63697263613130612f616e696d616c2d616374696f6e3f7374796c653d706c6173746963"&gt;&lt;img src="https://camo.githubusercontent.com/d9c534d5c602357d2e664552f67b66bcbae398cf72edf27f251cce00230cee27/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f63697263613130612f616e696d616c2d616374696f6e3f7374796c653d706c6173746963" alt="GitHub release (latest by date)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A github action to add smiles to pull requests&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/circa10a/animal-actiondocs/img/example.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZShl-8Sl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/circa10a/animal-actiondocs/img/example.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Inputs&lt;/h2&gt;
&lt;h2&gt;
&lt;code&gt;github_token&lt;/code&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Required&lt;/strong&gt; A GitHub token&lt;/p&gt;
&lt;h2&gt;
&lt;code&gt;animals&lt;/code&gt;
&lt;/h2&gt;
&lt;p&gt;A comma-delimated string of types of animals pictures to comment with.&lt;/p&gt;
&lt;p&gt;Default: &lt;code&gt;"cats,dogs,foxes"&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
&lt;code&gt;pull_request_comment&lt;/code&gt;
&lt;/h2&gt;
&lt;p&gt;Comment to post along with animal picture.&lt;/p&gt;
&lt;p&gt;Default:&lt;code&gt;"Thank you for your contribution. While we review, please enjoy this cute animal picture :cat:"&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
Outputs&lt;/h2&gt;
&lt;p&gt;None&lt;/p&gt;
&lt;h2&gt;
Example usage&lt;/h2&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;comment&lt;/span&gt;
&lt;span class="pl-ent"&gt;on&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;pull_request&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;types&lt;/span&gt;: &lt;span class="pl-s"&gt;[opened]&lt;/span&gt;
&lt;span class="pl-ent"&gt;jobs&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;comment&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;runs-on&lt;/span&gt;: &lt;span class="pl-s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="pl-ent"&gt;steps&lt;/span&gt;:
      - &lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;circa10a/animal-action@v1.0.0&lt;/span&gt;
        &lt;span class="pl-ent"&gt;with&lt;/span&gt;:
          &lt;span class="pl-ent"&gt;github_token&lt;/span&gt;: &lt;span class="pl-s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class="pl-ent"&gt;animals&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;cats,dogs&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; cats,dogs,foxes currently supported&lt;/span&gt;
          &lt;span class="pl-ent"&gt;pull_request_comment&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;üéâ Thank you for the contribution! Here&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-s"&gt;s a cute animal picture to say thank you!'&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/circa10a/animal-action"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;More smiles in Open Source is a definite win. üòÑ&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>javascript</category>
      <category>github</category>
    </item>
    <item>
      <title>useRef vs useState</title>
      <author>Saleh Mubashar</author>
      <pubDate>Tue, 09 Nov 2021 03:37:22 +0000</pubDate>
      <link>https://dev.to/salehmubashar/useref-vs-usestate-4m6l</link>
      <guid>https://dev.to/salehmubashar/useref-vs-usestate-4m6l</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HmuQprlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0xveau60t1ikyoz04mf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HmuQprlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0xveau60t1ikyoz04mf.jpg" alt="header" width="880" height="587"&gt;&lt;/a&gt;&lt;br&gt;
Hi guys!&lt;br&gt;
In this post we will be learning what the useRef and useState hooks are, their differences and when to use which.&lt;br&gt;
The code examples in this post will involve only functional components, however most of the differences and uses cover both class and functional components&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Complete Tutorial on useRef is uploaded at &lt;a href="https://discover.hubpages.com/technology/useRef"&gt;Hubpages&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#the-usestate-hook"&gt;
  &lt;/a&gt;
  The useState hook
&lt;/h2&gt;

&lt;p&gt;useState is a built in react hook that allows you to store information as states in a variable. It lets you add React states to functional components.&lt;br&gt;
In the example below, &lt;code&gt;useState()&lt;/code&gt; declares the state variable while the the value is stored in the count variable. &lt;code&gt;setCount&lt;/code&gt; is the function used to update this value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import useState from react&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Declare a new state variable called count&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-useref-hook"&gt;
  &lt;/a&gt;
  The useRef hook
&lt;/h2&gt;

&lt;p&gt;The useRef hook is a built-in React hook that takes one argument or parameter as its initial value and returns a reference or persisted mutable values. This reference, or ref for short, contains the value which can be retrieved using the current property.&lt;br&gt;
We can also store user inputs in refs and display the collected data like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import useRef hook&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//create a variable to store the reference &lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//prevent page from reloading on submit&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;//output the name&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input_group&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nameRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useref-vs-usestate"&gt;
  &lt;/a&gt;
  useRef vs useState
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Data or values stored in a reference or ref remains the same, even after component re-rendering, unlike states. So, &lt;strong&gt;References do not affect component rendering but states do.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;useState returns 2 properties or an array. One is the value or state and the other is the function to update the state. In contrast, useRef returns only one value which is the actual data stored.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the reference value is changed, it is updated without the need to refresh or re-render. However in useState, the component must render again to update the state or its value.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-refs-and-states"&gt;
  &lt;/a&gt;
  When to use Refs and States
&lt;/h2&gt;

&lt;p&gt;Refs are useful when getting user input, DOM element properties and storing constantly updating values.&lt;br&gt;
However if you are storing component related info or use methods in components states are the best option.&lt;/p&gt;




&lt;p&gt;Thanks for reading!. &lt;br&gt;
Note!: There probably is much more that could have been mentioned here but in short, these were the most important differences.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://discover.hubpages.com/technology/useRef"&gt;Complete Tutorial on useRef&lt;/a&gt; is uploaded at Hubpages&lt;br&gt;
and also follow me on &lt;a href="https://twitter.com/SyntaxE85827144"&gt;twitter&lt;/a&gt;.&lt;br&gt;
Cheers :)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>Static vs. Dynamic Websites: Which Is Better For SEO?</title>
      <author>SaaS.Group</author>
      <pubDate>Tue, 09 Nov 2021 03:12:11 +0000</pubDate>
      <link>https://dev.to/zoltan/static-vs-dynamic-websites-which-is-better-for-seo-35ha</link>
      <guid>https://dev.to/zoltan/static-vs-dynamic-websites-which-is-better-for-seo-35ha</guid>
      <description>&lt;p&gt;URLs and websites are primarily classified into two categories: static and dynamic. &lt;/p&gt;

&lt;p&gt;To the average internet user, the difference is not immediately obvious, but it‚Äôs nevertheless very important. &lt;/p&gt;

&lt;p&gt;Static and dynamic websites function differently and have a different user experience, causing designers and webmasters to debate the merits of the two different categories. &lt;/p&gt;

&lt;p&gt;Understanding the distinction between these two may be a little tricky. Since a dynamic website can have static elements and vice versa, the boundaries between the two are often blurred. &lt;/p&gt;

&lt;p&gt;How do you decide which of these websites is a better option from an SEO standpoint? &lt;/p&gt;

&lt;p&gt;We‚Äôll outline the features, advantages, and disadvantages of static vs dynamic websites, and decide which of these websites is best for &lt;a href="https://developers.google.com/search/docs/beginner/seo-starter-guide"&gt;SEO&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-difference-between-static-and-dynamic-websites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What‚Äôs the Difference Between Static and Dynamic Websites?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;One of the most significant differences between dynamic and static websites is how they render content. &lt;/p&gt;

&lt;p&gt;Dynamic sites use server-side languages to process requests. Once requested, dynamic websites subsequently generate a page and content in real-time. &lt;/p&gt;

&lt;p&gt;Static websites, on the other hand, contain &lt;a href="https://prerender.io/how-to-be-successful-with-dynamic-rendering-and-seo/"&gt;prerendered pages&lt;/a&gt; that are cached and delivered to the user. &lt;/p&gt;

&lt;p&gt;The difference wasn‚Äôt always so apparent. Early web pages were used to display a similar type of content to every user. As they grew more sophisticated, websites became integrated with databases and powered by languages like PHP, Ruby, Python, Java, and more. &lt;/p&gt;

&lt;p&gt;Using these coding languages enabled websites to be more dynamic, leading to dynamic web page displays. Dynamic websites display relevant content to the user based on the input and settings of each user. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-facebook-a-static-or-dynamic-website"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Is Facebook a Static or Dynamic Website?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Facebook is considered a dynamic website because the website responds to the user‚Äôs actions. &lt;/p&gt;

&lt;p&gt;When you are searching for someone‚Äôs profile, for example, you will type their name in the search bar and the results will be listed according to the name or keyword typed. &lt;/p&gt;

&lt;p&gt;Another example is the site‚Äôs videos: the user is allowed to play or pause videos, with the website responding to the user‚Äôs actions. Simply put, if you press the pause button, the video will be paused. This action is a clear indication that the website responds to the user‚Äôs command and is dynamic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-google"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What About Google?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Since dynamic websites are event-driven, Google is often cited as another example of a dynamic site. &lt;/p&gt;

&lt;p&gt;Dynamic websites are created with server-side languages, which in Google‚Äôs case produces relevant search results for a user. Google displays results depending on what the user has inputted. &lt;/p&gt;

&lt;p&gt;Even though Google is a dynamic website, it encourages site owners to incorporate static elements in their sites, in the form of Accelerated Mobile Pages (AMP). While Google is considered a dynamic website, it may still have some static elements. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-websites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Static Websites&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Every static website contains a series of HTML files, with each representing a physical static web page of the website. When you visit the home page, you are viewing the file of the homepage. Even when two pages have similar or identical content, the sections will exist as two separate versions. When a developer updates a specific section, the update needs to occur on both pages. Static websites are simple and almost all websites were static in the early days of the internet. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-a-static-website"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features of a Static Website&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Static websites usually have better &lt;a href="https://prerender.io/google-pagespeed-insights/"&gt;page speeds&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Since page speed has a massive impact on the user experience, static websites will render more quickly for a better user experience. &lt;/li&gt;
&lt;li&gt;A static website is secure and reliable. Since there are no plugins involved, it is considered cheaper and more scalable than dynamic websites.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-static-websites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Advantages of Static Websites&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The loading speed of a static website is faster. Since static websites have simple HTML code, the site is not generated every time a user clicks on something. This feature allows static sites to load static web pages faster than dynamic ones since the HTML code is always ready. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Static websites are considered more secure than their dynamic counterparts. You can use anything from FTPS or SSL to encrypt the data. Conversely, a webmaster will have to secure a dynamic website‚Äôs complete database. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Static websites are affordable and easy to maintain. If you use a static website, you will not need professional developers to work on your website around the clock. Any developer can build a static website and it will last for years. HTML code is easy to use and static websites can be developed relatively quickly. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-static-websites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Disadvantages of Static Websites&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The main problem with a static website is engagement and interactivity. You will not be able to add any special effects to your website unless you decide to add some &lt;a href="https://prerender.io/common-javascript-seo-problems/"&gt;Javascript&lt;/a&gt; or another dynamic element. Dynamic websites have a ‚Äúwow‚Äù factor that simple static websites lack. Users may find the static site to be unengaging, which can affect overall user preference for your site.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SEO is constantly evolving. It‚Äôs possible your static website isn‚Äôt &lt;a href="https://prerender.io/ajax-seo/"&gt;SEO-friendly&lt;/a&gt; or sees once-favorable &lt;a href="https://prerender.io/how-to-pass-core-web-vitals/"&gt;SEO factors&lt;/a&gt; drop in importance. A static website may therefore need frequent updates as SEO best practices change. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The functionality of a static website is limited. You will not be able to hyper-personalize the experience for your users or add functions like filtering data and instantly generated content.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-websites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Dynamic Websites&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;So, what is dynamic content? Every &lt;a href="https://www.spiralytics.com/blog/what-are-dynamic-websites/"&gt;dynamic website&lt;/a&gt; uses server technologies like PHP to develop a dynamic web page at the moment the page is visited by a user. The dynamic website is like a mosaic: the user sees the pieced-together dynamic web page as each element is rendered. &lt;/p&gt;

&lt;p&gt;Dynamic websites come with their own features, pros, and cons.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-a-dynamic-website"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features of a Dynamic Website&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CMS offers regular, hassle-free updates.&lt;/li&gt;
&lt;li&gt;CMS generates mobile-friendly pages automatically. &lt;/li&gt;
&lt;li&gt;Developing a mobile-friendly website is easy with a dynamic website. &lt;/li&gt;
&lt;li&gt;The content and functionality of the website are constantly optimized. &lt;/li&gt;
&lt;li&gt;The content is easier to control and edit. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-dynamic-websites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Advantages of Dynamic Websites&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Dynamic websites offer greater functionality and interactivity. These websites will give the webmaster a range of user-oriented development options. User interactions can be simplified and functions are easy to add to the website, allowing developers to create a spectacular, easy-to-navigate website. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you use CMS, SEO can be improved with a few clicks. SEO plugins can be used to enhance your SERP position and detections. CMS lets you make urgent changes as well. Since you will not have to work with a code and repository, changes are easy to make and implement. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These websites do not require any code. If you are using CMS, you can personalize your website without coding, which is ideal for people who do not know how to code but want to set up a website. Users can use templates and builders within the CMS to create a website for themselves. Changes or updates can be done with drag and drop tools. Web designers with limited technical skills can personalize a dynamic website relatively easily. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-dynamic-websites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Disadvantages of Dynamic Websites&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The most significant disadvantage of dynamic websites is security. Dynamic websites are not as secure as static ones, so they require several additional security measures. Databases, hosting, plugins, and CMS need to be protected. Website owners will have to constantly monitor the security of the website and its main components to provide a stable and secure experience to users. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamic websites require more resources and maintenance than static ones, so they are more expensive. Dynamic website development is also more expensive than static website building, especially if you want a spectacular website. The stable hosting and beautiful designs of dynamic websites cost more than those of static websites.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since dynamic websites have several components to process, dynamic web pages take longer to load. In other words, the page load speed isn‚Äôt as efficient as static websites, affecting the &lt;a href="https://prerender.io/nicer-user-experience/"&gt;user experience&lt;/a&gt;.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#verdict-which-is-better-for-seo-static-or-dynamic-websites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Verdict: Which is Better for SEO: Static or Dynamic Websites?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Both of these websites have their own advantages and disadvantages, so how do we resolve the debate between static vs. dynamic websites? &lt;/p&gt;

&lt;p&gt;The best website depends on your business requirements. Static websites have optimal loading speeds. Dynamic websites are more interactive. &lt;/p&gt;

&lt;p&gt;If you want an interactive web experience, a dynamic website will be a better option. If you‚Äôre looking for a cost-effective and secure website, static websites will be a better alternative. &lt;/p&gt;

&lt;p&gt;Before you make a decision, make sure to assess your business requirements and consult with a professional developer, who may even be able to design your website. There may even be room for a middle ground, where dynamic features are added to a static website or static elements are incorporated into a dynamic site.&lt;/p&gt;

&lt;p&gt;Prerender offers a JavaScript SEO solution that offers the faster pageload times of static pages with the interactivity of dynamic pages. &lt;a href="https://dashboard.prerender.io/signup"&gt;Sign up for a Prerender demo today&lt;/a&gt; to get the best of both worlds.&lt;/p&gt;

&lt;p&gt;This article originally appeared on &lt;a href="https://prerender.io/seo-for-static-vs-dynamic-webpages/"&gt;https://prerender.io/seo-for-static-vs-dynamic-webpages/&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Coded a Profile Card Template</title>
      <author>Tech Kaya</author>
      <pubDate>Tue, 09 Nov 2021 02:58:18 +0000</pubDate>
      <link>https://dev.to/techkaya/coded-a-profile-card-template-29mk</link>
      <guid>https://dev.to/techkaya/coded-a-profile-card-template-29mk</guid>
      <description>&lt;p&gt;This profile card was inspired by 2 things. There is a certain project called Profile Card Component on a website called &lt;a href="https://www.frontendmentor.io/"&gt;&lt;strong&gt;Frontendmentor.io&lt;/strong&gt;&lt;/a&gt;... this project featured a social media following profile card that had amount of followers and likes and etc.&lt;/p&gt;

&lt;p&gt;This profile card was inpsired and created with code and structure from a CodePen called Profile Card Design by a developer named Florin Pop. Florin has an &lt;a href="https://www.florin-pop.com/"&gt;&lt;strong&gt;amazing blog&lt;/strong&gt;&lt;/a&gt;, that I absolutely credit in inspiring this profile card I coded.&lt;/p&gt;

&lt;p&gt;The code from this project I made is merely a bunch of text edits, a few css colorway changes, and soon enough... more moving around of elements.&lt;/p&gt;

&lt;p&gt;For now, I will keep it like this, and make an updated post and version of this profile card, as these type of business card type websites are becoming more increasingly popular.&lt;/p&gt;

&lt;p&gt;Besides those facts, the process of coding a card like this would most likely need a few divs, the right element tags, css organization skills, and appropriate colors, fonts, text size, and images.&lt;/p&gt;

&lt;p&gt;I enjoyed coding this, and would like you to try making a copy of mine too!&lt;/p&gt;

&lt;p&gt;==&amp;gt; &lt;a href="https://codepen.io/techkayacodes/pen/MWvGdwa"&gt;Profile Card Template&lt;/a&gt; &amp;lt;==&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>React UseContext is Simple</title>
      <author>yqgoh</author>
      <pubDate>Tue, 09 Nov 2021 02:40:21 +0000</pubDate>
      <link>https://dev.to/kenji_goh/react-usecontext-is-simple-48fa</link>
      <guid>https://dev.to/kenji_goh/react-usecontext-is-simple-48fa</guid>
      <description>&lt;p&gt;In Parent component or App.js, we just need to create &amp;amp; export the context, literally by using the createContext hooks! Simply use these few lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contextToPassDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then wrap the context Provider over the child components you wish to provide the context&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;contextToPassDown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dataToPassDown&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/contextToPassDown.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in any Child components that are wrapped by the  tag, we just need to use the useContext hooks!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in ChildComponent.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;contextToPassDown&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contextToUse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextToPassDown&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;contextToUse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The use cases for useContext are usually:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To Pass down logged-in user info to authorized components&lt;/li&gt;
&lt;li&gt;For 'light' or 'dark' theme&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may practice using this link to: &lt;a href="https://codesandbox.io/s/usecontext-demo-solution-tujgu?file=/src/components/App.js"&gt;codesandbox&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>usecontext</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Electron Adventures: Episode 90: Dock Menu</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Tue, 09 Nov 2021 01:40:17 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-90-dock-menu-4jge</link>
      <guid>https://dev.to/taw/electron-adventures-episode-90-dock-menu-4jge</guid>
      <description>&lt;p&gt;Electron apps by default are basically web pages with minimal wrapper, but it's possible to extend them with a lot of OS-specific functionality.&lt;/p&gt;

&lt;p&gt;Let's add OSX Dock menu to our app.&lt;/p&gt;

&lt;p&gt;I'll also finally stop quitting the app when the last window is closed. I know pretty much every Electron tutorial does this out of the box for OSX, but this is absolutely NOT the right behavior for every app, and you should not mindlessly copy and paste that code. Most apps have just one window, and if you close that window, that's because your intention is to close the app. Only multi-document app on OSX should really reasonably stay running after their last window is closed.&lt;/p&gt;

&lt;p&gt;The only changes will be in &lt;code&gt;index.js&lt;/code&gt;, the rest of the app stays identical to what we had before.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#are-we-on-osx"&gt;
  &lt;/a&gt;
  Are we on OSX?
&lt;/h3&gt;

&lt;p&gt;The check is very simple, and we could inline in everywhere, but let's create a variable for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isOSX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;darwin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#start-the-app"&gt;
  &lt;/a&gt;
  Start the app
&lt;/h3&gt;

&lt;p&gt;We want to call &lt;code&gt;startApp()&lt;/code&gt; when the app is ready. Also when all windows are closed, if we're not on OSX, we still want to just quit the app - all this Dock menu logic will be OSX specific.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window-all-closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isOSX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startApp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup-dock-menu-and-reactivation-logic"&gt;
  &lt;/a&gt;
  Setup Dock Menu and reactivation logic
&lt;/h3&gt;

&lt;p&gt;Custom part of our Dock Menu is very simple and static, so we can just pass static data to &lt;code&gt;Menu.buildFromTemplate&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dockMenu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buildFromTemplate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Open files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;openFiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startApp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isOSX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dockMenu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;openFiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isOSX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllWindows&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;openFiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;startApp()&lt;/code&gt; has two pieces of OSX-specific logic. First, we create Dock menu only on OSX, as other systems don't have such concept.&lt;/p&gt;

&lt;p&gt;Second, we setup some logic to popup &lt;code&gt;openFiles()&lt;/code&gt; dialog if app is reactivated while it has no windows open. We only do this after initial &lt;code&gt;await openFiles()&lt;/code&gt; finishes, so we don't popup multiple &lt;code&gt;openFiles&lt;/code&gt; dialogs at once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#everything-else"&gt;
  &lt;/a&gt;
  Everything else:
&lt;/h3&gt;

&lt;p&gt;And everything else is just as before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Menu&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;electron-settings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`windowState-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;windowState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;768&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;windowState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;webPreferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/preload.js`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;saveSettings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;windowState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBounds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SAVING&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;windowState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;windowState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;saveSettings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;move&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;saveSettings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;close&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;saveSettings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`http://localhost:5000/?&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;openFiles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;canceled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filePaths&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showOpenDialog&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;openFile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;multiSelections&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;showHiddenFiles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CSV files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;csv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;All Files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Select a CSV file to open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;defaultPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/samples`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canceled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isOSX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;filePaths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing to note is that it's possible to open the same document multiple times. This is generally a good thing, as user might want to view different portions of the same document in multiple windows. However as our saved windows sizes and positions are keyed by document path, it is currently not deterministic which size and position will be restored if user closes it all and tries to reopen it later. Even in such cases, it's still reasonable behavior.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;Here's the Dock menu if a few windows are open:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I3d9t7qH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhunijs3tlkwa2o99spg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I3d9t7qH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhunijs3tlkwa2o99spg.png" alt="Episode 90 Screenshot" width="384" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next episode, we'll see if we can integrate native file drag and drop.&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/taw/electron-adventures/tree/master/episode-90-dock-menu"&gt;all the code for the episode is here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>electron</category>
      <category>javascript</category>
      <category>svelte</category>
      <category>osx</category>
    </item>
  </channel>
</rss>
