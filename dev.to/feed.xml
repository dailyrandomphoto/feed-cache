<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Testing Svelte components with Jest and Vite</title>
      <author>Rob OLeary</author>
      <pubDate>Thu, 18 Nov 2021 10:18:57 +0000</pubDate>
      <link>https://dev.to/robole/testing-svelte-components-with-jest-and-vite-219d</link>
      <guid>https://dev.to/robole/testing-svelte-components-with-jest-and-vite-219d</guid>
      <description>&lt;p&gt;I have seen very little written about testing Svelte components. I have yet to see a tutorial build &lt;em&gt;and&lt;/em&gt; test a Svelte app! This is disconcerting. Maybe, testing is not considered a sexy topic, or for hobby projects people like to walk on the wild side. I don't know. In any case, it is not a good idea for any project to skip it! "Practice as you intend to play" is my philosophy!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; hasn't anointed a set of testing tools or does not advocate for a particular testing strategy. It gives some &lt;a href="https://svelte.dev/faq#how-do-i-test-svelte-apps"&gt;basic advice&lt;/a&gt;. More established frameworks have recommendations and integrations specific to their CLI tooling - &lt;a href="https://reactjs.org/docs/testing.html"&gt;React recommends using Jest and React Testing Library&lt;/a&gt;, and &lt;a href="https://vuejs.org/v2/guide/testing.html"&gt;Vue recommends using Mocha or Jest with Vue Testing Library&lt;/a&gt;. In theory, you can use whatever JavaScript testing library you want for testing, because in the end you will be testing JavaScript code, regardless of whether it is transpiled or not. However, it can prove to be tricky to integrate different tools into a frontend toolchain for your "dev stack".&lt;/p&gt;

&lt;p&gt;Svelte has relied on &lt;a href="https://rollupjs.org/guide/en/"&gt;Rollup&lt;/a&gt; for as the central point for it's dev tooling so far, but recently &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; has been adopted by &lt;a href="https://kit.svelte.dev/"&gt;SvelteKit&lt;/a&gt;. Vite is among the next generation frontend tooling brigade. It provides a much faster dev environment, hence the name, vite means fast in French. It uses native ECMAScript Modules (ESM) to provide on-demand file serving, which means updates are instantly reflected without reloading the page or blowing away application state.&lt;/p&gt;

&lt;p&gt;While the new direction for Svelte appears to be set, the current state of affairs is that most testing frameworks are still "last generation"! They mostly use &lt;a href="https://en.wikipedia.org/wiki/CommonJS"&gt;commonJS modules&lt;/a&gt; and need to adjust to this new paradigm. You can see the issue &lt;a href="https://github.com/vitejs/vite/issues/1955"&gt;"feature: first class Jest integration"&lt;/a&gt; in the Vite GithHub repo to see some of the issues you can run into. In the meantime, you need to transpile your code and do some extra hacks and configuration to get everything to play nice. This is never fun!&lt;/p&gt;

&lt;p&gt;In this tutorial, I will go through using Svelte with Vite, and show you how to test your components with Jest. I will be using JavaScript, but I will mention the extra steps you need to take if you want to use TypeScript instead. I will also test a Todo app to show you what testing looks like on an actual app.&lt;/p&gt;

&lt;p&gt;Let's get to it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Here are the GithHub repositories for the code I cover in the article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starter template - &lt;a href="https://github.com/robole/svelte-vite-jest-template"&gt;https://github.com/robole/svelte-vite-jest-template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Todo app - &lt;a href="https://github.com/robole/svelte-todo-with-tests"&gt;https://github.com/robole/svelte-todo-with-tests&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#getting-started-from-a-template"&gt;
  &lt;/a&gt;
  Getting started from a template
&lt;/h3&gt;

&lt;p&gt;Let's create a Svelte project based on the Vite "svelte" template, and call it &lt;em&gt;example-svelte-app&lt;/em&gt;. For TypeScript, use the "svelte-ts" template instead.&lt;/p&gt;

&lt;p&gt;With NPM 7+, you must supply an extra set of double hypens :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init vite@latest example-svelte-app &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--template&lt;/span&gt; svelte
&lt;span class="nb"&gt;cd &lt;/span&gt;example-svelte-app
npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create vite example-svelte-app &lt;span class="nt"&gt;--template&lt;/span&gt; svelte
&lt;span class="nb"&gt;cd &lt;/span&gt;example-svelte-app
yarn &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With PNPM:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm create vite example-svelte-app &lt;span class="nt"&gt;--template&lt;/span&gt; svelte
&lt;span class="nb"&gt;cd &lt;/span&gt;example-svelte-app
pnpm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have a default project. It says "HELLO WORLD!" and has a &lt;code&gt;Counter&lt;/code&gt; component. We can run the project with &lt;code&gt;npm run dev&lt;/code&gt; and visit it at &lt;a href="https://dev.tolocalhost:3000"&gt;localhost:3000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yHlnZ9LX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wovvn6vfz6t6s8l4xwde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yHlnZ9LX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wovvn6vfz6t6s8l4xwde.png" alt="simple cover image of vs code logo" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;We need the following libraries to get set-up for testing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://www.npmjs.com/package/jest"&gt;Jest&lt;/a&gt;&lt;/em&gt; is the test runner that we will use. It also has some assertion and mocking functionality.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://www.npmjs.com/package/@babel/core"&gt;@babel/core&lt;/a&gt;&lt;/em&gt;, &lt;a href="https://www.npmjs.com/package/babel-jest"&gt;&lt;em&gt;babel-jest&lt;/em&gt;&lt;/a&gt;  and &lt;a href="https://www.npmjs.com/package/@babel/preset-env"&gt;&lt;em&gt;@babel/preset-env&lt;/em&gt;&lt;/a&gt; are required for the transpilation Jest requires. Jest uses commonJS by default, and we are using ECMAScript Modules (ESM) in our code, so we need to get them in the same form. The latest version of Jest  is &lt;a href="https://jestjs.io/docs/ecmascript-modules"&gt;v27.2&lt;/a&gt; and has &lt;em&gt;experimental&lt;/em&gt; support for ESM. I did not want to go down the experimental road! Hopefully, this will mature quickly and remove the need for Babel in the toolchain if you are using JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/svelte-jester"&gt;&lt;em&gt;svelte-jester&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/jest-transform-stub"&gt;&lt;em&gt;jest-transform-stub&lt;/em&gt;&lt;/a&gt;. Jest does not understand how to parse non-JavaScript files. We need to use  &lt;code&gt;svelte-jester&lt;/code&gt; to transform Svelte files, and &lt;code&gt;jest-transform-stub&lt;/code&gt; for importing non-JavaScript assets (images, CSS, etc).&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://www.npmjs.com/package/@testing-library/svelte"&gt;@testing-library/svelte&lt;/a&gt;&lt;/em&gt; (known as Svelte Testing Library) provides DOM query functions on top of Svelte in a way that encourages better testing practices. Some of the most commonly used functions are &lt;code&gt;render&lt;/code&gt;, &lt;code&gt;getByText&lt;/code&gt;, &lt;code&gt;getByLabelText&lt;/code&gt;, and &lt;code&gt;getByRole&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://www.npmjs.com/package/@testing-library/user-event"&gt;@testing-library/user-event&lt;/a&gt;&lt;/em&gt; is a companion library to Svelte Testing Library that provides more advanced simulation of browser interactions than the built-in &lt;a href="https://testing-library.com/docs/dom-testing-library/api-events#fireevent"&gt;&lt;code&gt;fireEvent&lt;/code&gt;&lt;/a&gt; function. An example of this is if you need to trigger an event for a mouse click while the &lt;code&gt;Ctrl&lt;/code&gt;  key is being pressed. &lt;u&gt;You may not need this, but it is worth knowing about it.&lt;/u&gt;
&lt;/li&gt;
&lt;li&gt;If you use &lt;a href="https://vitejs.dev/guide/env-and-mode.html"&gt;global environment variables&lt;/a&gt; or a &lt;code&gt;.env&lt;/code&gt; file in your code, you need to install &lt;a href="https://www.npmjs.com/package/babel-plugin-transform-vite-meta-env"&gt;babel-plugin-transform-vite-meta-env&lt;/a&gt; to transform these variables for the commonJS module. This is &lt;u&gt;not a permanent solution&lt;/u&gt; (famous last words, I know). You can &lt;a href="https://github.com/vitejs/vite/issues/1149"&gt;read this issue&lt;/a&gt; for more details on the hopes for better integration where this would not be necessary.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@testing-library/jest-dom"&gt;&lt;em&gt;@testing-library/jest-dom&lt;/em&gt;&lt;/a&gt; provides a set of custom jest matchers that you can use to extend jest. These can be used to make your tests more declarative. It has functions such as &lt;code&gt;toBeDisabled()&lt;/code&gt;, &lt;code&gt;toBeInTheDocument()&lt;/code&gt;, and &lt;code&gt;toBeVisible()&lt;/code&gt;. &lt;u&gt;This is optional too&lt;/u&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;u&gt;If you are using Typescript&lt;/u&gt;, you need to install &lt;a href="https://github.com/sveltejs/svelte-preprocess"&gt;&lt;em&gt;svelte-preprocess&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://github.com/kulshekhar/ts-jest"&gt;&lt;em&gt;ts-jest&lt;/em&gt;.&lt;/a&gt; also.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We need to install these libraries and do some configuration before we can get to our tests:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I will install the aforementioned libraries with NPM without the TypeScript dependencies:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; jest babel-jest @babel/preset-env svelte-jester jest-transform-stub @testing-library/svelte @testing-library/user-event babel-plugin-transform-vite-meta-env @testing-library/jest-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We need to configure Jest to transform our files. We must explicitly set our test environment to &lt;em&gt;jsdom&lt;/em&gt;, which we are using through Jest. Since v27 Jest's default test environment is &lt;em&gt;node&lt;/em&gt;. I will put the configuration in a specific Jest configuration file called &lt;em&gt;jest.config.json&lt;/em&gt; in the project root folder. If you create a configuration file called &lt;em&gt;jest.config.js&lt;/em&gt;, Vite will complain as it expects only ESM JavaScript by default. Vite will recommend that you rename it to a ".cjs" file if you want to do it that way. You can look at the &lt;a href="https://archive.jestjs.io/docs/en/next/configuration"&gt;different ways to configure Jest&lt;/a&gt; if you are unsure about the file conventions. If you're using TypeScript, you need to configure &lt;a href="https://github.com/sveltejs/svelte-preprocess"&gt;&lt;em&gt;svelte-preprocess&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://github.com/kulshekhar/ts-jest"&gt;&lt;em&gt;ts-jest&lt;/em&gt;&lt;/a&gt; also, see the &lt;a href="https://github.com/mihar-22/svelte-jester#typescript"&gt;&lt;em&gt;svelte-jester&lt;/em&gt;&lt;/a&gt; docs for how to do that.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"transform"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"^.+\\.js$"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel-jest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"^.+\\.svelte$"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-jester"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;".+\\.(css|styl|less|sass|scss|png|jpg|ttf|woff|woff2)$"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest-transform-stub"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"moduleFileExtensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"svelte"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"js"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"testEnvironment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jsdom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"setupFilesAfterEnv"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"@testing-library/jest-dom/extend-expect"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We configure Babel to use the current version of node. Include the &lt;a href="https://www.npmjs.com/package/babel-plugin-transform-vite-meta-env"&gt;babel-plugin-transform-vite-meta-env&lt;/a&gt; plugin if you are using environment variables. I will put the configuration in a &lt;em&gt;.babelrc&lt;/em&gt; file in the project root folder. If you are using TypeScript, you need to add a TypeScript preset also, see the &lt;a href="https://jestjs.io/docs/getting-started#using-typescript"&gt;Jest docs&lt;/a&gt; for the details.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;presets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;targets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}]],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plugins&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-plugin-transform-vite-meta-env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the scripts to run the tests in your &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest src"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"test:watch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run test -- --watch"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Let's see if our set-up is correct by running &lt;code&gt;npm run test&lt;/code&gt;. Since we don't have any tests yet, you should see following message in console.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜ npm run test&amp;gt; example-svelte-app@0.0.0 test
&amp;gt; jest src

No tests found, exiting with code 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Whew, that's a lot! I wasn't lying when I said that it can prove to be tricky to integrate different tools into a frontend toolchain! 😅&lt;/p&gt;

&lt;p&gt;If you are using SvelteKit, this should work also. I have not delved into SvelteKit yet, so I don't know if something slightly different is required. If there is, let me know!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-unit-test"&gt;
  &lt;/a&gt;
  Your first unit test
&lt;/h3&gt;

&lt;p&gt;Now, lets create a test module for our &lt;em&gt;App.svelte&lt;/em&gt; component called  &lt;em&gt;App.spec.js&lt;/em&gt; in the same folder. By default Jest looks for filenames that end with either ".spec.js" or ".test.js".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;says 'hello world!'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to import the component, and the functions we use from the Svelte Testing Library.&lt;/p&gt;

&lt;p&gt;We pass our component to the &lt;code&gt;render&lt;/code&gt; function to setup our component. Svelte Testing Library creates a &lt;code&gt;screen&lt;/code&gt; object for us that is bound to &lt;code&gt;document.body&lt;/code&gt; of the virtual document. We can use this to run some of the builtin DOM query functions against.&lt;/p&gt;

&lt;p&gt;Here, we use the &lt;code&gt;queryByText&lt;/code&gt; function to look for an element with that text content. It will return a node object if it finds an element with that text. It will return &lt;code&gt;null&lt;/code&gt; if no elements match.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For details on the query functions , see the &lt;a href="https://testing-library.com/docs/dom-testing-library/api-queries"&gt;DOM Testing Library’s “Queries” documentation&lt;/a&gt;. Some of the most commonly used query functions are &lt;code&gt;getByText&lt;/code&gt; and &lt;code&gt;getByLabelText&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we use some of Jest's &lt;a href="https://jestjs.io/docs/expect"&gt;expect matchers&lt;/a&gt; to check that the node is not null.&lt;/p&gt;

&lt;p&gt;Alternatively, you can use &lt;code&gt;expect(node).toBeInDocument()&lt;/code&gt; from &lt;em&gt;@testing-library/jest-dom&lt;/em&gt;. This is a bit easier to read I guess(?), so we will use this from now on.&lt;/p&gt;

&lt;p&gt;When we run the test, we get the folllowing output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ➜ npm run test 

&amp;gt; example-svelte-app@0.0.0 test&amp;gt; jest src

PASS  src/App.spec.js  
   ✓ says 'hello world!' (33 ms)

Test Suites: 1 passed, 1 totalTests:       
1 passed, 1 totalSnapshots:   0 total
Time:        1.711 s
Ran all test suites matching /src/i.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You don't need to destroy the component after each test, this is &lt;a href="https://testing-library.com/docs/svelte-testing-library/api#cleanup"&gt;done automagically for you&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Typically, you would explicitly create a test suite for each component with the function &lt;code&gt;describe(name, fn)&lt;/code&gt;. We wrap our tests in a function and pass it as the second argument. It usually look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;says 'hello world!'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see that some people use the &lt;code&gt;it()&lt;/code&gt; function instead of &lt;code&gt;test()&lt;/code&gt; also. It's the &lt;a href="https://stackoverflow.com/questions/45778192/what-is-the-difference-between-it-and-test-in-jest"&gt;same thing&lt;/a&gt;, just a different style. The &lt;code&gt;it&lt;/code&gt; function is influenced by &lt;a href="https://en.wikipedia.org/wiki/RSpec"&gt;rspec&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-events"&gt;
  &lt;/a&gt;
  Testing events
&lt;/h3&gt;

&lt;p&gt;Lets test our &lt;code&gt;Counter&lt;/code&gt; component by creating a &lt;em&gt;Counter.spec.js&lt;/em&gt; file in the same folder (lib).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{increment}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Clicks: {count}
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever the button is pressed, it increments a &lt;code&gt;count&lt;/code&gt; variable that is displayed in the button label.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_8xM3mM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4afw9osfnxqzsgds12jw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_8xM3mM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4afw9osfnxqzsgds12jw.png" alt="counter component" width="323" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will create a similar test to our first test for the &lt;code&gt;App&lt;/code&gt;. We just want to check that the button is rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Counter.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;it has a button with the text 'Clicks: 0'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clicks: 0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we want to check the action will increment the count. This is where we reach for the &lt;a href="https://testing-library.com/docs/dom-testing-library/api-events#fireevent"&gt;&lt;code&gt;fireEvent&lt;/code&gt;&lt;/a&gt; function. There is a convenient form of the function &lt;code&gt;fireEvent[eventName](node: HTMLElement, eventProperties: Object)&lt;/code&gt; where we can provide the event name as a suffix. So,  we can write &lt;code&gt;fireEvent.click(screen.getByText("Clicks: 0")&lt;/code&gt;. Because this is an asynchronous event, we need to use the &lt;code&gt;await&lt;/code&gt; syntax and make our test function &lt;code&gt;async&lt;/code&gt;. The test function looks this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;it should increment the count by 1 when it the button is pressed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clicks: 0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clicks: 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use the &lt;a href="https://testing-library.com/docs/ecosystem-user-event/"&gt;user-event library&lt;/a&gt; instead, but &lt;strong&gt;be aware that all events are treated as async in Svelte testing&lt;/strong&gt;. For other frameworks, they are probably synchronous. This is unique to the Svelte because the library must wait for the next &lt;code&gt;tick&lt;/code&gt; so that Svelte flushes all pending state changes.&lt;/p&gt;

&lt;p&gt;We can check the test coverage of our app now by running &lt;code&gt;npx jest --coverage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Al4bNxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugsbmx3jo1rlnz2x7e75.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Al4bNxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugsbmx3jo1rlnz2x7e75.png" alt="counter component" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we're at 100% coverage. Yay!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unit-tests-for-a-todo-app"&gt;
  &lt;/a&gt;
  Unit tests for a Todo app
&lt;/h2&gt;

&lt;p&gt;While we're at it, let's test a more complete app. This is where we can really see what testing is like. Let's look at a minimal Todo app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K7Wehk-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh0yntjw8z5mk2ajsxbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K7Wehk-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh0yntjw8z5mk2ajsxbn.png" alt="todo app screenshot" width="556" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;p&gt;The app should do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;List todos. When there are no items, the message "Congratulations, all done!" should be shown.&lt;/li&gt;
&lt;li&gt;Allow a user to mark/unmark todos as done. When a todo is done, it is styled differently. The text color is gray and has a strike-through decoration.&lt;/li&gt;
&lt;li&gt;Allow a user to add new todos, but prohibit the addition of an empty todo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will write our tests on these requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-overview"&gt;
  &lt;/a&gt;
  Component overview
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqwzurSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1s40pgvt7ui4ulshv7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqwzurSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1s40pgvt7ui4ulshv7a.png" alt="todo components figure" width="768" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;App&lt;/code&gt; component contains the other components. It has a subheading that shows the status of the todos e.g "1 of 3 remaining ". It passes an array of todos to &lt;code&gt;TodoList&lt;/code&gt;. We hardcode 3 todos in our app , as per screenshot above.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;AddTodo&lt;/code&gt; component contains the form with an text input and button to add new todos to our list.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;TodoList&lt;/code&gt; component is an unordered list of the todos. It has a &lt;code&gt;todos&lt;/code&gt; prop that is an array of todo objects. Each list item contains a &lt;code&gt;Todo&lt;/code&gt; component.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Todo&lt;/code&gt; component shows the text of the todo and has a checkbox for marking the item as done. It has a &lt;code&gt;todo&lt;/code&gt; prop that is a todo object.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The child components dispatch events up to the &lt;code&gt;App&lt;/code&gt; when there are data changes from user interaction. For example, &lt;code&gt;Todo&lt;/code&gt; dispatches a &lt;code&gt;toggleTodo&lt;/code&gt; event whenever it's checkbox is clicked, this event is forwarded by &lt;code&gt;TodoList&lt;/code&gt; to &lt;code&gt;App&lt;/code&gt; to handle this event.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h3&gt;

&lt;p&gt;I will highlight a couple of the unique aspects of the tests to demonstrate some of the methods for using Jest.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#testing-with-props-and-classes-raw-todospecjs-endraw-"&gt;
  &lt;/a&gt;
  Testing with props and classes (&lt;code&gt;Todo.spec.js&lt;/code&gt;)
&lt;/h4&gt;

&lt;p&gt;This is an example of passing props to components when we are testing. We pass them through an object we provide as the second argument to the &lt;code&gt;render&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoDone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;buy milk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoNotDone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;do laundry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shows the todo text when rendered&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todoDone&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//checkbox&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoDone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;//etc..&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this test case, we want to get the checkbox for the todo. It has a lable of "Done", so we can get it through the function &lt;code&gt;getByLabelText()&lt;/code&gt;. The checkbox has an &lt;code&gt;aria-label&lt;/code&gt; attribute rather than a corresponding &lt;code&gt;label&lt;/code&gt; element, it does not matter which it is. I like to favour using this function as it is a a good reminder to ensure that every input should have a label to keep things accessible for everyone.&lt;/p&gt;

&lt;p&gt;Next, we want to test when a Todo item is marked as done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a done class should be added to the text item when a todo is done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todoDone&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoDone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toHaveClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the checkbox is checked, a &lt;code&gt;done&lt;/code&gt; class is added to the &lt;code&gt;span&lt;/code&gt; element that has the todo text. We can use the &lt;code&gt;toHaveClass()&lt;/code&gt; function to check that this class is added correctly for done todos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-text-entry-raw-addtodospecjs-endraw-"&gt;
  &lt;/a&gt;
  Testing text entry (&lt;code&gt;AddTodo.spec.js&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;To simulate a user entering text into the textbox, we use the &lt;code&gt;type&lt;/code&gt; function from the &lt;em&gt;@testing-library/user-event&lt;/em&gt; library. In this case, the button is only enabled when text is entered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;userEvent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/user-event&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AddTodo.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AddTodo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// other stuff&lt;/span&gt;

   &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;the add button should be enabled when text is entered&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AddTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeEnabled&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#testing-data-mutation-raw-appspecjs-endraw-"&gt;
  &lt;/a&gt;
  Testing data mutation (&lt;code&gt;App.spec.js&lt;/code&gt;)
&lt;/h4&gt;

&lt;p&gt;You may have expected the adding of a new todo to be tested in &lt;code&gt;AddTo.spec.js&lt;/code&gt;. However, since the &lt;code&gt;AddTodo&lt;/code&gt; component doesn't result in a DOM change, rather it fires an &lt;code&gt;AddNew&lt;/code&gt; event, there is no way for us to test it through DOM query methods. The action is delegated to the &lt;code&gt;App&lt;/code&gt; component, so this is where we will test it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PREDEFINED_TODOS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// other stuff&lt;/span&gt;

  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should add a todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buy milk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoListItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listitem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoListItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PREDEFINED_TODOS&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this test case, we must simulate inserting some text to the textbox, and then hitting the "Add" button. I use &lt;code&gt;fireEvent.input&lt;/code&gt; to pass the text to the textbox to its &lt;code&gt;value&lt;/code&gt; property. This function is similar to &lt;code&gt;userEvent.type&lt;/code&gt; that I used in the previous example. I use it here to show you both ways, use whichever you prefer. Don't forget that these actions are asynchronous, so always use &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For our test assertion, we want to check that the text for our new todo is now added to the document. This should be familiar by now - &lt;code&gt;expect(screen.getByText(value)).toBeInTheDocument();&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can be doubly sure of the success of our action by checking the number of todos in the page. Because the todo items are added to the only list in the page, we can check the number of todos by getting elements that match the accessibility role of &lt;code&gt;listitem&lt;/code&gt; through &lt;code&gt;screen.getAllByRole("listitem")&lt;/code&gt;. We can then get the length of the returned array to check how many items there are.&lt;/p&gt;

&lt;p&gt;In more complicated apps, you may need not be able to find the elements you are after by searching by text, label or role. If there is no way around it, you can reach for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"&gt;&lt;code&gt;querySelector()&lt;/code&gt;&lt;/a&gt; on the document body like you would in vanilla JavaScript on a regular webpage. Just try to avoid using this 'escape hatch' if possible.&lt;/p&gt;

&lt;p&gt;Some people may choose to defer some of the testing of the &lt;code&gt;App&lt;/code&gt; component to end-to-end testing. It depends on who you are working with, and how the project is organized to decide who tests what, and where.&lt;/p&gt;




&lt;p&gt;And that's the bits that I think stand out the most, you can read through the tests yourself to get a more complete grasp.&lt;/p&gt;

&lt;p&gt;The test coverage is 98%.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i94VBoLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4wq0pgerpjlp9yvoivl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i94VBoLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4wq0pgerpjlp9yvoivl.png" alt="counter component" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One important thing that I did not cover in my app is &lt;a href="https://www.martinfowler.com/bliki/TestDouble.html"&gt;Test Doubles&lt;/a&gt;. Even though it is quite a small app, I wrote what are called &lt;a href="https://www.martinfowler.com/bliki/UnitTest.html#SolitaryOrSociable"&gt;&lt;em&gt;social tests&lt;/em&gt;&lt;/a&gt;. The alternate approach is &lt;em&gt;solitary tests&lt;/em&gt;. For solitary tests, you need to mock components, you are trying to isolate a component and only the test the functionality of that "unit".&lt;/p&gt;

&lt;p&gt;In both approaches, you may need to mock some functions that rely on third-party libraries or native browser APIs. One common example is mocking calls to backend services through &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://axios-http.com/"&gt;&lt;code&gt;axios&lt;/code&gt;&lt;/a&gt;. I didn't use a backend service in my app, so I did not need to mock anything. This is something that I may pick up in another article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It is messy to get Jest set-up with Svelte and Vite. The template I have provided here will allow you start testing your Svelte components out of the gates. While you can get quite far without issues, using ESM in your frontend code and dev tools, but using a testing library that uses CommonJS, will inevitably create more work for you. Whether Jest will make this simpler with its ESM support has yet to be seen.&lt;/p&gt;

&lt;p&gt;I will be looking at some other options to see if there is unit testing library that requires less configuration and integrates with Vite and Svelte in a more seamless way.&lt;/p&gt;

&lt;p&gt;I encourage you to test your Svelte apps and make testing a core part of your development process. I hope I have shown that it is easier than you may think! The confidence that you will get from testing is invaluable to make more reliable and resilient apps. Don't treat it as an optional task for your own sake!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>svelte</category>
      <category>testing</category>
    </item>
    <item>
      <title>Fix the Bug on Telescope</title>
      <author>Minsu Kim</author>
      <pubDate>Thu, 18 Nov 2021 10:14:58 +0000</pubDate>
      <link>https://dev.to/mkim219/fix-the-bug-on-telescope-2d4i</link>
      <guid>https://dev.to/mkim219/fix-the-bug-on-telescope-2d4i</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/Seneca-CDOT/telescope"&gt;Telescope&lt;/a&gt; is the open source project that maintains by Seneca College. The Telescope is an open source web servce and client application gathers all blog posts from variety of platforms such as WordPress, Medium, Dev Community, and many others and presenting as timeline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bgyBviAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndd98as6up51noyx51uk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgyBviAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndd98as6up51noyx51uk.png" alt="before-fix" width="880" height="943"&gt;&lt;/a&gt;&lt;br&gt;
 The &lt;a href="https://github.com/Seneca-CDOT/telescope/issues/2479"&gt;issue&lt;/a&gt; is one of blog post contain many lines of &lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;p&amp;gt;&lt;/code&gt; at the end of blog post. This numerous of line break tag that wrap with paragraph tag interrupt view other blog posts.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fix"&gt;
  &lt;/a&gt;
  Fix
&lt;/h3&gt;

&lt;p&gt;The issue is very simple to fix. In the&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;remove-empty-paragraphs.js
const cleanWhiteSpace = require('clean-whitespace');

module.exports = function (dom) {
  if (!(dom &amp;amp;&amp;amp; dom.window &amp;amp;&amp;amp; dom.window.document)) {
    return;
  }

  dom.window.document.querySelectorAll('p').forEach((p) =&amp;gt; {
    p.innerHTML = cleanWhiteSpace(p.innerHTML);
    const paragraphInnerHTML = p.innerHTML;
    if(!paragraphInnerHTML.replace(/&amp;amp;nbsp;/gm,'').trim()) {
      p.remove();
    }
  });
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The logic already has been made for the &lt;code&gt;&amp;amp;nbsp&lt;/code&gt; non-breaking space. Therefore simply add one more condition &lt;code&gt;|| paragraphInnerHTML.trim() === '&amp;lt;br&amp;gt;'&lt;/code&gt; that catch if the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; contains only &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tag for remove the &lt;/p&gt;
&lt;p&gt; tag. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenge"&gt;
  &lt;/a&gt;
  challenge
&lt;/h3&gt;

&lt;p&gt;The issue supposed to be easily resolved. However there is two things that I have faced the challenge. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;remove-empty-paragraph.js&lt;/code&gt; is never called&lt;/li&gt;
&lt;li&gt;Since (1) challenge exists, I do not know my logic is correct. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The reason that &lt;code&gt;remove-empty-paragraph.js&lt;/code&gt; is not called is actually function never get called. I think the empty &lt;code&gt;&amp;amp;nbsp&lt;/code&gt; treats as edge case so I think the code was missing. Therefore I have create the code for invoking the function&lt;br&gt;
The second challenge has been resolved with the advice from David who is instructor of this course. His advice is create unit test case for testing my logic is whether pass or fail. Therefore I have created&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test('should remove &amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt; (line break)', () =&amp;gt; {
    const htmlData = toDom('&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;');
    removeEmptyParagraphs(htmlData);
    const expectedHtml = '&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;';
    expect(htmlData.window.document.body.innerHTML).toEqual(expectedHtml);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output is pass! My logic is correct but I do not see the any change on the Telescope running in local. I have no idea why my change does not reflect to the Telescope. So I have asked this issue to our Telescope Slack channel. Thankfully Josue and Duc Bui Manh helped to resolve this issue. They suggested me to delete old &lt;code&gt;redis-data&lt;/code&gt; and re-run the application that also update database to fetch the blog posts. It takes while the &lt;code&gt;elasticSearch&lt;/code&gt; crawls the all the blog posts but finally I have the expected result. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FRXM6FMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6ktwt0gjdj4ae8rst8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FRXM6FMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6ktwt0gjdj4ae8rst8k.png" alt="after-fix" width="880" height="706"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;During the time in Hacktoberfest, I have contributed 4 small projects. It is such a good experience to contribute to large open source project Telescope. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link"&gt;
  &lt;/a&gt;
  Link
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2481"&gt;PR&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>telescope</category>
    </item>
    <item>
      <title>Introduction to Custom Angular Schematics</title>
      <author>Tarun Gurang</author>
      <pubDate>Thu, 18 Nov 2021 10:06:19 +0000</pubDate>
      <link>https://dev.to/tarungurang/introduction-to-custom-angular-schematics-1cn7</link>
      <guid>https://dev.to/tarungurang/introduction-to-custom-angular-schematics-1cn7</guid>
      <description>&lt;p&gt;Schematics are very useful. They provide us to achieve more in a shorter amount of time. But most significantly used, we can think less about routine stuff which leaves our limited attention span to focus on solving real changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h2&gt;

&lt;p&gt;Ensure that you have the following packages installed at a global level on your computer. Note that in a real-life development context, you should have some of these local to your project. But for the having well been stable development environment we will install them globally.&lt;/p&gt;

&lt;p&gt;node v12.8.0 npm v.6.10.2 @angular-cli (core y cli) v.10 @schematics/angular @schematics/&lt;a href="mailto:schematics@0.1000.5"&gt;schematics@0.1000.5&lt;/a&gt;&lt;br&gt;
Before getting a start, we need to install @angular-devkit/schematics-cli package to allow us to use the schematics command in our terminal. This command is quite similar to the well-known ng generate but the main benefit is that we can run it anywhere because it is totally independent from the Angular CLI.&lt;/p&gt;

&lt;p&gt;This allows us to use the schematics command and specifically the blank schematics to generate a new schematics project where we can start implementing our custom schematics.&lt;/p&gt;

&lt;p&gt;Go to the folder where you want to place your schematics to be at and type in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ schematics blank --name=indepth-dev-schematic

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can already understand, we are basically invoking the schematics function to generate a blank schematic, and we are passing the name of the collection as an option.&lt;/p&gt;

&lt;p&gt;If we inspect the generated folder, we can verify it is an npm package, featuring a package.json with needed dependencies, and the node_modules folder.&lt;/p&gt;

&lt;p&gt;We will also find a tsconfig.json file and scr folder.&lt;/p&gt;

&lt;p&gt;Let we focus on the contents of the src folder&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;+ src&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;collection.json&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;+ indepth-dev-schematic&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Index.ts&lt;/li&gt;
&lt;li&gt;Index_spec.ts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This file read once by the schematic-cli and the angular-schematic tool, at the time of the running schematics&lt;/p&gt;

&lt;p&gt;Any successive schematics in the same package require to be added to the collection&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';
// We don't have to export the function by default. we can also have per file more than one rule factory
export function indepthDevSchematic(_options: any): Rule {
  return (tree: Tree, _context: SchematicContext) =&amp;gt; {
    return tree;
  };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, the function is named camelcase form of the schematic name. This function holds options as arguments and returns a Rule. The Rule is a function that holds the tree and the context and returns another tree.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/setting-up-angular-in-the-system"&gt;Setting Up Angular In The System&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most useful things to remember over the entry file index.ts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It can feature a rule factory for certain&lt;/li&gt;
&lt;li&gt;You do not require to export the function as default&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In theory, we could earlier run this schematic through the schematics cli but it will definitely give null output but a console message that ' Nothing to be done'. So, let us make it more interesting and use the create method to create a readme file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';
// We do not have to export the function as default. You can also have per file more than one rule factory
export function indepthDevSchematic(_options: any): Rule {
  return (tree: Tree, _context: SchematicContext) =&amp;gt; {
    tree.create('readme.md', '#Mentioned is the Read Me file');
    return tree;
  };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#execute-custom-schematics-with-the-schematiccli"&gt;
  &lt;/a&gt;
  Execute custom schematics with the schematic-cli
&lt;/h3&gt;

&lt;p&gt;Now let us head back to the terminal and prompt the schematic execution. We must be inside the schematic folder, at the root level.&lt;/p&gt;

&lt;p&gt;Before we can execute it, we require to build our package to trans pile the typescript to JavaScript and compile it. Now we can run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ schematics .:indepth-dev-schematic

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we are at the root level, we do not require to pass the name of the collection. So, it is followed by a colon: and the name of the schematic, in this case, 'indepth-dev-schematic'. In the future, we will add an alias to the schematic to evoke it with a shorter or more user-friendly name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schematic-didnt-generate-anything"&gt;
  &lt;/a&gt;
  Schematic didn’t generate anything
&lt;/h3&gt;

&lt;p&gt;Do not distress. This is the desired behavior after schematics run in debug mode, by default. So, if we want to ensure that the schematics update the file system, you require to run them with the –dry-run=false flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ schematics.: indepth-dev-schematic --dry-run=false

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we should see the readme.md file in your file system.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#passing-options-as-arguments-from-the-cli"&gt;
  &lt;/a&gt;
  Passing options as arguments from the CLI
&lt;/h4&gt;

&lt;p&gt;Now we have just hardcoded the values for the file path or name, and the content string. Let us see how to pass it from the CLI to reach a more dynamic output.&lt;/p&gt;

&lt;p&gt;In order to do that, let us Modify the RuleFactory like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';
import { join } from 'path';
import { capitalize } from '@angular-devkit/core/src/utils/strings';
// We do not have to export the function as default. We can also have per file more than one rule factory
export function indepthDevSchematic(_options: any): Rule {
  return (tree: Tree, _context: SchematicContext) =&amp;gt; {
    const fullname: string  = _options.fullname;
    const content: string = _options.content;
    const extension: string = _options.extension || '.md';
    tree.create(join(fullname, extension), capitalize(content));
    return tree;
  };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#let-us-create-a-model-now-so-that-we-can-get-rid-of-any"&gt;
  &lt;/a&gt;
  Let us create a model now so that we can get rid of ‘any’
&lt;/h4&gt;

&lt;p&gt;Whenever we generate a blank schematic, options are declared as type any. That is because of the generator has no idea that what will be required. We need to solve that by creating a schema model.&lt;/p&gt;

&lt;p&gt;Create a file named with schema.ts at the same level of your index.ts and update it like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface Schema {
    fullname:string;
    content:string;
    extension?:string;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can add the schema type to the option like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';
import { join } from 'path';
import { capitalize } from '@angular-devkit/core/src/utils/strings';
import { Schema } from './app/schema';
// We do not have to export the function as default. We can also have per file more than one rule factory
export function indepthDevSchematic(_options: Schema): Rule {
  return (tree: Tree, _context: SchematicContext) =&amp;gt; {
    const fullname: string  = _options.fullname;
    const content: string = _options.content;
    const extension: string = _options.extension || '.md';
    tree.create(join(fullname, extension), capitalize(content));
    return tree;
  };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#including-a-validation-schema-to-our-schematic"&gt;
  &lt;/a&gt;
  Including a validation schema to our schematic
&lt;/h5&gt;

&lt;p&gt;We can include a validation schema to our schematic by creating a schema.json file at the same level as our entry file. This will serve us to specify defaults for our options, flag them as we needed. Ensure that we are passing the right types and even issuing prompts.&lt;/p&gt;

&lt;p&gt;Include the following content to schema.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "$schema": "http://json-schema.org/schema",
    "id": "indepth-dev-schematics",
    "title": "Demo of Schematics",
    "type": "object",
    "properties": {
      "fullname": {
        "description": "File name, also same to its path",
        "type": "string",
        "$default": {
          "$source": "argv",
          "index": 0
        }
      },
      "content": {
        "description": "content of something for that file",
        "type": "string",
        "$default": {
          "$source": "argv",
          "index": 1
        }
      },
      "extension": {
        "description": "An extension for that file and markdown is to defaults",
        "type": "string",
        "default": ".md"
      }
    },
    "required": [
      "name", "content"
    ]
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This schema defines three options as per properties of schema option with id indepth-dev-schematic.fullname and content are argument vectors, at index 0 and 1, by defaults. They are also needed. The third value is the extension and it is not compulsory as user input. It also has it's the default value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking to &lt;a href="https://www.ifourtechnolab.com/hire-angular-js-developer"&gt;hire Angular Developer&lt;/a&gt;? Your Search ends here.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The schema.json will only implement when referenced from the collection. So, head toward the collection and modify it like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "$schema": "../node_modules/@angular-devkit/schematics/collection-schema.json",
    "schematics": {
      "indepth-dev-schematic": {
        "description": "A Demo of the blank schematic.",
        "factory": "./indepth-dev-schematic/index#indepthDevSchematic",
        "schema": "./indepth-dev-schematic/schema.json"
      }
    }
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#input-prompts-for-the-custom-schematics"&gt;
  &lt;/a&gt;
  Input prompts for the custom schematics
&lt;/h5&gt;

&lt;p&gt;Another most important use of the schema is to create prompts to communicate with the user through the CLI. These prompts ensure a better user experience so developers do not have to read tons of documents to realize what input the schematic requirements, in order to run.&lt;/p&gt;

&lt;p&gt;There are three types of Prompts which are textual input, either string or number, decision, or yes or no/true or false, and list featuring an enum with subtypes.&lt;/p&gt;

&lt;p&gt;Let us update the schema.json to include prompts for the needed options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "$schema": "http://json-schema.org/schema",
    "id": "indepth-dev-schematics",
    "title": "Demo of Schematics",
    "type": "object",
    "properties": {
      "fullname": {
        "description": "File name, also same to its path",
        "type": "string",
        "x-prompt": "What is your file name? (matches path)"
      },
      "content": {
        "description": "content of something for that file",
        "type": "string",
        "x-prompt": "Please Enter some content for your file"
      },
      "extension": {
        "description": "An extension for that file and markdown is to defaults",
        "type": "string",
        "default": ".md"
      }
    },
    "required": [
      "name", "content"
    ]
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#aliases-for-custom-schematics"&gt;
  &lt;/a&gt;
  Aliases for custom schematics
&lt;/h5&gt;

&lt;p&gt;Before building and run the schematic once again we might maximize it a little bit more by determining a shorter alias, before generating with.: indept-dev-schematic is a bit long error inclined.&lt;/p&gt;

&lt;p&gt;To give an alias for it let we go to the collection.json again and modify it like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "$schema": "../node_modules/@angular-devkit/schematics/collection-schema.json",
    "schematics": {
      "indepth-dev-schematic": {
        "description": "A Demo of the blank schematic.",
        "factory": "./indepth-dev-schematic/index#indepthDevSchematic",
        "schema": "./indepth-dev-schematic/schema.json",
        "aliases": ["dive"]
      }
    }
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should notice that aliases take an array of strings, so we can define multiple aliases for our schematic.&lt;/p&gt;

&lt;p&gt;Now we can execute it from the CLI with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ schematics .:dive

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should prompt us to pass a full name and content as options. It will realize the default for an extension is .md&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#generating-the-schematic-from-an-angular-app"&gt;
  &lt;/a&gt;
  Generating the schematic from an Angular app
&lt;/h5&gt;

&lt;p&gt;Unless now, we are running the schematic from the schematics-cli. But that is no fun. We need to run it in an Angular app.&lt;/p&gt;

&lt;p&gt;Let us start by linking the package to our current node version executing the following command at the root of our package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm link

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then generate a new angular app with the Angular CLI and when it gets completed, run the following in the app root folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm link indepth-dev-schematic

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a symlink to the schematic package so we can execute it Before we run it, let we modify the entry file a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Rule,SchematicsException,SchematicContext, Tree } from '@angular-devkit/schematics';
import { join } from 'path';
import { capitalize } from '@angular-devkit/core/src/utils/strings';
import { Schema } from './app/schema';
// We do not have to export the function as default. We can also have per file more than one rule factory
export function indepthDevSchematic(_options: Schema): Rule {
  return (tree: Tree, _context: SchematicContext) =&amp;gt; {
    const fullname: string  = _options.fullname;
    const content: string = _options.content;
    const extension: string = _options.extension || '.md';
    const path = join(name, extension);
    const angularConfig = 'angular.json';
    // Let we ensure that we are in an angular workspace
    if (!tree.exists(angularConfig)) {
      throw new SchematicsException('It is not an Angular worksapce. Please Try again in an Angular project.');
    } else {
      if (!tree.exists(path)) {
        tree.create(path, capitalize(content));
      } else {
        throw new SchematicsException('This name of file is already exists! Please try a different or new name');
      }
    }
    return tree;
  };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using these changes, we ensure that we are executing the schematic in an angular workspace and that the file doesn't already exist.&lt;/p&gt;

&lt;p&gt;Now after rebuilding we can ultimately go to the app and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ng generate indepth-dev-schematic:dive

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h6&gt;

&lt;p&gt;In this blog, we have discussed the angular custom schematics with a proper example of creating a custom schematic with useful guidance.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS Drawing Tips</title>
      <author>Lucas jin</author>
      <pubDate>Thu, 18 Nov 2021 09:51:33 +0000</pubDate>
      <link>https://dev.to/dcsl-guidesmiths/css-drawing-tips-eie</link>
      <guid>https://dev.to/dcsl-guidesmiths/css-drawing-tips-eie</guid>
      <description>&lt;p&gt;Have you heard of &lt;a href="https://cssbattle.dev/"&gt;cssBattle&lt;/a&gt;? It's a website that provides some simple shape drawings, where  the user should use minimal  css code to recreate it. Recently  I have completed all 80 drawings, and I think I can share some css drawing techniques here. Learning these techniques may not be very helpful for your daily coding work life, but you may at least find some fun in css.&lt;/p&gt;

&lt;p&gt;First things first, here are some techniques that I often used during these 80 challenges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background"&gt;background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border"&gt;border&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius"&gt;border-radius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"&gt;box-shadow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/drop-shadow()"&gt;drop-shadow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path"&gt;clip-path&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-box-reflect"&gt;-webkit-box-reflect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I open a new challenge, before starting to write any css, first of all I analyse the original drawing, let's take this &lt;a href="https://cssbattle.dev/play/52"&gt;challenge No.52&lt;/a&gt; as an example. As I am looking at this, I can tell that there are only two shapes in this drawing, which is a circle and a rectangle, I am then thinking that do these shapes have the same angle and equal proportion, because we can only increase or decrease the size by using box-shadow and we can't change the box-shadow’s angle individually. And yes, the circle's angle doesn't really matter, and all the rectangles have the same angle and the same size. So in this case I can easily use box-shadow to recreate the shapes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CozPFxCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94sys880jcohmitobwj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CozPFxCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94sys880jcohmitobwj9.png" alt="No.52 challenge" width="768" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's try it.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/WNEJyxe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;From the code example above, you can see that I only use one div to create all the circles using the css &lt;code&gt;box-shadow&lt;/code&gt; property. And for the rectangle we can do the same, first we create a rectangle as our base, from which we recreate the other rectangles using box-shadow. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/qBXYKxY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And that's it, we have completed our challenge. I use pseudo class &lt;code&gt;:before&lt;/code&gt; here just because I don't want to write another &lt;code&gt;div&lt;/code&gt; tag in the html, but you can use another html tag to create the rectangle.&lt;/p&gt;

&lt;p&gt;Let's see another example using &lt;code&gt;box-shadow&lt;/code&gt; and &lt;code&gt;-webkit-box-reflect&lt;/code&gt; to help us save writing more code. &lt;/p&gt;

&lt;p&gt;This is &lt;a href="https://cssbattle.dev/play/45"&gt;challenge No.45&lt;/a&gt; from css drawing:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ITzEWpdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m9xe2ijc34q6ckqdyx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ITzEWpdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m9xe2ijc34q6ckqdyx7.png" alt="No.45 challenge" width="802" height="594"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same as the previous example, as I am looking at this drawing, I can tell that it's formed by some rectangles. But because they have two different angles, vertical and horizontal, I have to use two shapes to create them. And also the left and right side is symmetrical, so I only need to create half the drawing, then use &lt;code&gt;-webkit-box-reflect&lt;/code&gt; property to create the other half. So first I created the horizontal ones using box-shadow: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/YzxLjKb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Then I added the vertical ones:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/dyzejKy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And you can see that half of the drawing is done, now I only need to add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-webkit-box-reflect:right -20px
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voilà, the challenge is done.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/oNedmzE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;Here is another example that I use the exact same technique to create the drawing (&lt;a href="https://cssbattle.dev/play/66"&gt;challenge No.66&lt;/a&gt;), but in this case you have to focus on the negative space:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/eYErxGg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's take another two examples to see how to create shapes with css &lt;code&gt;background&lt;/code&gt; property&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cssbattle.dev/play/6"&gt;Challenge No.6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/vYJjbRQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cssbattle.dev/play/30"&gt;Challenge No.30&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/WNEyvBw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, css &lt;code&gt;background&lt;/code&gt; is a really powerful tool, it can create circles and rectangles at the same time and with different sizes. The only gotcha that we should keep in mind when we use background is that the background property is specified as one or more background layers, separated by commas. And the following layer will be positioned below the previous layer.&lt;/p&gt;

&lt;p&gt;So in challenge No.6 I first drew the background with a transparent circle in it, then I drew the color wheel in the second layer, so we can see the &lt;code&gt;conic-gradient&lt;/code&gt; as a circle in the center. If you mess up with the background layer, you will probably only see the conic-gradient layer take the whole screen, but not the background color nor the circle shape.&lt;/p&gt;

&lt;p&gt;Here is another example that I used background layer to complete the challenge:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cssbattle.dev/play/33"&gt;Challenge No.33&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/yLoEYpp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;box-shadow&lt;/code&gt; and &lt;code&gt;background&lt;/code&gt; are the two most useful properties that I find to help me create the drawings during the challenge. As for the other properties, they are straightforward to use, so I won't explain them with more details here.&lt;/p&gt;

</description>
      <category>css</category>
      <category>cssdrawing</category>
      <category>cssbattle</category>
    </item>
    <item>
      <title>DEV handy tools for newbie</title>
      <author>Digvijay Karadia</author>
      <pubDate>Thu, 18 Nov 2021 09:50:25 +0000</pubDate>
      <link>https://dev.to/digvijay_karadia/dev-handy-tools-for-newbie-pol</link>
      <guid>https://dev.to/digvijay_karadia/dev-handy-tools-for-newbie-pol</guid>
      <description>&lt;ol&gt;
&lt;li&gt;DEV handy tools for newbie&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Coding, hosting - Glitch&lt;/p&gt;

&lt;p&gt;After it was launched in 2017, Glitch has let everyone write and change codes and then issue bots, network apps, and other outlines that it would host for free. But with its pro's there were cons. That free hosting came with certain very strict limitations. Apps had restricted RAM and storage, and more importantly, they would be shut down if they went inoperative for even a few minutes, meaning you often had to wait through a torpid boot before operating them.&lt;/p&gt;

&lt;p&gt;Command Line - Hyper&lt;br&gt;
Hyper is a terminal focused on network technologies, it is basically based on languages such as JavaScript, HTML, and CSS providing a fine and extensible practice for command-line interface users. Hyper delivers a lot of its speed and functionality thanks to the power of term below, the terminal emulator of the Chromium project.&lt;br&gt;
If you're just getting originated with Hyper terminal I'd suggest you head to Hyper website, they have an extensive installation guide and usage documentation&lt;/p&gt;

&lt;p&gt;Testing APIs - Insomnia&lt;/p&gt;

&lt;p&gt;Insomnia is an open cross-platform desktop utilization that drives the effort out of interacting with and designing HTTP-based APIs. Insomnia blends an easy-to-use interface with superior functionality like authentication supporters, code generation, and environment variables.&lt;/p&gt;

&lt;p&gt;Database - TablePlus&lt;br&gt;
TablePlus signifies a convenient, native app with a streamlined user interface that permits developers to concurrently maintain databases in a very fast and secure way. TablePlus supports most of the grass-roots databases like MySQL, Postgres, SQL Server, SQLite, Microsoft SQL Server, Redis, Redshift, Oracle, and many more.  TablePlus is compatible with every version of MariaDB. It is available for macOS, Windows, iOS, and Linux currently.&lt;br&gt;
Some notable features:&lt;br&gt;
Native build&lt;br&gt;
Handy query editor&lt;br&gt;
Multi Tabs &amp;amp; Code Review&lt;br&gt;
Can connect to various databases concurrently.&lt;br&gt;
TablePlus is available for free, but users can acquire a license to remove some constraints and customize the tool for more crucial needs on the TablePlus website.&lt;/p&gt;

&lt;p&gt;Design - Figma Community&lt;/p&gt;

&lt;p&gt;The Figma Community is a place where personalities, organizations, or companies can distribute data, plugins, and widgets. You can join the Community to recognize plugins, investigate files, and encourage other creators.&lt;/p&gt;

</description>
      <category>devhandytools</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top JavaScript Frameworks for 2022</title>
      <author>Devesh Tiwari</author>
      <pubDate>Thu, 18 Nov 2021 09:49:14 +0000</pubDate>
      <link>https://dev.to/deveshtiwari/top-javascript-frameworks-for-2022-35g0</link>
      <guid>https://dev.to/deveshtiwari/top-javascript-frameworks-for-2022-35g0</guid>
      <description>&lt;p&gt;There are more than 200 tools available for JavaScript Development, out of which you should learn to use in 2022. In this article, we will find out the top 10 JavaScript Frameworks for 2022. Here we included 10 javascript frameworks with our extensive research that you can learn and use in Development. But first, we have to get proper knowledge of JavaScript and what is their framework.&lt;/p&gt;

&lt;p&gt;What is JavaScript&lt;/p&gt;

&lt;p&gt;JavaScript is a modern programming language that complies with the ECMAScript spec. JavaScript is high-end, often just-in-time compiled and multi-paradigm. It has dynamic typing, prototype-based object orientation, and first-class functions.&lt;/p&gt;

&lt;p&gt;What is a JavaScript Framework&lt;/p&gt;

&lt;p&gt;Frameworks are different from libraries; They have more control of your app. It directly helps and affects the architecture and many other objects. Frameworks include almost everything that might require to build an application. They also consist of one or more libraries to provide effortless Development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://externlabs.com/blogs/top-25-best-javascript-libraries-and-frameworks-for-2022/"&gt;Top JavaScript Frameworks to know about&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lodash&lt;/p&gt;

&lt;p&gt;It makes JavaScript development more peaceful by taking out the trouble of working with arrays, numbers, objects, strings, etc. Lodash can be used directly inside a browser and also with Node.js. However, working with objects using JavaScript can be pretty challenging, particularly if you have lots of manipulation to do with them. Underscore comes with lots of features that ease your work with objects.&lt;/p&gt;

&lt;p&gt;Lodash offers modular methods that are excellent for:&lt;/p&gt;

&lt;p&gt;Iterating arrays, objects, &amp;amp; strings&lt;br&gt;
Handling &amp;amp; testing values&lt;br&gt;
Building composite functions&lt;/p&gt;

&lt;p&gt;ExpressJS&lt;/p&gt;

&lt;p&gt;Express.js is a back-end web-application framework for NodeJS, published as free to use and open source software supporting the MIT License. It can design and build web applications and APIs. It has also been known as the de facto standard server framework for NodeJS.&lt;/p&gt;

&lt;p&gt;The fundamental author, TJ Holowaychuk, described it as a Sinatra-inspired server implying that it is almost minimal with many features offered as plug-ins. ExpressJS is the back-end component of popular development stacks, including the MEAN, MERN, or MEVN stack, with the help of the MongoDB database and a JavaScript front-end framework or library.&lt;/p&gt;

&lt;p&gt;Webpack&lt;/p&gt;

&lt;p&gt;Webpack is not a framework or library instead a module bundler. Its primary purpose is to bundle JavaScript files for usage in a browser, yet it can also transform, bundle, or package just about any resource or asset.&lt;br&gt;
Webpack is on this list because it can bundle javaScript files to use in a browser.&lt;/p&gt;

&lt;p&gt;React&lt;/p&gt;

&lt;p&gt;React comes as the first choice of most developers in web application development. It has been used by many well-established companies and trendy startups, including Instagram, AirBnB, NYT, Netflix. In addition, react offers much-advanced stuff in Development, making it a better option than other frameworks and libraries for the front-end web development field.&lt;/p&gt;

&lt;p&gt;React empowers developers to build large web applications that can modify data without reloading the web page. The main objective of React is to be fast, scalable, and simple to work with. React works only on UI or UX in the application. This epistolizes to view in the MVC template. we can use it with other JavaScript libraries or frameworks, such as AngularJS in MVC.&lt;/p&gt;

&lt;p&gt;Mochar&lt;/p&gt;

&lt;p&gt;Mocha is a feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun. In addition, Mocha tests run serially, allowing for flexible and accurate reporting while mapping uncaught exceptions to the correct test cases. &lt;/p&gt;

&lt;p&gt;Vue JS&lt;/p&gt;

&lt;p&gt;Vue JS is an open-source model–view–ViewModel front-end JavaScript framework for building user interfaces and single-page applications.&lt;br&gt;
Vue JS offers an incrementally versatile architecture that focuses on declarative rendering and component composition where the core library is concentrated on the view layer only. There officially supported libraries and pachages provides support for advanced functions and features even for complex projects.&lt;br&gt;
Vue JS allows for extending HTML with HTML attributes called directives. The directives offer functionality to HTML applications and come as either built-in or user-defined directives.&lt;/p&gt;

&lt;p&gt;Angular&lt;/p&gt;

&lt;p&gt;Google Inc. developed AngularJS is an open-source front-end framework. It's considered a front-end framework for innovative single-page web applications and based on the popular JavaScript used widely in Development and JS in the name.&lt;br&gt;
AngularJS is developed and has support from Google and an open community of AngularJS developers. This helps to keep continuous Development, improvement, and new features.&lt;/p&gt;

&lt;p&gt;NextJS&lt;/p&gt;

&lt;p&gt;Next.js is an open source development framework built on top of Node.js, enabling React-based web applications functions like server side rendering and building static websites. React documentation states Next.js amongst "Recommended Toolchains," suggesting it to developers as a solution for "building a server-rendered website with Node.js." Traditionally React Apps renders on only client side browsers but with next js this can extend to server side as well.&lt;/p&gt;

&lt;p&gt;Svelte&lt;/p&gt;

&lt;p&gt;Svelte is a free to use, open source and front end compiler. Svelte applications doesnt need a framework script. Instead, building a Svelte application creates the basic code to handle the DOM within each component, which may decrease the size of given files and give better client start-up and run-time optimization. Svelte has its compiler for converting app code into client-side JavaScript at build time. Although it is written in TypeScript, unlike the common frameworks, which bear out the bulk of the work in browser, Svelte transfers this work into a compile step when an app is built.&lt;/p&gt;

&lt;p&gt;Gatsby&lt;/p&gt;

&lt;p&gt;Gatsby is an open source SSG or static website generator based on the front-end development framework React and uses Webpack and GraphQL technology. It can be used to build static sites that are progressive web apps, follow the latest web standards, and optimize for speed and security.&lt;/p&gt;

&lt;p&gt;These are the top JavaScript Frameworks to learn and work with, in 2022. There are many frameworks available for JavaScript, but you can find one that will be enough for your specific work.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Digital marketing</title>
      <author>Digvijay Karadia</author>
      <pubDate>Thu, 18 Nov 2021 09:47:58 +0000</pubDate>
      <link>https://dev.to/digvijay_karadia/digital-marketing-1nc5</link>
      <guid>https://dev.to/digvijay_karadia/digital-marketing-1nc5</guid>
      <description>&lt;p&gt;Digital marketing, also called online marketing, is the elevation of brands to unite with potential clients by making use internet and additional forms of digital messages. This includes not only email, social media, and web-based advertising, but also text and multimedia messages as a marketing channel.&lt;br&gt;
Basically, if a marketing campaign involves digital publication, it's digital marketing.&lt;br&gt;
Everything nowadays is running online, so why not your own shop's website? Ever thought just like dominos, pizza hut, etc, even your shop would have its official website? No right? But with digital marketing even the smallest shops in our neighborhood can have their website available.&lt;br&gt;
Now you must be thinking, why should I have my shop's website? so here are the advantages-:&lt;br&gt;
1) Customers would be able to check out the menu and place orders online, making it simpler than calling again and again for queries.&lt;br&gt;
2) The online website would make people order from it and would make a little less traffic in the shop making it better for both the pandemic and even managing the shop and making orders quicker.&lt;br&gt;
3) Your website would be more profitable than zomato as you can place your driver who would do the delivery, and you wouldn't even have to worry about the ratio you would have to give away.&lt;br&gt;
4) And in the future online business are going to rule the market so why not start from now so you can be well established till the era of the only online market takes it place.&lt;br&gt;
5) Customers can see the offers that you place on the website, which could make your sales a bit more as they would know your offers and would visit your shop for them.&lt;br&gt;
6) Online shopping is the best way to make the most of your business and you can even have a good reputation for your shop only by opening an online source for your shop, which we will help you for making.&lt;/p&gt;

</description>
      <category>digitalmarketing</category>
      <category>marketing</category>
      <category>socialmedia</category>
      <category>digitalbranding</category>
    </item>
    <item>
      <title>Forem</title>
      <author>sataniel</author>
      <pubDate>Thu, 18 Nov 2021 09:39:24 +0000</pubDate>
      <link>https://dev.to/satarii/forem-2fo</link>
      <guid>https://dev.to/satarii/forem-2fo</guid>
      <description>&lt;p&gt;Forem is open source software for building communities. Communities for your peers, customers, fanbases, families, friends, and any other time and space where people need to come together to be part of a collective. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>Fun Linux commands:-</title>
      <author>Digvijay Karadia</author>
      <pubDate>Thu, 18 Nov 2021 09:39:15 +0000</pubDate>
      <link>https://dev.to/digvijay_karadia/fun-linux-commands--3och</link>
      <guid>https://dev.to/digvijay_karadia/fun-linux-commands--3och</guid>
      <description>&lt;p&gt;The Linux command line can be the home of power users and sysadmins. However, Linux is more than just a lot of hard work. Linux was developed by fun-loving people who created an array of comical commands. Try playing around with these yourself when you want a smile.&lt;/p&gt;

&lt;p&gt;Steam locomotive (SL)&lt;br&gt;
For no reason whatsoever, you can cause a steam locomotive to zip across your terminal using the sl command. Install Steam Locomotive with your package manager. For example, on Fedora:&lt;br&gt;
$ sudo dnf install sl&lt;/p&gt;

&lt;p&gt;locomotive.png&lt;br&gt;
A steam locomotive engine drawing made from symbols and characters&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;Real uses&lt;br&gt;
As far as I know, the sl command is truly just for fun. Do you have an interesting use for sl? Let me know in the comments.&lt;/p&gt;

&lt;p&gt;Fireplace (aafire)&lt;br&gt;
Warm your heart and your terminal with aafire command, which causes a fireplace animation to play. You can install aafire with your package manager. On Debian, Mint, Elementary, and similar:&lt;/p&gt;

&lt;p&gt;$ sudo apt install libaa-bin&lt;/p&gt;

&lt;p&gt;On Fedora, CentOS, and others:&lt;/p&gt;

&lt;p&gt;$ sudo dnf install aalib&lt;/p&gt;

&lt;p&gt;fireside.png&lt;br&gt;
A black and white image of a fire made from text symbols and characters&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;Real uses&lt;br&gt;
This image is a subtle way to communicate to your team or boss that everything's about to go up in smoke.&lt;/p&gt;

&lt;p&gt;Yes&lt;br&gt;
You can use the yes command to print out a string of text until it is forcibly stopped with Ctrl+C. For example, I am a Buffalo Bills fan, so I chose to print out an endless series of Buffalo Bills with the yes command:&lt;/p&gt;

&lt;p&gt;$ yes Buffalo Bills&lt;/p&gt;

&lt;p&gt;bills.png&lt;br&gt;
A screenshot showing repeated lines of Buffalo Bills (left edge slightly cut off)&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;Real uses&lt;br&gt;
You can use this command to pipe confirmation to scripts so that when a script pauses to ask for confirmation, it automatically receives yes. For example, imagine there's a script you run that often stops to ask you for confirmation:&lt;/p&gt;

&lt;p&gt;$ foo&lt;br&gt;
Are you sure you want to do this? Y/n  Y&lt;br&gt;
Are you sure? y/N  Y&lt;br&gt;
But are you? y/N&lt;br&gt;
You can auto-accept such messages bypassing yes to the command:&lt;/p&gt;

&lt;p&gt;$ yes | foo&lt;/p&gt;

&lt;p&gt;Alternatively, you can auto-deny messages using yes as well:&lt;/p&gt;

&lt;p&gt;$ yes no | foo&lt;/p&gt;

&lt;p&gt;Fortune&lt;br&gt;
You can have your fortune told on the command line by installing Fortune. Fortune prints a random and possibly meaningful message.&lt;/p&gt;

&lt;p&gt;Install Fortune with your package manager:&lt;/p&gt;

&lt;p&gt;$ sudo apt install fortune&lt;/p&gt;

&lt;p&gt;On Fedora:&lt;/p&gt;

&lt;p&gt;$ sudo dnf install fortune-mod&lt;/p&gt;

&lt;p&gt;The fortune command has many datasets it can draw from. For instance, you can get famous quotes from literature or the science-fiction TV show Firefly, or choose from jokes, tips about Linux, and much more. Search your repository for "fortune" to see what options your distribution provides.&lt;/p&gt;

&lt;p&gt;$ fortune&lt;br&gt;
Johnson's law:&lt;br&gt;
  Systems resemble the organizations that create them.&lt;br&gt;
Real uses&lt;br&gt;
You can use Fortune to generate a pseudo-random number. There's not enough entropy to make it cryptographically secure, but when you need an unexpected number, you can count characters or words:&lt;/p&gt;

&lt;p&gt;$ fortune | wc --chars&lt;br&gt;
38&lt;br&gt;
$ fortune | wc --words&lt;br&gt;
8&lt;br&gt;
$ fortune | wc --chars&lt;br&gt;
169&lt;br&gt;
Lolcat&lt;br&gt;
Lolcat is a program that concatenates files, or standard input, to standard output (like the generic cat) and adds rainbow coloring to it. You can pipe the output of other commands to lolcat, which provides a rainbow hue to the result.&lt;/p&gt;

&lt;p&gt;Here's the result of lolcat -h for its help output:&lt;/p&gt;

&lt;p&gt;lolcat_rainbow.png&lt;br&gt;
onscreen text colored in a rainbow gradient&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;Figlet and banner&lt;br&gt;
The figlet and banner commands let you create simple ASCII text banners. Here's a text banner for a CentOS system:&lt;/p&gt;

&lt;p&gt;$ figlet centos.com&lt;/p&gt;

&lt;p&gt;figlet_centos.png&lt;br&gt;
Text banner reading "centos.com" composed from symbols and characters&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;Pipe figlet to lolcat for a colorful banner:&lt;/p&gt;

&lt;p&gt;$ figlet centos.com | lolcat&lt;/p&gt;

&lt;p&gt;lolcat_figlet_centos.png&lt;br&gt;
A text banner reading "centos.com" made rainbow colored with lolcat&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;$ banner Hello World&lt;/p&gt;

&lt;p&gt;hello_world.png&lt;br&gt;
A banner reading "Hello World" spelled out with pound symbols&lt;br&gt;
Don Watkins, CC BY-SA 4.0&lt;/p&gt;

&lt;p&gt;Espeak&lt;br&gt;
You can add speech capabilities to your command line funnies by installing espeak.&lt;/p&gt;

&lt;p&gt;Once espeak is installed, turn up the volume on your computer and have some fun listening to your machine talk to you. Espeak is a software speech synthesizer, and there are a few different voice libraries available.&lt;/p&gt;

&lt;p&gt;$ espeak "Linux is the best operating system."&lt;/p&gt;

</description>
      <category>linux</category>
      <category>linuxcommands</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to make a password generator with python.</title>
      <author>Vaarun Sinha</author>
      <pubDate>Thu, 18 Nov 2021 09:32:09 +0000</pubDate>
      <link>https://dev.to/vaarun_sinha/how-to-make-a-password-generator-with-python-2b1a</link>
      <guid>https://dev.to/vaarun_sinha/how-to-make-a-password-generator-with-python-2b1a</guid>
      <description>&lt;p&gt;In this tutorial we will make a password generator with the secrets module. Why not random module? see the first post in this series to understand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So Let's Begin!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Generate a random password, according to the user input.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sub-problems"&gt;
  &lt;/a&gt;
  Sub problems
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get user input&lt;/li&gt;
&lt;li&gt;Create lists for letters etc...&lt;/li&gt;
&lt;li&gt;Loop over lists and make a password.&lt;/li&gt;
&lt;li&gt;Print the password.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-write-some-code"&gt;
  &lt;/a&gt;
  Let's write some code!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get user input
Here we will use try/except blocks so that when user types a string we do not get an error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will get inputs for number of special characters, small letters, big letters and numbers required for generating the password.&lt;/p&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many numbers should your password have: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many numbers should your password have: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many special characters should your password have: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many special characters should your password have: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_small_letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many small letters should your password have: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_small_letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many small letters should your password have: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_cap_letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many big letters should your password have:  "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_of_cap_letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many big letters should your password have:  "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;### Create Lists for numbers to choose from. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We could hardcode this like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;number_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;But this will take us way more time!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So let's use the string module!&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;number_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we could just have a string right? then why make it list you will find this out later on in this blog!&lt;/p&gt;

&lt;p&gt;Let's do this for everything.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;

&lt;span class="n"&gt;smallLetters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_lowercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;bigLetters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;specialCharacters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;punctuation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now we can loop over these lists, and make a list!&lt;/p&gt;

&lt;p&gt;First let's declare empty variables!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

&lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

&lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

&lt;span class="n"&gt;bigPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's loop over the lists.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_numbers&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randNum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_special&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randSp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specialCharacters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randSp&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_small_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randSm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallLetters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randSm&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_cap_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randBig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bigLetters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bigPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bigPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randBig&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add the parts to make a password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bigPart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's refactor the code, by putting this into a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;num_of_numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_special&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_small_letters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_cap_letters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;smallLetters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_lowercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;bigLetters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;specialCharacters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;punctuation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

    &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

    &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

    &lt;span class="n"&gt;bigPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;

    &lt;span class="c1"&gt;# ANCHOR: Generating Password
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_numbers&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randNum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_special&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randSp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;specialCharacters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randSp&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_small_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randSm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallLetters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randSm&lt;/span&gt;


    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_of_cap_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;randBig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bigLetters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bigPart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bigPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;randBig&lt;/span&gt;

    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bigPart&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we print/generate the password every time ,there is a predictable format, first numbers then special etc..&lt;/p&gt;

&lt;p&gt;So how we can solve this?&lt;/p&gt;

&lt;p&gt;We will solve this in the next short blog coming very quickly after this blog, so stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Happy Coding!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>project</category>
      <category>security</category>
    </item>
    <item>
      <title>Feedback would be appreciated</title>
      <author>Liftoff</author>
      <pubDate>Thu, 18 Nov 2021 09:28:32 +0000</pubDate>
      <link>https://dev.to/liftoffka/feedback-would-be-appreciated-388g</link>
      <guid>https://dev.to/liftoffka/feedback-would-be-appreciated-388g</guid>
      <description>&lt;p&gt;Hi everyone&lt;br&gt;
I would appreciate some feedback on my portfolio that I made&lt;br&gt;
&lt;a href="https://portfolio.liftoff-ka.repl.co/"&gt;https://portfolio.liftoff-ka.repl.co/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks a lot in advance 😃&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>career</category>
    </item>
    <item>
      <title>Leverage Postman to Consume APIs Using OAuth2</title>
      <author>Anthony Viard 🥑</author>
      <pubDate>Thu, 18 Nov 2021 09:22:48 +0000</pubDate>
      <link>https://dev.to/entando/leverage-postman-to-consume-apis-using-oauth2-707</link>
      <guid>https://dev.to/entando/leverage-postman-to-consume-apis-using-oauth2-707</guid>
      <description>&lt;p&gt;&lt;em&gt;My Fellow Developers -&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you haven’t heard about Postman yet, get ready to become close friends with this tool!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No matter what authentication mode you are using for APIs,  Postman is a well known, functional and amazing tool for your developing needs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Personally, I’ve used it a lot for testing &amp;amp; executing requests on personal and public APIs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It’s my go-to tool to install immediately when I refresh an environment or even when upgrading to a new computer. After several years of implementation, it has easily become one of my favorite developer tools.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re new to this developer tool, I admit, at first glance it can be discouraging when starting out with your configurations. Especially if you’re using the OAuth2 protocol (which is extremely popular) because it does change the way we authenticate users and APIs connections.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Enter your fearless developer, Anthony, with my newest tutorial to walk you through consuming APIs using OAuth2!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You’ll quickly learn how to create a collection, define the variables, and configure your Postman tool to retrieve tokens before adding request definitions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Psst - this especially works well with your JHipster and Entando generated applications.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Enjoy!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3yfHIVWddqk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
