<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best Coding app for beginners Developers</title>
      <author>Codemania</author>
      <pubDate>Thu, 21 Oct 2021 02:29:27 +0000</pubDate>
      <link>https://dev.to/codemaniaz/best-coding-app-for-beginners-developers-3l7b</link>
      <guid>https://dev.to/codemaniaz/best-coding-app-for-beginners-developers-3l7b</guid>
      <description>&lt;p&gt;Programming skills open doors to dozens of lucrative tech careers. And there’s never been a better or easier time to learn. Just like learning any other language, coding requires regular practice to master. But it’s not always easy for people to find time to practice in front of a computer. That’s why coding apps are so helpful. In this article, we’ll cover the best coding apps on iOS and Android for those who want to learn to code. &lt;/p&gt;
&lt;br&gt;Read More : &lt;b&gt;&lt;a href="https://www.codelivly.com/best-coding-apps-for-beginners/"&gt;Best Coding App For Beginners&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>25 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project</title>
      <author>Codemania</author>
      <pubDate>Thu, 21 Oct 2021 01:59:43 +0000</pubDate>
      <link>https://dev.to/codemaniaz/25-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-4lne</link>
      <guid>https://dev.to/codemaniaz/25-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-4lne</guid>
      <description>&lt;p&gt;&lt;span&gt;Here I list 10 excellent JavaScript based GitHub resources that will help you to understand the language better and help you to write clean code. This list is based on my personal preference. &lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ReadUI&amp;amp;quot More: &lt;b&gt;&lt;a href="https://news.google.com/articles/CAIiEHRNZDbK-6L3wLhhd1mvgX8qGQgEKhAIACoHCAow7-ynCzDc978DMKOIlgc?hl=en-US&amp;amp;gl=US&amp;amp;ceid=US%3Aen"&gt;25 Awesome Github Repos Every Web Developer Should Know&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>18 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project</title>
      <author>Codemania</author>
      <pubDate>Thu, 21 Oct 2021 01:57:22 +0000</pubDate>
      <link>https://dev.to/codemaniaz/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-3aeh</link>
      <guid>https://dev.to/codemaniaz/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-3aeh</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I would like to give examples of good GitHub repositories that will help you implement complex animations, as well as useful functions in your projects.&lt;/p&gt;
&lt;p&gt;So let's get started &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwiw1e_qpqbzAhU78HMBHVvBAWkQFnoECBAQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;18 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top VS Code Extensions For Web Developers</title>
      <author>Cess</author>
      <pubDate>Thu, 21 Oct 2021 00:45:07 +0000</pubDate>
      <link>https://dev.to/cesscode/top-vs-code-extensions-for-web-developers-1db5</link>
      <guid>https://dev.to/cesscode/top-vs-code-extensions-for-web-developers-1db5</guid>
      <description>&lt;p&gt;Hello everyone! 💙&lt;/p&gt;

&lt;p&gt;In this article, I will write about the Vs Code extensions that I find super useful as a web developer and you guys will find them interesting and useful as well.&lt;/p&gt;

&lt;p&gt;let's get started 💃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-vs-code-extension-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;what is vs code extension ?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;VS Code extensions let you add languages, debuggers, and tools to your installation to support your development workflow. VS Code's rich extensibility model lets extension authors plug directly into the VS Code UI and contribute functionality through the same APIs used by VS Code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-download-vs-code-extensions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to download Vs code extensions&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You can browse and install extensions from within VS Code. Bring up the Extensions view by clicking on the Extensions icon in the Activity Bar on the side of VS Code or the View: Extensions command (Ctrl+Shift+X).&lt;/p&gt;

&lt;p&gt;Click on the extension icon on vs code: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ldnClv2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630798551634/Mo9aXV_Vr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ldnClv2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630798551634/Mo9aXV_Vr.png" alt="extensions-view-icon.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will show you a list of the most popular VS Code extensions, click the install button to download any vs code extension of your choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heres-a-list-of-some-of-the-vs-code-extensions-that-would-make-your-life-a-lot-easier-as-a-web-developer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Here’s a list of some of the Vs code extensions that would make your life a lot easier as a web developer:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;1.&lt;br&gt;
&lt;strong&gt;Live Server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jPDap49G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630798935583/z_4ZJ7J1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jPDap49G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630798935583/z_4ZJ7J1h.png" alt="live server.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live server extension provides the live preview of your web application right within the editor. &lt;/p&gt;

&lt;p&gt;This is a  handy and useful extension for web developers as it enforces auto-reload and makes our work easier by displaying our code results immediately on Our web browser without refreshing the page and It prevents us from going through the stress of always saving our work in the editor and then refresh our browser every time before seeing changes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRntKIEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884099413/jqHLMBkap.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRntKIEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884099413/jqHLMBkap.gif" alt="lives.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
&lt;strong&gt;JavaScript (ES6) Code Snippets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension contains code snippets for JavaScript in ES6 syntax for Vs Code editor. To speed up your javascript coding, use Javascript ES6 code snippets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lhuKXIek--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630799797008/MYJHsSE_t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lhuKXIek--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630799797008/MYJHsSE_t.png" alt="javascript es6 code snippets.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;br&gt;
&lt;strong&gt;Prettier&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension performs the formatting of the javascript, CSS, and HTML and makes it readable. it automatically tidies up the code every time the changes are saved. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hoeBt0r6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630800339194/rLf0JlrY6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hoeBt0r6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630800339194/rLf0JlrY6.png" alt="prettier.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;br&gt;
&lt;strong&gt;Bracket Pair Colorizer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension allows matching brackets to be identified with colors. This extension helps you identify which closing bracket belongs to which functions when you have more than one or two closing brackets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8bBR-F4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630800459137/FcuTgF85M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bBR-F4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630800459137/FcuTgF85M.png" alt="bracket pair colorizer.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;br&gt;
&lt;strong&gt;Path Intellisense&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension makes the development time faster by autocompleting file names. You type the name of the files in statements and it will search and give you suggestions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xcLtJlYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630801018697/aei10C6qf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xcLtJlYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630801018697/aei10C6qf.png" alt="path intelisense.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;br&gt;
&lt;strong&gt;Code time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75S2lomA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630801203063/ISiNHbnSo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75S2lomA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630801203063/ISiNHbnSo.png" alt="Code time.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code Time is an open-source plugin for automatic programming metrics and time tracking in Visual Studio Code. it tracks your development time and provides you with useful stats such as how many hours you have code for that day, It’s useful to keep track and see the progress you are making.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rTs0dPj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630801228452/gpAks2ed5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTs0dPj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630801228452/gpAks2ed5.png" alt="code time2.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;br&gt;
&lt;strong&gt;Polacode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XtwLBLyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630881865527/oLwoW8VgO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XtwLBLyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630881865527/oLwoW8VgO.png" alt="polacode.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension helps you take beautiful screenshots of your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To take a screenshot of your code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;open the command palette (ctrl + shift + p on windows) or (cmd + shift + p on mac)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;search for polacode and select polacode&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;highlight the part you want to screenshot, copy and paste the code on the displayed polacode screen and press the polacode icon to save it on your device.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sesXek8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884183236/B7nAXgDZ8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sesXek8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884183236/B7nAXgDZ8.gif" alt="pola.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8.&lt;br&gt;
&lt;strong&gt;Auto Rename Tags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pjmfU9UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884405835/W6pk0pQmI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pjmfU9UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884405835/W6pk0pQmI.png" alt="autorename tag.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension makes it possible for us to rename both opening and closing tags at once. when you change the starting tag it will automatically change the closing tag as well, making the renaming of tags easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJEdBuir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884870994/riz3q7ypg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJEdBuir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884870994/riz3q7ypg.gif" alt="rename.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9.&lt;br&gt;
&lt;strong&gt;Px to rem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9rxyf6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884997991/MHvmxydYF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9rxyf6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884997991/MHvmxydYF.png" alt="px to rem.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension helps us to convert px to rem, and rem to px. You don't need to do mathematical conversions all you need to do is highlight the 20px in  Font-size: 20px; for example and press alt + z keys to make the conversion from px to rem. press and hold the alt + z keys to also make the conversion from rem to px. ☺️ &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAiCWSuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884955349/h4h-aDtb8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAiCWSuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884955349/h4h-aDtb8.gif" alt="px to .gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10.&lt;br&gt;
&lt;strong&gt;VS Code Icons&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--saVi3xm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630887197993/pX_HLhe-l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saVi3xm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630887197993/pX_HLhe-l.png" alt="vs code icons.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension adds a set of icons to each of the files and folders in the Explorer view, thereby making the editor look more colorful and also help to easily view all the different files quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZEGEzjE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630887537822/25X6sTx0o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZEGEzjE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630887537822/25X6sTx0o.gif" alt="20210906_010837.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The above-mentioned Vs code extensions will make your life easier as a web developer. If you have any questions or there are any other extensions that help you a lot more than this, Post about it in the comment section below and I'll be happy to answer every single one.&lt;/p&gt;

&lt;p&gt;If you found this article helpful, please like and share it ❤️.&lt;/p&gt;

&lt;p&gt;That's all for today! 😁 You reached the end of the article 😍&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Async code in useEffect is dangerous, how do we deal with it?</title>
      <author>Jae Anne Bach Hardie</author>
      <pubDate>Wed, 20 Oct 2021 23:07:53 +0000</pubDate>
      <link>https://dev.to/dulcedejae/async-code-in-useeffect-is-dangerous-how-do-we-deal-with-it-3p9m</link>
      <guid>https://dev.to/dulcedejae/async-code-in-useeffect-is-dangerous-how-do-we-deal-with-it-3p9m</guid>
      <description>&lt;p&gt;The introduction of async/await to Javascript has made it easy to express complex workflows that string together multiple asynchronous tasks. Let's take a look at the following code, which is a generalized example of code I've seen in real projects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchClientToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createWebsocketConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's easy to look at that and think it's all rosy. When we are passed a user we create a client for them and then whenever a client is disposed of through the user changing or the component unmounting, we disconnect the client.&lt;/p&gt;

&lt;p&gt;However, we have not considered that the asynchronous workflow in the first &lt;code&gt;useEffect&lt;/code&gt; is running concurrently to the rest of the application, which is independently responding to other effects and user actions. Any one of those other effects could unmount our component at any point!  If the component is unmounted before &lt;code&gt;setClient&lt;/code&gt; is called the client will still be created — Promises do not get cancelled just because their caller no longer exists — but without a component to manage the state setting or cleanup it will never disconnect. This is usually quite bad.&lt;/p&gt;

&lt;p&gt;So what do we do about it? Well, it's complicated. At first glance it looks like we can do the following and things will be OK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchClientToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createWebsocketConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if the client has been created it will disconnect, without it needing to be saved to component state. Right?&lt;/p&gt;

&lt;p&gt;Wrong, unfortunately. If the cleanup function runs before &lt;code&gt;createClient&lt;/code&gt; resolves there will be no client to clean up. However, the promise is still resolving and the client will be created, once again putting it outside our reach!&lt;/p&gt;

&lt;p&gt;If we really want to be able to safely use async workflows inside &lt;code&gt;useEffect&lt;/code&gt; we need to make our workflow cancellable at any point. We also need to reason through what needs to be cleaned up depending on what stage the workflow was in when the interruption arrived. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchClientToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// if cancelled before we get to creating resources&lt;/span&gt;
      &lt;span class="c1"&gt;// it's ok, just don't create them&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createWebsocketConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// if cancelled before we get to the client, we need&lt;/span&gt;
      &lt;span class="c1"&gt;// to make sure our connection isn't left hanging&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// if cancelled after the client has been created, we&lt;/span&gt;
      &lt;span class="c1"&gt;// need to clean it up&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cancelled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're struggling to understand where to put cancellation handlers, imagine you were writing this with promises instead of async/await. We have to handle cancellation at the beginning of every &lt;code&gt;.then&lt;/code&gt; callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fetchClientToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;createWebsocketConnection&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cancelled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is why I sometimes shy away from async/await in UI code entirely. The async/await syntax blurs the line between synchronous (not interruptible) and asynchronous (interruptible) code. That's the point! It is very helpful in contexts where synchronous and asynchronous code should be treated similarly — like in a backend server executing a linear workflow — but dangerously misleading in contexts where interruptions are common and handling them explicitly becomes necessary.&lt;/p&gt;

&lt;p&gt;There are, of course, more sophisticated ways of dealing with the problem of resource management that make the implicit state machine above more explicit and controllable. I will leave an implementation in &lt;a href="https://xstate.js.org/"&gt;xstate&lt;/a&gt; as an exercise for the reader but it's one example of a useful tool to reason through and model these multi-step interruptible processes. However, it's good to have a barebones, just-React solution in your back pocket in case you find yourself unexpectedly facing a dangerous Promise in a foreign project.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>VS Code + Live Share: Putting the "We" back into "Web" IDE </title>
      <author>Jonathan Carter</author>
      <pubDate>Wed, 20 Oct 2021 23:02:31 +0000</pubDate>
      <link>https://dev.to/lostintangent/putting-the-we-back-in-web-1hc2</link>
      <guid>https://dev.to/lostintangent/putting-the-we-back-in-web-1hc2</guid>
      <description>&lt;p&gt;When we first released &lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt; three years ago, our goal was to enable developer collaboration to become more &lt;a href="https://twitter.com/LostInTangent/status/1450868941056720899"&gt;enjoyable&lt;/a&gt;, &lt;a href="https://aka.ms/vsls-modality"&gt;flexible&lt;/a&gt;, and &lt;a href="https://aka.ms/vsls-platform"&gt;extensible&lt;/a&gt;, across a diverse set of &lt;a href="https://aka.ms/vsls-usecases"&gt;use cases&lt;/a&gt;. Screen sharing had served us well, but as teams and classrooms were becoming more geo-distributed, it was clearly time for a fresh take on remote pair programming.&lt;/p&gt;

&lt;p&gt;Since then, Live Share has become a key part of many developer's workflow, and it's been amazing to build it alongside the community. However, in order for us to support collaboration to happen from anywhere, and on any device, we've been missing a fundamental part of the story: a web client.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n6HqUz3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FCJ3c67VkAAJfiV.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8p_8E6Z1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1410632439370641409/Pt-7RucE_normal.jpg" alt="Visual Studio Code profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Visual Studio Code
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @code
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Wanna see something cool? 😎 Go to "&lt;a href="https://t.co/k0d9MtptVW"&gt;vscode.dev&lt;/a&gt;" and start coding with Visual Studio Code entirely in your browser. Anywhere, anytime, on any device and tablet, with no install required 🧑‍💻🪄&lt;br&gt;Read the announcement 👉 &lt;a href="https://t.co/XpTxjfVENL"&gt;aka.ms/vscode-dev-blog&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:56 PM - 20 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1450853494949244929" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1450853494949244929" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1450853494949244929" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;With the introduction of &lt;a href="https://vscode.dev"&gt;Visual Studio Code for the Web&lt;/a&gt; (and &lt;a href="https://aka.ms/githubdev-fun"&gt;github.dev&lt;/a&gt;), developers now have a world-class editor, that's simply a URL away. And with this powerful foundation in place, we were able to port Live Share to run entirely in your browser, so that collaboration can be as opportunistic and lightweight as possible. Got an iPad? Sweet! Working on a new machine and don't want to install any tools? Awesome! VS Code and Live Share have got your back, no matter where/when you want to collaborate 🔥&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyVCpDhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FCKC4arVIAcJ_mX.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pcg9d-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/771496206/Twitter_normal.png" alt="Jonathan Carter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Carter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lostintangent"&gt;@lostintangent&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      📣 To celebrate the release of &lt;a href="https://t.co/leLmoM8lLT"&gt;vscode.dev&lt;/a&gt;, we also shipped Live Share support for the web. Simply install the extension, start a session, and then co-edit, review and chat about code, entirely from the browser 🔥 Developer collaboration may never be the same! 🥰 &lt;a href="https://t.co/vATZCblUgw"&gt;twitter.com/code/status/14…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:58 PM - 20 Oct 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Visual Studio Code
          &lt;/span&gt;
          @code
        &lt;/div&gt;
        Wanna see something cool? 😎 Go to "https://t.co/k0d9MtptVW" and start coding with Visual Studio Code entirely in your browser. Anywhere, anytime, on any device and tablet, with no install required 🧑‍💻🪄
Read the announcement 👉 https://t.co/XpTxjfVENL https://t.co/eOxK5gSoiE
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1450868941056720899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1450868941056720899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1450868941056720899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Even cooler, the Live Share web client is fully interoperable with both Visual Studio and Visual Studio Code, which allows you to collaborate with other developers, and ensure that everyone can work in their most comfortable and convenient environment. At the moment, the Live Share web experience supports the majority of features that the desktop client does (e.g. co-editing, shared cursors, text chat, inline commenting), and we'll be iterating on it in the coming weeks to fill in some of the remaining gaps (e.g. notebooks).&lt;/p&gt;

&lt;p&gt;That said, we think that Live Share's new web support is complete enough for folks to start giving it a spin, and letting us know where and how we can improve. We're extremely excited to remove these setup and device barriers, and looking forward to hearing if/how it's making developer collaboration more enjoyable 💖&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vscode</category>
      <category>showdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introducing xrpl.js</title>
      <author>Mayukha Vadari</author>
      <pubDate>Wed, 20 Oct 2021 22:02:18 +0000</pubDate>
      <link>https://dev.to/ripplexdev/introducing-xrpljs-37p7</link>
      <guid>https://dev.to/ripplexdev/introducing-xrpljs-37p7</guid>
      <description>&lt;p&gt;&lt;a href="https://ripple.com/ripplex/"&gt;RippleX&lt;/a&gt; and the &lt;a href="https://xrplf.org/"&gt;XRP Ledger Foundation (XRPLF)&lt;/a&gt; are excited to announce xrpl.js &lt;strong&gt;version 2.0.0&lt;/strong&gt;, a JavaScript/TypeScript library for interacting with the XRP Ledger (XRPL). Formerly known as ripple-lib, the library was renamed to better represent its role in the XRPL ecosystem and overhauled to take advantage of modern JavaScript features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;JavaScript is one of the most widely-used programming languages, and as such has a massive community of active developers. Maintaining a JavaScript SDK enables these developers to seamlessly interact with the XRP Ledger, both in the browser and in Node.js. In addition, the JavaScript libraries (xrpl.js, ripple-binary-codec, ripple-keypairs, and ripple-address-codec) power many &lt;a href="https://github.com/XRPLF/xrpl.js/blob/develop/APPLICATIONS.md"&gt;apps&lt;/a&gt; in the XRPL ecosystem, as well as &lt;a href="https://www.npmjs.com/browse/depended/ripple-lib"&gt;packages&lt;/a&gt; from companies such as BitGo and Ledger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changes"&gt;
  &lt;/a&gt;
  Changes
&lt;/h2&gt;

&lt;p&gt;With this release of xrpl.js, the JavaScript, &lt;a href="https://github.com/XRPLF/xrpl4j"&gt;Java&lt;/a&gt;, and &lt;a href="https://github.com/XRPLF/xrpl-py/"&gt;Python&lt;/a&gt; libraries provided by the XRPLF now have parallel structures and systems. This enables developers to easily work with their preferred programming language depending on their specific needs, without having to learn an entirely new interface.&lt;/p&gt;

&lt;p&gt;xrpl.js will continue to support all ripple-lib features, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serializing, signing, and submitting transactions to the XRPL&lt;/li&gt;
&lt;li&gt;Retrieving information from the XRPL&lt;/li&gt;
&lt;li&gt;Helpful utility functions (such as converting between &lt;a href="https://xrpl.org/xrp.html#xrp-properties"&gt;drops&lt;/a&gt; and XRP)&lt;/li&gt;
&lt;li&gt;Support for Node.js, web browsers, and React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also introduces a number of new features, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript types for all transaction types and WebSocket requests&lt;/li&gt;
&lt;li&gt;A Wallet class to make it easier to work with key pairs&lt;/li&gt;
&lt;li&gt;Protections against the &lt;a href="https://xrpl.org/partial-payments.html#partial-payments-exploit"&gt;partial payment attack vector&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;An additional submit implementation that returns the transaction's final outcome after validation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In version 2.0, the library is now much more aligned with the core XRP Ledger interface. This means XRPL developers—whether new or experienced—can refer to multiple sources of documentation instead of needing to rely solely on the library-specific documentation. There are also a number of general architecture improvements, such as simplifying code, making user interfaces more intuitive (especially in relation to the core ledger), and revamping the testing structure. For a detailed list of changes, visit the &lt;a href="https://github.com/XRPLF/xrpl.js/blob/develop/HISTORY.md"&gt;changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-building"&gt;
  &lt;/a&gt;
  Start Building
&lt;/h2&gt;

&lt;p&gt;To get started using xrpl.js, see &lt;a href="https://xrpl.org/get-started-using-javascript.html"&gt;this tutorial on xrpl.org&lt;/a&gt;, or check out the &lt;a href="https://github.com/XRPLF/xrpl.js"&gt;project repo&lt;/a&gt; or &lt;a href="https://js.xrpl.org/"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you already have a project that uses ripple-lib, migrate today! We have a &lt;a href="https://xrpl.org/xrpljs2-migration-guide.html"&gt;migration guide for moving your code from ripple-lib v1.10 to xrpl.js v2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We hope you enjoy building the Internet of Value, and feel welcome to reach out to the XRP Ledger developer community if you have any questions!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>blockchain</category>
      <category>xrpl</category>
    </item>
    <item>
      <title>Stored Procedures - love or leave 'em?</title>
      <author>Jim Hatcher</author>
      <pubDate>Wed, 20 Oct 2021 21:52:33 +0000</pubDate>
      <link>https://dev.to/jhatcher9999/stored-procedures-love-or-leave-em-5amh</link>
      <guid>https://dev.to/jhatcher9999/stored-procedures-love-or-leave-em-5amh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A stored procedure is a set of SQL statements that is stored on the database server and is available to be executed by name.  Stored procedures are the cause of “religious wars” in the world of relational databases where some DB users live and die by them and other DB users consider them an anti-pattern.  They are certainly a tool that has the potential to be mis-used and create performance issues and blockers to scalability.  As a DBA/Developer/Architect, should you be using them or not?  Let’s dive in and try to answer that question.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-usage-patterns"&gt;
  &lt;/a&gt;
  Common Usage Patterns
&lt;/h2&gt;

&lt;p&gt;When I see stored procedures used in databases, they fall into one of the following categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A stored procedure is used for every single CRUD operation against the DB&lt;/li&gt;
&lt;li&gt;Stored procedures are used in certain situations for special handling, including:

&lt;ul&gt;
&lt;li&gt;Running multi-statement transactions so that commit/rollback logic can be controlled at the DB level&lt;/li&gt;
&lt;li&gt;Running operations that involve chatty transactions so that round-trips between the app and DB can be avoided&lt;/li&gt;
&lt;li&gt;Centralization of logic that is called by several systems&lt;/li&gt;
&lt;li&gt;Encapsulation of operations to which highly granular security permissions need to be granted&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;10,000-line monsters containing business reams of logic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#potential-pros-and-cons"&gt;
  &lt;/a&gt;
  Potential Pros and Cons
&lt;/h2&gt;

&lt;p&gt;There are various arguments for and against the use of stored procedures.  Let’s examine a few:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-caching-of-execution-plans"&gt;
  &lt;/a&gt;
  Pro: Caching of Execution Plans
&lt;/h3&gt;

&lt;p&gt;When you write a stored procedure, the query execution plan is stored/cached on the server which saves time when the stored proc is executed.  This has become less of a factor over the years as DB technology has progressed.  SQL optimizers have gotten better at storing plans for “dynamic” SQL and storing those plans for re-use.  By making use of prepared statements in data access code, the same benefit of execution plan caching can often be gained.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-granular-permission-grants"&gt;
  &lt;/a&gt;
  Pro: Granular Permission Grants
&lt;/h3&gt;

&lt;p&gt;There are opportunities to grant an application or user permissions to execute a stored procedure but restrict access to the underlying table(s).  Or, you could grant access to a procedure that INSERTs data into a table but deny access to a procedure that UPDATEs or DELETEs data from a table.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-query-pattern-tracking"&gt;
  &lt;/a&gt;
  Pro: Query Pattern Tracking
&lt;/h3&gt;

&lt;p&gt;If every CRUD operation performed against the database is contained in stored procedures, it’s relatively easy to have an understanding of the query patterns used in the database.  As a DBA, getting your arms around the query patterns (both reads and writes) that are being executed against a database is a huge step in being able to manage and optimize a database -- especially when inheriting a new system with which you have little familiarity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-protection-against-sql-injection-attacks"&gt;
  &lt;/a&gt;
  Pro: Protection against SQL Injection Attacks
&lt;/h3&gt;

&lt;p&gt;SQL Injection Attacks are a  classic security vulnerability.  If you’re not familiar with them, google “little bobby tables” and check out the famous XKCD comic that pokes fun at them.  Because stored procedures are typically parameterized, they provide a level of protection against unsanitized SQL inputs.  To be fair, I have also seen stored procedures exploited with SQL Injection attacks; they’re not a magic fix for SQL injection attacks, and smart developers still take precautions to sanitize data and use parameterization correctly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-cutting-down-on-roundtrips-from-the-app-layer"&gt;
  &lt;/a&gt;
  Pro: Cutting down on Roundtrips from the app layer
&lt;/h3&gt;

&lt;p&gt;For certain database operations that require several roundtrips from the app to the database, there can be a performance boost by planting all the necessary logic within a stored procedure to handle the entire operation without ever “leaving the database.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-making-reuse-of-logic-possible"&gt;
  &lt;/a&gt;
  Pro: Making re-use of logic possible
&lt;/h3&gt;

&lt;p&gt;By storing SQL statements together in an encapsulated, named element which can be executed by various processes, there is an opportunity to re-use logic by application code, reporting services, and other DB clients that may be simpler than encapsulating that logic in an application tier (for example, in a microservice).  In a system that is embracing microservices, this argument becomes largely irrelevant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#con-business-logic-in-the-db"&gt;
  &lt;/a&gt;
  Con: Business Logic in the DB
&lt;/h3&gt;

&lt;p&gt;There is a subtle temptation when writing stored procedures to add little bits of logic that really don’t belong in the database.  When there is business logic shared between the services code and the database (in stored procedures), it is harder to have a holistic view of a software system’s business logic; things can easily be missed which can lead to unexpected bugs.&lt;/p&gt;

&lt;p&gt;In the case of 10,000-line monsters mentioned above, this embedding of business logic is taken to an extreme.  This leads to highly unwieldy and difficult to maintain code.  This is probably the most infamous use of stored procedures and one of the anti-patterns dissenters love to cite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#con-loss-of-database-portability"&gt;
  &lt;/a&gt;
  Con: Loss of Database Portability
&lt;/h3&gt;

&lt;p&gt;The code used in stored procedures often moves away from standard ANSI-SQL and into implementation-specific syntax.  This makes it harder to move between DB systems.  If the interaction between applications and databases is all plain-vanilla SQL, it is relatively easy to migrate an app from using any database system to any other database system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#con-dependencies-between-stored-procedures-and-app-code"&gt;
  &lt;/a&gt;
  Con: Dependencies between stored procedures and app code
&lt;/h3&gt;

&lt;p&gt;While it is good practice to keep database schemas (tables, indexes, views, etc.) in source control, when the schema contains stored proc definitions, the management of the schema becomes much more complex.  Often, changes to stored procedures are tightly bound to Data Access code, so managing versions of schemas and their appropriate code builds can be challenging.  And, doing seamless upgrades of applications can cause complexities as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#con-orm-integration"&gt;
  &lt;/a&gt;
  Con: ORM Integration
&lt;/h3&gt;

&lt;p&gt;An ORM (Object Relational Mapper) is a piece of software designed to abstract away the manual mapping of domain objects (used in code) with the corresponding table structures (used in databases).  By employing an ORM, you (in theory) save yourself a lot of trouble writing boring, repetitive data access layer code.  ORMs typically write SQL statements dynamically and execute them directly.  It is often hard, or at least involves a decent investment in time and effort, to get ORMs to use stored procedures which subtracts from their intended utility.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; I’m not actually a huge fan of ORMs, but I understand their value.  My personal rule when deploying ORMs is to do so in a way where it’s easy to let the ORM do the data mapping when it’s efficient, but to allow the insertion of manual data-access logic for cases when the ORM is making poor choices.  In other words, if the ORM makes your life easier 80% of the time, then leverage it for that 80% -- but don’t tie yourself to the ORM for that other painful 20%. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I admit that in the part of my career where I was writing apps using the Microsoft stack and SQL Server that I was a huge proponent and user of stored procs.  I was also a huge Microsoft snob and had no plans of moving off of SQL Server to any other database platform.  Fifteen years later, with a more mellow attitude and a little more hard-won experience under my belt, I am much more of a believer in building systems that use the right tools for the right jobs.  The database is there to provide durability, handle concurrency, provide consistency, and generally take away the stress of storing data.  Put the data in the database.  Put logic that surrounds the data access in a data API and expose that to your applications.&lt;/p&gt;

&lt;p&gt;In general, I believe that the trend regarding stored procedures is to move away from them -- especially when architecting systems that need to be highly available and massively scalable.  The trends you will find around these types of architectures are the use of microservices, the adoption of various types of horizontally scalable data platforms (Distributed SQL, NoSQL, ElasticSearch, Spark, Snowflake, etc.), and a general desire to decouple business logic from data operations.&lt;/p&gt;

&lt;p&gt;I also believe that the potential pros that can be gained from the use of stored procedures can also be gained in other ways -- through the use of microservices and through good coding practices; however, the potential cons are much harder to overcome.&lt;/p&gt;

&lt;p&gt;I am hesitant to go so far as to call stored procedures a “crutch.”  But I do think that if a system architect were to adopt a policy of explicitly barring the use of stored procedures in favor of other mechanisms that support reuse and decoupling of data and logic concerns that it would be a decision I would consider healthy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; I work for Cockroach Labs and in CockroachDB, we don’t support stored procedures.  The discussion around whether we should support stored procedures comes up fairly often.  It would certainly make data migrations easier.  And, for some of the reasons noted above in this article, stored procedures can certainly add some value.  But for the most part, we seem to take the stance that most modern systems are not adopting stored procedures, and so, this feature never seems to get high enough prioritization to get done.  Instead, we seem to take on features that enable adoption of the more forward-thinking trends (cloud native, microservices, containerization, serverless).  We may support them in the future, and if we do, I hope we will put some guardrails around their usage to gently nudge users away from using them in potentially limiting ways.&lt;/p&gt;

&lt;p&gt;Since the use of stored procedures is, as noted above, a bit of a religious war, I’d love to hear any comments you have on the pros and cons of stored procs and whether you think they are a tool that has a place in modern application architectures.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>storedprocs</category>
      <category>decoupling</category>
      <category>database</category>
    </item>
    <item>
      <title>Haskell Quicksort in JavaScript</title>
      <author>Caleb Weeks</author>
      <pubDate>Wed, 20 Oct 2021 21:48:22 +0000</pubDate>
      <link>https://dev.to/weeksseth/haskell-quicksort-in-javascript-3lma</link>
      <guid>https://dev.to/weeksseth/haskell-quicksort-in-javascript-3lma</guid>
      <description>&lt;p&gt;Haskell has a particularly elegant implementation of the quicksort algorithm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Ord&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;smaller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;bigger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="kr"&gt;in&lt;/span&gt;  &lt;span class="n"&gt;smaller&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;bigger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://mmhaskell.com/blog/2019/5/13/quicksort-with-haskell"&gt;This algorithm&lt;/a&gt; creates a new array that is sorted instead of sorting the given array in place. Therefore, there is no point in implementing a partitioning strategy (usually Hoare's).&lt;/p&gt;

&lt;p&gt;To someone who is unfamiliar with Haskell, this may look like a bunch of nonsense. Let's break it down and see how we might come up with an elegant version in JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-signature"&gt;
  &lt;/a&gt;
  Type Signature
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Ord&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is just a type signature which can be read like this: "&lt;code&gt;qs&lt;/code&gt; is a function that takes an array of &lt;code&gt;as&lt;/code&gt; and produces a new array of &lt;code&gt;as&lt;/code&gt; where each element &lt;code&gt;a&lt;/code&gt; can be compared to another." The &lt;code&gt;(Ord a)&lt;/code&gt; part is a type constraint that means that &lt;code&gt;as&lt;/code&gt; need to be comparable, which makes sense since this is a sorting algorithm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pattern-matching"&gt;
  &lt;/a&gt;
  Pattern Matching
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;-- and so on...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pattern matching is kind of like function overloading combined with destructuring. JavaScript does not have function overloading, but it does have destructuring. We can write &lt;code&gt;(x:xs)&lt;/code&gt; as &lt;code&gt;[x, ...xs]&lt;/code&gt; in JavaScript. Unfortunately, we'll have to manually check if the array is empty or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-expression"&gt;
  &lt;/a&gt;
  Let Expression
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;smaller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;bigger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kr"&gt;in&lt;/span&gt;  &lt;span class="n"&gt;smaller&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;bigger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Haskell, everything is an expression instead of a statement. Expressions are things that produce values. Statements are just lines of code that do something. Sometimes, it is useful to define intermediate values in an expression, and that is what the let block does. The result of the block is an array of &lt;code&gt;smaller ++ [x] ++ bigger&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list-comprehension"&gt;
  &lt;/a&gt;
  List Comprehension
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List comprehension generates lists (or arrays) using generators and guards (or filters). This code can be read "give me a list of &lt;code&gt;as&lt;/code&gt; where each &lt;code&gt;a&lt;/code&gt; is taken from the &lt;code&gt;xs&lt;/code&gt; list and is less than or equal to &lt;code&gt;x&lt;/code&gt;." (This is really just syntactic sugar on top of do notation, which itself is just syntactic sugar for monadic composition, but that's a topic for another time.)&lt;/p&gt;

&lt;p&gt;Unfortunately, JavaScript does not have list comprehension, so the best we can do is use the &lt;code&gt;Array.filter&lt;/code&gt; method: &lt;code&gt;xs.filter(s =&amp;gt; s &amp;lt;= x)&lt;/code&gt;. Arrow functions enable a relatively elegant alternative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-in-javascript"&gt;
  &lt;/a&gt;
  Now in JavaScript
&lt;/h2&gt;

&lt;p&gt;Here's the cool trick to put everything together: since there are only two branches of logic, the ternary operator provides a great mechanism for handling the conditions. We can use destructuring to split the array to its head and tail. Then we use the ternary operator to return an empty array if the head is undefined (since the array was empty), or the new array made up of the smaller array, current element, and bigger array. Here is the final code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// qs :: (Ord a) =&amp;gt; [a] -&amp;gt; [a] (from Haskell)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; 
  &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The coolest part of this implementation is that the whole thing is just an expression! There are no variable declarations at all (except the quicksort algorithm itself being assigned to a constant).&lt;/p&gt;

&lt;p&gt;This is definitely not the most efficient implementation of the quicksort algorithm, but it demonstrates how to write elegant code that makes use of the features of JavaScript. It would be cool to have pattern matching, list comprehensions, and let expressions in JavaScript, but you can get pretty far with the tools that JavaScript already provides. &lt;em&gt;In an industry where code clarity and maintainability is becoming increasingly more critical and where device capacity is practically overkill, the ability to write correct, clear and concise code is invaluable.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>haskell</category>
      <category>javascript</category>
      <category>functional</category>
    </item>
    <item>
      <title>Implementation of the `Select all` functionality using react-select package</title>
      <author>Jamal Muradov</author>
      <pubDate>Wed, 20 Oct 2021 21:33:23 +0000</pubDate>
      <link>https://dev.to/ctrlhack/implementation-of-the-select-all-functionality-using-react-select-package-4dh2</link>
      <guid>https://dev.to/ctrlhack/implementation-of-the-select-all-functionality-using-react-select-package-4dh2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This article will explain the implementation details of the &lt;code&gt;Select all&lt;/code&gt; functionality in the multi-select component based on the &lt;a href="https://github.com/jedwatson/react-select"&gt;react-select v5.1.0&lt;/a&gt; package. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/ejjc9"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handlechange-function"&gt;
  &lt;/a&gt;
  handleChange function
&lt;/h2&gt;

&lt;p&gt;The primary logic of the "Select all" option has been implemented in this function. &lt;br&gt;
There can be three main scenarios in the process: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All the elements in the list are selected.&lt;/li&gt;
&lt;li&gt;Some of the options in the menu are selected&lt;/li&gt;
&lt;li&gt;None of the options is selected.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first case happens under certain conditions: the current state of the &lt;code&gt;Select all&lt;/code&gt; option is unchecked, the length of the selected elements is greater than zero, meanwhile, either the &lt;code&gt;Select all&lt;/code&gt; option or all the options in the menu except the &lt;code&gt;Select all&lt;/code&gt; option are selected. If these conditions are met, then all the elements in the menu are checked. &lt;br&gt;
 In the second case, we again check if the length of the selected options is greater than zero, and neither the &lt;code&gt;Select all&lt;/code&gt; option nor all of the remaining options in the menu list are selected. If that is the case, then it means only some of the elements are selected. &lt;br&gt;
The third case is the condition in which neither all the elements nor some of them are selected which happens when the &lt;code&gt;Select all&lt;/code&gt; option is set to the unchecked state. If you look at the code, you will see that only filtered options have been used. It is because the default value of filter input is an empty string which works perfectly in both cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const handleChange = (selected: Option[]) =&amp;gt; {
    if (
      selected.length &amp;gt; 0 &amp;amp;&amp;amp;
      !isAllSelected.current &amp;amp;&amp;amp;
      (selected[selected.length - 1].value === selectAllOption.value ||
        JSON.stringify(filteredOptions) ===
          JSON.stringify(selected.sort(comparator)))
    )
      return props.onChange(
        [
          ...(props.value ?? []),
          ...props.options.filter(
            ({ label }: Option) =&amp;gt;
              label.toLowerCase().includes(filterInput?.toLowerCase()) &amp;amp;&amp;amp;
              (props.value ?? []).filter((opt: Option) =&amp;gt; opt.label === label)
                .length === 0
          )
        ].sort(comparator)
      );
    else if (
      selected.length &amp;gt; 0 &amp;amp;&amp;amp;
      selected[selected.length - 1].value !== selectAllOption.value &amp;amp;&amp;amp;
      JSON.stringify(selected.sort(comparator)) !==
        JSON.stringify(filteredOptions)
    )
      return props.onChange(selected);
    else
      return props.onChange([
        ...props.value?.filter(
          ({ label }: Option) =&amp;gt;
            !label.toLowerCase().includes(filterInput?.toLowerCase())
        )
      ]);
  };

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#custom-option-component"&gt;
  &lt;/a&gt;
  Custom Option component
&lt;/h2&gt;

&lt;p&gt;By overriding the Option component, checkboxes are added to the options list, moreover, if some of the elements are checked, then the indeterminate state of the &lt;code&gt;Select all&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const Option = (props: any) =&amp;gt; (
    &amp;lt;components.Option {...props}&amp;gt;
      {props.value === "*" &amp;amp;&amp;amp;
      !isAllSelected.current &amp;amp;&amp;amp;
      filteredSelectedOptions?.length &amp;gt; 0 ? (
        &amp;lt;input
          key={props.value}
          type="checkbox"
          ref={(input) =&amp;gt; {
            if (input) input.indeterminate = true;
          }}
        /&amp;gt;
      ) : (
        &amp;lt;input
          key={props.value}
          type="checkbox"
          checked={props.isSelected || isAllSelected.current}
          onChange={() =&amp;gt; {}}
        /&amp;gt;
      )}
      &amp;lt;label style={{ marginLeft: "5px" }}&amp;gt;{props.label}&amp;lt;/label&amp;gt;
    &amp;lt;/components.Option&amp;gt;
  );

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#custom-input-component"&gt;
  &lt;/a&gt;
  Custom Input component
&lt;/h2&gt;

&lt;p&gt;This custom input component creates a dotted box around the search input and automatically sets the focus to the search input which is helpful when there are lots of selected options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const Input = (props: any) =&amp;gt; (
    &amp;lt;&amp;gt;
      {filterInput.length === 0 ? (
        &amp;lt;components.Input autoFocus={props.selectProps.menuIsOpen} {...props}&amp;gt;
          {props.children}
        &amp;lt;/components.Input&amp;gt;
      ) : (
        &amp;lt;div style={{ border: "1px dotted gray" }}&amp;gt;
          &amp;lt;components.Input autoFocus={props.selectProps.menuIsOpen} {...props}&amp;gt;
            {props.children}
          &amp;lt;/components.Input&amp;gt;
        &amp;lt;/div&amp;gt;
      )}
    &amp;lt;/&amp;gt;
  );

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#custom-filter-function"&gt;
  &lt;/a&gt;
  Custom filter function
&lt;/h2&gt;

&lt;p&gt;This custom function is used to keep the &lt;code&gt;Select all&lt;/code&gt; option out of the filtering process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const customFilterOption = ({ value, label }: Option, input: string) =&amp;gt;
    (value !== "*" &amp;amp;&amp;amp; label.toLowerCase().includes(input.toLowerCase())) ||
    (value === "*" &amp;amp;&amp;amp; filteredOptions?.length &amp;gt; 0);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#custom-oninputchange-function"&gt;
  &lt;/a&gt;
  Custom onInputChange function
&lt;/h2&gt;

&lt;p&gt;This function is used to get the filter input value and set it to an empty string on the menu close event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const onInputChange = (
    inputValue: string,
    event: { action: InputAction }
  ) =&amp;gt; {
    if (event.action === "input-change") setFilterInput(inputValue);
    else if (event.action === "menu-close" &amp;amp;&amp;amp; filterInput !== "")
      setFilterInput("");
  };

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#custom-keydown-function"&gt;
  &lt;/a&gt;
  Custom KeyDown function
&lt;/h2&gt;

&lt;p&gt;This function prevents default action on the space bar button click if the filter input value is not an empty string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const onKeyDown = (e: React.KeyboardEvent&amp;lt;HTMLElement&amp;gt;) =&amp;gt; {
    if (e.key === " " &amp;amp;&amp;amp; !filterInput) e.preventDefault();
  };

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#handling-state-and-label-value-of-raw-select-all-endraw-option"&gt;
  &lt;/a&gt;
  Handling state and label value of &lt;code&gt;Select all&lt;/code&gt; option
&lt;/h2&gt;

&lt;p&gt;The value of &lt;code&gt;isAllSelected&lt;/code&gt; determines the state of the &lt;code&gt;Select all&lt;/code&gt; option. And the value of the &lt;code&gt;selectAllLabel&lt;/code&gt; determines the value of the &lt;code&gt;Select all&lt;/code&gt; option label.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  isAllSelected.current =
      JSON.stringify(filteredSelectedOptions) ===
      JSON.stringify(filteredOptions);

    if (filteredSelectedOptions?.length &amp;gt; 0) {
      if (filteredSelectedOptions?.length === filteredOptions?.length)
        selectAllLabel.current = `All (${filtereds also sus also suOptions.length}) selected`;
      else
        selectAllLabel.current = `${filteredSelectedOptions?.length} / ${filteredOptions.length} selected`;
    } else selectAllLabel.current = "Select all";

    selectAllOption.label = selectAllLabel.current;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-else"&gt;
  &lt;/a&gt;
  What else
&lt;/h2&gt;

&lt;p&gt;This custom multi-select component also provides custom single-select with the checkboxes near options. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#side-notes"&gt;
  &lt;/a&gt;
  Side Notes
&lt;/h2&gt;

&lt;p&gt;If you have a large number of options, you can solve performance issues,  by rendering only the items in the list that are currently visible which allows for efficiently rendering lists of any size.  To do that you can override the &lt;code&gt;MenuList&lt;/code&gt; component by implementing &lt;a href="https://react-window.now.sh"&gt;react-window's FixedSizeList&lt;/a&gt;. For implementation details, you can look at  &lt;a href="https://stackoverflow.com/a/56390949"&gt;this stack overflow answer&lt;/a&gt;. &lt;br&gt;
In the end, this is my first tech blog as a junior frontend developer, so it may not be very well-written. I'd appreciate any feedback.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build times in a statically generated site</title>
      <author>Anvil Engineering</author>
      <pubDate>Wed, 20 Oct 2021 21:26:44 +0000</pubDate>
      <link>https://dev.to/useanvil/build-times-in-a-statically-generated-site-2fl8</link>
      <guid>https://dev.to/useanvil/build-times-in-a-statically-generated-site-2fl8</guid>
      <description>&lt;p&gt;Web development has grown into something unrecognizable from its inception. Instead of hosting your own server, web developers don't host or even pay for their own server. Sending static files to the server via FTP is ancient history. None of the files we write as web developers are truly static anymore; instead we have a build step that generates files into something incoherent to the human reader. This blog post will cover the good, the bad, and some tips to navigate this new era of compilation in web development using a &lt;a href="https://www.cloudflare.com/learning/performance/static-site-generator/"&gt;Static Site Generator&lt;/a&gt; and a host for the statically generated site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h3&gt;

&lt;p&gt;There are a variety of options for choosing a Static Site Generator and a host for your site. For reference, I will list some options below, but for the purposes of this blog post I will refer to &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; hosted on &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;, as that's what we use for &lt;a href="https://dev.to/"&gt;this site&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;SSGs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gatsby&lt;/li&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;Nuxt.js&lt;/li&gt;
&lt;li&gt;11ty&lt;/li&gt;
&lt;li&gt;Jekyll&lt;/li&gt;
&lt;li&gt;Hugo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hosts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gatsby Cloud&lt;/li&gt;
&lt;li&gt;Vercel (native host for Next.js)&lt;/li&gt;
&lt;li&gt;Netlify&lt;/li&gt;
&lt;li&gt;GitHub Pages&lt;/li&gt;
&lt;li&gt;GitLab Pages&lt;/li&gt;
&lt;li&gt;AWS Amplify&lt;/li&gt;
&lt;li&gt;Host yourself!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#build-times-the-good"&gt;
  &lt;/a&gt;
  Build Times: The Good
&lt;/h2&gt;

&lt;p&gt;Your website 'build' does a lot of really awesome things, all of which are meant to deliver a more performant website and drive better user experience. While each build varies between companies and developers, there are a few standard optimizations that SSGs like Gatsby do automatically. Optimizations such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minified JS&lt;/li&gt;
&lt;li&gt;Remove unused CSS&lt;/li&gt;
&lt;li&gt;Minified CSS&lt;/li&gt;
&lt;li&gt;Transpile JS to old browser syntax&lt;/li&gt;
&lt;li&gt;Prebuild HTML pages and upload them to CDN (this is what ‘Static Site Generation' is!)&lt;/li&gt;
&lt;li&gt;Asset processing &amp;amp; bundling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can do all of these things yourself, without a static site generator. They are all customizable as well, but letting a static site generator take care of these will save you immense time and provide your site users with a great experience.&lt;/p&gt;

&lt;p&gt;SSGs also automatically solve issues for you, ones that are inherently annoying and/or not directly related to building your site. By solving these problems for developers, we are able to spend more of our time building out product features and styles for our site, A.K.A. what we all would much rather do than configuration :). A few of these problems automatically solved for us are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caching strategy and caching headers&lt;/li&gt;
&lt;li&gt;Web crawlability: by serving static HTML, web crawlers can index our site optimally and our SEO is already great&lt;/li&gt;
&lt;li&gt;Asset processing &amp;amp; bundling: yes, this is an optimization above. But this is a huge performance problem that is solved out of the box for us!&lt;/li&gt;
&lt;li&gt;Development and production builds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lastly, using SSGs also opens the door for optional plugins and libraries designed for those SSGs. There are many plugins on Netlify that are incredibly easy to install and set up, oftentimes just one-click installs. Some helpful ones from Netlify include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/cypress-io/netlify-plugin-cypress#readme"&gt;Cypress&lt;/a&gt; - run your cypress tests as part of your build process; prevent a deploy if tests fail&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/netlify/netlify-plugin-gatsby#readme"&gt;Essential Gatsby&lt;/a&gt; (including caching) - Speed up builds with a cache and other essential Gatsby helpers&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aka-raccoon/netlify-plugin-gmail#readme"&gt;Gmail&lt;/a&gt; - send an email after a deploy succeeds/fails&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/netlify-labs/netlify-plugin-lighthouse#readme"&gt;Lighthouse&lt;/a&gt; - generate a lighthouse report for the build, and configure to fail a deploy if your score is below a certain threshold&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cdeleeuwe/netlify-plugin-submit-sitemap#readme"&gt;Submit sitemap&lt;/a&gt; - automatically submit your sitemap to search engines after a successful deploy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many more plugins from Netlify as well, and as you can tell they do some magic to make the household chores of web development disappear. I highly encourage checking out the rest of the plugins from Netlify (and Gatsby's plugins too) to see what is possible. There is one huge downside to adding plugins: increasing your build time, the real reason we're writing this blog post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-times-the-bad"&gt;
  &lt;/a&gt;
  Build Times: The Bad
&lt;/h2&gt;

&lt;p&gt;Before I get into the dark side of SSGs &amp;amp; build times, let me come out and say, unequivocally, &lt;strong&gt;longer build times are worth it for your site to perform exceptionally well&lt;/strong&gt;. While all the reasons below are painful, the magic that happens during build time greatly outweighs that pain.&lt;/p&gt;

&lt;p&gt;There are 3 main pain points behind build times:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Waiting sucks&lt;/li&gt;
&lt;li&gt;Wasting resources (&amp;amp; money)&lt;/li&gt;
&lt;li&gt;Build timeouts&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#waiting-sucks"&gt;
  &lt;/a&gt;
  Waiting sucks
&lt;/h3&gt;

&lt;p&gt;Besides the fact you are sitting around waiting for a build to complete, with long build times you are also destroying the immediate feedback loop that most developers enjoy nowadays with things like &lt;a href="https://webpack.js.org/concepts/hot-module-replacement/"&gt;Hot Module Replacement&lt;/a&gt;. Most development happens locally, but for times where you need to test a live site, do you really want to wait more than 5 minutes to see how things went? Netlify's default timeout is 15 minutes, and if you are waiting that long just for a timeout to occur, you are not getting much done that day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wasting-resources-amp-money"&gt;
  &lt;/a&gt;
  Wasting resources (&amp;amp; money)
&lt;/h3&gt;

&lt;p&gt;Building your site from Gatsby takes computing resources: a server needs to run the build process and memory needs to be allocated. A 45-minute build certainly beats running your own server 24/7, but Netlify charges by build minute. Those 45-minute builds will add up quickly, especially compared to &amp;lt;10 or &amp;lt;5 minute builds.&lt;/p&gt;

&lt;p&gt;At Anvil, we're on a mission to eliminate paperwork, for many reasons. One of which is to help the environment. What's another way to help the environment? You guessed it: keep those build times low! Together, we can save the 🌴🎄🌳 and some ⚡️🔋🔌, all while saving some 💰🤑💸.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-timeouts"&gt;
  &lt;/a&gt;
  Build timeouts
&lt;/h3&gt;

&lt;p&gt;Build timeouts and wasting resources are two reasons that go hand in hand. Timeouts are there specifically for preventing excessive resource usage and so you don't get charged 10x what you normally pay when your deploy is accidentally stuck in an infinite loop.&lt;/p&gt;

&lt;p&gt;But doesn't that make timeouts a good thing? Yes. Except in the case where your site doesn't loop infinitely (I hope most of the time) and you are in a time crunch to get features out. Local development with SSGs like Gatsby relaxes the optimizations so you can develop faster. It's likely you made lots of changes that worked locally, only for the build to timeout when deploying to production. Incredibly frustrating and potentially release-ruining, yet build timeouts are still helpful and critical to have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-your-build-timeout"&gt;
  &lt;/a&gt;
  Avoiding your build timeout
&lt;/h2&gt;

&lt;p&gt;Now let's dive into actually resolving the issue of long builds. This blog post was inspired by an urgent need to reduce our build time for this very site (useanvil.com), and all the tips below were the things we did to reduce our bloated build time &lt;strong&gt;from 55+ minutes down to &amp;lt;5 minutes&lt;/strong&gt;, plus some others we might do in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#audit-your-site"&gt;
  &lt;/a&gt;
  Audit your site
&lt;/h3&gt;

&lt;p&gt;Before you significantly change any configuration, code, or assets, review your codebase and site and remove dead code.&lt;/p&gt;

&lt;p&gt;Part of the magic that Gatsby provides is creating a page template for pages like blog posts, documentation, and other article-based pages. Then, you supply the data for each article (usually in Markdown) and Gatsby builds each page with that template. So it might seem like removing 1 JS file and a few lines of code won't make a big difference, but in reality that could be tens, hundreds or even thousands of pages that are built statically.&lt;/p&gt;

&lt;p&gt;In our case, we removed an outdated template of the site and all the articles with it. A 1-minute change in our codebase yielded a 15+ minute build time reduction, &lt;strong&gt;from 55+ minutes to ~40 minutes&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enable-caching"&gt;
  &lt;/a&gt;
  Enable caching
&lt;/h3&gt;

&lt;p&gt;We had caching enabled with &lt;a href="https://github.com/jlengstorf/netlify-plugin-gatsby-cache#readme"&gt;this deprecated plugin&lt;/a&gt; already, but we did upgrade to the &lt;a href="https://github.com/netlify/netlify-plugin-gatsby#readme"&gt;Essential Gatsby Plugin&lt;/a&gt;. Since we already had caching enabled, there wasn't a huge improvement in build times. But if your site is image heavy, your build time will be dramatically reduced after the first build to load the cache with pages and assets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compress-images"&gt;
  &lt;/a&gt;
  Compress images
&lt;/h3&gt;

&lt;p&gt;I'm not talking about gzipping your images to be sent to the client when they visit your site. Gatsby (and all the other SSG's) take care of that for you.&lt;/p&gt;

&lt;p&gt;I'm referring to before your build process even starts. There are two kinds of image compression: &lt;a href="https://www.sciencedirect.com/topics/engineering/lossless-compression#:~:text=Lossless%20compression%20is%20a%20compression,shorthand%20to%20signify%20redundant%20data."&gt;lossless&lt;/a&gt; and &lt;a href="https://www.sciencedirect.com/topics/computer-science/lossy-compression#:~:text=Lossy%20compression%20is%20a%20method,image%2C%20thereby%20reducing%20its%20size."&gt;lossy&lt;/a&gt;. Lossless reduces file size without reducing image quality, and lossy reduces file size while reducing image quality (supposed to be imperceptible to the human eye, but that is for you to determine).&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://trimage.org/"&gt;trimage&lt;/a&gt;, a cross platform lossless image compression tool, we reduced the images for ~120 different articles, totalling 20MB+ reduced. We can squeeze more out of our images if we use lossy compression, and run it on all images on our site. But in the short term we targeted the heavy hitters on our article-based pages.&lt;/p&gt;

&lt;p&gt;I'd like to highlight that for this blog post and to meet our deadline, I only ran the compression tool on 2 directories with ~120 articles worth of images. To prevent us from getting into a build time hole again, I've set up the following bash script in a GitHub action, so we automatically compress png and jpg files as pull requests come in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c"&gt;# example usage: ./compress-images.sh -q src .exiftool.config&lt;/span&gt;

&lt;span class="c"&gt;# to be used in GH action - need to install trimage &amp;amp; exiftool to use&lt;/span&gt;

&lt;span class="c"&gt;# run this script on a directory or file to compress all pngs, jpgs, and jpegs&lt;/span&gt;
&lt;span class="c"&gt;# if run on a directory, this will recurse to subdirectories&lt;/span&gt;

&lt;span class="c"&gt;# this script will only attempt compression once on an image,&lt;/span&gt;
&lt;span class="c"&gt;# afterwards the script will not run again -- this is done by adding a meta flag&lt;/span&gt;
&lt;span class="c"&gt;# to the image file itself that signifies trimage compression was already run&lt;/span&gt;

&lt;span class="nv"&gt;VERBOSE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true

&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; True &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"--quiet"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"-q"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;VERBOSE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false
    shift &lt;/span&gt;1
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;break
&lt;/span&gt;&lt;span class="k"&gt;fi
done

&lt;/span&gt;&lt;span class="nv"&gt;EXIFTOOL_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;

&lt;span class="k"&gt;for &lt;/span&gt;filename &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;/&lt;span class="k"&gt;**&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
  if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
  &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;$VERBOSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Entering directory &lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="nv"&gt;$EXIFTOOL_CONFIG&lt;/span&gt;
  &lt;span class="k"&gt;fi

  &lt;/span&gt;&lt;span class="nv"&gt;TRIMMED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;exiftool &lt;span class="nt"&gt;-trimmed&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$TRIMMED&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;".png"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;".jpg"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;".jpeg"&lt;/span&gt;&lt;span class="o"&gt;)]]&lt;/span&gt;
  &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;$VERBOSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Trimming &lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    trimage &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt;
    exiftool &lt;span class="nt"&gt;-config&lt;/span&gt; &lt;span class="nv"&gt;$EXIFTOOL_CONFIG&lt;/span&gt; &lt;span class="nt"&gt;-trimmed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="nt"&gt;-overwrite_original&lt;/span&gt;
  &lt;span class="k"&gt;fi
done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;compress-images.sh: bash script to compress all images in a given directory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Besides running trimage on all files, the script also uses a tool called &lt;a href="https://exiftool.org/"&gt;exiftool&lt;/a&gt; that adds a meta flag to the compressed image. This is so we don't run trimage again on already compressed files. This doesn't have any impact on the build time for Gatsby/Netlify (the one this blog post is on), but this will save immense time (I'm talking hours, especially if your project has a lot of images) on pull requests that run this GitHub Action by avoiding compressing images twice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#------------------------------------------------------------------------------
# File:         example.config
#
# Description:  configuration to enable trimmed flag for png and jpeg
#
# Notes:        See original example @ https://exiftool.org/config.html
#------------------------------------------------------------------------------

# NOTE: All tag names used in the following tables are case sensitive.

# The %Image::ExifTool::UserDefined hash defines new tags to be added
# to existing tables.
%Image::ExifTool::UserDefined = (
    # new PNG tags are added to the PNG::TextualData table:
    'Image::ExifTool::PNG::TextualData' =&amp;gt; {
        trimmed =&amp;gt; { },
    },
    'Image::ExifTool::XMP::Main' =&amp;gt; {
        trimmed =&amp;gt; {
            SubDirectory =&amp;gt; {
                TagTable =&amp;gt; 'Image::ExifTool::UserDefined::trimmed',
            },
        },
    }
);

%Image::ExifTool::UserDefined::trimmed = (
    GROUPS        =&amp;gt; { 0 =&amp;gt; 'XMP', 1 =&amp;gt; 'XMP-trimmed', 2 =&amp;gt; 'Image' },
    NAMESPACE     =&amp;gt; { 'trimmed' =&amp;gt; 'http://ns.myname.com/trimmed/1.0/' },
    WRITABLE      =&amp;gt; 'string',
    trimmed =&amp;gt; { },
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;.exiftool.config: config file to enable custom meta tag (trimmed) on PNGs and JPEGs&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here's a video I sped up of MBs dropping as I ran the above script with trimage and exiftool, something to the delight of developers everywhere:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l_XwVoco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmkm4gov7ygitt1kxues.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l_XwVoco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmkm4gov7ygitt1kxues.gif" alt="trimmed-images"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;First 1/4 of all files in &lt;code&gt;src&lt;/code&gt;. You'll notice that it hangs around 106.4MB (and actually slightly goes higher in bytes). That is because the script is running on all files in &lt;code&gt;src&lt;/code&gt;, including the blog-posts I already ran trimage on ad-hoc. The slight bump in bytes is exiftool adding the compression flag to metadata on the image.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#query-only-for-what-you-need"&gt;
  &lt;/a&gt;
  Query only for what you need
&lt;/h3&gt;

&lt;p&gt;Gatsby uses GraphQL to get data from Markdown-based articles, and for various other parts of your site. Each query takes time during your build so make sure you do 2 things to mitigate query time during your build:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Only query for data you need&lt;/em&gt; - in our case, we had 1-2 fields on each article being queried (on over 100 articles)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Only query for data once&lt;/em&gt; - we adhere to this one well, but avoid calling the same query in a different place. If possible, pass down the data via props to components that need it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enabling the upgraded Essential Gatsby plugin, compressing ~120 pages worth of images, and removing fields from GraphQL queries brought the build time down by another ~15 minutes, &lt;strong&gt;from ~40 minutes to ~25 minutes&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#keep-up-to-date-with-package-versions"&gt;
  &lt;/a&gt;
  Keep up to date with package versions
&lt;/h3&gt;

&lt;p&gt;This just in: technology gets better with time. It's true! Just like how the Mesopotamians invented the wheel to revolutionize their lives, we upgraded Gatsby from v2.x to v3.x (3.14.1 to be specific) and upgraded to the latest versions of our plugins which revolutionized our build time by another ~15 minutes! Just by upgrading major versions, we went from &lt;strong&gt;~25 minutes to ~10 minutes&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#image-compression-on-all-the-things"&gt;
  &lt;/a&gt;
  Image compression on all the things
&lt;/h3&gt;

&lt;p&gt;The above section was aimed at the first pass on our biggest directories of images. The second time around, running on our &lt;em&gt;entire &lt;code&gt;src&lt;/code&gt; directory&lt;/em&gt;, got us down &lt;strong&gt;from ~10 minutes to ~6m minutes&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#gatsbys-experimental-flags"&gt;
  &lt;/a&gt;
  Gatsby's experimental flags
&lt;/h3&gt;

&lt;p&gt;The last hurdle is actually one we have yet to deploy to this site—I'm still playing around with the configuration, but using Gatsby's "experimental" flags has &lt;strong&gt;our site building in &amp;lt;5 minutes&lt;/strong&gt; locally &amp;amp; in test environments. The ones I'm currently using and testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES=true&lt;/code&gt; - environment variable to turn on incremental page build, which only builds pages that have changed since the last build instead of building all the pages again. This is shipped as part of Gatsby V3, so if you are using it V3, you have this baked in.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY=32&lt;/code&gt; - environment variable that controls how many GraphQL queries are run in parallel. The default is 4.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GATSBY_CPU_COUNT=logical_cores&lt;/code&gt; - environment variable that controls how many cores are used while building. The default is &lt;code&gt;physical_cores&lt;/code&gt;, and you can supply a definitive number like &lt;code&gt;2&lt;/code&gt; instead of letting Gatsby calculate your physical or logical cores.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PARALLEL_SOURCING: true&lt;/code&gt; - gatsby-config flag to run sourcing plugins in parallel. Requires Node v14.10 or higher.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PARALLEL_QUERY_RUNNING&lt;/code&gt; - gatsby-config flag to run GraphQL queries in parallel. I would recommend using this over &lt;code&gt;GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY&lt;/code&gt;, since this is managed/optimized by the Gatsby team. Requires Node v14.10 or higher.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FAST_DEV: true&lt;/code&gt; - won't help with your build timeouts, but will help speed up your dev build and dev page loading.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#extra-stuff-we-didnt-do-yet"&gt;
  &lt;/a&gt;
  Extra stuff we didn't do (yet)
&lt;/h3&gt;

&lt;p&gt;Gatsby has an entire page dedicated to all the different ways they recommend improving your build performance, which you can find &lt;a href="https://www.gatsbyjs.com/docs/how-to/performance/improving-build-performance/"&gt;here&lt;/a&gt;. The steps I've taken in this blog post and what Gatsby recommends are great ways to reduce your build time, but they are not the only ways! If you exhaust both lists, think outside the box about how you can effectively improve your build and site performance.&lt;/p&gt;

&lt;p&gt;There are two actions from the Gatsby recommendations that I like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.netlify.com/blog/2020/02/25/gatsby-build-speed-improvements-with-parallel-image-processing/"&gt;&lt;em&gt;Parallelize your image processing&lt;/em&gt;&lt;/a&gt; - this is done natively on Gatsby Cloud; if you are like us and host your site on Netlify, this is the plugin to (experimentally) parallelize image processing as well.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.gatsbyjs.com/docs/how-to/performance/improving-site-performance/#reduce-your-javascript-bundle-cost"&gt;&lt;em&gt;Optimize your bundle(s)&lt;/em&gt;&lt;/a&gt; - we have not had the need to do this yet, but auditing and optimizing your JS bundle(s) will help bring the build time down, as well as improve your site performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#gatsby-specific-problem-node-out-of-memory"&gt;
  &lt;/a&gt;
  Gatsby specific problem - Node out of memory
&lt;/h3&gt;

&lt;p&gt;One problem we did run into while hitting our timeout was Node running out of memory. We likely hit this problem since we pushed &lt;em&gt;a lot&lt;/em&gt; of changes all at once. In reality this isn't a Gatsby problem, more of a Node problem. It just happens to affect a lot of Gatsby users, as you can find &lt;a href="https://github.com/gatsbyjs/gatsby/issues/15190"&gt;the issue and solution here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, if you run into something similar and get a stack trace like this while trying to build:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;⠦ Building production JavaScript and CSS bundles

&amp;lt;--- Last few GCs ---&amp;gt;

[19712:0x2dbca30]    45370 ms: Scavenge 1338.2 (1423.9) -&amp;gt; 1337.3 (1423.9) MB, 2.9 / 0.0 ms  (average mu = 0.163, current mu = 0.102) allocation failure
[19712:0x2dbca30]    45374 ms: Scavenge 1338.4 (1423.9) -&amp;gt; 1337.5 (1423.9) MB, 2.8 / 0.0 ms  (average mu = 0.163, current mu = 0.102) allocation failure
[19712:0x2dbca30]    45378 ms: Scavenge 1338.6 (1423.9) -&amp;gt; 1337.7 (1424.4) MB, 2.6 / 0.0 ms  (average mu = 0.163, current mu = 0.102) allocation failure


&amp;lt;--- JS stacktrace ---&amp;gt;

==== JS stack trace =========================================

    0: ExitFrame [pc: 0x34eb54adbe1d]
    1: StubFrame [pc: 0x34eb54a875c2]
Security context: 0x2caa7a21e6e9 &amp;lt;JSObject&amp;gt;
    2: /* anonymous */(aka /* anonymous */) [0x23804dd52ac9] [/home/derek/dev/project1/node_modules/@babel/core/lib/transformation/file/merge-map.js:~155] [pc=0x34eb5534b963](this=0x01389b5022b1 &amp;lt;null&amp;gt;,m=0x1c2e6adbae29 &amp;lt;Object map = 0x11c6eb590b11&amp;gt;)
    3: arguments adaptor frame: 3-&amp;gt;1
    4: forEach...

FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you need to increase your node heap size by setting the &lt;code&gt;NODE_OPTIONS&lt;/code&gt; environment variable during build time to &lt;code&gt;--max_old_space_size=4096&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For Netlify users, that means doing one of the following (based on how you configure your project):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you configure your project yourself, in your &lt;code&gt;netlify.toml&lt;/code&gt; add this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[build.environment]&lt;/span&gt;
  &lt;span class="py"&gt;NODE_OPTIONS&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"--max_old_space_size=4096"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If you use the Netlify dashboard to configure, go to &lt;code&gt;Build &amp;amp; Deploy &amp;gt; Environment&lt;/code&gt;. Add a variable called &lt;code&gt;NODE_OPTIONS&lt;/code&gt;, set it's value to literally &lt;code&gt;--max_old_space_size=4096&lt;/code&gt;, with no quotations. Like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouhDRRJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxriv2o0pdy409t3zu4w.png" alt="node options"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-quest-for-sub-minute-build-times"&gt;
  &lt;/a&gt;
  The quest for sub minute build times
&lt;/h2&gt;

&lt;p&gt;Believe it or not, sub minute build times do exist. And for sites with an immense number of pages too. The easiest way to get there is to throw more computing power at it: &lt;a href="https://www.gatsbyjs.com/docs/how-to/performance/improving-build-performance/#run-builds-on-a-machine-with-more-and-higher-powered-cpus"&gt;Gatsby even mentions it as one of their tips to reduce build time&lt;/a&gt;. But for most of us, we don't have infinite compute resources at our disposal, and as we learned earlier we want to save some power and money!&lt;/p&gt;

&lt;p&gt;I hope you learned something in this post, so you take heed and avoid your build timeout in advance of your big releases. Continue on for that sub minute build time, and even if it doesn't come today—remember that technology is getting better and more efficient everyday. If you have any questions or want to share your build optimization tips, let us know at &lt;a href="//mailto:developers@useanvil.com"&gt;developers@useanvil.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;*&lt;/sup&gt;derivatives (none of which are the topic of this blog post) such as:&lt;br&gt;
  &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;SSR: Server Side Rendering&lt;/li&gt;
    &lt;li&gt;ISG: Incremental Static (Re)Generation&lt;/li&gt;
    &lt;li&gt;DSG: Deferred Static Generation&lt;/li&gt;
  &lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>gatsby</category>
      <category>css</category>
    </item>
    <item>
      <title>A Development Project With Awesome Graph Algorithm Implementation And PWA</title>
      <author>Souvik Roy</author>
      <pubDate>Wed, 20 Oct 2021 20:17:16 +0000</pubDate>
      <link>https://dev.to/souvik1406/a-development-project-with-awesome-graph-algorithm-implementation-and-pwa-4lhk</link>
      <guid>https://dev.to/souvik1406/a-development-project-with-awesome-graph-algorithm-implementation-and-pwa-4lhk</guid>
      <description>&lt;p&gt;So in this single project I chose to sharpen my skills both as a developer and a coder and what better way could be there than to create a website to showcase easy but cool games made from scratch. In this one project I learned javaScript from basic to advanced level and also mastered the art of creating PWA. &lt;/p&gt;

&lt;p&gt;The fact that I had challenged myself to learn graph algorithms took another level of a turn when I was able to understand the minimax algorithm and use beginner friendly JavaScript code to make it come to life. &lt;/p&gt;

&lt;p&gt;The code for the project is in the repo link given below, be sure to download and clone and edit it and commit necessary UI changes as per your need I so wanted to do this in react but then again I wanted a project to be created in native JavaScript and focus more on logic building. Therefore the UI is obviously not great for that completely beats the purpose of the project. The App has a link to redirect you to my blog's PWA and that thing has my front-end skills showcased well. Let me link down both of them below: &lt;/p&gt;

&lt;p&gt;This PWA Gaming App Code : &lt;a href="https://github.com/Souvik1406/gaming-project-minimaxalgo-setservicePWA-implementaion-L_Heaven"&gt;https://github.com/Souvik1406/gaming-project-minimaxalgo-setservicePWA-implementaion-L_Heaven&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Portfolio Page Code : &lt;a href="https://github.com/Souvik1406/advancedblog"&gt;https://github.com/Souvik1406/advancedblog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the hosted versions of the project on the following links : &lt;/p&gt;

&lt;p&gt;Blog : &lt;a href="https://souvikblog2-0new.netlify.app/"&gt;https://souvikblog2-0new.netlify.app/&lt;/a&gt;&lt;br&gt;
Game : &lt;a href="https://minimax-based-game-pwa-by-souvik-roy.netlify.app/"&gt;https://minimax-based-game-pwa-by-souvik-roy.netlify.app/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gamedev</category>
      <category>webdev</category>
      <category>pwa</category>
    </item>
  </channel>
</rss>
