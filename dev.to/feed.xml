<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fall in Love with Open Source üçÅ</title>
      <author>Alex Curtis-Slep | Looking for Remote Dev role</author>
      <pubDate>Fri, 05 Nov 2021 22:28:26 +0000</pubDate>
      <link>https://dev.to/alexcurtisslep/fall-in-love-with-open-source-aib</link>
      <guid>https://dev.to/alexcurtisslep/fall-in-love-with-open-source-aib</guid>
      <description>&lt;p&gt;Last month I participated in &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt;. I made four contributions to open source projects. I learned a bunch, got more development experience, and solidified a bond with open source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zj-NHQ-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8voojj862e8tfsqr9zc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zj-NHQ-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8voojj862e8tfsqr9zc.jpg" alt="Open source visual thanks to Giulia Forsythe on Flickr&amp;lt;br&amp;gt;
" width="399" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2021 was the eighth year Hacktoberfest rocked and rolled. Last year there were &lt;a href="https://www.digitalocean.com/blog/hacktoberfest-recap2020/"&gt;166,057 PR's&lt;/a&gt; merged and this year probably eclipsed that!&lt;/p&gt;

&lt;p&gt;Open source has always intrigued me and I jumped into making contributions before Hacktoberfest. Having gone through Hacktoberfest I can say that it lit a spark under me.&lt;/p&gt;

&lt;p&gt;I did brand new things like create a robots.txt file. Never knew about them before! I made that file for an Elm project. I had never heard of Elm before.&lt;/p&gt;

&lt;p&gt;The magic behind Hacktoberfest and open source runs deep. Not only are there new languages, techniques, and concepts you can indulge in, there are amazing maintainers and contributors you can collaborate and learn from.&lt;/p&gt;

&lt;p&gt;I had Zoom sessions with two project maintainers. They were both super helpful, upbeat and willing to help in any and every way. Shout out to &lt;a class="mentioned-user" href="https://dev.to/kirkcodes"&gt;@kirkcodes&lt;/a&gt;
 and &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
 üôå.&lt;/p&gt;

&lt;p&gt;Kirk's project was the &lt;a href="https://github.com/tkshill/Quarto"&gt;Elm game&lt;/a&gt; I made a robots.txt for. Not only was he helpful with any questions I had, he gave me a great overview of Elm! I had done some research on it, but hearing more about it from someone using it shed even more light on Elm.&lt;/p&gt;

&lt;p&gt;Nick's web3 starter project accounted for two of my contributions. The second of the two issues was trickier than the first. I needed to get Storybook working with webpack5.&lt;/p&gt;

&lt;p&gt;This is a relatively new setup and Nick made updates to his code-base that helped smooth things out. After hitting roadblocks on my own I jumped on a call with Nick, pulled in recent changes, and got it running smoothly.&lt;/p&gt;

&lt;p&gt;Pair programming is a part of working on any team and these were great examples of the power it yields. Open source can offer these important experiences for any developer at any level.&lt;/p&gt;

&lt;p&gt;Going forward I'll do Hacktoberfest every year. It's an opportunity to work on new projects, skills and with folks you may have never worked before.&lt;/p&gt;

&lt;p&gt;Open source doesn't just open its doors in October either. Contributions can be made all year round.&lt;/p&gt;

&lt;p&gt;There's a special energy that emanates when everyone is diving into open source collectively. Hacktoberfest and the community at &lt;a href="https://virtualcoffee.io/"&gt;Virtual Coffee&lt;/a&gt; made it special.&lt;/p&gt;

&lt;p&gt;No matter what time of year it is, find &lt;a href="https://www.codetriage.com/"&gt;projects&lt;/a&gt; you'd like to contribute to. Ask to be assigned to an issue, work and seek help as needed, and get your PR merged like a boss!&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 05 Nov 2021 21:51:33 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-3p1o</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-3p1o</guid>
      <description>&lt;p&gt;Hey there! &lt;/p&gt;

&lt;p&gt;Looking back on this past week, what was something you were proud of accomplishing?&lt;/p&gt;

&lt;p&gt;All wins count ‚Äî big or small üéâ&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Cleaning off your desk... or whatever else might spark joy ‚ù§Ô∏è &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Congrats on your wins! I hope you all have a great day! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/d8D5RoR8adbJaFF3TV/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/d8D5RoR8adbJaFF3TV/giphy.gif" alt="Happy Mushroom saying &amp;quot;It's Friday&amp;quot;" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>100 Days of Code: React, Python and... Projects</title>
      <author>Ryan Whelchel</author>
      <pubDate>Fri, 05 Nov 2021 20:54:58 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/100-days-of-code-react-python-and-projects-2onm</link>
      <guid>https://dev.to/rydwhelchel/100-days-of-code-react-python-and-projects-2onm</guid>
      <description>&lt;p&gt;Recently I have been thrust into the world of webdev as a part of a course in University. It's been a bit of an eye opening experience as it has been my first real foray into Software Engineering in general and seeing my projects start as general confusion and end with an (albeit simple) app with real function has been invigorating. &lt;/p&gt;

&lt;p&gt;I want to &lt;em&gt;use&lt;/em&gt; this burst of interest to fuel some tangible experience in development.&lt;/p&gt;

&lt;p&gt;So I have decided to start a #100daysofcode challenge!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-challenge"&gt;
  &lt;/a&gt;
  The Challenge!
&lt;/h2&gt;

&lt;p&gt;So what will I be doing with this challenge? The title says "React, Python and... Projects", so what does that mean?&lt;/p&gt;

&lt;p&gt;Right now, my experience is limited to using Python's Flask as a web server delivering HTML to the client. I recently learned a tiny amount of React, and part of that tiny amount is how to hook up the two to function in tandem. I want to use this 100daysofcode to delve deeper on what I can do with this tech stack, as well as additions or changes I can make to the stack.&lt;/p&gt;

&lt;p&gt;I should mention that my comfort levels between Python and React/JS couldn't be more lopsided. I have spent over a year practicing coding in Python and I have spent under a month even &lt;em&gt;looking at&lt;/em&gt; Javascript, let alone React. So a majority of this challenge will be experimenting with and learning React/JS.&lt;/p&gt;

&lt;p&gt;So I will post every day regarding at least the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What I worked on today...&lt;/li&gt;
&lt;li&gt;Challenges...&lt;/li&gt;
&lt;li&gt;Plans for tomorrow...&lt;/li&gt;
&lt;li&gt;General thoughts...&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-i-am-working-on"&gt;
  &lt;/a&gt;
  What I am working on
&lt;/h3&gt;

&lt;p&gt;So what will I actually work on &lt;em&gt;now&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;I am still in the university course I mentioned above, and there is a relevant extra credit assignment which is to rewrite a previous app's UI from the course using exclusively React-bootstrap modules. I have no experience with Bootstrap whatsoever, so I am pretty excited. I am simultaneously working on a final group project, so if push comes to shove, my update may include a little progress on that. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-overall-plan"&gt;
  &lt;/a&gt;
  The overall plan
&lt;/h3&gt;

&lt;p&gt;To stay focused, I'll lay out a blueprint for things to work on during this challenge.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;React-bootstrap app rewrite&lt;/li&gt;
&lt;li&gt;Django tutorial and a small app utilizing Django and React&lt;/li&gt;
&lt;li&gt;Reminder app listed &lt;a href="https://dev.to/rydwhelchel/discussion-on-learning-memorization-reviewing-and-an-app-to-tie-it-all-together-1e3g"&gt;here&lt;/a&gt;, utilizing React and either Flask or Django&lt;/li&gt;
&lt;li&gt;Who knows?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#in-closing"&gt;
  &lt;/a&gt;
  In closing
&lt;/h2&gt;

&lt;p&gt;I'm joining in on this challenge to really commit to learning a tech stack that I am not currently that comfortable with. I really am excited to be starting it and delving into the world of React. Also, after some cursory research into Django, I'm pretty excited to learn about that as well!&lt;/p&gt;

&lt;p&gt;Please leave comments below, I would love to hear your thoughts on this challenge and any progress I make in it!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Teaful: tiny, easy and powerful React state management</title>
      <author>Aral Roca</author>
      <pubDate>Fri, 05 Nov 2021 20:41:45 +0000</pubDate>
      <link>https://dev.to/aralroca/teaful-tiny-easy-and-powerful-react-state-management-3j9k</link>
      <guid>https://dev.to/aralroca/teaful-tiny-easy-and-powerful-react-state-management-3j9k</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Original article: &lt;a href="https://aralroca.com/blog/teaful"&gt;https://aralroca.com/blog/teaful&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I've recently talked about Fragmented-store in &lt;a href="https://aralroca.com/blog/react-fragmented-store"&gt;another article&lt;/a&gt;, a library I was developing, explaining future improvements. Well, we have made a reimplementation to make it tinier, easier to use and more powerful, and we have renamed it to &lt;strong&gt;Teaful&lt;/strong&gt;. In this article I will talk about its benefits and how to use it.&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;the final name&lt;/strong&gt;. Since the library was created, it has been called:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;del&gt;&lt;code&gt;Fragmented-store&lt;/code&gt;&lt;/del&gt; -&amp;gt; &lt;del&gt;&lt;code&gt;Fragstore&lt;/code&gt;&lt;/del&gt; -&amp;gt; &lt;strong&gt;&lt;code&gt;Teaful&lt;/code&gt;&lt;/strong&gt; &lt;small&gt;&lt;em&gt;(&lt;a href="https://github.com/teafuljs/teaful"&gt;Teaful GitHub&lt;/a&gt; )&lt;/em&gt;.&lt;/small&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SYQlPwOR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gpimplq13htg1yunhwc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SYQlPwOR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gpimplq13htg1yunhwc.png" alt="Image description" width="880" height="780"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Teaful new logo&lt;/small&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-tiny"&gt;
  &lt;/a&gt;
  Why tiny?
&lt;/h2&gt;

&lt;p&gt;Teaful is &lt;strong&gt;less than 1kb&lt;/strong&gt; and you won't need to write so much code. In other words, it will make your project much more lightweight.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;874 B: index.js.gz
791 B: index.js.br
985 B: index.modern.js.gz
888 B: index.modern.js.br
882 B: index.m.js.gz
799 B: index.m.js.br
950 B: index.umd.js.gz
856 B: index.umd.js.br
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-easy"&gt;
  &lt;/a&gt;
  Why easy?
&lt;/h2&gt;

&lt;p&gt;To consume and modify store properties sometimes requires a lot of boilerplate: actions, reducers, selectors, connect, etc. Teaful's goal is to be &lt;strong&gt;very easy to use&lt;/strong&gt;, to consume a property and overwrite it &lt;strong&gt;without any boilerplate&lt;/strong&gt;. "Tiny" and "powerful", because if you have to write a lot to do a simple thing, your project takes more kb and becomes less maintainable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C7ITZGbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8df8h0xevj2l6qlq1d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C7ITZGbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8df8h0xevj2l6qlq1d2.png" alt="Teaful easy to use" width="880" height="780"&gt;&lt;/a&gt;&lt;br&gt;&lt;small&gt;Teaful: Easy to use without boilerplate&lt;/small&gt;
  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-powerful"&gt;
  &lt;/a&gt;
  Why powerful?
&lt;/h2&gt;

&lt;p&gt;Besides doing the code more maintainable, you avoid many &lt;strong&gt;unnecessary rerenders&lt;/strong&gt; while the performance of your website gets better. When you only update one property of the store, it's not necessary to notify all the components that use the store. It only requires to notify who's consuming that updated property.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hGhM_zYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://aralroca.com/images/blog-images/rerenders.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGhM_zYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://aralroca.com/images/blog-images/rerenders.gif" alt="Teaful rerenders" width="800" height="500"&gt;&lt;/a&gt;&lt;br&gt;&lt;small&gt;Teaful rerenders&lt;/small&gt;
  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-other-benefits-does-it-have"&gt;
  &lt;/a&gt;
  What other benefits does it have?
&lt;/h2&gt;

&lt;p&gt;In this section of the article we'll see a few of the many things that can be done.&lt;/p&gt;

&lt;p&gt;If you use Teaful in a small project you'll be able to move fast without tools like Redux or Mobx that can be overkill. Also, if you use it in large projects they will be more maintainable and won't grow in code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-store-properties-on-the-fly"&gt;
  &lt;/a&gt;
  Creating store properties on the fly
&lt;/h3&gt;

&lt;p&gt;You can consume and update nonexistent store properties and define them on the fly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0 as initial value&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Increment&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Decrement&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#works-with-heavily-nested-properties"&gt;
  &lt;/a&gt;
  Works with heavily nested properties
&lt;/h3&gt;

&lt;p&gt;You can consume / manipulate any property wherever it is in the store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Aral&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;counters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My first counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;counterIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counterIndex&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Increment&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Decrement&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reseting-a-store-property-to-the-initial-value"&gt;
  &lt;/a&gt;
  Reseting a store property to the initial value
&lt;/h3&gt;

&lt;p&gt;Unlike hooks like React's useState, in Teaful there is a third element to reset the property to its initial value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resetCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Increment&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Decrement&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;resetCounter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Reset&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's in all levels, if you want to reset the whole store to its initial value you can do it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resetStore&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;resetStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-more-than-one-store"&gt;
  &lt;/a&gt;
  Using more than one store
&lt;/h3&gt;

&lt;p&gt;Although it is not necessary, you can have several stores and rename the hooks with more personalized names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;teaful&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;useCart&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;useCounter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use them in your components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCart&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPrice&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// ... rest&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCounter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// ... rest&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#%C2%A0using-customized-updaters"&gt;
  &lt;/a&gt;
  ¬†Using customized updaters
&lt;/h3&gt;

&lt;p&gt;If you want several components to use the same updaters without reimplementing them, you can predefine them thanks to the &lt;code&gt;getStore&lt;/code&gt; helper.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;teaful&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrementCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And use them in your components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incrementCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decrementCount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;incrementCount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Increment&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;decrementCount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Decrement&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#optimistic-updates"&gt;
  &lt;/a&gt;
  Optimistic updates
&lt;/h3&gt;

&lt;p&gt;If you want to make an optimistic update (when you update the store and save the value by calling the api, if the api request fails revert to the previous value). You can do it thanks to the &lt;code&gt;onAfterUpdate&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;teaful&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;onAfterUpdate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onAfterUpdate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prevStore&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;prevStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resetCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PATCH&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your components won't need any changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Increment&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Decrement&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want the optimistic update to be only for one component and not for all, you can register it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onAfterUpdate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#calculated-store-properties"&gt;
  &lt;/a&gt;
  Calculated store properties
&lt;/h3&gt;

&lt;p&gt;If we want the &lt;code&gt;cart.price&lt;/code&gt; to always be a precomputed value of another property, for example from &lt;code&gt;cart.items&lt;/code&gt;, we can do it in the &lt;code&gt;onAfterUpdate&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;onAfterUpdate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onAfterUpdate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prevStore&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;calculatePriceFromItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;calculatePriceFromItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPrice&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculatedPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;calculatedPrice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;setPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculatedPrice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your components won't need any changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// 6‚Ç¨&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;‚Ç¨&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#learn-more-about-teaful"&gt;
  &lt;/a&gt;
  Learn more about Teaful
&lt;/h2&gt;

&lt;p&gt;If you want to try it out, I encourage you to go to the &lt;a href="https://github.com/teafuljs/teaful/blob/0.7.0/README.md"&gt;README&lt;/a&gt; to read the Teaful documentation, see all the options and learn how to get started. There is also an example section where you can try it. We will upload more examples over time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Teaful is still at an early stage (version 0.x), so there may still be several improvements in the library to make version 1.0 even more tiny, easy and powerful. Any contribution to the library or suggestions will be very welcome.&lt;/p&gt;

&lt;p&gt;For the short life of the library, the community is growing fast and I thank all those who have contributed.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danielart"&gt;@danielart&lt;/a&gt;, &lt;a href="https://github.com/niexq"&gt;@niexq&lt;/a&gt;, &lt;a href="https://github.com/shinshin86"&gt;@shinshin86&lt;/a&gt;, &lt;a href="https://github.com/dididy"&gt;@dididy&lt;/a&gt;. üëè üòä&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/teafuljs/teaful"&gt;https://github.com/teafuljs/teaful&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Java Performance - 3 - A java Performance Toolbox</title>
      <author>Yousef Zook</author>
      <pubDate>Fri, 05 Nov 2021 20:30:35 +0000</pubDate>
      <link>https://dev.to/yousef_zook/java-performance-3-a-java-performance-toolbox-iad</link>
      <guid>https://dev.to/yousef_zook/java-performance-3-a-java-performance-toolbox-iad</guid>
      <description>&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;This article is part 4 for the series &lt;code&gt;Java Performance&lt;/code&gt; that summarize the &lt;strong&gt;java performance book&lt;/strong&gt; by &lt;strong&gt;Scot Oaks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the previous chapter we have discussed performance testing methods. We have mentioned the difference between &lt;em&gt;Micorbenchmarks&lt;/em&gt;, &lt;em&gt;Macrobenchmarks&lt;/em&gt; and &lt;em&gt;Mesobecnhmars&lt;/em&gt;. We have also talked about the &lt;em&gt;responsetime&lt;/em&gt;, &lt;em&gt;throughput&lt;/em&gt; and &lt;em&gt;variability&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this chapter we are going to discuss some intersting measurement tools for cpu, network and disk. We will understand the difference different profilers in java and talk a bit about JFR &lt;code&gt;Java Flight Recorder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Great, let's start the third chapter...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpv4aq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/43/3d/83/433d83f7e481f35245f8c6bb7c7591d8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpv4aq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/43/3d/83/433d83f7e481f35245f8c6bb7c7591d8.gif" alt="Intro" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#chapter-title"&gt;
  &lt;/a&gt;
  Chapter Title:
&lt;/h2&gt;

&lt;p&gt;A java Performance Toolbox&lt;/p&gt;

&lt;p&gt;Performance analysis is all about visibility‚Äîknowing what is going on inside an application and in the application‚Äôs environment. Visibility is all about tools. And so performance tuning is all about tools.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-operating-system-tools-and-analysis"&gt;
  &lt;/a&gt;
  1) Operating System Tools and Analysis
&lt;/h2&gt;

&lt;p&gt;The starting point for program analysis is not Java-specific at all: it is the basic set of monitoring tools that come with the operating system.&lt;br&gt;
We are going to see a quick look on operating system methods to take a look into the usage of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CPU --&amp;gt; &lt;strong&gt;vmstat&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Disk --&amp;gt; &lt;strong&gt;iostat&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Network --&amp;gt; &lt;strong&gt;nicstat&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#a-cpu-usage"&gt;
  &lt;/a&gt;
  A- CPU Usage
&lt;/h3&gt;

&lt;p&gt;CPU usage is typically divided into two categories: user time and system time (Windows refers to this as privileged time). &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;User time&lt;/strong&gt; is the percentage of time the CPU is executing application code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;System Time&lt;/strong&gt; is the percentage of time the CPU is executing kernel code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt; is to maximize the cpu utilization.&lt;/p&gt;

&lt;p&gt;If you run &lt;em&gt;vmstat 1&lt;/em&gt; on your Linux desktop, you will get a series of lines (one every second) that look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UsHLgW7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3n9k6l8qqc8luyaz13c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UsHLgW7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3n9k6l8qqc8luyaz13c.png" alt="vmstat" width="880" height="196"&gt;&lt;/a&gt;&lt;br&gt;
As you can find in the output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each second has a &lt;code&gt;system time = 3%&lt;/code&gt; and &lt;code&gt;user time = 42%&lt;/code&gt; approximately.&lt;/li&gt;
&lt;li&gt;CPU total time [aka utilization] is 45%
This means that the cpu is idle for 55% of the time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The CPU can be idle for multiple reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The application might be blocked on a synchronization primitive and unable to execute until that lock is released.&lt;/li&gt;
&lt;li&gt;The application might be waiting for something, such as a response to come back from a call to the database.&lt;/li&gt;
&lt;li&gt;The application might have nothing to do.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These first two situations are always indicative of something that can be addressed. If contention on the lock can be reduced or the database can be tuned so that it sends the answer back more quickly, then the program will run faster, and the average CPU use of the application will go up (assuming, of course, that there isn‚Äôt another such issue that will continue to block the application).&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Java and Single CPU:&lt;/strong&gt;&lt;br&gt;
If code is batch-style application, then the cpu will not be idle, because it has work to do always [if job is blocked for i/o or something, another batch can use the cpu .. etc]&lt;br&gt;
 ...&lt;br&gt;
&lt;strong&gt;Java and multi CPU:&lt;/strong&gt;&lt;br&gt;
The general idea is the same as in single cpu, however making sure individual threads are not blocked will drive the CPU higher.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h5&gt;
  &lt;a href="#cpu-run-queue"&gt;
  &lt;/a&gt;
  CPU Run Queue
&lt;/h5&gt;

&lt;p&gt;You can monitor the number of threads that can be run [aka not blocked]. Those threads are called to be in the &lt;code&gt;CPU Run Queue&lt;/code&gt;. You can find the length of the run queue in the previous image at the first column &lt;code&gt;procs r&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eTv8VSqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9dzihocu8lnyzerf6tj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eTv8VSqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9dzihocu8lnyzerf6tj.png" alt="vmstat queue length" width="880" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In linux: the number equals the number of currently running threads [those that are using the processors] and the others who are waiting for processors to use.&lt;/li&gt;
&lt;li&gt;In Windows: the number equals the number &lt;strong&gt;does NOT&lt;/strong&gt; count the currently running threads.
So the goal in linux is to make this queue length = the number of machine processors, and in windows to make it = 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#b-disk-usage"&gt;
  &lt;/a&gt;
  B- Disk Usage
&lt;/h3&gt;

&lt;p&gt;Monitoring disk usage has two important goals. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first pertains to the application itself: if the application is doing a lot of disk I/O, that I/O can easily become a bottleneck.&lt;/li&gt;
&lt;li&gt;The second reason is to monitor disk usage, even if the application is not expected to perform a significant amount of I/O‚Äîis to help monitor if the system is swapping.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use &lt;strong&gt;iostat&lt;/strong&gt; command to monitor the disk, Let's see an example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d17cJEQp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j79gysh4a1o1to61o3ji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d17cJEQp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j79gysh4a1o1to61o3ji.png" alt="iostat" width="880" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This application is writing data to disk &lt;strong&gt;sda&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;w_await&lt;/strong&gt;: the time to service each I/O write &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;util&lt;/strong&gt;: the disk utilization&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Applications that write to disk can be bottlenecked both because they are writing data inefficiently (too little through‚Äê put) or because they are writing too much data (too much throughput).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#c-network-usage"&gt;
  &lt;/a&gt;
  C- Network Usage
&lt;/h3&gt;

&lt;p&gt;If you are running an application that uses the network‚Äîfor example, a REST server‚Äîyou must monitor the network traffic as well.&lt;br&gt;
You can use &lt;strong&gt;nicstat&lt;/strong&gt; to monitor the network, it is not the default of the system but it's opensource with more features.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AidrPPqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg2ep7ex592fkv3vt9ht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AidrPPqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg2ep7ex592fkv3vt9ht.png" alt="nicstat" width="880" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Applications that write to the network can be bottlenecked because they are writing data inefficiently (too little through‚Äê put) or because they are writing too much data (too much throughput).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#2-java-monitoring-tools"&gt;
  &lt;/a&gt;
  2) Java Monitoring Tools
&lt;/h2&gt;

&lt;p&gt;To gain insight into the JVM itself, Java monitoring tools are required. These tools come with the JDK:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-jvm-commands"&gt;
  &lt;/a&gt;
  A- JVM Commands
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;jcmd&lt;/strong&gt;: Prints basic class, thread, and JVM information for a Java process.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;jconsole&lt;/strong&gt;: Provides a graphical view of JVM activities, including thread usage, class usage, and GC activities&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;jmap&lt;/strong&gt;: Provides heap dumps and other information about JVM memory usage. Suitable for scripting, though the heap dumps must be used in a postprocessing tool.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;jinfo&lt;/strong&gt;: Provides visibility into the system properties of the JVM, and allows some system properties to be set dynamically. Suitable for scripting.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;jstack&lt;/strong&gt;: Dumps the stacks of a Java process. Suitable for scripting.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;jstat&lt;/strong&gt;: Provides information about GC and class-loading activities. Suitable for scripting.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;jvisualvm&lt;/strong&gt;: A GUI tool to monitor a JVM, profile a running application, and analyze JVM heap dumps (which is a postprocessing activity, though jvisualvm can also take the heap dump from a live program).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;if you are using docker, you can run them using &lt;code&gt;docker exec&lt;/code&gt; except &lt;code&gt;jconsole&lt;/code&gt; and &lt;code&gt;jvisualvm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These tools fits into these broad areas:&lt;br&gt;
‚Ä¢ Basic VM information&lt;br&gt;
‚Ä¢ Thread information&lt;br&gt;
‚Ä¢ Class information&lt;br&gt;
‚Ä¢ Live GC analysis&lt;br&gt;
‚Ä¢ Heap dump postprocessing&lt;br&gt;
‚Ä¢ Profiling a JVM&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#b-basic-vm-information"&gt;
  &lt;/a&gt;
  B- Basic VM Information
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Uptime
The length of time the JVM has been up can be found via this command:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;% jcmd process_id VM.uptime&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;System properties
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;% jcmd process_id VM.system_properties&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;% jinfo -sysprops process_id&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JVM version
The version of the JVM is obtained like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;% jcmd process_id VM.version&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JVM tuning flags
The tuning flags in effect for an application can be obtained like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;% jcmd process_id VM.flags [-all]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; you can change tuning flags dynamically at runtime using &lt;strong&gt;jinfo&lt;/strong&gt; command, example:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;% jinfo -flag -PrintGCDetails process_id # turns off PrintGCDetails &lt;br&gt;
% jinfo -flag PrintGCDetails process_id&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-profiling-tools"&gt;
  &lt;/a&gt;
  3) Profiling Tools
&lt;/h2&gt;

&lt;p&gt;Profilers are the most important tool in a performance analyst‚Äôs toolbox. Many profil‚Äê ers are available for Java, each with its own advantages and disadvantages. &lt;/p&gt;

&lt;p&gt;Many common Java profiling tools are themselves written in Java and work by ‚Äúattaching‚Äù themselves to the application to be profiled. This attachment is via a socket or via a native Java interface called the &lt;strong&gt;JVM Tool Interface&lt;/strong&gt; (JVMTI). &lt;br&gt;
This means you must pay attention to tuning the profiling tool just as you would tune any other Java application. In particular, if the application being profiled is large, it can transfer quite a lot of data to the profiling tool, so the profiling tool must have a sufficiently large heap to handle the data.&lt;/p&gt;

&lt;p&gt;Profiling happens in one of two modes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sampling mode &lt;/li&gt;
&lt;li&gt;instrumented mode&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#a-sampling-profilers"&gt;
  &lt;/a&gt;
  A- Sampling Profilers
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;:The basic mode of profiling and carries the least amount of overhead. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;: However, sampling profilers can be subject to all sorts of errors, for example, the most common sampling erro is as shown in the figure below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--URLw7Nwa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yriakcv0dnlfr21tg0y3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--URLw7Nwa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yriakcv0dnlfr21tg0y3.png" alt="Image description" width="880" height="93"&gt;&lt;/a&gt;&lt;br&gt;
The thread here is alternating between executing methodA (shown in the shaded bars) and methodB (shown in the clear bars). If the timer fires only when the thread happens to be in methodB, the profile will report that the thread spent all its time executing methodB; in reality, more time was actually spent in methodA.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reason&lt;/strong&gt;: this is due to &lt;code&gt;safepoint bias&lt;/code&gt;, which means that the profiler can get the stack trace of a thread only when the thread is at safepoint, when they are:&lt;br&gt;
‚Ä¢ Blocked on a synchronized lock&lt;br&gt;
‚Ä¢ Blocked waiting for I/O&lt;br&gt;
‚Ä¢ Blocked waiting for a monitor&lt;br&gt;
‚Ä¢ Parked&lt;br&gt;
‚Ä¢ Executing Java Native Interface (JNI) code (unless they perform a GC locking function)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#b-instrumented-profilers"&gt;
  &lt;/a&gt;
  B- Instrumented Profilers
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;: Instrumented profilers are much more intrusive than sampling profilers, but they can also give more beneficial information about what‚Äôs happening inside a program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;: They are much more likely to introduce performance differences into the application than are sampling profilers.&lt;/p&gt;

&lt;p&gt;Instrumented profilers work by altering the bytecode sequence of classes as they are loaded (inserting code to count the invocations, and so on).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Is this a better profile than the sampled version? It depends; there is no way to know in a given situation which is the more accurate profile. The invocation count of an instrumented profile is certainly accurate, and that additional information is often helpful in determining where the code is spending more time and which things are more fruitful to optimize.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#c-native-profilers"&gt;
  &lt;/a&gt;
  C- Native Profilers
&lt;/h3&gt;

&lt;p&gt;Tools like async-profiler and Oracle Developer Studio have the capability to profile native code in addition to Java code. This has two advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;significant operations occur in native code, including within native libraries and native memory allocation.&lt;/li&gt;
&lt;li&gt;we typically profile to find bottlenecks in application code, but sometimes the native code is unexpectedly dominating performance. We would prefer to find out our code is spending too much time in GC by examining GC logs.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#4-java-flight-recorder-raw-jfr-endraw-"&gt;
  &lt;/a&gt;
  4) Java Flight Recorder &lt;code&gt;JFR&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Java Flight Recorder (JFR) is a feature of the JVM that performs lightweight performance analysis of applications while they are running. As its name suggests, JFR data is a history of events in the JVM that can be used to diagnose the past performance and operations of the JVM.&lt;/p&gt;

&lt;p&gt;The basic operation of JFR is that a set of events is enabled (for example, one event is that a thread is blocked waiting for a lock), and each time a selected event occurs, data about that event is saved (either in memory or to a file). &lt;/p&gt;

&lt;p&gt;The higher the number of events, the higher the performance got affected by the JFR.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-java-mission-control"&gt;
  &lt;/a&gt;
  A- Java Mission Control
&lt;/h3&gt;

&lt;p&gt;The usual tool to examine JFR recordings is &lt;code&gt;Java Mission Control&lt;/code&gt; (jmc), though other tools exist, and you can use toolkits to write your own analysis tools.&lt;br&gt;
The Java Mission Control program (jmc) starts a window that displays the JVM pro‚Äê cesses on the machine and lets you select one or more processes to monitor. Figure 3-9 shows the Java Management Extensions (JMX) console of Java Mission Control monitoring our example REST server.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K_2emSgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8xq8jb44g1cjj42mj3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K_2emSgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8xq8jb44g1cjj42mj3k.png" alt="JMC" width="880" height="266"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#b-jfr-features"&gt;
  &lt;/a&gt;
  B- JFR features
&lt;/h3&gt;

&lt;p&gt;The following table shows what other tools can collect and what jfr collects for each event:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Event&lt;/th&gt;
&lt;th&gt;Other tools&lt;/th&gt;
&lt;th&gt;JFR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Classloading&lt;/td&gt;
&lt;td&gt;Number of classes loaded and unloaded&lt;/td&gt;
&lt;td&gt;Which classloader loaded the class; time required to load an individual class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Thread statistics&lt;/td&gt;
&lt;td&gt;Number of threads created and destroyed; thread dumps&lt;/td&gt;
&lt;td&gt;Which threads are blocked on locks (and the specific lock they are blocked on)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Throwables&lt;/td&gt;
&lt;td&gt;Throwable classes used by the application&lt;/td&gt;
&lt;td&gt;Number of exceptions and errors thrown and the stack trace of their creation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TLAB allocation&lt;/td&gt;
&lt;td&gt;Number of allocations in the heap and size of thread-local allocation buffers (TLABs)&lt;/td&gt;
&lt;td&gt;Specific objects allocated in the heap and the stack trace where they are allocated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File and socket I/O&lt;/td&gt;
&lt;td&gt;Time spent performing I/O&lt;/td&gt;
&lt;td&gt;Time spent per read/write call, the specific file or socket taking a long time to read or write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Monitor blocked&lt;/td&gt;
&lt;td&gt;Threads waiting for a monitor&lt;/td&gt;
&lt;td&gt;Specific threads blocked on specific monitors and the length of time they are blocked&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Code cache&lt;/td&gt;
&lt;td&gt;Size of code cache and how much it contains&lt;/td&gt;
&lt;td&gt;Methods removed from the code cache; code cache configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Code compilation&lt;/td&gt;
&lt;td&gt;Which methods are compiled, on-stack replacement (OSR) compilation, and length of time to compile&lt;/td&gt;
&lt;td&gt;Nothing specific to JFR, but unifies information from several sources&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Garbage collection&lt;/td&gt;
&lt;td&gt;Times for GC, including individual phases; sizes of generations&lt;/td&gt;
&lt;td&gt;Nothing specific to JFR, but unifies the information from several tools&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Profiling&lt;/td&gt;
&lt;td&gt;Instrumenting and sampling profiles&lt;/td&gt;
&lt;td&gt;Not as much as you‚Äôd get from a true profiler, but the JFR profile provides a good high-order overview&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#c-enabling-jfr"&gt;
  &lt;/a&gt;
  C- Enabling JFR
&lt;/h3&gt;

&lt;p&gt;JFR is initially disabled. To enable it, add the flag &lt;br&gt;
&lt;code&gt;-XX:+FlightRecorder&lt;/code&gt; to the command line of the application. This enables JFR as a feature, but no recordings will be made until the recording process itself is enabled. That can occur either through a GUI or via the command line.&lt;/p&gt;

&lt;p&gt;In Oracle‚Äôs JDK 8, you must also specify this flag (prior to the FlightRecorder flag): &lt;code&gt;-XX:+UnlockCommercialFeatures&lt;/code&gt; (default: false).&lt;br&gt;
If you forget to include these flags, remember that you can use &lt;code&gt;jinfo&lt;/code&gt; to change their values and enable JFR. If you use jmc to start a recording, it will automatically change these values in the target JVM if necessary.&lt;/p&gt;

&lt;p&gt;To enable it from command line:&lt;br&gt;
&lt;code&gt;-XX:+FlightRecorderOptions=string&lt;/code&gt;&lt;br&gt;
The string in that parameter is a list of comma-separated name- value pairs taken from these options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name=name
--&amp;gt;The name used to identify the recording.
defaultrecording=&amp;lt;true|false&amp;gt;
--&amp;gt;Whether to start the recording initially. The default value is false; for reactive analysis, this should be set to true.
settings=path
--&amp;gt;Name of the file containing the JFR settings (see the next section).
delay=time
--&amp;gt;The amount of time (e.g., 30s, 1h) before the recording should start.
duration=time
--&amp;gt;The amount of time to make the recording.
filename=path
--&amp;gt;Name of the file to write the recording to.
compress=&amp;lt;true|false&amp;gt;
--&amp;gt;Whether to compress (with gzip) the recording; the default is false.
maxage=time
--&amp;gt;Maximum time to keep recorded data in the circular buffer.
maxsize=size
--&amp;gt;Maximum size (e.g., 1024K, 1M) of the recording‚Äôs circular buffer.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#runner-see-you-in-chapter-4-"&gt;
  &lt;/a&gt;
  üèÉ See you in chapter 4 ...
&lt;/h4&gt;




&lt;h2&gt;
  &lt;a href="#monkeytake-a-tip"&gt;
  &lt;/a&gt;
  üêítake a tip
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Never trust your code. üëÆ&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yJi-o3cN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/4WZm1vgS_-8AAAAM/the-simpsons-homer-simpson.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJi-o3cN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/4WZm1vgS_-8AAAAM/the-simpsons-homer-simpson.gif" alt="Suspect your code" width="220" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>books</category>
      <category>java</category>
      <category>programming</category>
      <category>performance</category>
    </item>
    <item>
      <title>Play games to improve your developer skills.</title>
      <author>Chris Jarvis</author>
      <pubDate>Fri, 05 Nov 2021 19:55:14 +0000</pubDate>
      <link>https://dev.to/jarvisscript/play-games-to-improve-your-developer-skills-3254</link>
      <guid>https://dev.to/jarvisscript/play-games-to-improve-your-developer-skills-3254</guid>
      <description>&lt;p&gt;Can you learn to code by playing games? Can games make you a better developer? Yes. I am listing some games that teach you coding concepts or improve skills that will help you code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shortcut-foo"&gt;
  &lt;/a&gt;
  Shortcut Foo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.shortcutfoo.com/"&gt;Shortcut Foo&lt;/a&gt;&lt;br&gt;
Keyboard shortcuts speedup your coding. This site teaches you shortcuts and muscle memory by playing a ninja fighting game.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;shortcutFoo was created by programmers for programmers in an attempt to make learning your editor fun, easy, and effective. Akin to the days of first learning how to type on a keyboard, shortcutFoo aims to help programmers accomplish more in less time and with fewer keystrokes.  --from their site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First you practice a shortcut. Select the dojo for what subject you can to learn. An action appears on screen and you press the keys that command that action. You get several actions in a section. They repeat until you get them right fast enough. &lt;br&gt;
  In the fight section you can battle a ninja using those keystrokes as attacks. In the game two ninjas are lined up. An action like "Commit changes" appears on screen. You hit the keys or type the command and move your ninja along the line. First one to the end wins. You can even fight a friend by their username.&lt;br&gt;
  Finally test out to unlock the next level. This section plays the same way as the learning section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Know what the key combo of ‚áß‚å•DOWN (Shift + Alt + down keys) does on slack?

Jumps to the next channel or direct message with unread messages. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can learn shortcuts for languages, editors, or apps. There are dojos for JavaScript, python, ruby, VScode, terminal, and git and more. &lt;/p&gt;

&lt;p&gt;You can set reminders for days, a week, or even a month.&lt;/p&gt;

&lt;p&gt;The basic levels are free but you must subscribe, $8 a month or $80 for an annual subscription, to unlock higher levels. There are personal and organizational options. Subscription unlocks all the dojos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ztype"&gt;
  &lt;/a&gt;
  Ztype
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://zty.pe/"&gt;ZType&lt;/a&gt; &lt;br&gt;
Need practice typing, play ZType. It's typing meets space invaders. Words fly out of a ship and you type the word to shoot it. Misspelling count as a miss. You can't shoot another word till you finish the first.&lt;br&gt;
The words can be random or you can load some content. They have 'Cat in the Hat' and 'Alice in Wonderland' as options. You can add you own text or a website.&lt;br&gt;
You can even load a post. Tired of that blog you've been writing? Shoot it.&lt;br&gt;
Hate someone's take on a subject? Shoot it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kg63ZYo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ml99yur9ztwtwmquhlm4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kg63ZYo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ml99yur9ztwtwmquhlm4.jpg" alt="space-ship shoot at words." width="581" height="726"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ztype has great music. With controls to change the sound level of music and effects.&lt;br&gt;
I played this while in bootcamp to get that muscle memory going. I still play sometimes just for a quick game. If you are a student and are having trouble keeping up with the lecturer, try this. &lt;br&gt;
Ztype is sponsored by &lt;a href="https://www.typesy.com/"&gt;Typsey&lt;/a&gt;, a typing program. ZType itself is free but if you need more training, Typsey has a free 7-day trail and a $9 a month fee. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#flexbox-froggy"&gt;
  &lt;/a&gt;
  Flexbox Froggy
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://flexboxfroggy.com/"&gt;Flexbox Froggy&lt;/a&gt; teaches Flexbox by moving frogs around the screen. They list a property like &lt;code&gt;align-items&lt;/code&gt; and you try different attributes to move the frogs to the lily pads. This is one of several code games from &lt;a href="https://codepip.com/"&gt;Codepip&lt;/a&gt; by &lt;a href="https://twitter.com/geddski"&gt;Dave Geddis&lt;/a&gt; They have 2 free games and a Pro account with more, that is $6 a month. The free games are Flexbox Froggy and Grid Gardens. The games mostly cover CSS but the are a couple HTML and JavaScript games.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#grid-gardens"&gt;
  &lt;/a&gt;
  Grid Gardens
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://codepip.com/games/grid-garden/"&gt;Grid Gardens&lt;/a&gt; teaches you CSS grid while you tend a virtual garden. Similar to Flexbox Froggy you use grid attributes to place water on plants and poison on weeds. &lt;a href="https://www.youtube.com/watch?v=DGh44GzD-8Y"&gt;video demo&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#css-diner"&gt;
  &lt;/a&gt;
  CSS Diner
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://flukeout.github.io/"&gt;CSS Diner&lt;/a&gt; beautiful minimalistic game that teaches CSS selectors. Not as much documentation on here, so it requires a little more experience than the other CSS games.&lt;br&gt;&lt;br&gt;
At the top of the screen is a small table. Below that is CSS and HTML. Each level asks you to select something on the table. You read the HTML side and enter the correct CSS selector on the CSS side to advance.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#thoughts"&gt;
  &lt;/a&gt;
  Thoughts
&lt;/h3&gt;

&lt;p&gt;Do you play other code games? What would you recommend?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-$JarvisScript git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>learning</category>
      <category>resources</category>
    </item>
    <item>
      <title>A mock of localStorage written in TypeScript</title>
      <author>Yuki Shindo</author>
      <pubDate>Fri, 05 Nov 2021 19:20:51 +0000</pubDate>
      <link>https://dev.to/shinshin86/a-mock-of-localstorage-written-in-typescript-2680</link>
      <guid>https://dev.to/shinshin86/a-mock-of-localstorage-written-in-typescript-2680</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-mock-of-localstorage-written-in-typescript"&gt;
  &lt;/a&gt;
  A mock of localStorage written in TypeScript
&lt;/h2&gt;

&lt;p&gt;The other day, I started writing mock of localStorage in TypeScript.&lt;br&gt;
Here is the code that I actually wrote.&lt;/p&gt;

&lt;p&gt;Regarding this code, please note that it does not behave completely the same as localStorage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The behavior is not perfectly reproduced (The value returned when an unintended value is passed, for example), but the basic logic is implemented.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LocalStorageMock&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Uncaught TypeError: Failed to execute 'key' on 'Storage': 1 argument required, but only 0 present.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Uncaught TypeError: Failed to execute 'setItem' on 'Storage': 2 arguments required, but only 0 present.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Uncaught TypeError: Failed to execute 'setItem' on 'Storage': 2 arguments required, but only 1 present.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Uncaught TypeError: Failed to execute 'removeItem' on 'Storage': 1 argument required, but only 0 present.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getLocalStorageMock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LocalStorageMock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#about-localstorage-behavior"&gt;
  &lt;/a&gt;
  About localStorage behavior
&lt;/h2&gt;

&lt;p&gt;I actually investigated the behavior of localStorage in the browser before writing this code.&lt;br&gt;
I noticed that it behaved in a slightly interesting way.&lt;/p&gt;

&lt;p&gt;For example, the following code.&lt;br&gt;
(I didn't do an exhaustive check, so there may be other unique behaviors hidden in the code)&lt;/p&gt;

&lt;p&gt;Note that the environment has been tested with Chrome &lt;code&gt;94.0.4606.81 (Official Build) (arm64)&lt;/code&gt;.&lt;br&gt;
I haven't tried it with other browsers, so the behavior might be different with different browsers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aaa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; 'test'&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; 'test'&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; 'test'&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; 'test'&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; 'test'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that if you do not pass any argument to the key function, you will get an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; Uncaught TypeError: Failed to execute 'key' on 'Storage': 1 argument required, but only 0 present.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the MDN documentation on the key function.&lt;br&gt;
&lt;a href="https://developer.mozilla.org/ja/docs/Web/API/Storage/key"&gt;https://developer.mozilla.org/ja/docs/Web/API/Storage/key&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-mock-of-localstorage-is-available-on-npm"&gt;
  &lt;/a&gt;
  A mock of localStorage is available on npm
&lt;/h2&gt;

&lt;p&gt;The localStorage mock I wrote at the beginning of this post, written in TypeScript, is available on npm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@shinshin86/local-storage-mock"&gt;@shinshin86/local-storage-mock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/shinshin86/local-storage-mock"&gt;localStorage Mock(GitHub)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Actually, it is helping me write tests for localStorage in another project of mine.&lt;br&gt;
If anyone is considering using it for a similar purpose, please give it a try.&lt;/p&gt;

&lt;p&gt;Installation is done like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @shinshin86/local-storage-mock
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn add @shinshin86/local-storage-mock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be made to work in this way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getLocalStorageMock&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local-storage-mock&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getLocalStorageMock&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;testkey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;testvalue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;testkey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; testvalue&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; testkey&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; 1&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;testkey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;testkey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; null&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;testkey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;testvalue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;testkey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; testvalue&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; 0&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;testkey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading to the end!&lt;/p&gt;

</description>
      <category>localstorage</category>
      <category>typescript</category>
      <category>mock</category>
    </item>
    <item>
      <title>Animate a Hamburger Menu with Framer Motion</title>
      <author>William Iommi</author>
      <pubDate>Fri, 05 Nov 2021 19:13:22 +0000</pubDate>
      <link>https://dev.to/wiommi/animate-a-hamburger-menu-with-framer-motion-50ml</link>
      <guid>https://dev.to/wiommi/animate-a-hamburger-menu-with-framer-motion-50ml</guid>
      <description>&lt;p&gt;Welcome back to my backyard lab, where I do my experiments drinking a lot of coffee to keep the pace üòÇ&lt;/p&gt;

&lt;p&gt;Currently, in my spare time, I'm working on my personal website and I want to share with you my process on how I built and animate the hamburger menu of the header.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h1&gt;

&lt;p&gt;Animations are cool!! So why not complicate your life by animating some sections of your personal website? There is no better place to do it...&lt;/p&gt;

&lt;p&gt;But...since I'm not an animation Guru, I asked for help from &lt;a href="https://www.framer.com/motion"&gt;Framer Motion&lt;/a&gt;, a React animation library by &lt;a href="https://www.framer.com"&gt;Framer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My animation is pretty simple, the SVG has two lines (one is wider), on click/tap, the shorter one stretches reaching the max length and then I rotate both lines and create the X shape.&lt;/p&gt;

&lt;p&gt;In this article I will show you 2 solutions that I implemented, called respectively:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;'&lt;strong&gt;I don't know Framer Motion' solution (a.k.a. It works solution).&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;'(Maybe) I know Framer Motion a little bit more' solution.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h1&gt;

&lt;p&gt;Since I want to use SVG, firstly I created 3 shapes in &lt;a href="https://www.figma.com"&gt;Figma&lt;/a&gt;, representing my animation states. Every shape is inside a 24 x 24 box.&lt;/p&gt;

&lt;p&gt;The first shape represent the 'closed' state:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qhy0XSw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh62wotmf5bvss0q1fqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhy0XSw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh62wotmf5bvss0q1fqw.png" alt="Hamburger - Closed" width="94" height="94"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second, represent the middle state:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4k_KBO9R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcp18osuv7otzkjzgl19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4k_KBO9R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcp18osuv7otzkjzgl19.png" alt="Hamburger - Animating" width="94" height="94"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last one, represent the 'open' state, when animation is completed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lgXgMZmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jivn3ze292ob5da7tu9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lgXgMZmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jivn3ze292ob5da7tu9j.png" alt="Hamburger - Open" width="94" height="94"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following are the 3 SVG exported from Figma.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- CLOSED STATE --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"9.5"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"9.5"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"#FFFFFF"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"14.5"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"15"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"14.5"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"#FFFFFF"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- MIDDLE STATE --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"9.5"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"9.5"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"#FFFFFF"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"14.5"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"14.5"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"#FFFFFF"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- OPEN STATE --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M3.06061 2.99999L21.0606 21"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"#FFFFFF"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M3.00006 21.0607L21 3.06064"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"#FFFFFF"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#tuning"&gt;
  &lt;/a&gt;
  Tuning
&lt;/h1&gt;

&lt;p&gt;The first problem I faced was about the line tags used in the first two SVG and the path used on the third.&lt;br&gt;
So I decided to align everything with the path tag and I used this 'formula' that I found online:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;d="Mx1 y1Lx2 y2"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the first 2 SVG have become:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- CLOSED STATE --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M0 9.5L24 9.5"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"#FFFFFF"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M0 14.5L15 14.5"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"#FFFFFF"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- MIDDLE STATE --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M0 9.5L24 9.5"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"#FFFFFF"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M0 14.5L24 14.5"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"#FFFFFF"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#defining-variants"&gt;
  &lt;/a&gt;
  Defining Variants
&lt;/h1&gt;

&lt;p&gt;So, now that every SVG is aligned, I can start tuning the variants needed by Framer Motion in order to work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.framer.com/docs/animation/#variants"&gt;Variants&lt;/a&gt;, combined with the motion component, let you define animations in a declarative way.&lt;br&gt;
I created two objects where each key represents the state of the animation and every value contains the information about it, in my case the &lt;em&gt;d&lt;/em&gt; attribute of the SVG path.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#path-1"&gt;
  &lt;/a&gt;
  Path 1
&lt;/h3&gt;

&lt;p&gt;This is the top line/path. This line doesn't have a middle state so the object represents only the initial and final state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path01Variants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M3.06061 2.99999L21.0606 21&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="na"&gt;closed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M0 9.5L24 9.5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#path-2"&gt;
  &lt;/a&gt;
  Path 2
&lt;/h3&gt;

&lt;p&gt;This line is the bottom one and since it is the only one that has a middle state, the following object contains three keys/states.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path02Variants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M3.00006 21.0607L21 3.06064&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="na"&gt;moving&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M0 14.5L24 14.5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="na"&gt;closed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M0 14.5L15 14.5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#the-i-dont-know-framer-motion-solution"&gt;
  &lt;/a&gt;
  The 'I don't know Framer Motion' solution
&lt;/h1&gt;

&lt;p&gt;Okay...what I've to do is pretty straightforward:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;click on the SVG&lt;/li&gt;
&lt;li&gt;start the animation&lt;/li&gt;
&lt;li&gt;repeat!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem I faced with variants and the animate property was that I was not able to create a sequence between animation states.&lt;br&gt;
I couldn't start from 'closed', switch to 'moving' and finally reach the 'open' state.&lt;br&gt;
Since I'm using React, I thought that my component state could have more than a boolean-like (open/close) value so I created an 'animation' state with 3 possible values: 'closed', 'moving' and 'open'.&lt;/p&gt;

&lt;p&gt;But how to sequence them? Well...a good old setTimeout came to my rescue...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAnimation&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;moving&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setAnimation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and my return statement is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'24'&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'24'&lt;/span&gt; &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'0 0 24 24'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;
      &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'#FFFFFF'&lt;/span&gt;
      &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;path01Variants&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;
      &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'#FFFFFF'&lt;/span&gt;
      &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;path02Variants&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the &lt;code&gt;animate={animation}&lt;/code&gt; changes its state with the value inside my React state and then the proper variant inside 'pathXXVariants' is used.&lt;br&gt;
I start with the 'moving' state and after 200ms I switch to open or closed (it depends on the previous state).&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#the-maybe-i-know-framer-motion-a-little-bit-more-solution"&gt;
  &lt;/a&gt;
  The '(Maybe) I know Framer Motion a little bit more' solution
&lt;/h1&gt;

&lt;p&gt;The previous solution works, but I find the 'setTimeout' as a loophole to do something that probably the library can handle in some different way and most important, even if probably this is not the case, using setTimeout and React come with some caveats so I could have used also something more 'React' as well.&lt;/p&gt;

&lt;p&gt;Anyway, diving into the documentation a little bit more I found a React hook that could be helpful for my scenario.&lt;/p&gt;

&lt;p&gt;The &lt;a href="//framer.com/docs/animation/#component-animation-controls"&gt;useAnimation&lt;/a&gt; hook creates an &lt;a href="https://www.framer.com/docs/utilities/#animationcontrols"&gt;AnimationControls&lt;/a&gt;&lt;br&gt;
object that has some utility methods which I can use to fine-tune my animation.&lt;br&gt;
With AnimationControls I can start an animation and since this method returns a Promise I can also &lt;em&gt;await&lt;/em&gt; that the animation ends and start the following one. So as you can imagine we have more control üòé.&lt;/p&gt;

&lt;p&gt;I changed the React state back to a boolean and created 2 AnimationControls, one for each path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOpen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path01Controls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAnimation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path02Controls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAnimation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;our &lt;em&gt;onClick&lt;/em&gt; handler now is a little bit more complicated but more Framer Motion friendly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// change the internal state&lt;/span&gt;
  &lt;span class="nx"&gt;setOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// start animation&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;path02Controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path02Variants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moving&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;path01Controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path01Variants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;path02Controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path02Variants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;path01Controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path01Variants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;path02Controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path02Variants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moving&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;path02Controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path02Variants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I decided to tune the duration of the animation directly on the JSX but I could have also inserted it as the second argument of the &lt;em&gt;start&lt;/em&gt; method or in the variant itself.&lt;/p&gt;

&lt;p&gt;So the final JSX...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'24'&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'24'&lt;/span&gt; &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'0 0 24 24'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;path01Variants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closed&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;path01Controls&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'#FFFFFF'&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;path02Variants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closed&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;path02Controls&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'#FFFFFF'&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and here a little demo üòá&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/silly-parm-u70gt?runonclick=1"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h1&gt;

&lt;p&gt;This is it!&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this little tutorial and if you found it helpful, drop a like or a comment.&lt;/p&gt;

&lt;p&gt;If you know Framer Motion and you want to share your thoughts or an alternative/better solution...please do it!!!&lt;/p&gt;

&lt;p&gt;If you think that Framer Motion is an overkill for this little animation...yeah you are probably right but it was fun learning something new üòâ.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;See ya ü§ô&lt;/p&gt;

</description>
      <category>react</category>
      <category>framer</category>
      <category>animation</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Hand Tracking using MediaPipe</title>
      <author>masspopcorn</author>
      <pubDate>Fri, 05 Nov 2021 19:01:21 +0000</pubDate>
      <link>https://dev.to/dudeactual/hand-tracking-using-mediapipe-15oj</link>
      <guid>https://dev.to/dudeactual/hand-tracking-using-mediapipe-15oj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hand-tracking-using-mediapipe"&gt;
  &lt;/a&gt;
  Hand Tracking using MediaPipe
&lt;/h2&gt;

&lt;p&gt;Hey everyone! This is a Hand Tracking app using MediaPipe!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#descriptioninstructions"&gt;
  &lt;/a&gt;
  Description/Instructions
&lt;/h3&gt;

&lt;p&gt;Use your camera and put your hands up!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#outro"&gt;
  &lt;/a&gt;
  Outro
&lt;/h3&gt;

&lt;p&gt;Thanks for reading and playing! Here are some socials.&lt;/p&gt;

&lt;p&gt;Repl Profile: &lt;a href="https://replit.com/@dudeactualdev"&gt;dudeactualdev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github Profile: &lt;a href="https://github.com/dudeactual"&gt;dudeactual&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OG Codepen: &lt;a href="https://codepen.io/mediapipe/pen/RwGWYJw"&gt;MediaPipe Hands&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#demo-handtracking"&gt;
  &lt;/a&gt;
  DEMO: &lt;a href="https://handtracking.dudeactualdev.repl.co"&gt;handtracking&lt;/a&gt;
&lt;/h4&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>replit</category>
    </item>
    <item>
      <title>Who's Going To RubyConf?</title>
      <author>Yechiel Kalmenson</author>
      <pubDate>Fri, 05 Nov 2021 19:00:05 +0000</pubDate>
      <link>https://dev.to/yechielk/whos-going-to-rubyconf-3g9m</link>
      <guid>https://dev.to/yechielk/whos-going-to-rubyconf-3g9m</guid>
      <description>&lt;p&gt;&lt;a href="https://rubyconf.org/"&gt;RubyConf&lt;/a&gt; is starting next week (November 8-0), both in person in Denver and remotely online.&lt;/p&gt;

&lt;p&gt;This year it's especially exciting for me; it's my first in-person conference in exactly two years (the vaccine mandates and mask policy helped me feel safe with the decision to attend in person), AND I'll be giving a talk (which you should totally &lt;a href="https://rubyconf.org/program/sessions#session-1164"&gt;come watch&lt;/a&gt; if you'll be there)!&lt;/p&gt;

&lt;p&gt;Who else is planning on attending?&lt;/p&gt;

&lt;p&gt;Come say hi (either in person or in the discord)!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>networking</category>
      <category>watercooler</category>
      <category>discuss</category>
    </item>
    <item>
      <title>7 Deadly Sins Of Programming</title>
      <author>Aimen Zairi</author>
      <pubDate>Fri, 05 Nov 2021 18:39:19 +0000</pubDate>
      <link>https://dev.to/zairiaimendev/7-deadly-sins-of-programming-45ka</link>
      <guid>https://dev.to/zairiaimendev/7-deadly-sins-of-programming-45ka</guid>
      <description>&lt;p&gt;Programming is not always about writing code.&lt;/p&gt;

&lt;p&gt;If you are a beginner programmer you might have fallen into one of these mistakes already but if you haven‚Äôt this is your opportunity to know then so you can avoid them.&lt;/p&gt;

&lt;p&gt;In this blog post we will go through the 7 mistakes that you maybe making and how to avoid them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-writing-code-before-thinking"&gt;
  &lt;/a&gt;
  1 ‚Äì Writing Code before thinking
&lt;/h2&gt;

&lt;p&gt;You are trying to solve a problem when writing code. Thinking about the solution is far more important than coding the solution.&lt;/p&gt;

&lt;p&gt;That‚Äôs why most development companies write SRS (Software Requirement Specification) documents to turn the solution into a guideline that can be followed by Developers and Clients judge the results with it.&lt;/p&gt;

&lt;p&gt;So before you learn to code, you should learn how to turn your software requirements into diagrams. These Diagrams are what‚Äôs going to help you develop your solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-reinventing-the-wheel"&gt;
  &lt;/a&gt;
  2 ‚Äì Reinventing The Wheel
&lt;/h2&gt;

&lt;p&gt;A Rule To Remember : Don't Repeat Yourself.&lt;/p&gt;

&lt;p&gt;You should never re-write functionality that already exists.&lt;/p&gt;

&lt;p&gt;Lets take a simple example here. Let‚Äôs say you have a blog project and you want to add a rich text editor to it. What should you do?. so the obvious answer is to get a library or a package that contains this editor.&lt;/p&gt;

&lt;p&gt;Avoiding this is very easy and it‚Äôs by learning how to write extensible and reusable code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-not-using-search-engines-and-stack-overflow"&gt;
  &lt;/a&gt;
  3 - Not Using Search Engines And Stack Overflow
&lt;/h2&gt;

&lt;p&gt;This is a common mistake for beginners that have only recently joined the world of programming.&lt;/p&gt;

&lt;p&gt;This is definitely the biggest mistake you can make. There isn‚Äôt a single programmer that doesn‚Äôt use stack overflow and google on a daily basis.&lt;/p&gt;

&lt;p&gt;Don‚Äôt be ashamed to ask if you don‚Äôt find what you are looking for.There are always people out there Trying to help ;) . &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-not-using-a-proper-ide"&gt;
  &lt;/a&gt;
  4 ‚Äì Not Using a Proper IDE
&lt;/h2&gt;

&lt;p&gt;It all depends on your technology of choice. But there is no denying that using a good IDE can help massively.&lt;/p&gt;

&lt;p&gt;Personally, i work with .NET so using Visual Studio is the obvious choice. VS Provides all the features that i need to improve my code in every way.&lt;/p&gt;

&lt;p&gt;For you it might be different you might be working with JS or Java ... etc, So you have to choose what helps you write faster. As nowadays Writing Speed is way more important than execution speed (A Topic For Another Day )&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-not-documenting-the-code"&gt;
  &lt;/a&gt;
  5 ‚Äì Not Documenting The Code
&lt;/h2&gt;

&lt;p&gt;It‚Äôs One thing to write code, but another thing to read it again after a few months, no even a few days.&lt;/p&gt;

&lt;p&gt;It‚Äôs very frustrating for both you and people that read your code.&lt;/p&gt;

&lt;p&gt;So the next time you write code use patterns, use comments and always use good naming (Check Out The Previous Post : &lt;a href="https://dev.to/zairiaimendev/if-the-code-works-dont-touch-it--om4"&gt;If The Code Works Don't Fix It&lt;/a&gt; ).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-always-seeking-new-technology"&gt;
  &lt;/a&gt;
  6 - Always Seeking New Technology
&lt;/h2&gt;

&lt;p&gt;Jumping over to new technologies without thinking about the consequences.&lt;/p&gt;

&lt;p&gt;Don‚Äôt be a ‚Äújack of all trades, master of none‚Äù. Choose a technology that is proven in the field. Master it.&lt;/p&gt;

&lt;p&gt;Don‚Äôt be fooled by all the buzz, even if a technology seems popular always stick to the basics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-being-afraid-to-touch-existing-code"&gt;
  &lt;/a&gt;
  7 - Being Afraid To Touch Existing Code
&lt;/h2&gt;

&lt;p&gt;I‚Äôm guilty of this one myself. Whenever i opened some GitHub code i felt overwhelmed with the amount of code, the way they write it and having multiple projects.&lt;/p&gt;

&lt;p&gt;But once i learned how to read and write clean code it has changed my point of view completely.&lt;/p&gt;

&lt;p&gt;Don‚Äôt be afraid to read code or even modify it if you feel like your modifications can improve it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-believing-there-are-only-7-deadly-sins"&gt;
  &lt;/a&gt;
  8 - Believing There are Only 7 Deadly Sins
&lt;/h2&gt;

&lt;p&gt;Share What You Think is a deadly sin in the comments down bellow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-not-supporting-your-fellow-developers"&gt;
  &lt;/a&gt;
  9 - Not Supporting Your Fellow Developers
&lt;/h2&gt;

&lt;p&gt;This is a just joke&lt;/p&gt;

&lt;p&gt;Check Out The Blog And YouTube Channel For More Content Like This :&lt;br&gt;
&lt;a href="https://zairiaimen.com"&gt;https://zairiaimen.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UC757WHzy1Fv6aMG593fmLjQ"&gt;https://www.youtube.com/channel/UC757WHzy1Fv6aMG593fmLjQ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Open VS Code/Insiders directly within any folder in Linux</title>
      <author>Md. Fahim Bin Amin</author>
      <pubDate>Fri, 05 Nov 2021 18:12:20 +0000</pubDate>
      <link>https://dev.to/fahimfba/open-vs-codeinsiders-directly-within-any-folder-in-linux-2n9d</link>
      <guid>https://dev.to/fahimfba/open-vs-codeinsiders-directly-within-any-folder-in-linux-2n9d</guid>
      <description>&lt;p&gt;In Windows operating system, we prefer to enable the context menu option of Visual Studio Code or Visual Studio Code Insiders so that we can open the VS Code/Insiders within any folder we want. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cT34Wkp6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmicnwrsdrh8vomrr75o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cT34Wkp6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmicnwrsdrh8vomrr75o.png" alt="VS Code Context Menu in Windows 11" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
If I simply zoom in the image a little bit, then we can get a clear view of that. Although I am providing the visual glimpse on a Windows 11 machine, it works similarly in Windows 7, 8, 8.1, 10 as well.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3-GmOxWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9anxhi8sl6m8c1rcvpo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3-GmOxWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9anxhi8sl6m8c1rcvpo.png" alt="Zoom in WIndows 11" width="695" height="510"&gt;&lt;/a&gt;&lt;br&gt;
When using Linux Operating System, sometimes we want to open the VS Code/Insiders directly within a folder by using the right mouse button clicking context menu. Sadly, it does not appear there by default. Don't worry, we can enable that feature in any Linux distribution based operating system as well. You can do that by following two simple tricks, but I will show you the most simple trick I always use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the terminal / konsole.&lt;/li&gt;
&lt;li&gt;Copy and paste the following command:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget &lt;span class="nt"&gt;-qO-&lt;/span&gt; https://raw.githubusercontent.com/harry-cpp/code-nautilus/master/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Press on the &lt;code&gt;Enter&lt;/code&gt; key. Provide the password as well if it asks for that.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Optional:&lt;/strong&gt; Run an update and upgrade of the system. You can do that using the terminal as well. Like, for the debian based distributions, you can use the following command.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt upgrade &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the necessary command (sudo dnf / pamac) if you are on other distributions (Arch/RPM/etc.).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now you are good to go. The feature has been enabled globally.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WB1gZMvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk1rh99kurjw2rl1213w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WB1gZMvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk1rh99kurjw2rl1213w.png" alt="Open with code" width="880" height="576"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading this entire article. You may follow me on &lt;a href="https://github.com/FahimFBA"&gt;GitHub&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/fahimfba/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/Fahim_FBA"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.youtube.com/c/InnovationWithIphim"&gt;YouTube&lt;/a&gt; as well. Have a nice day!&lt;/p&gt;

</description>
      <category>visualstudiocode</category>
      <category>vscode</category>
      <category>contextmenu</category>
      <category>bash</category>
    </item>
  </channel>
</rss>
