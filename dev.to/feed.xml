<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>State of Go / Golang in 2021</title>
      <author>Meat Boy</author>
      <pubDate>Fri, 27 Aug 2021 12:40:10 +0000</pubDate>
      <link>https://dev.to/meatboy/state-of-go-golang-in-2021-34ni</link>
      <guid>https://dev.to/meatboy/state-of-go-golang-in-2021-34ni</guid>
      <description>&lt;p&gt;What is the state of Go in 2021 in your opinion? Is it worth learning or write applications? &lt;/p&gt;

&lt;p&gt;The performance of apps written in Go is great but for many businesses, that's not enough. Crucial is also stability, the potential of maintenance in long therm and so on. What do you think about the ecosystem around Go language?&lt;/p&gt;

</description>
      <category>go</category>
      <category>discuss</category>
      <category>webdev</category>
      <category>backend</category>
    </item>
    <item>
      <title>How to use Python to Create Files?</title>
      <author>hrishikesh1990</author>
      <pubDate>Fri, 27 Aug 2021 12:03:02 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-use-python-to-create-files-41eb</link>
      <guid>https://dev.to/hrishikesh1990/how-to-use-python-to-create-files-41eb</guid>
      <description>&lt;p&gt;In this short tutorial, we learn how to use Python to create a file. We also look at the write, read, and append file handling methods.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#why-use-python-to-create-files"&gt;Why use Python to Create files?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#how-to-create-files-in-python"&gt;How to create files in Python&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#file-handling-methods"&gt;File handling methods&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#closing-thoughts"&gt;Closing thoughts&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-use-python-to-create-files"&gt;
  &lt;/a&gt;
  Why use Python to Create files?
&lt;/h2&gt;

&lt;p&gt;Like most programming languages, Python too supports file handling. However, since Python treats files as text or binary, handling files is much easier. The most used file handling methods are to create, read and write files. &lt;/p&gt;

&lt;p&gt;In this tutorial, we largely focus on how to use Python to create a file as this is the first step to file handling. However, we do introduce you to how you could read and write files. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-files-in-python"&gt;
  &lt;/a&gt;
  How to create files in Python:
&lt;/h2&gt;

&lt;p&gt;To create a file in Python we use the in-built &lt;code&gt;open()&lt;/code&gt; function. There are other methods that utilize the OS module in Python, however, a few methods would require root permission. Hence to standardize this tutorial I have only used the &lt;code&gt;open()&lt;/code&gt; method. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-open"&gt;
  &lt;/a&gt;
  Syntax of open():
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters:
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;open()&lt;/code&gt; methods require two parameters, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;File&lt;/code&gt; - Required, the name or path of the file. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Access mode&lt;/code&gt; - Access modes govern the type of operations you would be performing. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we are trying to create a file, the access mode we would use is “x”. I’ve added a list of all the access modes below. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-amp-explanation"&gt;
  &lt;/a&gt;
  Code &amp;amp; Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"myfirstfile.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we have used the &lt;code&gt;open()&lt;/code&gt; to create a file, since we have not specified a path, the file is created in the same directory as the script. &lt;/p&gt;

&lt;p&gt;In case the file already exists, Python returns a &lt;code&gt;FileExistsError&lt;/code&gt;. Try running the same code twice and you will receive this error. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-handling-methods"&gt;
  &lt;/a&gt;
  File handling methods:
&lt;/h2&gt;

&lt;p&gt;Apart from the create method, I’d like to give you an introduction about the read, write and append methods. I’ve added below a list of all the methods along with their access modes. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Read-only (‘r’)&lt;/strong&gt;: This method is used to read an existing file. In case the file does not exist, a &lt;code&gt;FileNotFoundError&lt;/code&gt; is returned. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Read and Write (‘r+’)&lt;/strong&gt;: This method is used to read and write a file, and similar to Read-only a &lt;code&gt;FileNotFoundError&lt;/code&gt; is returned if the file does not exist.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Write Only (‘w’)&lt;/strong&gt;: This method can be used to open and write to a file. In case a file does not exist, the file is created. And in case it does, the content of the file is overwritten.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Append (‘a’)&lt;/strong&gt;: This method is used to add content to a file. The handler is positioned at the bottom of the file and hence the content is written at the bottom of the file. The method also creates a file in case it does not exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts:
&lt;/h2&gt;

&lt;p&gt;As you may have noticed, the write and append methods can also be used to create files. However, I would recommend you familiarize yourself with the create methods first before you start to use other methods in Python to create files. &lt;/p&gt;

&lt;p&gt;This is because the write method overwrites the existing data. Although the append methods do not overwrite data both these methods are not very user-friendly while creating files. Hence do practice creating files first before you start using the other methods to do the same.&lt;/p&gt;

&lt;p&gt;Do let me know your thoughts in the comments section below. :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>480+ handpicked tools &amp; resources for web designers/developers 🧰</title>
      <author>Adam Greenough</author>
      <pubDate>Fri, 27 Aug 2021 11:58:12 +0000</pubDate>
      <link>https://dev.to/adamgreenough/480-handpicked-tools-resources-for-web-designers-developers-4con</link>
      <guid>https://dev.to/adamgreenough/480-handpicked-tools-resources-for-web-designers-developers-4con</guid>
      <description>&lt;p&gt;Hey everyone! Passed 10 years in the industry now and my bookmarks continue to boom. I've curated all my favourite tools &amp;amp; resources for web designers &amp;amp; developers to share with you too. Almost all are free, with the exception of a few which will have a from price on the card.&lt;/p&gt;

&lt;p&gt;I hope you find something new to take with you on your dev journey!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-amp-resources-for-web-designers-amp-developers"&gt;
  &lt;/a&gt;
  Tools &amp;amp; Resources for Web Designers &amp;amp; Developers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/accessibility/"&gt;🚹 Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/animation/"&gt;✨ Animation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/api/"&gt;🔌 API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/audio/"&gt;🎵 Audio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/backgrounds/"&gt;🖼 Backgrounds &amp;amp; Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/blogs/"&gt;📖 Blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/books/"&gt;📚 Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/branding/"&gt;🦄 Branding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/business/"&gt;💼 Business&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/cms/"&gt;🗂 CMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/code/"&gt;⌨️ Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/colour/"&gt;🌈 Colour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/community/"&gt;👨‍👩‍👧‍👦 Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/copywriting/"&gt;✒️ Copywriting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/developer-tools/"&gt;🛠 Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/domains-hosting/"&gt;🌐 Domains &amp;amp; Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/email/"&gt;📨 Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/fun/"&gt;😀 Fun &amp;amp; Games&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/hardware-merch/"&gt;👕 Hardware &amp;amp; Merch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/icons/"&gt;🔣 Icon Packs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/illustrations/"&gt;✍️ Illustrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/inspiration/"&gt;💡 Inspiration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/job-boards/"&gt;💰 Job Boards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/learning/"&gt;🎓 Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/marketing/"&gt;📢 Marketing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/marketplaces/"&gt;💸 Marketplaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/mockups/"&gt;📱 Mockups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/newsletters/"&gt;🗞 Newsletters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/photography/"&gt;📸 Photography &amp;amp; Stock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/placeholders/"&gt;📦 Placeholders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/podcasts/"&gt;🎙 Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/productivity/"&gt;✅ Productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/public-health/"&gt;🦠 Public Health&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/security/"&gt;🛡 Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/self-care/"&gt;🧘‍♂️ Self Care&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/self-hosted/"&gt;🧰 Self Hosted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/seo/"&gt;🔍 SEO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/services/"&gt;⚡️ Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/software/"&gt;💿 Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/templates/"&gt;📐 Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/testing/"&gt;🧪 Test &amp;amp; Optimise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/typography/"&gt;🔤 Typography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/ui-kits/"&gt;💻 UI Kits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/ux-design/"&gt;🪄 UX Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/video/"&gt;🎥 Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/wordpress/"&gt;🖊 WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#am-i-missing-any-of-your-favourites"&gt;
  &lt;/a&gt;
  Am I missing any of your favourites?
&lt;/h2&gt;

&lt;p&gt;Please let me know if I am missing any of your favourites in the comments! &lt;/p&gt;

</description>
      <category>showdev</category>
      <category>design</category>
      <category>discuss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 things you should know when you start your career in software engineering.</title>
      <author>Ankur Tyagi</author>
      <pubDate>Fri, 27 Aug 2021 11:54:43 +0000</pubDate>
      <link>https://dev.to/tyaga001/5-things-you-should-know-when-you-start-your-career-in-software-engineering-4a4m</link>
      <guid>https://dev.to/tyaga001/5-things-you-should-know-when-you-start-your-career-in-software-engineering-4a4m</guid>
      <description>&lt;p&gt;5 things you should know when you start your career in software engineering. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-your-1st-job-is-not-going-to-define-your-life"&gt;
  &lt;/a&gt;
  1. Your 1st Job is not going to define your life.
&lt;/h2&gt;

&lt;p&gt;Is a dream job your only path to career fulfillment? Many people think so. &lt;/p&gt;

&lt;p&gt;They believe that finding their dream job is the only way to ensure happiness.&lt;/p&gt;

&lt;p&gt;"The truth is that many people fail to land their ultimate dream job."&lt;/p&gt;

&lt;p&gt;That doesn’t mean they don’t enjoy their work or the people they work with.&lt;/p&gt;

&lt;p&gt;How do you know if you’ve found your dream job?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You need to define exactly what makes your dream job.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's important to assess what you expect from a job that would completely engage you.&lt;/p&gt;

&lt;p&gt;Success can be rarely measured by someone’s job or wealth. &lt;/p&gt;

&lt;p&gt;The true definition of success derives from the ability to do something that you truly love.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To be able to care for others&lt;/li&gt;
&lt;li&gt;To overcome your greatest fears&lt;/li&gt;
&lt;li&gt;To find blissful happiness.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#2-your-1st-company-is-not-going-to-define-your-life"&gt;
  &lt;/a&gt;
  2. Your 1st company is not going to define your life.
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Working for a renowned company does look good on your resume, But having a job in well-known company isn’t your only success.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because most jobs are a temporary state and can change at any moment.&lt;/p&gt;

&lt;p&gt;While life is known to be filled with uncertainty, most of us believe we have complete control over our circumstances.&lt;/p&gt;

&lt;p&gt;Essentially, nothing is permanent. &lt;br&gt;
Life is full of surprises.&lt;/p&gt;

&lt;p&gt;All you should care about is your happiness.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-your-1st-pay-package-is-not-going-to-define-your-life"&gt;
  &lt;/a&gt;
  3. Your 1st pay package is not going to define your life.
&lt;/h2&gt;

&lt;p&gt;It took me a long time to realize all that mattered was, that I could pay my bills, which was the only reason for doing this.&lt;/p&gt;

&lt;p&gt;I’ve learned that making a ‘living’ is not the same thing as making a ‘life.&lt;/p&gt;

&lt;p&gt;~Maya Angelou&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-your-1st-product-is-not-going-to-define-your-life"&gt;
  &lt;/a&gt;
  4. Your 1st product is not going to define your life.
&lt;/h2&gt;

&lt;p&gt;Because people won’t remember you by the product, but by how you make them feel.&lt;/p&gt;

&lt;p&gt;When people talk or think about you, the thought of your career might come up, but your personality &amp;amp; character will resonate with them more.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-your-1st-startup-is-not-going-to-define-your-life"&gt;
  &lt;/a&gt;
  5. Your 1st startup is not going to define your life.
&lt;/h2&gt;

&lt;p&gt;Working for a start-up is attractive.&lt;br&gt;
Starting a start-up is attractive.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s true that joining a start-up can be a fun, smart, and even life-changing move.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Starting an online business, in particular, is a great thing.&lt;/p&gt;

&lt;p&gt;However, it’s a terribly challenging thing too.&lt;/p&gt;

&lt;p&gt;It’s literally like having 3 children in 1 year.&lt;/p&gt;

&lt;p&gt;I’m not trying to discourage you.&lt;br&gt;
I just want to give you an honest heads up.&lt;/p&gt;

&lt;p&gt;It’s your responsibility to assess the risk in the end.&lt;/p&gt;




&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;If you’re a regular reader, thank you, you’re a big part of the reason I’ve been able to share my life/career experiences with you. &lt;/p&gt;

&lt;p&gt;"Don't miss out" Follow your mentor  on Twitter 👉 &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;TheAnkurTyagi&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I have written a book for developer growth &amp;amp; shared my 12+ years of experience.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are serious to grow as a developer. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Grab the book now for just $22 &lt;a href="https://gumroad.com/l/nextgendev/"&gt;The Prime Guide&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xw1EN5HR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061060917/iWEpWZmbS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xw1EN5HR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061060917/iWEpWZmbS.png" alt="book.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Join 100+ developers who already bought &amp;amp; growing better. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-write-more-about-code-life-and-fitness-in-my-211-newsletter"&gt;
  &lt;/a&gt;
  I write more about code life and fitness in my 2-1-1 newsletter.
&lt;/h3&gt;

&lt;p&gt;I encourage you to sign up for my weekly:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“2-1-1” Friday newsletter:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check out previous editions: 👇&lt;/p&gt;

&lt;p&gt;It's free.  &lt;a href="https://codelifefitness.com/2-1-1/"&gt;CLF&lt;/a&gt; &lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Github/DevOps status</title>
      <author>Marcel.L</author>
      <pubDate>Fri, 27 Aug 2021 11:43:08 +0000</pubDate>
      <link>https://dev.to/pwd9000/github-devops-status-2eji</link>
      <guid>https://dev.to/pwd9000/github-devops-status-2eji</guid>
      <description>&lt;p&gt;You can check the status of github in real-time, incl. historical data on system performance, follow incidents or scheduled maintenance by going to: &lt;a href="https://www.githubstatus.com/"&gt;https://www.githubstatus.com/&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gXPYSd5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Status-Check/assets/gh_status.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gXPYSd5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Status-Check/assets/gh_status.png" alt="gh_status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly to check the status of Azure DevOps you can use: &lt;a href="https://status.dev.azure.com/"&gt;https://status.dev.azure.com/&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCJVuFfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Status-Check/assets/ado_status.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCJVuFfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Status-Check/assets/ado_status.png" alt="ado_status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both status pages also has an RSS feed. In my next article/tutorial I will show how to create an Azure Logic App that will notify you when any of the services become degraded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__620034"&gt;
  
    .ltag__user__id__620034 .follow-action-button {
      background-color: #0cbb58 !important;
      color: #000000 !important;
      border-color: #0cbb58 !important;
    }
  
    &lt;a href="/pwd9000" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amb4rEJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L_SDLOmq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620034/93be2c72-3a13-478e-8af1-a4bedc1b2331.jpeg" alt="pwd9000 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pwd9000"&gt;Marcel.L&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pwd9000"&gt;Cloud Solutions Architect and DevOps enthusiast.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>tutorial</category>
      <category>devops</category>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>A Beginners Guide to Falling in Love with Algorithms - Part 1</title>
      <author>Martin Edvardsen</author>
      <pubDate>Fri, 27 Aug 2021 11:04:31 +0000</pubDate>
      <link>https://dev.to/itminds/a-beginners-guide-to-falling-in-love-with-algorithms-part-1-5aid</link>
      <guid>https://dev.to/itminds/a-beginners-guide-to-falling-in-love-with-algorithms-part-1-5aid</guid>
      <description>&lt;p&gt;The purpose of this series of blog posts is to demystify and conceptualize algorithms - more specifically the design and analysis hereof. These blog posts are targeted for software development students early in their studies, as well as students from similar lines of study. &lt;/p&gt;

&lt;p&gt;However, I will also continuously relate the concepts to examples in laymans terms, to include people with no related background, but merely with a desire to learn more about algorithms. A certain level of mathematical understanding is however a prerequisite. &lt;/p&gt;

&lt;p&gt;Some would argue that an understanding of algorithms is not needed to become a programmer. An understanding of algorithms will separate you from these programmers, by allowing you to quantify and compare different approaches to a problem. It will give you a broader vocabulary, or even language, with which you can rightfully reason for the superiority of a solution, or algorithm, for a given problem.&lt;/p&gt;

&lt;p&gt;Most importantly, in terms of everyday programming, it will give you a greater understanding of data structures, which are an essential part of writing efficient code. Are you performing lookups in an array of reference type objects? Convert it to a data structure, which supports constant lookups, such as hash tables, instead of a linear scan. Are you using an array-based list for FIFO operations? Array-based lists mean linear time pop operations. Convert it to a FIFO-based data structure, such as a queue, which has constant time append and pop.&lt;br&gt;
Examples like these show you why you need to familiarize yourself with data structures. Do so using what you learn from these blog posts, and you should see a dramatic improvement in the efficiency of your code. &lt;/p&gt;

&lt;p&gt;This specific blog post will also give you the needed prerequisites for the coming blog posts, in which we will get into the actual design of algorithms. Let's get to it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#algorithmic-complexity"&gt;
  &lt;/a&gt;
  Algorithmic complexity
&lt;/h2&gt;

&lt;p&gt;Complexity is the grounds upon which we discuss algorithms, namely in terms of space and time. Intuitively, we often determine the running time of an algorithm based on the input size. We will get back to this, as we familiarize ourselves with different running times. First off, we need to get acquainted with &lt;strong&gt;asymptotic notation&lt;/strong&gt;.  It gives us a way of expressing the growth rate of a function, or algorithm, in which we focus on the important terms of the function. &lt;/p&gt;

&lt;p&gt;Take a simple quadratic equation, (an&lt;sup&gt;2&lt;/sup&gt; + bn + c), i.e.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;15n&lt;sup&gt;2&lt;/sup&gt; + 10n + 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;in which &lt;em&gt;n&lt;/em&gt; defines the size of the input. The running time of this function is bounded by the fastest growing term of this function, which is n&lt;sup&gt;2&lt;/sup&gt;. As the input size &lt;em&gt;n&lt;/em&gt; grows, where a &amp;gt; 0, the term n&lt;sup&gt;2&lt;/sup&gt; will eventually always exceed the size of the other terms and constants, i.e. &lt;em&gt;bn + c&lt;/em&gt; in this case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NVPxvs_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdf8h3vaiis6m8bur32h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NVPxvs_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdf8h3vaiis6m8bur32h.png" alt="Growth rates"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Using asymptotic notation, we express this by removing coefficients and inferior terms, which leaves us with an approximation of the growth rate of an algorithm. In asymptotic notation, we refer to O(⋅), '&lt;strong&gt;big O&lt;/strong&gt;'-notation, which expresses an upper bound on an algorithm, i.e. the worst case scenario, and Ω(⋅), '&lt;strong&gt;big theta&lt;/strong&gt;'-notation, which expresses a lower bound on an algorithm, i.e. the best case scenarios. In this series of blog posts, we will only focus on the upper bound.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asymptotic-running-times"&gt;
  &lt;/a&gt;
  Asymptotic running times
&lt;/h2&gt;

&lt;p&gt;Again, let's talk about prerequisites. Complexity refers to both running time and space consumption, however, we will focus on running times, as it is more approachable and intuitive than space complexity.&lt;/p&gt;

&lt;p&gt;The examples of this post will be based on both a list of whole numbers, i.e. an integer array, with a thousand elements and a group of people, for different levels of complexity. Furthermore, for the sake of simplicity and understanding, we assume that one operation takes one second. For our group of people, a question to a member of the group could correspond to an operation. Finally, we will refer to the below graph from &lt;a href="http://www.bigocheatsheet.com"&gt;http://www.bigocheatsheet.com&lt;/a&gt; for a visual comparison of the running times.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xbACB43x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8k0l5gcmhqg2j5e61rh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xbACB43x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8k0l5gcmhqg2j5e61rh.png" alt="Complexity Chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o1-constant-time"&gt;
  &lt;/a&gt;
  &lt;strong&gt;O(1)&lt;/strong&gt;. Constant Time
&lt;/h3&gt;

&lt;p&gt;This is referred to as constant time, as it requires a constant amount of operations. The &lt;em&gt;bigocheatsheet&lt;/em&gt; graph refers to this as an 'excellent' running time. Furthermore, an important point here is that the algorithm is independent of the input size, which means the running time does not increase, as the input increases.&lt;/p&gt;

&lt;p&gt;An example of a constant time algorithm is finding the value of an element of our integer array. Given an integer array with a thousand elements, accessing a single element at a certain index is constant, as it requires a single lookup, which corresponds to a single second. &lt;/p&gt;

&lt;p&gt;This example corresponds to finding the age of a specific person from a group, regardless of the size, which only requires a single question to that very person. Simple, right? Moving on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EVp8UIUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg9i6oik6xyyyubhusxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EVp8UIUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg9i6oik6xyyyubhusxv.png" alt="Constant time example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-linear-time"&gt;
  &lt;/a&gt;
  &lt;strong&gt;O(n)&lt;/strong&gt;. Linear Time
&lt;/h3&gt;

&lt;p&gt;This is referred to as linear time, as it is linearly dependent on the size of the input. The &lt;em&gt;bigocheatsheet&lt;/em&gt; graph refers to this as a 'fair' running time. As the size of your input increases, so does your number of operations, and therefore your running time. However, remember that due to our '&lt;strong&gt;big O&lt;/strong&gt;'-notation, the running time of a linear time algorithm increases at &lt;strong&gt;most&lt;/strong&gt; at the same rate, as the number of elements of the input - for simplicity our example will use every element of the input.&lt;/p&gt;

&lt;p&gt;An example of a linear time algorithm is finding the minimum value of an unsorted integer array. Given an integer array with a thousand elements, finding the minimum value requires iterating through the entire list, which requires &lt;em&gt;n&lt;/em&gt; operations, which in our case corresponds to a thousand seconds. A dramatic increase in running time, compared to constant time, O(1), with no increase in the input size.&lt;/p&gt;

&lt;p&gt;This example corresponds to finding the youngest person in a group of people, which requires asking every single person of said group, before you are able to conclude, which person is the youngest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P-WrWneJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4c5lkwk7ix8f3ubmbax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P-WrWneJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4c5lkwk7ix8f3ubmbax.png" alt="Linear time example"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on2-quadratic-time-and-on-logn-linearithmic-time"&gt;
  &lt;/a&gt;
  &lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;. Quadratic Time and &lt;strong&gt;O(n log(n))&lt;/strong&gt;. Linearithmic Time
&lt;/h3&gt;

&lt;p&gt;We now increase the theoretical complexity considerably. We assess two running times, which are often referred to in job interviews in combination - quadratic (polynomial) time and linearithmic time algorithms, respectively. Interviewers will often pose problems, which seem to have an obvious, intuitive solution in quadratic time, but are often solvable in at least linearithmic time - a dramatic improvement in running time.&lt;/p&gt;

&lt;p&gt;With O(n&lt;sup&gt;2&lt;/sup&gt;), we look at each element a constant amount of times, for each other element, at most, which is a considerable increase in operations, compared to linear time, where we only look at each element a constant amount of times. This is a dramatic increase in running time, which is also apparent in the &lt;em&gt;bigocheatsheet&lt;/em&gt; graph, where we've moved from the yellow (fair), into the red (horrible). In a job interview, such a running time should be your cue to look for a better solution.&lt;/p&gt;

&lt;p&gt;An example of a quadratic time algorithm is finding all pairs in our integer array. Given an integer array of a thousand elements, one would find all pairs by iterating over the entire collection of size &lt;em&gt;n&lt;/em&gt; once for each of the &lt;em&gt;n&lt;/em&gt; elements. This corresponds to &lt;em&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt; operations, which in the case of the integer array corresponds to a million seconds. A nested loop, in which both the inner and outer loop iterates the &lt;strong&gt;same&lt;/strong&gt; list, is a classic example of a quadratic time algorithm.&lt;/p&gt;

&lt;p&gt;This example translates directly to our group of people, in which we try to find all pairs of people. It should be noted that pairing up with oneself would not be a valid pair, but it is irrelevant for the matter of the example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWeYQyit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dtq8jq3vav68lkg0poh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWeYQyit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dtq8jq3vav68lkg0poh.png" alt="Quadratic time example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For O(n log n), first we note, that we typically refer to &lt;em&gt;log2(n)&lt;/em&gt;, as we discuss logarithms in algorithms. The graph places this between linear and quadratic time, at a 'bad' running time. If needed, please do refresh your memory on logarithms - the kryptonite of exponentials - before continuing with the next blogpost. The most common linearithmic time algorithms are definitely sorting algorithms. Replacing a quadratic time sorting algorithm with one of linearithmic time is an example of said improvement of running time.&lt;/p&gt;

&lt;p&gt;An example of a linearithmic time algorithm is mergesort. In short, given our integer array with a thousand elements, one would compare pairwise consecutive integers &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;((e1, e2), (e3, e4), (e5, e6) ...)&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and then merge exponentially larger sets of integers until finally combining the two halves of the array. Don't worry about the details of the algorithm - we'll get into the algorithm in the next blogpost.&lt;/p&gt;

&lt;p&gt;This algorithm and example would also be applicable for sorting a group of people by age, but quite hard to explain in layman's terms. For a more hands-on example, however, I strongly recommend this clip, &lt;a href="https://www.youtube.com/watch?v=XaqR3G_NVoo"&gt;https://www.youtube.com/watch?v=XaqR3G_NVoo&lt;/a&gt;, in which Sapientia University visualizes the mergesort algorithm by means of Transylvanian-saxon folk dance. If nothing, just do it for the laugh of it.&lt;/p&gt;

&lt;p&gt;The important thing to notice here is the dramatic improvement in running time. A quadratic time algorithm would sort an array in &lt;em&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt; operations, i.e. a million operations or seconds in our case; the linearithmic algorithm only requires &lt;em&gt;n log n&lt;/em&gt; operations, i.e. ten thousand operations or seconds. This is a reduction from eleven days to two hours!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ologn-logarithmic-time"&gt;
  &lt;/a&gt;
  &lt;strong&gt;O(log(n))&lt;/strong&gt; Logarithmic Time
&lt;/h3&gt;

&lt;p&gt;We refer to this as logarithmic time. Returning to the &lt;em&gt;bigocheatsheet&lt;/em&gt; graph, we finish back where we started, an 'excellent' running time, even though the running time is dependent on the input size, &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An example of a logarithmic time algorithm is binary search for ordered collections. Given our integer array, you search for an integer &lt;em&gt;i&lt;/em&gt; of the array, by continuously looking at the element at the center of the array, and doing one of three things. If the value of the middle element &lt;em&gt;m&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is the integer &lt;em&gt;i&lt;/em&gt;, we have found the integer.&lt;/li&gt;
&lt;li&gt;Is greater than the integer &lt;em&gt;i&lt;/em&gt;, we repeat the process for the lower half of the array.&lt;/li&gt;
&lt;li&gt;Is less than the integer &lt;em&gt;i&lt;/em&gt;, we repeat the process for the upper half of the array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It should be noted, that other strategies exist for picking the pivot other than choosing the middle element. This is irrelevant for the purpose of this example. It is important to notice, that as a property of logarithms, we need to do this no more than &lt;em&gt;log2(n)&lt;/em&gt; times, as this would leave us with a single element. To figure out, why this is true, try to prove to yourself, that &lt;em&gt;x&lt;/em&gt; in &lt;em&gt;log2(n) = x&lt;/em&gt;, represents the number of times, we can half our input size, and that &lt;em&gt;n&lt;/em&gt; in &lt;em&gt;2&lt;sup&gt;x&lt;/sup&gt; = n&lt;/em&gt;, represents the size of an array you get by doubling &lt;em&gt;x&lt;/em&gt; times.&lt;/p&gt;

&lt;p&gt;This example corresponds to having a thousand people line up in order of their salary, and looking for the person closest to a ridiculously specific yearly salary, such as 359344,297 DKK. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hORr0gs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciweveljea97kyqhk1l5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hORr0gs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciweveljea97kyqhk1l5.png" alt="Logarithmic time example"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;By following the three steps above, you only need to ask a maximum of &lt;em&gt;log2(n) + 1&lt;/em&gt; people, in this case eleven, to come to a conclusion. Note, that the last question (i.e. the + 1) comes from asking the last person to compare him with his "neighbours".&lt;/p&gt;

&lt;p&gt;Again, the important thing to notice is how logarithms scale. If we increase the number of people to a million people, the amount of needed questions only increases to twenty. This explains, why it is depicted on top of constant time algorithms in the &lt;em&gt;bigocheatsheet&lt;/em&gt; graph, as it almost seems to be independent of the input size, &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-to-come"&gt;
  &lt;/a&gt;
  What's to come?
&lt;/h2&gt;

&lt;p&gt;With the basics down, we will get into the design and analysis of algorithms in the next two blog posts. We will do so by becoming acquainted with three families of algorithms - greedy algorithms, dynamic programming algorithms, and divide and conquer algorithms. This will lead us to the final blog post, which will discuss the subject of my own master thesis, which is based on randomized algorithms - more specifically differential privacy.&lt;/p&gt;

&lt;p&gt;You made it this far. By now, you should already feel more comfortable discussing algorithms and data structures in future projects. We've covered the basics, which means, you are more than qualified for reading the rest of the posts. I hope you do!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XaqR3G_NVoo"&gt;https://www.youtube.com/watch?v=XaqR3G_NVoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bigocheatsheet.com/"&gt;https://www.bigocheatsheet.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Algorithm Design, Kleinberg and Tardos&lt;/li&gt;
&lt;li&gt;Coding Blocks, episode 'What is Algorithmic Complexity?'&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
    </item>
    <item>
      <title>10 FREE Udemy courses for you to learn JavaScript</title>
      <author>Pasca Vlad</author>
      <pubDate>Fri, 27 Aug 2021 10:54:53 +0000</pubDate>
      <link>https://dev.to/pascavld/10-free-udemy-courses-for-you-to-learn-javascript-2hgd</link>
      <guid>https://dev.to/pascavld/10-free-udemy-courses-for-you-to-learn-javascript-2hgd</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code Your First Game: Arcade Classic in JavaScript on Canvas&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/code-your-first-game/"&gt;https://www.udemy.com/course/code-your-first-game/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Programming for Entrepreneurs - JavaScript&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/programming-for-entrepreneurs-javascript/"&gt;https://www.udemy.com/course/programming-for-entrepreneurs-javascript/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start with Javascript (2021)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/start-javascript/"&gt;https://www.udemy.com/course/start-javascript/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Javascript Programming For Beginners (2021)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/javascript-programming-for-beginners/"&gt;https://www.udemy.com/course/javascript-programming-for-beginners/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JavaScript for beginners&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/javascript-darwish/"&gt;https://www.udemy.com/course/javascript-darwish/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fundamentals of JavaScript&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/fundamentals-of-javascript-mask/"&gt;https://www.udemy.com/course/fundamentals-of-javascript-mask/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Javascript Array Methods&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/javascript-array-methods/"&gt;https://www.udemy.com/course/javascript-array-methods/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Pure JavaScript Calculator Code ES6 Learn JavaScript&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/javascript-code-exercise/"&gt;https://www.udemy.com/course/javascript-code-exercise/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JavaScript for QA Engineers and SDETs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/javascript-for-qa-engineers-and-sdets/"&gt;https://www.udemy.com/course/javascript-for-qa-engineers-and-sdets/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Learn JavaScript, Get Hired | The Essentials&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/learn-javascript-get-hired-essentials/"&gt;https://www.udemy.com/course/learn-javascript-get-hired-essentials/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any questions feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Create Multilingual Website in Laravel 8</title>
      <author>avani-trivedi</author>
      <pubDate>Fri, 27 Aug 2021 10:47:09 +0000</pubDate>
      <link>https://dev.to/avanitrivedi/how-to-create-multilingual-website-in-laravel-8-2ef8</link>
      <guid>https://dev.to/avanitrivedi/how-to-create-multilingual-website-in-laravel-8-2ef8</guid>
      <description>&lt;p&gt;Hi Dev,&lt;/p&gt;

&lt;p&gt;In this tutorial I will share with you how to create a multilingual website in laravel 8 application, I will show an example of laravel 8 multiple languages.&lt;/p&gt;

&lt;p&gt;Here, I will give you a full example of how to laravel 8 multilanguage with language dropdown or laravel 8 multiple language websites as below so follow my all steps.&lt;/p&gt;

</description>
      <category>laravel</category>
    </item>
    <item>
      <title>Software development for portable gadgets</title>
      <author>Victor Quan Lam</author>
      <pubDate>Fri, 27 Aug 2021 10:25:10 +0000</pubDate>
      <link>https://dev.to/victorquanlam/software-development-for-portable-gadgets-lib</link>
      <guid>https://dev.to/victorquanlam/software-development-for-portable-gadgets-lib</guid>
      <description>&lt;p&gt;A portable communication device is a pocket-sized gadget that a person carries with them. They usually have a touch-screen display or a small keyboard. The input and output of a personal digital assistant (PDA) are merged into a touchscreen device. Cellphones and PDAs are popular among folks who need the aid and conveniences of a traditional computer but cannot take one with them. &lt;br&gt;
We want to think that the humanity has always been forward-thinking. However, for the majority of the twentieth century, innovation was a slow and steady process. It was the result of individual brilliance or think tanks. For the most part, clever people innovate, and the general public gradually adopted the concept. With the development of the computer, the mainstream's love affair with innovation began. It gained traction with the invention of the Internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart Gadgets:&lt;/strong&gt;&lt;br&gt;
A smart gadget is an electronic device that communicates with other networks or devices via wireless protocols such as Wi-Fi, Bluetooth, NFC, 3G, and so on. They have the ability to work autonomously as well as collaboratively. Modern technology has transformed previous technology and has had a significant impact on everyone's lives. In our daily lives, we use smart devices in a variety of ways. Smart key chains, smart bands, smart watches, smartphones, tablets, and phablets are some common examples of smart electronics.&lt;br&gt;
It is also capable of artificial intelligence. Smart gadgets are known to function in a variety of ways in a given setting. They have many qualities and may be adapted to the computing environment, the human environment, and the physical world. A smartphone is one of the suggested gadgets that everyone should have in today's environment. Smartphone technology has radically altered the global landscape.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Impact of Technology on Human:&lt;/strong&gt;&lt;br&gt;
The way humans connect with one another has been transformed by technology. Various forms of human communication, helped by technology, have been interwoven into people's life. This has an impact on how individuals and groups interact and communicate with one another. Technology has both positive and harmful effects on people in society. &lt;br&gt;
How we can improve performance of Gadget with Software?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cleaning Gadget:&lt;/strong&gt;&lt;br&gt;
Dirt accumulates on technological devices over time. Dirt is not only ugly, but it may also render gadgets inefficient and dangerous. For example, dust in a computer chassis can cause it to overheat. This causes fans to work faster to disperse heat, requiring more electricity. Most gadget makers provide detailed instructions on how to clean their products. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deleting Unnecessary Files:&lt;/strong&gt;&lt;br&gt;
We wind up acquiring a large number of unneeded files on our storage devices over time. This has the disadvantage of making computing systems slower and files more jumbled. You can manually sort through files and delete those that are no longer needed. You can also use third-party software to sort files based on factors such as frequency of use or date of update. This will give you a good indication of which files you rarely use and can safely delete.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scanning for Malware:&lt;/strong&gt;&lt;br&gt;
Despite our best efforts to keep systems safe, dangerous software occasionally finds its way into our computing devices. This demands regular scans to detect and remove viruses and malware. Most anti-virus and/or anti-malware products allow users to schedule complete scans at regular intervals. Even if you are confident that your system is secure, enable this setting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating Software:&lt;/strong&gt;&lt;br&gt;
Because developers are always adding new features such as security and performance, the software we use in computers, cellphones, and other devices is incredibly dynamic. The quick evolution is advantageous in that it improves user experience and protects against malicious entities. This necessitates that you keep the software on your devices up to date.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accelerometers in Smartphones:&lt;/strong&gt;&lt;br&gt;
The twenty-first century ushers in a new era of technological advancement. Many engineers and scientists' technological creations have benefitted the globe in important ways, such as smartphones, cameras, laptop computers, and many more electrical gadgets that are incredibly valuable to humans and are used in large quantities around the world. The accelerometer is made up of several separate elements that work in a variety of ways.&lt;br&gt;
It is utilized not just in cellphones, but also in many other vital items including as planes, computers, iPhones, tablets, and televisions, all of which are basic human requirements in today's society. Accelerometers are also employed to guarantee that images are shown properly - portrait or landscape - depending on how the phone is held. Accelerometers are increasingly being employed as a form of user input, most notably in current games where tilting and rotating the handset can direct onscreen action. Not only do accelerometers have several applications in business and science that benefit society.&lt;/p&gt;

</description>
      <category>research</category>
      <category>portablegadgets</category>
    </item>
    <item>
      <title>Presetter - The easiest way to reuse your config files and build scripts over npm projects</title>
      <author>Alvis Tang</author>
      <pubDate>Fri, 27 Aug 2021 10:14:22 +0000</pubDate>
      <link>https://dev.to/alvis/presetter-the-easiest-way-to-reuse-your-config-files-and-build-scripts-over-npm-projects-4kl1</link>
      <guid>https://dev.to/alvis/presetter-the-easiest-way-to-reuse-your-config-files-and-build-scripts-over-npm-projects-4kl1</guid>
      <description>&lt;p&gt;Nowadays, as the JS/TS ecosystem continues to mature, developers are writing more and more build scripts and configuration files for their projects. How many times you've copied identical configs for babel, eslint, jest, typescript and the life cycle scripts in package.json?&lt;/p&gt;

&lt;p&gt;For me, I've 40 common devDependencies, 24 scripts and 7 config files across my npm projects. Putting the need to copy and paste these things to bootstrap a new project aside, updating these tools across existing projects is just horrible pain. 🤦‍♂️&lt;/p&gt;

&lt;p&gt;So I spent my spare time making &lt;strong&gt;presetter&lt;/strong&gt;, a utility tool you'd love to use for easily and quickly reusing build scripts/configs across different npm projects. Now, instead of these countless devDependencies, build scripts, and config files, I can reduce them into just 2 devDependencies (or just 1 if you use npm 7+ which auto install peer dependencies automatically) and 1 config file (for presetter to determine which preset to use)!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4vhDDjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9pqxp0f27va7nodj50b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4vhDDjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9pqxp0f27va7nodj50b.jpg" alt="Before and After"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sounds-good-what-is-presetter-and-a-preset-then"&gt;
  &lt;/a&gt;
  😀 Sounds good. What is presetter and a preset then?
&lt;/h2&gt;

&lt;p&gt;Presetter is a new open-source project that simplifies workflow for js/ts developers by providing a utility tool to enable us to store all common developmental configurations in one place, not a copy of those on each repo. This allows not only for the reuse of configurations but also reduces time spent on setup and maintaining the build systems across projects. Presetter is written in typescript but compatible with all js packages, backend, or frontend, as long as you use a package.json.&lt;/p&gt;

&lt;p&gt;In a nutshell, &lt;strong&gt;presetter&lt;/strong&gt; is a utility tool that set up and manage common devDependencies specified by a &lt;strong&gt;preset&lt;/strong&gt;, which provides 3 types of common building configurations: devDependencies, build scripts, and config files. With presetter, you can replace many of your common devDependencies like eslint plugins etc and its config files and scripts into only two dev packages and a config file, namely &lt;em&gt;presetter&lt;/em&gt;, your preset choice, and a &lt;code&gt;.presetterrc&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;By pairing them up, you no longer need to spend hours on maintaining the build systems across projects. Instead, simply pick (and customise) a predefined preset either off-the-shelf from the community or an unpublished private package living in your git repository. What's more? You get version control on the build system for free due to the way how a preset is packaged. Life is much simpler since then!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wow-tell-me-how-to-use-it"&gt;
  &lt;/a&gt;
  😻 Wow. Tell me how to use it
&lt;/h2&gt;

&lt;p&gt;To setup presetter for managing your build system, you can easily achieve it via the &lt;code&gt;presetter use&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx presetter use &amp;lt;preset package name e.g. presetter-preset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which would perform the following few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install presetter and your choice of preset as devDependencies,&lt;/li&gt;
&lt;li&gt;Patch the &lt;code&gt;scripts&lt;/code&gt; field in your &lt;code&gt;package.json&lt;/code&gt; to enable automatic bootstraping via the &lt;code&gt;prepare&lt;/code&gt; life cycle script,&lt;/li&gt;
&lt;li&gt;Bootstrap the preset by installing all the peerDependencies provided by the preset and create symlinks pointing to the generated config files on your project root, and&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;.presetterrc&lt;/code&gt; file on the project root with the following content
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"preset"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;preset package name&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ww8Pox2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36m9ul90iw67t6h2tig9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ww8Pox2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36m9ul90iw67t6h2tig9.gif" alt="Bootstrap Presetter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After starting the project through bootstrapping, you have reached a point where it normally takes 5-10 minutes to duplicate all configuration settings from another repository. Now, you can achieve it by just &lt;strong&gt;ONE COMMAND&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;To apply the preset scripts, you can execute a script by using the &lt;code&gt;presetter run &amp;lt;script name&amp;gt;&lt;/code&gt; or shorthanded &lt;code&gt;run &amp;lt;script name&amp;gt;&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Using &lt;strong&gt;presenter-preset&lt;/strong&gt; for example, when you invoke &lt;code&gt;run build&lt;/code&gt;, presetter will merge the custom scripts defined in your package.json and the &lt;a href="https://github.com/alvis/presetter/blob/master/packages/preset/templates/scripts.yaml"&gt;templated defined here&lt;/a&gt;, then invoke &lt;code&gt;run-s clean build:*&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;run &amp;lt;script name&amp;gt;&lt;/code&gt; as part of your life cycle scripts to make your build experience identical to what you have before. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"coverage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run coverage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run lint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"prepare"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"presetter bootstrap &amp;amp;&amp;amp; run prepare"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"prepublishOnly"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run prepublishOnly"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"release"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run release --"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run test --"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"watch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"run watch"&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#but-can-i-customise-it"&gt;
  &lt;/a&gt;
  👻 BUT. Can I customise it?
&lt;/h2&gt;

&lt;p&gt;Short answer, SURE! You may be just 99% satisfied with the preset and want to change a little thing like turning on/off a lint rule, presetter just get you covered!&lt;/p&gt;

&lt;p&gt;To do this, you just need to pass your customised config in the &lt;code&gt;config&lt;/code&gt; field in &lt;code&gt;.presetterrc.json&lt;/code&gt;. This config will be passed to the preset's configurator to achieve customisation. After adding your config, run &lt;code&gt;npx presetter bootstrap&lt;/code&gt; again to regenerate the config files.&lt;/p&gt;

&lt;p&gt;For example, to add &lt;code&gt;DOM&lt;/code&gt; as a library in tsconfig.json provided by &lt;strong&gt;presetter-preset&lt;/strong&gt;, simply add these lines in your &lt;code&gt;presetterrc.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"preset"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"presetter-preset"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"config"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tsconfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"DOM"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each preset can have its own set of customizable features. So check the preset's  documentation for a full list of customisable elements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cool-whats-the-magic-behind-it"&gt;
  &lt;/a&gt;
  🎩 Cool! What's the magic behind it?
&lt;/h2&gt;

&lt;p&gt;Presetter may sound too good to be true. Now you don't need to copy and paste all the time. But you may wonder how does it work?&lt;/p&gt;

&lt;p&gt;Well, it's actually pretty simple. Presetter basically does the following few things.&lt;/p&gt;

&lt;p&gt;When you run &lt;code&gt;presetter bootstrap&lt;/code&gt;, it&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;generates config files provided from the preset's template with your customisation applied and create symlinks on your project root, and&lt;/li&gt;
&lt;li&gt;uses npm's arborist to install all peer dependencies defined in the preset's package.json, so that it works even with npm &amp;lt;7.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you run &lt;code&gt;presetter run &amp;lt;command&amp;gt;&lt;/code&gt;, it&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;merges your project's package.json with the script template provided by the preset and invoke the command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's basically all about how preset works. Now, let's see what kinds of presets are available and how to contribute one!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alright-what-presets-can-i-try-today"&gt;
  &lt;/a&gt;
  🐣 Alright. What presets can I try today?
&lt;/h2&gt;

&lt;p&gt;A preset is a collection of common development configurations that can be applied to a project. It provides 3 groups of common building tools&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;devDependencies,&lt;/li&gt;
&lt;li&gt;build scripts, and&lt;/li&gt;
&lt;li&gt;config files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Today, we have 4 offical presets for different kinds of projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/alvis/presetter/tree/master/packages/preset"&gt;presetter-preset&lt;/a&gt;: The starter kit for your typescript project, including settings for typescript, eslint, jest, prettier, standard-version and many others&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alvis/presetter/tree/master/packages/preset-esm"&gt;presetter-preset-esm&lt;/a&gt;:  An extension of presetter-preset with dual CJS/ESM export support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alvis/presetter/tree/master/packages/preset-web"&gt;presetter-preset-web&lt;/a&gt;: A preset for a modern web project&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alvis/presetter/tree/master/packages/preset-react"&gt;presetter-preset-react&lt;/a&gt;: A preset for a react project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each preset is a single npm package. You can publish yours to share it with the community or just make it as a github repo without publishing it. Both works.&lt;/p&gt;

&lt;p&gt;Another thing is that you can also contribute to the official presets. See &lt;a href="https://github.com/alvis/presetter/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; for all things related to preset's development and contribution!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-conclude"&gt;
  &lt;/a&gt;
  👾 To Conclude...
&lt;/h2&gt;

&lt;p&gt;Now you can stop worrying about managing devDependencies, scripts and config files. Presetter is a tool that reduces the complexity of your build system. &lt;/p&gt;

&lt;p&gt;We all know that duplication of code is a bad thing, and there are many tools to eliminate it, but we don't have a tool for avoiding copying build configuration.&lt;/p&gt;

&lt;p&gt;It's time to put the messy build configs aside. Try &lt;strong&gt;presetter&lt;/strong&gt; today and visit &lt;a href="https://github.com/alvis/presetter"&gt;the repository on Github&lt;/a&gt; for detailed documentation.&lt;/p&gt;

&lt;p&gt;Don't forget to star or watch this repo if you like it! And don't forget to leave your comments below too. 👇&lt;/p&gt;

</description>
      <category>npm</category>
      <category>productivity</category>
      <category>tooling</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Free Resources for Developers</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Fri, 27 Aug 2021 09:56:43 +0000</pubDate>
      <link>https://dev.to/rainboestrykr/free-resources-for-developers-meg</link>
      <guid>https://dev.to/rainboestrykr/free-resources-for-developers-meg</guid>
      <description>&lt;h3&gt;
  &lt;a href="#who-doesnt-love-free-things"&gt;
  &lt;/a&gt;
  Who doesn't love free things?
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#nobody"&gt;
  &lt;/a&gt;
  nobody
&lt;/h3&gt;

&lt;p&gt;Henceforth, I present before you a curated list of design and UI resources, from stock photos, web templates, CSS frameworks, UI tools, libraries and much more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://devresources.gitbook.io"&gt;Dev Resources&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; is a compilation of the most important resources for developers compiled and stacked into one website for you to access. If you use this product, please do like this post and follow my socials.&lt;/p&gt;

&lt;p&gt;Below listed are some of the popular listings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uidesigndaily.com/"&gt;UI Design Daily&lt;/a&gt;​ - Awesome UI Components of all types &lt;/p&gt;

&lt;p&gt;&lt;a href="https://freetypography.com/"&gt;Free Typography&lt;/a&gt; - A list of high quality fonts&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bootstrapmade.com/"&gt;BootstrapMade&lt;/a&gt; - Elegant, clean and beautiful free &lt;br&gt;
templates using Bootstrap.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://html5up.net/"&gt;HTML5Up&lt;/a&gt; - Very modern, unique responsive HTML5/CSS3 themes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip?hl=en"&gt;WhatRuns&lt;/a&gt; - Discover what runs a website. Frameworks, Analytics Tools, Wordpress Plugins, Fonts - you name it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vectr.com/"&gt;Vectr&lt;/a&gt; - Free vector graphics software&lt;/p&gt;

&lt;p&gt;&lt;a href="https://getwaves.io/"&gt;Get Waves&lt;/a&gt; - A free SVG wave generator to make unique SVG waves for web design&lt;/p&gt;

&lt;p&gt;&lt;a href="http://freebbble.com/"&gt;Freeble&lt;/a&gt; - Vectors, patterns, mockups and more&lt;/p&gt;

&lt;p&gt;&lt;a href="https://lukaszadam.com/"&gt;Lukaszadam&lt;/a&gt; - Free Vector artworks&lt;/p&gt;

&lt;p&gt;&lt;a href="https://illlustrations.co/"&gt;Illlustrations&lt;/a&gt; - Beautiful 100 Illustrations - png, svg&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt; - Free stock photos shared by talented creators&lt;/p&gt;

&lt;p&gt;&lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt; - The internet’s source of freely usable image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mixkit.co/"&gt;Mix Kit&lt;/a&gt; - Stock video clips &amp;amp; music&lt;/p&gt;

&lt;p&gt;&lt;a href="https://favicon.io/"&gt;Favicon.io&lt;/a&gt; - Generate a favicon from text, from an image, or from an emoji. Download in .ico and .png formats&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logosear.ch/search.html"&gt;LogoSear.ch&lt;/a&gt; - Search engine with over 200,000 SVG logos indexed&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svgporn.com/"&gt;SVGPorn&lt;/a&gt; - 1000+ high-quality SVG logos&lt;/p&gt;

&lt;p&gt;&lt;a href="https://remixicon.com/"&gt;Remix Icon&lt;/a&gt; - Simply Delightful Icon System&lt;/p&gt;

&lt;p&gt;&lt;a href="https://iconmonstr.com/"&gt;Iconmonstr&lt;/a&gt; - Discover 4496+ free icons in 313 collections&lt;/p&gt;

&lt;p&gt;&lt;a href="https://angrytools.com/"&gt;Angry Tools&lt;/a&gt; - Free web tools for speed up your development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub"&gt;Rapid API&lt;/a&gt; - Discover and connect to thousands of APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devresources.gitbook.io"&gt;Read More...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you wish for a category or listing to be added, you can comment here below or shoot me an &lt;a href="//mailto:abhirajbhowmick27@gmail.com"&gt;email&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>news</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Best CSS Shorthand properties For Every Front-end Developer</title>
      <author>Tips and Tricks</author>
      <pubDate>Fri, 27 Aug 2021 09:55:34 +0000</pubDate>
      <link>https://dev.to/tips_tricks/best-css-shorthand-properties-for-every-front-end-developer-36oh</link>
      <guid>https://dev.to/tips_tricks/best-css-shorthand-properties-for-every-front-end-developer-36oh</guid>
      <description>&lt;h1&gt;Shorthand properties&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Shorthand properties&lt;/em&gt;&lt;/strong&gt; are CSS properties that let you set the values of multiple other CSS properties simultaneously. Using a shorthand property, you can write more concise (and often more readable) style sheets, saving time and energy.&lt;/p&gt;
&lt;p&gt;The CSS specification defines shorthand properties to group the definition of common properties acting on the same theme. For instance, the CSS &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background"&gt;&lt;code&gt;background&lt;/code&gt;&lt;/a&gt; property is a shorthand property that's able to define the values of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-color"&gt;&lt;code&gt;background-color&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-image"&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat"&gt;&lt;code&gt;background-repeat&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-position"&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/a&gt;. Similarly, the most common font-related properties can be defined using the shorthand &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font"&gt;&lt;code&gt;font&lt;/code&gt;&lt;/a&gt;, and the different margins around a box can be defined using &lt;span&gt; the&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/margin"&gt;&lt;code&gt;margin&lt;/code&gt;&lt;/a&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;shorthand.  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/best-css-shorthand-properties/&amp;amp;ved=2ahUKEwjIoPCc99DyAhU7-nMBHUxQDrYQFnoECEAQAQ&amp;amp;usg=AOvVaw23jKjWtvmnvAtDmQi7vhZp&amp;amp;cshid=1630058051965"&gt;CSS Shorthand properties for Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
