<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Começando um projeto Web com TypeScript</title>
      <author>Guilherme Siquinelli</author>
      <pubDate>Mon, 15 Nov 2021 20:50:11 +0000</pubDate>
      <link>https://dev.to/guiseek/comecando-um-projeto-web-com-typescript-588f</link>
      <guid>https://dev.to/guiseek/comecando-um-projeto-web-com-typescript-588f</guid>
      <description>&lt;p&gt;Para começar um projeto do zero, simples, usando HTML, CSS, TypeScript e ESBuild.&lt;/p&gt;

&lt;p&gt;Precisa fazer as seguintes etapas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Criar o diretório com o nome do seu projeto&lt;/li&gt;
&lt;li&gt;Criar o package.json&lt;/li&gt;
&lt;li&gt;Criar o tsconfig.json&lt;/li&gt;
&lt;li&gt;Instalar as dependências

&lt;ol&gt;
&lt;li&gt;esbuild&lt;/li&gt;
&lt;li&gt;esbuild-serve&lt;/li&gt;
&lt;li&gt;typescript&lt;/li&gt;
&lt;li&gt;prettier&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Criar o diretório src&lt;/li&gt;
&lt;li&gt;Escrever o TypeScript inicial dentro de &lt;code&gt;src&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Criar o diretório public/styles&lt;/li&gt;
&lt;li&gt;Escrever o HTML inicial dentro de &lt;code&gt;public&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Escrever o CSS inicial dentro de &lt;code&gt;public/styles&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Criar a configuração do ESBuild&lt;/li&gt;
&lt;li&gt;Criar a configuração do prettier&lt;/li&gt;
&lt;li&gt;Adicionar &lt;code&gt;"type": "module"&lt;/code&gt; ao &lt;code&gt;package.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Adicionar o script de build ao &lt;code&gt;package.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Adicionar o script de start ao &lt;code&gt;package.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Executar o &lt;code&gt;npm start&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ou então compactar tudo isso em um script bash e usa-lo da seguinte forma&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./create-project.sh meu-projeto
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Segue o código do script&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Ele é extremamente simples e resolve o propósito com excelência.&lt;/p&gt;

&lt;p&gt;Espero ter ajudado, até a próxima.&lt;br&gt;
[]s&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Basic accessibility features you should ALWAYS implement</title>
      <author>Drew Clements</author>
      <pubDate>Mon, 15 Nov 2021 20:46:07 +0000</pubDate>
      <link>https://dev.to/drewclem/basic-accessibility-features-you-should-always-implement-59h4</link>
      <guid>https://dev.to/drewclem/basic-accessibility-features-you-should-always-implement-59h4</guid>
      <description>&lt;p&gt;Accessibility on the web has always been important, but it's only been in the last &amp;lt;10 years that a true emphasis on it has come about. Legally, it's against the law to build a site or application that doesn't adhere to the &lt;a href="https://www.w3.org/TR/WCAG20/"&gt;Web Content Accessibility Guidelines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Purple Cow Agency has &lt;a href="https://purplecowagency.com/is-website-accessibility-a-legal-requirement/"&gt;this great article&lt;/a&gt; where they answer some of the questions around accessibility. They do a great job of answering those questions and giving an easier-to-digest version WCAG 2.1&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;According to Title III of the Americans with Disabilities Act (ADA), all public areas must accommodate people with disabilities—this includes your website. Though the ADA doesn’t mention websites anywhere, the US courts interpret “places of public accommodation” to include the public domain of the internet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today, we're going to look at 3 commonly overlooked accessibility patterns you can add to your projects to get them a few steps closer to be fully accessible compliant!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessible-modals"&gt;
  &lt;/a&gt;
  Accessible Modals
&lt;/h2&gt;

&lt;p&gt;Modals are a very common design pattern across the web today. You see them for newsletter signups, requests for cookie tracking, and- believe it or not- mobile menus!&lt;/p&gt;

&lt;p&gt;Slide-out, pop-out, revealing- whatever you want to call them- mobile menus hidden behind an icon toggle are technically modals, and they should be treated as such!&lt;/p&gt;

&lt;p&gt;They're definitely good patterns to pull user's attention to specific content (especially when they quite literally block other content)- but there are some features they need to be considered a11y compliant.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On open, autofocus the first focusable element in the modal dialog.&lt;/li&gt;
&lt;li&gt;While open, limit mouse and keyboard focusability to &lt;em&gt;only&lt;/em&gt; the content within the modal dialog.&lt;/li&gt;
&lt;li&gt;On close, autofocus the element that initially triggered the modal to open.&lt;/li&gt;
&lt;li&gt;When opened, the modal dialog and content should be appended to the end of the DOM.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, there are a lot of ways to accomplish this. I just wrote an &lt;a href="https://dev.to/drewclem/building-an-accessible-modal-in-vue-2d2a"&gt;article&lt;/a&gt; about how to do this in Vue, if you're interested in implementing this into your Vue project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessible-menus-navigation-submenus"&gt;
  &lt;/a&gt;
  Accessible Menus (navigation submenus)
&lt;/h2&gt;

&lt;p&gt;Collapsible/hover-able navigation menus are another pattern that eat the web up. They make sense. Designers/marketers want to save space &lt;a href="https://www.google.com/search?q=above+the+fold&amp;amp;oq=above+the+fold&amp;amp;aqs=chrome..69i57j0i512l4j46i512j46i175i199i512j0i512l3.2040j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;above the fold&lt;/a&gt;, and they do that by hiding submenu items underneath or behind their parent menu item.&lt;/p&gt;

&lt;p&gt;However, this exposes a lot of room for accessibility errors to come into play. It's easy enough to reveal a menu with a mouse hover, but what about for people who use assistive technologies and navigate with their keyboard?&lt;/p&gt;

&lt;p&gt;Does &lt;code&gt;.menu-item:hover&lt;/code&gt; apply to when a submenu item is keyboard focused? No, it doesn't. That leaves your assisted users possibly reading top-level non-clickable menu items that go nowhere and being given no context as to why they don't go anywhere.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/author/heydon-pickering/"&gt;Heydon Pickering&lt;/a&gt; has a fantastic &lt;a href="https://www.smashingmagazine.com/2017/11/building-accessible-menu-systems/"&gt;Smashing Mag article&lt;/a&gt; where he walks through, in detail, how to build an accessible compliant menu and submenu navigation system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#semantically-correct-html"&gt;
  &lt;/a&gt;
  Semantically correct HTML
&lt;/h2&gt;

&lt;p&gt;The last, and surprising thing, on this is semantically correct HTML. It's surprising that this one needs to be mentioned, because structurally sound HTML should be the default for anyone coming out of a bootcamp or grad school- but, somehow, it isn't.&lt;/p&gt;

&lt;p&gt;Getting your HTML right can have a huge effect on your assisted users experience. It's very common to wrap everything in a div, and before you know it, you have div soup.&lt;/p&gt;

&lt;p&gt;HTML has specific elements with some accessibility baked into them. So, why not use them?&lt;/p&gt;

&lt;p&gt;We all know about the header and footer, but how often do you forget to wrap your main content between the two in the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag? I know I have, more than I care to admit.&lt;/p&gt;

&lt;p&gt;There are other HTML patterns to remember too:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only have a &lt;em&gt;single&lt;/em&gt; &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag per page

&lt;ul&gt;
&lt;li&gt;There was a rumor/myth that perpetuated pretty far into the tech community that &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; tags reset the page reader and that you could have multiple H1s on a page. This isn't true. There was a proposal for such, but it was never implemented.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Keep your heading tags in order

&lt;ul&gt;
&lt;li&gt;You should only use your heading tags in an ascending order (by number). H1's should only be followed by H2's. H2's should only be followed by H3's. H3's should only be followed by H4's. Rinse and repeat. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Separate different generic content areas with &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; tags with proper headings. This lets your user know the content they're about to consume (while it may be related) is separate from what they just engaged with.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tags to separate content that could exist independently of the rest of the content, e.g., forum post, a blog entry, etc..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a lot more that goes into writing proper HTML. It would take an entire novel (and some do exist) on how to write each section the right way, but keep things like this in mind when you're building, and overtime, you'll probably notice the quality of your HTML increasing while the effort to do so decreases with each project!&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="http://www.springboardseo.com/resources/what-is/html-elements-list-complete.html"&gt;list&lt;/a&gt; of HTML elements you can use to check when and if you're using the right element.&lt;/p&gt;

&lt;p&gt;A simple page could look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Menu Item&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Page Title&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Section title&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This would be your content description area. 
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Side Navigation&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Menu Item&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Menu Item&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I'll be the first to admit that I build a lot of websites &lt;em&gt;incredibly incorrectly,&lt;/em&gt; from an HTML perspective. But the growth comes from knowing you can do better, and then striving to do so. If you're reading this article, then you're on that right path!&lt;/p&gt;

&lt;p&gt;As developers, it's our responsibility to make the knowledge and entertainment on the web available and accessible to everyone. I try to take that responsibility seriously. Do you?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>html</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Soft skills that will improve your work and life. With self-check</title>
      <author>Vadim Kolobanov</author>
      <pubDate>Mon, 15 Nov 2021 20:38:08 +0000</pubDate>
      <link>https://dev.to/abstract/soft-skills-that-will-improve-your-work-and-life-with-self-check-24h6</link>
      <guid>https://dev.to/abstract/soft-skills-that-will-improve-your-work-and-life-with-self-check-24h6</guid>
      <description>&lt;p&gt;Being a programmer in 2021 is not the same as ten years ago. The world is constantly changing, and many of the skills that were important back then have faded into the background over time. And what skills should a developer have in order to remain a sought-after specialist, for example, in five years? If you don't have them, maybe you should think about their development now?&lt;/p&gt;




&lt;p&gt;In this post, I want to talk about skills that will help you stay in demand as a developer even in conditions of constant change. Usually, IT specialists rely on the scientific and technical base, which is important for understanding the functioning of the system as a whole. This includes knowledge of the operating principles of the OS, the network stack, databases, and the mathematical apparatus that underlies any algorithm or protocol, etc. However, hard skills alone are not enough — communication skills, the ability to build a workflow with a team and/or strangers, flexibility in decision-making, and other soft skills are also needed. Moreover, it is important not just to have the — soft skills that should be integrated into the overall development process and go in close conjunction with professional skills. Seven of them will be discussed today.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-comprehensive-problem-solving"&gt;
  &lt;/a&gt;
  1. Comprehensive problem solving
&lt;/h1&gt;

&lt;p&gt;The demand for specialists who are able to approach the task from different sides is steadily growing. Most people cannot solve complex problems because they often use technologies aimed at the process, not the result. A developer using an integrated approach can not only identify the problem, but also determine its causes, and most importantly, "calculate" further steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bn7BRpYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fp8141tlxdtqi418ckc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bn7BRpYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fp8141tlxdtqi418ckc.png" alt="Comprehensive problem" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Colleagues complain about a recurring problem. If it arose in your team, where would you start solving it?&lt;/li&gt;
&lt;li&gt;Do you calculate the possible risks when choosing a certain solution?&lt;/li&gt;
&lt;li&gt;How to understand that you are really solving the problem, and not eliminating its "symptoms"?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-the-ability-to-convince"&gt;
  &lt;/a&gt;
  2. The ability to convince
&lt;/h1&gt;

&lt;p&gt;The ability to convince — that is, to present your idea, make arguments and tell a story so that listeners are passionate - is necessary not only for those who constantly communicate with clients. This skill will help to defend your point of view, inspire like-minded people. And in order for colleagues to listen to you not out of politeness, but attentively and intently, it is highly desirable to make your story not only convincing but also interesting.&lt;/p&gt;

&lt;p&gt;For example: when preparing a presentation about a release, you try not to load your colleagues with a dry list of facts with technical details, but build a story: add explanations, vivid examples, think about how you will manage the attention of listeners, and prepare arguments for answers to possible questions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wpMhzM3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epoaw7d4ri3lv2eqjkez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wpMhzM3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epoaw7d4ri3lv2eqjkez.png" alt="Convince" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have you noticed that you are interrupted at meetings? Was there a feeling that no one was listening to you?&lt;/li&gt;
&lt;li&gt;Do you try to give illustrative cases when defending your point of view?&lt;/li&gt;
&lt;li&gt;How will you start the story about yourself? Rehearse a small speech.&lt;/li&gt;
&lt;li&gt;Remember the case when, after a conversation with you, a colleague changed his mind. What exactly helped you convince him?&lt;/li&gt;
&lt;li&gt;How do you respond to objections?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#3-cooperation-and-teamwork-skills"&gt;
  &lt;/a&gt;
  3. Cooperation and teamwork skills
&lt;/h1&gt;

&lt;p&gt;I think many will agree that the community plays a significant role in the IT environment: experienced developers help colleagues and willingly share their experiences. Nevertheless, there is a stereotype that it is normal for a programmer to be closed, but it is difficult to interact with a closed person since he almost never offers ideas and is not inclined to discuss current processes. Therefore, more and more companies are paying attention to whether a specialist is able to work in a team, whether he understands colleagues as well as the project itself, whether he is able to give and receive feedback.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n992f1li--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz364liptut1mirt4rfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n992f1li--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz364liptut1mirt4rfn.png" alt="Team" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You need to talk to a colleague you didn't know before. Where will you start?&lt;/li&gt;
&lt;li&gt;One of the team members repeatedly passes the work with errors. What will you do?&lt;/li&gt;
&lt;li&gt;What words will you choose to make the criticism sound friendly?&lt;/li&gt;
&lt;li&gt;Do you celebrate the successes of your colleagues and talk about them publicly?&lt;/li&gt;
&lt;li&gt;What helps you feel the mood of the interlocutor and tune in to his wave?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#4-ability-to-plan-your-work"&gt;
  &lt;/a&gt;
  4. Ability to plan your work
&lt;/h1&gt;

&lt;p&gt;Employers value specialists who are able to plan, give accurate estimates of the complexity of tasks and adhere to deadlines regardless of the language, technologies, and methodologies used.&lt;/p&gt;

&lt;p&gt;Example: to organize the work of a group (if you are a leader) or your own, you plan sprints, make sure that there is a time interval between the task and the solution, which will allow you to organize things and prioritize. During the day, you stick to what you have planned and do not get distracted by other requests so that the work becomes more calm and predictable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ouTGVo2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5asuy6cdzumda2xj36e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouTGVo2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5asuy6cdzumda2xj36e.png" alt="Time Management" width="880" height="619"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You are asked to name the deadlines for the project's readiness. What will guide you in the assessment?&lt;/li&gt;
&lt;li&gt;It's the middle of the working day, and suddenly a colleague sends you a link. You know that there is a useful and important article there. What will you do?&lt;/li&gt;
&lt;li&gt;Do you make work and personal plans for the day/week/month? How many of them can be completed?&lt;/li&gt;
&lt;li&gt;Are you familiar with the Eisenhower matrix time planning method?&lt;/li&gt;
&lt;li&gt;Do you know how much time it takes you on average for each type of task?&lt;/li&gt;
&lt;li&gt;How many minutes/hours a day do you spend on social media? Do you track these statistics in any way? Do you use time trackers?&lt;/li&gt;
&lt;li&gt;Do you practice taking a break from social networks and the Internet, digital detox?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#5-critical-thinking"&gt;
  &lt;/a&gt;
  5. Critical thinking
&lt;/h1&gt;

&lt;p&gt;The ability to think critically is one of the key skills in our time. In a world where knowledge is power and the flow of information increases exponentially, you need to be able to ask questions, compare data and be critical of what others write. If we talk about professional development, critical thinking allows you to determine which set of skills you need. Someone needs clean code, knowledge of the version control system, and system thinking to work, and someone who is engaged in high-tech projects needs deep immersion in special sections of mathematics or physics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GbqbzQvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jan3jd8cdxc5ve6q5lbu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbqbzQvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jan3jd8cdxc5ve6q5lbu.png" alt="Thinking" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you think when reading materials on the Internet about who publishes them and for what purpose?&lt;/li&gt;
&lt;li&gt;How do you determine which information can be trusted? What criteria do you rely on when choosing information sources?&lt;/li&gt;
&lt;li&gt;Do you check website addresses and connection security when clicking on unfamiliar links?&lt;/li&gt;
&lt;li&gt;Do you have a list of trusted sources of information?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#6-continuous-learning-long-life-learning"&gt;
  &lt;/a&gt;
  6. Continuous learning — long life learning
&lt;/h1&gt;

&lt;p&gt;Many leading companies seek to hire full-stack developers who work freely with different technologies and platforms. Such specialists understand the principles of any development, starting from the network core level and ending with the interface level. This is impossible to achieve if you do not make it a rule to constantly learn new things. A sought-after developer is determined not only by the possession of a rare stack but also by the ability to easily "switch" between different languages and the desire to learn new tools every day.For example: although Java and C# have occupied a significant part of the market for several years, IT companies are increasingly using newer technologies (Kotlin, Swift, etc.). And, logically, developers who are proficient in several languages will give odds to those who are familiar with one or two technologies. In five years, new stacks will surely appear, so to remain in demand, it is important to constantly learn and be able to choose the right tool for solving a specific task, based on a comprehensive analysis of factors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yRUDUpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tu5uxls1jh6vf5vi13mb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yRUDUpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tu5uxls1jh6vf5vi13mb.png" alt="Learning" width="880" height="529"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you participate in the development of open-source projects? How many commits have you made over the past year? How many bugs and suggestions have you created in the tracker? How many questions were answered?&lt;/li&gt;
&lt;li&gt;How long have you been studying an unfamiliar technology for yourself?&lt;/li&gt;
&lt;li&gt;What would you do if you found out about the emergence of a new language that is gaining popularity?&lt;/li&gt;
&lt;li&gt;How do you react if you are offered to go to a training event?&lt;/li&gt;
&lt;li&gt;What professional conferences do you attend?&lt;/li&gt;
&lt;li&gt;What have you learned in your professional field over the past six months?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#7-compliance-with-worklife-balance"&gt;
  &lt;/a&gt;
  7. Compliance with work-life balance
&lt;/h1&gt;

&lt;p&gt;Compliance with work-life balance and your well-being directly affect productivity: those who take care of themselves usually live longer, work more efficiently and have time to pay due attention to other important matters. The topic of health is closely connected with all spheres of life, including work. I won't say anything about biohacking and implanting chips under the skin (this is the topic of a separate post — or even more than one), this item is more about attention to the body, to the psycho-emotional state, and also that the separation of personal and professional life helps them mutually support each other. Try to be more tolerant of others, especially if their point of view contradicts yours, express feelings without harming others, and be aware of what you can influence and what you can't. Find a hobby to your liking and remember that your career success will partly depend on how your life is organized after work and study.&lt;/p&gt;

&lt;p&gt;For example: in order to feel cheerful and have more time, you go to bed on time, do not use the phone two hours before bedtime and do not grab it first thing in the morning, do not overeat. Thanks to this, you stay attentive and energetic longer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4IDAaTfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc0jekhb0eaxa43bxoei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4IDAaTfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc0jekhb0eaxa43bxoei.png" alt="Work-life" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Self-test:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When was the last time you underwent a comprehensive examination?&lt;/li&gt;
&lt;li&gt;What do you do to ensure that your diet is balanced?&lt;/li&gt;
&lt;li&gt;How many hours a day do you sleep? Do you get enough sleep? If not, what can you do now to improve the quality of your sleep?
In the morning you feel cold, but you need to go to work. What will you do?&lt;/li&gt;
&lt;li&gt;Do you work on vacation? Do you finish projects on weekends? Do you write to work chats in the evenings?&lt;/li&gt;
&lt;li&gt;What are your hobbies? Have you been interested in something new for yourself for a long time?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This skill set does not appear with birth and is not strictly mandatory. But the development of these skills will not only give you success in work or in a team but will also make your life much better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#put-on-heart-if-you-liked-it-and-you-learned-something-new"&gt;
  &lt;/a&gt;
  Put on Heart if you liked it and you learned something new!
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#you-can-also-follow-me-to-receive-notifications-about-new-interesting-articles"&gt;
  &lt;/a&gt;
  You can also follow &lt;a href="https://dev.to/vadimkolobanov"&gt;ME&lt;/a&gt; to receive notifications about new interesting articles.
&lt;/h3&gt;




&lt;h4&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Python?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Look into the following series:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/vadimkolobanov/series/15329"&gt;Learning Python&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/vadimkolobanov/series/15349"&gt;Step by Step to Junior&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/vadimkolobanov/series/15331"&gt;Ideas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can we cooperate with you?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have interesting projects and you need a python (web)developer, then you can contact me by &lt;strong&gt;&lt;a href="//titanyforgame@gmail.com"&gt;mail&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href="https://discord.gg/szEuVAhatW"&gt;discord&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://www.linkedin.com/in/vadzim-hlobuz-0b44531b7/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt; for cooperation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/neo.skarynsky"&gt;Write me on Face....oh...Meta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/decodesperato"&gt;My Twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>motivation</category>
      <category>leadership</category>
    </item>
    <item>
      <title>Deep Flatten an Array</title>
      <author>Mukul Singhal</author>
      <pubDate>Mon, 15 Nov 2021 20:13:21 +0000</pubDate>
      <link>https://dev.to/mukul_singhal/deep-flatten-an-array-5elf</link>
      <guid>https://dev.to/mukul_singhal/deep-flatten-an-array-5elf</guid>
      <description>&lt;p&gt;Hello all👋,&lt;/p&gt;

&lt;p&gt;In this series we will see a lot of question that are asked in javascript interviews so get ready for it&lt;/p&gt;

&lt;p&gt;In this article we will see How to flatten an deeply nested array for example&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[1,[2,3,[4,5]]] and convert in into [1,2,3,4,5]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will learn to flatten an array in 2 ways&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Using built in function (&lt;code&gt;flat()&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using recursion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1. Using &lt;code&gt;Flat()&lt;/code&gt; method in Javascript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;flat()&lt;/code&gt; method is an inbuilt array method that flattens a given array into a newly created one-dimensional array. It concatenates all the elements of the given multidimensional array, and flats upto the specified depth.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var newArr = arr.flat(depth)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By default, the depth limit is 1. It can be 1 to &lt;code&gt;Infinity&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]]];&lt;/span&gt;

  &lt;span class="c1"&gt;// Setting the depth value to&lt;/span&gt;
  &lt;span class="c1"&gt;// Infinity to deep flatten the array&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flattened&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flattened&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Output [1,2,3,4,5]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Recursively flat an array (Pollyfill)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we will see how do it without using any builtin function or basically writing the pollyfill for flat function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Flatten an array using recursion&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]]]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// Output [1,2,3,4,5]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me explain the code&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Iterate through each and every value of an array and check whether it is value or an array using &lt;code&gt;Array.isArray()&lt;/code&gt;
method.&lt;/li&gt;
&lt;li&gt;If it is a value return it and concat it.&lt;/li&gt;
&lt;li&gt;If it is an array then follow again from step 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Using ES6 features (using &lt;code&gt;reduce()&lt;/code&gt;)&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]]];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flattened&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flattened&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Output [1,2,3,4,5]&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For better understanding of the code Please refer to the gif below.&lt;br&gt;
You can also check this &lt;a href="https://github.com/Mukul-Singhal/Javascript-interview-questions/blob/master/arrays/deeplyFlattenArray.js"&gt;Github repo&lt;/a&gt; for the code&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwHUrcYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/6XdWH3v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwHUrcYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/6XdWH3v.gif" alt="Recursion" width="800" height="581"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voila😃&lt;br&gt;
Let me know your thoughts about it 😃 and if you like it share it with others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uo6SOpic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk3yciobisco1ulfi03s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uo6SOpic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk3yciobisco1ulfi03s.gif" alt="Image description" width="498" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>In-depth Interpretation of Amara Three Core Products</title>
      <author>Vadim Voronovskiy</author>
      <pubDate>Mon, 15 Nov 2021 20:11:16 +0000</pubDate>
      <link>https://dev.to/ovoronovskiy/in-depth-interpretation-of-amara-three-core-products-4ckp</link>
      <guid>https://dev.to/ovoronovskiy/in-depth-interpretation-of-amara-three-core-products-4ckp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_xrp182g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewp0s12d473rg7xhclrk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_xrp182g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewp0s12d473rg7xhclrk.png" alt="Image description" width="875" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where is Amara on the steep mountain of three core products development?&lt;br&gt;
Amara Finance has conquered numerous adversities and developed three core products with distinctive characteristics since its birth. With other products afoot, AmaraLend, AmaraLink and AmaraPay are recognized as three pillars of Amara Finance. This article, written by senior…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://amara-finance.medium.com/in-depth-interpretation-of-amaralend-three-core-products-ca955b89016f"&gt;Read more...&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>javascript - New array method at()</title>
      <author>Jose</author>
      <pubDate>Mon, 15 Nov 2021 20:06:20 +0000</pubDate>
      <link>https://dev.to/josec/javascript-new-array-method-at-3aip</link>
      <guid>https://dev.to/josec/javascript-new-array-method-at-3aip</guid>
      <description>&lt;p&gt;The new array method &lt;code&gt;at()&lt;/code&gt; allows us to get access to array indexes using both positive as negative indexes.&lt;/p&gt;

&lt;p&gt;This way we don't need to do maths anytime we want to access to the last array element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`Terminator 2`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Rambo`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Harry Potter`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Star Wars`&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldWay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The last movie is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;oldWay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Star Wars&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newWay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The last movie is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;newWay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Star Wars&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's not just for the last element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`First movie &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Terminator 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we pass an index that not exists it will return &lt;code&gt;Undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this time the array method &lt;code&gt;at()&lt;/code&gt; it's not compatible with all the browsers yet so for use it on production you will need a polyfill.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i0UzrqEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykrzvsbeal4n7ljhavvr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0UzrqEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykrzvsbeal4n7ljhavvr.png" alt="Image description" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find more information at &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at"&gt;Mozilla MDN&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Automation and Multi-processing w/ Python</title>
      <author>Adrian Brown</author>
      <pubDate>Mon, 15 Nov 2021 20:05:01 +0000</pubDate>
      <link>https://dev.to/cloudguruab/automation-and-multi-processing-w-python-4d1k</link>
      <guid>https://dev.to/cloudguruab/automation-and-multi-processing-w-python-4d1k</guid>
      <description>&lt;h4&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h4&gt;

&lt;p&gt;When it comes to finding ways to run a task python offers us tools that allow us to automate those task, whether it be read/writes or api calls there's lots of usecases where this might be necessary.&lt;/p&gt;

&lt;p&gt;Lets start with understanding the what. So, what's a subprocess in python? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A subprocess in Python is a task that a python script delegates to the Operative system (OS) - Daniel Diaz, GeekFlare&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In short, a subprocess allows us to achieve the unachievable by giving us a new level of cohesiveness with the operating system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#by-the-end-of-this-tutorial-you-will"&gt;
  &lt;/a&gt;
  By the end of this tutorial, you will
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Understand the concept of subprocess&lt;/li&gt;
&lt;li&gt;Have learned the basics of the Python multi-process/time library&lt;/li&gt;
&lt;li&gt;Found meaningful examples/usecases where you can implement the subprocess/multiprocessing library&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#core-concepts"&gt;
  &lt;/a&gt;
  Core Concepts
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;In this tutorial I am assuming you have some basic foundations in python programming, and data structures&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The nice part about the subprocess module is it falls under the core utilities offered to us as python developers. This means there is no need to install this module as a dependency using PIP or Pipenv, it's there for us already!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#calling the subprocess module into our environment
import subprocess
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quick use cases,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Program checker&lt;/li&gt;
&lt;li&gt;Setting up a virtual environments &lt;/li&gt;
&lt;li&gt;Run other programming languages&lt;/li&gt;
&lt;li&gt;Open external programs &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#our-application"&gt;
  &lt;/a&gt;
  Our Application
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#in-this-tutorial-we-will-be-looking-at-using-the-processstart-module-to-run-background-computations-for-excel-data"&gt;
  &lt;/a&gt;
  &lt;em&gt;In this tutorial we will be looking at using the Process.start() module to run background computations for excel data.&lt;/em&gt;
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#tutorial"&gt;
  &lt;/a&gt;
  Tutorial
&lt;/h3&gt;

&lt;p&gt;So after learning at a high level what the subprocess package does, and what it looks like at the import level you're ready to move towards this part of the tutorial. &lt;/p&gt;

&lt;p&gt;I wanted to give two quick distinctions we will be using the &lt;code&gt;Process.start()&lt;/code&gt; api from the &lt;code&gt;multiprocessing&lt;/code&gt; library offered by Python. &lt;/p&gt;

&lt;p&gt;So, why cover Subprocess's?&lt;/p&gt;

&lt;p&gt;I like to explain things backwards. For me this helps by understanding the full context of my environment in which I am learning from when what I am learning from is more reading intensive rather than visually intensive. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#recap-we-know-what-subprocesss-are-now-think-of-multiprocessing-as-the-stepchildreally-parent-to-what-a-subprocess-will-allow-you-to-do-instead-of-running-that-process-in-the-background-we-can-now-bring-it-foreground-by-running-multiple-processs-single-handedly"&gt;
  &lt;/a&gt;
  Recap: We know what subprocess's are now think of multiprocessing as the stepchild/(really parent) to what a subprocess will allow you to do. Instead of running that process in the background we can now bring it "foreground" by running multiple process's single handedly.
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Here we are going to take our data set and using some basic arithmetic sort and sum all the entries in our list of data. Once&lt;br&gt;
this is complete we will set a task for this to occur every 60 seconds to simulate a batched process using code. To draw more from real world scenarios this data set could be healthcare/financial data for a company, and your jobs has been to extract, transform this data into a list. So, after doing so the company will need a summary for all the data in this list to make biweekly decisions. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#our-data-set"&gt;
  &lt;/a&gt;
  Our data set
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#lets assume this data is updated every half minute
data = [3, 4, 7, 10, 2, 32, 15, 8]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from multiprocessing import Process
from file_location import data

def process_manager(data):
    while True:
        results = sum(data)
        time.sleep(60)
        return results

if __name__ == '__main__':
    p = Process(target=process_manager(), args=(data))
    p.start()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To explain, we import our &lt;code&gt;multiprocessing&lt;/code&gt; and near real time data object into our code environment. We define a function to govern our process that we want to run every minute. &lt;/p&gt;

&lt;p&gt;Here you can see how Process takes two arguments, the target function and arguments. These will work together to fork this process in our developer environment and run in sync with our application. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#note-python-has-been-known-to-lackstruggle-with-multiprocessing-and-concurrency-compared-to-other-toolspackages-offered-by-other-languages-like-rust-so-be-sure-to-check-the-trade-offs-when-making-timecost-decisions-feel-free-to-copypaste-and-try-this-in-your-own-ide-if-you-run-into-issues-spend-some-time-debugging-and-getting-your-code-to-run-this-should-be-a-safe-exercise-to-practice-your-debugging-skills-with-as-you-will-gain-experienceunderstanding-of-more-python"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NOTE: Python has been known to lack/struggle with multiprocessing and concurrency compared to other tools/packages offered by other languages like rust, so be sure to check the trade offs when making time-cost decisions. Feel free to copy/paste and try this in your own IDE, if you run into issues spend some time debugging and getting your code to run. This should be a safe exercise to practice your debugging skills with as you will gain experience/understanding of more PYTHON!&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://docs.python.org/3/library/multiprocessing.html"&gt;Link to multiprocess&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>Understanding TypeScript &amp; Using it in Your Node Environment.</title>
      <author>Giwa Jossy</author>
      <pubDate>Mon, 15 Nov 2021 19:59:29 +0000</pubDate>
      <link>https://dev.to/giwajossy/understanding-typescript-using-it-in-your-node-environment-3355</link>
      <guid>https://dev.to/giwajossy/understanding-typescript-using-it-in-your-node-environment-3355</guid>
      <description>&lt;p&gt;I struggled with this concept a lot, but let me save you the stress, and explain as simply as I can.&lt;/p&gt;

&lt;p&gt;Typescript is just a secure way of writing JavaScript code. Do not get confused by the fancy terminologies people throw around it.&lt;/p&gt;

&lt;p&gt;The good news is, if you know JavaScript, you already know ~90% of Typescript. The additional layer only forces you to be a lot more intentional about your variables and data types.&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-typescript"&gt;
  &lt;/a&gt;
  Why Typescript?
&lt;/h3&gt;

&lt;p&gt;Simple answer? To catch errors early in your editor. &lt;br&gt;
Typescript detects silly bugs at runtime; bugs you probably wouldn’t notice until it’s too late when using pure JavaScript.&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#heres-sample-javascript-code"&gt;
  &lt;/a&gt;
  Here's sample JavaScript code:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;company&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GYRO Design Lab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isPublished&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mandem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dexter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mide&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Emmy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But the unfortunate thing here is that, at some point later in your code, the variable &lt;code&gt;company&lt;/code&gt; - for instance, could be re-assigned to a value of an entirely different data type, which would be unexpected behavior. &lt;br&gt;
Sadly, JavaScript will not throw an error, and this poses a compounding threat to your App. &lt;br&gt;
Thankfully, popular code editors like &lt;em&gt;&lt;strong&gt;VScode&lt;/strong&gt;&lt;/em&gt; now use Typescript under the hood, to spot errors like these.&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sample-typescript-code"&gt;
  &lt;/a&gt;
  Sample Typescript code
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;company&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GYRO Design Lab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isPublished&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;// Here, the variable "x" can later be re-assigned a value of different datatype&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 

&lt;span class="c1"&gt;// This is an array of numbers. This - "Number[]", tells the system that the variable "ids" is expected to be an array of numbers. So if you try to push a string in the array, you will get an error.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see, with Typescript, you have to explicitly define your Types.&lt;/p&gt;

&lt;p&gt;...&lt;br&gt;
When creating an &lt;em&gt;&lt;strong&gt;object&lt;/strong&gt;&lt;/em&gt;, for instance, you get to create an &lt;em&gt;&lt;strong&gt;interface&lt;/strong&gt;&lt;/em&gt; that defines the shape of your &lt;em&gt;&lt;strong&gt;object&lt;/strong&gt;&lt;/em&gt;;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// interface declaration&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Javascript object which conforms to the shape of the interface. &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Janet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Typescript will warn you if it doesn't match.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-exactly-happens-under-the-hood"&gt;
  &lt;/a&gt;
  So what exactly happens under the hood?
&lt;/h3&gt;

&lt;p&gt;Typescript code transpiles to JavaScript, which runs anywhere JavaScript runs: In a browser, on NodeJS, and in your apps.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Transpiling is a specific term for taking source code written in one language and transforming into another language that has a similar level of abstraction”&lt;/em&gt; - &lt;em&gt;&lt;strong&gt;stackoverflow.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;...&lt;br&gt;
When setting up your Typescript+NodeJS project, your entire project files are usually in a folder, including your Typescript [&lt;em&gt;&lt;strong&gt;.ts&lt;/strong&gt;&lt;/em&gt;] files. &lt;/p&gt;

&lt;p&gt;However, your browser will not run &lt;em&gt;&lt;strong&gt;.ts&lt;/strong&gt;&lt;/em&gt; files, this is why the Typescript engine automatically generates a new project folder containing the transpiled version of our entire project, which we can now run and test.&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-lets-create-a-simple-nodejs-app-and-configure-typescript"&gt;
  &lt;/a&gt;
  Now let's create a simple NodeJS App, and configure Typescript.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Initialize your project&lt;br&gt;
&lt;code&gt;npm init -y&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install Typescript as dev dependency.&lt;br&gt;
&lt;code&gt;npm install -D typescript&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate a configuration file - &lt;em&gt;&lt;strong&gt;tsconfig.json&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;code&gt;npx tsc --init&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now open the &lt;em&gt;&lt;strong&gt;tsconfig.json&lt;/strong&gt;&lt;/em&gt; file, you will see a bunch of commented-out codes; no worries, look for the properties below, and make these changes to them.&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt;: Some of the properties below are commented-out by default in the &lt;em&gt;&lt;strong&gt;tsconfig.json&lt;/strong&gt;&lt;/em&gt; file, you will have to uncomment them.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Target": "es6&lt;/code&gt;&lt;br&gt;
&lt;code&gt;rootDir": "./src&lt;/code&gt; "src" will be the name of your project folder &lt;br&gt;
&lt;code&gt;outDir": "./build&lt;/code&gt; "build" is the auto-generated folder that will holds your transpiled files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In your package.json file, add the following tags into your &lt;code&gt;"scripts"&lt;/code&gt; key like so;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tsc"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run build &amp;amp;&amp;amp; node build/index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;"build" : "tsc"&lt;/code&gt; is responsible for transpiling the Typescript codes to JavaScript, and &lt;code&gt;"dev": "npm run build &amp;amp;&amp;amp; node build/index.js"&lt;/code&gt; runs the program when you type &lt;code&gt;"npm run dev"&lt;/code&gt; in you console.&lt;/p&gt;

&lt;p&gt;...&lt;br&gt;
We have successfully integrated Typescript to our app. Now let's see it in action. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;At the moment, your root directory should contain &lt;em&gt;/node_modules&lt;/em&gt;, &lt;em&gt;package.json.lock&lt;/em&gt;, &lt;em&gt;package.json&lt;/em&gt;, and a &lt;em&gt;tsconfig.json&lt;/em&gt; file. Create a new folder - &lt;em&gt;src&lt;/em&gt;. Your first Typescript file goes in here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;create an &lt;em&gt;index.ts&lt;/em&gt; file inside the &lt;em&gt;src&lt;/em&gt; folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Paste the entire typescript snippet shown at the beginning of this article, into your &lt;em&gt;index.ts&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally run &lt;code&gt;npm run dev&lt;/code&gt; in your terminal. You will notice a newly generated folder &lt;em&gt;/build&lt;/em&gt;, which contains a transpile version of your Typescript code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you find this helpful.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>node</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Code Along with Fetch API</title>
      <author>Matthew Kohn</author>
      <pubDate>Mon, 15 Nov 2021 19:53:42 +0000</pubDate>
      <link>https://dev.to/kragon741/code-along-with-fetch-api-1h18</link>
      <guid>https://dev.to/kragon741/code-along-with-fetch-api-1h18</guid>
      <description>&lt;p&gt;The JavaScript built-in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Fetch API&lt;/a&gt; is awesome. It's a powerful, simple way to send requests and receive responses from a server or your local network. I like it because it's versatile and easy to use.&lt;/p&gt;

&lt;p&gt;Let's see &lt;strong&gt;how&lt;/strong&gt; it works by building a simple website. Today, we'll be using the &lt;a href="'https://dog.ceo/dog-api/'"&gt;Dog.ceo API&lt;/a&gt; to load random images of dogs in the &lt;a href="'https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction'"&gt;DOM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please Note&lt;/em&gt;: This tutorial is meant to introduce fellow Newbies looking to explore how the Fetch API works. There is a lot more to Fetch than what you'll read about here, and these examples are by no means exhaustive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-api"&gt;
  &lt;/a&gt;
  What is an API?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/js/js_api_intro.asp"&gt;API&lt;/a&gt; stands for &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface. There are many different types of APIs that do many useful things for us. Here are a few examples of what they can do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="'https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API"&gt;Browser APIs&lt;/a&gt; extend the functionality of your Browser (Chrome, Safari, Brave, etc) to help with visual &amp;amp; local interpretation of code (Client-Side).&lt;/li&gt;
&lt;li&gt;Server APIs extend the functionality of Web Servers, and can manage data for Client-Side requests around the world. &lt;/li&gt;
&lt;li&gt;Web APIs built into your Browser help with sending, receiving, and interpreting data from the Web (Server-Side), such as Third-Party APIs.&lt;/li&gt;
&lt;li&gt;Third-Party APIs allow you to download their code over the Web, once you know where &amp;amp; how to get it. Once you find one you like, &lt;a href="'https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs'"&gt;&lt;em&gt;read their Docs to learn more&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;APIs are particularly useful because they work &lt;a href="'https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing'"&gt;Asynchronously&lt;/a&gt;, meaning they don't run at the same time as other code so they don't hold anything important up, causing annoying delays in page loads or updates.&lt;/p&gt;

&lt;p&gt;The fetch() API is one flexible tool that will make your life as a Developer much easier. Fetch allows us to make general definitions for network request &amp;amp; response objects that you can manipulate how you see fit. You could use Fetch for a simple GET request to fetch information (like we are here), or you can include header and body information to make POST, PATCH, or DELETE requests to or from a database.&lt;/p&gt;

&lt;p&gt;At the end of the article I've included loads of links for further exploration down the rabbit hole of understanding how to use Fetch, Web APIs, and Asynchronous JavaScript.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tj_n4JeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hfudbmn8yf63tptjm3y.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tj_n4JeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hfudbmn8yf63tptjm3y.jpeg" alt="Dog catching ball at https://images.unsplash.com/photo-1620325698009-4163b8f6d501?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1170&amp;amp;q=80" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#starter-code"&gt;
  &lt;/a&gt;
  Starter Code
&lt;/h2&gt;

&lt;p&gt;If you'd like to follow along, create an "index.html", a "style.css", and an "index.js" file in the text editor of your choice on the same folder-level. We'll be working in our "index.js" file for this example. &lt;br&gt;
Copy and paste this very generic starter HTML &amp;amp; CSS into their respective files. Or, create your own &amp;amp; have fun with it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- ___index.html___ --&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;link rel="stylesheet" href="./style.css"&amp;gt;
    &amp;lt;title&amp;gt;Dog Pictures&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Dogs!&amp;lt;/h1&amp;gt;
    &amp;lt;script src="./index.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* ____style.css___ */

body {
  background-color: rebeccapurple; 
  padding-left: 30px; 
}
h1 {
  color: #fff;
}
img {
  max-width: 400px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the bare-bones minimum of what you should start with. When we're done, play around with it and make it your own! What matters most is you start with at least a boilerplate HTML structure, and linking your "index.js" file in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the bottom of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you open the HTML file in your Browser, it should look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKESLJo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxq0nnobw9mcjg3jz86l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKESLJo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxq0nnobw9mcjg3jz86l.png" alt="Starter Browser" width="542" height="363"&gt;&lt;/a&gt;&lt;br&gt;
We're going to be using your Browser's Developer Tools to view the data we're receiving from the Web Server. To open your Dev Tools, right-click your Browser and select &lt;em&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/em&gt; to reveal the Dev Tools panel.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gk9oZOUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bszkmewft9ehkpj2gp35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gk9oZOUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bszkmewft9ehkpj2gp35.png" alt='Selecting "Inspect" to display Dev Tools' width="546" height="106"&gt;&lt;/a&gt;&lt;br&gt;
Select the &lt;em&gt;"Console"&lt;/em&gt; tab to view your Console. You can leave this open for now.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mjdbz_sE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fu1s3sp643gb11blim0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mjdbz_sE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fu1s3sp643gb11blim0s.png" alt="Dev Tools Console tab" width="697" height="226"&gt;&lt;/a&gt;&lt;br&gt;
Now it's time to write some JavaScript! Go to the blank "index.js" file in your Text Editor, and let's build our generic Fetch function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* ___index.js___ */

fetch(apiURL)                                 // Step 1
  .then(response =&amp;gt; response.json())          // Step 2
  .then(data =&amp;gt; console.log(data))            // Step 3
  .catch(error =&amp;gt; console.log(error));        // Step 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-this-function-doing"&gt;
  &lt;/a&gt;
  What is this function doing?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-fetch-request-from-an-apis-url"&gt;
  &lt;/a&gt;
  STEP 1: FETCH REQUEST FROM AN API's URL
&lt;/h3&gt;

&lt;p&gt;"&lt;code&gt;fetch(apiURL)&lt;/code&gt;"&lt;br&gt;
The Fetch function is a built-in JavaScript function that makes an asynchronous &lt;a href="'https://javascript.info/promise-basics'"&gt;Promise&lt;/a&gt; to contact the apiURL we assign to the parameter. This Promise is just an assurance that Fetch will let us know once (or if) a response is received.&lt;/p&gt;

&lt;p&gt;Note that there is an option for a second parameter here that would contain metadata, such as the method, header, and body of the request. For a simple GET request like the one we're making, we can omit this and allow for Fetch's default parameters. Check out &lt;a href="'https://developer.mozilla.org/en-US/docs/Web/API/fetch'"&gt;MDN Web Docs information on Fetch syntax&lt;/a&gt; to learn more about making &lt;a href="'https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST'"&gt;POST&lt;/a&gt;, &lt;a href="'https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH'"&gt;PATCH&lt;/a&gt;, or &lt;a href="'https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE'"&gt;DELETE&lt;/a&gt; requests.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2-handle-the-response"&gt;
  &lt;/a&gt;
  STEP 2: HANDLE THE RESPONSE
&lt;/h3&gt;

&lt;p&gt;"&lt;code&gt;.then(response =&amp;gt; response.json())&lt;/code&gt;"&lt;br&gt;
Once the Fetch's Promise has been kept, meaning the server has received the request, we chain a &lt;code&gt;.then()&lt;/code&gt; method to the Fetch Request to make another Promise. Any time a &lt;code&gt;.then()&lt;/code&gt; method is chained to a Promise, it won't start running until the previous Promise has completed.&lt;/p&gt;

&lt;p&gt;Inside this &lt;code&gt;.then()&lt;/code&gt;, we're going to make another Promise to take the response we're receiving, and tell the Fetch function to turn it into a JSON format that we can use.&lt;/p&gt;

&lt;p&gt;&lt;a href="'https://www.json.org/json-en.html'"&gt;JSON&lt;/a&gt; stands for "JavaScript Object Notation", and is a format commonly used to store data that can be accessed by any code language, not just JavaScript. JSON stores data in a long string, formatted with {}'s storing &lt;code&gt;key:value&lt;/code&gt; pairs inside []'s much like Objects and Arrays, but note that while JSON is similar to JavaScript, it is not JavaScript; it's just a long string. Once we receive our code in JSON format, we can get to the data we need and do things with it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-3-handle-the-data"&gt;
  &lt;/a&gt;
  STEP 3: HANDLE THE DATA
&lt;/h3&gt;

&lt;p&gt;"&lt;code&gt;.then(data =&amp;gt; console.log(data))&lt;/code&gt;"&lt;br&gt;
Once Step 2's Response Promise has completed, we can now take the information the server sent to us, in JSON format, and do something with it by chaining another &lt;code&gt;.then()&lt;/code&gt; to &lt;code&gt;fetch()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The variable &lt;code&gt;data&lt;/code&gt; we're using here is actually the JSON object we got back from the server. You can name it anything you'd like and do what you want with it. For now, we will &lt;code&gt;console.log()&lt;/code&gt; the data we receive so we can look at this JSON object in our console. Once successful, we will be able to do whatever we want with that data, like pass it into a function.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-4-handle-the-error-if-any"&gt;
  &lt;/a&gt;
  STEP 4: HANDLE THE ERROR (if any)
&lt;/h3&gt;

&lt;p&gt;"&lt;code&gt;.catch(error =&amp;gt; console.log(error));&lt;/code&gt;"&lt;br&gt;
This is the end of the fetch() function. It's good practice to chain a &lt;code&gt;.catch()&lt;/code&gt; method to the Fetch function, in case there is a problem in any of the previous steps. This works like a &lt;code&gt;.then()&lt;/code&gt; method, but whenever a Promise rejects (fails), whatever happens inside the &lt;code&gt;.catch()&lt;/code&gt; will happen instead.&lt;/p&gt;

&lt;p&gt;Note that the Fetch Promise only rejects when a network error happens, not on HTTP errors. &lt;/p&gt;

&lt;p&gt;This would be a good place to send an error message to the console so the developer knows about it, or to display a message in the DOM so the User knows to try again later.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YeBMPzt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtktq2soc53e0bhwzwne.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeBMPzt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtktq2soc53e0bhwzwne.jpeg" alt="Cute dog and ball" width="870" height="580"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#our-requestresponse-cycle"&gt;
  &lt;/a&gt;
  Our Request/Response Cycle
&lt;/h2&gt;

&lt;p&gt;Now that we have some background on how a Fetch Request works, let's make our Fetch function work!&lt;/p&gt;

&lt;p&gt;At the very top of your "index.js" file, above the fetch function, let's define the &lt;code&gt;apiURL&lt;/code&gt;. Add this line to your code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const apiURL = 'https://dog.ceo/api/breeds/image/random';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, refresh your Browser. The Response Object from the Fetch Request has been received, and if successful, our &lt;code&gt;fetch()&lt;/code&gt; function will now log that Object to your console. If the URL endpoint has a typo, the fetch() request will reject/fail, so make sure it's accurate.&lt;/p&gt;

&lt;p&gt;If you have a message in your Console that looks something like this, you're doing great:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r83zlwZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oew7w4nk67azrf8afr7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r83zlwZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oew7w4nk67azrf8afr7g.png" alt="JSON response object" width="680" height="266"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice the value of "message" in this Response Object is a URL to a .jpg image. To narrow down to the specific information we want, let's change what we're logging to the Console in Step 3 from:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.then(data =&amp;gt; console.log(data))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.then(data =&amp;gt; console.log(data.message))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you've done this, refresh your Browser and check out the Console again.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---xsm6nax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj69covb5nsj7z27tjh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---xsm6nax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj69covb5nsj7z27tjh9.png" alt="A URL to an image" width="437" height="42"&gt;&lt;/a&gt;&lt;br&gt;
You should see just the random URL string we received in the Response Object from the Fetch Request in your Console, which is the value of &lt;code&gt;data.message&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we've singled out the data we want, we're ready to show that image in our DOM!&lt;/p&gt;

&lt;p&gt;First, let's make a function that takes a URL as a parameter, and uses that URL parameter to create an image we can display in our DOM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function showImage(url) {
  const image = document.createElement('img');
  image.src = url;
  image.alt = 'Cute doggo';
  document.body.appendChild(image);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, but now how do we use that function with our Fetch Request?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pass-raw-datamessage-endraw-to-showimage"&gt;
  &lt;/a&gt;
  Pass &lt;code&gt;data.message&lt;/code&gt; to showImage()
&lt;/h3&gt;

&lt;p&gt;Go back to the &lt;code&gt;.then()&lt;/code&gt; line in STEP 3, and change:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.then(data =&amp;gt; console.log(data.message))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.then(data =&amp;gt; showImage(data.message))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, when you refresh your Browser, instead of logging data to your Console, you should see a picture of a cute dog in the DOM.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iJztwe_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xd60q2oa1jyw7exe2zf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJztwe_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xd60q2oa1jyw7exe2zf.png" alt="DOM with an image of a dog" width="768" height="639"&gt;&lt;/a&gt;&lt;br&gt;
If a new random image of a dog appears in your DOM every time you reload the page, congratulations. You did it!&lt;/p&gt;

&lt;p&gt;Here's the final JavaScript for you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* ___index.js___ */

const apiURL = 'https://dog.ceo/api/breeds/image/random';

fetch(apiURL)
  .then(response =&amp;gt; response.json())
  .then(data =&amp;gt; showImage(data.message))
  .catch(error =&amp;gt; console.log(error));

function showImage(url) {
  const image = document.createElement('img');
  image.src = url;
  image.alt = 'Cute doggo';
  document.body.appendChild(image);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here you could style the rest of your page, and continue to build this into any website of your imagining.&lt;/p&gt;

&lt;p&gt;Now that you know how to use Fetch API, you can use it to communicate with servers, create your own databases, or make a cool web app of your own design. &lt;/p&gt;

&lt;p&gt;Try exploring one of the many &lt;a href="'https://github.com/public-apis/public-apis'"&gt;free public Web APIs&lt;/a&gt; on your own to see what you can create by fetching what they have to offer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continue-learning"&gt;
  &lt;/a&gt;
  Continue Learning
&lt;/h2&gt;

&lt;p&gt;I also highly recommend looking further into why Fetch works on your own. Here are some of the sources I've learned from that helped me in my journey.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-event-loop"&gt;
  &lt;/a&gt;
  The Event Loop:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="'https://www.youtube.com/watch?v=8aGhZQkoFbQ&amp;amp;t=476s'"&gt;"What the heck is the event loop anyway?" | Philip Roberts | JSConf EU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop'"&gt;MDN Web Docs: "Concurrency Model and the Event Loop"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#vital-acronyms"&gt;
  &lt;/a&gt;
  Vital Acronyms:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="'https://en.wikipedia.org/wiki/Representational_state_transfer'"&gt;Wikipedia: "Representational State Transfer (REST)"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'https://en.wikipedia.org/wiki/Create,_read,_update_and_delete'"&gt;Wikipedia: "Create, Read, Update, and Delete (CRUD)"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'https://www.w3schools.com/xml/ajax_intro.asp'"&gt;w3schools: Asynchronous JavaScript and XML (AJAX)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'https://en.wikipedia.org/wiki/JSON'"&gt;Wikipedia: "JavaScript Object Notation (JSON)"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'https://developer.mozilla.org/en-US/docs/Web/HTTP'"&gt;MDN Web Docs: Hypertext Transfer Protocol (HTTP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tools-and-resources"&gt;
  &lt;/a&gt;
  Tools and Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="'https://jsonlint.com/'"&gt;JSONLint- The JSON Validator app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en'"&gt;Google Chrome Web Store: JSON Formatter Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'https://restfulapi.net/http-methods/'"&gt;REST API Tutorial: HTTP Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#more-about-fetch"&gt;
  &lt;/a&gt;
  More about Fetch
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="'https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL'"&gt;MDN Web Docs: "What is a URL?"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview'"&gt;MDN Web Docs: "HTTP Overview"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch'"&gt;MDN Web Docs: "Using Fetch"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading, and happy coding!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My Next Adventure</title>
      <author>Shodipo Ayomide</author>
      <pubDate>Mon, 15 Nov 2021 19:47:38 +0000</pubDate>
      <link>https://dev.to/developerayo/my-next-adventure-3l0i</link>
      <guid>https://dev.to/developerayo/my-next-adventure-3l0i</guid>
      <description>&lt;p&gt;Moving on doesn't mean forgetting the past, the past is part of what made a way to the future we are in today.&lt;/p&gt;

&lt;p&gt;My time at Stack Overflow came to an end sometime recently, it was an exciting run working with some of the smartest engineers and community leaders I have ever met, which specifically thought me to do more and keep getting better, working daily and never seeing how good everyone is getting to stop me from getting even much better.  &lt;/p&gt;

&lt;p&gt;But, never forget one thing, part of the end of something huuge, is just the beginning of something far much greater.&lt;/p&gt;

&lt;p&gt;I'm super excited to be leading Global Developer Advocacy at &lt;a href="https://polygon.technology"&gt;Polygon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My team would be covering everything around the building of example applications on Polygon, community building, hackathons, engineering content, and more. &lt;/p&gt;

&lt;p&gt;I believe the future of Ethereum and the internet would be built on Polygon and I'm excited to be part of this huge story being forged.&lt;/p&gt;

&lt;p&gt;I got offers from companies I didn't expect, I saw offers coming in from Amazon, Snapchat, Ford Motors, Elastic Search, Scylladb, and more, all great products, then one popped up on my screen from Polygon, I wasn't particularly excited, but after 10 minutes of research and looking at what goes on at Polygon, it looked exactly like my next adventure, and now I've been working here and yes it's actually what I expected.&lt;/p&gt;

&lt;p&gt;Looking forward to more years at Polygon.&lt;/p&gt;

&lt;p&gt;As I said in the last one,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The journey is only 1% finished,&lt;/p&gt;

&lt;p&gt;Jisi nu ike "Be Strong".&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>engineering</category>
      <category>community</category>
      <category>leadership</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Number Generator With JS</title>
      <author>Walter Nascimento</author>
      <pubDate>Mon, 15 Nov 2021 19:17:58 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/number-generator-with-js-213h</link>
      <guid>https://dev.to/walternascimentobarroso/number-generator-with-js-213h</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/gerador-de-n%C3%BAmeros-com-js-5ebdc220c180"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have a project that generates random numbers, odd numbers, even numbers and real numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;First let’s create the interface, we’ll do something simple, using just HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Gerador de números&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"form_main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Quantidade&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Tipo&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"odd"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"odd"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"odd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Impar&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"even"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"even"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"even"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Par&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"real"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"real"&lt;/span&gt; &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;'checked'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"real"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Reais&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"generate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Gerar&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code we have an input that will define the amount of number we want to generate, in the type (radio) we have options (odd, even and real) and finally we have a button that calls the function to generate the numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form_main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form_main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form_main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;odd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;even&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;real&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateReal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;odd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;odd&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateReal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have the javascript code that does all the magic, in the first line we have the selection of the button that calls the generate function, where the type that must be generated is checked and then its respective function is called.&lt;/p&gt;

&lt;p&gt;We have three functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;generateOdd&lt;/strong&gt; = This function loops over the total amount of numbers that must be generated and in the while statement it is checked if the number is even and finally it returns all the even numbers generated;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;generateEven&lt;/strong&gt; = This function loops over the total amount of numbers that must be generated and in the while statement it is checked if the number is odd, finally, all the generated odd numbers are returned;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;generateReal&lt;/strong&gt; = This function loops over the total amount of numbers that must be generated, finally all generated numbers are returned;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ready simple like that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;See below for the complete working project.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/WalterNascimento/embed/oNLLRqo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  Youtube
&lt;/h2&gt;

&lt;p&gt;If you prefer to watch it, see the development on youtube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WokYF0Y9BuI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊 See you later! 😊😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tips</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Introducing OpenShift Container
Platform 4</title>
      <author>Ahmed Shendy</author>
      <pubDate>Mon, 15 Nov 2021 18:55:29 +0000</pubDate>
      <link>https://dev.to/ahmedshendy/introducing-openshift-containerplatform-4-16mc</link>
      <guid>https://dev.to/ahmedshendy/introducing-openshift-containerplatform-4-16mc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#openshift-container-platform-4-architecture"&gt;
  &lt;/a&gt;
  OpenShift Container Platform 4 Architecture
&lt;/h2&gt;

&lt;p&gt;Red Hat OpenShift Container Platform 4 (RHOCP 4) is a set of modular components and services built on top of Red Hat CoreOS and Kubernetes.&lt;br&gt;
One of the main advantages of using OpenShift is that it uses several nodes to ensure the resiliency and scalability of its managed applications. OpenShift forms a cluster of node servers that run containers and are centrally managed by a set of master servers.&lt;/p&gt;

&lt;p&gt;The following diagram illustrates the high-level logical overview of the OpenShift Container Platform 4 architecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6YXZWOau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzn5di2bfoe6px2pi103.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6YXZWOau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzn5di2bfoe6px2pi103.png" alt="OCP 4 Architecture" width="880" height="692"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following diagram illustrates the OpenShift Container Platform stack.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWkTcHR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uav645q1roc4wplf8qkk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWkTcHR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uav645q1roc4wplf8qkk.png" alt="OCP Stack" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From bottom to top, and from left to right, this shows the basic container infrastructure, integrated and enhanced by Red Hat:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Red Hat CoreOS&lt;/strong&gt; is the base OS on top which OpenShift runs. Red Hat CoreOS is a Linux distribution focused on providing an immutable operating system for container execution.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CRI-O&lt;/strong&gt; is an implementation of the Kubernetes Container Runtime Interface (CRI) to enable using Open Container Initiative (OCI) compatible runtimes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Kubernetes&lt;/strong&gt; manages a cluster of hosts, physical or virtual, running containers. It uses resources that describe multicontainer applications composed of multiple resources, and how they interconnect&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;etcd&lt;/strong&gt; is a distributed key-value store, used by Kubernetes to store configuration and state information about the containers and other resources inside the Kubernetes cluster&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Custom Resource Definitions (CRDs)&lt;/strong&gt; are resource types stored in etcd and managed by Kubernetes. These resource types form the state and configuration of all resources managed by OpenShift. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Containerized services&lt;/strong&gt; fulfill many PaaS infrastructure functions, such as networking and authorization. RHOCP uses the basic container infrastructure from Kubernetes and the underlying container runtime for most internal functions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Runtimes and xPaaS&lt;/strong&gt; are base container images ready for use by developers, each preconfigured with a particular runtime language or database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DevOps Tools and User Experience&lt;/strong&gt;: RHOCP provides web UI and CLI management tools for managing user applications and RHOCP services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following table lists some of the most commonly used terminology when you work with OpenShift.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Term&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Node&lt;/td&gt;
&lt;td&gt;A server that hosts applications in an OpenShift cluster&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Master Node&lt;/td&gt;
&lt;td&gt;A node server that manages the control plane in an OpenShift cluster. Master nodes provide basic cluster services such as APIs or controllers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Worker Node&lt;/td&gt;
&lt;td&gt;Worker nodes execute workloads for the cluster. Application pods are scheduled onto worker nodes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resource&lt;/td&gt;
&lt;td&gt;Resources are any kind of component definition managed by OpenShift.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Controller&lt;/td&gt;
&lt;td&gt;A controller is an OpenShift component that watches resources and makes changes attempting to move the current state towards the desired state.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Label&lt;/td&gt;
&lt;td&gt;A key-value pair that can be assigned to any OpenShift resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Namespace or Project&lt;/td&gt;
&lt;td&gt;A scope for OpenShift resources and processes, so that resources with the same name can be used in different contexts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Console&lt;/td&gt;
&lt;td&gt;A web UI provided by OpenShift that allows developers and administrators to manage cluster resources.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#new-features-in-rhocp-4"&gt;
  &lt;/a&gt;
  New Features in RHOCP 4
&lt;/h2&gt;

&lt;p&gt;RHOCP 4 includes new features, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CoreOS as the default operating system for all nodes, offering an immutable infrastructure optimized for containers&lt;/li&gt;
&lt;li&gt;A new cluster installer, which simplifies the process of installing and updating the masters and worker nodes in the cluster&lt;/li&gt;
&lt;li&gt;A self-managing platform, able to automatically apply cluster updates and recoveries without disruption.&lt;/li&gt;
&lt;li&gt;A redesigned web console based on the concept of "personas", targeting both platform administrators and developers&lt;/li&gt;
&lt;li&gt;An Operator SDK to build, test, and package Operators.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#describing-openshift-resource-types"&gt;
  &lt;/a&gt;
  Describing OpenShift Resource Types
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pods (pod)&lt;/strong&gt; are the basic unit of work for OpenShift.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Services (svc)&lt;/strong&gt; Specific IP/port combinations that provides access to a pool of pods. By default, services connect clients to pods in a round-robin fashion.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Replication Controllers (rc)&lt;/strong&gt; OpenShift resources that define how pods are replicated (horizontally scaled) to different nodes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Persistent Volumes (pv)&lt;/strong&gt; Storage areas to be used by pods.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Persistent Volume Claims (pvc)&lt;/strong&gt; Requests for storage by a pod. A pvc links a pv to a pod so its containers can make use of it, usually by mounting the storage into the container's file system.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Config Maps (cm)&lt;/strong&gt; A set of keys and values that can be used by other resources. ConfigMaps and Secrets are usually used to centralize configuration values used by several resources. Secrets differ from ConfigMaps maps in that Secrets are used to store sensitive data (usually encrypted), and their access is restricted to fewer authorized users.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deployment Configs (dc)&lt;/strong&gt; A set of containers included in a pod, and the deployment strategies to be used. A dc also provides a basic but extensible continuous delivery workflow.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build Configs (bc)&lt;/strong&gt; A process to be executed in the OpenShift project. The OpenShift Source-to-Image (S2I) feature uses BuildConfigs to build a container image from application source code stored in a Git repository. A bc works together with a dc to provide a basic but extensible continuous integration and continuous delivery workflows.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Routes&lt;/strong&gt; DNS host names recognized by the OpenShift router as an ingress point for various applications and microservices deployed on the cluster.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Image Streams (is)&lt;/strong&gt; An image stream and its tags provide an abstraction for referencing container images from within OpenShift Container Platform. The image stream and its tags allow you to track what images are available and ensure that you are using the specific image you need even if the image in the repository changes. Image streams do not contain actual image data, but present a virtual view of related images, similar to an image repository.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>containers</category>
      <category>devops</category>
      <category>openshift</category>
    </item>
  </channel>
</rss>
