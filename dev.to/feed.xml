<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Basics of Callbacks and Promises in Javascript</title>
      <author>Patricia Nicole</author>
      <pubDate>Mon, 14 Jun 2021 16:09:20 +0000</pubDate>
      <link>https://dev.to/pat_the99/basics-of-callbacks-and-promises-in-javascript-4cj7</link>
      <guid>https://dev.to/pat_the99/basics-of-callbacks-and-promises-in-javascript-4cj7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#js3-wil-thinking-post"&gt;
  &lt;/a&gt;
  [JS#3 WIL 🤔 Post]
&lt;/h2&gt;

&lt;p&gt;Most websites and applications written would, at some point request data from a server, wait for user input or in general do other processes that would take a good amount of time to finish. Because of this, Javascript supports asynchronous functions, simply, functions that can run in the background while other parts of the program execute. These functions are executed in its entirety when called, but might finish on some future time.&lt;/p&gt;

&lt;p&gt;One, and the simplest way of achieving asynchrony is by using &lt;strong&gt;callbacks&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pushpin-callbacks"&gt;
  &lt;/a&gt;
  📌 Callbacks
&lt;/h3&gt;

&lt;p&gt;A callback is a function passed as an argument to a different function. They are executed asynchronously or at a later time. Practically, programs are read from top to bottom, but this is not always the case as async code may run different functions at different times. For instance, when handling click events for buttons in an HTML form, we typically do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;submitBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="c1"&gt;//this function is a callback&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;printSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, Dev Community!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet above, the &lt;code&gt;addEventListener&lt;/code&gt; function takes a callback, in this case the function invoking the &lt;code&gt;printSomething&lt;/code&gt; method. It will then be invoked when the &lt;code&gt;submitBtn&lt;/code&gt; is clicked. &lt;/p&gt;

&lt;p&gt;Using callbacks are pretty easy and convenient when dealing with simple processes. However, it may quickly get out of hand if they are chained or nested deeply together, famously known as &lt;a href="http://callbackhell.com/"&gt;Callback Hell&lt;/a&gt; or pyramid of doom 😟. &lt;/p&gt;

&lt;p&gt;So, callbacks are very fundamental in JS asynchrony. However, as the language grows and with program logic getting a little too complex, they are not enough. The future of JS requires a more sophisticated way of async patterns, one such mechanism is a &lt;strong&gt;promise&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pushpin-promises"&gt;
  &lt;/a&gt;
  📌 Promises
&lt;/h3&gt;

&lt;p&gt;A promise is an object that &lt;strong&gt;MIGHT&lt;/strong&gt; produce a value at some future time. For example, let us say that the function &lt;code&gt;fetchDatabaseData&lt;/code&gt; gets data from a server and returns it as an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchDatabaseData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//fetches data via some API&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fetching the data from the server may take time, so unless we tell the code that, it will always assume that the data is ready. The &lt;code&gt;api.getData()&lt;/code&gt; is probably not yet finished, so, executing the below snippet may have an unwanted result, e.g. &lt;code&gt;undefined&lt;/code&gt; 😣.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchDatabaseData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstEntry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first];
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, to fix this problem, we need a mechanism to tell our program to wait for &lt;code&gt;fetchDatabaseData&lt;/code&gt; to finish. Promises solve this issue for us. &lt;/p&gt;

&lt;p&gt;To fix the above code, we can do something like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchDatabaseData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//fetches data via some API&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ooops, we've got an error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchDatabaseData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// handle fulfilled operation&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstEntry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstEntry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;//handle rejection error&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the example above, a promise behaves as a &lt;code&gt;'future'&lt;/code&gt; value. Since the time-dependent process is encapsulated inside the promise, the promise itself can be treated as time-independent. Meaning, it can be combined with any other promise regardless of how long the encapsulated process might take, without any problem.&lt;/p&gt;

&lt;p&gt;When the result from the api is &lt;code&gt;undefined&lt;/code&gt;, the returned Promise will have a rejected state. Thus, the &lt;code&gt;then&lt;/code&gt; method would print &lt;code&gt;"Oops, we've got an error"&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;On the other hand, if the api results to a defined object, the Promise would be fulfilled and the &lt;code&gt;then&lt;/code&gt; method would print the api results.&lt;/p&gt;

&lt;p&gt;In addition, immutability is one of the most essential aspect of promises. Once a promise has been resolved, it stays that way &lt;strong&gt;FOREVER&lt;/strong&gt;. It becomes immutable. You can then pass the promise around and know that it cannot be modified maliciously or accidentally. &lt;/p&gt;

&lt;p&gt;I created a very simple weather application using the fetch function which returns a promise. The &lt;a href="https://fatrixienicolieopetina.github.io/weather-app/"&gt;live preview&lt;/a&gt; and the &lt;a href="https://github.com/fatrixienicolieopetina/weather-app"&gt;code&lt;/a&gt; can be found in &lt;a href="https://github.com/fatrixienicolieopetina"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also recommend reading these chapters of &lt;code&gt;You Don't Know JS&lt;/code&gt; :  &lt;a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch2.md"&gt;Callbacks in Chapter 2&lt;/a&gt; and &lt;a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch3.md"&gt;Promises in Chapter 3&lt;/a&gt;&lt;br&gt;
for a more in-depth discussion of these concepts.&lt;/p&gt;

&lt;p&gt;In conclusion, there are a lot of ways to handle asynchrony in Javascript, two of them via callbacks or promise. Callbacks can be used in handling simple logic but might get out of hand if chained, i.e. callback hell. Promises do not get rid of callbacks, they try to address callback chains by expressing the asynchronous program flow in a sequential way. It helps in writing maintainable JS code. It also makes the code more readable as the program-flow is sequential, which is similar on how our brain plans and executes actions.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cheers-to-continuous-learning-wineglass"&gt;
  &lt;/a&gt;
  Cheers to continuous learning! 🍷
&lt;/h3&gt;

&lt;p&gt;[REFERENCES]&lt;br&gt;
[1] &lt;a href="https://github.com/maxogden/art-of-node#callbacks"&gt;Art of Node&lt;/a&gt;&lt;br&gt;
[2] &lt;a href="https://www.theodinproject.com/paths/full-stack-javascript/courses/javascript/lessons/async"&gt;The Odin Project: Async&lt;/a&gt;&lt;br&gt;
[3] &lt;a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch2.md"&gt;You Don't Know JS&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to build a GraphQL Gateway with Spring Boot and Kotlin</title>
      <author>Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴</author>
      <pubDate>Mon, 14 Jun 2021 16:04:55 +0000</pubDate>
      <link>https://dev.to/jmfayard/how-to-build-a-graphql-gateway-with-spring-boot-and-kotlin-h30</link>
      <guid>https://dev.to/jmfayard/how-to-build-a-graphql-gateway-with-spring-boot-and-kotlin-h30</guid>
      <description>&lt;p&gt;With Spring Boot + Kotlin + Coroutines + GraphQL-java-kickstart, you can build a GraphQL Gateway with a minimum of boilerplate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#up-and-running"&gt;
  &lt;/a&gt;
  Up and Running
&lt;/h2&gt;

&lt;p&gt;The code is available at &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jmfayard"&gt;
        jmfayard
      &lt;/a&gt; / &lt;a href="https://github.com/jmfayard/spring-playground"&gt;
        spring-playground
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A playground of Spring projects
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
spring-playground&lt;/h1&gt;
&lt;p&gt;Projects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/jmfayard/spring-playground/main/graphql-gateway"&gt;graphql-gateway&lt;/a&gt; based on kotlin + spring-webflux + graphql-java-kickstart&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/jmfayard/spring-playground/main/spring-fu"&gt;spring-fu&lt;/a&gt; based on coroutines + spring-kafu&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jmfayard/spring-playground"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;Run the server like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/jmfayard/spring-playground
cd spring-playground/graphql-gateway
./gradlew bootRun
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Open GraphiQL at &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#animal-facts"&gt;
  &lt;/a&gt;
  Animal facts
&lt;/h2&gt;

&lt;p&gt;With this project up and running, you can fetch animal facts using a GraphQL Query.&lt;/p&gt;

&lt;p&gt;Enter this query:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;latency&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;latency&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Run the query, and you will see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1DcrxXNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/121910922-914f9180-cd2f-11eb-9b96-e9b627328981.png" class="article-body-image-wrapper"&gt;&lt;img alt="Mozilla_Firefox" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1DcrxXNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/121910922-914f9180-cd2f-11eb-9b96-e9b627328981.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are new to GraphQL, read this introduction from @methodcoder, I will wait &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hexrcs" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2WCO1u1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uooa1hzs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/62575/891801d5-0dc3-4279-b346-fd0dd1fd1653.jpeg" alt="hexrcs image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/methodcoder/graphql-crash-course-in-10-pics-3b04" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🔥 GraphQL Crash Course (in 10 pics!)&lt;/h2&gt;
      &lt;h3&gt;Xiaoru Li 🇨🇳🇩🇪 ・ Nov 3 '19 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cat-facts-and-dog-facts"&gt;
  &lt;/a&gt;
  Cat facts and dog facts
&lt;/h2&gt;

&lt;p&gt;Where do the animal facts come from?&lt;/p&gt;

&lt;p&gt;The server knows about two REST APIs.&lt;/p&gt;

&lt;p&gt;The first is about cat facts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http get https://catfact.ninja/fact
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"fact"&lt;/span&gt;: &lt;span class="s2"&gt;"Isaac Newton invented the cat flap. Newton was experimenting in a pitch-black room. Spithead, one of his cats, kept opening the door and wrecking his experiment. The cat flap kept both Newton and Spithead happy."&lt;/span&gt;,
    &lt;span class="s2"&gt;"length"&lt;/span&gt;: 211
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And the second about dog facts:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http get https://some-random-api.ml/facts/dog
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"fact"&lt;/span&gt;: &lt;span class="s2"&gt;"A large breed dog's resting heart beats between 60 and 100 times per minute, and a small dog breed's heart beats between 100-140. Comparatively, a resting human heart beats 60-100 times per minute."&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By building a simple gateway, we take on complexity so that the front-end developers have one less thing to worry about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we take care of calling the multiple endpoints and combining them, becoming a &lt;a href="https://samnewman.io/patterns/architectural/bff/"&gt;backend-for-frontend&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;we offer a nice GraphQL schema to the front-end(s).&lt;/li&gt;
&lt;li&gt;we normalize the response format - dog facts have no length attribute, but we can compute it!&lt;/li&gt;
&lt;li&gt;we can potentially reduce the &lt;strong&gt;total response time&lt;/strong&gt;. Without the gateway, the front-end would do two round-trips of let say 300 ms, so 600ms. With the gateway, there is one round-trip of 300 ms and two round-trips between the gateway and the facts server. If those are located on the same network, those could be done in 10 ms each, for a total of 320 ms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how do we build that gateway?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;p&gt;If you start a new project from scratch via &lt;a href="https://start.spring.io/"&gt;https://start.spring.io/&lt;/a&gt;, you will need to add those dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring webflux&lt;/li&gt;
&lt;li&gt;GraphQL-java&lt;/li&gt;
&lt;li&gt;GraphQL-java-kickstart libraries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/jmfayard/spring-playground/blob/e2c74e6efe93674c0e382bef940d36a190145d80/graphql-gateway/build.gradle.kts#L23-L27"&gt;Use the source Luke&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that I'm using &lt;a href="https://jmfayard.github.io/refreshVersions/"&gt;gradle refreshVersions&lt;/a&gt; to make it easy to keep the project up-to-date. Therefore, the versions are not defined in the &lt;code&gt;build.gradle&lt;/code&gt; files, they are centralized in the &lt;a href="https://github.com/jmfayard/spring-playground/blob/19b06ec2ffa4a0084a3f0799e891ecbe784132c6/graphql-gateway/versions.properties"&gt;&lt;code&gt;versions.properties&lt;/code&gt;&lt;/a&gt; file. RefreshVersions is bootstrapped like this in &lt;code&gt;settings.gradle.kts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;plugins&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// See https://jmfayard.github.io/refreshVersions&lt;/span&gt;
    &lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"de.fayard.refreshVersions"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="s"&gt;"0.10.1"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#graphqlschema-first"&gt;
  &lt;/a&gt;
  GraphQL-schema first
&lt;/h2&gt;

&lt;p&gt;GraphQL-java-kickstart uses a schema-first approach.&lt;/p&gt;

&lt;p&gt;We first define our schema in &lt;code&gt;resources/graphql/schema.grqphqls&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We then tell Spring where our &lt;code&gt;GraphQLSchema&lt;/code&gt; comes from:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GraphQLConfig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Bean&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;graphQLSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animalsQueryResolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AnimalsQueryResolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;GraphQLSchema&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;SchemaParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;newParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"graphql/schema.graphqls"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolvers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animalsQueryResolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeExecutableSchema&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Spring wants at least a GraphQLQueryResolver, the class responsible for implementing GraphQL queries.&lt;/p&gt;

&lt;p&gt;We will define one, but keep it empty for now:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Component
class AnimalsQueryResolver() : GraphQLQueryResolver {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#graphqlqueryresolver"&gt;
  &lt;/a&gt;
  GraphQLQueryResolver
&lt;/h2&gt;

&lt;p&gt;If we start our application with &lt;code&gt;./gradlew bootRun&lt;/code&gt;, we will see it fail fast with this error message:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;FieldResolverError: No method or field found as defined &lt;span class="k"&gt;in &lt;/span&gt;schema graphql/schema.graphqls:2 
with any of the following signatures 
&lt;span class="o"&gt;(&lt;/span&gt;with or without one of &lt;span class="o"&gt;[&lt;/span&gt;interface graphql.schema.DataFetchingEnvironment] as the last argument&lt;span class="o"&gt;)&lt;/span&gt;, 
&lt;span class="k"&gt;in &lt;/span&gt;priority order:

  dev.jmfayard.factsdemo.AnimalsQueryResolver.cat&lt;span class="o"&gt;()&lt;/span&gt;
  dev.jmfayard.factsdemo.AnimalsQueryResolver.getCat&lt;span class="o"&gt;()&lt;/span&gt;
  dev.jmfayard.factsdemo.AnimalsQueryResolver.cat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The schema, which is the single source of truth, requires something to implement a &lt;code&gt;cat&lt;/code&gt; query, but we didn't have that in the code.&lt;/p&gt;

&lt;p&gt;To make Spring happy, we make sure our Query Resolver has the same &lt;strong&gt;shape&lt;/strong&gt; as the GraphQL schema:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimalsQueryResolver&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;GraphQLQueryResolver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice that you can directly define a suspending function, without any additional boilerplate, to implement the query.&lt;/p&gt;

&lt;p&gt;Run again &lt;code&gt;./gradlew bootRun&lt;/code&gt; and now Spring starts!&lt;/p&gt;

&lt;p&gt;We go one step further by forwarding the calls to an &lt;code&gt;AnimalsRepository&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimalsQueryResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;animalsRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AnimalsRepository&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;GraphQLQueryResolver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animalsRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animalsRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;How do we implement this repository? We need an HTTP client.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#suspending-http-calls-with-ktorclient"&gt;
  &lt;/a&gt;
  Suspending HTTP calls with  ktor-client
&lt;/h2&gt;

&lt;p&gt;We could have used the built-in reactive &lt;code&gt;WebClient&lt;/code&gt; that Spring provides, but I wanted to use ktor-client to keep things as simple as possible.&lt;/p&gt;

&lt;p&gt;First we have to add the dependencies for ktor, http and kotlinx-serialization, then configure our client.&lt;/p&gt;

&lt;p&gt;See the commit &lt;a href="https://github.com/jmfayard/spring-playground/commit/c3445289143b321fc0fa1e4264e65b8989f78e31"&gt;Configure ktor-client, okhttp &amp;amp; kotlinx.serialization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most interesting part is here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimalsRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;ktorClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;HttpClient&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dogFact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ktorClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DogFact&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;DOG_FACT_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dogFact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dogFact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;catFact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ktorClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CatFact&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;CAT_FACT_URLS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;catFact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;catFact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#simple-or-nonblocking-why-not-both"&gt;
  &lt;/a&gt;
  Simple or non-blocking: why not both?
&lt;/h2&gt;

&lt;p&gt;When I see the code above, I am reminded that I love coroutines.&lt;/p&gt;

&lt;p&gt;We get to write code in a simple, direct style like in the old days when we were writing blocking code in a one-thread-per-request model. &lt;/p&gt;

&lt;p&gt;Here it's essential to write non-blocking code: the gateway spends most of its time waiting for the two other servers to answer.&lt;/p&gt;

&lt;p&gt;Code written using some kind of promise or reactive streams is therefore clearly more efficient than blocking code.&lt;/p&gt;

&lt;p&gt;But those require you to "think in reactive streams" and make your code looks different indeed.&lt;/p&gt;

&lt;p&gt;With coroutines, we get the efficiency and our code is as simple as it gets.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#resilience-via-a-circuit-breaker"&gt;
  &lt;/a&gt;
  Resilience via a Circuit Breaker
&lt;/h2&gt;

&lt;p&gt;We have a gateway, but it's a bad gateway.&lt;/p&gt;

&lt;p&gt;More precisely, it's as bad as the worst of the servers it depends on to do its job.&lt;/p&gt;

&lt;p&gt;If one server throws an error systematically or gets v e r y s l o w, our gateway follows blindly.&lt;/p&gt;

&lt;p&gt;We don't want the same error to reoccur constantly, and we want to handle the error quickly without waiting for the TCP timeout.&lt;/p&gt;

&lt;p&gt;We can make our gateway more &lt;strong&gt;resilient&lt;/strong&gt; by using a &lt;a href="https://en.wikipedia.org/wiki/Circuit_breaker_design_pattern"&gt;circuit breaker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resilience4j&lt;/strong&gt; provides such a circuit breaker implementation.&lt;/p&gt;

&lt;p&gt;We first add and configure the library.&lt;/p&gt;

&lt;p&gt;See the commit: &lt;a href="https://github.com/jmfayard/spring-playground/commit/60d88ac2c434728b07409bd90d381cb21791f7ce"&gt;add a circuit breaker powered by resilience4j&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The usage is at simple as it gets:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;@Component&lt;/span&gt;
class AnimalsRepository(
    val ktorClient: HttpClient,
&lt;span class="gi"&gt;+    val dogCircuitBreaker: CircuitBreaker,
+    val catCircuitBreaker: CircuitBreaker
&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; {
    suspend fun dog(): Fact {
&lt;span class="gi"&gt;+        val dogFact = dogCircuitBreaker.executeSuspendFunction {
&lt;/span&gt;            ktorClient.get&amp;lt;DogFact&amp;gt;(DOG_FACT_URL)
&lt;span class="gi"&gt;+        }
&lt;/span&gt;        return Fact(
            fact = dogFact.fact,
            length = dogFact.fact.length,
        )
    }

    suspend fun cat(): Fact {
&lt;span class="gi"&gt;+        val catFact = catCircuitBreaker.executeSuspendFunction  {
&lt;/span&gt;            ktorClient.get&amp;lt;CatFact&amp;gt;(CAT_FACT_URLS)
&lt;span class="gi"&gt;+        }
&lt;/span&gt;        return Fact(
            fact = catFact.fact,
            length = catFact.length,
        )
    }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#i-want-to-learn-more"&gt;
  &lt;/a&gt;
  I want to learn more
&lt;/h2&gt;

&lt;p&gt;See &lt;a href="https://github.com/jmfayard/spring-playground/tree/main/graphql-gateway"&gt;spring-playground/graphql-gateway&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jmfayard"&gt;
        jmfayard
      &lt;/a&gt; / &lt;a href="https://github.com/jmfayard/spring-playground"&gt;
        spring-playground
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A playground of Spring projects
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
spring-playground&lt;/h1&gt;
&lt;p&gt;Projects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/jmfayard/spring-playground/main/graphql-gateway"&gt;graphql-gateway&lt;/a&gt; based on kotlin + spring-webflux + graphql-java-kickstart&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/jmfayard/spring-playground/main/spring-fu"&gt;spring-fu&lt;/a&gt; based on coroutines + spring-kafu&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jmfayard/spring-playground"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The talk that inspired this article: &lt;a href="https://www.youtube.com/watch?v=4GkoB4hZUnw"&gt;KotlinFest2019「Future of Jira Software powered by Kotlin」 #kotlinfest - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4GkoB4hZUnw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Documentation of the libraries used in this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ktor.io/docs/getting-started-ktor-client.html"&gt;Getting started with a Ktor client | Ktor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.graphql-java-kickstart.com/spring-boot/"&gt;About GraphQL Spring Boot - GraphQL Java Kickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.graphql-java-kickstart.com/tools/"&gt;About GraphQL Java Tools - GraphQL Java Kickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/graphql-java/graphql-java"&gt;graphql-java/graphql-java: GraphQL Java implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://resilience4j.readme.io/docs"&gt;Resilience4j&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to contact me, there is a standing invitation at &lt;a href="https://jmfayard.dev/contact/"&gt;https://jmfayard.dev/contact/&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>kotlin</category>
      <category>graphql</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Hello, World ?</title>
      <author>Phu Minh</author>
      <pubDate>Mon, 14 Jun 2021 15:53:29 +0000</pubDate>
      <link>https://dev.to/freakcdev297/hello-world-40op</link>
      <guid>https://dev.to/freakcdev297/hello-world-40op</guid>
      <description>&lt;h2&gt;
  &lt;a href="#first-note"&gt;
  &lt;/a&gt;
  First note
&lt;/h2&gt;

&lt;p&gt;Hello World is probably the most iconic, and foundation to many developers' career. It's easy to implement, and most programmers would often get started with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The project
&lt;/h2&gt;

&lt;p&gt;I want to bring Hello World to next level, by creating a project consists of dozens of Hello World programs written in different languages :)&lt;/p&gt;

&lt;p&gt;It's currently on &lt;a href="https://github.com/nguyenphuminh/HelloWorld"&gt;Github&lt;/a&gt;. By this time, there have already been close to 200 programs. If you like to add a language to the repo, we would LOVE to include it in the list whether it's an esolang, a joke language, a personal toy language, or any others. &lt;/p&gt;

&lt;p&gt;Thanks for your time, hope you'd consider checking it out. Feel free to ask, explore and contribute.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>opensource</category>
      <category>code</category>
    </item>
    <item>
      <title>7 HTML Good Coding Habits</title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 14 Jun 2021 15:36:00 +0000</pubDate>
      <link>https://dev.to/melnik909/7-html-good-coding-habits-11ea</link>
      <guid>https://dev.to/melnik909/7-html-good-coding-habits-11ea</guid>
      <description>&lt;p&gt;We can found good practices of almost any programming language in Google. But I can't say that about HTML. So I'd to tell you about 7 of my good coding habits that you can use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-use-maximumscale1-and-userscalableno"&gt;
  &lt;/a&gt;
  Don't use maximum-scale=1 and user-scalable=no
&lt;/h2&gt;

&lt;p&gt;When I interact with a page I want to scale a page to consider details or to push the small button. But sometimes I can't do that because developers prevent it. They don't think about users and add maximum-scale=1 and user-scalable=no. &lt;/p&gt;

&lt;p&gt;So if you want users to be happy don't define these options and I will say thank you to you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1, user-scalable=no, maximum-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-the-a-without-href-instead-of-span"&gt;
  &lt;/a&gt;
  Use the a without href instead of span
&lt;/h2&gt;

&lt;p&gt;Sometimes we have to use the disabled links in our interfaces. There is a common way of using the span element to mask the disabled link and replace it on an a element when the link ceases to be disabled. &lt;/p&gt;

&lt;p&gt;But you haven't to do it. The href attribute is optional so if the a element doesn't have this attribute it stops to be clicked. You will get just a text. And if you want this element became interactive again just add the href attribute back.&lt;/p&gt;

&lt;p&gt;For example, you can use this approach for page navigation to define the current page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;About me&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Projects&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;About me&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Projects&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-button-instead-of-a-href"&gt;
  &lt;/a&gt;
  Use button instead of a href="#"
&lt;/h2&gt;

&lt;p&gt;A lot of developers use a href="#" when they need a button that users click on. But I think that's is a bad practice and I'll tell you about why. &lt;/p&gt;

&lt;p&gt;Browsers understand a href="#" like the instruction of going inside the top of the page. So you have to cancel this behavior using JS. As a result, you will get an element that behaves like a button. Also, you can add the role="button" so that screen readers will think this element is a button. &lt;/p&gt;

&lt;p&gt;Yes, it's the working solution. But the problem is all these actions can be omitted. Just using the button type="button" gets already an interactive accessible element without other actions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Show my order&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- or --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Show my order&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Show my order&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-inputmode"&gt;
  &lt;/a&gt;
  Use inputmode
&lt;/h2&gt;

&lt;p&gt;When I register on a website I have to fill in my data such as email, tel, etc. And I want to throw my cell phone because I have to switch my keyboard again and again. Just developers didn't think about my user experience.&lt;/p&gt;

&lt;p&gt;If you don't want to upset your users use the inputmode attribute. This attribute hints to browsers what a keyboard they should show so that users can fill data more efficiently.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Your email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Your tel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;inputmode=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Your email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;inputmode=&lt;/span&gt;&lt;span class="s"&gt;"tel"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Your tel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-width-and-height-to-svg-icons"&gt;
  &lt;/a&gt;
  Add width and height to SVG icons
&lt;/h2&gt;

&lt;p&gt;When you use SVG icons right in a HTML document, pay attention you have to set the width and height attributes. If you don't do it and you rely on you set the width and height properties in CSS your interface will be broken.&lt;/p&gt;

&lt;p&gt;Your CSS might not be loaded and at this point, the icons will try to fill all of the available space. So the mistake happens. Just set the width and height attributes and can sleep easily. Your interfaces will be bulletproof!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
    &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 448 512"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.875rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
    &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 448 512"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"0.875rem"&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1rem"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dont-use-headings-too-much"&gt;
  &lt;/a&gt;
  Don't use headings too much
&lt;/h2&gt;

&lt;p&gt;There is a bad practice of using the h1-h6 elements for the subheading. When you do that you forget that headings help users of screen readers to navigate on the web page faster. If you have headings too much it prevents people. So use heading where they're needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do it&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;iPhone 11&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Just the right amount of everything.&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use it instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;iPhone 11&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Just the right amount of everything.&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-more-sense-to-alt"&gt;
  &lt;/a&gt;
  Get more sense to alt
&lt;/h2&gt;

&lt;p&gt;The alt attribute can be very useful if developers use it correctly. That will be important for people with screen readers that use the text from the alt to understand what's on the picture.&lt;/p&gt;

&lt;p&gt;Unfortunately, a lot of developers ignore it. They duplicate text around this img or just don't add the alt. So if you a picture with some heading you should describe more information about the picture and don't duplicate text from the heading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do it&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"picture.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"adidas Originals Superstar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;adidas Originals Superstar&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use it instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"picture.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"adidas Originals Superstar Bold platform trainers in black and white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;adidas Originals Superstar&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; If you like these tips go to read others on my &lt;a href="https://www.linkedin.com/in/melnik909/"&gt;Linkedin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my patrons: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Vlad Bazhanov, Spiridon Konofaos, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>AWS API Gateway Best Practices in-depth</title>
      <author>Gert Leenders</author>
      <pubDate>Mon, 14 Jun 2021 15:30:01 +0000</pubDate>
      <link>https://dev.to/aws-heroes/aws-api-gateway-best-practices-in-depth-4l0n</link>
      <guid>https://dev.to/aws-heroes/aws-api-gateway-best-practices-in-depth-4l0n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best Practices
&lt;/h2&gt;

&lt;p&gt;Forgive me, the &lt;a href="https://en.wikipedia.org/wiki/Bart_Simpson"&gt;Bart Simpson&lt;/a&gt; in me couldn't resist using 'Best Practices' once again. Sure, there's a lot to say &lt;a href="https://www.satisfice.com/blog/archives/5164"&gt;to stamp out “best practice”&lt;/a&gt; and I agree with most arguments in the article. Framing something as a best practice is subjective, and it could give the impression of being arrogant. But, as grown-ups, I'm convinced most of us know how to deal with the term and see why it's used. So pick the practices you agree on, which you see as 'best' practices yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-front-door-the-importance-of-api-gateway"&gt;
  &lt;/a&gt;
  A front  door: The importance of API Gateway
&lt;/h2&gt;

&lt;p&gt;I have the feeling that the importance of API Gateway in a setup is sometimes overlooked. AWS wrote down the practices themselves (also using the term 'Best practices 😉). But IMHO, their &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"&gt;documentation&lt;/a&gt; is a tad too brief. Also, the documentation lacks a 'WHY' in general.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-why"&gt;
  &lt;/a&gt;
  The 'WHY'
&lt;/h3&gt;

&lt;p&gt;Assuming the vast majority of API Gateways are public-facing, it's easy to picture an API Gateway as a front door. One of the characteristics of a front door is access control: who to let in and how many to let it (at once). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxId_uCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4o2512zlg1dag8q5tmgq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxId_uCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4o2512zlg1dag8q5tmgq.jpeg" alt="Front door"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nowadays, a front door camera even provides a track record of everyone that came across your door, logging all rejected and allowed entrance calls. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That being said, API Gateway is a front door, treat it like one!&lt;/strong&gt; It's begging for attention security-wise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-importance-of-logs"&gt;
  &lt;/a&gt;
  The Importance of Logs.
&lt;/h2&gt;

&lt;p&gt;People less familiar with security, easily miss the importance of logs. But whoever encountered a security breach will endorse their significance. In case something gets compromised, investigation often starts with looking at access logs. &lt;strong&gt;That is why every public endpoint (Web Server, Load Balancer, API Gateways, ...) should have access logs enabled. If you would ask me, access logs should be mandatory, non-negotiable.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Knowing this, I find it hard to understand why AWS Security hub only recommends &lt;a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#apigateway-1-remediation"&gt;API logs to be enabled&lt;/a&gt;. I have no clue why access logs didn't make it to the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/06/aws-security-hub-adds-16-new-controls-to-its-foundational-securi/"&gt;Foundational Security Best Practices standard for CSPM&lt;/a&gt; 😟. I hope AWS will settle this in the next iteration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#access-log-retention-period"&gt;
  &lt;/a&gt;
  Access Log Retention Period
&lt;/h3&gt;

&lt;p&gt;As a retention period for access logs, I recommend at least one year. To save costs, you could only retain them in CloudWatch for one month. After 30 days, you could transfer them to something like S3. &lt;/p&gt;

&lt;p&gt;If a year sounds long, notice that breaches sometimes stay under the radar for quite some time. To tackle this, ensure your track record is long enough to allow successful investigation in case of trouble.&lt;/p&gt;

&lt;p&gt;For the ones using CloudFormation and AWS SAM, here's the IaC:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;ApiAccessLogGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Logs::LogGroup&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;LogGroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;servicename-api-${environment}-ApiGateway-cfn"&lt;/span&gt;
      &lt;span class="na"&gt;RetentionInDays&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;

  &lt;span class="na"&gt;SomeServiceGateway&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless::Api&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Someservice&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;API&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;GW&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${environment}"&lt;/span&gt;
      &lt;span class="na"&gt;StageName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;v1"&lt;/span&gt;
      &lt;span class="na"&gt;EndpointConfiguration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;REGIONAL&lt;/span&gt;
      &lt;span class="na"&gt;TracingEnabled&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
      &lt;span class="na"&gt;MethodSettings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;LoggingLevel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;INFO&lt;/span&gt;
          &lt;span class="na"&gt;MetricsEnabled&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
          &lt;span class="na"&gt;DataTraceEnabled&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;True&lt;/span&gt;
          &lt;span class="na"&gt;ResourcePath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/*"&lt;/span&gt;
          &lt;span class="na"&gt;HttpMethod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
      &lt;span class="na"&gt;AccessLogSetting&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;DestinationArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;ApiAccessLogGroup.Arn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#protecting-an-unauthorized-api-gateway"&gt;
  &lt;/a&gt;
  Protecting an Unauthorized API Gateway
&lt;/h2&gt;

&lt;p&gt;Unauthenticated API routes are open to the world. Therefore it's recommended to limit their use. It’s important to protect these unauthenticated API's against common risks, such as denial-of-service attacks or consumer errors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-waf"&gt;
  &lt;/a&gt;
  AWS WAF
&lt;/h3&gt;

&lt;p&gt;Applying AWS WAF to API Gateway helps to protect an application from SQL injection and cross-site scripting attacks. &lt;strong&gt;It's your first line of defense.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-cloudfront-as-traffic-absorber"&gt;
  &lt;/a&gt;
  AWS CloudFront as traffic absorber
&lt;/h3&gt;

&lt;p&gt;In case of a denial of service attack on an unauthenticated API, it’s possible to exhaust API throttling limits, Lambda concurrency, or DynamoDB provisioned read capacity on an underlying table. Putting an AWS CloudFront distribution in front of the API endpoint with an appropriate time-to-live configuration may help absorb traffic in a DoS attack without changing the underlying solution for fetching the data.&lt;/p&gt;

&lt;p&gt;See: "&lt;a href="https://aws.amazon.com/blogs/compute/operating-lambda-building-a-solid-security-foundation-part-2/"&gt;Operating Lambda: Building a solid security foundation – Part 2&lt;/a&gt;" for more information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-api-keys-and-throttling"&gt;
  &lt;/a&gt;
  Use API keys and Throttling
&lt;/h3&gt;

&lt;p&gt;API Gateway allows throttling when API keys are used. &lt;/p&gt;

&lt;p&gt;Use API Keys for unauthenticated API's when possible and never trust consumers 😉. Needless to say that negotiated contracts with (API) consumers change over time.  Often these changes aren't briefed. Or maybe a consumer's business just grows, together with the requests he's sending you. But even without any reason, if a consumer sends you a few hundred thousand requests instead of the few hundreds he promised to... who will feel the pain? You or him?&lt;/p&gt;

&lt;p&gt;With this in mind, design (your API Gateway) for error. The last thing you want is a drowned service due to a consumer's error. &lt;strong&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html"&gt;Throttling&lt;/a&gt; should be enabled by default on your API Gateway. It will prevent you from resource exhaustion, or even worse, scaling to the moon (together with your AWS bill). If a consumer breaks his quota, he should get a &lt;code&gt;429 Too Many Requests&lt;/code&gt; for coloring outside the lines. Let him feel the pain, not you!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Both throttling and logging are easy to enable but can be a real-lifesaver. Forewarned is forearmed.&lt;/p&gt;

&lt;p&gt;Enjoy and until next time!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>security</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>Sorting Algorithms Visualization: QuickSort, MergeSort, HeapSort, BubbleSort, InsertionSort</title>
      <author>Vladimir Nikitin</author>
      <pubDate>Mon, 14 Jun 2021 15:23:58 +0000</pubDate>
      <link>https://dev.to/loonywizard/sorting-algorithms-visualization-quicksort-mergesort-heapsort-bubblesort-insertionsort-2ik3</link>
      <guid>https://dev.to/loonywizard/sorting-algorithms-visualization-quicksort-mergesort-heapsort-bubblesort-insertionsort-2ik3</guid>
      <description>&lt;p&gt;Hi everyone! 👋🏻&lt;/p&gt;

&lt;p&gt;I'd like to share my new project about visualization of sorting algorithms&lt;/p&gt;

&lt;p&gt;Currently, there're five algorithms visualized: QuickSort, MergeSort, HeapSort, BubbleSort and InsertionSort&lt;/p&gt;

&lt;p&gt;This project helped me to understand how different sorting algorithms work and I will be happy if it this would be helpful for anybody&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/loonywizard/sorting-algos-visualizer"&gt;https://github.com/loonywizard/sorting-algos-visualizer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live demo: &lt;a href="https://loonywizard.github.io/sorting-algos-visualizer"&gt;https://loonywizard.github.io/sorting-algos-visualizer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>algorithms</category>
      <category>webdev</category>
    </item>
    <item>
      <title>tree in Linux</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Mon, 14 Jun 2021 15:23:22 +0000</pubDate>
      <link>https://dev.to/qainsights/tree-in-linux-mpa</link>
      <guid>https://dev.to/qainsights/tree-in-linux-mpa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-tree-endraw-in-linux"&gt;
  &lt;/a&gt;
  &lt;code&gt;tree&lt;/code&gt; in Linux
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;tree&lt;/code&gt; command helps to recursively list the directory and its details in a tree format. In this post, we will see how you can use &lt;code&gt;tree&lt;/code&gt; effectively to view the directory details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-tree-endraw-essentials-in-linux"&gt;
  &lt;/a&gt;
  &lt;code&gt;tree&lt;/code&gt; essentials in Linux
&lt;/h2&gt;

&lt;p&gt;To install &lt;code&gt;tree&lt;/code&gt; in Ubuntu, Debian Linux distros.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install tree
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To install &lt;code&gt;tree&lt;/code&gt; in CentOS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo yum install tree
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Windows, you can issue &lt;code&gt;tree&lt;/code&gt; in Windows Terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-raw-tree-endraw-"&gt;
  &lt;/a&gt;
  Enter &lt;code&gt;tree&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If you enter &lt;code&gt;tree&lt;/code&gt; command without any arguments, it will list out everything from the current directory recursively. Suppose, if you are in your home directory, it will display everything recursively like below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TO2OvdIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ccwzh8gpqo72rky5hba.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TO2OvdIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ccwzh8gpqo72rky5hba.gif" alt="Tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#man-page"&gt;
  &lt;/a&gt;
  Man page
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;man tree
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#list-all-contents-including-hidden-files-and-file-starts-with-raw-endraw-"&gt;
  &lt;/a&gt;
  List all contents including hidden files and file starts with &lt;code&gt;.&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree -a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#list-all-directories-recursively"&gt;
  &lt;/a&gt;
  List all directories recursively
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#print-file-patch-prefix"&gt;
  &lt;/a&gt;
  Print file patch prefix
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree -f
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#print-details-by-max-display-depth"&gt;
  &lt;/a&gt;
  Print details by max display depth
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree -L 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60iWU4bF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ae53gwl3w268j0gvvg3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60iWU4bF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ae53gwl3w268j0gvvg3.jpg" alt="Display Depth 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#print-details-by-pattern"&gt;
  &lt;/a&gt;
  Print details by pattern
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree -P b*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g_sj3AX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yxb7rzq1edqkrk88e2j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g_sj3AX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yxb7rzq1edqkrk88e2j.jpg" alt="Print details by pattern"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree backups -P 'SMTP*'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xppUbe-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12gw2xsmid8p91dflwhw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xppUbe-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12gw2xsmid8p91dflwhw.jpg" alt="Print details by pattern"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;'*' - any zero or more characters&lt;/code&gt;&lt;br&gt;
&lt;code&gt;'?' - any single character&lt;/code&gt;&lt;br&gt;
&lt;code&gt;'[...]' - any single character listed between brackets&lt;/code&gt;&lt;br&gt;
&lt;code&gt;'[A-Z]' - for range&lt;/code&gt;&lt;br&gt;
&lt;code&gt;'[^...]'- any single character not listed in brackets&lt;/code&gt;&lt;br&gt;
&lt;code&gt;'|' - separates alternate patterns&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#print-details-not-matching-the-pattern"&gt;
  &lt;/a&gt;
  Print details not matching the pattern
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree backups -I 'SMTP*'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d8BEha_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6yugtpte42rt4zhap7o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d8BEha_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6yugtpte42rt4zhap7o.png" alt="Print details not matching the pattern"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#matchdirs-and-prune"&gt;
  &lt;/a&gt;
  --matchdirs and --prune
&lt;/h2&gt;

&lt;p&gt;If you use &lt;code&gt;-P&lt;/code&gt; which matches both the directories and files. If the match is found for directories, then the matching is disabled for its contents. Use it with --prune to prune it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fjk0JdkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zp8hgqqssjsilnwzwof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fjk0JdkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zp8hgqqssjsilnwzwof.png" alt="--matchdirs and --prune"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#noreport"&gt;
  &lt;/a&gt;
  --noreport
&lt;/h2&gt;

&lt;p&gt;To not to print the file and directory report, use &lt;code&gt;--noreport&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree bin -P '*.log' --prune --noreport 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#json-output"&gt;
  &lt;/a&gt;
  JSON Output
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree bin -P '*.log' --prune -J
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#xml-output"&gt;
  &lt;/a&gt;
  XML Output
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree bin -P '*.log' --prune -X
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#print-last-modification-datetime"&gt;
  &lt;/a&gt;
  Print last modification date/time
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree bin -P '*.log' --prune -D
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#print-size"&gt;
  &lt;/a&gt;
  Print size
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree bin/ -P '*.properties' --prune -h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dz1FUURj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlm6ftyche0elo670bh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dz1FUURj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlm6ftyche0elo670bh2.png" alt="Print size"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mark-directories-and-files"&gt;
  &lt;/a&gt;
  Mark directories and files
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;-F&lt;/code&gt; marks directories as &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt; for files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree -P '*.jmx' --prune -F
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fLUS8_7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co3a5uavn378m1d1bxu0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fLUS8_7L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co3a5uavn378m1d1bxu0.png" alt="Mark directories and files"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dirsfirst"&gt;
  &lt;/a&gt;
  --dirsfirst
&lt;/h3&gt;

&lt;p&gt;It displays directories first over files. To disable, use &lt;code&gt;-U&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tree -P '*.jtl' --prune --dirsfirst
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bkN58QQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9osasrgqdbv3tqrk8iyu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkN58QQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9osasrgqdbv3tqrk8iyu.png" alt="--dirsfirst"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IEHTE84g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3mgztyagmjrqkk3qvi8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IEHTE84g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3mgztyagmjrqkk3qvi8.png" alt="--dirsfirst"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, we have covered frequently used tree commands. Please check my &lt;a href="https://qainsights.com"&gt;blog&lt;/a&gt; for more such tutorials.&lt;/p&gt;

&lt;p&gt;💙 &lt;a href="https://youtube.com/qainsights"&gt;QAInsights YouTube Channel&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>What's your favorite article that lives in your head rent-free?</title>
      <author>Amruta Ranade</author>
      <pubDate>Mon, 14 Jun 2021 15:22:30 +0000</pubDate>
      <link>https://dev.to/amrutaranade/what-s-your-favorite-article-that-lives-in-your-head-rent-free-1cck</link>
      <guid>https://dev.to/amrutaranade/what-s-your-favorite-article-that-lives-in-your-head-rent-free-1cck</guid>
      <description>&lt;p&gt;I found myself randomly thinking about Vitor Paladini's excellent article about &lt;a href="https://dev.to/vtrpldn/technical-writing-tips-for-non-native-english-speakers-4fno"&gt;Technical Writing Tips for Non-Native English speakers&lt;/a&gt; and made me wonder: does anyone else have articles that are so relevant and well-written that they stay with you long after? Tell me in the comments!&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to deploy git submodules to CapRover</title>
      <author>Alejandro Akbal</author>
      <pubDate>Mon, 14 Jun 2021 14:57:57 +0000</pubDate>
      <link>https://dev.to/alejandroakbal/how-to-deploy-git-submodules-to-caprover-74</link>
      <guid>https://dev.to/alejandroakbal/how-to-deploy-git-submodules-to-caprover-74</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;In this tutorial I will explain how to get &lt;code&gt;git submodules&lt;/code&gt; to deploy correctly to &lt;code&gt;CapRover&lt;/code&gt; using the &lt;code&gt;CapRover CLI&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#before-we-start"&gt;
  &lt;/a&gt;
  Before we start
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h3&gt;

&lt;p&gt;Having some knowledge about &lt;code&gt;CapRover&lt;/code&gt;, &lt;code&gt;Docker&lt;/code&gt; and &lt;code&gt;Git&lt;/code&gt; will help you understand how this solution works.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;When you use &lt;code&gt;caprover deploy&lt;/code&gt;, what happens underneath is that the CLI uses &lt;code&gt;git archive&lt;/code&gt; to make a compressed &lt;code&gt;tar&lt;/code&gt; of your repository. It then sends and deploys that file to your CapRover server.&lt;/p&gt;

&lt;p&gt;But there are some problems with &lt;code&gt;git archive&lt;/code&gt;:&lt;br&gt;
&lt;strong&gt;It does NOT include the &lt;code&gt;.git&lt;/code&gt; directory in the &lt;code&gt;tar&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So what you end up deploying is not really a git repository...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And if you were using &lt;code&gt;git submodules&lt;/code&gt; in your repository, they are not downloaded, since the &lt;code&gt;.git&lt;/code&gt; directory is missing.&lt;/p&gt;

&lt;p&gt;To solve that issue, I have found a solution that is separated into three steps.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#first-step-create-a-dockerfile"&gt;
  &lt;/a&gt;
  First step: Create a Dockerfile
&lt;/h2&gt;

&lt;p&gt;The first step to use &lt;code&gt;git submodules&lt;/code&gt; in CapRover is to create a &lt;code&gt;Dockerfile&lt;/code&gt; and download the &lt;code&gt;git submodules&lt;/code&gt; as a build step.&lt;/p&gt;

&lt;p&gt;You will need to create a &lt;code&gt;captain-definition&lt;/code&gt; file and point it to a &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"schemaVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dockerfilePath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./Dockerfile"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you will need to create a &lt;code&gt;Dockerfile&lt;/code&gt; that contains the following build step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;git submodule update &lt;span class="nt"&gt;--init&lt;/span&gt; &lt;span class="nt"&gt;--recursive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:15-alpine&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apk &lt;span class="nt"&gt;--no-cache&lt;/span&gt; add git

&lt;span class="c"&gt;# IMPORTANT: Download git submodules&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;git submodule update &lt;span class="nt"&gt;--init&lt;/span&gt; &lt;span class="nt"&gt;--recursive&lt;/span&gt;

&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;npm ci

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["node", "src/main"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#second-step-include-git-directory-in-the-tar"&gt;
  &lt;/a&gt;
  Second step: Include .git directory in the tar
&lt;/h2&gt;

&lt;p&gt;The second step is to improve what &lt;code&gt;caprover deploy&lt;/code&gt; does.&lt;br&gt;
Create a &lt;code&gt;tar&lt;/code&gt; file of your repository, while adding the &lt;code&gt;.git&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;For that, you can use the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Archive git repository&lt;/span&gt;
git archive HEAD &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; deploy.tar

&lt;span class="c"&gt;# Add `.git` directory to `tar`&lt;/span&gt;
&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; deploy.tar .git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#third-step-deploy-the-tar"&gt;
  &lt;/a&gt;
  Third step: Deploy the tar
&lt;/h2&gt;

&lt;p&gt;Now that you have both the &lt;code&gt;tar&lt;/code&gt; with the &lt;code&gt;.git&lt;/code&gt; directory, and a &lt;code&gt;Dockerfile&lt;/code&gt; that downloads the &lt;code&gt;git submodules&lt;/code&gt;, you are ready to deploy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Deploy the `tar` to your CapRover server&lt;/span&gt;
npx caprover deploy &lt;span class="nt"&gt;-t&lt;/span&gt; ./deploy.tar

&lt;span class="c"&gt;# Remove the tar&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; ./deploy.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#end"&gt;
  &lt;/a&gt;
  End
&lt;/h2&gt;

&lt;p&gt;That was it, I hope you had luck and your deployment was successful!&lt;/p&gt;

&lt;p&gt;Feel free to use the following script to perform all of these steps automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c"&gt;# Archive git repository&lt;/span&gt;
git archive HEAD &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; deploy.tar

&lt;span class="c"&gt;# Add `.git` directory to `tar`&lt;/span&gt;
&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; deploy.tar .git

&lt;span class="c"&gt;# Deploy the `tar` to your CapRover server&lt;/span&gt;
npx caprover deploy &lt;span class="nt"&gt;-t&lt;/span&gt; ./deploy.tar

&lt;span class="c"&gt;# Remove the tar&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; ./deploy.tar

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#selfpromotion"&gt;
  &lt;/a&gt;
  Self-promotion
&lt;/h3&gt;

&lt;p&gt;If you have found this useful, then you should follow me, I will be posting more interesting content! 🥰&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redirect.akbal.dev/github"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redirect.akbal.dev/twitter"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redirect.akbal.dev/dev.to"&gt;Dev.to&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or support me financially. 💸&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redirect.akbal.dev/github/sponsor"&gt;GitHub Sponsors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redirect.akbal.dev/liberapay"&gt;LiberaPay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redirect.akbal.dev/paypal"&gt;PayPal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Congratulations, today you have learned how to deploy &lt;code&gt;git submodules&lt;/code&gt; to your &lt;code&gt;CapRover&lt;/code&gt; server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let me know if the tutorial was useful to you in the comments!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>docker</category>
      <category>caprover</category>
    </item>
    <item>
      <title>Top courses to learn REACT</title>
      <author>Amritanshu Dev Rawat</author>
      <pubDate>Mon, 14 Jun 2021 14:57:55 +0000</pubDate>
      <link>https://dev.to/amritanshu/top-courses-to-learn-react-56d2</link>
      <guid>https://dev.to/amritanshu/top-courses-to-learn-react-56d2</guid>
      <description>&lt;p&gt;Free Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=4UZrsTqkcW4"&gt;https://www.youtube.com/watch?v=4UZrsTqkcW4&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nleFvvB7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1g1e1a25dbsgh7iyxot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nleFvvB7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1g1e1a25dbsgh7iyxot.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=w7ejDZ8SWv8"&gt;https://www.youtube.com/watch?v=w7ejDZ8SWv8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gzDwt7Fn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yltc3a4uei4vpalo77uy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gzDwt7Fn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yltc3a4uei4vpalo77uy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ke90Tje7VS0"&gt;https://www.youtube.com/watch?v=Ke90Tje7VS0&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0xJcu8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so8pskhth4ipf10duzsg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0xJcu8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so8pskhth4ipf10duzsg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn By Building Projects&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=-cMqr9HpZ-Y"&gt;https://www.youtube.com/watch?v=-cMqr9HpZ-Y&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Umz5KUk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nuapm3dgptesei7kueeq.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Paid Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/react-the-complete-guide-incl-redux/"&gt;https://www.udemy.com/course/react-the-complete-guide-incl-redux/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-sIRjAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmnkdwky0pm0o91m8bix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-sIRjAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmnkdwky0pm0o91m8bix.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/react-redux/"&gt;https://www.udemy.com/course/react-redux/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F2vNlAKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l22jxxv81kpzm9frq86w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2vNlAKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l22jxxv81kpzm9frq86w.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.coursera.org/specializations/full-stack-react"&gt;https://www.coursera.org/specializations/full-stack-react&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---MJ4HHcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg4andkbo68v6yls4vvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---MJ4HHcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg4andkbo68v6yls4vvb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Free Code Camp&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org/learn/front-end-libraries/"&gt;https://www.freecodecamp.org/learn/front-end-libraries/&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JlarV03---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vapqr9uvk13flxuh80x.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Top Courses To Learn MERN&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/amritanshu/top-courses-to-learn-mern-2i2g"&gt;https://dev.to/amritanshu/top-courses-to-learn-mern-2i2g&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-uctAqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pt77uukkdevoi4d9waj1.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Twitter&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/NewGenDeveloper"&gt;https://twitter.com/NewGenDeveloper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>EKS Cluster CONSOLE CREDENTIALS</title>
      <author>Vu Dao</author>
      <pubDate>Mon, 14 Jun 2021 14:53:34 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/eks-cluster-console-credentials-ded</link>
      <guid>https://dev.to/awscommunity-asean/eks-cluster-console-credentials-ded</guid>
      <description>&lt;h2&gt;
  &lt;a href="#oops-raw-error-you-must-be-logged-in-to-the-server-unauthorized-endraw-if-you-get-this-error-when-trying-to-run-raw-kubectl-endraw-commands-read-more"&gt;
  &lt;/a&gt;
  &lt;strong&gt;OOPS!!! &lt;code&gt;"error: You must be logged in to the server (Unauthorized)"&lt;/code&gt;&lt;/strong&gt; - If you get this error when trying to run &lt;code&gt;kubectl&lt;/code&gt; commands, Read more ⤵️⤵️⤵️
&lt;/h2&gt;



&lt;p&gt;&lt;strong&gt;- When an Amazon EKS cluster is created, the IAM entity (user or role) that creates the cluster is added to the Kubernetes RBAC authorization table as the administrator (with &lt;code&gt;system:masters&lt;/code&gt; permissions). Initially, only that IAM user can make calls to the Kubernetes API server using kubectl. So ensure that your console such as EC2 instance attached that user/role credential for further steps, otherwise, no way to use the &lt;code&gt;kubectl&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;- In this tutorial, we will introduce how to create an IAM entity that having the &lt;code&gt;system:master&lt;/code&gt; permissions on the existing EKS cluster, attaching this role to an EC2 instance and accessing to EKS cluster via kubectl installed on this instance.&lt;/strong&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---myXsCtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/eks-console-ctl/img/flow.png%3Fraw%3Dtrue"&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-this-document"&gt;
  &lt;/a&gt;
  What’s In This Document
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#-Authentication-and-authorization-in-Amazon-EKS"&gt;Authentication and authorization in Amazon EKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Check-aws-auth-ConfigMap-to-see-which-role-is-bind-with-the-cluster"&gt;Check aws-auth ConfigMap to see which role is bind with the cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Check-the-AWS-credentials-for-an-IAM-role-that's-attached-to-an-instance"&gt;Check the AWS credentials for an IAM role that's attached to an instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Create-kubeconfig-file-to-access-EKS-cluster"&gt;Create kubeconfig file to access EKS cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Allowing-a-user/role-or-instance-profile-call-API-to-EKS-cluster"&gt;Allowing a user/role or instance profile call API to EKS cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Pre-Requisite:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;EKS cluster&lt;/li&gt;
&lt;li&gt;IAM fully access&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#authentication-and-authorization-in-amazon-eks"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Authentication-and-authorization-in-Amazon-EKS"&gt;Authentication and authorization in Amazon EKS&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Explain in simple way, when you make an API call to EKS cluster through &lt;code&gt;kubectl&lt;/code&gt;, a token is generated using the IAM credentials that are returned with the &lt;code&gt;aws sts get-caller-identity&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;Amazon EKS uses that token authentication webhook to authenticate the request but it still relies on native Kubernetes RBAC for authorization.&lt;/li&gt;
&lt;li&gt;The crux of this integration between IAM and RBAC is the &lt;code&gt;aws-auth&lt;/code&gt; ConfigMap applied to the Amazon EKS cluster that provides the mappings between IAM principals (roles/users) and Kubernetes Subjects (Users/Groups).&lt;/li&gt;
&lt;li&gt;Ref: &lt;a href="https://aws.amazon.com/blogs/containers/kubernetes-rbac-and-iam-integration-in-amazon-eks-using-a-java-based-kubernetes-operator/"&gt;https://aws.amazon.com/blogs/containers/kubernetes-rbac-and-iam-integration-in-amazon-eks-using-a-java-based-kubernetes-operator/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGsMGqrO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/eks-console-ctl/img/RBAC-IAM.png%3Fraw%3Dtrue"&gt;
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#check-awsauth-configmap-to-see-which-role-is-bind-with-the-cluster"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Check-aws-auth-ConfigMap-to-see-which-role-is-bind-with-the-cluster"&gt;Check aws-auth ConfigMap to see which role is bind with the cluster&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;Following command will show that the role &lt;code&gt;role/eks-admin-role&lt;/code&gt; with proper IAM permissions is added to the Kubernetes RBAC authorization table as the administrator (with &lt;code&gt;system:masters&lt;/code&gt; permissions).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ec2-user@eks-ctl ~]$ kubectl describe configmap -n kube-system aws-auth
Name:         aws-auth
Namespace:    kube-system
Labels:       aws.cdk.eks/prune-c8c49db9cb02222a1111111db00d4db8236bxxxxxx=
Annotations:  kubectl.kubernetes.io/last-applied-configuration:
                {"apiVersion":"v1","data":{"mapAccounts":"[]","mapRoles":"[{\"rolearn\":\"arn:aws:iam::123456789012:role/eks-admin-role\",\"username\":\"

Data
====
mapAccounts:
---------
[]
mapRoles:
---------
[{"rolearn":"arn:aws:iam::123456789012:role/eks-admin-role","username":"arn:aws:iam::123456789012:role/eks-admin-role","groups":["system:masters"]},{"rolearn":"arn:aws:iam::123456789012:role/eks-worker-role","username":"system:node:{{EC2PrivateDNSName}}","groups":["system:bootstrappers","system:nodes"]}]
mapUsers:
---------
[]
Events:  &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now, if you have permission to attach that role to the EC2 instance or AWS cloud9, move to next step to create kubeConfig file&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-kubeconfig-file-to-access-eks-cluster"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Create-kubeconfig-file-to-access-EKS-cluster"&gt;Create kubeconfig file to access EKS cluster&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;What is Kubeconfig File - A kubeconfig file is a file used to configure access to Kubernetes when used in conjunction with the kubectl commandline tool (or other clients).&lt;/li&gt;
&lt;li&gt;How to generate kubeconfig file?
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ec2-user@eks-ctl ~]$ aws eks update-kubeconfig --name eks-cluster --region ap-northeast-2
Added new context arn:aws:eks:ap-northeast-2:123456789012:cluster/eks-cluster to /home/ec2-user/.kube/config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check content of the file &lt;code&gt;/home/ec2-user/.kube/config&lt;/code&gt; (or use command &lt;code&gt;kubectl config view --minify&lt;/code&gt;) and notice at the &lt;code&gt;exec args&lt;/code&gt;. When you use &lt;code&gt;kubectl&lt;/code&gt; to interact with Amazon EKS under the hood it uses the &lt;code&gt;aws eks get-token&lt;/code&gt; command to fetch an authentication token, which is passed along in the Authorization header of an HTTP request sent to the Kubernetes API server.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ec2-user@eks-ctl ~]$ kubectl config view --minify
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: &amp;lt;API server endpoint&amp;gt;
  name: arn:aws:eks:ap-northeast-2:123456789012:cluster/eks-cluster
contexts:
- context:
    cluster: arn:aws:eks:ap-northeast-2:123456789012:cluster/eks-cluster
    user: arn:aws:eks:ap-northeast-2:123456789012:cluster/eks-cluster
  name: arn:aws:eks:ap-northeast-2:123456789012:cluster/eks-cluster
current-context: arn:aws:eks:ap-northeast-2:123456789012:cluster/eks-cluster
kind: Config
preferences: {}
users:
- name: arn:aws:eks:ap-northeast-2:123456789012:cluster/eks-cluster
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1alpha1
      args:
      - --region
      - ap-northeast-2
      - eks
      - get-token
      - --cluster-name
      - eks-cluster
      command: aws
      env: null
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#allowing-a-userrole-or-instance-profile-call-api-to-eks-cluster"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Allowing-a-user/role-or-instance-profile-call-API-to-EKS-cluster"&gt;Allowing a user/role or instance profile call API to EKS cluster&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;p&gt;&lt;strong&gt;- To check the AWS credentials for an IAM role that's attached to an instance, run following command&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ec2-user@eks-ctl ~]$ curl http://169.254.169.254/latest/meta-data/iam/security-credentials/eks-admin-role
{
  "Code" : "Success",
  "LastUpdated" : "2021-06-12T06:23:32Z",
  "Type" : "AWS-HMAC",
  "AccessKeyId" : "&amp;lt;AWS_ACCESS_KEY&amp;gt;",
  "SecretAccessKey" : "&amp;lt;AWS_SECRET_KEY&amp;gt;",
  "Token" : "&amp;lt;THE_TOKEN",
  "Expiration" : "2021-06-12T12:38:22Z"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If running the preceding curl command returns a 404 error, check the following:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ export NO_PROXY=169.254.169.254
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;- If you have full IAM access you can add more usre/role to access the EKS cluster by update the &lt;code&gt;aws-auth&lt;/code&gt; ConfigMap&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;kubectl edit configmap aws-auth -n kube-system&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Add the IAM user to mapUsers here is &lt;code&gt;eks-test&lt;/code&gt; user (no need to add any permission for this user)
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  mapUsers: |
    - userarn: arn:aws:iam::123456789012:user/eks-test
      username: eks-test
      groups:
        - system:masters
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add the IAM role to mapRoles
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mapRoles: |
    - rolearn: arn:aws:iam::123456789012:role/testrole
      username: testrole
      groups:
        - system:masters
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;- Then update kubeConfig file again with that role or user&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For adding role&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws eks update-kubeconfig --name eks-cluster-name --region aws-region --role-arn arn:aws:iam::123456789012:role/testrole
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For adding user, no more option but need to update kubeConfile for using &lt;code&gt;--profile eks-test&lt;/code&gt; (you need to create this profile with AWS key and credential of that user)&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws eks update-kubeconfig --name eks-cluster-name --region aws-region
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user:
  exec:
    apiVersion: client.authentication.k8s.io/v1alpha1
    args:
    - --region
    - ap-northeast-2
    - eks
    - get-token
    - --cluster-name
    - eks-cluster
    - --profile
    - eks-test
    command: aws
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;- Verify&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ kubectl get node
NAME                                          STATUS   ROLES    AGE     VERSION
ip-10-0-0-0.ap-northeast-2.compute.internal   Ready    &amp;lt;none&amp;gt;   2d22h   v1.19.6-eks-49a6c0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;Setting up the console credential to control EKS cluster using cloud9 or EC2 (directly) is optional since mostly use CLI-driven&lt;/li&gt;
&lt;li&gt;But, if you’d like full access to your EKS cluster in the EKS console it is recommended.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="https://dev.to/vumdao"&gt;🌠 Blog&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://github.com/vumdao/aws-eks-the-hard-way/blob/master/eks-console-ctl"&gt;Github&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://stackoverflow.com/users/11430272/vumdao"&gt;stackoverflow&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/in/vu-dao-9280ab43/"&gt;Linkedin&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/groups/12488649/"&gt;Group&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.facebook.com/CloudOpz-104917804863956"&gt;Page&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://twitter.com/VuDao81124667"&gt;Twitter 🌠&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>aws</category>
      <category>eks</category>
      <category>k8s</category>
      <category>cloudopz</category>
    </item>
    <item>
      <title>Java - reduce redundant objects with Flyweight Design pattern</title>
      <author>Abhinav Pandey</author>
      <pubDate>Mon, 14 Jun 2021 14:49:26 +0000</pubDate>
      <link>https://dev.to/abh1navv/java-reduce-redundant-objects-with-flyweight-design-pattern-3b1f</link>
      <guid>https://dev.to/abh1navv/java-reduce-redundant-objects-with-flyweight-design-pattern-3b1f</guid>
      <description>&lt;p&gt;Object creation is the most fundamental operation in OOP. It would be hard to count the number of objects we create(knowingly or behind the scene) even in the most trivial of use cases. &lt;/p&gt;

&lt;p&gt;Each object is created on the heap and will take up some space until it is garbage collected. Long running programs will keep the heap occupied. Similarly, concurrently running threads will multiply the memory in use.&lt;/p&gt;

&lt;p&gt;Let's look at a simple example:&lt;br&gt;
I have an application which returns me a large number of data points to plot on a graph. The data point contains two informations -  the data and how the point looks on the graph&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataPoint&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DataPoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each Point in turn has a shape and a color:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So lets create a consumer which will create some data points for me.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;        &lt;span class="nc"&gt;DataPoint&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DataPoint&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;N&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;random&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// or whatever data source&lt;/span&gt;
            &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Green"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Circle"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Red"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Cross"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DataPoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;   

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks simple and works fine. Let's look at the amount of memory we used while creating this DataPoint array.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;DataPoint object -&amp;gt; 2 references + Padding =&amp;gt; ~24 bytes.&lt;/li&gt;
&lt;li&gt;In turn, each DataPoint object has a Point object which takes up memory of its own -&amp;gt; 2 references + the string pool literals(negligible) + Padding =&amp;gt; ~24 bytes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So the total memory used by our array becomes (24+24)*N = 48*N bytes. Not much? - Well, depends on N and depends on the number of concurrent threads. For N = 1000 this means 48 KBs. Add 100 threads to it =&amp;gt; 4.8 MBs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h3&gt;

&lt;p&gt;There are practically only two variations of points - &lt;em&gt;Green circle&lt;/em&gt; and &lt;em&gt;Red cross&lt;/em&gt; but we created N Point objects. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution-flyweights"&gt;
  &lt;/a&gt;
  The solution - Flyweights
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3iTWKM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xuxj3o42ia2uir4dncky.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3iTWKM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xuxj3o42ia2uir4dncky.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The principle is simple - avoid redundant values in objects. To define our solution, lets define two terms:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Repeating properties&lt;/em&gt; - The properties that are likely to remain the same for many instances of the object.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Unique properties&lt;/em&gt; - Properties that change with every instance of the object.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In our scenario each half of the data point objects contain the same value for Point (Probabilistically).&lt;/p&gt;

&lt;p&gt;The flyweight design pattern suggests that parts of the object which are likely to repeat among large number of objects should be shared/reused among them rather than being repeated. Some important use cases when we should consider using flyweights:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The repeating properties are heavy - The Point object is heavy in this case. &lt;/li&gt;
&lt;li&gt;There are a limited number of values that the repeating properties can take. - One example is the Boolean class. It can take only two values true or false.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are many ways to implement this. Let's look at a few ways to implement the Flyweight pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-1-static-factories"&gt;
  &lt;/a&gt;
  Method 1 - static factories
&lt;/h3&gt;

&lt;p&gt;We expose a static factory method for each of the two possible instances of Point object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="no"&gt;GREEN_CIRCLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Green"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Circle"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="no"&gt;RED_CROSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Red"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Cross"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="nf"&gt;getGreenCircle&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;GREEN_CIRCLE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="nf"&gt;getRedCross&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;RED_CROSS&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Named methods which describe the type of object being returned.&lt;/li&gt;
&lt;li&gt;Private static instances - immutable and only one copy.&lt;/li&gt;
&lt;li&gt;Private constructor - to disallow object creation from outside.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#method-2-enums"&gt;
  &lt;/a&gt;
  Method 2 - Enums
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="no"&gt;GREEN_CIRCLE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Green"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Circle"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="no"&gt;RED_CROSS&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Red"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Cross"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Constructor is implicitly private.&lt;/li&gt;
&lt;li&gt;An enum conveys the purpose clearly that only a few variations are possible.&lt;/li&gt;
&lt;li&gt;Immutable data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both static factories and enums will create only 2 copies of Point object no matter how many times they are required.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-3-caching"&gt;
  &lt;/a&gt;
  Method 3 - Caching
&lt;/h3&gt;

&lt;p&gt;The above two examples work well when all variations are already known. Another scenario can be when one of the fields can take more values than anticipated. However, the other values of the object do not change unless that varying field changes.&lt;/p&gt;

&lt;p&gt;Let's take a different example in this case. We are creating a Product object. You know that for one product id only one value of a Product object is possible. Creating the Product object again is heavy as you need to set a lot of properties. It is better to keep a copy of the product cached so that object creation is not required twice for a single product. Let's look at the code for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductCache&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;productMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="nf"&gt;getProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;productId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productId&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;productMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;productId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/*properties*/&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we create a Product object, we keep it cached into the map against its product id so that we never initialize same the product again.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed this introduction to Flyweight pattern and find ways to implement it in your applications.&lt;br&gt;
Thanks for reading.&lt;/p&gt;

</description>
      <category>java</category>
      <category>oop</category>
      <category>codequality</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
