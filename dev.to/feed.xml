<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My blockchain üßë‚ÄçüöÄ</title>
      <author>ItsTheGuy</author>
      <pubDate>Mon, 12 Jul 2021 18:02:22 +0000</pubDate>
      <link>https://dev.to/itstheguy/my-blockchain-257c</link>
      <guid>https://dev.to/itstheguy/my-blockchain-257c</guid>
      <description>&lt;p&gt;Hello, what‚Äôs going on? Before you start reading more, I have to thank you about reading this post, this is my first one, and this makes me feel nervous üòØ&lt;/p&gt;

&lt;p&gt;4 months ago, I was bored in the free times of my free times, so I started reading articles about blockchain, and I found very interesting that concept. After finishing reading all the pages of Wikipedia related to blockchain, I started to feel bored again, so I decided to develop my own blockchain as experiment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-purpose"&gt;
  &lt;/a&gt;
  My purpose üöÄ
&lt;/h2&gt;

&lt;p&gt;I think that Singular (that‚Äôs the blockchain‚Äôs name) is a really cool project, but aside of that, it has a few purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make me learn more about blockchain technology and decentralized networks (I haven‚Äôt still implemented the distributed network because I‚Äôm on research of the best one! You can suggest one at the project‚Äôs discussions if you want!)&lt;/li&gt;
&lt;li&gt;The second one is to share my ideas, and contribute to the open source archive of the humanity üëΩ&lt;/li&gt;
&lt;li&gt;The third one is because is really cool üßë‚Äçüíª&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I‚Äôm so excited about it, and I hope that Singular could help other people find inspiration.&lt;br&gt;
By the way you could find &lt;a href="https://github.com/ItsTheGuy/Singular"&gt;Singular&lt;/a&gt; in my GitHub profile üêô&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Ads kill performance and Ux</title>
      <author>Julien Maury</author>
      <pubDate>Mon, 12 Jul 2021 17:40:09 +0000</pubDate>
      <link>https://dev.to/jmau111/ads-kill-performance-and-ux-32mb</link>
      <guid>https://dev.to/jmau111/ads-kill-performance-and-ux-32mb</guid>
      <description>&lt;p&gt;I've been working with ads like any web/app/web app developer. I've seen how much it can harm performance and User experience, and I wonder where big companies are on this point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;Privacy is such a big issue, but let's skip it here. I'm considering only performance and User experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-said-ads"&gt;
  &lt;/a&gt;
  You said Ads?
&lt;/h2&gt;

&lt;p&gt;By adding some third-party scripts to your website, you allow other brands to use your traffic for advertising in exchange for money.&lt;/p&gt;

&lt;p&gt;It's not uncommon to find ads in various areas: top, side, bottom, interstitial, skin ads, etc.&lt;/p&gt;

&lt;p&gt;It usually consists of clickable images, animated or not. It can also be a video.&lt;/p&gt;

&lt;p&gt;Google is a major actor with worldwide services such as AdSense, Admanager, or Google Tag Manager. They are ultra-dominant in this business.&lt;/p&gt;

&lt;p&gt;I know it's a bit more complex than that, but that should give an overview.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#buzzkill"&gt;
  &lt;/a&gt;
  Buzzkill
&lt;/h2&gt;

&lt;p&gt;Ads are part of the business. The problem is the current solutions.&lt;/p&gt;

&lt;p&gt;Even if you have a robust architecture, advanced frontend optimizations, static cache, and other performance leverage, ads will probably kill them all, loading tones of external js, unoptimized assets, and sometimes worse.&lt;/p&gt;

&lt;p&gt;It's not uncommon to open a website and get more ads than valuable content. Some websites even hide content if you have &lt;a href="https://adblockplus.org/"&gt;adblock&lt;/a&gt; enabled!&lt;/p&gt;

&lt;p&gt;When you open the network tab in DevTools, you see many external requests and kilobytes of JavaScript. In most cases, it harms the scroll experience, and you lose focus. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wheres-google"&gt;
  &lt;/a&gt;
  Where's Google?
&lt;/h2&gt;

&lt;p&gt;Shockingly, Google does not push better practices for ads, while the same company deeply enforces perf requirements for websites and apps, for example, with its core vitals.&lt;/p&gt;

&lt;p&gt;Using Google Tag Manager has a significant impact on performance. Of course, it may vary from one website to another, depending on the usage. Still, it encourages non-technical people to copy/paste scripts that automatically load the website, which can quickly turn nasty.&lt;/p&gt;

&lt;p&gt;I sometimes get the impression this business is the &lt;em&gt;Wild West&lt;/em&gt; where everything is permitted, including the worst practices. At the same time, websites and apps must meet ever-stricter criteria to get a decent score in web vitals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope it sounds like a rant cause it is. If big companies want to raise the general quality, that's great, but please don't neglect ads.&lt;/p&gt;

&lt;p&gt;The COVID-19 Pandemic has accelerated the shift to online spending. A significant part of the global economy is on Internet, and while advertising is a thriving business, it's a colossus with feet of clay.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@carlesrgm?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Carles Rabada&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fat?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>performance</category>
      <category>ux</category>
    </item>
    <item>
      <title>Linear Search in JavaScript | Must-Know Beginner Algorithms</title>
      <author>Danny Adams</author>
      <pubDate>Mon, 12 Jul 2021 17:26:25 +0000</pubDate>
      <link>https://dev.to/doabledanny/linear-search-in-javascript-must-know-beginner-algorithms-4gbp</link>
      <guid>https://dev.to/doabledanny/linear-search-in-javascript-must-know-beginner-algorithms-4gbp</guid>
      <description>&lt;p&gt;This article was originally posted on &lt;a href="https://www.doabledanny.com/linear-search-in-javascript"&gt;DoableDanny.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Linear search is a very common searching algorithm; It is implemented under the hood in the JavaScript built-in methods &lt;code&gt;indexOf()&lt;/code&gt;, &lt;code&gt;includes()&lt;/code&gt;, &lt;code&gt;find()&lt;/code&gt;, and &lt;code&gt;findIndex()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is also the most straight-forward searching algorithm: it simply loops over each element in an array and stops if that element equals our target value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linear-search-steps"&gt;
  &lt;/a&gt;
  Linear Search steps
&lt;/h2&gt;

&lt;p&gt;I think that with this algorithm, the gif below explains it all. But here are the steps in words:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Linear search will accept an array and a target value.&lt;/li&gt;
&lt;li&gt;Start searching from the beginning of the array.&lt;/li&gt;
&lt;li&gt;Check if that value equals the target:

&lt;ul&gt;
&lt;li&gt;If so, stop and return that values index.&lt;/li&gt;
&lt;li&gt;If not, move onto the next element.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repeat step 3 until all elements are checked. If target not found, return -1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1NkHtaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucuj7xc3u0m69xeuglp0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1NkHtaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucuj7xc3u0m69xeuglp0.gif" alt="Linear search steps gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source of the above gif: &lt;a href="https://bournetocode.com/projects/GCSE_Computing_Fundamentals/pages/3-1-3-searc_alg.html"&gt;bournetocode.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And if you ever find yourself looking for a specific length of French fry:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVPP_Ldc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0h4lmu4k6lpb3cniqpw3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVPP_Ldc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0h4lmu4k6lpb3cniqpw3.gif" alt="Linear searching for a french fry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linear-search-in-javascript"&gt;
  &lt;/a&gt;
  Linear Search in JavaScript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// -1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simply loop over each element in the array, and check to see if the current element is equal to the target; if so, we return that elements index. If the target isn‚Äôt found, then we simply return -1 at the end of the function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Time complexity of Linear Search
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#bestcase-time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Best-case time complexity of Linear Search
&lt;/h3&gt;

&lt;p&gt;If our target value is at the beginning of the array, the algorithm will always run at constant time, O(1). The algorithm will always only have to perform one comparison, no matter what the size of the array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#worstcase-time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Worst-case time complexity of Linear Search
&lt;/h3&gt;

&lt;p&gt;If our target is the last element in the array, then the algorithm will have to make n comparisons (n being the length of the input array). This means that the &lt;a href="https://www.doabledanny.com/big-o-notation-in-javascript"&gt;Big O notation&lt;/a&gt; of Linear Search is Big O(n) ‚Äì linear time complexity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#averagecase-time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Average-case time complexity of Linear Search
&lt;/h3&gt;

&lt;p&gt;If our target element is somewhere in the middle of the array, then the time complexity will be approximately O(n/2), which simplifies to O(n) ‚Äì linear time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#space-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Space complexity of Linear Search
&lt;/h2&gt;

&lt;p&gt;Linear Search has a space complexity of O(1) ‚Äì constant space. It uses no auxiliary data structures to find the target value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance-summary-table"&gt;
  &lt;/a&gt;
  Performance summary table
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fEMSjT0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u36lxour4eynkvxh0efy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEMSjT0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u36lxour4eynkvxh0efy.PNG" alt="time and space complexity of linear search summary table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-linear-search"&gt;
  &lt;/a&gt;
  When to use Linear Search
&lt;/h2&gt;

&lt;p&gt;Linear search is the best we can do when searching in unsorted arrays, such as [2, 3, 1].&lt;/p&gt;

&lt;p&gt;Whilst there are searching algorithms that can perform faster, such as &lt;a href="https://www.doabledanny.com/binary-search-javascript"&gt;Binary Search&lt;/a&gt;, they can only search through sorted arrays.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, subscribe to &lt;a href="https://www.doabledanny.com/newsletter-signup/"&gt;my newsletter&lt;/a&gt;. I write on topics such as algorithms, UI design and freelancing. I‚Äôll email you once per week with my latest article and bonus tips and tricks. I like to dive deeply into topics to give you all the information you need in one place!&lt;/p&gt;

&lt;p&gt;Also, check out and subscribe to my &lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;coding YouTube Channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And if you want to further your knowledge of algorithms and data structures, check out: &lt;a href="https://ad.admitad.com/g/05dgete24sfa55577a70b3e3b7aadc/?ulp=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjs-algorithms-and-data-structures-masterclass%2F"&gt;JavaScript Algorithms and Data Structures Masterclass by Colt Steele&lt;/a&gt;. It‚Äôs the best Udemy course I‚Äôve ever taken üëå.&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;/p&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>N√£o corra. Pode doer.</title>
      <author>J√∫lio Guedes</author>
      <pubDate>Mon, 12 Jul 2021 17:02:58 +0000</pubDate>
      <link>https://dev.to/opendevufcg/nao-corra-pode-doer-1165</link>
      <guid>https://dev.to/opendevufcg/nao-corra-pode-doer-1165</guid>
      <description>&lt;p&gt;N√≥s temos um grande potencial dentro de cada um de n√≥s, e muitas vezes escolhemos o curso superior tentando atingir o m√°ximo que somos capazes, e tamb√©m provar que somos. Experimentamos novas √°reas, aprendemos coisas novas, nos dispomos como volunt√°rios, pesquisamos, desenvolvemos e analisamos coisas.&lt;/p&gt;

&lt;p&gt;√â engra√ßado perceber que tudo isso acontece naquele min√∫sculo espa√ßo, entre n√≥s e o computador. N√≥s lemos, tentamos, assistimos aulas, perguntamos e, acima de tudo, nos esfor√ßamos. At√© conseguirmos. Quantas vezes n√£o repetimos esse ciclo num √∫nico dia?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L4Icech3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/STroE7bTBLTzxQUrZc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L4Icech3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/STroE7bTBLTzxQUrZc/giphy.gif" alt="Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Durante a jornada da gradua√ß√£o, enfrentamos problemas, e come√ßamos a buscar liberdades e al√≠vios. Problemas financeiros, com a fam√≠lia, com amigos, de sa√∫de, entre tantos outros. Alguns veem no estudo e no trabalho uma fuga, j√° que essa realidade n√£o √© confrontada no ambiente profissional ou universit√°rio. Urge a necessidade de se formar, como primeiro passo pra liberta√ß√£o. &lt;/p&gt;

&lt;p&gt;Mas para se formar bem, √© preciso experi√™ncia, afinal, que empresa legal e que pode pagar um sal√°rio bacana iria contratar um rec√©m-formado com curr√≠culo em branco? Ainda nos primeiros per√≠odos do curso, surge a necessidade de preencher o curr√≠culo com monitorias, pesquisas, projetos e est√°gios. Mesmo que, a princ√≠pio, sejam volunt√°rios. Tudo isso sem baixar as notas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bJfleoDs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/www.incubadoraliberato.com.br/wp-content/uploads/2017/05/writing-in-notebook.jpg%3Fssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJfleoDs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/www.incubadoraliberato.com.br/wp-content/uploads/2017/05/writing-in-notebook.jpg%3Fssl%3D1" alt="Estudando"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A cada dia que passa, enxergamos o quanto √© dif√≠cil. Aos poucos se vai abdicando pequenas coisas: assistir um filme com a fam√≠lia, fazer as refei√ß√µes no mesmo hor√°rio, encontrar com os amigos, conversar com eles sobre coisas al√©m da universidade. Seus hobbies se transformam em estudos, j√° que voc√™ ainda n√£o conseguiu o t√£o sonhado est√°gio que vai garantir algumas portas abertas depois. A cada m√™s ou semestre, novas coisas come√ßam a deixadas de lado: dormir bem, praticar exerc√≠cios ou esportes, a rela√ß√£o com seus amigos, e at√© um relacionamento.&lt;/p&gt;

&lt;p&gt;√â claro que nessa jornada voc√™ conseguiu muita coisa, afinal, nenhum esfor√ßo grande assim passa despercebido pelo mundo, principalmente quando voc√™ quer ser notado. Voc√™ consegue oportunidades em est√°gios, projetos ou pesquisas, e √© exemplar em cada um deles. Ent√£o, come√ßa a se questionar porqu√™ n√£o √© notado por aqueles que voc√™ queria. E aposta mais coisas nessa busca.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O13xfOBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn2.hubspot.net/hubfs/419889/blue%2520light%2520computer%2520night%2520negative%2520effects.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O13xfOBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn2.hubspot.net/hubfs/419889/blue%2520light%2520computer%2520night%2520negative%2520effects.jpg" alt="Computador de noite"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;N√£o √© mais um problema trabalhar e estudar √† noite, nos finais de semana e feriados. √â o que precisa ser feito. A carga √© grande demais pra n√£o faz√™-lo. E, diminuindo a carga, voc√™ sabe que n√£o chegar√° onde quer.&lt;/p&gt;

&lt;p&gt;Cada vez √© um fator a mais, um estresse a mais, que surge de uma oportunidade boa demais pra negar. E aceitamos a vida assim. Por um ou dois anos, vai valer a pena esse sacrif√≠cio. √â um investimento no futuro.&lt;/p&gt;

&lt;p&gt;As decep√ß√µes come√ßam a aparecer, suas expectativas de ser notado continuam n√£o se cumprindo a cada dia, e essa carga de trabalho t√£o pesada se transforma no seu dia. Voc√™ acorda e dorme para cumprir o que acha que os outros esperam de voc√™, adiando a esperan√ßa de que vai dar certo. Cada vez mais voc√™ acumula rejei√ß√µes nos est√°gios dos sonhos. N√£o desiste de lutar. E meses se passam.&lt;/p&gt;

&lt;p&gt;At√© que voc√™ quebra.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqL69rFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.phocuswire.com/uploadedImages/Articles/Opinion/2019/September/broken-marketing-funnel.jpg%3Forigwidth%3D800%26origheight%3D400%26origmode%3Dcrop%26Anchor%3DMiddleCenter%26width%3D640%26height%3D480%26scale%3Dboth%26mode%3Dcrop" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqL69rFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.phocuswire.com/uploadedImages/Articles/Opinion/2019/September/broken-marketing-funnel.jpg%3Forigwidth%3D800%26origheight%3D400%26origmode%3Dcrop%26Anchor%3DMiddleCenter%26width%3D640%26height%3D480%26scale%3Dboth%26mode%3Dcrop" alt="Quebrado"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voc√™ est√° cansado. Olha para o lado e seus amigos, que antes se divertiam tanto juntos, n√£o est√£o diariamente ao seu lado. N√£o est√£o ao seu lado h√° algum tempo, e voc√™ sequer tinha notado. Voc√™ n√£o est√° satisfeito com seu corpo, sua apar√™ncia. Pensa em fazer outra coisa pra desestressar, mas o que fazer? Voc√™ deixou seus hobbies pra tr√°s h√° muito tempo.&lt;/p&gt;

&lt;p&gt;Estar no computador come√ßa a causar dor, e aos poucos voc√™ come√ßa a abdicar de algumas das obriga√ß√µes. Mesmo sem ter alcan√ßado nada do que imaginava ser poss√≠vel. Sair de um projeto, n√£o se inscrever em mais uma monitoria. Surge o medo de se formar e estar desempregado, seu pior pesadelo.&lt;/p&gt;

&lt;p&gt;Mas existe a possibilidade de continuar na universidade, numa p√≥s gradua√ß√£o, e extender esse tempo de se decidir. Com suas notas e seus esfor√ßos, deve ser poss√≠vel. Mas foi pra isso que voc√™ lutou tanto? Pra continuar no mesmo lugar que voc√™ est√°? Sabendo que uma vez ouviu que "a p√≥s-gradua√ß√£o √© onde ficam aqueles que n√£o conseguem um emprego"?&lt;/p&gt;

&lt;p&gt;Voc√™ sabe que isso n√£o √© verdade. Mas voc√™ correu demais. Esqueceu de aproveitar a gradua√ß√£o. Viver o dia a dia de um projeto, de uma monitoria. Divertir-se com seus amigos, ao inv√©s de tentar agarrar o mundo com seus bra√ßos. Esqueceu de cursar uma disciplina e conversar com o professor ap√≥s a aula, sobre como aquele conte√∫do se aplica num problema, mesmo que voc√™ n√£o fosse faz√™-lo. Sua curiosidade e seu interesse sumiram, pois n√£o havia mais tempo para novas coisas. &lt;/p&gt;

&lt;p&gt;Aos poucos, voc√™ foi murchando. E, s√≥ agora, percebeu que estava murcho.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6AZG9oO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/4683/39355517851_0353a16705_b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6AZG9oO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/4683/39355517851_0353a16705_b.jpg" alt="Flor murcha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;N√£o √© poss√≠vel voltar no tempo e reparar tudo, voc√™ sabe muito bem. Mas sempre √© poss√≠vel reconsiderar o que est√° fazendo agora, ponderar melhor e entender suas prioridades. Sa√∫de, tempo, amigos, rir, sorrir, brincar. Assistir um filme ruim s√≥ pra dizer que √© ruim mesmo, e ent√£o rir com seus amigos por voc√™s escolhido passar por isso. Se reaproximar daqueles que importam, das coisas que te faziam sorrir.&lt;/p&gt;

&lt;p&gt;A rela√ß√£o com o seu trabalho e seus estudos precisa ser saud√°vel pra dar certo, afinal, voc√™ escolheu tudo isso por gostar. Mas sua vida n√£o se resume a um emprego, um t√≠tulo, um trabalho. Escolher esse caminho pode te isolar. Pode doer.&lt;/p&gt;

&lt;p&gt;Pare, pense, reflita.&lt;br&gt;
Sempre.&lt;br&gt;
Para s√≥ ent√£o saber como continuar.&lt;/p&gt;

</description>
      <category>ptbr</category>
      <category>motivation</category>
      <category>career</category>
    </item>
    <item>
      <title>Automate your workflow with Microsoft Power Automate</title>
      <author>arnu515</author>
      <pubDate>Mon, 12 Jul 2021 16:50:41 +0000</pubDate>
      <link>https://dev.to/arnu515/automate-your-workflow-with-microsoft-power-automate-3m7i</link>
      <guid>https://dev.to/arnu515/automate-your-workflow-with-microsoft-power-automate-3m7i</guid>
      <description>&lt;p&gt;The most tedious part of development is doing the same tasks over and over again. Don't you feel bored having to mention someone on Slack when they get assigned a Github Issue, or having to send an email to your newsletter when you post a tweet.&lt;/p&gt;

&lt;p&gt;Sure, you can setup integrations, webhooks and CI jobs to do these tasks, but they're often tedious, require signups to hundreds of services, and all of them might not have the same steps.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://flow.microsoft.com"&gt;Microsoft Power Automate&lt;/a&gt;, also called Microsoft Flow, which allows you to automate almost everything in your tech stack. Want to send a message on Slack or Teams, sure, want to SMS a number with Twilio, you can do that too. It also has many listeners, like when a new Tweet is posted, or when a Github Issue is assigned to you.&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll take a look at how we can automate a few common tasks with Microsoft Flow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An Office365 Microsoft Account&lt;/li&gt;
&lt;li&gt;Accounts for the services we'll be automating (Github, Slack, etc).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#flow-1-mail-me-when-a-github-issue-is-assigned-to-me"&gt;
  &lt;/a&gt;
  Flow 1 - Mail me when a Github Issue is assigned to me
&lt;/h2&gt;

&lt;p&gt;First, create a new Automated Cloud flow and give it a name.&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;When an issue is assigned to me&lt;/code&gt; trigger from Github. You will now be asked to sign in to Github, which you should do.&lt;/p&gt;

&lt;p&gt;Next, add the &lt;code&gt;Mail&lt;/code&gt; action, which uses Sendgrid under the hood.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ0q027Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/XbgBN01/Screenshot-from-2021-07-09-14-48-42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ0q027Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/XbgBN01/Screenshot-from-2021-07-09-14-48-42.png" alt="How your flow looks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can notice that I've added some dynamic elements that were provided to me by the Github Trigger.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can add more things to your flow, for example, add an item on Microsoft Todo, create a Trello card, or message yourself on Slack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CjgHiX62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/g4DGNVs/Screenshot-from-2021-07-09-14-53-15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CjgHiX62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/g4DGNVs/Screenshot-from-2021-07-09-14-53-15.png" alt="Added a Todo action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Save&lt;/code&gt; when done, and you will now be emailed whenever an issue's been assigned to you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flow-2-post-your-websites-status-to-your-twitter-everyday-at-6-am"&gt;
  &lt;/a&gt;
  Flow 2 - Post your website's status to your Twitter everyday at 6 AM
&lt;/h2&gt;

&lt;p&gt;Create a Scheduled Cloud Flow, since this event is based on time.&lt;/p&gt;

&lt;p&gt;Make sure the date is set to this date, and the time is set to &lt;code&gt;6:00 AM&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also set the task to repeat every 1 day. See the below image if you get confused.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CHzopPVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0Bf8qqL/Screenshot-from-2021-07-09-14-58-28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHzopPVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0Bf8qqL/Screenshot-from-2021-07-09-14-58-28.png" alt="Flow creation dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add a HTTP action that'll query your website's status page. My website uses Cachet to display its status, so I'll tailor my flow to Cachet's API response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9cxFSuPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Lbm4ZML.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9cxFSuPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Lbm4ZML.png" alt="HTTP action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you need to parse the data down to access the &lt;code&gt;status_name&lt;/code&gt; field in the JSON response. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwA5XZrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PwNrtPK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwA5XZrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PwNrtPK.png" alt="Data actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, you can tweet out the status of the website. You'll need to sign in to Twitter for this flow to work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1dvX25Ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HujqhpF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1dvX25Ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HujqhpF.png" alt="Tweet action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Save&lt;/code&gt; when done, and now, at 6 AM daily, your followers will be notified of your website's status.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;See how easy it is to automate the small things? The best part is that Microsoft Flow is included with the Office365 subscription, so along with Excel, Word and PowerPoint, you also get this monster of an automation tool that really, nobody cares about! So go ahead and share this article with your friends, so they can also use this wonderful tool.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>azure</category>
      <category>automation</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How To Structure a Massive Vuex Store for a Production App</title>
      <author>Domagoj Vidovic</author>
      <pubDate>Mon, 12 Jul 2021 16:47:22 +0000</pubDate>
      <link>https://dev.to/domagojvidovic/how-to-structure-a-massive-vuex-store-for-a-production-app-97a</link>
      <guid>https://dev.to/domagojvidovic/how-to-structure-a-massive-vuex-store-for-a-production-app-97a</guid>
      <description>&lt;p&gt;When looking at Vuex tutorials, you can see most of them are quite simple.&lt;/p&gt;

&lt;p&gt;The logic is explained well, but scalability suffers. How will this work in my production app?&lt;/p&gt;

&lt;p&gt;Here‚Äôs a simple store example from &lt;a href="https://vuex.vuejs.org/guide/#the-simplest-store"&gt;Vuex official docs&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
A simple store





&lt;p&gt;There‚Äôs no need to explain this. I assume that you already have some Vue and Vuex knowledge prior to this article.&lt;/p&gt;

&lt;p&gt;My goal is not to explain what a store, state, or mutations are.&lt;/p&gt;

&lt;p&gt;Instead, I want to show you a massive store with 1,000+ state attributes, mutations, actions, and getters.&lt;/p&gt;

&lt;p&gt;I want to teach you how to structure the store for the best maintainability, readability, and reusability.&lt;/p&gt;

&lt;p&gt;It can have 100,000+ attributes. It would still be clear.&lt;/p&gt;

&lt;p&gt;Let‚Äôs dive in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meet-modules"&gt;
  &lt;/a&gt;
  Meet Modules
&lt;/h2&gt;

&lt;p&gt;As we already said, keeping everything in one file will create a mess. You don‚Äôt want a 50,000+ LOC file. It‚Äôs the same as keeping your app in one component.&lt;/p&gt;

&lt;p&gt;Vuex helps us here by dividing the store into modules.&lt;/p&gt;

&lt;p&gt;For the purpose of this example, I will create a store with two modules. Note that the process is the same for 100+ modules, as well as 100+ actions, getters, and mutations within every module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;namespaced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({}),&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;organisationModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;namespaced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({}),&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;VueX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;organisation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;organisationModule&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; `userModule`'s state&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;organisation&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; `organisationModule`'s state&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Updated store







&lt;p&gt;The &lt;code&gt;namespaced&lt;/code&gt; attribute is incredibly important here. Without it, actions, mutations, and getters would still be registered at the global namespace.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;namespaced&lt;/code&gt; attribute set to true, we divide actions, mutations, and getters into the modules as well.&lt;/p&gt;

&lt;p&gt;This is really helpful if you have two actions with the same name. Having them in a global namespace would create clashes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;namespaced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({}),&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER_LOCATION&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="c1"&gt;// correct ‚úÖ&lt;/span&gt;

&lt;span class="nx"&gt;stote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="c1"&gt;// wrong ‚ùå&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Namespaced module







&lt;p&gt;As you can see, the module is completely ‚Äúlocal‚Äù right now. We can access it only through the user object on the state.&lt;/p&gt;

&lt;p&gt;Exactly what we want for our massive application.&lt;/p&gt;




&lt;p&gt;Cool, now we have a store divided into modules!&lt;/p&gt;

&lt;p&gt;However, I don‚Äôt like the hardcoded strings for actions. It‚Äôs definitely not maintainable. Let‚Äôs address this issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-to-save-you-from-headaches"&gt;
  &lt;/a&gt;
  Types To Save You From Headaches
&lt;/h2&gt;

&lt;p&gt;We don‚Äôt just want to access every property from every module in every file. That sentence sounds like hell.&lt;/p&gt;

&lt;p&gt;We want to import them first. Then use &lt;code&gt;mapGetters&lt;/code&gt;, &lt;code&gt;mapActions&lt;/code&gt;, or &lt;code&gt;mapMutations&lt;/code&gt; to achieve that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// userModule.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SET_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER_LOCATION&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;namespaced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({}),&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;SET_USER&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// vue file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mapActions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SET_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./userModule.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapActions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SET_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;setUserLocation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Access actions with mapActions







&lt;p&gt;This gives you a clear view of store attributes used by your Vue file.&lt;/p&gt;

&lt;p&gt;But that‚Äôs not enough. Everything is still in one file. Let‚Äôs see what we can do to scale it properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h2&gt;

&lt;p&gt;Ideally, we want to split modules into different folders. Within those modules, we want to split their mutations, actions, getters, state attributes, and types across different files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vHbc-1vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jumfdh6gb3wedgtg8rrk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vHbc-1vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jumfdh6gb3wedgtg8rrk.png" alt="The desired folder structure"&gt;&lt;/a&gt;&lt;/p&gt;
The desired folder structure





&lt;p&gt;Folder &lt;code&gt;store&lt;/code&gt; will be created in the root folder of our project.&lt;/p&gt;

&lt;p&gt;It will contain two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;index.js&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;modules&lt;/code&gt; folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before explaining the &lt;code&gt;index.js&lt;/code&gt; file, let‚Äôs see how we divide a single module. Let‚Äôs check the &lt;code&gt;user&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;All of its actions, mutations, and getters should be listed in the &lt;code&gt;types.js&lt;/code&gt; file. So, something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// actions&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SET_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER_LOCATION&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// mutations&lt;/span&gt;

&lt;span class="c1"&gt;// getters&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
store/modules/user/types.js







&lt;p&gt;We‚Äôll have a clear view by importing those consts every time we want to use them.&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at the actions now. We want to move them to the &lt;code&gt;actions.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To do so, we only need to copy the &lt;code&gt;actions&lt;/code&gt; object within the module and &lt;code&gt;export default&lt;/code&gt; it, while importing the types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SET_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;SET_USER&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
store/modules/user/actions.js







&lt;p&gt;We will do the same thing for mutations and getters. The state attributes will remain in &lt;code&gt;index.js&lt;/code&gt; (within the user module folder):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./actions.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;mutations&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./mutations.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getters&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./getters.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;namespaced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;getters&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
store/modules/user/index.js







&lt;p&gt;Now we have all of our modules divided into multiple files.&lt;/p&gt;

&lt;p&gt;The one thing remaining is to link all those modules in the &lt;code&gt;index.js&lt;/code&gt; file within the &lt;code&gt;store&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Modules import&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;UserModule&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;modules/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;OrganisationModule&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;modules/organisation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mutations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;organisation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;organisationModule&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;modules&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
store/index.js







&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;By using this architecture, we had zero problems with scalability in our massive production app.&lt;/p&gt;

&lt;p&gt;Everything is so easy to find.&lt;/p&gt;

&lt;p&gt;We know exactly where all the actions are triggered.&lt;/p&gt;

&lt;p&gt;The system is highly maintainable.&lt;/p&gt;

&lt;p&gt;If you have any recommendations for the improvements, please let me know. I would love to hear your opinion.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Welcome to TypeScript In 6 mins</title>
      <author>Kinanee Samson</author>
      <pubDate>Mon, 12 Jul 2021 16:30:22 +0000</pubDate>
      <link>https://dev.to/kalashin1/welcome-to-typescript-in-6-mins-47g6</link>
      <guid>https://dev.to/kalashin1/welcome-to-typescript-in-6-mins-47g6</guid>
      <description>&lt;p&gt;TypeScript, a superset of JavaScript that is loaded with superpowers how many times you wrote something only for you to have a deep to find bug because a variable that was supposed to be a string actually stores a number? TypeScript is a useful tool for avoiding bugs like this, if you were actually working with TypeScript this kind of bug would have been discovered before runtime. But TypeScript provides much more than just this. &lt;/p&gt;

&lt;p&gt;TypeScript also allows us to use cool features of JavaScript that is not available on vanilla JavaScript. How??? TypeScript being a super set of JavaScript actually compiles down to JavaScript, it is the TypeScript compiler that gives us all of it's cool features. The TypeScript compiler itself is written in TypeScript and compiled down to JavaScript. &lt;/p&gt;

&lt;p&gt;This should give you a basic idea of how important TypeScript can be for the developers. This said, it doesn't mean that using TypeScript is all rosy and doesn't come with any trade offs, however you will find out that using TypeScript has many benefits and it outweighs any potential drawbacks you could encounter while using it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Ensure that you have node js installed on your machine first if not head to &lt;a href="https://nodejs.org"&gt;nodejs&lt;/a&gt; website and get the latest version. Open up an empty terminal session and install TypeScript by running &lt;code&gt;npm i typescript -g&lt;/code&gt; to install the typeScript compiler. Note this installs it globally on our machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is TypeScript?
&lt;/h3&gt;

&lt;p&gt;The docs say that "TypeScript is an open-source language which builds on JavaScript, one of the world's most used tools, by adding static type definitions.". Don't let this fool you, this simple aspect of TypeScript is arguably one of it's greatest advantage over JavaScript. &lt;/p&gt;

&lt;p&gt;Static Type Definitions in our code provides a way to describe the shape of an object, providing better documentation, and allowing TypeScript to validate that your code is working correctly. That's why bugs like the one described above, are caught while we are writing our code rather than after we deploy it. But if you like me and you are quite lazy writing types can be optional in TypeScript, because type inference allows you to get a lot of power without writing additional code.&lt;/p&gt;

&lt;p&gt;Since TypeScript is a superset of JavaScript, valid JavaScript is TypeScript! And this automatically makes you feel at home, we could write plain JavaScript and save it with the &lt;code&gt;.ts&lt;/code&gt; extension. And compile it to JavaScript it would still get the job done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Valid JavaScript is Typescript&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bruce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// adding types&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Burger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;380&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;burger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instock&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you compile this code to JavaScript by running &lt;code&gt;tsc filename.ts&lt;/code&gt;. The typescript compiler will compile this code down to vanilla JavaScript for us and if you inspect it, you will find out that it reads to plain JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types"&gt;
  &lt;/a&gt;
  Types
&lt;/h3&gt;

&lt;p&gt;We saw a basic demonstration of how TypeScript extends JavaScript by adding static types, we can use this advantage and compose unique types for objects. We can explicitly declare the type for a variable or we can let typescript infer the type based on the value we assign the variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Explicit Typing&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;greetings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Name can only store strings&lt;/span&gt;
&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// age can only store numbers&lt;/span&gt;
&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;

&lt;span class="c1"&gt;// functions can also have types&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;// Implicit Typing&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2500&lt;/span&gt;

&lt;span class="nx"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;samson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// NOT POSSIBLE&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greetings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// hello samson&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But TypeScript is not too restrictive and we can opt of static typing by annotating the variable with the type any. This allows us to assign values of different type to the variable.&lt;/p&gt;

&lt;p&gt;Functions are also typed in TypeScript, we annotate the parameters that the functions expects to be of a particular type to ensure that the right kind of values are passed in to it when called. We also specify the return type of the function, If we invoke the function and pass in the correct arguments, TypeScript will automatically infer the return type to any variable we store it in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also declare union types or restrict the actual value that a variable can hold.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Union types&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Restricting Values for variables&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// universe can only be DCU or MCU&lt;/span&gt;
&lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Not Possible&lt;/span&gt;
&lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Something else&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we have been declaring types for simple variables, we can also declare types for objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;superman&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One of the cool benefits of this typing system is that, our IDE will provide us with rich auto-completion and intellisense. This can help with documentation purposes. rather than use types for Object personally i prefer using interfaces to describe the shape of Classes which in turn affects the Object.&lt;/p&gt;

&lt;p&gt;TypeScript supports OOP and has many tools up it's belt that i uses to achieve OOP. You could also go with functional approach or whatever programming paradigm you see fit. Let's touch up &lt;code&gt;Interfaces&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interfaces"&gt;
  &lt;/a&gt;
  Interfaces
&lt;/h3&gt;

&lt;p&gt;We can use types for objects as we did but i prefer using interfaces. Interfaces provides a contract that all clients that implements it must satisfy before it is valid. Interfaces are really great OOP tool in TypeScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;superman&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing with interfaces is that they can implement other interfaces or classes, we can take advantage of this feature when working with external libraries and frameworks, by extending our interfaces to implement other interfaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;powers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="nx"&gt;uninverse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ALl heroes must have the same &lt;/span&gt;
&lt;span class="c1"&gt;// properties as humans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you observed, the &lt;code&gt;powers&lt;/code&gt; properties on a hero is an array, but we add the string type before the array, this tells TypeScript that the powers property is an array of strings, we can also have arrays of any type. If we want more control over what element is in what position in an array the we could use a tuple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h3&gt;

&lt;p&gt;Arrays can be typed such that it only a specific type of value or restricted types of values can be stored inside the array. We can have an array of strings or numbers. Even better we can have an array of both strings and numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// array of numbers;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;heroes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mixedArr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// Valid&lt;/span&gt;
&lt;span class="nx"&gt;mixedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// Valid&lt;/span&gt;

&lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// Not possible&lt;/span&gt;
&lt;span class="nx"&gt;mixedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;supes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="c1"&gt;// Not possible&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tuples are arrays where each index in the array is typed and cannot store a value whose type do not match the type we specified for that index. Tuples are useful when we use spread operators.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// TUPLES&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tup&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;tup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;superman&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have barely touched the features of TypeScript and what we can do with it. But this is a friendly intro and not to scare you. We will look more in depth about the features of TypeScript and what we can do with it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cli-commands"&gt;
  &lt;/a&gt;
  CLI Commands
&lt;/h3&gt;

&lt;p&gt;To compile your TypeScript code to JavaScript, just run &lt;code&gt;tsc ./file_name&lt;/code&gt;, file_name should be the name of the file you are trying to compile to JavaScript. If there are no errors, TypeScript will sipt out a JavaScript version of your TypeScript code, even if there are certain bugs in your code it will still spit out the compiled code.&lt;/p&gt;

&lt;p&gt;One cool thing with working with TypeScript is that we can customize the behavior of the compiler as we see fit, we can either do this in the command line or through a &lt;code&gt;tsconfig.json&lt;/code&gt; file. The config file is the best way to do this because there is a handful of compiler options that we can customize.&lt;/p&gt;

&lt;p&gt;To compile your code whenever you save a change you can run &lt;code&gt;tsc --w&lt;/code&gt; and this will compile your file in watch mode, anytime there is a change to the source code the TypeScript compiler will automatically compile the code again. To generate a blank config file run &lt;code&gt;tsc --init&lt;/code&gt; and TypeScript will give us a blank &lt;code&gt;tsconfig.json&lt;/code&gt; file.  &lt;/p&gt;

&lt;p&gt;To get a run down of all the compiler options run &lt;code&gt;tsc --all&lt;/code&gt; and it will print all compiler options in your command line . To throw of the version of TypeScript you have installed in your computer run &lt;code&gt;tsc --version&lt;/code&gt;. There is a handful of more CLI commands we can but discuss here and that fits into it's own article&lt;/p&gt;

&lt;p&gt;Hope you enjoyed this and also found it useful, feel free to leave a comment below. I will be making a series of articles about TypeScript so stay tuned.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 10 Coding Principles Every Developer Must Know</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Mon, 12 Jul 2021 16:08:04 +0000</pubDate>
      <link>https://dev.to/unitybuddy/top-10-coding-principles-every-developer-must-know-2gk4</link>
      <guid>https://dev.to/unitybuddy/top-10-coding-principles-every-developer-must-know-2gk4</guid>
      <description>&lt;p&gt;Hello, buddies! I would like to get into our topic without wasting time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's easy to write code. It's challenging to write good code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bad code comes in many forms. Messy code, massive if-else chains, programs that break with one adjustment, variables that don't make sense. The program might work once but will never hold up to any scrutiny.&lt;/p&gt;

&lt;p&gt;If you want to be a programmer, don't settle for shortcuts. Aim to write code that is easy to maintain. Easy for you to maintain, and easy for any other developer on your team to maintain. How do you write effective code?  You write good code by being disciplined with programming principles. So Today we're going see some programming principles that can help you to be a Good Developer&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-keep-it-simple-stupid-kiss"&gt;
  &lt;/a&gt;
  1. Keep It Simple, Stupid (KISS)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_CKoWwXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839631378/G7BJWiSsV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_CKoWwXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839631378/G7BJWiSsV.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
It sounds a little harsh, but it's a coding principle to live by. What does this mean?&lt;/p&gt;

&lt;p&gt;It means you should be writing code as simple as possible. Don't get caught up in trying to be overly clever or showing off with a paragraph of advanced code. If you can write a script in one line, write it in one line.&lt;/p&gt;

&lt;p&gt;Here's a simple function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; function addNumbers(num1,num2){
 return num1 + num2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty simple. It's easy to read and you know exactly what is going on.&lt;/p&gt;

&lt;p&gt;Use clear variable names. Take advantage of coding libraries to use existing tools. Make it easy to come back after six months and get right back to work. Keeping it simple will save you the headache.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dry-dont-repeat-yourself"&gt;
  &lt;/a&gt;
  2. DRY (Don‚Äôt repeat yourself)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6nupxoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839516565/DWbKqEcoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6nupxoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839516565/DWbKqEcoa.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
DRY (don‚Äôt repeat yourself) means don‚Äôt write duplicate code, instead use Abstraction to abstract everyday things in one place.&lt;/p&gt;

&lt;p&gt;If you have a block of code in more than two places, consider making it a separate method, or if you use a hard-coded value more than one time, make them public final constant. The benefit of this Object-oriented design principle is in maintenance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It‚Äôs important not to abuse it, duplication is not for code, but for functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It means if you have used standard code to validate OrderId and SSN, it doesn‚Äôt mean they are the same, or they will remain the same in the future.&lt;/p&gt;

&lt;p&gt;By using standard code for two different functionality or thing, you tightly couple them forever, and when your OrderId changes its format, your SSN validation code will break.&lt;/p&gt;

&lt;p&gt;So beware of such coupling and don‚Äôt combine anything which uses similar code but is not related. You can further check out the Basics of Software Architecture &amp;amp; Design Patterns in Java course on Udemy to learn more about writing the right code and best practices to follow while designing a system.&lt;/p&gt;

&lt;p&gt;DRY code is easy to maintain. It's easier to debug one loop that handles 50 repetitions than 50 blocks of code that handle one repetition.&lt;/p&gt;

&lt;p&gt;To learn more about DRY, You should &lt;a href="https://h.daily-dev-tips.com/software-design-principles-dry"&gt;read this article&lt;/a&gt; be thankful to @&lt;a href="https://dev.to@dailydevtips"&gt;Chris Bongers&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-openclosed"&gt;
  &lt;/a&gt;
  3. Open/Closed
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wk151-2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839692847/IBMAh3ear.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wk151-2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839692847/IBMAh3ear.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
This principle means you should aim to make your code open to extension but closed to modification. This is an important principle when releasing a library or framework that others will use.&lt;/p&gt;

&lt;p&gt;For example, suppose you're maintaining a GUI framework. You could release for coders to directly modify and integrate your released code. But what happens when you release a major update four months later?&lt;/p&gt;

&lt;p&gt;Their code will break. This will make engineers unhappy. They won't want to use your library for much longer, no matter how helpful it may be.&lt;/p&gt;

&lt;p&gt;Instead, release code that prevents direct modification and encourages extension. This separates core behavior from modified behavior. The code is more stable and easier to maintain.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-composition-over-inheritance"&gt;
  &lt;/a&gt;
  4. Composition Over Inheritance
&lt;/h2&gt;

&lt;p&gt;If you write code using object-oriented programming you're going to find this useful. The composition over inheritance principle states: objects with complex behaviors should contain instances of objects with individual behaviors. They should not inherit a class and add new behaviors.&lt;/p&gt;

&lt;p&gt;Relying on inheritance causes two major issues. First, the inheritance hierarchy can get messy in a hurry. You also have less flexibility for defining special-case behaviors. Let's say you want to implement behaviors to share:&lt;/p&gt;

&lt;p&gt;Composition programming is a lot cleaner to write, easier to maintain and allows flexibility defining behaviors. Each individual behavior is its own class. You can create complex behaviors by combining individual behaviors.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-you-arent-going-to-need-it-yagni"&gt;
  &lt;/a&gt;
  5. You Aren't Going to Need It (YAGNI)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uKg4jAFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839742341/hQjL6AL7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uKg4jAFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839742341/hQjL6AL7c.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
This principle means you should never code for functionality on the chance that you may need in the future. Don't try and solve a problem that doesn't exist.&lt;/p&gt;

&lt;p&gt;In an effort to write DRY code, programmers can violate this principle. Often inexperienced programmers try to write the most abstract and generic code they can. Too much abstraction causes bloated code that is impossible to maintain.&lt;/p&gt;

&lt;p&gt;Only apply the DRY principle only when you need to. If you notice chunks of code written over and over, then abstract them. Don't think too far out at the expense of your current code batch.&lt;/p&gt;

&lt;p&gt;There are two main reasons to practice YAGNI,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You save time because you avoid writing code that you turn out not to need.&lt;/li&gt;
&lt;li&gt;Your code is better because you avoid polluting it with 'guesses' that turn out to be more or less wrong but stick around anyway.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#6-single-responsibility"&gt;
  &lt;/a&gt;
  6. Single Responsibility
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lakfs1aV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839801179/DPn7sNIbM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lakfs1aV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839801179/DPn7sNIbM.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
As you start writing code, over a long period of time, your code would become clumsy. You will have classes/modules that perform several functionalities. This will end up with classes that are hundreds and thousands of lines of code.&lt;br&gt;
This principle says that every class or module in a program should only have specific functionality. In other words, a class or module in a program should only be responsible for tasks regarding one particular function. This helps you keep your modules minimal and clean.&lt;/p&gt;

&lt;p&gt;Both Open/Closed and Single Responsibility principles are in under the SOLID Principle. &lt;a href="https://francescociulla.com/solid-principles-around-you-in-javascript"&gt;In this article&lt;/a&gt;, @&lt;a href="https://dev.to@FrancescoCiulla"&gt;Francesco Ciulla&lt;/a&gt; has wonderfully explained about each principle in SOLID.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-document-your-code"&gt;
  &lt;/a&gt;
  7. Document Your Code
&lt;/h2&gt;

&lt;p&gt;Any senior developer will stress the importance of documenting your code with proper comments. All languages offer them and you should make it a habit to write them. Leave comments to explain objects, enhance variable definitions, and make functions easier to understand.&lt;/p&gt;

&lt;p&gt;Here's a Python function with comments guiding you through the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_odd&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
       &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;..))&lt;/span&gt; &lt;span class="c1"&gt;# Get a number
&lt;/span&gt;       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Divide number by 2. If no remains,
&lt;/span&gt;                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is a even number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Print it is not a odd number
&lt;/span&gt;       &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Here is the odd number!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# If 1 remains, print it is a odd number
&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Leaving comments is a little more work while you're coding, and you understand your code pretty well right?&lt;/p&gt;

&lt;p&gt;Leave comments anyway!&lt;/p&gt;

&lt;p&gt;Try writing a program, leaving it alone for six months, and come back to modify it. You'll be glad you documented your program instead of having to pour over every function to remember how it works. Work on a coding team? Don't frustrate your fellow developers by forcing them to decipher your syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-separation-of-concerns"&gt;
  &lt;/a&gt;
  8. Separation of Concerns
&lt;/h2&gt;

&lt;p&gt;The separation of concerns principle is an abstract version of the single responsibility principle. This idea states that a program should be designed with different containers, and these containers should not have access to each other.&lt;/p&gt;

&lt;p&gt;A well-known example of this is the model-view-controller (MVC) design. MVC separates a program into three distinct areas: the data (model), the logic (controller), and what the page displays (view). Variations of MVC are common in today's most popular web frameworks.&lt;/p&gt;

&lt;p&gt;For example, the code that handles the database doesn't need to know how to render the data in the browser. The rendering code takes input from the user, but the logic code handles the processing. Each piece of code is completely independent.&lt;/p&gt;

&lt;p&gt;The result is code that is easy to debug. If you ever need to rewrite the rendering code, you can do so without worrying about how the data gets saved or the logic gets processed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-refactor"&gt;
  &lt;/a&gt;
  9. Refactor
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uHZInLSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839823516/DYVuQxQcR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHZInLSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839823516/DYVuQxQcR.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
It's hard to accept, but your code isn't going to be perfect the first time. Refactoring code means reviewing your code and looking for ways to optimize it. Make it more efficient while keeping the results exactly the same.&lt;/p&gt;

&lt;p&gt;Codebases are constantly evolving. It's completely normal to revisit, rewrite, or even redesign entire chunks of code. It doesn't mean you didn't succeed the first time you wrote your program. You're going to get more familiar with a project over time. Use that knowledge to adjust your existing code to be DRY, or following the KISS principle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-clean-code-at-all-costs"&gt;
  &lt;/a&gt;
  10. Clean Code At All Costs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJ7bMWWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839871256/bIzvjl-ln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJ7bMWWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839871256/bIzvjl-ln.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Leave your ego at the door and forget about writing clever code. The kind of code that looks more like a riddle than a solution. You're not coding to impress strangers.&lt;/p&gt;

&lt;p&gt;Don't try to pack a ton of logic into one line. Leave clear instructions in comments and documentation. If your code is easy to read it will be easy to maintain.&lt;/p&gt;

&lt;p&gt;Good programmers and readable code go hand-in-hand. Leave comments when necessary. Adhere to style guides, whether dictated by a language or your company. @&lt;a href="https://dev.to@macerub"&gt;Mario Cervera&lt;/a&gt; has beutifully explained about Clean Code &lt;a href="https://mariocervera.com/the-essence-of-clean-code"&gt;in this article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/top-10-coding-principles-every-developer-must-know"&gt;Originally&lt;/a&gt; published on Hashnode&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How our development team improved through mentorship üßëüèº‚Äçüè´üììüßëüèæ‚Äçüíª</title>
      <author>Ivan Brcko</author>
      <pubDate>Mon, 12 Jul 2021 16:07:27 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/how-our-development-team-improved-through-mentorship-2b3d</link>
      <guid>https://dev.to/bornfightcompany/how-our-development-team-improved-through-mentorship-2b3d</guid>
      <description>&lt;p&gt;Through my experience in the IT industry, I have experienced on my own that a high-quality mentorship is a key for rapid personal development. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mentee-me"&gt;
  &lt;/a&gt;
  Mentee me
&lt;/h2&gt;

&lt;p&gt;Since I have initially turned my sails towards the web development island, I have been on the receiving end of some kind of mentorship relation. It has never been completely defined and it has more often than not lost its structure after a couple of months - closely related to the onboarding process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tBlEzVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfvjke9mel0j4pew1csc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tBlEzVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfvjke9mel0j4pew1csc.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Nevertheless, I have reaped the mentorship benefits greatly. The mentors I was assigned with served as an inspiration to me - both from the technical side and from the ‚Äúway of thinking‚Äù side. I have tried to learn from them as much as possible, until one day I‚Äôve started to feel confident enough to pave my own path.&lt;br&gt;
As my skills developed, I have started to become more and more independent and started to discover things on my own.&lt;/p&gt;

&lt;p&gt;And I was like: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nice, I know everything now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh boy, was I wrong‚Ä¶&lt;/p&gt;

&lt;p&gt;The one thing I started to know more and more is that I know how much I don‚Äôt know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#me-mentor-"&gt;
  &lt;/a&gt;
  ‚Äòme‚Äô === ‚Äòmentor‚Äô ? ü§∑üèª‚Äç‚ôÇÔ∏è : ü§∑üèª‚Äç‚ôÇÔ∏è
&lt;/h2&gt;

&lt;p&gt;Once the mentorship has watered down, my mentors started to serve me more as guidelines, than a knowledge source. Over the years, I have become mostly independent in my work, as in my development, but mentors were still there. We have developed a healthy peer relationship. &lt;br&gt;
From time to time, when I was stuck on something, I have developed a healthy habit of asking my mentors for their opinion and possible guidelines, which was enough to get unstuck but to solve my issues by myself.&lt;/p&gt;

&lt;p&gt;With time, I started to feel like I wanted to share my knowledge with someone - I knew it was time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFH84_FO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ox8alrcxyp4b5sn9ey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFH84_FO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ox8alrcxyp4b5sn9ey.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mentor-me"&gt;
  &lt;/a&gt;
  Mentor me
&lt;/h2&gt;

&lt;p&gt;I genuinely enjoy sharing my knowledge with others, especially the ones that seek it.&lt;br&gt;
I have started to be more enrolled in the mentor position, but then, COVID struck and with it, the remote work era started.&lt;/p&gt;

&lt;p&gt;The situation altogether was scary. Everyone was afraid of and for everyone, including themselves. &lt;br&gt;
Time has shown that it could be worse, and life started to get back to normal, one small step at a time.&lt;/p&gt;

&lt;p&gt;Our team was communicating very little, our knowledge wasn't being shared, interpersonal relationships were non-existent out of the daily work scope.&lt;/p&gt;

&lt;p&gt;That was my time to shine and to try bringing our team back to its previous glory. Encouraged by my previous experience &amp;amp; my need to be a mentor, I‚Äôve come up with some kind of a mentorship program which was highly accepted and greatly beneficial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-hail-mentorship-20"&gt;
  &lt;/a&gt;
  All hail Mentorship 2.0
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gIcWwEj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tli08h5xnfnfzhtkj5l7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gIcWwEj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tli08h5xnfnfzhtkj5l7.jpeg" alt="high-risk-high-reward"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The concept behind it is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Everyone is assigned with a mentor

&lt;ul&gt;
&lt;li&gt;Preferably a mentor that is working in a similar tool or technology - so, technology facing mentor&lt;/li&gt;
&lt;li&gt;Fallback is a soft skill mentor - i.e. CTO is a mentor to the iOS development team lead&lt;/li&gt;
&lt;li&gt;You can mentor max 3 people at a time&lt;/li&gt;
&lt;li&gt;It is not fixed - you can transfer to a new mentor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Every mentor-mentee combo is awarded a 30-minute weekly mentorship slot

&lt;ul&gt;
&lt;li&gt;If they wish they can merge it into a single bi-weekly 1-hour slot &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Topics are either predefined by the mentee or brought by the mentor

&lt;ul&gt;
&lt;li&gt;If a mentee wants to learn something specific or needs help with an issue, he should announce it beforehand so the mentor can prepare for it&lt;/li&gt;
&lt;li&gt;If a mentee doesn‚Äôt have anything specific, the mentor can bring his own stuff to the table&lt;/li&gt;
&lt;li&gt;If no one has any knowledge related topics, a casual catching up is always a valid option - but try your best to learn something new from time to time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evolve üòâ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This program has resulted in knowledge sharing improvement, personal development boost, our work quality increase &amp;amp; interpersonal relationships forming.&lt;/p&gt;

&lt;p&gt;I would suggest that every team invests a bit more in its mentoring program, the ROI is most definitely higher than expected.&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>mentorship</category>
      <category>mentor</category>
      <category>development</category>
    </item>
    <item>
      <title>Writing, GraphQL and AWS</title>
      <author>Victor Adeleke Afolayan</author>
      <pubDate>Mon, 12 Jul 2021 16:03:02 +0000</pubDate>
      <link>https://dev.to/rephidimc/writing-graphql-and-aws-4hn7</link>
      <guid>https://dev.to/rephidimc/writing-graphql-and-aws-4hn7</guid>
      <description>&lt;p&gt;As long as we still have our breath as humans, one thing is constant, which is being up to something. Although sometimes we are up to something meaningful, other times, it feels as if time just somehow passes us by without us really achieving anything. Before going into what I did last week, I would love to take a moment to explain why I take time to write about my professional development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EznXM72e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1455390582262-044cdead277a%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D966%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img alt="England Euros 2021" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EznXM72e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1455390582262-044cdead277a%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D966%26q%3D80"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by &lt;a href="https://unsplash.com/@aaronburden"&gt;Aaron Burden&lt;/a&gt; on &lt;a href="https://unsplash.com/" rel="external"&gt;Unsplash&lt;/a&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
Being a web developer privileged to have a job means I have deliverables that entail having to pull out technical skills already in my arsenal or picking up new ones and venturing into new fields (if need be) with the goal of finishing my task in good time.&lt;/p&gt;

&lt;p&gt;Even though not everyone takes time to document their progress, I consider it a blessing to be at a place where this is a weekly assignment; one I have come to love and would love to keep at if time permits. Writing has an undeniable number of benefits including helping me to keep tabs on my progress and aiding my communication skills.&lt;/p&gt;

&lt;p&gt;Although the personal benefits are well-established, I believe readers of my posts have a lot to gain also, with the mother being picking knowledge for free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ck97-3-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1434030216411-0b793f4b4173%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img alt="Writing" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ck97-3-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1434030216411-0b793f4b4173%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by &lt;a href="https://unsplash.com/@craftedbygc"&gt;
Green Chameleon&lt;/a&gt; on &lt;a href="https://unsplash.com/" rel="external"&gt;Unsplash&lt;/a&gt;



&lt;p&gt;I hope you are encouraged to not only come back for more but also pick up the challenge to write as well, so I alongside others learn from your experience in whatever field you choose to dwell.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;MY EXPERIENCE LAST WEEK&lt;/h1&gt;

&lt;p&gt;If you know what being a Fullstack engineer entails, then you have an idea of what I have been up to. A Fullstack engineer is a web developer who does both Frontend (what users relate with) and backend web development(what users don't see but give life and date to the frontend part). &lt;/p&gt;

&lt;p&gt;Before going into details, I would like to give a little background on what my team and I are working on.&lt;br&gt;
Gaming is something not limited to any particulate set of people as it transcends the borders of gender, race, age group, or any other category. This simple logic means it is something that has come to stay and like anything worth doing, should be done well; hence, we've been tasked with building a platform that provides users an interface to link up, create tournaments, and challenge.&lt;/p&gt;

&lt;p&gt;Last week, I built a microservice: a resource for a section of the landing page of the platform, which renders from a database loaded with data. In technical terms, I built and consumed an API. I used &lt;a href="https://aws.amazon.com/dynamodb/"&gt;Dynamo DB&lt;/a&gt; (a database provided by Amazon Web Services &lt;a href="https://aws.amazon.com/" rel="external"&gt;(AWS)&lt;/a&gt;)) to store my data, creating a table with desired fields for me to use in populating my table. &lt;a href="https://graphql.org/" rel="external"&gt;GraphQL&lt;/a&gt; was used as playground for me to query and mutate my database. i.e. a way of creating, reading, updating and deleting information from the database, a process technically known as &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete" rel="external"&gt;CRUD&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I linked my database(Dynamo DB) with my playground(GraphQL) using the another Amazon web service,&lt;br&gt;
&lt;a href="https://aws.amazon.com/lambda/" rel="external"&gt;Lambda&lt;/a&gt; after having defined my environment variables. All these made up the backend side of my task(building the API and database)&lt;/p&gt;

&lt;p&gt;Although I had my database populated through the linked playground, I had one more task, which was to render data from the database on the frontend(consuming the API). This was done by importing GraphQL into the code for my frontend and mapping through the data. &lt;/p&gt;

&lt;p&gt;Before this experience, I had worked with API's using &lt;a href="https://expressjs.com/" rel="external"&gt;Express&lt;/a&gt; and making HTTP calls to the API, hence, working with GraphQL and Amazon services was entirely new for me, but hey! what matters is that I learnt, got the job done and we have new skills in the bag; which reiterates the belief I have, being I can do all things.&lt;/p&gt;

&lt;p&gt;I also worked on components within the project that use &lt;a href="https://en.wikipedia.org/wiki/Modal_window#:~:text=In%20user%20interface%20design%20for,window%20in%20front%20of%20it" rel="external"&gt;Modals&lt;/a&gt;. I refactored and extracted the modals in them into one reusable modal component and called the new component in every place it needed to be rendered. This was a simple &lt;a href="https://reactjs.org/" rel="external"&gt;React&lt;/a&gt; task. This refactoring came with some layout distortions(&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps" rel="external"&gt;CSS&lt;/a&gt;) which marked an end to my tasks for the week.&lt;/p&gt;

&lt;p&gt;It was a brilliant week, and I'm up for newer things to keep me busy the next few days. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;EXTRAS&lt;/h1&gt;

&lt;p&gt;The NBA finals got off to a brilliant start for the Phoenix Suns with the boys taking a 2-0 lead to Milwaukee. The first game in Milwaukee(Sunday night) was a loss but I believe the boys have this in the bag already. Suns in 5!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SpWQANhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/the-phoenix-suns-pose-with-the-western-conference-finals-trophy-after-picture-id1233742389%3Fs%3D2048x2048" class="article-body-image-wrapper"&gt;&lt;img alt="Phoenix Suns" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SpWQANhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/the-phoenix-suns-pose-with-the-western-conference-finals-trophy-after-picture-id1233742389%3Fs%3D2048x2048"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by &lt;a href="https://www.gettyimages.com/search/photographer?family=editorial&amp;amp;photographer=Andrew+D.+Bernstein"&gt;
Andrew D. Bernstein&lt;/a&gt; on &lt;a href="https://www.gettyimages.com/editorial-images" rel="external"&gt;Getty Images&lt;/a&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
In football, two competitions ended yesterday, one being the Copa America and the other the European Championships. I am most pleased for Lionel Messi as what looked like a dent (not winning a senior title with Argentina) in his illustrious career has finally been put to bed by clinching the Copa America with his teammates. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2TUAHrll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/argentinas-lionel-messi-is-thrown-into-the-air-by-teammates-after-picture-id1233914868%3Fs%3D2048x2048" class="article-body-image-wrapper"&gt;&lt;img alt="Lionel Messi" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2TUAHrll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/argentinas-lionel-messi-is-thrown-into-the-air-by-teammates-after-picture-id1233914868%3Fs%3D2048x2048"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by &lt;a href="https://www.gettyimages.com/search/photographer?family=editorial&amp;amp;photographer=NELSON+ALMEIDA"&gt;Nelson Almeida&lt;/a&gt; on &lt;a href="https://www.gettyimages.com/editorial-images" rel="external"&gt;Getty Images&lt;/a&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
I never thought there was ever any doubt of this man's greatness, but if certain quarters thought there were, I believe this sufficiently deadens all.&lt;/p&gt;

&lt;p&gt;And football went Rome! The Italians won on penalties last night to be crowned champions of Europe, and I think this is testament to the quality of Roberto Mancini as a manager, bringing them from a hell-hole in 2018 to an unimaginable place last night. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eier85EP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/leonardo-bonucci-of-italy-lifts-the-trophy-and-celebrates-with-team-picture-id1233931609%3Fs%3D2048x2048" class="article-body-image-wrapper"&gt;&lt;img alt="Italy Euro 2021" src="https://res.cloudinary.com/practicaldev/image/fetch/s--eier85EP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/leonardo-bonucci-of-italy-lifts-the-trophy-and-celebrates-with-team-picture-id1233931609%3Fs%3D2048x2048"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by &lt;a href="https://www.gettyimages.com/search/photographer?family=editorial&amp;amp;photographer=Marc+Atkins"&gt;Mark Atkins&lt;/a&gt; on &lt;a href="https://www.gettyimages.com/editorial-images" rel="external"&gt;Getty Images&lt;/a&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
He has done so in fantastic fashion with his team on a 34-match unbeaten run. His bravery has been adequately rewarded and hopefully, the team can maintain this consistency when Giorgio Chiellini and Leonardo Bonucci finally retire.&lt;/p&gt;

&lt;p&gt;To the English, the boys can hold their heads up high and pat themselves in the back for a job well done. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EjEviTK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/england-manager-gareth-southgate-as-he-selects-his-players-to-take-picture-id1233941153%3Fs%3D2048x2048" class="article-body-image-wrapper"&gt;&lt;img alt="England Euro 2021" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EjEviTK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.gettyimages.com/photos/england-manager-gareth-southgate-as-he-selects-his-players-to-take-picture-id1233941153%3Fs%3D2048x2048"&gt;&lt;/a&gt;&lt;/p&gt;
Photo by &lt;a href="https://www.gettyimages.com/search/photographer?family=editorial&amp;amp;photographer=Mike+Egerton+-+PA+Images"&gt;Mike Egerton-PA Images&lt;/a&gt; on &lt;a href="https://www.gettyimages.com/editorial-images" rel="external"&gt;Getty Images&lt;/a&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
Although they didn't clinch the top prize, they have set themselves on course for a successful finish in Qatar by 2022. Praise must also go to the manager, Gareth Southgate for establishing an identity and a playing structure that works for his group of players. Even though a certain section of the media and fans have berated his conservative approach, I strongly believe he is trying to make his players taste victory and become a respected footballing nation before looking at establishing an attacking pattern of play, which if anyone asks me, is a solid way of building a base in football, although the Italians have achieved success by playing in an attacking style, albeit with very experienced players in their squad. I believe 2022 can't come sooner for the boys and I think they will serve the footballing world a spectacle in Qatar.&lt;/p&gt;




&lt;p&gt;Thanks for taking the time to read.&lt;br&gt;
Till next week when I share more thoughts, it's a goodbye from me.&lt;/p&gt;

&lt;p&gt;P.S: Should you want to reach me, please feel free to use the contact info on my bio or my &lt;a href="https://victor-afolayan.vercel.app/" rel="external"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>writing</category>
      <category>aws</category>
      <category>graphql</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Kentico Xperience Design Patterns: Good Layout Hygiene</title>
      <author>Sean G. Wright</author>
      <pubDate>Mon, 12 Jul 2021 15:57:50 +0000</pubDate>
      <link>https://dev.to/seangwright/kentico-xperience-design-patterns-good-layout-hygiene-3ob6</link>
      <guid>https://dev.to/seangwright/kentico-xperience-design-patterns-good-layout-hygiene-3ob6</guid>
      <description>&lt;p&gt;It can be easy for Kentico Xperience developers to focus applying well known software design patterns, like DRY, composition, abstraction, and separation of concerns to their C# code, but these patterns are just as important in Razor code üßê.&lt;/p&gt;

&lt;p&gt;We can use Page Builder Widget Sections and Widgets to decompose the Page layout and design into reusable pieces, but what about the parts of a site common to every Page, like navigation, headers, footers, meta elements, and references to CSS and JavaScript ü§∑üèΩ‚Äç‚ôÇÔ∏è?&lt;/p&gt;

&lt;p&gt;By applying the above design patterns we can make sure we practice good Layout hygiene üöø, keeping our Razor &lt;code&gt;_Layout.cshtml&lt;/code&gt; organized and maintainable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are looking for other tips on keeping a clean Kentico Xperience application, checkout my post &lt;a href="https://dev.to/seangwright/kentico-xperience-design-patterns-good-startup-cs-hygiene-3klm"&gt;Kentico Xperience Design Patterns: Good Startup.cs Hygiene &lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-will-we-learn"&gt;
  &lt;/a&gt;
  üìö What Will We Learn?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-layout"&gt;What is a Razor Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#an-unmaintained-layout"&gt;The problems with unmaintained Razor Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#janitorial-tools"&gt;When to use Partial Views and View Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cleaning-up-a-messy-layout"&gt;How to clean up and organize a messy Layout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-layout"&gt;
  &lt;/a&gt;
  üöÄ &lt;a href="#what-is-a-layout"&gt;What is a Layout?&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/layout?view=aspnetcore-5.0"&gt;documentation for ASP.NET Core&lt;/a&gt;, a Layout "defines a top level template for views in the app."&lt;/p&gt;

&lt;p&gt;By convention, the &lt;code&gt;_Layout.cshtml&lt;/code&gt; file in our &lt;code&gt;~/Views/Shared&lt;/code&gt; folder is the Layout used by all Views in our application. This can be changed by modifying the &lt;code&gt;Layout&lt;/code&gt; value specified in &lt;code&gt;_ViewStart.cshtml&lt;/code&gt; at the root of the project or by overriding the &lt;code&gt;Layout&lt;/code&gt; value on a per-View basis ü§ì.&lt;/p&gt;

&lt;p&gt;The Layout is where we define all the markup that should appear on all (or most) Pages in our site. This includes headers and footers (navigation), &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements, marketing tags, meta tags, and any markup that wraps the main body of our Razor Views.&lt;/p&gt;

&lt;p&gt;If we take a &lt;a href="https://dev.to/kenbellows/stop-using-so-many-divs-an-intro-to-semantic-html-3i9i"&gt;semantic HTML&lt;/a&gt; approach to our markup, we might have something that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- links, meta tags --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- nav, banners --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- page content --&amp;gt;&lt;/span&gt;
        @RenderBody()
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- nav, social icons --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;@RenderBody()&lt;/code&gt; is where the markup from our Page specific Views will end up, and everything else is rendered &lt;em&gt;from&lt;/em&gt; our Layout (but not necessarily &lt;em&gt;by&lt;/em&gt; our Layout üòâ).&lt;/p&gt;

&lt;p&gt;Some of this markup might be the same between Pages (navigation) and other parts will be more dynamic, including Page specific content, like &lt;a href="https://ogp.me/"&gt;Open Graph meta tags&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#an-unmaintained-layout"&gt;
  &lt;/a&gt;
  üöΩ &lt;a href="#an-unmaintained-layout"&gt;An Unmaintained Layout&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If we look at the &lt;a href="https://docs.xperience.io/installation/quick-installation#Quickinstallation-StartingtheDancingGoatsamplesite"&gt;Dancing Goat sample site&lt;/a&gt;'s &lt;code&gt;_Layout.cshtml&lt;/code&gt; we can see what happens when our Layout grows in complexity to serve the needs of our site's functionality.&lt;/p&gt;

&lt;p&gt;It's about 160 lines long and renders the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Static meta&lt;/li&gt;
&lt;li&gt;Kentico Xperience dynamic (page specific) meta&lt;/li&gt;
&lt;li&gt;Kentico Xperience marketing features scripts&lt;/li&gt;
&lt;li&gt;Kentico Xperience Page Builder script and styles&lt;/li&gt;
&lt;li&gt;The site's styles&lt;/li&gt;
&lt;li&gt;A tracking consent form&lt;/li&gt;
&lt;li&gt;The site's header

&lt;ul&gt;
&lt;li&gt;Navigation&lt;/li&gt;
&lt;li&gt;Authenticated user avatar&lt;/li&gt;
&lt;li&gt;Shopping cart icon&lt;/li&gt;
&lt;li&gt;A language/culture switcher&lt;/li&gt;
&lt;li&gt;Search box&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The site's main content container&lt;/li&gt;
&lt;li&gt;The site's footer

&lt;ul&gt;
&lt;li&gt;Company address&lt;/li&gt;
&lt;li&gt;Social links&lt;/li&gt;
&lt;li&gt;Newsletter subscription form&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The site's JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Here's &lt;a href="https://gist.github.com/seangwright/7265642e82736dcade11e57e9a0d84da"&gt;a link&lt;/a&gt; to the &lt;code&gt;_Layout.cshtml&lt;/code&gt; in case you don't have access to it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This seems like way too much for 1 file, but it is entirely plausible that an unmaintained Layout could evolve into this.&lt;/p&gt;

&lt;p&gt;The main problem is that it's hard to reason about üòµ! There's simply too much going on in 1 file. We can see some Razor code blocks that define C# variables - these are effectively creating global variables for the Razor file and global variables always make code more confusing üëçüèø.&lt;/p&gt;

&lt;p&gt;If we remember that Razor files &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#directives"&gt;generate C# classes&lt;/a&gt; at compile time, it's easier to realize the benefits we might gain from simplifying this file - a C# class with this kind of complexity is definitely a &lt;a href="https://www.martinfowler.com/bliki/CodeSmell.html"&gt;code smell&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This Layout is also more likely to result in merge conflicts because of its size and mixed purposes. If a developer is working on an entirely different feature than another teammate, a well structured application will make it unlikely for them both to have to modify the same file for their changes. Merge conflicts, in this scenario, can also sometimes be a code smell üëÉüèº - especially if they are painful to resolve.&lt;/p&gt;

&lt;p&gt;Maybe we could clean üßº it up? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Dancing Goat site &lt;a href="https://devnet.kentico.com/articles/kentico-xperience-sample-sites-and-their-differences"&gt;is meant to demo Kentico Xperience's capabilities&lt;/a&gt;, not be the pinnacle of software architecture üòã.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#janitorial-tools"&gt;
  &lt;/a&gt;
  üßπ &lt;a href="#janitorial-tools"&gt;Janitorial Tools&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;So what tools ‚öí can we use to clean up this smelly üí© mess?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#partial-views"&gt;
  &lt;/a&gt;
  üß© Partial Views
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/partial?view=aspnetcore-5.0"&gt;Partial Views&lt;/a&gt; are perfect for encapsulating a section of markup and giving it a name. They make it easier to understand and modify the markup in the Partial and do the same wherever the Partial is referenced - in our case, that's going to be the Layout.&lt;/p&gt;

&lt;p&gt;If we are trying to reduce merge conflicts and make a bit of markup more readable, Partial Views are a great solution.&lt;/p&gt;

&lt;p&gt;Partials can be passed parameters that become the View Model of the Partial, however these are not strongly typed and if the wrong type is passed as the View Model, we'll experience a runtime exception.&lt;/p&gt;

&lt;p&gt;In ASP.NET Core, if we need to pass some data to a Partial, we might instead reach for another powerful tool - the View Component.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%F0%9F%96%BC-view-components"&gt;
  &lt;/a&gt;
  üñº View Components
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/view-components?view=aspnetcore-5.0"&gt;View Components&lt;/a&gt; give us an opportunity to separate data and logic from the declarative presentation of HTML. They mirror the MVC pattern by having 3 parts - the View Component class (Controller), View Model class, and Razor View.&lt;/p&gt;

&lt;p&gt;Using the Tag Helper syntax for View Components (ex: &lt;code&gt;&amp;lt;vc:our-view-component&amp;gt;&lt;/code&gt;), we get strongly typed parameters passed to the View Component, which can improve the developer experience and make our code more refactor-proof üòé.&lt;/p&gt;

&lt;p&gt;Since View Component classes participate in dependency injection and have access to all the same helper 'context' properties that Controllers do, we can use them in much the same way. If we need access to state, services, or execute some logic to restructure a model, View Components are perfect üëèüèª.&lt;/p&gt;

&lt;p&gt;We might see examples of injecting services directly into Views using &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/dependency-injection?view=aspnetcore-5.0"&gt;View Service Injection&lt;/a&gt;. While this technique is &lt;em&gt;very&lt;/em&gt; convenient, I advise against using it too much üòÆ. Views are declarative presentation concerns and any complex logic or data access should definitely be performed in C# classes.&lt;/p&gt;

&lt;p&gt;As a concrete example, using an injected &lt;code&gt;IHtmlLocalizer&lt;/code&gt; for localizing content is a great use-case or View Service Injection üí™üèæ, however accessing a repository or any of Kentico Xperience's 'Retriever' services (&lt;code&gt;IPageRetriever&lt;/code&gt;, &lt;code&gt;IPageAttachmentUrlRetriever&lt;/code&gt;) in a View should be considered an anti-pattern - use a Controller or View Component instead.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to learn more about using View Components in Kentico Xperience, checkout my post &lt;a href="https://dev.to/seangwright/kentico-xperience-13-beta-3-page-builder-view-components-in-asp-net-core-onm"&gt;Kentico Xperience 13 Beta 3 - Page Builder View Components in ASP.NET Core &lt;/a&gt; or &lt;a href="https://dev.to/seangwright/kentico-xperience-design-patterns-mvc-is-dead-long-live-ptvc-4635"&gt;Kentico Xperience Design Patterns: MVC is Dead, Long Live PTVC &lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we've covered our motivations for cleaning up our Layout and the tools we can use, let's jump into the task at hand.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#cleaning-up-a-messy-layout"&gt;
  &lt;/a&gt;
  üöø &lt;a href="#cleaning-up-a-messy-layout"&gt;Cleaning Up a Messy Layout&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;There's two observations we are going to make about the code in the Layout:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What bits of markup share a common purpose?&lt;/li&gt;
&lt;li&gt;What needs application state or context to render?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's analyze these below...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#abstract-based-on-purpose"&gt;
  &lt;/a&gt;
  üé® Abstract Based on Purpose
&lt;/h3&gt;

&lt;p&gt;First, we should identify which parts of the Layout belong together üë©üèæ‚Äçü§ù‚Äçüßëüèº based on their purpose. Things that change together should stay together and we can relate this recommendation to the &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;Single-Responsibility Principle&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The lack of a single responsibility for this giant Layout is what makes it so complex.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We already have an outline of the different parts of our Layout, organized by purpose, with our original list at the beginning of this post, but let's look from an even higher üåç level.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#html-head-element"&gt;
  &lt;/a&gt;
  HTML Head Element
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element is an obvious starting point for refactoring:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"head"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    @Html.Kentico().PageDescription()
    @Html.Kentico().PageKeywords()
    @Html.Kentico().PageTitle(ViewBag.Title as string)
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"~/content/images/favicon.svg"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/svg+xml"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"~/Content/Styles/Site.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"@Url.Kentico().PageCanonicalUrl()"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    @RenderSection("styles", required: false)
    @Html.Kentico().ABTestLoggerScript()
    @Html.Kentico().ActivityLoggingScript()
    @Html.Kentico().WebAnalyticsLoggingScript()
    &lt;span class="nt"&gt;&amp;lt;page-builder-styles&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can take this whole block of code and move it into a Partial view. I typically like to leave the top level elements (like &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;) in the Layout, so let's just take the contents of the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and move them to a new Partial &lt;code&gt;~/Views/Shared/_Head.cshtml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We'll also need to move over the 2 namespaces being used by the HtmlHelpers in this Partial:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@using Kentico.OnlineMarketing.Web.Mvc
@using Kentico.Activities.Web.Mvc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will change the Layout to the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"head"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;partial&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_Head"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    @RenderSection("styles", required: false)
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We have to move the &lt;code&gt;@RenderSection()&lt;/code&gt; out of the Razor we copied to the &lt;code&gt;_Head.cshtml&lt;/code&gt; Partial because Mvc doesn't support rendering sections from Partials.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#html-header-element"&gt;
  &lt;/a&gt;
  HTML Header Element
&lt;/h4&gt;

&lt;p&gt;Next, we'll move the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; element and all of its contents to a new &lt;code&gt;~/Views/Shared/_Header&lt;/code&gt; Partial (along with the &lt;code&gt;@using Kentico.Membership.Web.Mvc&lt;/code&gt; &lt;code&gt;using&lt;/code&gt; that gives us access to the &lt;code&gt;AvatarUrl()&lt;/code&gt; &lt;code&gt;HtmlHelper&lt;/code&gt; extension).&lt;/p&gt;

&lt;p&gt;This will reduce our Layout to the following, with a total of 59 lines for the file ü•≥:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"head"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;partial&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_Head"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"@ViewData["&lt;/span&gt;&lt;span class="na"&gt;PageClass&lt;/span&gt;&lt;span class="err"&gt;"]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"page-wrap"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;vc:tracking-consent&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;partial&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_Header"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;_Header&lt;/code&gt; Partial can be simplified further but let's finish working with the Layout first.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#footer-html-element"&gt;
  &lt;/a&gt;
  Footer HTML Element
&lt;/h4&gt;

&lt;p&gt;We only have a few sections of markup left in our Layout and the next one that we'll abstract into a Partial is the 'footer'.&lt;/p&gt;

&lt;p&gt;The Dancing Goat footer includes a &lt;code&gt;&amp;lt;div class="footer-wrapper"&amp;gt;&lt;/code&gt; container element. Even though the actual &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; element is nested inside it, the wrapper is part of the footer from a design perspective, so let's take the wrapper and all of its contents and move them to a new Partial &lt;code&gt;~/Views/Shared/_Footer.cshtml&lt;/code&gt;. We'll also need to move the &lt;code&gt;@using DancingGoat.Widgets&lt;/code&gt; &lt;code&gt;using&lt;/code&gt; to our Partial to get access to the Newsletter subscription widget types.&lt;/p&gt;

&lt;p&gt;Our updated Layout is shaping up üòä and looks as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"@ViewData["&lt;/span&gt;&lt;span class="na"&gt;PageClass&lt;/span&gt;&lt;span class="err"&gt;"]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"page-wrap"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;vc:tracking-consent&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;partial&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_Header"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"page-container-inner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                @RenderBody()

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"clear"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;partial&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_Footer"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#page-scripts"&gt;
  &lt;/a&gt;
  Page Scripts
&lt;/h4&gt;

&lt;p&gt;The last bit of markup to abstract out of our Layout includes all the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags, which we will move to another new Partial &lt;code&gt;~/Views/Shared/_Scripts.cshtml&lt;/code&gt;. We will leave the &lt;code&gt;@RenderSection("scripts", required: false)&lt;/code&gt; call in the Layout, just like the &lt;code&gt;RenderSection&lt;/code&gt; call for styles.&lt;/p&gt;

&lt;p&gt;We've completely cleaned up the Layout and trimmed it down to a lovely 27 lines üòÖ:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"head"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;partial&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_Head"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"@ViewData["&lt;/span&gt;&lt;span class="na"&gt;PageClass&lt;/span&gt;&lt;span class="err"&gt;"]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"page-wrap"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;vc:tracking-consent&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;partial&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_Header"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"page-container-inner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                @RenderBody()

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"clear"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;partial&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_Footer"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;partial&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_Scripts"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    @RenderSection("scripts", required: false)
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We were able to do this without creating any new abstractions - just organizing code by common concerns. In our Layout, these common concerns can often be identified by high level HTML elements, like &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This clean up also lets us see additional places we could insert &lt;code&gt;@RenderSection()&lt;/code&gt; calls if we wanted to give our Views more places to hook into the Layout ü§î.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#identify-what-needs-state"&gt;
  &lt;/a&gt;
  üî¨ Identify What Needs State
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;_Footer&lt;/code&gt; and &lt;code&gt;_Head&lt;/code&gt; Partials are simple and only a few lines of code. However, the &lt;code&gt;_Header&lt;/code&gt; Partial we created is 88 lines long. It includes a Razor code block, has multiple conditional statements, and 2 navigation blocks üò® (header navigation and the 'additional' navigation).&lt;/p&gt;

&lt;p&gt;The Razor code block in the view is often a code smell - it indicates we are executing some logic in our View. This specific code block not only executes some logic, but it also access application state - the &lt;code&gt;@ViewContext&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;_Header&lt;/code&gt; Partial also accesses state through the &lt;code&gt;ClaimsPrincipal User&lt;/code&gt; and the &lt;code&gt;HttpContext Context&lt;/code&gt; properties of the Razor page. While these properties are accessible from the Razor view, I like to think of them as a convenience and not necessarily something that should be used when considering best practices for larger applications.&lt;/p&gt;

&lt;p&gt;Any time we have logic in our Layout (or Partials), and especially when we are accessing application state, I see it as an opportunity to leverage a View Component instead of a Partial ü§ì.&lt;/p&gt;

&lt;p&gt;View Components have access to the same context specific state (like &lt;code&gt;ViewContext&lt;/code&gt;, &lt;code&gt;User&lt;/code&gt;, and  &lt;code&gt;Context&lt;/code&gt;) but they are more testable and appropriate for C# code and logic üëçüèº.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#header-view-component"&gt;
  &lt;/a&gt;
  Header View Component
&lt;/h4&gt;

&lt;p&gt;The only portion of the &lt;code&gt;_Header&lt;/code&gt; Partial using this context state is the contents of the &lt;code&gt;&amp;lt;ul class="additional-menu"&amp;gt;&lt;/code&gt; element, so let's use that as the starting point for our View Component.&lt;/p&gt;

&lt;p&gt;Let's create a new View Component &lt;code&gt;~/Components/ViewComponents/HeaderMenu/HeaderMenuViewComponent.cs&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HeaderMenuViewComponent&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ViewComponent&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IViewComponentResult&lt;/span&gt; &lt;span class="nf"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;cultureCode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ViewContext&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RouteData&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"culture"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;currentCultureCode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cultureCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;currentLanguage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentCultureCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"es-es"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s"&gt;"ES"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"EN"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isCultureSelectorVisible&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpStatusCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HeaderMenuViewModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;currentLanguage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;isCultureSelectorVisible&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"~/Components/ViewComponents/HeaderMenu/_HeaderMenu.cshtml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="nf"&gt;HeaderMenuViewModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;IsUserAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;CurrentLanguage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;IsCultureSelectorVisible&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We've moved all of the logic of our View into the View Component class and created a View Model &lt;code&gt;record&lt;/code&gt; that represents the state we need to expose to the View, with property names that have a clear purpose.&lt;/p&gt;

&lt;p&gt;We can now move the &lt;code&gt;&amp;lt;ul class="additional-menu"&amp;gt;&lt;/code&gt; element and its contents into &lt;code&gt;~/Components/ViewComponents/HeaderMenu/_HeaderMenu.cshtml&lt;/code&gt; add a &lt;code&gt;@model DancingGoat.Components.ViewComponents.HeaderMenu.HeaderMenuViewModel&lt;/code&gt; directive at the top of the file, and use the View Model properties instead of the context helper properties.&lt;/p&gt;

&lt;p&gt;We can see the effect this has on the culture selector in the View Component View ü§©:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@if (Model.IsCultureSelectorVisible)
{
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dropdown"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dropbtn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@Model.CurrentLanguage&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dropdown-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;culture-link&lt;/span&gt; &lt;span class="na"&gt;link-text=&lt;/span&gt;&lt;span class="s"&gt;"English"&lt;/span&gt; &lt;span class="na"&gt;culture-name=&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;culture-link&lt;/span&gt; &lt;span class="na"&gt;link-text=&lt;/span&gt;&lt;span class="s"&gt;"Espa√±ol"&lt;/span&gt; &lt;span class="na"&gt;culture-name=&lt;/span&gt;&lt;span class="s"&gt;"es-ES"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can now update the &lt;code&gt;~/Views/Shared/_Header.cshtml&lt;/code&gt; Partial, replacing the former location of &lt;code&gt;&amp;lt;ul class="additional-menu"&amp;gt;&lt;/code&gt; with a reference to our View Component &lt;code&gt;&amp;lt;vc:header-menu /&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;data-ktc-search-exclude&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"@Url.Kentico().PageUrl(ContentItemIdentifiers.HOME)"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo-link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo-image"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Dancing Goat"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"~/Content/Images/logo.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;vc:navigation&lt;/span&gt; &lt;span class="na"&gt;footer-navigation=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;vc:header-menu&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- üòÉ --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"search-mobile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;asp-action=&lt;/span&gt;&lt;span class="s"&gt;"Index"&lt;/span&gt; &lt;span class="na"&gt;asp-controller=&lt;/span&gt;&lt;span class="s"&gt;"Search"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"get"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"searchBox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"searchtext"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"@HtmlLocalizer["&lt;/span&gt;&lt;span class="na"&gt;Search&lt;/span&gt;&lt;span class="err"&gt;"]"&lt;/span&gt; &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"search-box-btn"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#if-tag-helper"&gt;
  &lt;/a&gt;
  If Tag Helper
&lt;/h4&gt;

&lt;p&gt;Coming from ASP.NET MVC 5 in Kentico 12, we are probably used to seeing Html Helper calls and Razor statements all over our Views.&lt;/p&gt;

&lt;p&gt;I've found that adopting &lt;a href="https://docs.microsoft.com/en-US/aspnet/core/mvc/views/tag-helpers/intro?view=aspnetcore-5.0"&gt;Tag Helpers&lt;/a&gt;, which look much more like HTML, leads to more readable Views. As a bonus, if you've had experience with any client-side JavaScript frameworks, like React, Vue, or Angular, ASP.NET Core Tag Helpers are going to look like the server-side equivalents of what those frameworks already support.&lt;/p&gt;

&lt;p&gt;To this end, it could be nice üòè to replace the Razor &lt;code&gt;@if()&lt;/code&gt; syntax with a Tag Helper. First, let's see what we're working with:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dropdown-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    @if (Model.IsUserAuthenticated)
    {
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;asp-controller=&lt;/span&gt;&lt;span class="s"&gt;"Account"&lt;/span&gt; &lt;span class="na"&gt;asp-action=&lt;/span&gt;&lt;span class="s"&gt;"YourAccount"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            @HtmlLocalizer["Your&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;account"]
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;asp-controller=&lt;/span&gt;&lt;span class="s"&gt;"Account"&lt;/span&gt; 
                            &lt;span class="na"&gt;asp-action=&lt;/span&gt;&lt;span class="s"&gt;"Logout"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; 
                   &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"@HtmlLocalizer["&lt;/span&gt;&lt;span class="na"&gt;Sign&lt;/span&gt; &lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="err"&gt;"]"&lt;/span&gt; 
                   &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sign-out-button"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    }
    else
    {
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;asp-controller=&lt;/span&gt;&lt;span class="s"&gt;"Account"&lt;/span&gt; &lt;span class="na"&gt;asp-action=&lt;/span&gt;&lt;span class="s"&gt;"Register"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            @HtmlLocalizer["Register"]
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;asp-controller=&lt;/span&gt;&lt;span class="s"&gt;"Account"&lt;/span&gt; &lt;span class="na"&gt;asp-action=&lt;/span&gt;&lt;span class="s"&gt;"Login"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            @HtmlLocalizer["Login"]
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    }
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Using the &lt;code&gt;&amp;lt;if&amp;gt;&lt;/code&gt; Tag Helper detailed by Andrew Lock in &lt;a href="https://andrewlock.net/creating-an-if-tag-helper-to-conditionally-render-content/"&gt;this blog post&lt;/a&gt;, we can update our View to look more HTML-ish:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dropdown-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;if&lt;/span&gt; &lt;span class="na"&gt;include-if=&lt;/span&gt;&lt;span class="s"&gt;"Model.IsUserAuthenticated"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;asp-controller=&lt;/span&gt;&lt;span class="s"&gt;"Account"&lt;/span&gt; &lt;span class="na"&gt;asp-action=&lt;/span&gt;&lt;span class="s"&gt;"YourAccount"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            @HtmlLocalizer["Your&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;account"]
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;asp-controller=&lt;/span&gt;&lt;span class="s"&gt;"Account"&lt;/span&gt; 
                            &lt;span class="na"&gt;asp-action=&lt;/span&gt;&lt;span class="s"&gt;"Logout"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; 
                   &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"@HtmlLocalizer["&lt;/span&gt;&lt;span class="na"&gt;Sign&lt;/span&gt; &lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="err"&gt;"]"&lt;/span&gt; 
                   &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sign-out-button"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;if&lt;/span&gt; &lt;span class="na"&gt;exclude-if=&lt;/span&gt;&lt;span class="s"&gt;"Model.IsUserAuthenticated"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;asp-controller=&lt;/span&gt;&lt;span class="s"&gt;"Account"&lt;/span&gt; &lt;span class="na"&gt;asp-action=&lt;/span&gt;&lt;span class="s"&gt;"Register"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            @HtmlLocalizer["Register"]
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;asp-controller=&lt;/span&gt;&lt;span class="s"&gt;"Account"&lt;/span&gt; &lt;span class="na"&gt;asp-action=&lt;/span&gt;&lt;span class="s"&gt;"Login"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            @HtmlLocalizer["Login"]
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/if&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is a matter of taste ü•™, but I've found many of the ASP.NET Core Tag Helpers to be much more readable than their Html Helper and Razor syntax equivalents (including the &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/built-in/partial-tag-helper?view=aspnetcore-5.0"&gt;Partial Tag Helper&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/view-components?view=aspnetcore-5.0#invoking-a-view-component-as-a-tag-helper"&gt;View Component Tag Helper&lt;/a&gt; we've already used).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  üß† Conclusion
&lt;/h2&gt;

&lt;p&gt;We've reduced the size of the Dancing Goat &lt;code&gt;_Layout.cshtml&lt;/code&gt; file from 160 lines to 27 and the largest Partial or View Component View that we now have from our refactoring is the &lt;code&gt;_HeaderMenu.cshtml&lt;/code&gt; at 64 lines.&lt;/p&gt;

&lt;p&gt;We could continue the refactoring with additional View Components or Partial Views to reduce that size even further - likely separating the Avatar markup and Login/Register links next. I'll leave that task for the now-very-capable reader üòÅ.&lt;/p&gt;

&lt;p&gt;By identifying a problematic area of the application, the tools that ASP.NET Core puts at our disposal, and applying some common refactoring patterns, we've created a clean an maintainable Layout.&lt;/p&gt;

&lt;p&gt;Let me know ‚úç your patterns and practices for Layouts in Kentico Xperience applications in the comments below...&lt;/p&gt;

&lt;p&gt;As always, thanks for reading üôè!&lt;/p&gt;


Photo by &lt;a href="https://unsplash.com/@markusspiske"&gt;Markus Spiske
&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/kentico-xperience-design-patterns-good-startup-cs-hygiene-3klm"&gt;Kentico Xperience Design Patterns: Good Startup.cs Hygiene &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/layout?view=aspnetcore-5.0"&gt;ASP.NET Core Docs - Layouts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kenbellows/stop-using-so-many-divs-an-intro-to-semantic-html-3i9i"&gt;Stop using so many divs! An intro to semantic HTML &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.xperience.io/installation/quick-installation#Quickinstallation-StartingtheDancingGoatsamplesite"&gt;Kentico Xperience Docs - Dancing Goat Sample Site Installation Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devnet.kentico.com/articles/kentico-xperience-sample-sites-and-their-differences"&gt;Kentico Xperience sample sites and their differences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#directives"&gt;ASP.NET Core Docs - Razor Directives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.martinfowler.com/bliki/CodeSmell.html"&gt;Martin Fowler - Code Smells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/partial?view=aspnetcore-5.0"&gt;ASP.NET Core Docs - Partial Views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/view-components?view=aspnetcore-5.0"&gt;ASP.NET Core Docs - View Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/dependency-injection?view=aspnetcore-5.0"&gt;ASP.NET Core Docs - View Service Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/kentico-xperience-13-beta-3-page-builder-view-components-in-asp-net-core-onm"&gt;Kentico Xperience 13 Beta 3 - Page Builder View Components in ASP.NET Core &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/kentico-xperience-design-patterns-mvc-is-dead-long-live-ptvc-4635"&gt;Kentico Xperience Design Patterns: MVC is Dead, Long Live PTVC &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;Single-Responsibility Principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-US/aspnet/core/mvc/views/tag-helpers/intro?view=aspnetcore-5.0"&gt;ASP.NET Core Docs - Tag Helpers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://andrewlock.net/creating-an-if-tag-helper-to-conditionally-render-content/"&gt;Andrew Lock - If Tag Helper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;We've put together a list over on &lt;a href="https://github.com/Kentico/Home/blob/master/RESOURCES.md"&gt;Kentico's GitHub account&lt;/a&gt; of developer resources. Go check it out!&lt;/p&gt;

&lt;p&gt;If you are looking for additional Kentico content, checkout the Kentico or Xperience tags here on DEV.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5339"&gt;
  
    .ltag__tag__id__5339 .follow-action-button{
      background-color:  !important;
      color:  !important;
      border-color:  !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/kentico" class="ltag__tag__link"&gt;kentico&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag__tag ltag__tag__id__57801"&gt;
  
    .ltag__tag__id__57801 .follow-action-button{
      background-color:  !important;
      color:  !important;
      border-color:  !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/xperience" class="ltag__tag__link"&gt;xperience&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Or my &lt;a href="https://dev.to/seangwright/series"&gt;Kentico Xperience blog series&lt;/a&gt;, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/series/8185"&gt;Kentico Xperience Xplorations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/series/9483"&gt;Kentico Xperience MVC Widget Experiments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/series/8740"&gt;Bits of Xperience&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>xperience</category>
      <category>kentico</category>
      <category>aspnetcore</category>
      <category>csharp</category>
    </item>
    <item>
      <title>6 Topics Developers Should Prepare for Coding Interviews</title>
      <author>javinpaul</author>
      <pubDate>Mon, 12 Jul 2021 15:51:32 +0000</pubDate>
      <link>https://dev.to/javinpaul/6-topics-developers-should-prepare-for-coding-interviews-2fim</link>
      <guid>https://dev.to/javinpaul/6-topics-developers-should-prepare-for-coding-interviews-2fim</guid>
      <description>&lt;p&gt;image_credit - Educative.io&lt;br&gt;
&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is no doubt cracking the Coding interviews of top tech companies like Google, Microsoft, and Amazon is very hard, but you can still crack it by carefully planning and preparing the essential skills which matter most like &lt;a href="https://javarevisited.blogspot.com/2018/01/top-5-free-data-structure-and-algorithm-courses-java--c-programmers.html"&gt;Data structures and Algorithms&lt;/a&gt;, &lt;a href="https://www.java67.com/2018/05/top-20-system-design-interview-questions-answers-programming.html"&gt;System Design&lt;/a&gt;,&lt;a href="https://javarevisited.blogspot.com/2018/06/top-5-java-multithreading-and-concurrency-courses-experienced-programmers.html"&gt;Multithreading and Concurrency&lt;/a&gt;,&lt;a href="https://javarevisited.blogspot.com/2018/05/top-5-sql-and-database-courses-to-learn-online.html"&gt;SQL and Database design&lt;/a&gt;, and of course, &lt;strong&gt;problem-solving skills&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Being an author of Java and a programming blog, I often receive queries about &lt;strong&gt;how to prepare for coding interviews?&lt;/strong&gt; &lt;em&gt;How to pass Google or Microsoft Software Developer interviews?&lt;/em&gt; Or how can I get a software development job on Amazon or Facebook?&lt;/p&gt;

&lt;p&gt;After answering many of my readers one by one on Facebook and LinkedIn, I thought to put together a list of &lt;em&gt;essential topics for coding interviews&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This list will give a good head-start for your preparation for any tech company interview like Google and Amazon. However, even if you are not targeting Google and just want a Software developer job, you can still prepare these topics.&lt;/p&gt;

&lt;p&gt;In fact, preparing for tech giants like Google, Amazon, Apple, and Facebook means you are miles ahead of other candidates, and you will most likely secure many job offers from smaller firms, startups, and investment banks.&lt;/p&gt;

&lt;p&gt;That's why I suggest aiming higher because even if you don't get what you want, you will still get job offers that are desirable by many programmers.&lt;/p&gt;

&lt;p&gt;Another critical thing to note is that different interviews need different skills. For example, when you go for a &lt;a href="https://javarevisited.blogspot.com/2020/04/top-10-courses-to-crack-java-programming-interviews.html"&gt;Java developer interview&lt;/a&gt;, you are bound to know Java. Similarly, for a Python developer interview, it's expected you to know Python and some popular Python frameworks like &lt;a href="https://javarevisited.blogspot.com/2019/04/top-5-python-web-development-frameworks.html"&gt;Django&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2020/01/top-5-courses-to-learn-flask-for-web-development-with-python.html"&gt;Flask&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a Web developer, HTML, CSS, and JavaScript are core skills, and you will be grilled on those, apart from modern web development frameworks like &lt;a href="https://javarevisited.blogspot.com/2018/06/5-best-courses-to-learn-angular.html"&gt;Angular&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-react-js-and-redux-courses-to-learn-online.html#axzz5r06B3egD"&gt;React&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2019/08/top-5-online-courses-to-learn-vue.js-best.html"&gt;Vue.js&lt;/a&gt;, with a bit of &lt;a href="https://medium.com/javarevisited/7-free-courses-to-learn-node-js-in-2020-2f1dd6722b49"&gt;node.js&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;I'll not touch, that topic but I'll share essential skills that are required to pass all of those interviews. They are also known as core programming skills, and it's expected from every Software developer to know that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-essential-topics-for-coding-and-programming-interviews"&gt;
  &lt;/a&gt;
  5 Essential Topics for Coding and Programming Interviews
&lt;/h2&gt;

&lt;p&gt;Anyway, without wasting any more of your time, here is my list of topics you can prepare to boost your chances on Google, Amazon, and Microsoft Programming Job Interviews.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-data-structure"&gt;
  &lt;/a&gt;
  1. Data Structure
&lt;/h3&gt;

&lt;p&gt;As a programmer, it's Ok if you cannot write web apps using &lt;a href="https://javarevisited.blogspot.com/2020/07/top-5-courses-to-learn-django-in-2020.html"&gt;Django&lt;/a&gt; or &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-react-js-and-redux-courses-to-learn-online.html#axzz5r06B3egD"&gt;React,&lt;/a&gt; but it's Not Ok if you don't know how a hash table works and when to use a list over an array? And, &lt;strong&gt;what advantages B-Tree offers over an array?&lt;/strong&gt; Data Structure and Algorithms are the core of computer science and programming, and it's expected for every software developer to have a solid knowledge of fundamental data structure.&lt;/p&gt;

&lt;p&gt;It's imperative to have a good understanding of data structure for writing a robust, performant application that your users will appreciate. &lt;/p&gt;

&lt;p&gt;Imagine, if Facebook or Google taking 1 minute to log you in, you will never go there, forget how important they are. Performance is critical, and unless you understand how your program is working and how your data is stored, you will not go anywhere.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://medium.com/hackernoon/10-data-structure-algorithms-and-programming-courses-to-crack-any-coding-interview-e1c50b30b927"&gt;&lt;em&gt;technical interviews&lt;/em&gt;&lt;/a&gt;, you will be asked to optimize your solution for time and space. You can't do that unless you have a solid understanding of how your code works and how data is stored and accessed.&lt;/p&gt;

&lt;p&gt;This is probably the most important topic for coding interviews and you should prepare it well. At a bare minimum, you should know about the &lt;a href="https://javarevisited.blogspot.com/2015/06/top-20-array-interview-questions-and-answers.html#axzz5dCg1cNYo"&gt;array&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2017/07/top-10-linked-list-coding-questions-and.html"&gt;linked list&lt;/a&gt;, &lt;a href="https://www.java67.com/2020/02/top-40-binary-tree-interview-questions.html"&gt;binary trees&lt;/a&gt;, binary search tree, self-balanced trees like AVL tree, hash table(or map or dictionaries as known in Java and Python) stack, queue, and graph.&lt;/p&gt;

&lt;p&gt;You should understand how to store and access elements from these data structures and the computing cost involved. You should also have a comparative analysis of when to use a particular data structure like for a faster search array, and the hash table is better. Still, for faster addition and deletion, a linked list will outperform an array.&lt;/p&gt;

&lt;p&gt;If you need a resource to get up to speed, I suggest you pick a data structure course where examples are shown in the language you are most comfortable with. For Java developers, I recommend&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;Data Structure and Algorithms: Deep Dive in Java&lt;/a&gt;, and for Python Programmers, I recommend Algorithms and Data Structure in Python course on Udemy. You can check out that course &lt;a href="https://medium.com/javarevisited/top-10-free-data-structure-and-algorithms-courses-for-beginners-best-of-lot-ad807cc55f7a"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRrK8AzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-DuGEAa13JmU/XnlpMlXqVlI/AAAAAAAAdfw/OcAHHxFcGII_LXwEdqosKekMBx5gAYQFACLcBGAsYHQ/w400-h283/balance%252Btree%252Bdata%252Bstructure.png" alt="5 Essential Topics for Coding Interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-algorithms"&gt;
  &lt;/a&gt;
  2. Algorithms
&lt;/h3&gt;

&lt;p&gt;While it's important to know the essential data structure like an array, linked list, and trees, it's equally important to learn how to work with those data structures. If you don't know the difference between linear search and binary search algorithms, and what it means to run in O(log n) as opposed to O(n^2), you need to spend some time learning algorithms.&lt;/p&gt;

&lt;p&gt;This can often be the difference between a fine-tuned application and a slow, crappy process that hangs more than it works. At a bare minimum, you should know about sorting algorithms like &lt;a href="https://javarevisited.blogspot.com/2014/08/quicksort-sorting-algorithm-in-java-in-place-example.html"&gt;quicksort&lt;/a&gt;, &lt;a href="https://www.java67.com/2018/03/mergesort-in-java-algorithm-example-and.html"&gt;mergesort&lt;/a&gt;, heapsort, etc. searching algorithms like binary search, and some graph algorithms like fastest route-finding algorithms, which are the base of many deliveries and taxi-hailing apps like Uber, Grab, and Ola.&lt;/p&gt;

&lt;p&gt;You should also understand how the library methods you are using for sorting an array work, which algorithm it uses internally, and when a different algorithm would do a better job.&lt;/p&gt;

&lt;p&gt;I strongly suggest you prepare for this topic in depth. If you need a resource, Thomas H. Cormen's "&lt;a href="http://www.amazon.com/dp/0072970545/?tag=javamysqlanta-20"&gt;Introduction to Algorithms,"&lt;/a&gt; is the most recommended resource, but it's not for the faint-hearted. For a less intimidating entry, I would recommend the &lt;a href="https://www.amazon.com/Grokking-Algorithms-illustrated-programmers-curious/dp/1617292230/?tag=javamysqlanta-20"&gt;Grokking Algorithms&lt;/a&gt; book by Aditya Bhargava and Algorithms course on Coursera.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/grokking-algorithms-book-review-aa4459da93f5"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKq2f6jN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-fEUTaD_iF2s/XnloZVAGWRI/AAAAAAAAdfo/0ipeAFEos8Qprf_ebUGjYCbyg20Va70ZgCLcBGAsYHQ/w400-h275/Grokking%252BAlgorithms%252BBook%252BReview.png" alt="Data structure and algorithms for coding interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-system-design"&gt;
  &lt;/a&gt;
  3. System Design
&lt;/h3&gt;

&lt;p&gt;This is another crucial topic you need to prepare well for your programming job interviews, especially at big tech companies like &lt;a href="https://medium.com/javarevisited/5-best-programming-languages-to-get-a-sofware-developer-job-in-google-3d8c83c444d6"&gt;Google&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2015/12/30-microsoft-interview-questions-for-software-development-engineers.html"&gt;Microsoft&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2016/01/top-20-amazon-and-google-programming-interview-questions.html"&gt;Amazon&lt;/a&gt;, and Facebook. You need to have some ideas about how to design your solution from architecture to coding.&lt;/p&gt;

&lt;p&gt;System design is actually very vast. At a high level, it covers things like software architecture, I mean the advantage between monolithic and microservice architecture and choosing between a &lt;a href="https://javarevisited.blogspot.com/2019/03/top-5-nosql-database-web-developers-should-learn.html#ixzz64aBvbXQ4"&gt;NoSQL&lt;/a&gt; and &lt;a href="https://medium.com/hackernoon/top-5-sql-and-database-courses-to-learn-online-48424533ac61"&gt;SQL database&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It covers things like how we will design an application that can handle 10000 concurrent users? And includes things like scalability.&lt;/p&gt;

&lt;p&gt;At a low level, it covers Object-Oriented Programming and Design, which talk about designing your classes and their relationships, following good coding practices, and software design principles like SOLID.&lt;/p&gt;

&lt;p&gt;Because of this, many candidates struggle to answer system design questions, and if you want to succeed, you must put particular emphasis on this skill. If you need a resource, I recommend you to checking about the &lt;a href="https://www.educative.io/collection/5668639101419520/5649050225344512?affiliate_id=5073518643380224"&gt;Grokking System Design Interview&lt;/a&gt; course on Educative, which is prepared by people who served as hiring managers on those tech companies, and it also walks you through common system design interview questions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/collection/5668639101419520/5649050225344512?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHdlm6oF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-kjkuBo81alA/XnloK-9Z4dI/AAAAAAAAdfg/UMYVaPpsRIMmTeA_33OQuEr_D7C251N5gCLcBGAsYHQ/w400-h320/System%252Bdesign%252Binterview%252Bquestions%252Bbig.png" alt="Software design for coding interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Object-Oriented design and analysis, I recommend the Head First Object-Oriented design book to learn fundamentals and &lt;strong&gt;&lt;a href="https://www.educative.io/collection/5668639101419520/5692201761767424?affiliate_id=5073518643380224"&gt;Grokking the Object-Oriented Interviews&lt;/a&gt;&lt;/strong&gt; course on Educative for some practice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-multithreading-and-concurrency"&gt;
  &lt;/a&gt;
  4. Multithreading and Concurrency
&lt;/h3&gt;

&lt;p&gt;Concurrency is one of the most desired skills by employers, and also one of the most advanced topics brought up in interviews. Because it shows your ability to design a program that efficiently uses resources but at the same time it's a very tricky topic to master and that's why interviewers love it. &lt;/p&gt;

&lt;p&gt;Concurrency can also be used to gauge your expertise and technical depth and is often uses as a key deciding factor in your overall hiring level.&lt;/p&gt;

&lt;p&gt;Whether you are just entering your career or are looking to switch jobs, it never hurts to dedicate some time to mastering concurrency. &lt;/p&gt;

&lt;p&gt;At a bare minimum, you should know about threads, processes, shared memory, monitors, locks, critical section, and deferred callbacks. Having a good knowledge of how to avoid race conditions and deadlock can be even better.&lt;/p&gt;

&lt;p&gt;Practicing classical concurrency interview questions like &lt;a href="https://www.java67.com/2012/12/producer-consumer-problem-with-wait-and-notify-example.html"&gt;Producer-Consumer&lt;/a&gt;, Dining Philosopher, and others can also teach you a lot about concurrency and multithreading and give you the confidence to visualize how code and data work when multiple threads run in parallel.&lt;/p&gt;

&lt;p&gt;If you have an interviewing coming up, then I highly suggest you double down on concurrency. This is because I know it can be one of the most challenging topics brought up during most of the interviews, even for experienced developers. However, gaining a mastering concurrency will put you at a considerable advantage over other candidates.&lt;/p&gt;

&lt;p&gt;If you need resources, I strongly suggest you check out &lt;a href="https://www.educative.io/courses/java-multithreading-for-senior-engineering-interviews?affiliate_id=5073518643380224"&gt;Multithreading and Concurrency Interview Questions&lt;/a&gt; by C.H. Afzal on Educative. This course contains the most common concurrency interview questions solved in Python, Java, C#, and Ruby. Going through those questions will give you a good background on Concurrency and Multithreading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/java-multithreading-for-senior-engineering-interviews?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVqCbNIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-plCdIflEBXE/Xnln6-bmnEI/AAAAAAAAdfY/YEjBC7jCi8sd6Lb6FVIEfbGf_NyJ_fSZgCLcBGAsYHQ/w400-h275/Dining%252Bphilosopher%252Bproblem%252BConcurrency%252Band%252BParallel%252Bprogramming.png" alt="Concurrency for Coding Interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-sql-and-database-design"&gt;
  &lt;/a&gt;
  5. SQL and Database Design
&lt;/h3&gt;

&lt;p&gt;As a software developer, working with a relational database is a critical skill that you'll need, and it will stick with you no matter where you are in your career. Every company from small to large uses a DBMS, so it's likely that you will come across different data models, type so databases (&lt;a href="https://medium.com/javarevisited/5-best-mongodb-courses-to-learn-nosql-for-beginners-in-2020-42df5af5496c"&gt;NoSQL&lt;/a&gt; and &lt;a href="https://www.java67.com/2018/02/5-free-database-and-sql-query-courses-programmers.html"&gt;SQL&lt;/a&gt;), and dependencies on various companies.&lt;/p&gt;

&lt;p&gt;Knowing how to structure your data within a DBMS is critical. Should you use an entity-relationship (ER), model? A hierarchical model? A three-schema architecture? &lt;/p&gt;

&lt;p&gt;The choices can be intimidating, but it's good to know about the different ways to structure your data as that when you switch database vendors like from Oracle to SQL Server or PostgreSQL, you can plugin with minimal hand-coding.&lt;/p&gt;

&lt;p&gt;As a programmer, you should also know about SQL, not just the syntax but also how the database actually runs your query and how joins are executed, how to index are used, and the difference between table scan, index scan, and index seek. These details are not just important from the coding interview perspective but also from day-to-day jobs.&lt;/p&gt;

&lt;p&gt;If you need resources, I suggest you go through with &lt;a href="https://www.educative.io/courses/database-design-fundamentals?affiliate_id=5073518643380224"&gt;&lt;strong&gt;Database Design Fundamentals for Software Engineers&lt;/strong&gt;&lt;/a&gt;, where you will learn about the different concepts and techniques you can use to structure your data and explore why you should use particular approaches for certain problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fsqldatabases%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9A0t43JE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-cGqkK0dY1ng/XnlnOXoo6FI/AAAAAAAAdfM/RBOvOMdpfYolZa_AQ_faZp0OOTTxB7QYgCLcBGAsYHQ/w400-h311/sql%252Bjoins%252Bguide%252Band%252Bsyntax.jpg" alt="SQL and Database for coding interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will also be exposed to technique likes normalization, help to increase the efficiency o the database, and avoid duplication. I also suggest you go through an SQL-focused course like &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-complete-sql-bootcamp%2F"&gt;The Complete SQL BootCamp&lt;/a&gt;&lt;/strong&gt; by Jose Portilla on Udemy as SQL queries are also an essential part of coding interviews along with database design. I also suggest Use The Index Luke book to better understand how SQL query works in general.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-aws-docker-and-kubernetes"&gt;
  &lt;/a&gt;
  6. AWS, Docker, and Kubernetes
&lt;/h3&gt;

&lt;p&gt;While these five are definitely must-have skills for coding interviews, employers are nowadays also looking for modern tech skills like AWS, Docker, and Kubernetes, which makes them important topics for technical interviews.&lt;/p&gt;

&lt;p&gt;Since cloud computing is the next big thing and this decade of software development will be cloud-native, it's better for a software developer to know about Cloud and modern deployment tools like &lt;strong&gt;&lt;a href="https://javarevisited.blogspot.com/2018/02/10-free-docker-container-courses-for-Java-Developers.html"&gt;Docker&lt;/a&gt;&lt;/strong&gt; and &lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-courses-to-learn-docker-and-kubernetes-for-devops.html"&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is also important if you want to stay ahead of the curve and give a reason to your employer to hire you than the next candidate in line. For AWS and Cloud, one more thing you can do is to get a certification, not that because you can't get a job without certification but to learn better and get recognition for your skill.&lt;/p&gt;

&lt;p&gt;For AWS, I suggest you at least have an &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-crack-aws-certified-cloud-practitioner-exam-certification-clf-c01.html"&gt;&lt;strong&gt;AWS Cloud Practitioner certification&lt;/strong&gt;&lt;/a&gt; to showcase necessary cloud skills, and if you prefer Microsoft Azure, then Azure Fundamentals (&lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-crack-az-900-microsoft-azure-fundamentals-certification-exam.html"&gt;AZ-900&lt;/a&gt;) is an excellent certification to start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-amazon-web-services-aws-cloud-in-2020-best-and-free-317f10d7c21d"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4d5n8cJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-AizMAMwEXbs/XnlpW-sSFtI/AAAAAAAAdf8/Em4EO2S1X7YkNzmFhOEyv4o0OwKoXv4KgCLcBGAsYHQ/w400-h233/4.%252BLearn%252BAmazon%252BWeb%252BServices%252B%252528AWS%252529%252BThe%252BComplete%252BIntroduction%252BUdemy%252Bcourse.gif" alt="tech skills for developers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker is a container, which allows you to run your application as a whole, along with all the dependencies. This makes both development and deployment easier, particularly for &lt;a href="https://medium.com/javarevisited/top-5-courses-to-learn-microservices-in-java-and-spring-framework-e9fed1ba804d"&gt;Microservices&lt;/a&gt;. Since the container makes cloud deployment more manageable, and they are also easier for the manager to scaling up and down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/06/top-5-courses-to-learn-kubernetes-for-devops-and-certification.html"&gt;Kubernetes&lt;/a&gt; is a container orchestration tool, which means it can use manager containers at scale. &lt;/p&gt;

&lt;p&gt;It's easy to deploy and manage a few boxes, but when you have to deploy 100s of container for your application for a promotion event like Amazon prime Sale and then need to take it down once traffic return to normalcy is not easy. Kubernetes can do that for you and provide automation and peace of mind.&lt;/p&gt;

&lt;p&gt;While both Docker and Kubernetes are not mandatory skills for a programmer but definitely essential from the Job perspective. I recommend every Software developer or aspiring programmer to learn Docker and Kubernetes, and if you need a resource, Stephen Grider's online course -** &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fdocker-and-kubernetes-the-complete-guide%2F"&gt;Docker and Kubernetes: The Complete Guide&lt;/a&gt;** on Udemy is a great starting point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javarevisited/top-15-online-courses-to-learn-docker-kubernetes-and-aws-for-fullstack-developers-and-devops-d8cc4f16e773"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpBb0kfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-TsB64ri7usY/Xnlp9m2G9bI/AAAAAAAAdgQ/f_QFl2M5EgUkmn21zxLG8VwnQ7r-Z-trQCLcBGAsYHQ/w400-h247/Docker%252Band%252BKubernetes%252B2.png" alt="key skills for software developers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about some of the most &lt;strong&gt;important skills and topics you can prepare to crack the coding interview&lt;/strong&gt; of companies like Google, Microsoft, Apple, Facebook, and Amazon. Along with sills, I have also listed some of the best books and courses you can take to learn those skills and better prepared for your next coding interview.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Programming and Java Articles you May like&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/02/10-courses-to-prepare-for-programming-job-interviews.html#axzz5oeVu3CYQ"&gt;10 courses to crack Coding Interviews in 2021&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2019/05/10-great-resources-for-programming-job-interview-questions.html"&gt;10 Websites to Practice Coding Problems&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/06/10-books-to-prepare-technical-coding-job-interviews.html"&gt;10 Books to Prepare Technical Programming/Coding Job Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2015/09/top-10-algorithm-books-every-programmer-read-learn.html"&gt;10 Algorithm Books Every Programmer Should Read&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2016/05/5-free-data-structure-and-algorithm-books-in-java.html#axzz4uXETWjmV"&gt;Top 5 Data Structure and Algorithm Books for Java Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.freecodecamp.org/these-are-the-best-free-courses-to-learn-data-structures-and-algorithms-in-depth-4d52f0d6b35a"&gt;My favorite free courses to learn Algorithms in depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2019/02/top-10-free-algorithms-and-data.html"&gt;10 Free Data Structure Courses for Java Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/top-10-free-courses-to-learn-aws-in-2020-529e"&gt;Top 10 Free Courses to learn AWS in 2021&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-maven-jenkins-and-docker-for-java-developers-51fa7a1e66f6"&gt;10 Free Courses to learn Docker for Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/101-coding-problems-and-few-tips-to-crack-your-next-programming-interviews-402a"&gt;10 Tips and 101 Coding Problems to Crack Programming Interview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-best-system-design-courses-for-coding-interviews-949fd029ce65"&gt;10 Best System Design courses for Coding interviews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-best-system-design-courses-for-coding-interviews-949fd029ce65"&gt;6 Best Dynamic Programming Courses for Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2018/06/data-structure-and-algorithm-interview-questions-programmers.html"&gt;100+ Data Structure and Coding Problems for Interviews&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you find these *Coding interview skills and topics*useful, then please share them with your friends and colleagues. If you have any questions or feedback, then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are aiming for FAANG (Facebook, Amazon, Apple, NetFlix, and Google) companies then I also suggest you join the &lt;strong&gt;&lt;a href="https://academy.zerotomastery.io/p/master-the-coding-interview-faang-interview-prep?affcode=441520_zytgk2dn"&gt;Master the Coding Interview: Big Tech (FAANG) Interviews&lt;/a&gt;&lt;/strong&gt; course by Andrei Negaoie on ZTM Academy. FAANG interviews are toughest to crack and this course is a valuable resource to crack FAANG interviews.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>coding</category>
      <category>algorithms</category>
      <category>datastructure</category>
    </item>
  </channel>
</rss>
