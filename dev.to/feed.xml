<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Developer Student Clubs</title>
      <author>kaline</author>
      <pubDate>Fri, 09 Apr 2021 03:12:45 +0000</pubDate>
      <link>https://dev.to/kaline/developer-student-clubs-5dah</link>
      <guid>https://dev.to/kaline/developer-student-clubs-5dah</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yx3ZHary--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7pbmcg1b2rrm6sf94gl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yx3ZHary--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7pbmcg1b2rrm6sf94gl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#o-que-%C3%A9-o-dsc"&gt;
  &lt;/a&gt;
  O que é o DSC?
&lt;/h6&gt;

&lt;p&gt;Os Developer Student Clubs são grupos comunitários baseados em universidades para alunos interessados ​​nas tecnologias desenvolvidas pela Google. Alunos de todos os programas de graduação ou pós-graduação com interesse em crescer como desenvolvedores são bem-vindos. Ao ingressar em um DSC, os alunos aumentam seus conhecimentos em um ambiente de aprendizagem ponto a ponto e criam soluções para empresas locais e sua comunidade.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#como-eu-me-tornei-uma-dsc-lead"&gt;
  &lt;/a&gt;
  Como eu me tornei uma DSC Lead?
&lt;/h6&gt;

&lt;p&gt;Eu me tornei uma DSC Lead submetendo um um formulário no site oficial do DSC, no qual pedia informações referentes a meus soft skills e hard skills, por exemplo, havia perguntas sobre minhas habilidades comunicativas e sociais e também sobre projetos nos quais eu já havia participado, também é importante destacar na submissão comunidades de tecnologia no qual você participa ou já tenha participado. Além das perguntas, também é pedido a submissão de um vídeo de um minutos falando sobre um dos três tópicos: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Por que você é apaixonado por tecnologia?&lt;/li&gt;
&lt;li&gt;Por que você gostaria de se tornar um DSC Lead?&lt;/li&gt;
&lt;li&gt;Conte um problema que pode ser observado no seus campus.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu escolhi o último tópico, porque ele influencia diretamente na minha motivação de estar no mundo da tecnologia, no qual resolver problemas que afetam pessoas (porque são pessoas que usam tecnologia, principalmente) e daí surge minha paixão que, consequentemente me motiva a ser uma DSC Lead para eu possa compartilhar a minha paixão com outros estudantes que se interessam por tecnologias e queiram resolver problemas reais com ela.&lt;br&gt;
Eu estava me sentindo muito confiante quando submeti meu formulário para o DSC, como se de algumaa forma fazer parte do DSC fosse meu destino e, assim um sentimento de acolhimento e união surge na minha mente. No entanto, a vida não é tão linear assim, mas quatro dia após a submissão recebi um email de aprovação, esta notícia me fez entrar em um flow sem fim para me preparar para a entrevista... &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9eD2CeOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m304vys4gg3zb1hyb0r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9eD2CeOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m304vys4gg3zb1hyb0r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No outro dia (uma quinta-feira quente do Ceará), este flow foi interrompido bruscamente quando recebi um email informando que eu não fui aprovada no programa, no qual eu tanto amava já! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tc4IPnln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2l5gt39u48a927nothu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tc4IPnln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2l5gt39u48a927nothu.png" alt="Reprovação"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Eu chorei, mas ainda não conformada, eu enviei um email para meu entrvistador (sem resposta!) e, após a segunda-feira, no qual seria a minha entrevista, considerando que eu já havia marcado com o link do calendário que me foi enviado com o email de aprovação, entãuo eu esperei durante meia hora e ninguém apareceu, depois de reenviar um email para meu entrevistador (sem reposta, novamente...), eu enviei uma mensagem para o Linkedln da Erica Hanson, a líder global do DSC, no qual ela me respondeu afirmando que as inscrições para o programa já haviam encerrado no Brasil, mas que o formulário ainda estava aberto, porque em outros países ainda estava ocorrendo.&lt;br&gt;
A reposta da Erica Hanson me conformou e aceitei meu destino de não fazer parte do DSC e aquilo se tornou somente uma ideia agradável de uma realidade na qual eu poderia estar em um universo paralelo. Então, no outro dia, eu recebi um email de confirmação para eu me tornar uma DSC Lead (sem ter feito a entrevista!):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_2IT2bX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evzgbxw55n9b56st1os6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_2IT2bX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evzgbxw55n9b56st1os6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Então no mesmo dia fui entrevistada pela gerente do DSC no Brasil, a Amanda Manzini. &lt;/p&gt;

&lt;p&gt;Eu estava tão animada que não me importei nem ensaiar para a entrevista, parecia um sonho que me faz dormir mais.&lt;br&gt;
Finalmente, tornar-se uma DSC Lead não parou na entrevista, é um processo sem fim que, cada vez mais percebo que meu conhecimento é bem pequeno comparado ao que existe e que outras pessoas sabem e podem me ensinar. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Agradeço a grande oportunidade de crescimento proporcionada &amp;gt; pela Erica Hanson por me ajudar a fazer parte deste  &amp;gt; programa que moldou grande parte da minha forma de pensar &amp;gt; atualmente.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>studentcommnity</category>
    </item>
    <item>
      <title>Private Docker Repository</title>
      <author>James Linden</author>
      <pubDate>Fri, 09 Apr 2021 01:17:56 +0000</pubDate>
      <link>https://dev.to/kodekrash/private-docker-repository-4ij5</link>
      <guid>https://dev.to/kodekrash/private-docker-repository-4ij5</guid>
      <description>&lt;p&gt;The &lt;a href="https://docs.docker.com/registry/deploying/"&gt;normal way to setup a private Docker repository&lt;/a&gt; is to simply use the container which has it all setup. This works really well for a lot of cases. I recently deployed a private repo where I need an implementation that was a bit easier to manage with existing tooling and infrastructure. Basically, this meant not running docker for the repo and integration with an existing authentication framework.&lt;/p&gt;

&lt;p&gt;Instructions are CentOS 7 specific, but shouldn't be too hard to map to your distribution of choice.&lt;/p&gt;

&lt;p&gt;nginx is used as a proxy to terminate TLS and handle the federated authentication, leaving the docker repository service running on localhost only. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;

&lt;p&gt;Repos: CentOS Extras, Docker-CE, (possibly EPEL)&lt;br&gt;
Packages: docker-distribution, docker-ce, nginx&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configure"&gt;
  &lt;/a&gt;
  Configure
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#dockerdistribution"&gt;
  &lt;/a&gt;
  docker-distribution
&lt;/h3&gt;

&lt;p&gt;I only customized the rootdirectory and http addr. See Docker's &lt;a href="https://docs.docker.com/registry/configuration/"&gt;documentation&lt;/a&gt;.&lt;br&gt;
/etc/docker-distribution/registry/config.yml (select parts)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;
&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;registry&lt;/span&gt;
&lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;layerinfo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;inmemory&lt;/span&gt;
  &lt;span class="na"&gt;filesystem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;rootdirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/path/to/storage/repo&lt;/span&gt;
&lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
   &lt;span class="na"&gt;addr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;localhost:5000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nginx"&gt;
  &lt;/a&gt;
  nginx
&lt;/h3&gt;

&lt;p&gt;(Not including SSL and federated authentication)&lt;/p&gt;

&lt;p&gt;/etc/nginx/conf.d/docker.conf&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;myrepo.mydomain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;# omit SSL directives here&lt;/span&gt;
   &lt;span class="kn"&gt;client_max_body_size&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;# This just has a simple HTML info page&lt;/span&gt;
   &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/path/to/storage/docroot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;# proxy docker API&lt;/span&gt;
   &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/v2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-Server&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-Proto&lt;/span&gt; &lt;span class="nv"&gt;$scheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="s"&gt;myrepo.mydomain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://localhost:5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  docker
&lt;/h3&gt;

&lt;p&gt;(This is optional. I use it to do local admin and some maintenance scripts.&lt;/p&gt;

&lt;p&gt;/etc/docker/daemon.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"data-root"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/path/to/storage/root"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-and-test"&gt;
  &lt;/a&gt;
  Run and Test
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dockerdistribution"&gt;
  &lt;/a&gt;
  docker-distribution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;systemctl start docker-distribution
systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;docker-distribution
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#verify"&gt;
  &lt;/a&gt;
  Verify
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:5000/v2/_catalog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Should return an empty repository list&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"repositories"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nginx"&gt;
  &lt;/a&gt;
  nginx
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;systemctl start nginx
systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#verify"&gt;
  &lt;/a&gt;
  Verify
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://myrepo.mydomain/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Should return whatever you put at /path/to/storage/docroot/index.html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://myrepo.mydomain/v2/_catalog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Should return an empty repository list&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"repositories"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  docker
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;systemctl start docker
systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#verify"&gt;
  &lt;/a&gt;
  Verify
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Should return some information about your docker installation (including the customized root path).&lt;/p&gt;




&lt;p&gt;You have now setup a local Docker repository which will work just like the docker container based one.&lt;/p&gt;

</description>
      <category>docker</category>
    </item>
    <item>
      <title>Understanding Atomics and Memory Ordering</title>
      <author>kprotty</author>
      <pubDate>Fri, 09 Apr 2021 00:33:25 +0000</pubDate>
      <link>https://dev.to/kprotty/understanding-atomics-and-memory-ordering-2mom</link>
      <guid>https://dev.to/kprotty/understanding-atomics-and-memory-ordering-2mom</guid>
      <description>&lt;p&gt;Atomics and Memory Ordering always feel like an unapproachable topic. In the sea of poor explanations, I wish to add another by describing how I reason about all of this mess. This is only my understanding so if you need a better/formal explanation, I recommend reading through the memory model for your given programming language. In this case, it would be the C11 Memory Model described at &lt;a href="https://en.cppreference.com/w/cpp/atomic/memory_order"&gt;cppreference.com&lt;/a&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#shared-memory"&gt;
  &lt;/a&gt;
  Shared Memory
&lt;/h1&gt;

&lt;p&gt;Software and hardware is getting closer to the limits of performance when it comes to single-threaded execution of code. In order to continue scaling compute performance, a popular solution is to introduce multiple single-threaded execution units - or multi-threading. This form of computation manifests itself at different abstraction levels from multiple cores in a CPU to multiple CPUs in a machine and even multiple machines across a network. This post will be focusing more on cores in a CPU, referring to them as “threads”.&lt;/p&gt;

&lt;p&gt;For some workloads, the tasks can be divided cleanly and split off to the threads for execution. Such tasks are known as &lt;a href="https://en.wikipedia.org/wiki/Embarrassingly_parallel"&gt;embarrassingly parallel&lt;/a&gt; and need not communicate with each other. This is the ideal that multithreaded algorithms should strive for since it takes advantage of all the existing optimizations available for single-threaded execution. However this isn't always possible and it's sometimes necessary for tasks to communicate and coordinate with each other, which is why we need to share memory between threads.&lt;/p&gt;

&lt;p&gt;Communication is hard when your code is running in a preemptive scheduling setting. Such an environment means that, at any point, your code can be interrupted in order for other code to run. In applications, the operating system kernel can decide to switch from running your program to run another. In the kernel, hardware can switch from running kernel code to running interrupt handler code. Switching tasks around like this is known as concurrency and in order to synchronize/communicate, we need a way to exclude that concurrency for a small time frame or we risk operating with incomplete/partial data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#atomics"&gt;
  &lt;/a&gt;
  Atomics
&lt;/h1&gt;

&lt;p&gt;Fortunately, CPUs supply software with special instructions to operate on shared memory which can't be interrupted. These are known as atomic memory operations and fit into three categories: Loads, Stores, and ReadModifyWrites (RMW). The first two are self explanatory. RMW is also pretty descriptive: it allows you to load data from memory, operate on the data, and store the result back into memory - all atomically. You may know RMW operations as atomic &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/nf-winnt-interlockedincrement"&gt;increment&lt;/a&gt;, &lt;a href="https://en.cppreference.com/w/cpp/atomic/atomic/exchange"&gt;swap&lt;/a&gt;, or &lt;a href="https://en.wikipedia.org/wiki/Compare-and-swap"&gt;compare and swap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To do something "atomically" means that it must happen (or be observed to happen) in its entirety or not at all. This implies that it cannot be interrupted. When something is "atomic", tearing (i.e. partial completion) of the operation cannot be observed. Atomic operations allow us to write code that can work with shared memory in a way that's safe against concurrent interruption.&lt;/p&gt;

&lt;p&gt;Another thing about atomics is that they're the only sound (i.e. correctly defined) way to interact with shared memory when there's at least one writer and possibly multiple readers/writers to the shared memory. Trying to do so without atomics is considered a &lt;a href="https://en.wikipedia.org/wiki/Race_condition#Data_race"&gt;data race&lt;/a&gt; which is &lt;a href="https://en.cppreference.com/w/cpp/language/ub"&gt;undefined behavior&lt;/a&gt; (UB). UB is the act of relying on an assumption outside of your target program model (in our case, the C11 memory model). Doing so is unreliable as the compiler or cpu is allowed to do anything outside of its model.&lt;/p&gt;

&lt;p&gt;Data races and the UB it implies isn’t just a theoretical issue. One of the single-threaded optimizations I mentioned earlier involves either the CPU or the compiler caching memory reads and writes. If you don’t use atomic operations, the operation itself could be ellided and replaced with its cached result which could break the logic of your code fairly easily:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# should be an atomic_load() but its data race
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;

&lt;span class="c1"&gt;# a potential single-threaded optimization
&lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;cached&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# possibly infinite loop!
&lt;/span&gt;    &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#reordering"&gt;
  &lt;/a&gt;
  Reordering
&lt;/h1&gt;

&lt;p&gt;Atomics solve communication only on atomically accessed memory; but not all memory being communicated can be accessed atomically. CPUs generally expose atomic operations for memory that's at most a few bytes large. Trying to do any other sort of general purpose memory communication means we need a way to make this memory available to threads with other means.&lt;/p&gt;

&lt;p&gt;Making memory available to other threads is actually trickier than it sounds. Let's check out this code example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;has_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# Thread 1
&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;atomic_store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;has_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Thread 2
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;atomic_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;has_data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first glance, this looks like it would work. Even if each thread were preempted between each instruction (line of code here), it seems the assert() should always succeed. Based on my wording, you've probably caught on that this assert() can actually fail! The reason for this is due to another single-threaded optimization called reordering.&lt;/p&gt;

&lt;p&gt;Hardware (CPU) or software (the compiler as well) can decide to move around (i.e. “reorder”) your code and instructions any way they please as long as the end result is the same as the source code’s intent. This sort of “instruction scheduling” freedom allows for a variety of optimizations to take place.&lt;/p&gt;

&lt;p&gt;One example of reordering is via speculative execution. This is when the CPU starts executing code that hasn't been reached yet, in the opportunistic chance that the results can be ready when that code is eventually reached. This is an amazing single-threaded throughput optimization, but it means that the &lt;code&gt;atomic_store()&lt;/code&gt; can be started before the &lt;code&gt;write()&lt;/code&gt;, or the &lt;code&gt;read()&lt;/code&gt; can be started before the &lt;code&gt;atomic_load()&lt;/code&gt;; both of which could make the assert() fail.&lt;/p&gt;

&lt;p&gt;Another example of reordering is by CPU caches. CPUs don't read/write directly to shared memory since that's &lt;a href="https://gist.github.com/jboner/2841832"&gt;relatively slow&lt;/a&gt;. Instead, each CPU core has its own fast-access, local memory called cache. Most memory operations are performed on a CPU's cache and eventually flushed to / refreshed from to other caches in a process called &lt;a href="https://en.wikipedia.org/wiki/Cache_coherence"&gt;Cache Coherency&lt;/a&gt;. In our example, the &lt;code&gt;atomic_store()&lt;/code&gt; could have flushed from cache to shared memory before the &lt;code&gt;write()&lt;/code&gt; does (e.g. if flushing is done LIFO), or the &lt;code&gt;atomic_load()&lt;/code&gt; could refresh in cache before the &lt;code&gt;read()&lt;/code&gt; is; both of which could cause the assert() to fail.&lt;/p&gt;

&lt;p&gt;Even the compiler can reorder instructions, but only those without relationships called &lt;em&gt;dependencies&lt;/em&gt;. One instruction (line of code) is said to "depend" on a previous instruction if it uses the result from the previous one or if the previous one is a &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effect&lt;/a&gt;. The compiler is free to reorder instructions anywhere before their dependency, but not after. This means &lt;code&gt;a = 5; b = 10;&lt;/code&gt; can be reordered to &lt;code&gt;b = 10; a = 5;&lt;/code&gt; which keeps the same semantics (achieving the same thing) since "a" and "b" don't share a dependency with each other. If it were instead &lt;code&gt;a = 5; b = a + 1;&lt;/code&gt; then "a" can't be moved after "b" since it wouldn't make logical sense as "b" has a dependency on "a". In our example, &lt;code&gt;atomic_store()&lt;/code&gt; doesn't have a dependency on &lt;code&gt;write()&lt;/code&gt; so it can be moved around which can make the assert() fail.&lt;/p&gt;

&lt;p&gt;At this point it should be clear that instruction reordering is a thing and, when interacting with shared memory, you have to be aware of it. The problem is that &lt;strong&gt;atomic operations on their own don't prevent reordering&lt;/strong&gt;. We need an additional concept for atomics to do this. In C11, atomic operations take in another parameter called "memory ordering" which helps solve this problem.&lt;/p&gt;

&lt;p&gt;In our previous code example, there were two main issues: one of reordering and one of visibility. Memory orderings solve them by preventing code from being reordered around atomic operations and ensures that certain data or operations become visible or get conceptually "flushed/reloaded from cache". Lets see what this looks like.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#release-and-acquire"&gt;
  &lt;/a&gt;
  Release and Acquire
&lt;/h1&gt;

&lt;p&gt;We'll introduce two types of memory orderings for now: &lt;a href="https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering"&gt;Acquire and Release&lt;/a&gt;. Release goes on atomic stores and ensures that all memory operations declared before it actually happen before it. Acquire goes on atomic loads and ensures all memory operations declared after actually happen after it. This solves the reordering problem.&lt;/p&gt;

&lt;p&gt;We then declare one more constraint: All memory operations before a given Release can be observed to &lt;a href="https://en.wikipedia.org/wiki/Happened-before"&gt;happen-before&lt;/a&gt; a matching Acquire. You could think of it as changes from the Release becoming visible in a &lt;code&gt;git push&lt;/code&gt; manner to the Acquire which does a sort of &lt;code&gt;git pull&lt;/code&gt;. This solves the visibility problem.&lt;/p&gt;

&lt;p&gt;Let's add these to our code example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;has_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# Thread 1
&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;atomic_store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;has_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Thread 2
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;atomic_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;has_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Acquire&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;strong&gt;Release and Acquire don't do any sort of "waiting" or "blocking" for the data to become ready&lt;/strong&gt;. They aren't replacements for known synchronization primitives. Instead, they ensure that &lt;em&gt;if&lt;/em&gt; our atomic_load() sees &lt;code&gt;has_data&lt;/code&gt; to be True, &lt;em&gt;then&lt;/em&gt; it’s also guaranteed to see &lt;code&gt;write(&amp;amp;data, "hello")&lt;/code&gt; thanks to the matching Acquire and Release barriers so our assert should never fail.&lt;/p&gt;

&lt;p&gt;For ReadModifyWrite (RMW) atomic instructions, they can also take in a memory ordering called &lt;code&gt;AcqRel&lt;/code&gt;. Given RMW operations conceptually do both an atomic load and an atomic store, &lt;code&gt;AcqRel&lt;/code&gt; makes both operations Acquire and Release respectively. This is useful when you want an atomic operation which both 1) makes memory available to other threads via Release and 2) sees memory made available by other threads via Acquire.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fences-and-variables"&gt;
  &lt;/a&gt;
  Fences and Variables
&lt;/h2&gt;

&lt;p&gt;You'll notice that i've been saying &lt;em&gt;"matching Acquire/Release"&lt;/em&gt;. For our examples, the matching is from the load and store using the same "atomic variable' (&lt;code&gt;&amp;amp;has_data&lt;/code&gt;). Release and Acquires on different atomic variables don't synchronize with each other, it has to be the same atomic variable.&lt;/p&gt;

&lt;p&gt;There's an exception to the rule which manifests itself as fences. Fences are a way to establish memory orderings of normal and atomic memory operations without necessarily associating with one given memory op.&lt;/p&gt;

&lt;p&gt;Fences are a bit tricky for me as I have a hard time describing them, but they essentially create the happens-before relationship to surround atomics in a way that corresponds to the memory ordering being used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;fence(Release)&lt;/code&gt; creates a happens-before relationship with another &lt;code&gt;fence(Acquire)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;fence(Release)&lt;/code&gt; makes subsequent non-Release atomic stores into Release if they have a matching Acquire atomic load or matching &lt;code&gt;fence(Acquire)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;fence(Acquire)&lt;/code&gt; makes previous non-Acquire atomic loads into Acquire if they have a matching Release atomic store or matching &lt;code&gt;fence(Release)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example of how we could substitute the per-operation memory orderings with fences:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;has_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# Thread 1
&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;atomic_store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;has_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Thread 2
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;atomic_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;has_data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Acquire&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#case-study-mutex"&gt;
  &lt;/a&gt;
  Case Study: Mutex
&lt;/h2&gt;

&lt;p&gt;You may have also noticed that this section is called "Release and Acquire" instead of "Acquire and Release". This is done intentionally as having Acquire first often construes the happens-before relationship. Instead of thinking about lock(Acquire) and unlock(Release), it should instead be thought about unlock(Release) making critical section changes available to lock(Acquire):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;mutex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c1"&gt;# Thread 1 (assume locked)
&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;
    &lt;span class="n"&gt;fence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Thread 2 (assume unlocked)
&lt;/span&gt;    &lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Acquire&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Release ordering for a mutex only serves to "Release" the changes to the next mutex locker, who "Acquires" the previously released changes by the last mutex unlocker. The canonically backwards relationship better demonstrates the happens-before relationship between Release and Acquire compared to just saying &lt;em&gt;"lock() acquires and unlock() releases"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What we have created here is called a Partial Ordering. It's an ordering between two sets of (memory) operations. The reason it's "partial" is because it orders between sets instead of the individual operations themselves: The operations before a Release don't need to be observed happening in the order they were described for an Acquire, they just need to be observed to have happened &lt;em&gt;at all&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sequential-consistency"&gt;
  &lt;/a&gt;
  Sequential Consistency
&lt;/h1&gt;

&lt;p&gt;There are cases when you need certain atomic operations to be observed in a given order between each other. What we need now is a Total Ordering. This ensures there's some defined ordering between the operations themselves rather than a set of operations and is what the &lt;code&gt;SeqCst&lt;/code&gt; memory ordering is used for.&lt;/p&gt;

&lt;p&gt;Let's see another code example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt;

&lt;span class="c1"&gt;# Thread 1
&lt;/span&gt;&lt;span class="n"&gt;steal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atomic_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atomic_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;atomic_cas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c1"&gt;# Thread 2
&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;
    &lt;span class="n"&gt;atomic_store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atomic_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;atomic_cas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;atomic_store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is code taken from the implementation of a &lt;a href="https://fzn.fr/readings/ppopp13.pdf"&gt;LIFO Deque by Chase. Lev&lt;/a&gt;. What it does isn't necessarily important but it serves as a nice example when &lt;code&gt;SeqCst&lt;/code&gt; is actually needed. &lt;/p&gt;

&lt;p&gt;For pop(), we want to ensure that the store to &lt;code&gt;tail&lt;/code&gt; is observed to happen before the load to &lt;code&gt;head&lt;/code&gt;. If not, pop() may not see the items removed from steal(). Lets try to apply Acquire and Release to pop():&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;atomic_store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atomic_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Acquire&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This doesn't exactly do what we want: Release prevents stuff &lt;em&gt;before&lt;/em&gt; the store() being reordered after, and Acquire prevents stuff &lt;em&gt;after&lt;/em&gt; the load() being reordered before it. There's no guarantee that the store() and load() &lt;em&gt;themselves&lt;/em&gt; can't be reordered before/after each other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        other memory operations
    ^       |            
    |       X     store release----
    |                             |
    ----load acquire    X         |
                        |         v
        other memory operations
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to ensure that the atomic store() and load() stay in their declared order we either need an Acquire barrier on the store(), which we can semantically achieve using an RMW operation with AcqRel (&lt;code&gt;atomic_swap(&amp;amp;tail, t - 1, AcqRel)&lt;/code&gt;), or we need &lt;code&gt;SeqCst&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;atomic_store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SeqCst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atomic_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SeqCst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;SeqCst does two things here: It acts as a Release for stores / Acquire for loads as before, but it also ensures a total-ordering between all SeqCst operations. The total-ordering ensures that the store will be seen before the load for other totally-ordered operations. Because total-ordering only applies to other SeqCst ops, we need to apply SeqCst to everything that relies on the total-ordering. This includes the atomic load/cas in pop() as well as the atomic loads/cas in steal(). The total-ordering property also extends to &lt;code&gt;fence(SeqCst)&lt;/code&gt; so we can use those to achieve the same reordering effects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;steal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atomic_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;fence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SeqCst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atomic_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;atomic_store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;fence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SeqCst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atomic_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To be clear, &lt;code&gt;SeqCst&lt;/code&gt; shouldn't be used to somehow gain Acquire on stores or Release on loads. That can lead to incorrect usage: &lt;code&gt;store(SeqCst); load(Acquire)&lt;/code&gt; doesn't ensure that the store will not be reordered after the load() since the load() isn't a part of its total-ordering (it's not SeqCst as well).&lt;/p&gt;

&lt;p&gt;It should be used instead to enforce a total-ordering between multiple atomic variables and introduce partial ordering (Acquire/Release as before) which together can achieve the same effect. More emphasis that &lt;strong&gt;total ordering only applies to other SeqCst atomic operations&lt;/strong&gt; or to surrounding ops in relation to &lt;code&gt;fence(SeqCst)&lt;/code&gt;. See &lt;a href="https://github.com/rust-lang/nomicon/issues/166"&gt;this issue&lt;/a&gt; for more warnings.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#weak-orderings"&gt;
  &lt;/a&gt;
  Weak orderings
&lt;/h1&gt;

&lt;p&gt;In most cases you probably don't need total-ordering on operations for multiple atomic variables. Having the requirement for &lt;code&gt;SeqCst&lt;/code&gt; is pretty rare. In practice, &lt;code&gt;SeqCst&lt;/code&gt; is unfortunately often overused and a problematic sign that the programmer wasn't sure what memory ordering to use... Anyway, when you don't want total-ordering over different atomic variables and don't need partial ordering, you should reach for the &lt;a href="https://en.cppreference.com/w/cpp/atomic/memory_order#Relaxed_ordering"&gt;Relaxed&lt;/a&gt; memory ordering (also known as Monotonic under LLVM).&lt;/p&gt;

&lt;p&gt;All this does is ensure a total-order between all atomic operations &lt;strong&gt;to the same atomic variable&lt;/strong&gt;. In other words, other memory operations not on the same memory location can be reordered around it. So &lt;code&gt;store(X); load(Y)&lt;/code&gt; can be reordered around each other but &lt;code&gt;store(Y); load(Y)&lt;/code&gt; can't.&lt;/p&gt;

&lt;p&gt;All other memory orderings (Acquire/Release/AcqRel/SeqCst) inherit the Relaxed property of "single variable total-ordering" and are known to be "stronger" than it. Relaxed is useful for things like counters or generic single-atomic data that you just read, update, and check out. You cannot use this to synchronize other normal &lt;em&gt;or&lt;/em&gt; atomic memory operations.&lt;/p&gt;

&lt;p&gt;There are even cases where you don't need the total-ordering on the same atomic variable itself and just want to perform some memory operation atomically (i.e. to be free of data-races). For this, you would use the LLVM's &lt;a href="https://llvm.org/docs/Atomics.html#unordered"&gt;Unordered&lt;/a&gt; memory ordering. The need for this ordering is even more rare than the need for &lt;code&gt;SeqCst&lt;/code&gt;. Unordered also isn't even present in the C11 memory model (it only gets as "weak" as Relaxed).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hardware-quirks"&gt;
  &lt;/a&gt;
  Hardware Quirks
&lt;/h1&gt;

&lt;p&gt;On modern CPU instruction set architectures (ISA), normal memory operations are atomic by default. The upside is that you don't pay a price for Relaxed/Unordered memory orderings or atomic loads/stores vs normal operations. The downside is that data-races don't exist for the ISA so it's harder to know if you have one or not. Fortunately there are tools which can instrument your memory accesses to detect data races like LLVM's &lt;a href="https://clang.llvm.org/docs/ThreadSanitizer.html"&gt;ThreadSanitizer&lt;/a&gt; (TSAN).&lt;/p&gt;

&lt;p&gt;Certain CPU ISAs are known to have Total-Store-Ordering (TSO). This includes things like x86 and SPARC. Here, upon normal memory operations being atomic, they also get partial ordering for free. This means loads are Acquire by default and stores are Release by default. As before, you get the benefit of Release/Acquire operations having no overhead (besides inhibiting compiler optimizations) but it also has its downsides. In this case, it lets you be pretty free with orderings so your Relaxed code that should be Release/Acquire will work there but break on other architectures making it easy to write code with incorrect memory orderings.&lt;/p&gt;

&lt;p&gt;The "other" architectures mentioned are called Weakly-Ordered ISAs. This includes things like ARM, AARCH64, POWERPC, RISCV, MIPS, etc. Here, loads and stores are still atomic by default but they're only Relaxed and you pay prices for Acquire/Release. This means that getting ordering wrong gives you a higher chance of observing incorrect behavior. The weaker default orderings theoretically allow for more reordering opportunities by the CPU but this doesn't appear to matter in practice given how much better modern x86 CPUs are for cross-core communication in the general case.&lt;/p&gt;

&lt;p&gt;When it comes to Sequential Consistency however, there aren't really any platforms where you get this for free. &lt;code&gt;fence(SeqCst)&lt;/code&gt; in particular is generally the most costly since it often requires a full barrier to implement which prevents all forms of reordering. On x86, it's achieved with &lt;code&gt;mfence&lt;/code&gt; although &lt;a href="https://stackoverflow.com/a/50279772"&gt;it can be done cheaper&lt;/a&gt; using &lt;code&gt;lock&lt;/code&gt; prefixed instructions if you're not synchronizing write-combined memory instructions. SeqCst loads/stores often require either promotion to RMW ops or Acquire/Release barriers to keep their semantics. This may be why SeqCst operations are rumored to be "slow" (they really aren't).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Working with atomic operations requires reasoning about memory very differently than you would normally. You have to take into account both concurrency for the validity of your atomic algorithm, and reordering/visibility for the validity of your algorithm's memory access. It's no wonder that it's considered a challenging topic to tackle.&lt;/p&gt;

&lt;p&gt;Hopefully you have Acquired some of this Released information in a way which gives you more visibility into how all of this stuff works. There's more to discuss with atomics than presented here such as how to build correct atomic data structures, handling concurrent memory reclamation, and reducing synchronization. These are all interesting in their own right, but should be saved for another time.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>atomic</category>
      <category>llvm</category>
      <category>optimization</category>
    </item>
    <item>
      <title>5 JavaSript GitHub Repositories for Interview Prep!📝</title>
      <author>Pranav Birajdar</author>
      <pubDate>Fri, 09 Apr 2021 00:27:14 +0000</pubDate>
      <link>https://dev.to/prnvbirajdar/5-javasript-github-repositories-for-interview-prep-306h</link>
      <guid>https://dev.to/prnvbirajdar/5-javasript-github-repositories-for-interview-prep-306h</guid>
      <description>&lt;p&gt;I came to a bitter realization last week that most of my &lt;a href="https://pranav-birajdar.vercel.app/projects"&gt;projects&lt;/a&gt; so far have been built using frameworks and a bunch of NPM packages. If someone were to ask me about closures or the event loop, I am sure they were trolling me since such things don't exist in JS land.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ThsoSSW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60dh1g9j3ymiyyg166lp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ThsoSSW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60dh1g9j3ymiyyg166lp.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thus, I decided to spend most of this month, not on building another project but making sure that I know how JavaScript actually works under the hood. I have also decided to learn some fundamental computer science topics like Data Structures and Algorithms.&lt;/p&gt;

&lt;p&gt;I have found the following resources to be extremely helpful during this journey of improving my core JavaScript fundamentals:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-33-concepts-every-javascript-developer-should-know"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://github.com/leonardomso/33-js-concepts"&gt;33 Concepts Every JavaScript Developer Should Know&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;With almost 40k stars, I'm sure many of you already know of this amazing repo. However, I came across it just yesterday and I'm sure there are many who will find this useful.&lt;/p&gt;

&lt;p&gt;Taking this &lt;a href="https://medium.com/@stephenthecurt/33-fundamentals-every-javascript-developer-should-know-13dd720a90d1"&gt;article&lt;/a&gt; as an inspiration, this repo points to well-explained articles, blog posts, and videos about each JS topic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-javascript-algorithms-and-data-structures"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms and Data Structures&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--27SwYsye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dly1c533wc9sbof01hf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--27SwYsye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dly1c533wc9sbof01hf.gif" alt="Alt Text"&gt;&lt;/a&gt; Another amazing repo that presents JavaScript-based examples of many popular algorithms and data structures. Furthermore, each algorithm and data structure has related explanations and YouTube video links for further reading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-javascript-questions"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/lydiahallie/javascript-questions"&gt;JavaScript Questions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is an exhaustive list of example-based JavaScipt questions that will help test your core knowledge of JavaScript, refresh your knowledge a bit, or prepare for your coding interview! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQUVivkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0t8ia47ptl5q8yyc6yc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQUVivkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0t8ia47ptl5q8yyc6yc.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;a href="https://dev.to/lydiahallie"&gt;Lydia&lt;/a&gt;, the repo owner has some thorough articles about the JS concepts on DEV, so do check those out as well!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-you-dont-know-js"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You Don't Know JS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wFSWbaV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oujqazrz5nmg3i83ij5a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wFSWbaV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oujqazrz5nmg3i83ij5a.jpg" alt="Alt Text"&gt;&lt;/a&gt; Basically a holy grail for JS developers, this book series dives deep into the core mechanisms of the JavaScript language. Kyle Simpson, the author has made all the books available for &lt;a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/README.md"&gt;free&lt;/a&gt; online.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-clean-code-javascript"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;Clean Code JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Not necessarily interview-related, this repo is based on Robert C. Martin's book &lt;a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"&gt;Clean Code&lt;/a&gt;, adapted for JavaScript. It's a guide to producing readable, reusable, and refactorable software in JavaScript.&lt;/p&gt;

&lt;p&gt;It has tons of useful examples and can be handy for pair-programming or take-home challenges.&lt;/p&gt;

&lt;p&gt;These are the repositories I am currently using for my JS re-education. Please comment below if you have found any other resources to be more helpful and I will add them in a different post.&lt;/p&gt;

&lt;p&gt;Hope this was helpful. Happy coding! 👩‍💻🚀👨‍💻&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introducing the GitHub Security Overview | GitHub Security Center</title>
      <author>Davide Benvegnù</author>
      <pubDate>Fri, 09 Apr 2021 00:03:35 +0000</pubDate>
      <link>https://dev.to/n3wt0n/introducing-the-github-security-overview-github-security-center-56dm</link>
      <guid>https://dev.to/n3wt0n/introducing-the-github-security-overview-github-security-center-56dm</guid>
      <description>&lt;p&gt;The new GitHub Security Overview, commonly referred to as GitHub Security Center, consolidates in one place all the GitHub Advanced Security recommendations like the GitHub Code scanning results, the GitHub Secret Scanning, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;To showcase this important and long awaited new feature, I've create a video in which I go through how to access and how to use all the new features.&lt;/p&gt;

&lt;p&gt;Watch the full video here 🤓&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ChDykZU5M9s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/ChDykZU5M9s"&gt;Link to the video: https://youtu.be/ChDykZU5M9s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know below what you think! Do you have any other questions about Linters and Linting? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay tuned&lt;/strong&gt; because I will soon have another post and video about the &lt;strong&gt;GitHub Super Linter&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ChDykZU5M9s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>security</category>
      <category>devops</category>
      <category>devsecops</category>
    </item>
    <item>
      <title>Power Platform Hands-on Lab Environment Set-up in One-liner</title>
      <author>Justin Yoo</author>
      <pubDate>Fri, 09 Apr 2021 00:00:19 +0000</pubDate>
      <link>https://dev.to/azure/power-platform-hands-on-lab-environment-set-up-in-one-liner-5ame</link>
      <guid>https://dev.to/azure/power-platform-hands-on-lab-environment-set-up-in-one-liner-5ame</guid>
      <description>&lt;p&gt;Suppose you are a community leader or an instructor who will run a hands-on lab session for &lt;a href="https://powerplatform.microsoft.com/?WT.mc_id=power-23654-juyoo"&gt;Power Platform&lt;/a&gt;. You got content for it. Now it's time for setting up the lab environment. There are roughly three approaches for the preparation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ask the participants to bring their existing Power Platform environment,&lt;/li&gt;
&lt;li&gt;Ask the participants to set up their environment by themselves, or&lt;/li&gt;
&lt;li&gt;The session leader is preparing the environment for the participants to use.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each effort has its pros and cons like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;The first approach&lt;/strong&gt; would be the easiest and the most convenient for the instructor because it's based on the assumption that everyone is ready for the exercise. However, you never know if every participant has the same configurations as you expect. It really depends on their organisation's policy. After all, you, as the session leader, will probably suffer from a lot of unexpected circumstances.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The second one&lt;/strong&gt; can be convenient for you as the session leader. It might be as tricky as the first approach. Delegating the environment set-up efforts to the participants may make you free, but at the same time, you should provide an instructional document very thoroughly and carefully. Even if you do so, it entirely depends on the participants' capability. After all, you should start the lab session by confirming the environment set-up anyway.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The last option&lt;/strong&gt; goes to you as the session leader. You prepare everything for the participants. They just come, sit and practice. If you do this set-up by hand, it would be awful. You will not want to do that.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefore, as a hands-on lab session leader, I'm going to discuss how to automate all the provisioning process and minimise human intervention by running one PowerShell script.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The PowerShell script used in this post is downloadable from &lt;a href="https://github.com/devkimchi/PowerPlatform-Hands-on-Lab-Environment-Automatic-Provsioning"&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#oneliner-script"&gt;
  &lt;/a&gt;
  One-Liner Script
&lt;/h2&gt;

&lt;p&gt;Let's say you use the following information for the admin account.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tenant Name: &lt;code&gt;powerplatformhandsonlab&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Tenant URL: &lt;code&gt;powerplatformhandsonlab.onmicrosoft.com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Admin E-mail: &lt;code&gt;admin@powerplatformhandsonlab.onmicrosoft.com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Admin Password: &lt;code&gt;Pa$$W0rd!@#$&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this information, how can you set up the lab environment in just one go? Here's the &lt;a href="https://github.com/devkimchi/PowerPlatform-Hands-on-Lab-Environment-Automatic-Provsioning/blob/main/AzureAD/Set-Environment.ps1"&gt;entire script&lt;/a&gt; and you just run the command below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Wait, what? What's going on? Here's the magic. Let's find them together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-microsoft-365-tenant"&gt;
  &lt;/a&gt;
  Create Microsoft 365 Tenant
&lt;/h2&gt;

&lt;p&gt;The first step to do as the session leader is to create a &lt;a href="https://www.microsoft.com/microsoft-365?WT.mc_id=power-23654-juyoo"&gt;Microsoft 365&lt;/a&gt; tenant. Microsoft 365 offers a free trial for 30 days. It includes 25 seats, including the admin account, which is suitable for the lab. Click this link, &lt;a href="http://aka.ms/Office365E5Trial"&gt;http://aka.ms/Office365E5Trial&lt;/a&gt;, and create the Microsoft 365 E5 plan's trial tenant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lsP6d-M0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-01-en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsP6d-M0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-01-en.png" alt="Microsoft 365 E5 Trial Landing Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After filling out the form below, you get the trial tenant!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lMQ3xEDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-02-en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lMQ3xEDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-02-en.png" alt="Microsoft 365 E5 Trial Sign-up Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you've got a new tenant, let's configure the lab environment in PowerShell. &lt;strong&gt;Please note that you HAVE TO use the PowerShell console with the admin privilege&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#provisioning-order"&gt;
  &lt;/a&gt;
  Provisioning Order
&lt;/h2&gt;

&lt;p&gt;There is no particular order for the environment provisioning. However, I would recommend following this order because there's incompatibility found between PowerShell modules especially between Power Apps and AzureAD:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Activate Microsoft Dataverse for Power Platform Default Environment&lt;/li&gt;
&lt;li&gt;Add User Accounts&lt;/li&gt;
&lt;li&gt;Assign Microsoft 365 Roles to Accounts&lt;/li&gt;
&lt;li&gt;Assign Microsoft 365 Licenses to Accounts&lt;/li&gt;
&lt;li&gt;Assign Azure Roles to Accounts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you do the Microsoft Dataverse initialisation later than Azure AD, you will get an error. I'll discuss it later how to avoid it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To use any of the PowerShell module mentioned in this post, you need PowerShell v5.1 running on Windows. PowerShell Core (v6 and later) doesn't support this scenario. For more details about this, refer to this page, &lt;a href="https://docs.microsoft.com/microsoft-365/enterprise/connect-to-microsoft-365-powershell?WT.mc_id=power-23654-juyoo"&gt;Connect to Microsoft 365 with PowerShell&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#install-azuread-module"&gt;
  &lt;/a&gt;
  Install AzureAD Module
&lt;/h2&gt;

&lt;p&gt;You can add a new user account to a Microsoft 365 tenant through the &lt;a href="https://www.powershellgallery.com/packages/AzureAD/"&gt;&lt;code&gt;AzureAD&lt;/code&gt; module&lt;/a&gt;. As of this writing, the latest version of the module is &lt;code&gt;2.0.2.130&lt;/code&gt;. Use the &lt;code&gt;Install-Module&lt;/code&gt; cmdlet to install the module. If you append these two parameters, &lt;code&gt;-Force -AllowClobber&lt;/code&gt; (line #3), it always installs the newest version regardless it's already installed or not.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#login-to-azuread-as-admin"&gt;
  &lt;/a&gt;
  Log-in to AzureAD as Admin
&lt;/h2&gt;

&lt;p&gt;After installing the module, log into the Azure AD as the tenant admin. For automation, you should stay within the console. Therefore, the following command is more efficient for sign-in.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#add-user-accounts"&gt;
  &lt;/a&gt;
  Add User Accounts
&lt;/h2&gt;

&lt;p&gt;It's time to add user accounts. As the trial tenant includes 25 licenses, you can add up to 24 accounts. For more details to add a new user account, refer to this document, &lt;a href="https://docs.microsoft.com/microsoft-365/enterprise/create-user-accounts-with-microsoft-365-powershell?WT.mc_id=power-23654-juyoo"&gt;Create Microsoft 365 User Accounts with PowerShell&lt;/a&gt;. But you just run the following commands. Here are some assumptions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each user has the same password of &lt;code&gt;UserPa$$W0rd!@#$&lt;/code&gt; for convenience, and it's not allowed change (line #2-4).&lt;/li&gt;
&lt;li&gt;Each user has the same location where the tenant resides. For now, it's &lt;code&gt;KR&lt;/code&gt; (line #6).&lt;/li&gt;
&lt;li&gt;You need to create up to 24 accounts, so &lt;code&gt;ForEach-Object&lt;/code&gt; is the go (line #9).&lt;/li&gt;
&lt;li&gt;All user accounts created are added to the &lt;code&gt;$users&lt;/code&gt; array object (line #18).&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#assign-microsoft-365-roles-to-user-accounts"&gt;
  &lt;/a&gt;
  Assign Microsoft 365 Roles to User Accounts
&lt;/h2&gt;

&lt;p&gt;The user accounts need to have appropriate Microsoft 365 roles. As it's the hands-on lab configuration, you can assign the Power Platform admin role to each user account. For more details of the Microsoft roles assignment, refer to this &lt;a href="https://docs.microsoft.com/microsoft-365/enterprise/assign-roles-to-user-accounts-with-microsoft-365-powershell?WT.mc_id=power-23654-juyoo"&gt;Assign Admin Roles to Microsoft 365 User Accounts with PowerShell&lt;/a&gt; page. Run the following command to activate the Power Platform admin role.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The admin role has now been stored in the &lt;code&gt;$role&lt;/code&gt; object. Now, iterate the &lt;code&gt;$users&lt;/code&gt; array to assign the role.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#assign-license-to-user-accounts"&gt;
  &lt;/a&gt;
  Assign License to User Accounts
&lt;/h2&gt;

&lt;p&gt;To use Power Platform within the tenant, each user MUST have a license for it. You can assign the license through the PowerShell command. For more details, visit this &lt;a href="https://docs.microsoft.com/microsoft-365/enterprise/assign-licenses-to-user-accounts-with-microsoft-365-powershell?WT.mc_id=power-23654-juyoo"&gt;Assign Microsoft 365 licenses to user accounts with PowerShell&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;First of all, let's find out the licenses. As soon as you create the trial tenant, there SHOULD be only one license, whose name is &lt;code&gt;ENTERPRISEPREMIUM&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then, run the following command to assign the license to all users by iterating the &lt;code&gt;$users&lt;/code&gt; array.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;So far, you've completed automating processes to create a trial tenant, create user accounts, and assign roles and licenses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#activate-microsoft-dataverse-for-power-platform-default-environment"&gt;
  &lt;/a&gt;
  Activate Microsoft Dataverse for Power Platform Default Environment
&lt;/h2&gt;

&lt;p&gt;Power Platform internally uses &lt;a href="https://docs.microsoft.com/powerapps/maker/data-platform/data-platform-intro?WT.mc_id=power-23654-juyoo"&gt;Microsoft Dataverse&lt;/a&gt; as its database. Microsoft Dataverse is fundamentally essential for other Microsoft 365 services to use. You can also initialise it through PowerShell commands. For more details, visit the &lt;a href="https://docs.microsoft.com/power-platform/admin/powerapps-powershell?WT.mc_id=power-23654-juyoo#power-apps-cmdlets-for-administrators"&gt;Power Apps Cmdlets for Administrators&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;First, you need to install both PowerShell modules, &lt;a href="https://www.powershellgallery.com/packages/Microsoft.PowerApps.Administration.PowerShell/"&gt;Microsoft.PowerApps.Administration.PowerShell&lt;/a&gt; and &lt;a href="https://www.powershellgallery.com/packages/Microsoft.PowerApps.PowerShell/"&gt;Microsoft.PowerApps.PowerShell&lt;/a&gt;. Like the previous installation process, use the &lt;code&gt;-Force -AllowClobber&lt;/code&gt; option to install the modules or reinstall both if they already exist (line #3, 7).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Log into the Power Apps admin environment, using &lt;code&gt;$adminUpn&lt;/code&gt; and &lt;code&gt;$adminPW&lt;/code&gt; values.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You might not be able to log into the Power Apps admin environment with the following error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ILYCEr1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-03-en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ILYCEr1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-03-en.png" alt="Unable to Login to Power Apps Environment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's because the internal log-in process for both Microsoft 365 tenant and Power Apps environment are different from each other. If it happens to you, don't panic. Just open a new PowerShell console with an admin privilege and attempt to log in.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are some assumptions for the Microsoft Dataverse initialisation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initialise Microsoft Dataverse on the default environment (line #1),&lt;/li&gt;
&lt;li&gt;Follow the currency settings of the default environment (line #5), and&lt;/li&gt;
&lt;li&gt;Follow the language settings of the default environment (line #10).&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#assign-azure-subscription"&gt;
  &lt;/a&gt;
  Assign Azure Subscription
&lt;/h2&gt;

&lt;p&gt;Building &lt;a href="https://docs.microsoft.com/connectors/custom-connectors/?WT.mc_id=power-23654-juyoo"&gt;custom connectors&lt;/a&gt; is inevitable while using Power Platform. In this case, you might need to handle resources on Azure, which requires an Azure subscription. If you create the trial tenant for Microsoft 365, you can also activate the trial Azure subscription. As it requires credit card verification, it MUST be done within Azure Portal. If you log into Azure Portal with your admin account, you can see the following screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IMe_WAUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-04-en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IMe_WAUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-04-en.png" alt="Azure Subscription Trial Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Start&lt;/strong&gt; button to sign-up for the trial subscription.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aIMx39qE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-05-en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aIMx39qE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/04/automatic-provisioning-power-platform-hands-on-labs-environment-05-en.png" alt="Azure Subscription Trial Sign-up Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once completing the trial subscription, log in to Azure using the PowerShell command below. The &lt;code&gt;$adminCredential&lt;/code&gt; object is the same one used for Azure AD log-in.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You SHOULD install the &lt;a href="https://www.powershellgallery.com/packages/Az/"&gt;Az&lt;/a&gt; module beforehand.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;p&gt;Only a limited number of resources are available in the trial subscription. For custom connectors, mainly &lt;a href="https://docs.microsoft.com/azure/logic-apps/logic-apps-overview?WT.mc_id=power-23654-juyoo"&gt;Azure Logic Apps&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/azure/storage/?WT.mc_id=power-23654-juyoo"&gt;Asture Storage Account&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/azure/virtual-network/virtual-networks-overview?WT.mc_id=power-23654-juyoo"&gt;Azure Virtual Network&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/azure/api-management/api-management-key-concepts?WT.mc_id=power-23654-juyoo"&gt;Azure API Management&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/azure/cosmos-db/introduction?WT.mc_id=power-23654-juyoo"&gt;Azure Cosmos DB&lt;/a&gt; are supposed to use. Therefore, to use those resources, run the following command to register those resource providers.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then, assign the subscription to each user account. For Azure Roles, visit this &lt;a href="https://docs.microsoft.com/azure/role-based-access-control/role-assignments-powershell?WT.mc_id=power-23654-juyoo"&gt;Assign Azure Roles Using Azure PowerShell&lt;/a&gt; page for more details.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Instead of scoping the entire subscription to each user account, it's better to create a resource group for each user, scope to the resource group and assign it to each account. For the resource group, you need a location. In this example, &lt;code&gt;koreacentral&lt;/code&gt; is used.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;All users are now able to access to Azure resources for the exercise.&lt;/p&gt;




&lt;p&gt;So far, we've walked through how to automatically provision a Power Platform environment for hands-on labs, using PowerShell. Now, if you are going to run a hands-on lab session and need a new environment, simply run the code above. Then, it's all good to go!&lt;/p&gt;

</description>
      <category>azure</category>
      <category>microsoft365</category>
      <category>powerplatform</category>
      <category>handsonlab</category>
    </item>
    <item>
      <title>Challenge of Serverless: Database Connections</title>
      <author>Noah</author>
      <pubDate>Fri, 09 Apr 2021 00:00:15 +0000</pubDate>
      <link>https://dev.to/noahfschr/challenge-of-serverless-database-connections-21pk</link>
      <guid>https://dev.to/noahfschr/challenge-of-serverless-database-connections-21pk</guid>
      <description>&lt;p&gt;Designing a database for serverless, the biggest challenge in our mind was to build an infrastructure which supports per request pricing in a profitable way. We believe Upstash has achieved this. After we launched the product, we saw that there was another major challenge: Database connections!&lt;/p&gt;

&lt;p&gt;As you know, Serverless Functions scale from 0 to infinity. This means when your functions get a lot of traffic, the cloud provider creates new containers (lambda functions) in parallel and scales out your backend. If you create a new database connection within the function then you can rapidly reach the connection limit of your database.&lt;/p&gt;

&lt;p&gt;If you try to cache the connection outside the lambda functions then another problem occurs. When AWS freezes your Lambda function, it does not close the connection. So you may end up with many idle/zombie connections which can still threaten.&lt;/p&gt;

&lt;p&gt;This problem is not specific to Redis, it applies to all databases which rely on TCP connections (Mysql, Postgre, MongoDB etc). You can see the serverless community is creating solutions like &lt;a href="https://github.com/jeremydaly/serverless-mysql"&gt;serverless-mysql&lt;/a&gt;. These are client-side solutions. As Upstash, we have the advantage of implementing and maintaining the server-side. So we decided to mitigate the problem by monitoring the connections and evicting the idle ones. So here the algorithm: As max-concurrent-connection, we have two limits for a database, soft-limit and hard-limit. When a database reaches the soft-limit we start to terminate the idle connections. We continue to accept new connection requests until the hard-limit is reached. If the database reaches the hard limit then we start rejecting new connections.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connection-eviction-algorithm"&gt;
  &lt;/a&gt;
  Connection Eviction Algorithm
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if( current_connection_count &amp;lt; SOFT_LIMIT ) {
    ACCEPT_NEW_CONNECTIONS
}

if( current_connection_count &amp;gt; SOFT_LIMIT &amp;amp;&amp;amp; current_connection_count &amp;lt; HARD_LIMIT ) {
    ACCEPT_NEW_CONNECTIONS
    START_EVICTING_IDLE_CONNECTIONS
}

if( current_connection_count &amp;gt; HARD_LIMIT ) {
    REJECT_NEW_CONNECTIONS
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the max concurrent connection limits listed in the &lt;a href="https://docs.upstash.com/overall/databasetypes"&gt;Upstash docs&lt;/a&gt; are the soft limits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ephemeral-connections"&gt;
  &lt;/a&gt;
  Ephemeral Connections
&lt;/h3&gt;

&lt;p&gt;After deploying the above algorithm, we have seen a great decrease in the number of rejected connections in all regions. But still if you want to be on the safe side, you can solve the problem on your side too. Instead of reusing the connection, you can  open the Redis connection inside the function but also close them whenever you are done with Redis as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REDIS_URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/*
    do stuff with redis
    */&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="cm"&gt;/*
    do other stuff
    */&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;response&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code helps you to minimize the concurrent connection count. People ask about the latency overhead of new connections. Redis connections are known to be very lightweight.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#are-redis-connections-really-lightweight"&gt;
  &lt;/a&gt;
  Are Redis Connections Really Lightweight?
&lt;/h3&gt;

&lt;p&gt;We have run a benchmark test to see how lightweight the Redis connections are. In this test we compare the latency numbers of two approaches:&lt;/p&gt;

&lt;p&gt;1- EPHEMERAL CONNECTIONS: We do not reuse the connection. Instead we create a new connection for each command and close the connection immediately. We record the latency of client creation, ping() and client.quit() together. See the &lt;code&gt;benchEphemeral()&lt;/code&gt; method in the code section below.&lt;/p&gt;

&lt;p&gt;2- REUSE CONNECTIONS: We create a connection once and reuse the same connection for all commands. Here, we record the latency of &lt;code&gt;ping()&lt;/code&gt; operation. See the &lt;code&gt;benchReuse()&lt;/code&gt; method below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;benchReuse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hdr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="c1"&gt;// to μs&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ping&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="c1"&gt;// to μs&lt;/span&gt;
        &lt;span class="nx"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recordValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputPercentileDistribution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;benchEphemeral&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hdr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="c1"&gt;// to μs&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ping&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="c1"&gt;// to μs&lt;/span&gt;
        &lt;span class="nx"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recordValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputPercentileDistribution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See &lt;a href="https://github.com/upstash/redis-connection-benchmark"&gt;the repo&lt;/a&gt;, if you want to run the benchmark yourself.&lt;/p&gt;

&lt;p&gt;We ran this benchmark code in AWS EU-WEST-1 region in two different setups. The first setup is SAME ZONE where the client and database are in the same availability zone. The second setup is INTER ZONE where the client runs in a different availability zone than the database. We have used Upstash Standard type as database servers.&lt;/p&gt;

&lt;p&gt;We have seen the overhead of creating and closing a new connection (ephemeral approach) is only 75 microseconds (99th percentile). The overhead is very similar in the interzone setup (80 microseconds).&lt;/p&gt;

&lt;p&gt;Then we decided to repeat the same test inside AWS Lambda functions. The results were different. Especially when we set the memory of Lambda function low (128Mb), we have seen bigger overhead of Redis connections. We have seen latency overhead up to 6-7 msec inside AWS Lambda functions.&lt;/p&gt;

&lt;p&gt;Our conclusions about the Redis connections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redis connections are really lightweight on a system with a reasonable amount of CPU power. Even on t2.micro.&lt;/li&gt;
&lt;li&gt;CPU power with the default AWS Lambda configuration is very poor, which significantly increases the cost of TCP connections with respect to total execution time of the Lambda function.&lt;/li&gt;
&lt;li&gt;If you use Lambda functions with the default/minimum memory, then you would better cache the Redis connection outside the function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#frozen-container-gt-zombie-connection"&gt;
  &lt;/a&gt;
  Frozen Container =&amp;gt; Zombie Connection
&lt;/h3&gt;

&lt;p&gt;After realizing that connection can have notable overhead in some AWS Lambda setups, we decided to make further tests on &lt;code&gt;reusing connection&lt;/code&gt; in AWS Lambda. We have detected another issue. This was an edge case no one has reported yet.&lt;/p&gt;

&lt;p&gt;Here the timeline how it happens:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP1 - timer-0sec:&lt;/strong&gt; We send a request, caching the connection outside the lambda function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;REDIS_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;response&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;STEP2 - timer-5sec:&lt;/strong&gt; AWS freezes the container after a short time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP3 - time-60sec:&lt;/strong&gt; Upstash has a timeout of 60 seconds for idle connections. So it kills the connection, but can not get ACK from the client as it is frozen. So server connection goes into state &lt;a href="https://kb.iu.edu/d/ajmi"&gt;FIN_WAIT_2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP4 - time-90sec:&lt;/strong&gt; Upstash server kills the connection completely, exiting from FIN_WAIT_2 state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP5 - time-95sec:&lt;/strong&gt; Client sends the same request and gets ETIMEDOUT exception. Because the client assumes the connection is open but it is not.  🤦🏻 🤦🏻 🤦🏻&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP6 - time-396sec:&lt;/strong&gt; 5 minutes after the last request, AWS kills the container completely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP7 - time-400sec:&lt;/strong&gt; Client sends the same request this time it works well because the container is created from scratch so the initialization step is not skipped. A new connection is created.&lt;/p&gt;

&lt;p&gt;As you can see above, AWS thaws a container and reuses the connection. But the connection has been closed from the server side and it could not be communicated because the function was frozen. So there is a synchronization problem between Upstash evicting an idle connection and AWS handling an idle function. So if we kill an idle connection only after AWS terminates a function then there will not be any issue.&lt;/p&gt;

&lt;p&gt;We changed Upstash connection timeout to 310 seconds assuming that AWS terminates an idle function in 300 seconds. After this change, the problem disappeared. The problem here is AWS is not transparent when they terminate idle functions. So we need to continue testing and try to detect if the issue happens again.&lt;/p&gt;

&lt;p&gt;This issue is quite similar to &lt;a href="https://github.com/jeremydaly/serverless-mysql/issues/57#issuecomment-580144732"&gt;the issue&lt;/a&gt; seen on serverless-mysql library. In the comments, it has been suggested to retry the request upon the ETIMEDOUT exception. But retrying has two drawbacks. First you may retry a write request which might have been processed and timed out with a real network problem. The second problem is the extra latency of the failed request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphql-helps-too"&gt;
  &lt;/a&gt;
  GraphQL Helps Too
&lt;/h3&gt;

&lt;p&gt;One way to get rid of connection issues to have connectionless API. Upstash supports &lt;a href="https://docs.upstash.com/graphql/aboutgraphqlapi"&gt;GraphQL API&lt;/a&gt; in addition to Redis protocol. GraphQL is HTTP based so it does not have the connection limit issue. Check the docs for supported commands. Beware that GraphQL API has a latency overhead (about 5msec) over Redis protocol.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We customize Upstash databases for a smooth experience for serverless applications. Our new server-side algorithm removes inactive connections that AWS Lambda creates in abundance. You can minimize the number of connections by opening/closing your Redis client inside the Lambda function but this can have latency overhead if your function memory is less than 1GB.&lt;/p&gt;

&lt;p&gt;As a conclusion, our recommendation for the serverless use cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If your use case is latency sensitive (e.g. 6msec is big for you) then reuse the Redis client.&lt;/li&gt;
&lt;li&gt;If you experience a very high number of concurrent clients (over 1000) then reuse the Redis client.&lt;/li&gt;
&lt;li&gt;If your use case is not latency sensitive then open/close the Redis client inside the function.&lt;/li&gt;
&lt;li&gt;If your function has at least 1GB memory then open/close the Redis client inside the function.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>serverless</category>
      <category>database</category>
      <category>redis</category>
      <category>aws</category>
    </item>
    <item>
      <title>Bookmarklets - The Ultimate Web Tools - What they are and how to make them.</title>
      <author>𝐋𝐄𝑽𝐈𝑨𝐓𝐇𝐀𝐍 Programming</author>
      <pubDate>Thu, 08 Apr 2021 23:35:21 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/bookmarklets-what-they-are-and-how-to-make-them-3kb9</link>
      <guid>https://dev.to/leviathanprogramming/bookmarklets-what-they-are-and-how-to-make-them-3kb9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-bookmarklets"&gt;
  &lt;/a&gt;
  What are bookmarklets?
&lt;/h2&gt;

&lt;p&gt;If you are a developer, you might have probably used or heard of Bookmarklets once or twice in your coding journey.&lt;/p&gt;

&lt;p&gt;Bookmarklets are javascript extensions that you can add to your browser that almost anyone can use.  Developing one is extremely simple and super easy for anyone to use.&lt;br&gt;
They can do anything from simply making an alert popup box to making a post request with the fetch api.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-make-one"&gt;
  &lt;/a&gt;
  How to make one
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags in HTML can have javascript in their &lt;code&gt;href&lt;/code&gt; attribute.  An example would be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"javascript: alert('hello world');"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Anchor Tag&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you make that in HTML and drag it into your bookmarks bar, you have just added a bookmarklet to your browser.  It's that simple.&lt;/p&gt;

&lt;p&gt;Sometimes, to quickly view the stats of a certain site, I will make a bookmarklet that runs on the Fetch API so that it alerts me with all the information I need.&lt;/p&gt;

&lt;p&gt;Note that all the javascript in your bookmarklet &lt;strong&gt;has to be minified&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"javascript: fetch('https://api.website.com/endpoint').then((data) =&amp;gt; { alert('data'); })"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bookmarklets can control documents from their top level.  That means you can completely wipe the body content of a URL temporarily and replace it with something else.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"javascript: document.body.innerHTML = '&amp;lt;h1&amp;gt;Hacked&amp;lt;/h1&amp;gt;' })"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What will you make?  A bookmarklet to display your codepen pen live?  An extension to let you create a dev.to post in one click?  A bookmarklet to make yourself a temporary dark mode?  Go crazy!&lt;/p&gt;

&lt;p&gt;Don't forget to mention what you've made in the comments below!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I Created an Open-Source Music Player 🎵🎶</title>
      <author>Madza</author>
      <pubDate>Thu, 08 Apr 2021 23:30:17 +0000</pubDate>
      <link>https://dev.to/madza/i-created-an-open-source-music-player-53bh</link>
      <guid>https://dev.to/madza/i-created-an-open-source-music-player-53bh</guid>
      <description>&lt;p&gt;Some days ago I made a &lt;a href="https://dev.to/madza/hooray-i-created-my-first-portfolio-36li"&gt;post&lt;/a&gt; about how I created &lt;a href="https://madza.dev"&gt;madza.dev&lt;/a&gt;. One of the most exciting parts was to create an Audio player for the &lt;a href="https://madza.dev/music"&gt;Music section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I've been receiving some PMs about it, so I decided to elaborate a bit.&lt;/p&gt;

&lt;p&gt;As a &lt;a href="https://soundcloud.com/999madza"&gt;music producer&lt;/a&gt;, I started it as a component to play my own tracks. Tho, the more I worked on it, the more I knew I should turn it into something the community could benefit from, as well. &lt;/p&gt;

&lt;p&gt;So I made an open-source package from it. The one that you can install, set up the source for tracks, and customize the looks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8YD0I_7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.madza.dev/uploads/2021/04/1617835662_1090x521.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YD0I_7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.madza.dev/uploads/2021/04/1617835662_1090x521.gif" alt="Audio Player"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Links: 💻 &lt;a href="https://audioplayer.madza.dev/"&gt;Demo&lt;/a&gt;  📦 &lt;a href="https://www.npmjs.com/package/@madzadev/audio-player"&gt;NPM package&lt;/a&gt; 💿 &lt;a href="https://github.com/madzadev/audio-player"&gt;GitHub Source&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Play / Pause&lt;/li&gt;
&lt;li&gt;Next / Previous&lt;/li&gt;
&lt;li&gt;Repeat / Loop&lt;/li&gt;
&lt;li&gt;Progress slider&lt;/li&gt;
&lt;li&gt;Time left / Total&lt;/li&gt;
&lt;li&gt;Volume slider&lt;/li&gt;
&lt;li&gt;Search track&lt;/li&gt;
&lt;li&gt;Filter by genre&lt;/li&gt;
&lt;li&gt;Playlist items&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;madzadev&lt;/span&gt;&lt;span class="sr"&gt;/audio-playe&lt;/span&gt;&lt;span class="err"&gt;r
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@madzadev/audio-player&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@madzadev/audio-player/dist/index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tracks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://audioplayer.madza.dev/Madza-Chords_of_Life.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Madza - Chords of Life&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;house&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://audioplayer.madza.dev/Madza-Late_Night_Drive.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Madza - Late Night Drive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dnb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://audioplayer.madza.dev/Madza-Persistence.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Madza - Persistence&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dubstep&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Player&lt;/span&gt; &lt;span class="nx"&gt;trackList&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;trackList&lt;/code&gt; is the mandatory prop and requires to pass in an array consisting of objects with &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt; keys.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  Options
&lt;/h3&gt;

&lt;p&gt;The default values of available options props are displayed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Player&lt;/span&gt;
  &lt;span class="nx"&gt;trackList&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;includeTags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;includeSearch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;showPlaylist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;autoPlayNextTrack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#color-schemes"&gt;
  &lt;/a&gt;
  Color schemes
&lt;/h3&gt;

&lt;p&gt;You can further customize the player UI by editing the color variable below. Pre-defined color schemes are planned in the future.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`html {
          --tagsBackground: #9440f3;
          --tagsText: #ffffff;
          --tagsBackgroundHoverActive: #2cc0a0;
          --tagsTextHoverActive: #ffffff;
          --searchBackground: #18191f;
          --searchText: #ffffff;
          --searchPlaceHolder: #575a77;
          --playerBackground: #18191f;
          --titleColor: #ffffff; 
          --timeColor: #ffffff;
          --progressSlider: #9440f3;
          --progressUsed: #ffffff;
          --progressLeft: #151616;
          --volumeSlider: #9440f3;
          --volumeUsed: #ffffff;
          --volumeLeft:  #151616;
          --playlistBackground: #18191f;
          --playlistText: #575a77;
          --playlistBackgroundHoverActive:  #18191f;
          --playlistTextHoverActive: #ffffff;
      }`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Player&lt;/span&gt; &lt;span class="nx"&gt;trackList&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;customColorScheme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;It's recommended to use CMS like &lt;a href="https://www.contentful.com"&gt;Contentful&lt;/a&gt; or &lt;a href="https://www.datocms.com/"&gt;DatoCMS&lt;/a&gt; to manage your audio files and access them via API.&lt;/p&gt;

&lt;p&gt;The project is open source and any feature requests or issues are welcomed in the &lt;a href="https://github.com/madzadev/audio-player"&gt;Github repo&lt;/a&gt;. Take a look and give it a ⭐ if you liked it. &lt;/p&gt;




&lt;p&gt;Writing has always been my passion and it gives me pleasure to help and inspire people. If you have any questions, feel free to reach out!&lt;/p&gt;

&lt;p&gt;Connect me on &lt;a href="https://twitter.com/madzadev"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/madzadev/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://github.com/madzadev"&gt;GitHub&lt;/a&gt;!&lt;br&gt;
Visit my &lt;a href="https://madza.dev/blog"&gt;Blog&lt;/a&gt; for more articles.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>react</category>
      <category>music</category>
    </item>
    <item>
      <title>Top 5 DEV Comments of the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 08 Apr 2021 23:06:33 +0000</pubDate>
      <link>https://dev.to/devteam/top-5-dev-comments-of-the-past-week-17g8</link>
      <guid>https://dev.to/devteam/top-5-dev-comments-of-the-past-week-17g8</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a weekly roundup of awesome DEV comments that you may have missed. You are welcome and encouraged to boost posts and comments yourself using the &lt;strong&gt;&lt;a href="https://dev.to/t/bestofdev"&gt;#bestofdev&lt;/a&gt;&lt;/strong&gt; tag.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Sometimes getting tips on "little" things like how to &lt;a href="https://dev.to/nirazanbasnet/delete-nodemodules-like-a-pro-17270"&gt;delete node_modules like a Pro&lt;/a&gt; make life a lot easier. We appreciate the tip, Nirazan. &lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/qm3ster"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAErdFRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GqAFM2bo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/83883/e92d6f32-9a89-4a7e-8d5b-f629b42a701e.jpg" alt="qm3ster profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/qm3ster"&gt;
        &lt;span class="comment-username"&gt;Mihail Malo&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/qm3ster/comment/1d515" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr  5
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I recommend &lt;a href="https://github.com/tbillington/kondo" rel="nofollow"&gt;github.com/tbillington/kondo&lt;/a&gt; instead.&lt;br&gt;
It's fast, is a single tiny executable (thanks, Rust), doesn't come with its own &lt;code&gt;node_modules&lt;/code&gt;, and supports not only &lt;code&gt;npm&lt;/code&gt; projects.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Coding is a whole lot like detective work, so we think that &lt;a href="https://dev.to/devlorenzo/if-you-weren-t-a-dev-you-d-be-a-31c4"&gt;alternate path&lt;/a&gt; would've suited you well, Jasper!&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/jmdejager"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ga_Mn-7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---wONnKAG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/585443/75085886-a2b8-4def-86e3-c1ece79db805.jpeg" alt="jmdejager profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/jmdejager"&gt;
        &lt;span class="comment-username"&gt;Jasper de Jager&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/jmdejager/comment/1d3eo" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr  3
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Detective! Love puzzle solving and thinking outside the box 😎&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Great to hear about your &lt;a href="https://dev.to/fikradev/my-coding-journey-soldier-who-codes-3829"&gt;journey to coding&lt;/a&gt;, Angelo. Thanks for the inspiration and sharing your experiences with the community.&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/angelomiranda"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--5LxyZp8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--PF2qFlBp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/164312/9bea6536-3b21-4873-bb3c-98d4486a01f5.jpeg" alt="angelomiranda profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/angelomiranda"&gt;
        &lt;span class="comment-username"&gt;angelo.miranda&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/angelomiranda/comment/1d417" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr  4
  &lt;/time&gt;

    • Edited
    &lt;span class="hidden m:inline-block"&gt;
      on &lt;time&gt;
      Apr 7&lt;/time&gt;
    &lt;/span&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I myself was a US military veteran for 8 years from age 21-29. At age 30 decided to quit and transition to be a civilian, as a front-end developer. I taught myself at night times when both my wife and son are Zzzz by watching tons of youtube videos, googling/searching articles, and reading docs. Now, I have my own youtube channel hoping to help out someone like you as a payback to the community that once helped me. Writing and creating vids when my wife and son are Zzzz as well 😃. You may check out my channel when you get a chance - &lt;a href="https://www.youtube.com/channel/UCFIwa5Eqf4kN17MdDe1gGEw" rel="nofollow"&gt;youtube.com/channel/UCFIwa5Eqf4kN1...&lt;/a&gt; might be a good coincidence us meeting here :D&lt;/p&gt;

&lt;p&gt;It is definitely doable. You will definitely get a job no matter what type of IT you chose to pursue as long as you put in the time. I highly suggest to keep building websites or apps.&lt;/p&gt;

&lt;p&gt;Good luck and God Bless!&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;It can be a real struggle to &lt;a href="https://dev.to/ms_yogii/5-tips-to-work-on-your-side-project-while-working-full-time-n7i"&gt;successfully juggle side projects&lt;/a&gt;, and Ash offers us some wisdom to keep us going. Thanks!&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/ash_bergs"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3oW9KCVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qPdQDKvo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/535482/146b8e52-5722-49e0-b0fa-eba1c302e29f.jpg" alt="ash_bergs profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/ash_bergs"&gt;
        &lt;span class="comment-username"&gt;Ash&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/ash_bergs/comment/1d6ep" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr  6
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I heard once "Don't worry about reaching perfection, you'll never get there anyway," and really liked that quote. &lt;/p&gt;

&lt;p&gt;Great post about having realistic expectations of ourselves and our time, and I love the idea behind Peerlist! Cheers! 🍻&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Liyas is celebrating an awesome win from last week — and we're right here cheering them on, too! I'm sure it was a fantastic talk.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-devcomment-1d5hi-"&gt;
  &lt;/a&gt;
  &lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/liyasthomas"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--BUY8A0rQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--eFJTnfeI--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/89864/cd0d2f13-df2e-41c5-85a5-c4f1a31ed66d.jpg" alt="liyasthomas profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/liyasthomas"&gt;
        &lt;span class="comment-username"&gt;Liyas Thomas&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/liyasthomas/comment/1d5hi" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Apr  6
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Spoke at GitHub Satellite India&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T_X-9_l0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4GqB71xM--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://pbs.twimg.com/media/ExYqR4iVgAQFOPG.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5WIYrll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LXGEfSdR--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://pbs.twimg.com/profile_images/1376220814291308546/xaiCIZzo_normal.jpg" alt="Liyas Thomas profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Liyas Thomas
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/liyasthomas"&gt;@liyasthomas&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sZzPu8PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      GitHub Satellite - Journey of a project made in India: Hoppscotch 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:26 AM - 26 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1375333225581584384" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdb9ojkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1375333225581584384" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L7vvxbLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1375333225581584384" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xAQDVWs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
Hoppscotch crossed 28k GitHub stars&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WodzKB5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--n3GifAJ---/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://pbs.twimg.com/media/ExfoJOLVIAAtayU.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5WIYrll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LXGEfSdR--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://pbs.twimg.com/profile_images/1376220814291308546/xaiCIZzo_normal.jpg" alt="Liyas Thomas profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Liyas Thomas
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/liyasthomas"&gt;@liyasthomas&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sZzPu8PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      There are 190M+ public repositories on GitHub. Only 250 of them have reached over 28,000 stars in GitHub’s 13 years history. Today Hoppscotch is one of them. &lt;a href="https://twitter.com/hashtag/opensource"&gt;#opensource&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:28 PM - 27 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1375832216689729544" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdb9ojkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1375832216689729544" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L7vvxbLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1375832216689729544" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xAQDVWs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
Docker containers collectively crossed 460k+ pulls&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--va800Fpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yOezZWwM--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://pbs.twimg.com/media/Ex8w3QFVEAI1AW9.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5WIYrll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LXGEfSdR--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://pbs.twimg.com/profile_images/1376220814291308546/xaiCIZzo_normal.jpg" alt="Liyas Thomas profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Liyas Thomas
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/liyasthomas"&gt;@liyasthomas&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sZzPu8PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ✅ 100k+ Docker pulls on official Hoppscotch container in 4 months.&lt;br&gt;✅ ~360k pulls on legacy container in 1.4 years.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/j0czdDG5vm"&gt;hub.docker.com/r/hoppscotch/h…&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/hoppscotch"&gt;#hoppscotch&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/opensource"&gt;#opensource&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/docker"&gt;#docker&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:43 AM - 02 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1377874295691472896" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdb9ojkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1377874295691472896" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L7vvxbLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1377874295691472896" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xAQDVWs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



    &lt;/div&gt;
&lt;/div&gt;

&lt;/h2&gt;

&lt;p&gt;See you next week for more great comments ✌️&lt;/p&gt;

</description>
      <category>bestofdev</category>
    </item>
    <item>
      <title>URL Shortener App 😍</title>
      <author>Said Mounaim</author>
      <pubDate>Thu, 08 Apr 2021 21:44:01 +0000</pubDate>
      <link>https://dev.to/said_mounaim/url-shortener-app-1d3n</link>
      <guid>https://dev.to/said_mounaim/url-shortener-app-1d3n</guid>
      <description>&lt;p&gt;URL Shortener App Using Vanilla JavaScript 🎉😍&lt;/p&gt;

&lt;p&gt;Demo :&lt;br&gt;
&lt;a href="https://shorturlapp.netlify.app/"&gt;https://shorturlapp.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code :&lt;br&gt;
&lt;a href="https://github.com/saidMounaim/100DaysOfCode/tree/main/Day9"&gt;https://github.com/saidMounaim/100DaysOfCode/tree/main/Day9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My #100DaysOfCode Challenge 😍&lt;br&gt;
&lt;a href="https://github.com/saidMounaim/100DaysOfCode/"&gt;https://github.com/saidMounaim/100DaysOfCode/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Branding Yourself is Easy</title>
      <author>D\sTro</author>
      <pubDate>Thu, 08 Apr 2021 21:22:39 +0000</pubDate>
      <link>https://dev.to/slimdestro/branding-yourself-is-easy-4c59</link>
      <guid>https://dev.to/slimdestro/branding-yourself-is-easy-4c59</guid>
      <description>&lt;p&gt;Branding yourself is important if you have to survive in the industry for long. Good news is, it's easy for people like us whose professional playground is the internet👌&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Github account&lt;/strong&gt; with little or more nerdy user name with few repos. Don't get demotivated by looking at others repo. If others have lots of repo or unique research that means they've been doing this constantly for long&lt;/p&gt;

&lt;p&gt;Join &lt;strong&gt;Communities&lt;/strong&gt; like Dev, hashnode, medium, fcc, Twitter or just gBlog and keep posting your (*research) and interesting findings &lt;/p&gt;

&lt;p&gt;Plain &lt;strong&gt;Profile picture&lt;/strong&gt; suits social media but for tech forums, it should reflect who you are&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open source Contribution&lt;/strong&gt; is great but ignore it if you are offered code comments kind if task only &lt;/p&gt;

&lt;p&gt;There are &lt;strong&gt;"coding models"&lt;/strong&gt; on Instagram and most of them are either coding amateur or just got stated but their contents creation style motivates other developers. You should try this too&lt;/p&gt;

&lt;p&gt;You don't need to own a domain with your full name for &lt;strong&gt;Portfolio&lt;/strong&gt;. You can use heroku or any other forum which serves subdomain based blog. Great one is "github pages" Which will force you to learn how to push code successfully&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pitch yourself&lt;/strong&gt;. This skill requires both connections as well as courage. There's a saying "if product you built is not great then make sure the marketing is great". This skill is the backbone of this saying &lt;/p&gt;

&lt;p&gt;You won't survive on &lt;strong&gt;Stack overflow&lt;/strong&gt; so better use this platform for learning until you are confident&lt;/p&gt;

&lt;p&gt;Having &lt;strong&gt;SEO&lt;/strong&gt; skill is nice but not important people talk about you and your work &lt;/p&gt;

&lt;p&gt;Follow &lt;strong&gt;Technical blogs&lt;/strong&gt;. for example mit, deepai, FbAi, google etc. This will keep your knowledge of the domain on track&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Follow my &lt;a href="https://twitter.com/slimDestro/status/1380237743721082881"&gt;Twitter&lt;/a&gt; account for regular updates&lt;/p&gt;

&lt;p&gt;-Thanks&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
