<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to create beautiful and realistic confetti animation with tsParticles</title>
      <author>Matteo Bruni</author>
      <pubDate>Tue, 29 Jun 2021 17:50:07 +0000</pubDate>
      <link>https://dev.to/matteobruni/how-to-create-beautiful-and-realistic-confetti-animation-with-tsparticles-1lkm</link>
      <guid>https://dev.to/matteobruni/how-to-create-beautiful-and-realistic-confetti-animation-with-tsparticles-1lkm</guid>
      <description>&lt;p&gt;Starting from version 1.30.0 tsParticles has new options to create beautiful and realistic confetti animations with every supported particle shape.&lt;/p&gt;

&lt;p&gt;Every parameter of the animation can be configured so you can choose which configuration will suit you better.&lt;/p&gt;

&lt;p&gt;Let's build this sample configuration:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/matteobruni/embed/KKmKaVb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;background: {
  color: {
    value: "#000000"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This sets the black background to the canvas, this is optional, you can have a transparent background omitting this section.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#full-screen"&gt;
  &lt;/a&gt;
  Full Screen
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fullScreen: {
  enable: true,
  zIndex: -1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This sets the canvas to full screen with a zIndex of -1, be careful with &lt;code&gt;zIndex&lt;/code&gt; set to -1, this will be below every page element, you can set it to an higher value but the &lt;code&gt;interactivity.detectsOn&lt;/code&gt; should be &lt;code&gt;"window"&lt;/code&gt; to have particles on top without losing the website interactivity.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#interactivity"&gt;
  &lt;/a&gt;
  Interactivity
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interactivity: {
  detectsOn: "window"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This was explained above, the &lt;code&gt;detectsOn&lt;/code&gt; property set to &lt;code&gt;"window"&lt;/code&gt; disabled canvas pointer events, so you can interact with any elements below the canvas &lt;code&gt;zIndex&lt;/code&gt;. This should be set like with an high &lt;code&gt;zIndex&lt;/code&gt;, with a &lt;code&gt;-1&lt;/code&gt; value it's not necessary.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#emitter"&gt;
  &lt;/a&gt;
  Emitter
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;emitters: {
  position: {
    x: 50,
    y: 100
  },
  rate: {
    quantity: 10,
    delay: 0.25
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Everyone loves particles cannons, here you are, you have a bottom centered cannon that shoots &lt;code&gt;10&lt;/code&gt; particles every &lt;code&gt;0.25&lt;/code&gt; seconds.&lt;/p&gt;

&lt;p&gt;The position is specified in percent values, not in pixels, so &lt;code&gt;100&lt;/code&gt; set to &lt;code&gt;y&lt;/code&gt; is the bottom of the page, while &lt;code&gt;50&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; is the horizontal center.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#particles-configuration"&gt;
  &lt;/a&gt;
  Particles configuration
&lt;/h2&gt;

&lt;p&gt;This is the biggest part, where you can configure every aspect of your particles, or confetti if preferred.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;particles: {
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#color"&gt;
  &lt;/a&gt;
  Color
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;color: {
  value: ["#1E00FF", "#FF0061", "#E1FF00", "#00FF9E"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can set here a single value, or an array of string (or more complex object, but let's keep things &lt;em&gt;simple&lt;/em&gt; for now).&lt;/p&gt;

&lt;p&gt;This value is not applied to emojis and images (they are already colored).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#number"&gt;
  &lt;/a&gt;
  Number
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;number: {
  value: 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The particles number is set to &lt;code&gt;0&lt;/code&gt; because the particles are shot from the emitter and only those should be used.&lt;/p&gt;

&lt;p&gt;If this values is set to any positive value will load random particles in the canvas.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#move"&gt;
  &lt;/a&gt;
  Move
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;move: {
  decay: 0.05,
  direction: "top",
  enable: true,
  speed: {
    min: 50,
    max: 75
  },
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This section will configure particles movements inside the canvas, you can apply gravity, speed, directions and other properties.&lt;/p&gt;

&lt;p&gt;Some values can be seen above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;decay: it's a value used to slow down particles&lt;/li&gt;
&lt;li&gt;direction: it's the particles direction, you can set a value like &lt;code&gt;"top"&lt;/code&gt;, &lt;code&gt;"top-right"&lt;/code&gt;, &lt;code&gt;"right"&lt;/code&gt; or an angle in degrees.&lt;/li&gt;
&lt;li&gt;enable: this value must be &lt;code&gt;true&lt;/code&gt; if you want particles to move, otherwise they will be static&lt;/li&gt;
&lt;li&gt;speed: this value can be a single numeric value or an object like the one above with &lt;code&gt;min&lt;/code&gt;/&lt;code&gt;max&lt;/code&gt; properties and each particle will pick one value in that range randomically&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#gravity"&gt;
  &lt;/a&gt;
  Gravity
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gravity: {
  enable: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This section part of the &lt;code&gt;move&lt;/code&gt; options will configure particles gravity, you can just enable it with a default earth gravity (&lt;code&gt;9.81&lt;/code&gt;) and a max speed of &lt;code&gt;50&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#out-modes"&gt;
  &lt;/a&gt;
  Out Modes
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;outModes: {
  top: "none",
  default: "destroy"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This section sets the action to do when particles will go off canvas, you can specify this for every border (&lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;) or a &lt;code&gt;default&lt;/code&gt; that will be overridden by specific values like in this case, the particle will not be destroyed only if it goes outside the top edge.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#opacity"&gt;
  &lt;/a&gt;
  Opacity
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;opacity: {
  value: 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This value sets the particles (ops, confetti) opacity value. This can be also a range value like the previous seen &lt;code&gt;move.speed&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#size"&gt;
  &lt;/a&gt;
  Size
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;size: {
  value: 8
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This value sets the particles (ops, confetti) radius value. This can be also a range value like the previous seen &lt;code&gt;move.speed&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rotate"&gt;
  &lt;/a&gt;
  Rotate
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rotate: {
  value: {
    min: 0,
    max: 360
  },
  direction: "random",
  animation: {
    enable: true,
    speed: 60
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This section sets the particles rotation around its center. You can specify a degree angle to &lt;code&gt;value&lt;/code&gt; or a range of angles like the &lt;code&gt;move.speed&lt;/code&gt; above. In this case any angle will be picked randomly by each particle.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;direction&lt;/code&gt; property sets the rotation direction, this property can have 3 values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"clockwise"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"counter-clockwise"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"random"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two are clear, the third value (&lt;code&gt;"random"&lt;/code&gt;) make every particle choose one of the two previous values randomically, so you can see particles rotates clockwise and counter clockwise.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;animation&lt;/code&gt; property make the particle rotation animated, otherwise the particle will only have the initial angle. The rotation speed can be set and the animation can be enabled, by default is not.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tilt"&gt;
  &lt;/a&gt;
  Tilt
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tilt: {
  direction: "random",
  enable: true,
  value: {
    min: 0,
    max: 360
  },
  animation: {
    enable: true,
    speed: 30
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the first of the new three particles options, &lt;code&gt;tilt&lt;/code&gt; will deform the particles like they are seen from another perspective spinning around its center.&lt;/p&gt;

&lt;p&gt;The properties of this property are the same seen in the &lt;code&gt;rotate&lt;/code&gt; section above and it works exactly the same.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#roll"&gt;
  &lt;/a&gt;
  Roll
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;roll: {
  darken: {
    enable: true,
    value: 25
  },
  enable: true,
  speed: {
    min: 5,
    max: 15
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the second new property of particles options, &lt;code&gt;roll&lt;/code&gt; will deform the particles like they are seen rolling around its center making a natural falling effect.&lt;/p&gt;

&lt;p&gt;The properties of this section are really simple, enable will activate this effect, speed sets the fall effect speed.&lt;/p&gt;

&lt;p&gt;What about &lt;code&gt;darken&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;There are 3 more options after &lt;code&gt;speed&lt;/code&gt; and &lt;code&gt;enable&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;backColor&lt;/code&gt;: This sets the back color of the particles when their &lt;em&gt;back&lt;/em&gt; is visible&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;darken&lt;/code&gt;: This is the first alternative when &lt;code&gt;backColor&lt;/code&gt; is not set, this will darken by the specified value the particles color create a nice simple shadow&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;enlighten&lt;/code&gt;: This is the latest alternative if none of the above are set or enabled, this will enlighten by the specified value the particles color create a nice simple light effect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case the particles (only the one that can be colored) will have a nice shadow while rolling down.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#wobble"&gt;
  &lt;/a&gt;
  Wobble
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wobble: {
  distance: 30,
  enable: true,
  speed: {
    min: -15,
    max: 15
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the latest (but not least) new effect introduced in &lt;code&gt;1.30&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This effects makes the particles bouncing from left to right simulating air resistance with a really nice effect.&lt;/p&gt;

&lt;p&gt;The properties are really simple, enable for activating this, the distance used for enlarging the angle and the wobbling speed.&lt;/p&gt;

&lt;p&gt;About the speed I recommend a range with a &lt;code&gt;min&lt;/code&gt; and a &lt;code&gt;max&lt;/code&gt; opposite values instead of a single value since the effect is nicer. If only a positive or negative value is set the particles will only wobble right or left.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#shape"&gt;
  &lt;/a&gt;
  Shape
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shape: {
  type: /* ... */
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Why &lt;code&gt;shape&lt;/code&gt; is the latest section explained? Because in this case it's really huge because I want to show all possibilities in the sample but you can choose from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;circle&lt;/li&gt;
&lt;li&gt;square&lt;/li&gt;
&lt;li&gt;polygon&lt;/li&gt;
&lt;li&gt;line (be careful, this will only works with the stroke color since it's not fillable)&lt;/li&gt;
&lt;li&gt;character (also emojis are accepted or any font like FontAwesome if correctly installed)&lt;/li&gt;
&lt;li&gt;image&lt;/li&gt;
&lt;li&gt;triangle&lt;/li&gt;
&lt;li&gt;star&lt;/li&gt;
&lt;li&gt;bubble (external plugin)&lt;/li&gt;
&lt;li&gt;heart (external plugin)&lt;/li&gt;
&lt;li&gt;multiline text (external plugin)&lt;/li&gt;
&lt;li&gt;rounded rect (external plugin)&lt;/li&gt;
&lt;li&gt;spiral (external plugin, this will be better with stroke color since filled it's kinda ugly)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each shape you can specify additional options like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shape: {
  type: "circle",
  options: {
    circle: {
      particles: {
        size: {
          value: 10
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The code below is the sample used in the codepen shown at the beginning.&lt;/p&gt;

&lt;p&gt;The polygon options are an array and are randomly picked by each particles creating a pentagon or an hexagon.&lt;/p&gt;

&lt;p&gt;The character options specifies the font used by the specified character, the weight, an additional style, and the text to be used for each particle, in this case one emoji per particle randomly picked.&lt;/p&gt;

&lt;p&gt;The images are a lot and random picked, they have a bigger size value since they have some padding inside.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shape: {
    type: [
        "circle",
        "square",
        "polygon",
        "character",
        "character",
        "character",
        "image",
        "image",
        "image"
    ],
    options: {
        polygon: [
            {
                sides: 5
            },
            {
                sides: 6
            }
        ],
        character: [
            {
                font: "Verdana",
                value: ["💩", "🤡", "🍀", "🍙", "🦄", "⭐️"],
                style: "",
                weight: 400
            }
        ],
        image: [
            {
                src: "https://particles.js.org/images/fruits/apple.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/avocado.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/banana.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/berries.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/cherry.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/grapes.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/lemon.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/orange.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/peach.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/pear.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/pepper.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/plum.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/star.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/strawberry.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/watermelon.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/watermelon_slice.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Hope you'll have a lot of fun with tsParticles and the new animations to make beautiful confetti&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React, Vue, Angular, Svelte, jQuery, Preact, Inferno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. 🤩&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from the old particles.js library.&lt;/p&gt;
&lt;h2&gt;
&lt;strong&gt;&lt;em&gt;Library installation&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;Hosting / CDN&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please use this hosts or your own to&lt;/em&gt;&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 29 Jun 2021 17:34:18 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-ai9</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-ai9</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-typescript-with-react-a-crashcourse"&gt;
  &lt;/a&gt;
  Using TypeScript with React: A Crash-Course
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/riyanegi"&gt;@riyanegi&lt;/a&gt;
 is here to help developers use existing React and JavaScript knowledge to learn TypeScript. Great stuff!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/riyanegi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0B3FiH6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--k6XJNghO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600728/a408c935-e9b2-452e-84cb-70f36aad9aa9.jpeg" alt="riyanegi"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/riyanegi/getting-started-with-typescript-with-react-hooks-2021-5cfd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting started with Typescript with React Hooks [2021]&lt;/h2&gt;
      &lt;h3&gt;RiyaNegi ・ Jun 23 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#confessions-of-a-recovering-tech-hipster"&gt;
  &lt;/a&gt;
  Confessions of a recovering "Tech Hipster"
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/knajjars"&gt;@knajjars&lt;/a&gt;
 used to spend a lot of time researching, consuming, and learning about the latest and buzziest trends in tech. It's awesome to be curious about the latest technology, but not when it burns you out. Thanks for sharing these valuable insights, Khalil!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/knajjars" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XONcH7CN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CiAKgGzD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/630369/aa2aed39-3da1-4a89-b4af-64a00e574237.jpeg" alt="knajjars"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/knajjars/learnings-after-5-years-of-being-a-hipster-in-tech-1b0n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I Regret Being a Hipster in Tech&lt;/h2&gt;
      &lt;h3&gt;Khalil Najjar ・ Jun 27 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#rails&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#django&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#making-react-apps-more-accessible"&gt;
  &lt;/a&gt;
  Making React Apps More Accessible
&lt;/h2&gt;

&lt;p&gt;React fully supports building accessible websites, often via standard HTML techniques. In this article, &lt;a class="mentioned-user" href="https://dev.to/sreashi"&gt;@sreashi&lt;/a&gt;
 shares how you can make your React apps more accessible — today.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/sreashi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SS1cq94Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--M1zDu0KT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/635065/7e5df417-5e86-4737-906c-a325869246c6.jpeg" alt="sreashi"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sreashi/accessibility-in-react-2m2n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Accessibility in React&lt;/h2&gt;
      &lt;h3&gt;Sreashi Saha ・ Jun 23 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#take-a-deep-breath"&gt;
  &lt;/a&gt;
  Take a deep breath...
&lt;/h2&gt;

&lt;p&gt;... it's just one of the many ways you can undo some of the stress that coding can bring. Thanks for this fantastic list of stress-reduction tips, @chetan_atrawalka. Such an important topic.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/chetan_atrawalkar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhrzVZep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xRKSv-Yz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/655054/eab1b96a-fcd5-459c-81a6-8bc334e62b19.gif" alt="chetan_atrawalkar"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/chetan_atrawalkar/how-to-avoid-stress-during-coding-56f1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🤔How to avoid stress during coding? &lt;/h2&gt;
      &lt;h3&gt;Chetan Atrawalkar👉CA. ・ Jun 26 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#there-is-no-objectively-correct-structure-for-a-scalable-app"&gt;
  &lt;/a&gt;
  There is no objectively correct structure for a scalable app
&lt;/h2&gt;

&lt;p&gt;However, there are some principles that can help guide you in your quest to building an app that scales. Thanks for walking us through this, &lt;a class="mentioned-user" href="https://dev.to/pietmichal_67"&gt;@pietmichal_67&lt;/a&gt;
. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pietmichal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2G6OIrb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tqvQtqk9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/51140/d5f329ef-1f63-4eb0-9765-f6887959b39c.jpg" alt="pietmichal"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pietmichal/how-to-structure-your-app-in-a-way-that-scales-bkf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How To Structure Your App In a Way That Scales.&lt;/h2&gt;
      &lt;h3&gt;Michał Pietraszko ・ Jun 27 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-dev-history-lesson"&gt;
  &lt;/a&gt;
  A DEV history lesson
&lt;/h2&gt;

&lt;p&gt;The DEV team loves historical tech deep dives, essays, and research projects. This one by &lt;a class="mentioned-user" href="https://dev.to/mr_victor"&gt;@mr_victor&lt;/a&gt;
 about the history of JS does not disappoint!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mr_victor" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PwhHFxsP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1QkH4dly--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600265/d7f31d15-9f0e-4c4a-b8b7-a3c521ba2b98.jpg" alt="mr_victor"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mr_victor/the-history-of-javascript-1fp3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The History Of JavaScript ⌛&lt;/h2&gt;
      &lt;h3&gt;Victor Ikechukwu ・ Jun 22 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#developers&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#set-up-build-and-run-your-own-chrome-extension"&gt;
  &lt;/a&gt;
  Set up, build and run your own Chrome extension.
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/venkyakshaya"&gt;@venkyakshaya&lt;/a&gt;
 shared this handy guide to building your very own Chrome extension ✨  In this example, you'll be making a count-down timer. What date are you looking forward to the most? &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/venkyakshaya" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0wKm-ZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4JcU8Qjn--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/435398/f6296f27-45da-4425-a7a2-6a505ab16d38.jpg" alt="venkyakshaya"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/venkyakshaya/chrome-extensions-101-3dif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Chrome Extensions 101&lt;/h2&gt;
      &lt;h3&gt;Akshaya Venkatesh ・ Jun 27 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Boy or Girl Paradox... What the heck is it??? 🤯🤷</title>
      <author>Aashish Chaubey 💥⚡️</author>
      <pubDate>Tue, 29 Jun 2021 17:25:52 +0000</pubDate>
      <link>https://dev.to/aashish/boy-or-girl-paradox-what-the-heck-is-it-1m0j</link>
      <guid>https://dev.to/aashish/boy-or-girl-paradox-what-the-heck-is-it-1m0j</guid>
      <description>&lt;p&gt;Hi friends,&lt;/p&gt;

&lt;p&gt;I am a machine learning and data science enthusiast. I love playing with numbers and finding insights. I know many of you are, at least to some level. Even if you are not but you have some level of interest in mathematics, there is a great chance you will find this post interesting. &lt;/p&gt;

&lt;p&gt;Please let me know if you guys already knew this and if there are many more which I should check out, please let me know in the comments belows. I encourage all my fellow reader to read them too.&lt;/p&gt;




&lt;p&gt;I like solving problems, sometimes I find it on renowned platforms like Kaggle and hackerearth. Randomly I came across this seemingly easy question but which blew my mind off [partly because I feel this problem is not articulated well!]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g_pm0Hru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1at8e0m7pyr8kosn4ag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g_pm0Hru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1at8e0m7pyr8kosn4ag.png" alt="Hackerrank Problem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I thought I didn't have to think much about it. Because it is just so straight forward. I mean it is given that one child is a boy, only probability of the other child being a boy is &lt;code&gt;1/2&lt;/code&gt; [unless otherwise stated].&lt;/p&gt;

&lt;p&gt;I selected the 1/2 answer from the answer, it was a wrong one. Okay, it needed a little more thinking. I wrote down all the possibilities at least one of the child is a boy [we are already given this information].&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[BB, BG, GB]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Therefore, another answer which is also equally likely according to the question is &lt;code&gt;1/3&lt;/code&gt;. And as it turns out, this indeed is a correct answer. &lt;/p&gt;

&lt;p&gt;But how can we have two equally correct answers for this. In my view, both the answers, as per the problem statement is correct. &lt;/p&gt;

&lt;p&gt;I took to Google for adjudication, and again, Google didn't disappoint. Look what I found:&lt;/p&gt;


&lt;div class="ltag__wikipedia--container"&gt;
  &lt;div class="ltag__wikipedia--header"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sew3uq9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/wikipedia-logo-0a3e76624c7b1c3ccdeb9493ea4add6ef5bd82d7e88d102d5ddfd7c981efa2e7.svg" class="ltag__wikipedia--logo" alt="Wikipedia Logo"&gt;
    &lt;a href="https://en.wikipedia.org/wiki/Boy_or_Girl_paradox" rel="noopener noreferrer"&gt;Boy or Girl paradox&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="ltag__wikipedia--extract"&gt;
&lt;p&gt;The &lt;b&gt;Boy or Girl paradox&lt;/b&gt; surrounds a set of questions in probability theory, which are also known as &lt;b&gt;The Two Child Problem&lt;/b&gt;, &lt;b&gt;Mr. Smith's Children&lt;/b&gt; and the &lt;b&gt;Mrs. Smith Problem&lt;/b&gt;. The initial formulation of the question dates back to at least 1959, when Martin Gardner featured it in his October 1959 "Mathematical Games column" in &lt;i&gt;Scientific American&lt;/i&gt;. He titled it &lt;b&gt;The Two Children Problem&lt;/b&gt;, and phrased the paradox as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mr. Jones has two children. The older child is a girl. What is the probability that both children are girls?&lt;/li&gt;
&lt;li&gt;Mr. Smith has two children. At least one of them is a boy. What is the probability that both children are boys?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;div class="ltag__wikipedia--btn--container"&gt;
    
      &lt;a href="https://en.wikipedia.org/wiki/Boy_or_Girl_paradox" rel="noopener noreferrer"&gt;View on Wikipedia&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I think it is a good read. I suggest you all to go through it (if you already haven't). &lt;/p&gt;




&lt;p&gt;Just wanted to share this information to this erudite community. Please feel free to reach out to me on:&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/AashishLChaubey"&gt;https://twitter.com/AashishLChaubey&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/chaubey-aashish"&gt;https://www.linkedin.com/in/chaubey-aashish&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please checkout my &lt;a href="https://github.com/aashish-chaubey"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>probability</category>
      <category>maths</category>
      <category>statistics</category>
    </item>
    <item>
      <title>Loopple for AdminKit - Free Drag and Drop Dashboard Builder for Bootstrap 5</title>
      <author>rarestoma</author>
      <pubDate>Tue, 29 Jun 2021 17:18:34 +0000</pubDate>
      <link>https://dev.to/rarestoma/loopple-for-adminkit-free-drag-and-drop-dashboard-builder-for-bootstrap-5-2hp9</link>
      <guid>https://dev.to/rarestoma/loopple-for-adminkit-free-drag-and-drop-dashboard-builder-for-bootstrap-5-2hp9</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I recently launched a new theme to &lt;strong&gt;Loopple&lt;/strong&gt;, a &lt;strong&gt;Free Low Code Dashboard Builder&lt;/strong&gt; that aims to help developers to speed up their development process.&lt;/p&gt;

&lt;p&gt;This new theme is built on top of &lt;strong&gt;AdminKit&lt;/strong&gt;, an &lt;strong&gt;Open Source Bootstrap 5 Dashboard&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Any feedback would be gratefully received!&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.loopple.com/theme/adminkit"&gt;AdminKit Builder&lt;/a&gt;&lt;br&gt;
&lt;a href="https://adminkit.io/"&gt;AdminKit Dashboard&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.loopple.com/"&gt;Loopple Website&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Loopple/loopple"&gt;Loopple Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Keep Notes Clone</title>
      <author>Murlidhar Bhardwaj</author>
      <pubDate>Tue, 29 Jun 2021 17:03:39 +0000</pubDate>
      <link>https://dev.to/lord483/keep-notes-clone-55hk</link>
      <guid>https://dev.to/lord483/keep-notes-clone-55hk</guid>
      <description>&lt;p&gt;Hello everyone. Actually this post is not to tell anything to you, but more for some suggestions and ideas. I am trying to make Keep Clone Web App, with my own api. But there's one thing I am stuck on, and that is search functionality. I want this functionality at api level and not on client side for obvious reasons. Can anyone help me out? I know this is not a perfect place to ask questions but I also wanted to share this with you.&lt;/p&gt;

&lt;p&gt;Here's the link to the hosted app. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://keep-clone-api.herokuapp.com/"&gt;https://keep-clone-api.herokuapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It uses MongoDB linked to my own account. Up untill now there's no user authentication, but I am planning on doing this later once basic functionality is completed. &lt;/p&gt;

&lt;p&gt;And if you need github repo of the same, please ask me. I will share that as well. Any suggestions are welcome, but main topic is that how can I implement search feature on api side. &lt;br&gt;
Thank you. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>How to create Beautiful ❤️ Dynamic Login Screen</title>
      <author>manish srivastava</author>
      <pubDate>Tue, 29 Jun 2021 17:01:28 +0000</pubDate>
      <link>https://dev.to/manishfoodtechs/how-to-create-beautiful-dynamic-login-screen-5be4</link>
      <guid>https://dev.to/manishfoodtechs/how-to-create-beautiful-dynamic-login-screen-5be4</guid>
      <description>&lt;p&gt;What I learnt in making login screen of Habit-O-Circle. &lt;/p&gt;

&lt;p&gt;Below are some dynamically created login screens. &lt;br&gt;
Everytime you try to login or refresh page:-&lt;br&gt;
(1)Background picture is changed . There are more than 1000+ pics to come randomly and not a single picture is stored in the app. &lt;/p&gt;

&lt;p&gt;(2) Doodles are changed dynamically and adjust itself according to screen size.&lt;/p&gt;

&lt;p&gt;(3) Login div is glassmorphic.&lt;/p&gt;

&lt;p&gt;(4) Responsive Topography in login div.&lt;/p&gt;

&lt;p&gt;(5) Exact center alignment of login div: H &amp;amp; V&lt;/p&gt;

&lt;p&gt;None of the pictures are stored by app.&lt;/p&gt;

&lt;p&gt;Let's see some login screen shots:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dk2vhxZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teutvhxxefe8c4dpnuvo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dk2vhxZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teutvhxxefe8c4dpnuvo.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUeNzeVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2r8ap38la6h2hhb2wg7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUeNzeVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2r8ap38la6h2hhb2wg7.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D9soif8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o011wmkseph2lh093kf4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9soif8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o011wmkseph2lh093kf4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VIp7VYqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95wmwhhiy63tg1hob0xv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIp7VYqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95wmwhhiy63tg1hob0xv.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nqKpZmq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptiq8ew89n1sak0t62e5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nqKpZmq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptiq8ew89n1sak0t62e5.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LPp6xMid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7wvj5nlj0owx4u1foe2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LPp6xMid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7wvj5nlj0owx4u1foe2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-i-achieved-this"&gt;
  &lt;/a&gt;
  How I achieved this:
&lt;/h2&gt;

&lt;p&gt;(1)Background picture is changed : &lt;br&gt;
Answer: look at my post &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/manishfoodtechs" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyoLr6Eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nGkJnCB3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/221659/353cc208-374e-4d32-8304-bf9aba600a40.jpg" alt="manishfoodtechs"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/manishfoodtechs/wow-the-lorem-ipsum-for-photos-lorem-picsum-4dbj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt; WOW!!! The Lorem Ipsum for photos :Lorem Picsum&lt;/h2&gt;
      &lt;h3&gt;manish srivastava ・ Sep 10 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;(2) Doodles are changed dynamically and adjust itself according to screen size.&lt;/p&gt;

&lt;p&gt;Answer: Created an array of Doodles url. Then, randomly selected one from array.&lt;/p&gt;

&lt;p&gt;(3) Login div is glassmorphic.&lt;br&gt;
Answer:&lt;br&gt;
&lt;a href="https://glassmorphism.com/"&gt;https://glassmorphism.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(4) Responsive Topography in login div.&lt;br&gt;
Answer:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/manishfoodtechs" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyoLr6Eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nGkJnCB3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/221659/353cc208-374e-4d32-8304-bf9aba600a40.jpg" alt="manishfoodtechs"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/manishfoodtechs/introducing-xtra-power-css-device-size-no-more-a-challenge-1cp1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introducing Xtra-Power CSS: Device Size No more a Challenge!!!&lt;/h2&gt;
      &lt;h3&gt;manish srivastava ・ Nov 11 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;(5) Exact center alignment of login div: H &amp;amp; V&lt;br&gt;
Answer&lt;br&gt;
&lt;a href="https://www.w3schools.com/css/css_align.asp"&gt;https://www.w3schools.com/css/css_align.asp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find all codes mentioned in link below.&lt;br&gt;
I am not a professional programmer. I just do all this in my free time. In case you are good in UI , please contact me.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/manishfoodtechs" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyoLr6Eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nGkJnCB3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/221659/353cc208-374e-4d32-8304-bf9aba600a40.jpg" alt="manishfoodtechs"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/manishfoodtechs/presenting-habit-o-circle-app-coded-by-code-generator-that-was-coded-by-me-20fo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt; PRESENTING HABIT-O-CIRCLE APP: CODED BY CODE GENERATOR: THAT WAS CODED BY ME!&lt;/h2&gt;
      &lt;h3&gt;manish srivastava ・ Jun 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#php&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>beginners</category>
      <category>showdev</category>
      <category>css</category>
      <category>php</category>
    </item>
    <item>
      <title>Testing input and output in Rust command line applications</title>
      <author>Jeff Kreeftmeijer</author>
      <pubDate>Tue, 29 Jun 2021 17:01:08 +0000</pubDate>
      <link>https://dev.to/jkreeftmeijer/testing-input-and-output-in-rust-command-line-applications-56p5</link>
      <guid>https://dev.to/jkreeftmeijer/testing-input-and-output-in-rust-command-line-applications-56p5</guid>
      <description>&lt;p&gt;Working with complex input and output can make command line applications challenging to test, as it is inconvenient to capture the output stream to test if the program returns the correct output. Using abstraction through Rust's &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; traits, we can swap the input and output for byte arrays and vectors during testing instead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#standard-streams"&gt;
  &lt;/a&gt;
  Standard Streams
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Standard streams&lt;/em&gt; are abstractions used to handle data input and output to an operating system process.&lt;br&gt;
Each program has access to an input stream (&lt;em&gt;standard input&lt;/em&gt;, or &lt;em&gt;stdin&lt;/em&gt;), an output stream (&lt;em&gt;standard output&lt;/em&gt;, or &lt;em&gt;stdout&lt;/em&gt;), and an error stream (&lt;em&gt;standard error&lt;/em&gt;, or &lt;em&gt;stderr&lt;/em&gt;) inherited from the parent process.&lt;/p&gt;

&lt;p&gt;Example 1. &lt;code&gt;grep(1)&lt;/code&gt; filters lines read from stdin with a search pattern ("three" in this case) and prints the matching lines to stdout. After starting, &lt;code&gt;grep&lt;/code&gt; halts to wait for input from stdin. By typing this input into the terminal, we can see that &lt;code&gt;grep&lt;/code&gt; prints any line that matches the pattern back to stdout, which the terminal displays. Then, the program returns to waiting for input until it receives an &lt;em&gt;EOF&lt;/em&gt; (&lt;em&gt;end-of-file&lt;/em&gt;), which we pass by pressing kbd:[ctrl]+kbd:[D] in the terminal.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ grep three
one
two
three
three
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Because of this abstraction, programs can use &lt;em&gt;pipelines&lt;/em&gt; to pass the output from one program as the input to another by piping stdout from one process to stdin for another.&lt;/p&gt;

&lt;p&gt;Example 2. &lt;code&gt;ls(1)&lt;/code&gt; prints the current directory's contents to stdout. This example uses a &lt;em&gt;pipe&lt;/em&gt; (&lt;code&gt;|&lt;/code&gt;) to create a pipeline, to pass the output from &lt;code&gt;ls&lt;/code&gt; as input to &lt;code&gt;grep&lt;/code&gt;. &lt;code&gt;grep&lt;/code&gt; then filters to only print lines matching the passed pattern ("Cargo").&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ls -l ~/pager | grep Cargo
Cargo.lock
Cargo.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#-raw-stdin-endraw-raw-stdout-endraw-and-raw-stderr-endraw-in-rust"&gt;
  &lt;/a&gt;
  &lt;code&gt;Stdin&lt;/code&gt;, &lt;code&gt;Stdout&lt;/code&gt; and &lt;code&gt;Stderr&lt;/code&gt; in Rust
&lt;/h2&gt;

&lt;p&gt;Rust provides handles to the standard streams through the &lt;a href="https://doc.rust-lang.org/std/io/struct.Stdin.html"&gt;&lt;code&gt;Stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://doc.rust-lang.org/std/io/struct.Stdout.html"&gt;&lt;code&gt;Stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://doc.rust-lang.org/std/io/struct.Stderr.html"&gt;&lt;code&gt;Stderr&lt;/code&gt;&lt;/a&gt; structs, which are created with the &lt;a href="https://doc.rust-lang.org/std/io/fn.stdin.html"&gt;&lt;code&gt;io::stdin()&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://doc.rust-lang.org/std/io/fn.stdout.html"&gt;&lt;code&gt;io::stdout()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://doc.rust-lang.org/std/io/fn.stderr.html"&gt;&lt;code&gt;io::stderr()&lt;/code&gt;&lt;/a&gt; functions respectively.&lt;/p&gt;

&lt;p&gt;Example 3. This program takes input through stdin, converts the received string to uppercase and prints it back out to the terminal through stdout.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;src/main.rs&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.write_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="nf"&gt;.to_uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.as_bytes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The stream handlers implement the &lt;a href="https://doc.rust-lang.org/std/io/trait.Read.html"&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://doc.rust-lang.org/std/io/trait.Write.html"&gt;&lt;code&gt;Write&lt;/code&gt;&lt;/a&gt; traits to read from and write to the streams. Because of that, they share part of their implementation with other "Readers" and "Writers", like &lt;a href="https://doc.rust-lang.org/std/fs/struct.File.html"&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abstraction-using-the-raw-read-endraw-and-raw-write-endraw-traits"&gt;
  &lt;/a&gt;
  Abstraction using the &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; traits
&lt;/h2&gt;

&lt;p&gt;One of the issues&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; in the &lt;a href="#upcase"&gt;example&lt;/a&gt; above is that it uses the &lt;code&gt;Stdout&lt;/code&gt; and &lt;code&gt;Stdin&lt;/code&gt; structs directly, making our program challenging to test because it is inconvenient to pass input through stdin and capture stdout to assert that the program produces the correct results.&lt;/p&gt;

&lt;p&gt;To make our program more modular, we will decouple it from the &lt;code&gt;Stdin&lt;/code&gt; and &lt;code&gt;Stdout&lt;/code&gt; structs and pass the input and output as arguments to a more abstract, separate function.&lt;/p&gt;

&lt;p&gt;Example 4. In the test for the extracted function, we swap &lt;code&gt;Stdin&lt;/code&gt; and &lt;code&gt;Stdout&lt;/code&gt; out for other implementors of the &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; traits: a byte array for input and a vector for output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;src/lib.rs&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[cfg(test)]&lt;/span&gt;
&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;#[test]&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;writes_upcased_input_to_output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Vec&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="s"&gt;"Hello, world!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nf"&gt;.as_bytes&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;"HELLO, WORLD!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example 5. The implementation that satisfies the test looks like the &lt;a href="#upcase"&gt;original example&lt;/a&gt;, with one significant difference. Because the test passes the input and output as arguments, we can use trait objects to allow any type as long as it implements the &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; traits:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;src/lib.rs&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="nf"&gt;.read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="nf"&gt;.write_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="nf"&gt;.to_uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.as_bytes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example 6. Finally, we replace the prototype in &lt;code&gt;src/main.rs&lt;/code&gt; with a call to our new implementation with a &lt;code&gt;Stdin&lt;/code&gt; and &lt;code&gt;Stdout&lt;/code&gt; struct for the input and output:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;src/main.rs&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By abstracting &lt;code&gt;Stdin&lt;/code&gt; and &lt;code&gt;Stdout&lt;/code&gt; out of the implementation, we made our program more modular, allowing us to test the code without resorting to capturing stdout to assert that the printed result matched our expectations.&lt;/p&gt;

&lt;p&gt;Aside from better testability, making our implementation more modular will allow us to work with other data types in the future.&lt;br&gt;
For example, we might add a command-line option that takes a filename and pass a &lt;code&gt;File&lt;/code&gt; to &lt;code&gt;upcase()&lt;/code&gt;.&lt;br&gt;
Since &lt;code&gt;File&lt;/code&gt; also implements the &lt;code&gt;Read&lt;/code&gt; trait, that would work without further modifications in our implementation.&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;Another issue with this example is that it uses &lt;a href="https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_string"&gt;&lt;code&gt;Read::read_to_string()&lt;/code&gt;&lt;/a&gt;, which will read the contents of the whole stream from the input before writing everything to stdout at once, which is inefficient, especially for larger inputs. A more efficient implementation could use buffered reading through the &lt;code&gt;BufRead&lt;/code&gt; trait to read and write the input stream line by line. &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>rust</category>
      <category>programming</category>
      <category>testing</category>
      <category>tdd</category>
    </item>
    <item>
      <title>3 proposal creators for freelance web developers.</title>
      <author>Dylan Britz</author>
      <pubDate>Tue, 29 Jun 2021 16:21:03 +0000</pubDate>
      <link>https://dev.to/britzdylan/3-proposal-creators-for-freelance-web-developers-4meo</link>
      <guid>https://dev.to/britzdylan/3-proposal-creators-for-freelance-web-developers-4meo</guid>
      <description>&lt;p&gt;Winning business is part of the freelance journey, and most of the time potential clients would need a proposal with a breakdown of your services, costs and timeline. If you ever had to create a proposal for the first time you would know it goes something like this:&lt;/p&gt;

&lt;p&gt;"I need to create a proposal",&lt;br&gt;
"Maybe I can find a template",&lt;br&gt;
"hmm, most of these don't really do it for me",&lt;br&gt;
"what do I even need on my proposal?",&lt;br&gt;
"Is 20 pages too long, or too short?"&lt;/p&gt;

&lt;p&gt;The uncertainty comes because most freelancers have never before needed to even know what a proposal is until you need one, the anxiety and frustration can kick in and completely make you feel overwhelmed. &lt;/p&gt;

&lt;p&gt;Luckily there are some great tools out there to help with this, today we will be looking at 3 proposal creators for freelance web designer and developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-pandadoc"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.pandadoc.com/website-design-proposal-template/"&gt;PandaDoc&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The first one is PandaDoc they have a massive library of templates for all kinds of niches, Some features of PandaDoc are: eSignatures, Custom workflow's, even an API.&lt;/p&gt;

&lt;p&gt;PandaDoc is the one tool for all company documents solution, and if you have a large team this really seems like a good fit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing:
&lt;/h3&gt;

&lt;p&gt;PandaDoc has a free tier along with premium tiers for Enterprises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-bonsai"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.hellobonsai.com/a/freelance-web-design-proposal-sample"&gt;Bonsai&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Bonsai has a free web design proposal template with estimates, read receipt notifications &amp;amp; e-approval available for download, Bonsai positions itself as Everything you need to run your freelance business. It has a lot of tools besides just creating templates and is worth checking out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing:
&lt;/h3&gt;

&lt;p&gt;Bonsai has no free tier, although you do get some free features without paying, Their pricing starts at $19 per month, paid annually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-bidheap"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://app.bidheap.com"&gt;BidHeap&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This one will be a bit biased since this is my own product I bootstrapped and launched today actually, so here goes. BidHeap is a freelance tool that will help creators with the business part of their freelance career by providing an ecosystem of apps. So for our very first app launch, we created a proposal creator. It is completely free at the moment and premium features will become available soon. You can create and download proposals in pdf completely free.&lt;/p&gt;

&lt;p&gt;If you want to try it out head over to &lt;a href="https://app.bidheap.com/"&gt;https://app.bidheap.com&lt;/a&gt; to get started.&lt;/p&gt;

&lt;p&gt;As always thanks for reading and I hope you found something valuable in this article. Cheers.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>tooling</category>
    </item>
    <item>
      <title>How to create code compressor in JavaScript | HTML Minifier</title>
      <author>Stackfindover</author>
      <pubDate>Tue, 29 Jun 2021 16:00:09 +0000</pubDate>
      <link>https://dev.to/stackfindover/how-to-create-code-compressor-in-javascript-html-minifier-32i</link>
      <guid>https://dev.to/stackfindover/how-to-create-code-compressor-in-javascript-html-minifier-32i</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hello guys, today I am going to show you how to create an HTML Minifier using HTML CSS &amp;amp; JavaScript, in this article, I will create a simple code minifier using some line of JavaScript code.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-minifier-step-by-step"&gt;
  &lt;/a&gt;
  HTML Minifier step by step
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#step-1-creating-a-new-project"&gt;
  &lt;/a&gt;
  Step 1 — Creating a New Project
&lt;/h4&gt;

&lt;p&gt;In this step, we need to create a new project folder and files(index.html, style.css) for creating an awesome responsive website footer. In the next step, you will start creating the structure of the webpage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You may like these also:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://blog.stackfindover.com/signature-pad-javascript/"&gt;JavaScript signature pad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.stackfindover.com/full-page-scrolling-effect-using-javascript/"&gt;Full Page Scrolling Effect&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#step-2-setting-up-the-basic-structure"&gt;
  &lt;/a&gt;
  Step 2 — Setting Up the basic structure
&lt;/h4&gt;

&lt;p&gt;In this step, we will add the HTML code to create the basic structure of the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;How to make html minifier&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the base structure of most web pages that use HTML.&lt;br&gt;
Add the following code inside the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"codeminify"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"simplecode"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Paste or type your data here..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"htmlMinify"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Minify HTML&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Output"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"minifycode"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-3-adding-styles-for-the-classes"&gt;
  &lt;/a&gt;
  Step 3 — Adding Styles for the Classes
&lt;/h4&gt;

&lt;p&gt;In this step, we will add styles to the section class Inside style.css file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Poppins:wght@300&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.codeminify&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;420px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nf"&gt;#htmlMinify&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#4b00ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-4-adding-some-lines-of-javascript-code"&gt;
  &lt;/a&gt;
  Step 4 — Adding some lines of JavaScript code
&lt;/h4&gt;

&lt;p&gt;In this step, we will add some JavaScript code to minify html code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;minify_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\&amp;lt;&lt;/span&gt;&lt;span class="se"&gt;\!&lt;/span&gt;&lt;span class="sr"&gt;--&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;?[^\s&lt;/span&gt;&lt;span class="sr"&gt;?&lt;/span&gt;&lt;span class="se"&gt;\[][\s\S]&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;--&lt;/span&gt;&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\&amp;gt;\s&lt;/span&gt;&lt;span class="sr"&gt;*\&amp;lt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;htmlMinify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;minify_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;textarea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;$tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;textarea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#html-minifier-final-result"&gt;
  &lt;/a&gt;
  HTML Minifier final result
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pPztzYUNbeU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What the heck does an Architect do?</title>
      <author>Adam Crockett</author>
      <pubDate>Tue, 29 Jun 2021 15:56:43 +0000</pubDate>
      <link>https://dev.to/adam_cyclones/what-the-heck-does-an-architect-do-3lg8</link>
      <guid>https://dev.to/adam_cyclones/what-the-heck-does-an-architect-do-3lg8</guid>
      <description>&lt;p&gt;It's something I am curious to know about because I think I already do this job&lt;/p&gt;

</description>
      <category>help</category>
    </item>
    <item>
      <title>Build a serverless, real-time application with modern APIs: The GraphQL Real-time Race</title>
      <author>Mark Ramrattan </author>
      <pubDate>Tue, 29 Jun 2021 15:50:26 +0000</pubDate>
      <link>https://dev.to/aws-builders/build-a-serverless-real-time-application-with-modern-apis-the-graphql-real-time-race-1b48</link>
      <guid>https://dev.to/aws-builders/build-a-serverless-real-time-application-with-modern-apis-the-graphql-real-time-race-1b48</guid>
      <description>&lt;p&gt;I attended this awesome AWS virtual workshop over 5 days from June 21st - 25th, where we spent an hour and half each day going through an episode (5 episodes in total). During this time, I built a fully functioning Formula 1 based application using AWS AppSync, AWS Amplify, Amazon Location Service and many others AWS services. Apart from learning how to build solutions to different use-cases using AWS services, I'm a massive Ferrari Formula 1 fan… Therefore doing this type of workshop is double the fun for me to take on. I am sure you'll learn something in this workshop that can help you with your projects. &lt;/p&gt;

&lt;p&gt;However, like with many virtual workshops it doesn't always go smoothly :) This dev post is to help other developers overcome issues I encountered when completing this workshop. Don't worry if you didn't attend, you can still follow along and complete the workshop with the contents in this post. In the words of F1 commentator Murray Walker,  &lt;em&gt;'And it's GO! GO! GO!'&lt;/em&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;This workshop is well suited for developers, Solution Architects, and anybody looking to get started with GraphQl on AWS. The main programing language used in Typescript and Javascript. However, you do not need to have an advance knowledge of coding. All the code is provided for you.&lt;/p&gt;

&lt;p&gt;This workshop should take you about 5 hours to complete.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#virtual-workshop-link-click-here"&gt;
  &lt;/a&gt;
  Virtual Workshop Link: &lt;a href="https://amplify-appsync-real-time-race.workshop.aws/en/"&gt;Click Here&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This will take you through the workshop, step by step (including all the code)&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#video-for-each-episode"&gt;
  &lt;/a&gt;
  Video for each episode
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Episode 1: &lt;a href="https://youtu.be/4TmeoTw4xjI"&gt;Build and deploy your serverless app in minutes
&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode 2: &lt;a href="https://youtu.be/ahEUDx36gEo"&gt;Get started and dive into API modernization with GraphQL&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode 3: &lt;a href="https://youtu.be/Dx3HyyCycsc"&gt;Integrate real-time location services into your app so you can interact with users based on where they are&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode 4: &lt;a href="https://youtu.be/BZ0PVKSHDSE"&gt;Integrate chat and push notifications into your app to drive fan engagement via a second screen
&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode 5: &lt;a href="https://youtu.be/moJ3dIKYjbA"&gt;Final implementation and architecture of your application with your data
&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#all-5-episodes-in-a-playlist"&gt;
  &lt;/a&gt;
  All 5 Episodes in a Playlist
&lt;/h3&gt;

&lt;p&gt;I also created a playlist of all 5 videos, if you want to watch them all, one after the other: &lt;a href="https://youtube.com/playlist?list=PLihp0nPtXXMmBcprUwSCgjHOCH36FXHsl"&gt;Click Here&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#slide-deck-for-each-episode"&gt;
  &lt;/a&gt;
  Slide Deck for Each Episode
&lt;/h3&gt;

&lt;p&gt;Slide Decks 1 - 5: &lt;a href="https://www.dropbox.com/sh/0df215yzvk587b4/AAB6nZ1tJC8CSn1VGwJ-7Egma?dl=0"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each person who conducted an episode / session had slides to work alongside the workshop. You might find this useful for understanding the concepts of each section. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#episode-1"&gt;
  &lt;/a&gt;
  Episode 1
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Build and deploy your serverless app in minutes&lt;/strong&gt;&lt;br&gt;
Video: &lt;a href="https://youtu.be/4TmeoTw4xjI"&gt;Episode 1 - Walkthrough&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/BricePelle"&gt;Brice Pellé&lt;/a&gt; lead this session. I found it hard keeping pace, as I had many errors and was trying to follow along whilst debugging. Below are my tips so you find a faster pathway. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tips:&lt;/em&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pick Ohio (us-east-2) as your region. Don't do what I did and pick eu-west-1 / eu-west-2 (I'm in London and wanted a region closer). Amazon Location Service is only available in specific regions and in eu-west-1 I had trouble getting it all working in that region. Worked great in us-east-2…&lt;/p&gt;
&lt;/blockquote&gt;



&lt;blockquote&gt;
&lt;p&gt;Cloud9 is a great IDE service. Strongly encourage you to use that route to do this workshop. Later on in Episode 3 Video tutorial, you'll see errors and warnings. You can turn it off, to avoid seeing them.  Cloud9 -&amp;gt; Preferences -&amp;gt; Language -&amp;gt; Hints and Warnings -&amp;gt; Turn off &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBocK46z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnthepbm94us8qw40wfk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBocK46z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnthepbm94us8qw40wfk.png" alt="Cloud9 - Hints"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;At the start of the session, many of us had a problem with VPC errors when setting up our Cloud9 for the first time. Simple way to solve this is to create the Default VPC. Your VPCs -&amp;gt; Actions -&amp;gt; Create Default VPC &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LVb43UNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj5ar56373wueqia8w5c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LVb43UNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj5ar56373wueqia8w5c.png" alt="Default VPC"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;57:55 mins into the tutorial video (Lab 1 -&amp;gt; Add Auth), Read &amp;amp; Update is selected on Event. Make sure you select both of them, the workshop guide only instructs you to select just Read. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xvUlEzgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5evioor51bydu3bjtac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xvUlEzgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5evioor51bydu3bjtac.png" alt="Tick Read &amp;amp; Update"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#episode-2"&gt;
  &lt;/a&gt;
  Episode 2
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Get started and dive into API modernization with GraphQL&lt;/strong&gt;&lt;br&gt;
Video: &lt;a href="https://youtu.be/ahEUDx36gEo"&gt;Episode 2 - Walkthrough&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/BricePelle"&gt;Brice Pellé&lt;/a&gt; did this session and it was a good continuation from Day 1. I thought it went well, probably because I attempted this lab before the session started (prep work). Following along was easier. Main tip for this area is to make sure you take breaks when you're tired. Lots of detail in setting up the connection with DynamoDB. A typo can result in having to redo the entire section to find out what went wrong. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bm1Z_v_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpzdxs77xkc04pn34bpf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bm1Z_v_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpzdxs77xkc04pn34bpf.png" alt="DynamoDB Table Setup"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#episode-3"&gt;
  &lt;/a&gt;
  Episode 3
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Integrate real-time location services into your app so you can interact with users based on where they are&lt;/strong&gt;&lt;br&gt;
Video: &lt;a href="https://youtu.be/Dx3HyyCycsc"&gt;Episode 3 - Walkthrough&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the section where I found out eu-west-2 didn't have Amazon Location Service available (doh moment, happens to all of us). I deleted everything and started again (in us-east-2). I did manage to adjust the code to get eu-west-1 to work though for the sake of fluidity, I went back to the beginning. Probably my favourite feature from the entire workshop. Absolutely love the geofencing and the tracking of movement. &lt;a href="https://twitter.com/mavi888uy"&gt;Marcia Villalba&lt;/a&gt; covered this session swiftly. Watch out for the right IAM role to update: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BhKvXmOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dmrpzzd22eujuijkemx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BhKvXmOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dmrpzzd22eujuijkemx.png" alt="IAM - "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you see the Map working for the First Time: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l62Z1Kzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbx1tdmlrh0i6dywwyes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l62Z1Kzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbx1tdmlrh0i6dywwyes.png" alt="Tracking Movement"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#episode-4"&gt;
  &lt;/a&gt;
  Episode 4
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Integrate chat and push notifications into your app to drive fan engagement via a second screen&lt;/strong&gt;&lt;br&gt;
Video: &lt;a href="https://youtu.be/BZ0PVKSHDSE"&gt;Episode 4 - Walkthrough&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/deekob"&gt;Derek Bingham&lt;/a&gt;, talks through this section. Take your time going through the details of integrating pinpoint. The initial setup of chat is straightforward though adding images and tagging someone requires careful setup. I got bit carried away in my chat :) Yes I know Ferrari are not winning the title this year, we can dream though…  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---1qFO_Wx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbi8rtbgqxw9hzdst06u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1qFO_Wx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbi8rtbgqxw9hzdst06u.png" alt="Chat"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#episode-5"&gt;
  &lt;/a&gt;
  Episode 5
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#live-real-time-race-with-aws-appsync"&gt;
  &lt;/a&gt;
  Live real time race with AWS AppSync
&lt;/h3&gt;

&lt;p&gt;Video: &lt;a href="https://youtu.be/moJ3dIKYjbA"&gt;Episode 5 - Walkthrough&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/electricste"&gt;Stefano Sandrini&lt;/a&gt; went through Session 5. You can easily get something wrong in this section. Take your time, and you're better off watching Stefano video rather than just following the written instructions. During the 'Ingest real-time data into your app' section it asks you to open the 'parameters.json' file. Don't do what I did and add that piece of the code into the function-parameters file. You need to create a new parameter.json file and insert the code into that file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "stepFunctionprocessWorkflowArn": {
    "Fn::GetAtt": [
      "stepFunctionprocessWorkflow",
      "Outputs.Arn"
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final outcome of the workshop is awesome, definitely worth seeing your car sprint around the track:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r3n22X9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzsxqce6nif53ec5qs0y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3n22X9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzsxqce6nif53ec5qs0y.png" alt="Live Race"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Great workshop, thoroughly enjoyed undertaking this one. I definitely know a lot more now than when I started. I'll definitely be adapting this workshop and building this knowledge within my own project. I've gone through this workshop probably 3 times. I will still need to go through it again, understanding how each part of the code interacts. I would recommend you do the same. It's great when it all works at the end, though if you don't understand what's going on in each section (code) you'll have difficulty transferring that over to problems you're trying to solve. Feel free to drop your thoughts in the comments. If you encounter any problems when doing this workshop, feel free to drop them in the comments and you can also find me on Twitter: &lt;a href="https://twitter.com/markramrattan"&gt;@markramrattan&lt;/a&gt; More information and solutions can be found on &lt;a href="https://discord.com/invite/amplify"&gt;AWS Amplify Discord&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I have a live fully working version running, so if you have any questions or you want to check something out, let me know. I could do a live code session of me doing it all again from scratch, though the AWS team members have done a great job with the video walkthroughs.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#clean-up"&gt;
  &lt;/a&gt;
  Clean Up
&lt;/h3&gt;

&lt;p&gt;Many of the services used in this workshop have a free tier. However, make sure to clean up at the end of the workshop to avoid incurring charges.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To clean up your Amplify project, run:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;amplify delete
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To clean up your Location resources, head to the Location service AWS console:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maps: Select GraphQlRealTimeRacing and click Delete Map&lt;/li&gt;
&lt;li&gt;Geofence collections: Select MonzaCircuit and click Delete geofence collection.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you used Cloud9 for this workshop, head to the Cloud9 AWS console, select your environment, and click Delete.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>amplify</category>
      <category>graphql</category>
      <category>appsync</category>
    </item>
    <item>
      <title>React CMS: The missing link</title>
      <author>Matteo Frana</author>
      <pubDate>Tue, 29 Jun 2021 15:39:18 +0000</pubDate>
      <link>https://dev.to/matfrana/react-cms-the-missing-link-3iok</link>
      <guid>https://dev.to/matfrana/react-cms-the-missing-link-3iok</guid>
      <description>&lt;p&gt;&lt;strong&gt;You are a developer. You love your headless CMS.&lt;/strong&gt; &lt;br&gt;
Having an API with no hassles and a modern front-end feels great.&lt;/p&gt;

&lt;p&gt;Do you think your users are happy too? &lt;strong&gt;Think again.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-content-creators-want"&gt;
  &lt;/a&gt;
  What content creators want
&lt;/h1&gt;

&lt;p&gt;Content creators want to have a solution that is &lt;strong&gt;easy and inspiring to use&lt;/strong&gt;, possibly with no instruction to read.&lt;br&gt;
Wix is such a tool, with its point and click interface.&lt;br&gt;
&lt;strong&gt;An headless CMS&lt;/strong&gt;, with its gray forms and complex interface, is &lt;strong&gt;neither easy nor inspiring&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-about-designers"&gt;
  &lt;/a&gt;
  What about designers?
&lt;/h1&gt;

&lt;p&gt;Designers want to be able to express the &lt;strong&gt;corporate design system&lt;/strong&gt; and be sure that &lt;strong&gt;nobody will ever break it&lt;/strong&gt;.&lt;br&gt;
This is why they don't like visual editing, as it often implies too much freedom. Designers want &lt;strong&gt;flexibility&lt;/strong&gt; (for themselves) and &lt;strong&gt;constraints&lt;/strong&gt; (for content creators).&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#are-you-really-happy"&gt;
  &lt;/a&gt;
  Are you really happy?
&lt;/h1&gt;

&lt;p&gt;Do you like going back and forth between your headless CMS to define fields and your code to fetch these fields and use them in your React app?&lt;br&gt;
&lt;strong&gt;Wouldn't it be great if you could save time, stay in your editor&lt;/strong&gt; and define there your fields, as you do for the &lt;strong&gt;props of React components&lt;/strong&gt;?&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-missing-link"&gt;
  &lt;/a&gt;
  The missing link
&lt;/h1&gt;

&lt;p&gt;The missing link is a framework that has decoupled APIs as a service, but lets you define your &lt;strong&gt;content blocks as components&lt;/strong&gt; (for example React or Vue components), providing some &lt;em&gt;magic&lt;/em&gt; to enable visual editing over the texts and images. &lt;strong&gt;The props of this components enforce constraints&lt;/strong&gt; so that designers can be sure that nobody will break the design. As a plus, it would be great if the schema of components could &lt;strong&gt;self-document&lt;/strong&gt; itself.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#i-didnt-find-the-missing-link"&gt;
  &lt;/a&gt;
  I didn't find the missing link...
&lt;/h1&gt;

&lt;p&gt;... so I created it ;P&lt;br&gt;
Its name is &lt;strong&gt;&lt;a href="https://reactbricks.com"&gt;React Bricks&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#its-just-react"&gt;
  &lt;/a&gt;
  It’s just React
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Content blocks are React components&lt;/strong&gt;. No back and forth between the front-end and the headless CMS. Define the fields as props on your component, &lt;strong&gt;get visual editing for free&lt;/strong&gt; from React Bricks &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;RichText&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Repeater&amp;gt;&lt;/code&gt; components.&lt;br&gt;
Props like background or anything you need can be changed via &lt;strong&gt;sidebar controls&lt;/strong&gt; (you can choose a standard control like text, number, select, color, etc. or provide a custom component).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Y0Odt3W6L48"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#great-editing-experience"&gt;
  &lt;/a&gt;
  Great editing experience
&lt;/h2&gt;

&lt;p&gt;The editing interface is very &lt;strong&gt;easy and familiar&lt;/strong&gt; with Visual editing and a Sidebar to change props, with &lt;strong&gt;no way to break the design&lt;/strong&gt;.&lt;br&gt;
In the Playground you get the &lt;strong&gt;documentation&lt;/strong&gt; for all of your content blocks for free.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/I8eL7HexnmQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-flexible-enough"&gt;
  &lt;/a&gt;
  Is it flexible enough?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;You can configure everything&lt;/strong&gt;: add custom fields on the page accessible via hooks, provide your own components for rich text rendering or for the sidebar controls, validate props, change ui like logo or responsive breakpoints, set user permissions...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-fast"&gt;
  &lt;/a&gt;
  Is it fast?
&lt;/h2&gt;

&lt;p&gt;You bet! The starter projects use the latest &lt;strong&gt;Next.js&lt;/strong&gt; versions with a &lt;strong&gt;blazing fast&lt;/strong&gt; statically generated website.&lt;br&gt;
&lt;strong&gt;Images are optimized&lt;/strong&gt; for responsive view and lazy load and served from a fast global &lt;strong&gt;CDN&lt;/strong&gt;.&lt;br&gt;
You can provide a &lt;strong&gt;build web hook&lt;/strong&gt; to let your editors trigger a rebuild on the server with the click of a button.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#developer-experience"&gt;
  &lt;/a&gt;
  Developer experience
&lt;/h2&gt;

&lt;p&gt;React Bricks is written in &lt;strong&gt;TypeScript&lt;/strong&gt; and fully typed.&lt;br&gt;
&lt;strong&gt;Scaffold a project in seconds using the CLI.&lt;/strong&gt;&lt;br&gt;
The &lt;a href="https://docs.reactbricks.com"&gt;Documentation&lt;/a&gt; is very complete.&lt;br&gt;
You may start from the &lt;a href="https://reactbricks.com/learn"&gt;Step-by-step Tutorial&lt;/a&gt; where you gain points... with a final surprise!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#ok-but-you-are-biased"&gt;
  &lt;/a&gt;
  Ok, but you are biased!
&lt;/h1&gt;

&lt;p&gt;Of course I am, but I am sincere when I tell you that I love creating "bricks" of content in React and seeing our customers happy while creating content. &lt;br&gt;
But don't take my word for it. We have big startups like &lt;a href="https://capbase.com"&gt;CapBase&lt;/a&gt; and &lt;a href="https://casavo.com"&gt;Casavo&lt;/a&gt; powering their websites (and empowering their marketing) with React Bricks. And &lt;a href="https://twitter.com/Swizec"&gt;Swizec Teller&lt;/a&gt; wrote a &lt;a href="https://swizec.com/blog/react-bricks-visual-blocks-editor-for-nextjs-codewithswiz-22/"&gt;great post about React Bricks&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOcLbPY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1201364751843905536/Q1XVVkab_normal.jpg" alt="Kyle Mathews profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kyle Mathews
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/kylemathews"&gt;@kylemathews&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/matfrana"&gt;@matfrana&lt;/a&gt; &lt;a href="https://twitter.com/jaredpalmer"&gt;@jaredpalmer&lt;/a&gt; &lt;a href="https://twitter.com/ianstormtaylor"&gt;@ianstormtaylor&lt;/a&gt; &lt;a href="https://twitter.com/tannerlinsley"&gt;@tannerlinsley&lt;/a&gt; &lt;a href="https://twitter.com/rauchg"&gt;@rauchg&lt;/a&gt; &lt;a href="https://twitter.com/Gatsby"&gt;@Gatsby&lt;/a&gt; I think stuff like this is the future! Please DM me if you find ways that Gatsby can support you better.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:45 PM - 11 Mar 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1237872398889701378" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1237872398889701378" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1237872398889701378" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JGJyj-jl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1364001393384718338/Vb4hjqrv_normal.jpg" alt="Laurie Voss profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Laurie Voss
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @seldo
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/matfrana"&gt;@matfrana&lt;/a&gt; &lt;a href="https://twitter.com/ReactBricks"&gt;@ReactBricks&lt;/a&gt; &lt;a href="https://twitter.com/wesbos"&gt;@wesbos&lt;/a&gt; &lt;a href="https://twitter.com/kentcdodds"&gt;@kentcdodds&lt;/a&gt; &lt;a href="https://twitter.com/mjackson"&gt;@mjackson&lt;/a&gt; &lt;a href="https://twitter.com/markdalgleish"&gt;@markdalgleish&lt;/a&gt; &lt;a href="https://twitter.com/JoshWComeau"&gt;@JoshWComeau&lt;/a&gt; &lt;a href="https://twitter.com/devdevcharlie"&gt;@devdevcharlie&lt;/a&gt; &lt;a href="https://twitter.com/swyx"&gt;@swyx&lt;/a&gt; &lt;a href="https://twitter.com/ken_wheeler"&gt;@ken_wheeler&lt;/a&gt; &lt;a href="https://twitter.com/jaredpalmer"&gt;@jaredpalmer&lt;/a&gt; &lt;a href="https://twitter.com/tlakomy"&gt;@tlakomy&lt;/a&gt; &lt;a href="https://twitter.com/tannerlinsley"&gt;@tannerlinsley&lt;/a&gt; &lt;a href="https://twitter.com/flybayer"&gt;@flybayer&lt;/a&gt; I've wanted to see something like this for a long time; will check it out.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:57 PM - 23 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1374480533955047424" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1374480533955047424" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1374480533955047424" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBRWI5_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1404087629314985985/_GBAJV-8_normal.jpg" alt="Ken Wheeler profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ken Wheeler
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/ken_wheeler"&gt;@ken_wheeler&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/matfrana"&gt;@matfrana&lt;/a&gt; &lt;a href="https://twitter.com/ReactBricks"&gt;@ReactBricks&lt;/a&gt; &lt;a href="https://twitter.com/wesbos"&gt;@wesbos&lt;/a&gt; &lt;a href="https://twitter.com/kentcdodds"&gt;@kentcdodds&lt;/a&gt; &lt;a href="https://twitter.com/mjackson"&gt;@mjackson&lt;/a&gt; &lt;a href="https://twitter.com/markdalgleish"&gt;@markdalgleish&lt;/a&gt; &lt;a href="https://twitter.com/JoshWComeau"&gt;@JoshWComeau&lt;/a&gt; &lt;a href="https://twitter.com/devdevcharlie"&gt;@devdevcharlie&lt;/a&gt; &lt;a href="https://twitter.com/seldo"&gt;@seldo&lt;/a&gt; &lt;a href="https://twitter.com/swyx"&gt;@swyx&lt;/a&gt; &lt;a href="https://twitter.com/jaredpalmer"&gt;@jaredpalmer&lt;/a&gt; &lt;a href="https://twitter.com/tlakomy"&gt;@tlakomy&lt;/a&gt; &lt;a href="https://twitter.com/tannerlinsley"&gt;@tannerlinsley&lt;/a&gt; &lt;a href="https://twitter.com/flybayer"&gt;@flybayer&lt;/a&gt; Looks fuckin sweet
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:55 PM - 23 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1374479894692818950" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1374479894692818950" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1374479894692818950" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lkey4fDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/958030566963658752/aY-MDtd2_normal.jpg" alt="Swizec Teller published ServerlessHandbook.dev profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Swizec Teller published ServerlessHandbook.dev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @swizec
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Okay &lt;a href="https://twitter.com/ReactBricks"&gt;@ReactBricks&lt;/a&gt; is the first visual website builder to make me reconsider markdown&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/RHx4LL7nvv"&gt;swizec.com/blog/react-bri…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:06 PM - 09 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1359186869402013699" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1359186869402013699" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1359186869402013699" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h1&gt;
  &lt;a href="#what-do-you-think-about-it"&gt;
  &lt;/a&gt;
  What do &lt;em&gt;you&lt;/em&gt; think about it?
&lt;/h1&gt;

&lt;p&gt;Please, let me know what do you think about &lt;a href="https://reactbricks.com"&gt;React Bricks&lt;/a&gt;.&lt;br&gt;
What do you like (or not) about it? What would you use it for? How may I help you start with a project?&lt;/p&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>cms</category>
      <category>visualediting</category>
    </item>
  </channel>
</rss>
