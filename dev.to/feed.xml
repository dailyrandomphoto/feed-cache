<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript Event Loop</title>
      <author>Ejjraifi Hamza</author>
      <pubDate>Sat, 01 Jan 2022 21:37:11 +0000</pubDate>
      <link>https://dev.to/ejjraifihamza/javascript-event-loop-3kd4</link>
      <guid>https://dev.to/ejjraifihamza/javascript-event-loop-3kd4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#javascript-singlethreaded-model"&gt;
  &lt;/a&gt;
  JavaScript single-threaded model
&lt;/h2&gt;

&lt;p&gt;everyone knows that JavaScript is a single-threaded programming language. In other words, JavaScript can do only one thing at a single point in time.&lt;/p&gt;

&lt;p&gt;The JavaScript engine executes a script from the top of the file and works its way down. JavaScript creates the execution contexts and pushes and pops functions onto and off the call stack in the execution process.&lt;/p&gt;

&lt;p&gt;If a function takes a long time to execute, you cannot interact with the web browser during the function’s execution because the page hangs.&lt;/p&gt;

&lt;p&gt;A function that takes a long time to complete is called a blocking function. Technically, a blocking function blocks all the interactions of the webpage, such as mouse click.&lt;/p&gt;

&lt;p&gt;A blocking function can be a function that downloads a file from a remote server or calls an API from an external server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-of-blocking-function"&gt;
  &lt;/a&gt;
  Example of blocking function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// emulate time consuming task&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Start script...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Download a file.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Done!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what we have here is a big &lt;code&gt;while&lt;/code&gt; loop inside the task() function to emulates a time-consuming task, the task() function is a blocking function, why ? because it takes a long time to complete.&lt;/p&gt;

&lt;p&gt;And therefore the script will hangs for a few seconds (depending on how fast the computer is) and issues the following output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Start&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;Download&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;Done&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to execute the script, the JavaScript engine places the first call &lt;code&gt;console.log()&lt;/code&gt; on top of the stack and executes it. Then, JavaScript places the &lt;code&gt;task()&lt;/code&gt; function on top of the call stack and executes the function.&lt;/p&gt;

&lt;p&gt;However, it’ll take a while to complete the &lt;code&gt;task()&lt;/code&gt; function. Therefore, you’ll see the message &lt;code&gt;'Download a file.'&lt;/code&gt; a little time later. After the &lt;code&gt;task()&lt;/code&gt; function completes, the JavaScript engine pops it off the call stack.&lt;/p&gt;

&lt;p&gt;Finally, the JavaScript engine places the last call to the &lt;code&gt;console.log('Done!')&lt;/code&gt; function and executes it, which will be very fast.&lt;/p&gt;

&lt;p&gt;The following figure illustrates this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8WiBGM-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/749du6idwe6psfvmnc26.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8WiBGM-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/749du6idwe6psfvmnc26.gif" alt="Blocking Function" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#callbacks-to-the-rescue"&gt;
  &lt;/a&gt;
  Callbacks to the rescue
&lt;/h2&gt;

&lt;p&gt;To prevent a blocking function from blocking other activities, you typically put it in a callback function for execution later&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// emulate time consuming task&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Start script...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Download a file.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Done!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, you’ll see the message &lt;code&gt;'Start script...'&lt;/code&gt; and &lt;code&gt;'Done!'&lt;/code&gt; immediately. And after that, you’ll see the message &lt;code&gt;'Download a file'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Start&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;Done&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nx"&gt;Download&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you call the &lt;code&gt;setTimeout()&lt;/code&gt; function, make a fetch request or click a button, the web browser can do these activities concurrently and asynchronously.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;setTimeout()&lt;/code&gt;, fetch requests, and DOM events are parts of the Web APIs of the web browser.&lt;/p&gt;

&lt;p&gt;In our example, when you call the &lt;code&gt;setTimeout()&lt;/code&gt; function, the JavaScript engine places it on the call stack, and the Web API creates a timer that expires in 1 second.&lt;/p&gt;

&lt;p&gt;Then JavaScript engine place the task() function is into a queue called a callback queue or a task queue.&lt;/p&gt;

&lt;p&gt;The following figure illustrates this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--peVvdZL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q628qtq4gmwjalefu1qp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--peVvdZL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q628qtq4gmwjalefu1qp.gif" alt="Event Loop" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The event loop is a constantly running process that monitors both the callback queue and the call stack.&lt;/p&gt;

&lt;p&gt;The event loop before move task() from the callback queue, first ask call stack if empty, if not the event loop waits until it is, however if empty then he moves task() to the call stack.&lt;/p&gt;

&lt;p&gt;that's it for call stack, next post will be about hoisting&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this post, you have learned about the JavaScript event loop, a constantly running process that coordinates the tasks between the call stack and callback queue to achieve concurrency.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A Minimal Pluggy Example</title>
      <author>Waylon Walker</author>
      <pubDate>Sat, 01 Jan 2022 21:21:42 +0000</pubDate>
      <link>https://dev.to/waylonwalker/a-minimal-pluggy-example-3mp0</link>
      <guid>https://dev.to/waylonwalker/a-minimal-pluggy-example-3mp0</guid>
      <description>&lt;p&gt;Pluggy makes it so easy to allow users to modify the behavior of a framework without thier specific feature needing to be implemented in the framework itself.&lt;/p&gt;

&lt;p&gt;I've really been loving the workflow of frameworks built with pluggy.  The first one that many python devs have experience with is pytest.  I've never created a pytest plugin, and honestly at the time I looked into how they were made was a long time ago and it went over my head.  I use a data pipelining framework called kedro, and have build many plugins for it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-plugin"&gt;
  &lt;/a&gt;
  Making a plugin
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;super easy to do&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As long as the framework document the hooks that are available and what it passes to them it's so easy to make a plugin.  Its just importing the&lt;br&gt;
&lt;code&gt;hook_impl&lt;/code&gt;, making a class with a function that represents one of the hooks,&lt;br&gt;
and decorating it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hook_impl&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LowerHook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook_impl&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-pluggy"&gt;
  &lt;/a&gt;
  installing pluggy
&lt;/h2&gt;

&lt;p&gt;Installing pluggy is just like most python applications, install python, make your virtual environment, and pip install it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pluggy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-a-plugin-driven-framework"&gt;
  &lt;/a&gt;
  Making a plugin driven framework
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;much less easy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At the time I started playing with pluggy, their docs were less complete, or I was just plain blind, but this was a huge part of the docs that were missing for me that now actually appear to be there.  But to get some more examples out there, here is my version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pluggy&lt;/span&gt;

&lt;span class="c1"&gt;# These don't need to match
&lt;/span&gt;&lt;span class="n"&gt;HOOK_NAMESPACE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"pluggy_example"&lt;/span&gt; &lt;span class="n"&gt;PROJECT_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"pluggy_example"&lt;/span&gt;

&lt;span class="n"&gt;hook_spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HookspecMarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOOK_NAMESPACE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;hook_impl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HookimplMarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOOK_NAMESPACE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PluggyExampleSpecs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    This is where we spec out our frameworks hooks, I like to refer to them as
    the lifecycle.  Each of these functions is a hook that we are exposing to
    our users, with the kwargs that we expect to pass them.
    """&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook_spec&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'PluggyExample'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""
        The first hook that runs.
        """&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook_spec&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'PluggyExample'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""
        The last hook that runs.
        """&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PluggyExample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    This may not need to be a class, but I wanted a container where all the
    hooks had access to the message.  This made sense to me to do as a class.
    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Setup the plugin manager and register all the hooks.
        """&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PluginManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_hookspecs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PluggyExampleSpecs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hooks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hooks&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_register_hooks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_register_hooks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hook&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Run the hooks in the documented order, and pass in any kwargs the hook
        needs access to.  Here I am storing the message within this same class.
        """&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultHook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    These are some hooks that run by default, maybe these are created by the
    framework author.
    """&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook_impl&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook_impl&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    The user of this framework can apply the hook in their own code without
    changing the behavior of the framework, but the library has
    implemented it's own default hooks.
    """&lt;/span&gt;
    &lt;span class="n"&gt;pe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PluggyExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;DefaultHook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#modifying-behavior"&gt;
  &lt;/a&gt;
  Modifying behavior
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;as a user of PluggyExample&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now Lets pretent the user of this library likes everything about it, except, they don't like all the shouting.  They can either search for a plugin on Google, github, or pypi and find one, or make it themself. the magic here is that they do not need to have the package maintainer patch the core library itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LowerHook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    This is a new hook that a plugin author has created to modify the behavior
    of the framework to lowercase the message.
    """&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook_impl&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pluggy_example&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PluggyExample&lt;/span&gt; &lt;span class="n"&gt;pe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PluggyExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;DefaultHook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;LowerHook&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-pluggy-example"&gt;
  &lt;/a&gt;
  Running Pluggy Example
&lt;/h2&gt;

&lt;p&gt;Here is a short clip of me running the pluggy example in it's default state, then adding the LowerHook, and running a second time.&lt;/p&gt;


      
      
      Sorry, your browser doesn't support embedded videos.
     

</description>
      <category>python</category>
    </item>
    <item>
      <title>2021 pnpm recap</title>
      <author>Zoltan Kochan</author>
      <pubDate>Sat, 01 Jan 2022 21:18:19 +0000</pubDate>
      <link>https://dev.to/pnpm/2021-pnpm-recap-43a3</link>
      <guid>https://dev.to/pnpm/2021-pnpm-recap-43a3</guid>
      <description>&lt;p&gt;It is the end of the year and it was a good year for pnpm, so let's see how it went.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#download-stats"&gt;
  &lt;/a&gt;
  Download stats
&lt;/h3&gt;

&lt;p&gt;My goal this year was to beat Bower by the number of downloads. We were able to achieve this goal &lt;a href="https://npm-stat.com/charts.html?package=pnpm&amp;amp;package=bower&amp;amp;from=2021-01-01&amp;amp;to=2021-12-29"&gt;in November&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RMhXIuiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/pnpm-vs-bower-stats.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RMhXIuiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/pnpm-vs-bower-stats.png" alt="" width="880" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;pnpm was downloaded about &lt;a href="https://npm-stat.com/charts.html?package=pnpm&amp;amp;from=2016-12-01&amp;amp;to=2021-12-29"&gt;3 times more&lt;/a&gt; in 2021 than in 2020:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bcdv60W---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/download-stats-2021.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bcdv60W---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/download-stats-2021.png" alt="" width="880" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These stats don't even measure all the different ways that pnpm may be installed!&lt;br&gt;
They only measure the downloads of the &lt;a href="https://www.npmjs.com/package/pnpm"&gt;pnpm npm package&lt;/a&gt;. This year we also added compiled binary versions of pnpm, which are shipped differently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#docs-visits"&gt;
  &lt;/a&gt;
  Docs visits
&lt;/h3&gt;

&lt;p&gt;We collect some unpersonalized stats from our docs using Google Analytics.&lt;br&gt;
In 2021, sometimes we had more than 2,000 unique visitors a week.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gxKJT0UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/ga-unique-visits-2021.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gxKJT0UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/ga-unique-visits-2021.png" alt="" width="665" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of our users are from the United States and China.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLYFLObG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/countries-2021.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLYFLObG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/countries-2021.png" alt="" width="585" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-stars"&gt;
  &lt;/a&gt;
  GitHub stars
&lt;/h3&gt;

&lt;p&gt;Our &lt;a href="https://github.com/pnpm/pnpm"&gt;main GitHub repository&lt;/a&gt; received +5,000 stars this year.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LyXozx5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/stars-2021.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LyXozx5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/stars-2021.png" alt="" width="880" height="771"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-users"&gt;
  &lt;/a&gt;
  New users
&lt;/h3&gt;

&lt;p&gt;Our biggest new user this year is &lt;a href="https://github.com/pnpm/pnpm.github.io/pull/89"&gt;Bytedance&lt;/a&gt; (the company behind TikTok).&lt;/p&gt;

&lt;p&gt;Also, many great open-source projects started to use pnpm. Some switched to pnpm because of its great support of monorepos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vuejs/vue-next"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vitejs/vite"&gt;Vite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and &lt;a href="https://pnpm.io/workspaces#usage-examples"&gt;others&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some switched because they like how efficient, fast, and beautiful pnpm is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Autoprefixer/status/1476226146488692736"&gt;Autoprefixer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/PostCSS/status/1470438664006258701"&gt;PostCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Browserslist/status/1468264308308156419"&gt;Browserslist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#feature-highlights"&gt;
  &lt;/a&gt;
  Feature highlights
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#new-lockfile-format-since-v600"&gt;
  &lt;/a&gt;
  New lockfile format (since &lt;a href="https://github.com/pnpm/pnpm/releases/tag/v6.0.0"&gt;v6.0.0&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;One of the first and most important changes this year was the new &lt;code&gt;pnpm-lock.yaml&lt;/code&gt; format. This was a breaking change, so we had to release v6. But it was a success. The old lockfile was causing Git conflicts frequently. Since the new format was introduced, we did not receive any complaints about Git conflicts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managing-nodejs-versions-since-v6120"&gt;
  &lt;/a&gt;
  Managing Node.js versions (since &lt;a href="https://github.com/pnpm/pnpm/releases/tag/v6.12.0"&gt;v6.12.0&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;We shipped a new command (&lt;code&gt;pnpm env&lt;/code&gt;) that allows to manage Node.js versions. So you may use pnpm instead of Node.js version managers like nvm or Volta.&lt;/p&gt;

&lt;p&gt;Also, pnpm is shipped as a standalone executable, so you can run it even with no Node.js preinstalled on the system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#injecting-local-dependencies-since-v6200"&gt;
  &lt;/a&gt;
  Injecting local dependencies (since &lt;a href="https://github.com/pnpm/pnpm/releases/tag/v6.20.0"&gt;v6.20.0&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;You may "inject" a local dependency. By default, local dependencies are symlinked to &lt;code&gt;node_modules&lt;/code&gt; but with this new feature you may instruct pnpm to hard link the files of the package instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improved-reporting-of-peer-dependency-issues-since-v6240"&gt;
  &lt;/a&gt;
  Improved reporting of peer dependency issues (since &lt;a href="https://github.com/pnpm/pnpm/releases/tag/v6.24.0"&gt;v6.24.0&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;Peer dependency issues used to be printed as plain text and it was hard to understand them. They are now all grouped and printed in a nice hierarchy structure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-competition"&gt;
  &lt;/a&gt;
  The competition
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#yarn"&gt;
  &lt;/a&gt;
  Yarn
&lt;/h3&gt;

&lt;p&gt;Yarn added a pnpm linker in &lt;a href="https://dev.to/arcanis/yarn-31-corepack-esm-pnpm-optional-packages--3hak#new-install-mode-raw-pnpm-endraw-"&gt;v3.1&lt;/a&gt;. So Yarn can create a similar node-modules directory structure to the one that pnpm creates.&lt;/p&gt;

&lt;p&gt;Also, the Yarn team plans to implement a content-addressable storage to be more disk space efficient.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  npm
&lt;/h3&gt;

&lt;p&gt;The npm team decided to also adopt the symlinked node-modules directory structure that pnpm uses (related &lt;a href="https://github.com/npm/rfcs/blob/main/accepted/0042-isolated-mode.md"&gt;RFC&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/jarredsumner/status/1473416431291174912/photo/1"&gt;Bun&lt;/a&gt; written in Zig and &lt;a href="https://github.com/voltpkg/volt"&gt;Volt&lt;/a&gt; written in Rust both claim to be faster than npm/Yarn/pnpm. I did not benchmark these new package managers yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-plans"&gt;
  &lt;/a&gt;
  Future Plans
&lt;/h2&gt;

&lt;p&gt;Faster, better, best.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Decorator in Ruby on Rails</title>
      <author>Sergio Turpín</author>
      <pubDate>Sat, 01 Jan 2022 21:12:21 +0000</pubDate>
      <link>https://dev.to/sturpin/decorator-in-ruby-on-rails-14kk</link>
      <guid>https://dev.to/sturpin/decorator-in-ruby-on-rails-14kk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#-english-version-"&gt;
  &lt;/a&gt;
  &lt;center&gt;- English Version -&lt;/center&gt;
&lt;/h3&gt;




&lt;p&gt;Decorators provide a flexible alternative to subclassing for extending functionality. Simple! 😉&lt;/p&gt;

&lt;p&gt;There are several ways to implement it, but the easiest for me is using &lt;a href="https://rubygems.org/gems/draper"&gt;Draper gem&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-rails-app"&gt;
  &lt;/a&gt;
  1. Create Rails app
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; rails new decorator-rails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-install-draper-gem"&gt;
  &lt;/a&gt;
  2. Install Draper gem
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; bundle add draper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, from this moment when we create a controller it will automatically create our decorator file in &lt;code&gt;app/decorator&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-create-user-scaffold"&gt;
  &lt;/a&gt;
  3. Create user scaffold
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; rails g scaffold User first_name last_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Among other files, the file &lt;code&gt;app/decorators/user_decorator.rb&lt;/code&gt; has been created automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-add-custom-method"&gt;
  &lt;/a&gt;
  4. Add custom method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/decorators/user_decorator.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserDecorator&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Draper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Decorator&lt;/span&gt;
  &lt;span class="n"&gt;delegate_all&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;full_name&lt;/span&gt;
    &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That allows behavior to be added to an individual object without affecting the behavior of other objects from the same class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-decorate-object-in-controller"&gt;
  &lt;/a&gt;
  5. Decorate object in controller
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/users_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;decorate&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-show-it-in-view"&gt;
  &lt;/a&gt;
  6. Show it in View
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;# app/views/users/show.html.erb

First name: &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first_name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
Last name: &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
Full name: &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;full_name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now your view logic has been abstracted and organized to where it should be. This will greatly help you to reduce the code in your view files.&lt;/p&gt;

&lt;p&gt;Usually it is used with &lt;strong&gt;Presenters&lt;/strong&gt;, but I prefer to do it in another post 😉&lt;/p&gt;

&lt;p&gt;🔍 &lt;strong&gt;Recommended reading&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://refactoring.guru/es/design-patterns/decorator"&gt;Refactoring GURU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thegreatcodeadventure.com/rails-refactoring-part-iii-the-decorator-pattern/"&gt;The great code adventure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading 🙏  &lt;/p&gt;

&lt;p&gt;🌎 &lt;a href="https://sergioturpin.es"&gt;https://sergioturpin.es&lt;/a&gt;&lt;br&gt;
📷 &lt;a href="https://instagram.com/sergioturpin"&gt;Instagram&lt;/a&gt;&lt;br&gt;
🐦 &lt;a href="https://twitter.com/sergio_turpin"&gt;Twitter&lt;/a&gt;&lt;br&gt;
🐙 &lt;a href="https://github.com/sturpin"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-versi%C3%B3n-en-espa%C3%B1ol-"&gt;
  &lt;/a&gt;
  &lt;center&gt;- Versión en Español -&lt;/center&gt;
&lt;/h3&gt;




&lt;p&gt;El patrón &lt;strong&gt;Decorator&lt;/strong&gt; nos permite poder encapsular un objeto para que podamos extender su funcionalidad antes de su instanciación, así de simple! 😉&lt;/p&gt;

&lt;p&gt;Existen muchas formas de implementarlo, pero una de las más sencillas es hacerlo con la gema &lt;a href="https://rubygems.org/gems/draper"&gt;Draper&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-creamos-la-app-de-rails"&gt;
  &lt;/a&gt;
  1. Creamos la app de Rails
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; rails new decorator-rails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-instalamos-la-gema-draper"&gt;
  &lt;/a&gt;
  2. Instalamos la gema Draper
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; bundle add draper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bien, a partir de este momento cuando nosotros creemos un controlador, automáticamente se creará también su decorador en el directorio &lt;code&gt;app/decorator&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-creamos-el-scaffold-de-usuario"&gt;
  &lt;/a&gt;
  3. Creamos el scaffold de usuario
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; rails g scaffold User first_name last_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Además de otros archivos, el fichero &lt;code&gt;app/decorators/user_decorator.rb&lt;/code&gt; ha sido creado automáticamente.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-a%C3%B1adimos-un-m%C3%A9todo-personalizado"&gt;
  &lt;/a&gt;
  4. Añadimos un método personalizado
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/decorators/user_decorator.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserDecorator&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Draper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Decorator&lt;/span&gt;
  &lt;span class="n"&gt;delegate_all&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;full_name&lt;/span&gt;
    &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esto nos permite agregar comportamiento a un objeto individual sin afectar al comportamiento de otros objetos de la misma clase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-decoramos-el-objeto-en-el-controlador"&gt;
  &lt;/a&gt;
  5. Decoramos el objeto en el controlador
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/users_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;decorate&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-lo-mostramos-en-la-vista"&gt;
  &lt;/a&gt;
  6. Lo mostramos en la Vista
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;# app/views/users/show.html.erb

First name: &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first_name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
Last name: &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
Full name: &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;full_name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y ahora su lógica de vista se ha abstraído y organizado donde debería estar. Esto le ayudará enormemente a reducir el código en sus archivos de vista.&lt;/p&gt;

&lt;p&gt;Normalmente es usado conjuntamente con el patrón &lt;strong&gt;Presenters&lt;/strong&gt;, pero he preferido hacerlo en otro post 😉&lt;/p&gt;

&lt;p&gt;🔍 &lt;strong&gt;Lecturas recomendadas&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://refactoring.guru/es/design-patterns/decorator"&gt;Refactoring GURU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thegreatcodeadventure.com/rails-refactoring-part-iii-the-decorator-pattern/"&gt;The great code adventure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gracias por leer 🙏  &lt;/p&gt;

&lt;p&gt;🌎 &lt;a href="https://sergioturpin.es"&gt;https://sergioturpin.es&lt;/a&gt;&lt;br&gt;
📷 &lt;a href="https://instagram.com/sergioturpin"&gt;Instagram&lt;/a&gt;&lt;br&gt;
🐦 &lt;a href="https://twitter.com/sergio_turpin"&gt;Twitter&lt;/a&gt;&lt;br&gt;
🐙 &lt;a href="https://github.com/sturpin"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 42: Prolog</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Sat, 01 Jan 2022 20:18:41 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-42-prolog-nbc</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-42-prolog-nbc</guid>
      <description>&lt;p&gt;The computing world had periods of obsession with "Artificial Intelligence" a few times. One such period was during the late 1970s and 1980s when "&lt;a href="https://en.wikipedia.org/wiki/Logic_programming"&gt;logic programming&lt;/a&gt;" was the big AI idea.&lt;/p&gt;

&lt;p&gt;It was &lt;a href="https://en.wikipedia.org/wiki/Fifth_generation_computer"&gt;so huge and it failed so dismally&lt;/a&gt; that by now not only it is largely forgotten, but people rarely even know it ever happened.&lt;/p&gt;

&lt;p&gt;Let's take a dive into the history of AI, and check Prolog - the language at the center of those AI attempts, and while it's not any in-depth analysis, we'll bump into a few reasons why it all failed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h3&gt;

&lt;p&gt;Prolog does logic programming, but it also has some basic ability to do regular programming like I/O and so on. Many Prologs also have builtin constraint solver libraries similar to Z3. I'll stay away from those parts and mostly focus on the core Prolog.&lt;/p&gt;

&lt;p&gt;The idea of Prolog is that you define a bunch of formulas. It's not actually possible for computers to handle arbitrary formulas, so Prolog limits it to formulas like &lt;code&gt;A :- B1, B2, B3.&lt;/code&gt; meaning &lt;code&gt;A is true if all B are true&lt;/code&gt;, notably without negation and quantifiers (like "for all" or "exists"). If you need to do any &lt;code&gt;and&lt;/code&gt; / &lt;code&gt;or&lt;/code&gt; you can just add extra relations. Everything that fails to prove is treated as false.&lt;/p&gt;

&lt;p&gt;Let's start with some basics like Spanish Habsburg family tree:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;father(philip3, maria_anna).
father(philip3, philip4).
father(philip4, charles2).

mother(maria_anna, mariana).
mother(mariana, charles2).

parent(A, B) :- father(A, B).
parent(A, B) :- mother(A, B).

grandfather(A, B) :- father(A, X), parent(X, B).
grandmother(A, B) :- mother(A, X), parent(X, B).

grandparent(A, B) :- grandfather(A, B).
grandparent(A, B) :- grandmother(A, B).

greatgrandfather(A, B) :- father(A, X), grandparent(X, B).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lowercase names are symbols, uppercase names are variables.&lt;/p&gt;

&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;father(A, B)&lt;/code&gt; means A is father of B, and is defined by a list of cases&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mother(A, B)&lt;/code&gt; means A is mother of B, also by a list of cases&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;parent(A, B)&lt;/code&gt; is defined with an OR, so it can be true if A is father or mother of B. To do an OR, just list all possibilities.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grandfather(A, B)&lt;/code&gt; is defined with an AND, and also with an internal variable - so A is grandfather of B if A is father of X, and X is parent of B, for some X.&lt;/li&gt;
&lt;li&gt;then &lt;code&gt;grandmother&lt;/code&gt;, &lt;code&gt;grandparent&lt;/code&gt;, and &lt;code&gt;greandgrandfather&lt;/code&gt; are defined similarly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK, let's give it a go in interactive session. It's important to note that logical relations these are not functions, so you can go from either direction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/langs/episode-xx-prolog(:|✔) % gprolog
| ?- [family].
| ?- father(philip4, X).

X = charles2

yes
| ?- father(X, philip4).

X = philip3 ?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Prolog all definitions are treated as complete. So if someone's mother is not on the list, they just don't have a mother, like poor Philip 4.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yes
| ?- mother(X, philip4).

no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also ask for any combination of relations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- grandfather(X, Y), greatgrandfather(X, Y).

X = philip3
Y = charles2 ?

yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prolog naturally supports multiple answers as well. In interactive use if you're happy with the first one, you can just hit Enter, otherwise press &lt;code&gt;;&lt;/code&gt; for next or &lt;code&gt;a&lt;/code&gt; for all:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- father(philip3, X).

X = maria_anna ? ;

X = philip4

yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#expressions"&gt;
  &lt;/a&gt;
  Expressions
&lt;/h3&gt;

&lt;p&gt;Relations can be defined not just on "atoms" (or what other languages would generally call "symbols"), but on any expressions. You can define any kind of expression like &lt;code&gt;a(b, c)&lt;/code&gt;, but we also have a few syntactic sugar, for example, &lt;code&gt;[1, 2, 3]&lt;/code&gt; for a list, or &lt;code&gt;a + b * c&lt;/code&gt; for math expressions and so on, in the end they're just expressions without any special meaning beyond what we give them.&lt;/p&gt;

&lt;p&gt;So let's play with lists and membership and some pattern matching:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;list_member(X, [X|_]).
list_member(X, [_|T]) :- list_member(X, T).

member_twice(X, [X|T]) :- list_member(X, T).
member_twice(X, [_|T]) :- member_twice(X, T).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;[X|T]&lt;/code&gt; means a list with head (first element) X and tail (rest of the list) T&lt;/li&gt;
&lt;li&gt;if we don't care about some part of the expression, we should mark it as &lt;code&gt;_&lt;/code&gt; - we could just put a variable there, but Prolog warns about unused variables as these are often mistakes, similar to many linters for other languages&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;X&lt;/code&gt; is &lt;code&gt;list_member&lt;/code&gt; if it's first element, or if it's &lt;code&gt;list_member&lt;/code&gt; of the rest&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;X&lt;/code&gt; is &lt;code&gt;member_twice&lt;/code&gt; if it's first element and it's &lt;code&gt;list_member&lt;/code&gt; of the rest; or if it's &lt;code&gt;member_twice&lt;/code&gt; of the rest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see it works both ways:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[member].

| ?- list_member(X, [1,2,3]).

X = 1 ? ;

X = 2 ? ;

X = 3 ? ;

no
| ?- list_member(7, [A, B, C]).

A = 7 ? ;

B = 7 ? ;

C = 7 ? ;

no
| ?- member_twice(X, [1, 2, 3, 1, 2]).

X = 1 ? ;

X = 2 ? ;

no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prolog does not remember that it returned a given answer already, so it will keep going. As &lt;code&gt;1&lt;/code&gt; is on the list three times, we get the answer three times:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- list_member(X, [1, 1, 1]).

X = 1 ? ;

X = 1 ? ;

X = 1 ? ;

no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there are infinitely many answers, it will keep going forever until we tell it to stop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- member_twice(7, X).

X = [7,7|_] ? ;

X = [7,_,7|_] ? ;

X = [7,_,_,7|_] ? ;

X = [7,_,_,_,7|_] ? ;

X = [7,_,_,_,_,7|_] ? ;

X = [7,_,_,_,_,_,7|_] ?

yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#prolog-fails"&gt;
  &lt;/a&gt;
  Prolog Fails
&lt;/h3&gt;

&lt;p&gt;OK, that was enough for an introduction, let's get ot Prolog fails.&lt;/p&gt;

&lt;p&gt;For example let's get back to Spanish Habsburg family tree and define what it means to be an &lt;code&gt;ancestor&lt;/code&gt; in two ways:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;father(philip3, maria_anna).
father(philip3, philip4).
father(philip4, charles2).

mother(maria_anna, mariana).
mother(mariana, charles2).

parent(A, B) :- father(A, B).
parent(A, B) :- mother(A, B).

ancestor1(A, B) :- parent(A, B).
ancestor1(A, B) :- parent(A, X), ancestor1(X, B).

ancestor2(A, B) :- parent(A, B).
ancestor2(A, B) :- ancestor2(X, B), parent(A, X).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They're logically totally equivalent &lt;code&gt;A and B&lt;/code&gt; is exactly the same thing as &lt;code&gt;B and A&lt;/code&gt;. So do they work the same?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gprolog
| ?- [family2].
| ?- ancestor1(X, charles2).

X = philip4 ? ;

X = mariana ? ;

X = philip3 ? ;

X = philip3 ? ;

X = maria_anna ? ;

no
| ?- ancestor2(X, charles2).

X = philip4 ? ;

X = mariana ? ;

X = philip3 ? ;

X = maria_anna ? ;

X = philip3 ? ;

Fatal Error: local stack overflow (size: 16384 Kb, reached: 16384 Kb, environment variable used: LOCALSZ)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first definition works just fine. The second crashes with infinite recursion. Even more often you accidentally write something that's pathologically slow.&lt;/p&gt;

&lt;p&gt;With some experience you can learn to avoid and debug such issues of course. I've intentionally chosen a super simple example so you can see why it crashes. In real code, it won't be so easy.&lt;/p&gt;

&lt;p&gt;The point is - at first Prolog pretends it's all about declarative programming and you just define the "what" and let it handle the "how". In reality you need to be constantly thinking about "how" Prolog would execute your code. And if you have to think about the "how", and structure your programs carefully by reordering, cuts, and all other techniques to manage tho "how", you might just as well use a regular programming language.&lt;/p&gt;

&lt;p&gt;It might seem like I'm expecting too much, but with something like Z3, you can really be declarative.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#math"&gt;
  &lt;/a&gt;
  Math
&lt;/h3&gt;

&lt;p&gt;OK, let's do some arithmetic. We can start with the obvious, length of the list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;len(0, []).
len(L, [_|T]) :- len(LT, T), L=1+LT.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Empty list has length of 0, any other list has length of 1 plus length of the rest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- [len].
| ?- len(L, [1,2,3]).

L = 1+(1+(1+0)) ?

yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What just happened? Prolog doesn't do math, it just matches expressions by shape. Prolog has &lt;code&gt;is&lt;/code&gt; operator that does the math, but it's quite limited.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;len(0, []).
len(L, [_|T]) :- len(LT, T), L is 1+LT.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That works a bit better:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- [len2].
| ?- len(X, [1,2,3]).

X = 3 ?

yes
| ?- len(3, X).

X = [_,_,_] ?

yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's define &lt;code&gt;sum&lt;/code&gt; of a list of numbers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sum(0, []).
sum(S, [H|T]) :- sum(ST, T), S is H+ST.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately it works only one way, you can do &lt;code&gt;variable is expression&lt;/code&gt;, but only if every variable on the right side is resolved to a number:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- [sum].
| ?- sum(X, [1,2,3]).

X = 6 ?

yes
| ?- sum(6, [A, B, C]).
uncaught exception: error(instantiation_error,(is)/2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even if the answer is completely unambiguous, it still fails:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- sum(6, [A]).
uncaught exception: error(instantiation_error,(is)/2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#unary-math"&gt;
  &lt;/a&gt;
  Unary Math
&lt;/h3&gt;

&lt;p&gt;Let's avoid &lt;code&gt;is&lt;/code&gt;, and use "unary" mathematics. All numbers will be either &lt;code&gt;z&lt;/code&gt; or &lt;code&gt;s(something)&lt;/code&gt; which means. So &lt;code&gt;z&lt;/code&gt; is 0, &lt;code&gt;s(z)&lt;/code&gt; is 1, &lt;code&gt;s(s(z))&lt;/code&gt; is 2, and so on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add(A, z, A).
add(A, s(B), s(C)) :- add(A, B, C).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is really hard to read, especially for big numbers, but at least it works both directions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- [unary_math].
| ?- add(s(s(z)), s(s(s(z))), N).

N = s(s(s(s(s(z))))) ?

yes
| ?- add(s(s(z)), N, s(s(s(z)))).

N = s(z) ?

yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because it uses pure Prolog only we can now define a list sum that works both ways:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sum(z, []).
sum(S, [H|T]) :- sum(ST, T), add(H, ST, S).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That works forwards and backwards:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- sum(S, [s(z), s(s(z))]).

S = s(s(s(z))) ?

yes
| ?- sum(s(s(s(s(s(s(z)))))), [A, B]).

A = s(s(s(s(s(s(z))))))
B = z ? ;

A = s(s(s(s(s(z)))))
B = s(z) ? ;

A = s(s(s(s(z))))
B = s(s(z)) ? ;

A = s(s(s(z)))
B = s(s(s(z))) ? ;

A = s(s(z))
B = s(s(s(s(z)))) ? ;

A = s(z)
B = s(s(s(s(s(z))))) ? ;

A = z
B = s(s(s(s(s(s(z)))))) ? ;

no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Let's try to ask Prolog if there's any N, such that N+1=N. The answer as you can probably guess should be no.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- add(N, s(z), N).

cannot display cyclic term for N ?

yes
| ?- add(s(z), N, N).

Fatal Error: global stack overflow (size: 32768 Kb, reached: 32765 Kb, environment variable used: GLOBALSZ)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What the hell just happened? One way we asked we got a yes, with infinitely defined &lt;code&gt;N = s(N)&lt;/code&gt;. The other way we got a crash. There are workarounds, but so far every "logic" we tried, no matter how simple, runs into needing workarounds almost immediately. Which is the total opposite of the Z3 experience where you can declare some formulas, and things Just Work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;Let's do a FizzBuzz with fairly conventional programming:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;divisible(N, D) :- 0 is N mod D.
not_divisible(N, D) :- \+ divisible(N, D).

fizzbuzz(N, 'FizzBuzz') :- divisible(N, 15).
fizzbuzz(N, 'Fizz') :- divisible(N, 3), not_divisible(N, 5).
fizzbuzz(N, 'Buzz') :- divisible(N, 5), not_divisible(N, 3).
fizzbuzz(N, N) :- not_divisible(N, 3), not_divisible(N, 5).

num_between(A, A, B) :- A =&amp;lt; B.
num_between(X, A, B) :- A1 is A+1, num_between(X, A1, B).

write_fizzbuzz(X) :- fizzbuzz(X, W), write(W), nl.

fizzbuzzloop :-
  num_between(1, 100, X),
  write_fizzbuzz(X),
  fail.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;divisible&lt;/code&gt; is a predicate that checks if a number is divisible by another&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;not_divisible&lt;/code&gt; uses &lt;code&gt;\+&lt;/code&gt; which means "not provable". &lt;code&gt;\+ divisible(N, D)&lt;/code&gt; checks if &lt;code&gt;divisible(N, D)&lt;/code&gt; is provable. If not, then &lt;code&gt;\+ divisible(N, D)&lt;/code&gt; is provable. This is not quite the same thing as negation, but in many context it's close enough.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fizzbuzz(N, W)&lt;/code&gt; is a relationship saying that for number &lt;code&gt;N&lt;/code&gt; FizzBuzz output value should be &lt;code&gt;W&lt;/code&gt;. We need to add all the &lt;code&gt;not&lt;/code&gt; clauses, as Prolog is totally fine with multiple matches. For example if we didn't add not checks, &lt;code&gt;fizzbuzz(15, W)&lt;/code&gt; would match &lt;code&gt;W&lt;/code&gt; being equal to all four possibilities.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;num_between(X, A, B)&lt;/code&gt; is true for every &lt;code&gt;X&lt;/code&gt; between &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; and we can use it as a loop&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;write_fizzbuzz(X)&lt;/code&gt; figures out what's the correct FizzBuzz output for &lt;code&gt;X&lt;/code&gt;, writes that out, and writes newline.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fizzbuzz&lt;/code&gt; loop is where we pretty much exit logic programming. It gets a number between 1 and 100 as X, uses &lt;code&gt;write_fizzbuzz(X)&lt;/code&gt; to write it out, and then fails, causing it to retry with another number. The whole thing technically "fails" but it prints the FizzBuzz output anyway.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- [fizzbuzz].
| ?- fizzbuzzloop.
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
[...]
Buzz
Fizz
97
98
Fizz
Buzz

no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, the I/O code being non-logic is understandable, but we'd like to be able to at least use &lt;code&gt;fizzbuzz(N, W)&lt;/code&gt; logically.&lt;/p&gt;

&lt;p&gt;It works in forward direction just fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- fizzbuzz(14, W).

W = 14

yes
| ?- fizzbuzz(15, W).

W = 'FizzBuzz' ? ;

no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But in backwards direction only for some numbers (the non-Fizz non-Buzz ones):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- fizzbuzz(N, 29).

N = 29

yes
| ?- fizzbuzz(N, 20).

no
| ?- fizzbuzz(N, 'Fizz').
uncaught exception: error(instantiation_error,(is)/2)
| ?- fizzbuzz(N, 'FizzBuzz').
uncaught exception: error(instantiation_error,(is)/2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fizzbuzz-with-unary-math"&gt;
  &lt;/a&gt;
  FizzBuzz with Unary Math
&lt;/h3&gt;

&lt;p&gt;This isn't quite pure Prolog, as I turn unary numbers to regular integers for I/O and readability, but the FizzBuzz core is pure Prolog at least:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;not_zero(s(_)).

% A + B = C
add(A, z, A).
add(A, s(B), s(C)) :- add(A, B, C).

% A - B = C
sub(A, B, C) :- add(C, B, A).

% N divides D if:
% - N is zero
% - N-D divides D
% (there are no negative numbers in our representation, so no infinite loops)
divisible(z, D) :- not_zero(D).
divisible(N, D) :- not_zero(D), sub(N, D, NminusD), divisible(NminusD, D).
not_divisible(N, D) :- \+ divisible(N, D).

% We just use this for I/O and testing
tonum(z, 0).
tonum(s(N), Num) :- tonum(N, Num1), Num is Num1+1.

fromnum(0, z).
fromnum(Num, s(N)) :- Num &amp;gt; 0, Num1 is Num-1, fromnum(Num1, N).

% Just to make fizzbuzz more readable
divisible_by_three(N) :- divisible(N, s(s(s(z)))).
not_divisible_by_three(N) :- \+ divisible_by_three(N).
divisible_by_five(N) :- divisible(N, s(s(s(s(s(z)))))).
not_divisible_by_five(N) :- \+ divisible_by_five(N).

fizzbuzz(N, 'FizzBuzz') :- divisible_by_three(N), divisible_by_five(N).
fizzbuzz(N, 'Fizz') :- divisible_by_three(N), not_divisible_by_five(N).
fizzbuzz(N, 'Buzz') :- divisible_by_five(N), not_divisible_by_three(N).
fizzbuzz(N, W) :- not_divisible_by_three(N), not_divisible_by_five(N), tonum(N, W).

% We could define this without the tonum/fromnum, but it's a bit more readable
num_between(X, A, B) :- A =&amp;lt; B, fromnum(A, X).
num_between(X, A, B) :- A &amp;lt; B, A1 is A+1, num_between(X, A1, B).

write_fizzbuzz(X) :- fizzbuzz(X, W), write(W), nl.

fizzbuzzloop :-
  num_between(X, 1, 100),
  write_fizzbuzz(X),
  fail.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unary numbers are &lt;code&gt;z&lt;/code&gt; for &lt;code&gt;0&lt;/code&gt;, or &lt;code&gt;s(N)&lt;/code&gt; for &lt;code&gt;1+N&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;add&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, and &lt;code&gt;divisible&lt;/code&gt; are defined for unary numbers&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tonum&lt;/code&gt; and &lt;code&gt;fromnum&lt;/code&gt; convert between unary numbers and regular integers. Logically we should have one predicate that can handle both &lt;code&gt;convert(Unary, Num)&lt;/code&gt; depending on which one is variable, but that doesn't work without some serious hacks as &lt;code&gt;is&lt;/code&gt; only allows data to flow one way.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;divisible_by_three&lt;/code&gt; etc. are just trivial convenience predicates&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fizzbuzz&lt;/code&gt; is defined as before, except we use &lt;code&gt;tonum&lt;/code&gt; for printing, as we want &lt;code&gt;fizzbuzz(s(z), 1)&lt;/code&gt; not &lt;code&gt;fizzbuzz(s(z), s(z))&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;I reused &lt;code&gt;num_between&lt;/code&gt; and just added &lt;code&gt;fromnum&lt;/code&gt; so it generates unary numbers - but it still takes integers as arguments, as I really didn't want to express 100 as &lt;code&gt;s(s(s(...)))&lt;/code&gt; 100 times nested&lt;/li&gt;
&lt;li&gt;and the loop itself is the same&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result is of course the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- [fizzbuzz2].
| ?- fizzbuzzloop.
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
...
Buzz
Fizz
97
98
Fizz
Buzz

no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However this time &lt;code&gt;fizzbuzz&lt;/code&gt; predicate works both ways, we can do some proper logic, and ask questions like "which numbers convert to Fizz or Buzz"!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| ?- fizzbuzz(N, 'Fizz').

N = s(s(s(z))) ? ;

N = s(s(s(s(s(s(z)))))) ? ;

N = s(s(s(s(s(s(s(s(s(z))))))))) ? ;

N = s(s(s(s(s(s(s(s(s(s(s(s(z)))))))))))) ?

yes
| ?- fizzbuzz(N, 'Buzz'), tonum(N, W).

N = s(s(s(s(s(z)))))
W = 5 ? ;

N = s(s(s(s(s(s(s(s(s(s(z))))))))))
W = 10 ? ;

N = s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(z))))))))))))))))))))
W = 20 ? ;

N = s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(z)))))))))))))))))))))))))
W = 25 ?

yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oh by the way, if we reversed the definiton of &lt;code&gt;fizzbuzz&lt;/code&gt; and instead declared:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fizzbuzz(N, 'FizzBuzz') :- divisible_by_three(N), divisible_by_five(N).
fizzbuzz(N, 'Fizz') :- not_divisible_by_five(N), divisible_by_three(N).
fizzbuzz(N, 'Buzz') :- not_divisible_by_three(N), divisible_by_five(N).
fizzbuzz(N, W) :- not_divisible_by_three(N), not_divisible_by_five(N), tonum(N, W).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'd have a fail. I'll let you figure out why if you want, but it just adds up to show what a damn minefield Prolog programming is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-prolog"&gt;
  &lt;/a&gt;
  Should you use Prolog?
&lt;/h3&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;Logic programming was tried, hundreds of billions of yen were spent to make it happen between Japanese government and industry, and it was decisively shown to be a miserable failure. There weren't even any real lessons to be learned here, it was a total dead end and utter failure.&lt;/p&gt;

&lt;p&gt;Meanwhile, using general purpose programming language like Ruby or Python with a constraint solver library like Z3 does everything logic programming promised, except it actually works.&lt;/p&gt;

&lt;p&gt;Pretty much the only way to get any value out of Prolog is to use the bundled constraint solver library (different for every Prolog, but usually there is one, as Prolog is barely usable otherwise). But then you don't even need Prolog. Just use Z3.&lt;/p&gt;

&lt;p&gt;Prolog is also fine as an esoteric language. Its computation model is very different from regular programming and also very painful, both great esoteric language features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-42-prolog"&gt;Code for the Prolog episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>prolog</category>
      <category>logic</category>
    </item>
    <item>
      <title>Spring internal micro-service driven communication</title>
      <author>Elattar Saad </author>
      <pubDate>Sat, 01 Jan 2022 20:04:18 +0000</pubDate>
      <link>https://dev.to/xrio/spring-internal-micro-service-driven-communication-5co8</link>
      <guid>https://dev.to/xrio/spring-internal-micro-service-driven-communication-5co8</guid>
      <description>&lt;p&gt;During the solution architecture phase, especially when we're talking micro-services, we need a sort of internal exchange&lt;br&gt;
of data, they're many tools to do so, such as Spring rest template and web client, but I'm using the one I find the simplest of them all:&lt;br&gt;
Yes, &lt;strong&gt;OpenFeign&lt;/strong&gt;!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-openfeign"&gt;
  &lt;/a&gt;
  Installing OpenFeign
&lt;/h2&gt;

&lt;p&gt;First, we add the OpenFeign dependency (inside the pom.xml file), so it will be imported by Maven (our dependency manager).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-openfeign&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependencyManagement&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${spring-cloud.version}&amp;lt;/version&amp;gt;
                &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
                &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
            &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you already noticed, we are using a tool which belongs to the spring cloud project, as result, we need to set the Spring cloud version we're using.&lt;br&gt;
In side the properties tag, we'll add both, java and spring cloud versions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;properties&amp;gt;
    &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
    &amp;lt;spring-cloud.version&amp;gt;2021.0.0&amp;lt;/spring-cloud.version&amp;gt;
&amp;lt;/properties&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Please note that I'm using Spring boot version &lt;code&gt;2.6.1&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Also note that I'll be using the &lt;a href="https://github.com/xrio/spring-boot-movies-api"&gt;movies project&lt;/a&gt; from the previous articles&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After having all the needed dependencies, we still have to declare our app is using OpenFeign in a certain package.&lt;br&gt;
We decorate our main class with the &lt;code&gt;@EnableFeignClients&lt;/code&gt; with the target package which will have the feign clients.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@SpringBootApplication
@EnableFeignClients("io.xrio.movies.controller.client")
public class MoviesApplication {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#openfeign-client-implementation"&gt;
  &lt;/a&gt;
  OpenFeign client implementation
&lt;/h2&gt;

&lt;p&gt;In the  the implementation, I will be sending a simple get request to the jsonplaceholder API (acting as the second micro-service) to get a list of posts using OpenFeign:&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ryot6Xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elattar.me/images/spring/spring-inter-comm-arch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ryot6Xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elattar.me/images/spring/spring-inter-comm-arch.png" width="880" height="250"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;In order to make use the Json/POJO auto-conversion which Spring Boot offers, we'll be using a DTO to manipulate the received/sent data (posts).&lt;br&gt;&lt;br&gt;
Inside the controller &amp;gt; dto package, we create the PostDTO.java file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Data
public class PostDTO {

    private Long id;
    private Long userId;
    private String title;
    private String body;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note that the structure of the DTO is defined by the response of the jsonplaceholder API.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next, we create our post client (feign client), which is going to be like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@FeignClient(name = "jsonplaceholder", url = "https://jsonplaceholder.typicode.com/posts")
public interface PostClient {

    @GetMapping
    List&amp;lt;PostDTO&amp;gt; getPosts();

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;@FeignClient&lt;/code&gt; will declare this interface as a feign client in order to be implemented according to our needs.&lt;br&gt;&lt;br&gt;
The name attribute mainly useless in this case since we're not addressing the api with a name, but using its url instead. The name is used when a naming registry is integrated (a future article is on the way).   &lt;/p&gt;

&lt;p&gt;And just like magic, that's all for our client!&lt;/p&gt;

&lt;p&gt;Now we need to call our client and return the response to our user. We'll create a PostController which does just that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@RestController
@RequestMapping("post")
@AllArgsConstructor
public class PostController {

    final PostClient postClient;

    @GetMapping
    public List&amp;lt;PostDTO&amp;gt; getPosts(){
        return postClient.getPosts();
    }


}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, that's what you will get when invoking this PostController method:&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m7eDtSdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elattar.me/images/spring/spring-inter-comm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m7eDtSdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://elattar.me/images/spring/spring-inter-comm.png" width="880" height="509"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;More articles &lt;a href="https://elattar.me/"&gt;Here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>springcloud</category>
      <category>java</category>
      <category>openfeign</category>
      <category>spring</category>
    </item>
    <item>
      <title>Top 10 Most Useful Python Libraries For Data Scientists</title>
      <author>Ayesha Sahar</author>
      <pubDate>Sat, 01 Jan 2022 19:49:19 +0000</pubDate>
      <link>https://dev.to/iayeshasahar/top-10-most-useful-python-libraries-for-data-scientists-1d3d</link>
      <guid>https://dev.to/iayeshasahar/top-10-most-useful-python-libraries-for-data-scientists-1d3d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Contents&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1"&gt;Pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;NumPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;TensorFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;Scikit-learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;Sci-Py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;Matplotlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;Seaborn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8"&gt;Keras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9"&gt;Scrapy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10"&gt;BeautifulSoup&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As you guys know, Python is a popular language that is assisting developers in creating PC, games, mobile, and other types of applications. This is possible due to its libraries that are almost more than 137,000 in number. Crazy right? Moreover, in this world that revolves around data where buyers demand relevant information while buying, big companies or even small start-ups require "data scientists" to get valuable insights by processing massive data sets.&lt;/p&gt;

&lt;p&gt;The results of such an analysis guide them in critical decision making, business operations, and various other tasks that require valuable information to be completed efficiently. Now you might be thinking, how do data scientists accomplish all this? The answer is simple, as mentioned above, they use various libraries to perform these tasks. &lt;/p&gt;

&lt;p&gt;So, here is a list of the top 10 most useful Python libraries for data scientists;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-pandas"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Pandas&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It was basically created as a community library project and released around 2008. It provides various high-performance, easy-to-use data structures and operations for manipulating data in the form of numerical tables and time series. Pandas also has multiple tools for reading and writing data between in-memory data structures and different file formats. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• Good syntax with various functionalities that gives you the freedom to even deal with some missing data.&lt;/p&gt;

&lt;p&gt;• It helps you make your own function and then run it across a series of data.&lt;/p&gt;

&lt;p&gt;• It has high-level abstraction.&lt;/p&gt;

&lt;p&gt;• It contains high-level data structures &amp;amp; manipulation tools.&lt;/p&gt;

&lt;p&gt;• It helps to perform data wrangling and data cleaning.&lt;/p&gt;

&lt;p&gt;• It is used in a variety of academic areas, commercial areas, statistics, finance and even neuroscience.&lt;/p&gt;

&lt;p&gt;• It has time-series-specific functionality like date range generation, date shifting, linear regression, and moving window.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://pandas.pydata.org/docs/"&gt;https://pandas.pydata.org/docs/&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#2-numpy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. NumPy&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;NumPy is actually the fundamental package for scientific numerical computation in Python as it contains a powerful N-dimensional array object. It is quite popular among developers and data scientists who are aware of the technologies which are dealing with data-oriented stuff. It is a general-purpose array-processing package that provides high-performance multidimensional objects called arrays and also provides tools for working with them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It provides fast and precompiled functions for numerical calculations.&lt;/p&gt;

&lt;p&gt;• It is used in data analysis.&lt;/p&gt;

&lt;p&gt;• The Array-oriented computing increases its efficiency.&lt;/p&gt;

&lt;p&gt;• It also forms the base of other libraries like SciPy and scikit-learn.&lt;/p&gt;

&lt;p&gt;• It supports the concepts of Object-Oriented Programming (OOP).&lt;/p&gt;

&lt;p&gt;• It performs compact computations with vectorization.&lt;/p&gt;

&lt;p&gt;• It can create a powerful N-dimensional array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://numpy.org/doc/"&gt;https://numpy.org/doc/&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#3-tensorflow"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. TensorFlow&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It was designed by Google to compute data low graphs with the empowered machine learning algorithms and to fulfill the high demand for the training neural networks work. It is an open-source library. Its performance is quite high and it has a flexible architecture.  It also allows you to deploy Machine Learning models in places like the cloud, your browser, or even your own device. TensorFlow is available for Python, C APIs, C++, Java, JavaScript, Go, Swift, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It is optimized for speed and makes use of techniques such as XLA to perform quick linear algebra operations.&lt;/p&gt;

&lt;p&gt;• It is easily trainable on both CPU and GPU.&lt;/p&gt;

&lt;p&gt;• It can visualize each and every single part of the graph with ease.&lt;/p&gt;

&lt;p&gt;• It can perform speech and image recognition.&lt;/p&gt;

&lt;p&gt;• In neural machine learning, it reduces error by 50 to 60%.&lt;/p&gt;

&lt;p&gt;• It can also perform video detection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.tensorflow.org/guide"&gt;https://www.tensorflow.org/guide&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#4-scikitlearn"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Scikit-learn&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Scikit-Learn is used for performing data analysis and mining-related tasks. It is also open-source like TensorFlow and licensed under the BSD. Anyone can access it. It is developed mainly over the Numpy, Scipy, and Matplotlib. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It works well with complex data.&lt;/p&gt;

&lt;p&gt;• It is quite useful for extracting features from images and text.&lt;/p&gt;

&lt;p&gt;• It has a lot of algorithms for the purpose of implementing standard machine learning and even data mining tasks.&lt;/p&gt;

&lt;p&gt;• It allows dimensionality reduction, model selection, and pre-processing.&lt;/p&gt;

&lt;p&gt;• It can also perform clustering, classification, and regression.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://scikit-learn.org/stable/"&gt;https://scikit-learn.org/stable/&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#5-scipy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Sci-Py&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;SciPy (Scientific Python) is another free and open-source Python library for data science and is mainly used for high-level computations. It has around 19,000 comments on GitHub with about 600 contributors. It is widely used for scientific and technical computations because it extends NumPy while providing many user-friendly routines for scientific calculations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It is used for multi-dimensional image processing&lt;/p&gt;

&lt;p&gt;• It has can solve Fourier transforms, and differential equations.&lt;/p&gt;

&lt;p&gt;• Due to its optimized algorithms, it can do linear algebra computations quite efficiently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://scipy.org"&gt;https://scipy.org&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#6-matplotlib"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. Matplotlib&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Matplotlib has various powerful but beautiful visualizations. It is a Python library used for plotting. It has around 26,000 comments on GitHub with about 700 contributors. It is extensively used for data visualization due to the graphs and plots that it creates. It also provides an object-oriented API. This API can be used to embed the created plots into applications. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It offers many charts and customizations from histograms to even scatterplots.&lt;/p&gt;

&lt;p&gt;• It is useful while performing data exploration for a machine learning project.&lt;/p&gt;

&lt;p&gt;• You can use it regardless of which operating system you’re using or which output format you wish to use as it supports various backends and output types.&lt;/p&gt;

&lt;p&gt;• It can perform correlation analysis of variables.&lt;/p&gt;

&lt;p&gt;• It has low memory consumption and good runtime behavior.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://matplotlib.org/stable/contents.html"&gt;https://matplotlib.org/stable/contents.html&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#7-seaborn"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Seaborn&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It is a Python data visualization library. Seaborn is based on Matplotlib and is integrated with the NumPy and pandas data structures. It provides various dataset-oriented plotting functions that operate on data frames and arrays that have whole datasets within them.  The Seaborn data graphics it can create include bar charts, pie charts, histograms, scatterplots, error charts, etc. It also has many tools for choosing color palettes that are used to reveal patterns in the data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It has a high-level interface.&lt;/p&gt;

&lt;p&gt;• It can draw attractive yet informative statistical graphics.&lt;/p&gt;

&lt;p&gt;• It performs the necessary statistical aggregation and mapping functions that allows users to create the plots that they want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://seaborn.pydata.org/tutorial.html"&gt;https://seaborn.pydata.org/tutorial.html&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#8-keras"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Keras&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It is one of the most powerful Python libraries. It allows high-level neural network APIs for integration that execute over the top of TensorFlow, Theano, and CNTK. It was created mainly for reducing challenges faced in complex researches allowing users to compute faster.  It is also open-source. It provides a user-friendly environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It allows fast prototyping. &lt;/p&gt;

&lt;p&gt;• It supports the recurrent and convolution networks individually.&lt;/p&gt;

&lt;p&gt;• It is a high-level neural network library&lt;/p&gt;

&lt;p&gt;• It is simple to use but is also powerful.&lt;/p&gt;

&lt;p&gt;• By using Keras, users can simply add new modules as a class or even as a function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://keras.io/guides/"&gt;https://keras.io/guides/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-scrapy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. Scrapy&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It is one of the most popular and fast web crawling frameworks written in Python. It is also open-source. Scrapy is mainly used to extract the data from the web page with the help of selectors. These selectors are based on the XPath.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It can perform large-scale web-scraping.&lt;/p&gt;

&lt;p&gt;• After extracting and processing the data from websites, users can store it in their preferred format.&lt;/p&gt;

&lt;p&gt;• It can also be used to gather data from APIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.scrapy.org/en/latest/"&gt;https://docs.scrapy.org/en/latest/&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#10-beautifulsoup"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. BeautifulSoup&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;BeautifulSoup is also a popular choice for data scientists.  It is commonly known for web crawling and data scraping. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features and Applications:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;• It performs web scraping from HTML and XML documents.&lt;/p&gt;

&lt;p&gt;• It can automatically detect encodings.&lt;/p&gt;

&lt;p&gt;• Users can navigate a parsed document and extract the data from various web pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Documentation:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://crummy.com/software/BeautifulSoup/bs4/doc/"&gt;https://crummy.com/software/BeautifulSoup/bs4/doc/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Let's connect!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;a href="https://twitter.com/IAyeshaSahar"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;✨ &lt;a href="https://github.com/AyeshaSahar"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>🤪 How should I build a duplicate detection system?</title>
      <author>William McGonagle</author>
      <pubDate>Sat, 01 Jan 2022 19:47:08 +0000</pubDate>
      <link>https://dev.to/williammcgonagle/how-should-i-build-a-duplicate-detection-system-22le</link>
      <guid>https://dev.to/williammcgonagle/how-should-i-build-a-duplicate-detection-system-22le</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/fairfield-programming/eaf-linter"&gt;I'm working on a linter right now&lt;/a&gt;, and one of the requested features for it was code duplication detection. I made an &lt;a href="https://github.com/fairfield-programming/eaf-linter/issues/6"&gt;issue for it already&lt;/a&gt;, but I need to start working on it. And, that's where my question lies. &lt;/p&gt;

&lt;p&gt;I can either build the system to detect the duplications based on plain text. This is how most systems work because it is the simpler of the two options. But, it is also the most failure prone. For instance, this system would fail if there was the same exact code in two places, but there was a comment in the middle of one of them- it would not register as a duplicate.  &lt;/p&gt;

&lt;p&gt;Alternatively, I can use an abstract syntax tree to detect the duplications. But, theres another problem there- what is the most-lightweight and all-around-best javascript parser out there? I'm planning on using the babel parser but I'm already running into a problem because it doesn't parse the comments in a way I would like. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, if you have an opinion on what I should do, please leave a comment below. Also, please star &lt;a href="https://github.com/fairfield-programming/eaf-linter"&gt;the project&lt;/a&gt; and contribute if you have time. If you can, that would be amazing, and I thank you so much!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>discuss</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>The Object Orientation Pillars</title>
      <author>jptkao</author>
      <pubDate>Sat, 01 Jan 2022 19:34:17 +0000</pubDate>
      <link>https://dev.to/jptkao/object-orientation-pillars-22c7</link>
      <guid>https://dev.to/jptkao/object-orientation-pillars-22c7</guid>
      <description>&lt;p&gt;In every lecture or tutorial about we come across these keywords: Object, Class, Abstraction, Encapsulation, Inheritance, Polymorphism. This is the universe of the OO Programmer… Or is it ?&lt;/p&gt;

&lt;p&gt;What is OO and why we use ?&lt;/p&gt;

&lt;p&gt;Lets begin with the “Pillars”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#encapsulation"&gt;
  &lt;/a&gt;
  Encapsulation
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Bundling data with the functionality that operate on that data, or the restricting of direct access to some components.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Did we had encapsulation before the OO Languages ? Yes, in C we had perfect encapsulation. The header file contained the signatures of functions and data structures, on the other hand the a .c file would implement them.&lt;/p&gt;

&lt;p&gt;The users of our functions and data structures would include  the header file never knowing anything about our implementation. Code exemple:&lt;/p&gt;

&lt;p&gt;login.h&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;request_access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SecureKey&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;login.c&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;request_access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SecureKey&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;access_data_base_with_priveleges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;access_data_base&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Object orientation weakened encapsulation. For exemple, C++ put all the variables in the header file, compromising its visibility. To control the access we had to introduce keywords: private, public, protected; so the compiler could tell what can be touched.&lt;br&gt;
I want to exemplify with code this mechanism in a future post.&lt;/p&gt;

&lt;p&gt;Encapsulation is present for sure but it's not the most attractive aspect of OO.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The mechanism of making new functionality and data structures from existing ones.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There was inheritance in C, although not very convenient.&lt;br&gt;
A more detailed discussion is need here. I won't risk mentioning pointers and structs just yet and scare people. For now I say: "OO gave us slightly better inheritance".&lt;/p&gt;

&lt;p&gt;We're going to prove it in future posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#polymorphism"&gt;
  &lt;/a&gt;
  Polymorphism
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;With a same signature for a mechanism it's possible to implement it in different forms.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In C, it's possible to do Polymorphism, it involves function signatures, pointers to functions and a table to store those pointers. In C++ this is how Virtual Tables are implemented, further discussion of this subject in another post.&lt;/p&gt;

&lt;p&gt;OO Languages don't need pointer to functions because they have polymorphism. The C strategy was too dangerous, error prone.&lt;/p&gt;

&lt;p&gt;C++ gave developers easy, cheap and safe polymorphism. And is Polymorphism the key of OO Programming.&lt;/p&gt;

&lt;p&gt;We just saw the three famous concepts about OO we mentioned in the previous post. As we can see in our tree below it's almost time for the SOLID Principles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kBMIgT8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l0wz01pipcr5l181yfx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kBMIgT8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l0wz01pipcr5l181yfx.png" alt="Image description" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-oo-programming-is-all-about"&gt;
  &lt;/a&gt;
  What OO Programming is all about
&lt;/h2&gt;

&lt;p&gt;Let's think about a program, one bigger than Hello world!, it begins with a main file which call high level modules, those high level models call middle level modules and so forth util we reach the low level modules. It makes perfect sense, we begin our apps with general ideias in mind and the details come later.&lt;/p&gt;

&lt;p&gt;High level calling lower levels is natural, but High Level Policy depending on Low Level Detail is problematic for software design. Imagine every time you change a little detail you have to recopile all your system: low level, mids and mids and middle levels then high level modules. Recompiling alone is enough of a problem imagine bugs on low level affecting your business rules in the most unexpected ways.&lt;/p&gt;

&lt;p&gt;The Polymorphism is the main tool in OOP to solve this puzzle.&lt;br&gt;
Our problem is in the red lines of the figure below(note that undesirable SCD can happen anywhere). We have to be careful with the Source Code Dependency[SCD] on low level detail, it can make the design Rigid, Fragile, Immobile and more - Design Smells can gives us more exemples on what can go bad.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2U90XhjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ieae6vcwgq7gkcgzyfh5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2U90XhjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ieae6vcwgq7gkcgzyfh5.png" alt="Dependency Structure" width="880" height="392"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Polymorphism provided us with absolute control of the dependency structure. So it's now possible to carefully choose what dependencies should be inverted to avoid the decay of software design.&lt;/p&gt;

&lt;p&gt;The true power of OOP is now unveiled. Next we need to talk about the &lt;a href=""&gt;Dependency Inversion Principle&lt;/a&gt;, it's tightly coupled with this post's ideas.&lt;/p&gt;

&lt;p&gt;This post on &lt;a href="https://github.com/jptkao/Blog_posts/blob/main/Software_Design/OO/OO_Pillars.md"&gt;repo&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>oop</category>
      <category>programming</category>
    </item>
    <item>
      <title>Thirteen Incredible GitHub Repositories To Leverage Your Blockchain Learning</title>
      <author>Oliver Jumpertz</author>
      <pubDate>Sat, 01 Jan 2022 18:44:16 +0000</pubDate>
      <link>https://dev.to/oliverjumpertz/thirteen-incredible-github-repositories-to-leverage-your-blockchain-learning-113p</link>
      <guid>https://dev.to/oliverjumpertz/thirteen-incredible-github-repositories-to-leverage-your-blockchain-learning-113p</guid>
      <description>&lt;p&gt;The internet is a beautiful place of knowledge. You can find educational material nearly everywhere, and GitHub is no different. This article focuses on showcasing thirteen incredible GitHub repositories to you, all packed and filled with learning resources and opportunities to make you better at blockchain development. From Bitcoin to Ethereum, from Python to JavaScript or Solidity, there's something in here for everyone.&lt;/p&gt;

&lt;p&gt;(This article is based on a &lt;a href="https://twitter.com/oliverjumpertz/status/1476187542248730627?s=20"&gt;thread I released on Twitter&lt;/a&gt;.)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-awesome-blockchain-resources"&gt;
  &lt;/a&gt;
  1. Awesome Blockchain Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDxbSjAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807291079/7_X-adzC8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDxbSjAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807291079/7_X-adzC8.png" alt="Awesome Blockchain Resources" width="880" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yjjnls/awesome-blockchain"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository contains an awesomely curated list of resources related to blockchain. It contains tutorials, guides, articles, papers, and books. Many of your questions are already answered here.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-awesome-blockchain-collection"&gt;
  &lt;/a&gt;
  2. Awesome Blockchain Collection
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s7Ww1S98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807219808/vdUIY0zIr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s7Ww1S98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807219808/vdUIY0zIr.png" alt="Awesome Blockchain Collection" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/openblockchains/awesome-blockchains"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository contains a tremendous amount of learning resources. They range from tutorials covering the implementation of your very own blockchain to articles and books. There is something in for everyone.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-awesome-blockchain-curated"&gt;
  &lt;/a&gt;
  3. Awesome Blockchain Curated
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---JmQ9Dvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807123728/G-sb_wc-O.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---JmQ9Dvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807123728/G-sb_wc-O.png" alt="Awesome Blockchain Curated" width="880" height="610"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/imbaniac/awesome-blockchain"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository does not contain the classical learning materials as many of the other repositories listed here. Instead, it has many real-life examples of applications working on the blockchain, for you to analyze and get an idea about. Sometimes, the best way to learn something is to see how others do it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-blockchain-learning-path"&gt;
  &lt;/a&gt;
  4. Blockchain Learning Path
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_lX6y7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807505568/4N6YbGLKV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_lX6y7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807505568/4N6YbGLKV.png" alt="Blockchain Learning Path" width="880" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/protofire/blockchain-learning-path"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This learning path covers everything, from theory to practice. It guides you from the basics to the advanced concepts and is a great path to follow if you want to cover Bitcoin and Ethereum.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-learn-blockchain-in-2-months"&gt;
  &lt;/a&gt;
  5. Learn Blockchain In 2 Months
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MbyecozC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807618518/p-kvj4JJL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbyecozC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807618518/p-kvj4JJL.png" alt="Learn Blockchain In 2 Months" width="880" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/llSourcell/Learn_Blockchain_in_2_months"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learning blockchain in 2 months is a challenging task, but not impossible. This repository does not seem like much, but it covers all the resources you need to complete that task in chronological order. Follow this path, and you will be pretty up-to-date after only two months.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-ultimate-solidity-blockchain-and-smart-contract-beginner-to-expert-full-course-python-edition"&gt;
  &lt;/a&gt;
  6. Ultimate Solidity, Blockchain, and Smart Contract - Beginner to Expert Full Course | Python Edition
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8u80uDMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807832838/kL1H9Tmi_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8u80uDMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640807832838/kL1H9Tmi_.png" alt="Ultimate Solidity, Blockchain, and Smart Contract - Beginner to Expert Full Course | Python Edition" width="880" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/smartcontractkit/full-blockchain-solidity-course-py"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The repository to the great freeCodeCamp YouTube course on blockchain with Python. If you don't know that course yet, it covers over 16 hours of in-depth knowledge and everything you need to use Python for smart contract development. It contains a lot of code that helps you to understand what's going on for sure.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-a-simple-blockchain-implementation-in-python"&gt;
  &lt;/a&gt;
  7. A simple blockchain implementation in Python
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QdHNfTT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808016806/YRWG-AKwk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QdHNfTT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808016806/YRWG-AKwk.png" alt="A simple blockchain implementation in Python" width="880" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/dvf/blockchain"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn to build a blockchain in Python by analyzing this implementation. It is the accompanying repository to another book that contains all explanations you need to understand the whole code. This repository is especially interesting because it shows you that even Python, a language not usually used for blockchain clients, is still a very good choice and gets the job done.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-learn-bitcoin-from-the-command-line"&gt;
  &lt;/a&gt;
  8. Learn Bitcoin From The Command Line
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82YDlMSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808356407/7nMTCIdIl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82YDlMSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808356407/7nMTCIdIl.png" alt="Bildschirmfoto 2021-12-29 um 21.05.50.png" width="880" height="610"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/BlockchainCommons/Learning-Bitcoin-from-the-Command-Line"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A complete guide to interacting with Bitcoin and learning more about it through its CLI. This one is not directly tied to implementing logic, learning about cryptographic primitives, or peer 2 peer networking. Instead, it focuses on you learning to interact with Bitcoin through its CLI client. Using the major blockchain out there also helps you to understand blockchains themselves.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-learn-how-to-build-a-blockchain-with-go"&gt;
  &lt;/a&gt;
  9. Learn How To Build A Blockchain With Go
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dn0E4DwT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808686041/-ZAtK95_F.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dn0E4DwT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808686041/-ZAtK95_F.png" alt="Learn How To Build A Blockchain With Go" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nosequeldeebee/blockchain-tutorial"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you ever dreamed of implementing your own blockchain in one of the most popular programming languages for blockchain development out there, this repository might be exactly what you look for. Go is the language most Ethereum clients and nodes and many other blockchains are implemented in. Why not use it to implement your very own?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-the-bitcoin-book"&gt;
  &lt;/a&gt;
  10. The Bitcoin Book
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b5o5wGKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808836530/uAgABY9Ww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b5o5wGKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640808836530/uAgABY9Ww.png" alt="The Bitcoin Book" width="880" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bitcoinbook/bitcoinbook"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bitcoin is still &lt;strong&gt;the&lt;/strong&gt; blockchain. It might not be a smart blockchain like Ethereum or Solana, but it definitely is the father of many modern implementations. It is always worth it to learn about Bitcoin, especially as Layer-2 solutions begin to emerge and add capabilities to Bitcoin itself.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#11-the-defi-developer-roadmap"&gt;
  &lt;/a&gt;
  11. The DeFi Developer Roadmap
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPsautyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640810286881/KywKnIsMt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPsautyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640810286881/KywKnIsMt.png" alt="The DeFi Developer Roadmap" width="880" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/OffcierCia/DeFi-Developer-Road-Map"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DeFi (decentralized finance) was one of the first, and still is one of the most important applications of blockchains. This curated Ethereum developer handbook contains everything you need to become a DeFi developer on Ethereum, sidechains like Polygon, and derived chains like the Binance Smart Chain.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#12-build-your-own-x"&gt;
  &lt;/a&gt;
  12. Build Your Own X
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eG0v16fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640810463726/34xevE9V6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eG0v16fF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640810463726/34xevE9V6.png" alt="Build Your Own X" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x#build-your-own-blockchain--cryptocurrency"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A general-purpose repository containing curated resources for multiple purposes, including Blockchain/Crypto. You get material for JavaScript, Python, Go, and some more languages. All learning materials are of high quality and good to follow.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#13-build-a-blockchain-with-javascript"&gt;
  &lt;/a&gt;
  13. Build A Blockchain With JavaScript
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJJbxu92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640810647406/3dSdrFL2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJJbxu92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640810647406/3dSdrFL2a.png" alt="Build A Blockchain With JavaScript" width="880" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nambrot/blockchain-in-js"&gt;Visit the repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript is a great language, and although it is not one of the major languages used to implement blockchains, it still can. This repository shows you how you can implement one for yourself and even comes with a UI that helps you to explore what happens under the hood better.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#before-you-leave"&gt;
  &lt;/a&gt;
  Before You Leave
&lt;/h2&gt;

&lt;p&gt;Do you like content like this? Why don't you follow me on social media for a daily dose of education?&lt;/p&gt;

&lt;p&gt;Join me on &lt;a href="https://www.instagram.com/oliverjumpertz"&gt;Instagram&lt;/a&gt; and get a daily dose of educational content right in your feed, soon also including short educational videos.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>web3</category>
    </item>
    <item>
      <title>How it works: Oauth 2.0</title>
      <author>Arun Mathew Kurian</author>
      <pubDate>Sat, 01 Jan 2022 18:28:59 +0000</pubDate>
      <link>https://dev.to/amkurian/how-it-works-oauth-20-1la</link>
      <guid>https://dev.to/amkurian/how-it-works-oauth-20-1la</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Oauth 2.0 which stands for 'Open authorization' is an authorization framework that enables an application to obtain limited access to your account on another https service. This is done by delegating the authorization to the application that hosts the user data from the third-party app.&lt;/p&gt;

&lt;p&gt;It's basically like giving an app a key that gives them specific permission to access data and perform actions on behalf of a user in another app. This allows the user to provide restricted access to user's account in another service to the client app without providing a username or password. The user can revoke the permission whenever they want.&lt;/p&gt;

&lt;p&gt;The steps to grant permission are often referred to as authorization or delegated authorization.&lt;/p&gt;

&lt;p&gt;Let's look at an example.&lt;/p&gt;

&lt;p&gt;The client app is an app that sends greeting emails on user's behalf. This app requires permission to send emails and access contacts from the user's behalf and they support Oauth 2.0 authorization for the email provider (like Gmail or Outlook) the user uses.&lt;br&gt;
When the email provider is selected user is redirected to the email service. The email provider checks if the user is logged in. If not the user will be prompted to log in.&lt;/p&gt;

&lt;p&gt;After login, the user will be shown a screen with permission that will be provided to the client app. This can be accepted or rejected by the user. Once the user grants the permission, they will be redirected to the original app. Now the app can access the user's contact and send emails on their behalf.&lt;/p&gt;

&lt;p&gt;This flow is known as authorization code flow. None of this may sound new to the reader as we have seen this flow in our daily internet life frequently.&lt;/p&gt;

&lt;p&gt;Let's look into Oauth 2.0's working in detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terminology"&gt;
  &lt;/a&gt;
  Terminology
&lt;/h2&gt;

&lt;p&gt;First, let's look at the various terminologies present in Oauth 2.0 flow&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Resource Owner *&lt;/em&gt;- The user who is providing the access to some portion of their account data to the client app&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt; - Application that needs the data or permissions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authorization Server&lt;/strong&gt; - This is the server that knows the resource owner. The user will interact with the authorization server when an application is requesting access to their account. The authorization server will prompt the users to grant permission to the client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resource Server&lt;/strong&gt; - The API/server that contains the user's data that is being accessed by the client app. The resource server must be able to accept and validate access tokens and grant access if the user has allowed it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redirect URI&lt;/strong&gt; - The URI to which the authorization server will redirect the resource owner back after granting permission. This also known as callback URI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Response Type&lt;/strong&gt; - This is the type of response the client expects. It informs the authorization Server of the desired authorization processing flow. The common response type is 'code'.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scope&lt;/strong&gt; - These are the granular permissions that the client app needs. An application can request one or more scopes. The value of scopes is not standardized and is dependent on the service's internal architecture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consent&lt;/strong&gt; - The authorization server takes the scope client has requested and verifies it with the resource owner whether or not they want to give permission. A consent form will be prompted to the user regarding the scopes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client Id&lt;/strong&gt; - This is the value that is used to uniquely identify a client app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client Secret&lt;/strong&gt; - The client secret is essentially the client application's own password to the authorization server. This is a secret only known to the application and authorization server&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authorization Code&lt;/strong&gt; - This code is a short-lived value that the authorization server sends back to the client. The client will send the authorization code back to the authorization server along with the client secret in exchange for an access token.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access Token&lt;/strong&gt; - This is the key the client app use to make API request on behalf of the user. This allows the application to access specific parts of a user's data. OAuth 2.0 doesn't define a specific format for Access Tokens. The JSON Web Token (JWT) format is often used for Access Tokens. For security reasons, the Access Tokens may have expiration dates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authorization-code-flow-under-the-hood"&gt;
  &lt;/a&gt;
  Authorization Code Flow: Under the hood
&lt;/h2&gt;

&lt;p&gt;Now that the terminologies of Oauth 2.0 are clear let's look at the authorization code flow in detail&lt;/p&gt;

&lt;p&gt;Before the users come into the picture, the client app will communicate with the authorization server and will establish a working relationship. The authorization server will generate a client id and client secret (sometimes known as app id or app secret), which can be used in future communications.&lt;/p&gt;

&lt;p&gt;When the user interacts with the client app and selects service, they will be redirected to the authorization server with a request containing client id, redirect URI, response type and the scopes required.&lt;/p&gt;

&lt;p&gt;The authorization server will verify the user and the request. It will prompt the user to log in if the user is not logged in. The scopes requested by the client app will be presented to the user on the consent screen. This will allow the user to grant or deny permissions.&lt;/p&gt;

&lt;p&gt;Once the user grants permission to the authorization server, the user will be redirected to redirect URI along with a temporary Authorization code.&lt;/p&gt;

&lt;p&gt;The client will then contact the authorization server directly with client id, client secret, and Authorization code. The authorization server will respond with an Access token. This Access token can be used by the client in future interactions for accessing data and performing operations on behalf of user in the resource server.&lt;/p&gt;

&lt;p&gt;In this article, we have briefly looked into some concepts related to Oauth 2.0 and its workflow.&lt;/p&gt;

&lt;p&gt;I hope this article was helpful.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>authorization</category>
      <category>oauth2</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Hello Git: A Beginner's Tutorial on Git and GitLab</title>
      <author>Edwin Torres</author>
      <pubDate>Sat, 01 Jan 2022 18:28:06 +0000</pubDate>
      <link>https://dev.to/realedwintorres/hello-git-a-beginners-tutorial-on-git-and-gitlab-k7i</link>
      <guid>https://dev.to/realedwintorres/hello-git-a-beginners-tutorial-on-git-and-gitlab-k7i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This tutorial is for beginners who are new to  &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;  and  &lt;a href="https://gitlab.com/"&gt;GitLab&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Git&lt;/em&gt; is a  "&lt;a href="https://git-scm.com/"&gt;free and open source distributed version control system&lt;/a&gt;  designed to handle everything from small to very large projects with speed and efficiency." Use Git locally on your computer to manage software versions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GitLab&lt;/em&gt; is a  &lt;a href="https://about.gitlab.com/what-is-gitlab/"&gt;DevOps platform&lt;/a&gt;. It can host your local Git repos for remote collaboration, and a whole lot more. Some other Git servers are &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;  and  &lt;a href="https://bitbucket.org/product"&gt;Bitbucket&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#register-with-gitlab-and-create-a-repo"&gt;
  &lt;/a&gt;
  Register with GitLab and Create a Repo
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Register for a GitLab account &lt;a href="https://gitlab.com/users/sign_up"&gt;here&lt;/a&gt; or on your private GitLab server.&lt;/li&gt;
&lt;li&gt;From a web browser, log into your GitLab account.&lt;/li&gt;
&lt;li&gt;Create a new repo:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Create a new project:  &lt;a href="https://gitlab.com/projects/new"&gt;https://gitlab.com/projects/new&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Create blank project&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Project name: &lt;strong&gt;hello-world&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Click the &lt;em&gt;Create project&lt;/em&gt; button.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Your remote GitLab repo is created.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#install-git-locally"&gt;
  &lt;/a&gt;
  Install Git Locally
&lt;/h2&gt;

&lt;p&gt;Make sure that you have Git locally on your computer.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check if you already have Git. From your local computer, open a macOS Terminal or Git Bash terminal and enter: &lt;code&gt;git --version&lt;/code&gt;. If you have Git, then continue to &lt;a href="#establish-ssh-access"&gt;Establish SSH Access&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Install Git:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Windows&lt;/em&gt;: &lt;a href="https://git-scm.com/download/win"&gt;https://git-scm.com/download/win&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;macOS&lt;/em&gt;: From the Terminal app, enter &lt;code&gt;git --version&lt;/code&gt; and follow instructions to install &lt;em&gt;Xcode Command Line Tools&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the remainder of this tutorial, "terminal" refers to either the &lt;em&gt;macOS Terminal&lt;/em&gt; app or &lt;em&gt;Windows Git Bash&lt;/em&gt; terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#establish-ssh-access"&gt;
  &lt;/a&gt;
  Establish SSH Access
&lt;/h2&gt;

&lt;p&gt;To access your remote GitLab repos from your local computer, you must first establish SSH access. This requires uploading your public SSH key from your computer to GitLab.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check if you already have an SSH key:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;From the &lt;em&gt;macOS&lt;/em&gt; terminal, enter: &lt;code&gt;cat ~/.ssh/id_rsa.pub | pbcopy&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;From the &lt;em&gt;Windows Git Bash&lt;/em&gt; terminal, enter: &lt;code&gt;cat ~/.ssh/id_rsa.pub | clip&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If the command succeeds, then your public SSH key is in the clipboard. Otherwise go to the next step.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Create your SSH key:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this step will create/overwrite these files in your home directory:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/.ssh/id_rsa
~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the terminal, enter the following commands, replacing &lt;code&gt;YOUREMAIL@MAIL.COM&lt;/code&gt; with your email address:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;  &lt;span class="c"&gt;# work from your home directory&lt;/span&gt;
ssh-keygen &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; rsa &lt;span class="nt"&gt;-b&lt;/span&gt; 4096 &lt;span class="nt"&gt;-C&lt;/span&gt; &lt;span class="s2"&gt;"YOUREMAIL@MAIL.COM"&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Press the &lt;code&gt;Enter&lt;/code&gt; key to accept all defaults. Do not specify a password, unless you want to enter a password each time you interact with the remote Git server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go back to &lt;em&gt;Step 1&lt;/em&gt; above to copy your public SSH key to the clipboard.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Add your SSH key to your GitLab account:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;From a web browser, log into your GitLab account.&lt;/li&gt;
&lt;li&gt;Go to SSH Keys: &lt;a href="https://gitlab.com/-/profile/keys"&gt;https://gitlab.com/-/profile/keys&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Key&lt;/em&gt; textbox, paste your public SSH key from the clipboard.&lt;/li&gt;
&lt;li&gt;Click the &lt;em&gt;Add key&lt;/em&gt; button.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;You know have SSH access from your local computer to your remote GitLab account.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#use-git-locally-and-gitlab-remotely"&gt;
  &lt;/a&gt;
  Use Git Locally and GitLab Remotely
&lt;/h2&gt;

&lt;p&gt;Now try to use Git locally and interact with your remote repos in GitLab.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From a web browser, log into your GitLab account.&lt;/li&gt;
&lt;li&gt;Go to your &lt;strong&gt;hello-world&lt;/strong&gt; repo, click the &lt;em&gt;Clone&lt;/em&gt; button, and copy the &lt;em&gt;Clone with SSH&lt;/em&gt; link to the clipboard.&lt;/li&gt;
&lt;li&gt;From your local computer, open a terminal and go (&lt;code&gt;cd&lt;/code&gt;) to a directory to work from.&lt;/li&gt;
&lt;li&gt;Enter the following command to &lt;em&gt;clone&lt;/em&gt; your GitLab repo locally on your computer. Paste the SSH link at the end. For example, if your GitLab username is &lt;code&gt;JohnSmith&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  git clone git@gitlab.com:JohnSmith/hello-world.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;There is now a &lt;code&gt;hello-world&lt;/code&gt; folder locally on your computer. From the terminal, go into the folder: &lt;code&gt;cd hello-world&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;git status&lt;/code&gt; to see the current state of the repo. There are no changes.&lt;/li&gt;
&lt;li&gt;Create a few local files:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"red blue green"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; colors.txt
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"apple cherry watermelon"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; fruits.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Enter &lt;code&gt;git status&lt;/code&gt; to see the current state of the repo. Now there are local changes.&lt;/li&gt;
&lt;li&gt;Add the changes to the Git staging area:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  git add colors.txt fruits.txt  &lt;span class="c"&gt;# or simply: git add .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Commit the changes to the local repo:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"my first Git commit"&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now the two new files are part of your repo. Push your local changes to the &lt;code&gt;master&lt;/code&gt; branch of the remote GitLab repo:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  git push origin master
  git status  &lt;span class="c"&gt;# repo is clean&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;From a web browser, go to your GitLab &lt;code&gt;hello-world&lt;/code&gt; repo. Refresh the browser and verify that your local changes made it to the remote server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt; You have successfully created a GitLab account and repo, established a local Git repo, and used Git both locally and remotely. Well done! Now learn more advanced Git commands and try them both locally and remotely.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Follow me on Twitter &lt;a href="https://twitter.com/realEdwinTorres"&gt;&lt;code&gt;@realEdwinTorres&lt;/code&gt;&lt;/a&gt; for programming tips, software engineering content, and career advice. 😊&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>100daysofcode</category>
    </item>
  </channel>
</rss>
