<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Improve Your Coding Skills &amp; Productivity</title>
      <author>Yogesh Chavan</author>
      <pubDate>Fri, 03 Dec 2021 11:03:12 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/improve-your-coding-skills-productivity-5381</link>
      <guid>https://dev.to/myogeshchavan97/improve-your-coding-skills-productivity-5381</guid>
      <description>&lt;h2&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h2&gt;

&lt;p&gt;If you're following me on &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;LinkedIn&lt;/a&gt;, then you might already know that I regularly share useful tips, tricks &amp;amp; articles to help others.&lt;/p&gt;

&lt;p&gt;Many developers found the content useful But I was not having any resource where you will find my all tips, tricks and article together.&lt;/p&gt;

&lt;p&gt;And Because "A lot of my connections asked me whether I have a single resource where they can find the useful tips and tricks I share regularly and which are also shared in my lot of articles and tutorials."&lt;/p&gt;

&lt;p&gt;And the answer was always &lt;strong&gt;No&lt;/strong&gt;. So I wanted to create such a resource that is quick and easy to access whenever needed in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-of-ebook"&gt;
  &lt;/a&gt;
  Launch of Ebook
&lt;/h2&gt;

&lt;p&gt;So, I'm very excited to announce the launch of &lt;a href="https://tipsntricks.netlify.app/"&gt;130+ Tips, Tricks &amp;amp; Resources&lt;/a&gt; ebook today.&lt;/p&gt;

&lt;p&gt;The ebook includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; HTML, JavaScript, CSS, React, Node.js Tips &amp;amp; Tricks&lt;/li&gt;
&lt;li&gt;Useful JavaScript Code Snippets&lt;/li&gt;
&lt;li&gt;List of Useful Articles and Tutorials&lt;/li&gt;
&lt;li&gt;Resources of Preparing for Interview&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and a lot more.&lt;/p&gt;

&lt;p&gt;This ebook will help you to improve your coding skills and productivity.&lt;/p&gt;

&lt;p&gt;As a part of the launch offer, only for 2 days (Dec 03 - Dec 04), you will get the book  at just &lt;strong&gt;$8&lt;/strong&gt; instead of the regular price of &lt;strong&gt;$13&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, you can get my &lt;a href="https://modernjavascript.yogeshchavan.dev/"&gt;Mastering Modern JavaScript&lt;/a&gt; book and &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux Course&lt;/a&gt; at just &lt;strong&gt;$8&lt;/strong&gt; instead of the original price of &lt;strong&gt;$13&lt;/strong&gt; and &lt;strong&gt;$19&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;p&gt;I have also added a combined package where you can get both the books and the course at just $20.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I have never offered such a huge discount and will never be offered again so get your copy of the course and book today.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm sure you will find it useful. &lt;/p&gt;

&lt;p&gt;That's it about this short annoucement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Click the below image and get your copy of the ebook.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tipsntricks.netlify.app/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJmNkH0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tipsntricks.netlify.app/book_cover.jpg" width="479" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
      <category>node</category>
    </item>
    <item>
      <title>My AWS Sys Ops Associate study guide</title>
      <author>kasukur</author>
      <pubDate>Fri, 03 Dec 2021 11:02:17 +0000</pubDate>
      <link>https://dev.to/kasukur/my-aws-sys-ops-associate-study-guide-1ogl</link>
      <guid>https://dev.to/kasukur/my-aws-sys-ops-associate-study-guide-1ogl</guid>
      <description>&lt;p&gt;&lt;em&gt;Important: Complete the courses and study material suggested in the &lt;a href="https://dev.to/kasukur/my-aws-solution-architect-associate-study-guide-1ied"&gt;AWS Solution Architect&lt;/a&gt; first as this has some overlap. After you have completed this, then follow the study guide below.&lt;/em&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Course&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.udemy.com/course/ultimate-aws-certified-sysops-administrator-associate/"&gt;Stephane Maarek on Udemy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2 months&lt;/td&gt;
&lt;td&gt;Completed&lt;/td&gt;
&lt;td&gt;Highly recommend&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://acloudguru.com/"&gt;Labs and Challenge Labs from A Cloud Guru&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2 days&lt;/td&gt;
&lt;td&gt;Completed&lt;/td&gt;
&lt;td&gt;Highly recommend&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://portal.tutorialsdojo.com/courses/aws-certified-sysops-administrator-associate-practice-exams/"&gt;Tutorial Dojo Practice Exams &amp;amp; Labs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;15 days&lt;/td&gt;
&lt;td&gt;Completed&lt;/td&gt;
&lt;td&gt;Highly recommend&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.udemy.com/course/aws-certified-sysops-administrator-associate-aws-practice-exams/"&gt;Neal Davis Practice Exams&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3 days&lt;/td&gt;
&lt;td&gt;Completed&lt;/td&gt;
&lt;td&gt;Highly recommend&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://explore.skillbuilder.aws/learn/course/external/view/elearning/6563/exam-prep-aws-certified-sysops-administrator-associate?sysops=sec&amp;amp;sec=prep"&gt;Exam Readiness&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2 hours&lt;/td&gt;
&lt;td&gt;Completed&lt;/td&gt;
&lt;td&gt;Highly recommend&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;AWS Certified SysOps Administrator - Associate Practice (SOA-P02)&lt;/td&gt;
&lt;td&gt;2 hours&lt;/td&gt;
&lt;td&gt;Completed&lt;/td&gt;
&lt;td&gt;55-question practice exam with question-level feedback&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://explore.skillbuilder.aws/learn"&gt;New - Skill Builder Practice Exams&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;30 mins&lt;/td&gt;
&lt;td&gt;Completed&lt;/td&gt;
&lt;td&gt;Reference 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qsZoqqq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9snai8c6z23czqzwb6vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qsZoqqq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9snai8c6z23czqzwb6vv.png" alt="AWS skillbuilder free practice exams" width="880" height="192"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Reference 1: Search for "Practice Exams" and register to get the code and access to amazonwebservices.benchprep.com&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exam-questionnaire"&gt;
  &lt;/a&gt;
  Exam Questionnaire
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This forms 82% of the overall score and comprises 51 questions. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You are not allowed to go back to the questionnaire once you move on to the labs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#practice-lab"&gt;
  &lt;/a&gt;
  Practice Lab
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You will receive a practice lab when you book your exam from &lt;a href="https://aws.learnondemand.net/"&gt;https://aws.learnondemand.net/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You may launch and complete the sample exam lab three (3) times over a 90-day period from your first exam lab attempt. You will be allowed 30 minutes for each attempt.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#exam-labs"&gt;
  &lt;/a&gt;
  Exam Labs
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The labs interface is actually a windows desktop, where you get access to a chrome browser and notepad.&lt;/li&gt;
&lt;li&gt;The exam has three labs. This forms 18% of the overall score.&lt;/li&gt;
&lt;li&gt;You are not allowed to go back once you complete the lab.&lt;/li&gt;
&lt;li&gt;You are allowed to open more than one tab in the browser.&lt;/li&gt;
&lt;li&gt;You are allowed to copy and paste.&lt;/li&gt;
&lt;li&gt;The instructions are clear and you can choose your choice of name if not specified in the instructions.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jayendrapatil.com/aws-certified-sysops-administrator-associate-soa-c02-exam-learning-path/"&gt;Jayendrapatil's List of Practice Labs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Try and take the test in an exam center as this exam has labs. If taken from home there could be a lag on the console which makes it very hard to complete. &lt;br&gt;
Tip: If you do encounter this lag, you can work around this by minimizing and maximizing the browser every time you scroll or navigate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me know if you have any questions regarding my study guide. Hope this helps with your preparation.&lt;/p&gt;

</description>
      <category>cloudskills</category>
      <category>aws</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Give more Attention to your README file</title>
      <author>Haris#</author>
      <pubDate>Fri, 03 Dec 2021 10:28:57 +0000</pubDate>
      <link>https://dev.to/harishash/give-more-attention-to-your-readme-file-3c76</link>
      <guid>https://dev.to/harishash/give-more-attention-to-your-readme-file-3c76</guid>
      <description>&lt;p&gt;Starting out as a Web Developer can be quite overwhelming. You are bombarded with so many different technologies to choose from. But one thing that can make you stand out from all the other people starting out is the discipline you put into your projects. And one of the best ways to add it in your projects is to write proper documentation of your process.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#readmemd"&gt;
  &lt;/a&gt;
  README.md
&lt;/h1&gt;

&lt;p&gt;Readme is a text file that is used by developers to explain and introduce their projects to the external users. It contains the information that is needed to get acquainted with the corresponding project. It's used as a way to answer all the frequent questions that other developers might have regarding the project such as identifying the technology stack or installing it for personal use.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-should-i-write-readme"&gt;
  &lt;/a&gt;
  Why should I write Readme
&lt;/h1&gt;

&lt;p&gt;Readme is usually ignored while adding projects to your repositories. As a newbie it seems unnecessary to write long lines that probably no one is going to read. But you might come back to your code after a while and that readme file is going to help you a lot in identifying what was what. A good readme file should be as good as the project itself. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#readme-is-very-important-in-growth"&gt;
  &lt;/a&gt;
  Readme is very important in growth
&lt;/h1&gt;

&lt;p&gt;Adding a readme file might seem as a small step as it is often ignored but this one small step can go a long way in your development career. Your projects on GitHub are basically your portfolio. It’s very rare that you start landing big clients after starting out so until you make a name for yourself, adding your projects in a presentable way to your repositories is the best way to showcase your talents to your possible clients. If you’re in a learning phase and trying to code on different test projects, then it's best to add them to your repositories with a good description. The best part about these descriptions is that even a non-technical person (maybe a recruiter) can get an idea of your talents from these files.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tips-on-writing-a-good-description"&gt;
  &lt;/a&gt;
  Tips on writing a good Description
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#essentials"&gt;
  &lt;/a&gt;
  Essentials:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#title"&gt;
  &lt;/a&gt;
  Title:
&lt;/h3&gt;

&lt;p&gt;Make sure to add specific and to the point titles that describe what the project is about&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-projects-aim"&gt;
  &lt;/a&gt;
  The project's aim:
&lt;/h3&gt;

&lt;p&gt;Mention what you want to achieve by making this project. It's good to start developing with deliverables in mind.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack:
&lt;/h3&gt;

&lt;p&gt;Add what framework or library you’re using and it’d be super awesome if you add why you used it in the first place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;If your project is a software or an app, make sure that you add proper instructions on how to install it on whatever platform you’re providing support for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#really-stand-out"&gt;
  &lt;/a&gt;
  Really Stand Out:
&lt;/h2&gt;

&lt;p&gt;If you’re feeling a wee bit fancy and really want to make a good impression by going the extra mile, consider adding these sections as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Table of contents&lt;/li&gt;
&lt;li&gt;GIFs of project in action&lt;/li&gt;
&lt;li&gt;Scope of functionalities &lt;/li&gt;
&lt;li&gt;Project status &lt;/li&gt;
&lt;li&gt;Sources&lt;/li&gt;
&lt;li&gt;Other information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me know what you guys think about Readme files.&lt;/p&gt;

&lt;p&gt;Happy Developing!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Development and Test on
Amazon Web Services
| AWS White Paper Summary</title>
      <author>Adit Modi</author>
      <pubDate>Fri, 03 Dec 2021 10:11:57 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/development-and-test-onamazon-web-services-aws-white-paper-summary-48c9</link>
      <guid>https://dev.to/awsmenacommunity/development-and-test-onamazon-web-services-aws-white-paper-summary-48c9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Organizations write software for various reasons, ranging from core business needs (when the organization is a software vendor) to customizing or integrating software. Organizations also create different types of software: web applications, standalone applications, automated agents, and so on. In all such cases, development teams are pushed to deliver software of high quality as quickly as possible to reduce the time to market or time to production.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this document, “development and test” refers to the various tools and practices applied when producing software. Regardless of the type of software to be developed, a proper set of development and test practices is key to success. However, producing applications not only requires software engineers, but also IT resources, which are subject to constraints like time, money, and expertise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The software lifecycle typically consists of the following main elements:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V-6FanKi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41kzzpl2tmkya1sq4f3k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-6FanKi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41kzzpl2tmkya1sq4f3k.jpg" alt="Image description" width="475" height="372"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This whitepaper covers aspects of the development, build, and test phases. For each of these phases, you need different types of IT infrastructure. AWS provides multiple benefits to software development teams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS offers on-demand access to a wide range of cloud infrastructure services, charging only for the resources that are used. AWS helps eliminate both the need for costly hardware and the administrative pain that goes with owning and operating it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Owning hardware and IT infrastructure usually involves a capital expenditure for a 3-5 year period, where most development and test teams need compute or storage for hours, days, weeks, or months. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This difference in timescales can cause friction due to the difficulty for IT operations to satisfy simultaneous requests from project teams, even as they are constrained by a fixed set of resources. The result is that project teams spend a lot of time justifying, sourcing, and holding on to resources. This time could be spent focusing on the main job.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By provisioning only the resources needed for the duration of development phases, test runs, or complete test campaigns, your company can achieve important savings compared to investing up front in traditional hardware. With the right level of granularity, you can allocate resources depending on each project’s needs and budget. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In addition to those economic benefits, AWS also offers significant operational advantages, such as the ability to set up a development and test infrastructure in a matter of minutes rather than weeks or months, and to scale capacity up and down to provide the IT resources needed, only when they are needed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This document highlights some of the best practices and recommendations around development and test on AWS. For example, for the development phase, this document discusses how to securely and durably set up tools and processes such as version control, collaboration environments, and automated build processes. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the testing phase, this document discusses how to set up test environments in an automated fashion, and how to run various types of tests, including side-by-side tests, load tests, stress tests, resilience tests, and more.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#development-phase"&gt;
  &lt;/a&gt;
  Development phase
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Regardless of team size, software type being developed, or project duration, development tools are mandatory to rationalize the process, coordinate efforts, and centralize production. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Like any IT system, development tools require proper administration and maintenance. Operating such tools on AWS not only relieves your development team from low-level system maintenance tasks such as network configuration, hardware setup, and so on, but also facilitates the completion of more complex tasks. The following sections describe how to operate the main components of development tools on AWS.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#source-code-repository"&gt;
  &lt;/a&gt;
  Source code repository
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The source code repository is a key tool for development teams. As such, it needs to be available, and the data it contains (source files under version control) needs to be durably stored, with proper backup policies. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensuring these two characteristics— availability and durability—requires resources, expertise, and time investment that typically aren’t a core competency of a software development team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Building a source code repository on AWS involves creating an AWS CodeCommit repository. AWS CodeCommit is a secure, highly scalable, managed source control service that hosts private GitHub repositories. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It eliminates the need for you to operate your own source control system, and there is no hardware to provision and scale or software to install, configure, and operate.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project-management-tools"&gt;
  &lt;/a&gt;
  Project management tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In addition to the source code repository, teams often use additional tools such as issue tracking, project tracking, code quality analysis, collaboration, content sharing, and so on. Most of the time, those tools are provided as web applications. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Like any other classic web application, they require a server to run, and frequently a relational database. The web components can be installed on Amazon Elastic Compute Cloud (Amazon EC2), with the database using Amazon Relational Database Service (Amazon RDS) for data storage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Within minutes, you can create Amazon EC2 instances, which are virtual machines over which you have complete control. A variety of different operating systems and distributions are available as Amazon Machine Images (AMIs). An AMI is a template that contains a software configuration (operating system, application server, and applications) that you can run on Amazon EC2. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After you’ve properly installed and configured the project management tool, AWS recommends you create an AMI from this setup so you can quickly recreate that instance without having to reinstall and reconfigure the software.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Project management tools have the same needs as source code repositories: they need to be available, and data has to be durably stored. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While you can mitigate the loss of code analysis reports by recreating them against the desired repository version, losing project or issue tracking information might have more serious consequences. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can address the availability of the project management web application service by using AMIs to create replacement Amazon EC2 instances in case of failure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can store the application’s data separately from the host system to simplify maintenance or migration operations. Amazon Elastic Block Store (Amazon EBS) provides off-instance storage volumes that persist independently from the life of an instance. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After you create a volume, you can attach it to a running Amazon EC2 instance. As such, an Amazon EBS volume is provisioned and attached to the instance to store the data of the version control repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You achieve durability by taking point-in-time snapshots of the EBS volume containing the repository data. EBS snapshots are stored in Amazon Simple Storage Service (Amazon S3), a highly durable and scalable data store. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Objects in Amazon S3 are redundantly stored on multiple devices across multiple facilities in an AWS Region. You can automate the creation and management of snapshots using Amazon Data Lifecycle Manager.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These snapshots can be used as the starting point for new Amazon EBS volumes, and can protect your data for long-term durability. In case of a failure, you can recreate the application data volume from the snapshots, and recreate the application instance from an AMI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To facilitate proper durability and restoration, Amazon Relational Database Service (Amazon RDS) offers an easy way to set up, operate, and scale a relational database in AWS. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It provides cost-efficient and resizable capacity while managing time-consuming database administration tasks, freeing the project team from this responsibility. Amazon RDS Database instances (DB instances) can be provisioned in a matter of minutes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optionally, Amazon RDS will ensure that the relational database software stays up to date with the latest patches. The automated backup feature of Amazon RDS enables point-in-time recovery for DB instances, allowing restoration of a DB instance to any point in time within the backup retention period.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An Elastic IP address provides a static endpoint to an Amazon EC2 instance, and can be used in combination with DNS (for example, behind a DNS CNAME). This helps teams to access their hosted services, such as the project management tool, in a consistent way, even if infrastructure is changed underneath; for example, when scaling up or down, or when a replacement instance is provisioned.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U3eBknb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x16181tx6r1cfha4clc8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U3eBknb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x16181tx6r1cfha4clc8.png" alt="Image description" width="627" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;An Elastic IP Address provides a static endpoint to an Amazon EC2 instance&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As your development team grows or adds more tools to the project management instance, you might require extra capacity for both the web application instance and the DB instance. In AWS, scaling instances vertically is an easy and straightforward operation. You simply stop the EC2 instance, change the instance type, and start the instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alternatively, you can create a new web application server from the AMI on a more powerful Amazon EC2 instance type, and replace the previous server. You can use horizontal scaling by using Elastic Load Balancing, adding more instances to the system by using AWS Auto Scaling. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this case, as you have more than one node, you can use Elastic Load Balancing to distribute the load across all application nodes. Amazon RDS DB instances can scale compute and memory resources with a few clicks on the AWS Management Console.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VaQuL5rR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdyh3ng1cxvj0lrm7f5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VaQuL5rR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdyh3ng1cxvj0lrm7f5b.png" alt="Image description" width="627" height="310"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Use Elastic Load Balancing to distribute the load across all application nodes&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When you want to quickly set up a software development project on AWS and don’t want to configure custom project management tools on EC2, you can use AWS CodeStar. AWS CodeStar comes with a unified project dashboard and integration with Atlassian JIRA software, a third-party issue tracking and project management tool. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With the AWS CodeStar project dashboard, you can easily track your entire software development process, from a backlog work item to production code deployment.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#ondemand-development-environments"&gt;
  &lt;/a&gt;
  On-demand development environments
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Developers primarily use their local laptops or desktops to run their development environments. This is typically where the integrated development environment (IDE) is installed, where unit tests are run, where source code is checked in, and so on.&lt;br&gt;
However, there are a few cases where on-demand development environments hosted in AWS are helpful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Cloud9 is a cloud-based IDE that enables you to write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. AWS Cloud9 comes prepackaged with essential tools for popular programming languages, including JavaScript, Python, PHP, Ruby, Go, C++, and more, so you don’t need to install files or configure your development machine to start new projects. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because your AWS Cloud9 IDE is cloud-based, you can work on your projects from your office, home, or anywhere using an internet-connected machine. With AWS Cloud9, you can quickly share your development environment with your team, enabling you to pair program and track each other's inputs in real time&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stopping-vs-ending-amazon-ec2-instances"&gt;
  &lt;/a&gt;
  Stopping vs. ending Amazon EC2 instances
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Whenever development environments are not used; for example, during the hours when you are not working, or when a specific project is on hold, you can easily shut them down to save resources and cost. There are two possibilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stopping the instances, which is roughly equivalent to hibernating the operating system&lt;/li&gt;
&lt;li&gt;Ending the instances, which is roughly equivalent to discarding the operating system &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you stop an instance (possible for Amazon EBS−backed AMIs), the compute resources are released and no further hourly charges for the instance apply. The Amazon EBS volume stores the state, and next time you start the instance, it will have the working data as it did before you stopped it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#integrating-with-aws-apis-and-ide-enhancements"&gt;
  &lt;/a&gt;
  Integrating with AWS APIs and IDE enhancements
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;With AWS, you can now code against and control IT infrastructure, either if the target platform of your project is AWS, or if the project is about orchestrating resources in AWS. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The AWS SDK tools are available for multiple languages: C++, Go, JavaScript, Node.js, Python, Java, .Net, PHP, Ruby, and for mobile platforms Android and iOS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For developing and building Serverless applications, AWS offers the Serverless Application Model (AWS SAM) open-source framework, which can be used with the AWS toolkits mentioned previously&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#build-phase"&gt;
  &lt;/a&gt;
  Build phase
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The process of building an application involves many steps, including compilation, resource generation, and packaging. For large applications, each step involves multiple dependencies such as building internal libraries, using helper applications, generating resources in different formats, generating the documentation, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some projects might require building the deliverables for multiple CPU architectures, platforms, or operating systems. The complete build process can take many hours, which has a direct impact on the agility of the software development team. This impact is even stronger on teams adopting approaches like continuous integration where every commit to the source repository triggers an automated build, followed by test suites.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#schedule-builds"&gt;
  &lt;/a&gt;
  Schedule builds
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To mitigate this problem, teams working on projects with lengthy build times often adopt the “nightly build” (or neutral build) approach, or break the project into smaller sub- projects (or a combination of both). &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Doing nightly builds involves a build machine checking out the latest source code from the repository and building the project deliverables overnight. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ondemand-builds"&gt;
  &lt;/a&gt;
  On-demand builds
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A more practical solution is to use more computational power for the build process. On traditional environments where the build server runs on hardware acquired by the organization, this option might not be viable due to economic constraints or provisioning delays. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A build server running on an Amazon EC2 instance can be scaled up vertically in a matter of minutes, reducing build time by providing more CPU or memory capacity when needed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A solution would be to take advantage of the on-demand and pay-as-you-go nature of AWS CodeBuild to run multiple builds in parallel. You can run separate builds concurrently without waiting in a queue. This also enables you to schedule automated builds at a specific time window.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you use a build tool on EC2 instances running as a fleet of worker nodes, the task distribution to the worker nodes can be done using a queue holding all the builds to process. Worker nodes pick the next build to process as they are free. To implement this system, Amazon Simple Queue Service (Amazon SQS) offers a reliable, highly scalable, hosted queue service. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SQS makes it easy to create an automated build workflow, working in close conjunction with Amazon EC2 and other AWS infrastructure services. In this setup, developers commit code to the source code repository, which in turn pushes a build message into an Amazon SQS queue. The worker nodes poll this queue to pull a message and run the build locally according to the parameters contained in the message (for example, the branch or source version to use).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can further enhance this setup by dynamically adjusting the pool of worker nodes consuming the queue. Auto Scaling is a service that makes it easy to scale the number of worker nodes up or down automatically according to predefined conditions. With Auto Scaling, worker nodes’ capacity can increase seamlessly during demand spikes to maintain quick build generation, and decrease automatically during demand lulls to minimize costs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can define scaling conditions using Amazon CloudWatch, a monitoring service for AWS Cloud resources. For example, Amazon CloudWatch can monitor the number of messages in the build queue and notify Auto Scaling that more or less capacity is needed depending on the number of messages in the queue. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following diagram summarizes this scenario:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BuTFq3rH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6hc6t9q6h22j8ozgytu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BuTFq3rH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6hc6t9q6h22j8ozgytu.png" alt="Image description" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Amazon CloudWatch can monitor the number of messages in the build queue and notify Auto Scaling that more or less capacity is needed&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storing-build-artifacts"&gt;
  &lt;/a&gt;
  Storing build artifacts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Every time you produce a build, you need to store the output somewhere. Amazon S3 is an appropriate service for this. Initially, the amount of data to be stored for a given project is small, but it grows over time as you produce more builds. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here the pay-as- you-go and capacity characteristics of S3 are particularly attractive. When you no longer need the build output, you can delete it, or use S3’s lifecycle policies to delete or archive the objects to Amazon S3 Glacier storage class. AWS CodeBuild by default uses S3 buckets to store the build outputs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To distribute the build output (for example, to be deployed in test, staging, or production, or to be downloaded to clients), AWS offers several options. You can distribute build output packages directly out of S3 by configuring bucket policies and/or ACLs to restrict the distribution. You can also share the output object using an S3 presigned URL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another option is to use Amazon CloudFront, a web service for content delivery, which makes it easy to distribute packages to end users with low latency and high data transfer speeds, thereby improving the end user experience. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This can be helpful, for example, when a large number of clients are downloading install packages or updates. Amazon CloudFront offers several options; for example, to authorize and/or restrict access, though a full discussion of this is out of scope for this document.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#testing-phase"&gt;
  &lt;/a&gt;
  Testing phase
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Tests are a critical part of software development. They ensure software quality, but more importantly, they help find issues early in the development phase, lowering the cost of fixing them later during the project. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tests come in many forms: unit tests, performance tests, user acceptance tests, integration tests, and so on, and all require IT resources to run. Test teams face the same challenges as development teams: the need for enough IT resources, but only during the limited duration of the test runs. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test environments change frequently and are different from project to project, and may require different IT infrastructure or have varying capacity needs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The AWS on-demand and pay-as-you-go value propositions are well adapted to those constraints. AWS enables your test teams to eliminate both the need for costly hardware and the administrative pain that goes along with owning and operating it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS also offers significant operational advantages for testers. Test environments can be set up in minutes rather than weeks or months, and a variety of resources, including different instance types, are available to run tests whenever they are needed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#automating-test-environments"&gt;
  &lt;/a&gt;
  Automating test environments
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There are many software tools and frameworks available for automating the process of running tests, but proper infrastructure must be in place. This involves provisioning infrastructure resources, initializing the resources with a sample dataset, deploying the software to be tested, orchestrating the test runs, and collecting results. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The challenge is not only to have enough resources to deploy the complete application with all the different servers or services it might require, but to be able to initialize the test environment with the right software and the right data over and over. Test environments should be identical between test runs; otherwise it is more difficult to compare results.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another important benefit of running tests on AWS is the ability to automate them in various ways. You can create and manage test environments programmatically using the AWS APIs, CLI tools, or AWS SDKs. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tasks that require human intervention in classic environments (allocating a new server, allocating and attaching storage, allocating a database, and so on) can be fully automated on AWS using AWS CodePipeline and AWS CloudFormation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For testers, designing tests suites on AWS means being able to automate a test down to the operation of the components, which are traditionally static hardware devices.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automation makes test teams more efficient by removing the effort of creating and initializing test environments, and less error prone by limiting human intervention during the creation of those environments. An automated test environment can be linked to the build process, following continuous integration principles. Every time a successful build is produced, a test environment can be provisioned and automated tests run on it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following sections describe how to automatically provision Amazon EC2 instances, databases, and complete environments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#provisioning-instances"&gt;
  &lt;/a&gt;
  Provisioning instances
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can easily provision Amazon EC2 instances from AMIs. An AMI encapsulates the operating system and any other software or configuration files pre-installed on the instance. When you launch the instance, all the applications are already loaded from the AMI and ready to run. For information about creating AMIs, refer to the Amazon EC2 documentation. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The challenge with AMI-based deployments is that each time you need to upgrade software, you have to create a new AMI. Although the process of creating a new AMI (and deleting an old one) can be completely automated using EC2 Image Builder, you must define a strategy for managing and maintaining multiple versions of AMIs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An alternative approach is to include only components into the AMI that don’t change often (operating system, language platform and low-level libraries, application server, and so on). More volatile components, like the application under development, can be fetched and deployed to the instance at runtime. For more details on how to create self- bootstrapped instances, see Bootstrapping.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#provisioning-databases"&gt;
  &lt;/a&gt;
  Provisioning databases
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Test databases can be efficiently implemented as Amazon RDS database instances. Your test teams can instantiate a fully operational database easily, and load a test dataset from a snapshot. To create this test dataset, you first provision an Amazon RDS instance. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After injecting the dataset, you create a snapshot of the instance. From that time, every time you need a test database for a test environment, you can create one as an Amazon RDS instance from that initial snapshot. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;See Restoring from a DB snapshot. Each Amazon RDS instance started from the same snapshot will contain the same dataset, which helps ensure that your tests are consistent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#provisioning-complete-environments"&gt;
  &lt;/a&gt;
  Provisioning complete environments
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;While you can create complex test environments containing multiple instances using the AWS APIs, command line tools, or the AWS Management Console, AWS CloudFormation makes it even easier to create a collection of related AWS resources and provision them in an orderly and predictable fashion.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS CloudFormation uses templates to create and delete a collection of resources together as a single unit (a stack). A complete test environment running on AWS can be described in a template, which is a text file in JSON or YAML format. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because templates are just text files, you can edit and manage them in the same source code repository you use for your software development project. That way, the template will mirror the status of the project, and test environments matching older source versions can be easily provisioned. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is particularly useful when dealing with regression bugs. In just a few steps, you can provision the full test environment, enabling developers and testers to simulate a bug detected in older versions of the software.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS CloudFormation templates also support parameters that can be used to specify a specific software version to be loaded, the Amazon EC2 instance sizes for the test environment, the dataset to be used for the databases, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provisioning cloud applications can be a challenging process that requires you to perform manual actions, write custom scripts, maintain templates, or learn domain- specific languages. You can now use the AWS Cloud Development Kit (AWS CDK), an open-source software development framework for defining cloud infrastructure-as-code with modern programming languages, and deploying it through AWS CloudFormation. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS CDK uses familiar programming languages such as TypeScript, JavaScript, Python, Java, C# / .Net, and Go for modeling your applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For more information about how to create and automate deployments on AWS using AWS CloudFormation, see AWS CloudFormation Resources.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#load-testing"&gt;
  &lt;/a&gt;
  Load testing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Functionality tests running in controlled environments are valuable tools to ensure software quality, but they give little information on how an application or a complete deployment will perform under heavy load. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, some websites are specifically created to provide a service for a limited time: ticket sales for sports events, special sales, limited edition launches, and so on. Such websites must be developed and architected to perform efficiently during peak usage periods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In some cases, the project requirements clearly state the minimum performance metrics to be met under heavy load conditions (for example, search results must be returned in under 100 milliseconds (ms) for up to 10,000 concurrent requests), and load tests are exercised to ensure that the system can sustain the load within those limits.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For other cases, it is not possible or practical to specify the load a system should sustain. In such cases, load tests are performed to measure the behavior under heavy load conditions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The objective is to gradually increase the load of a system, to determine the point where the performance degrades in such a way that the system cannot operate anymore.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Load tests simulate heavy inputs that exercise and stress a system. Depending on the project, inputs can be a large number of concurrent incoming requests, a huge dataset to process, and so on. One of the main difficulties in load testing is generating large enough amounts of inputs to push the tested system to its limits. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Typically, you need large amounts of IT resources to deploy the system to test, and to generate the test input, which requires further infrastructure. Because load tests generally don’t run for more than a couple of hours, the AWS pay-as-you-go model nicely fits this use case.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Serverless architectures using AWS services such as AWS Lambda, Amazon API Gateway, AWS Step Functions, and so on, load testing can help identify custom code in Lambda functions that may not run efficiently as traffic scales up. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also helps to determine an optimum timeout value by analyzing your functions’ running duration to identify problems with a dependency service. One of the most popular tools to perform this task is Artillery Community Edition, which is an open-source tool for testing serverless APIs. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also use Distributed Load Testing on AWS to automate application testing, understand how it performs at scale, and fix bottlenecks before releasing your application.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#network-load-testing"&gt;
  &lt;/a&gt;
  Network load testing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Testing an application or service for network load involves sending large numbers of requests to the system being tested. There are many software solutions available to simulate request scenarios, but using multiple Amazon EC2 instances may be necessary to generate enough traffic. Amazon EC2 instances are available on-demand and are charged by the hour, which makes them well suited for network load testing scenarios. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep in mind the characteristics of different instance types. Generally, larger instance types provide more input / output (I/O) network capacity, the primary resource consumed during network load tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With AWS, test teams can also perform network load testing on applications that run outside of AWS. Having load test agents dispersed in different Regions of AWS enables testing from different geographies; for example, to get a better understanding of the end user experience. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In that scenario, it makes sense to collect log information from the instances that simulate the load. Those logs contain important information such as response times from the tested system. By running the load agents from different Regions, the response time of the tested application can be measured for different geographies. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This can help you understand the worldwide user experience. Because you can end load-testing Amazon EC2 instances right after the test, you should transfer log data to S3 for storage and later analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you plan to run high volume network load tests directly from your EC2 instances to other EC2 instances, follow the Amazon EC2 Testing Policy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#load-testing-for-aws"&gt;
  &lt;/a&gt;
  Load testing for AWS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Load testing an application running on AWS is useful to make sure that elasticity features are correctly implemented. Testing a system for network load is important to make sure that for web front-ends, Auto Scaling, and Elastic Load Balancing configurations are correct. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Auto Scaling offers many parameters and can use multiple conditions defined with Amazon CloudWatch to scale the number of front-end instances up or down.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These parameters and conditions influence how fast an Auto Scaling group will add or remove instances. An Amazon EC2 instance’s post-provisioning time might also affect an application’s ability to scale up quickly enough. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After initialization of the operating system running on Amazon EC2 instances, additional services are initialized, such as web servers, application servers, memory caches, middleware services, and so on. The initialization time of these different services affects the scale-up delay, especially when additional software packages need to be pulled down from a repository. Load testing provides valuable metrics on how fast additional capacity can be added into a particular system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Auto Scaling is not only used for front-end systems. You might also use it for scaling internal groups of instances, such as consumers polling an Amazon SQS queue or workers and deciders participating in an Amazon Simple Workflow Service (Amazon SWF) workflow. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In both cases, load testing the system can help ensure you’ve correctly implemented and configured Auto Scaling groups or other automated scaling techniques to make your final application as cost-effective and scalable as possible.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cost-optimization-with-spot-instances"&gt;
  &lt;/a&gt;
  Cost optimization with Spot instances
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Load testing can require many instances, especially when exercising systems that are designed to support a high amount of load. While you can provision Amazon EC2 instances on-demand and discard them when the test is completed while only paying by the hour, there is an even more cost-effective way to perform those tests using Amazon EC2 Spot Instances.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spot Instances enable customers to bid for unused Amazon EC2 capacity. Instances are charged the Spot Price set by Amazon EC2, which fluctuates depending on the supply of and demand for Spot Instance capacity. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To use Spot Instances, place a Spot Instance request specifying the instance type, the desired Availability Zone, the number of Spot Instances to run, and the maximum price to pay per instance hour.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Spot Price history for the past 90 days is available via the Amazon EC2 API or the AWS Management Console. If the maximum price bid exceeds the current Spot Price, the request is fulfilled and instances are started. The instances run until either they are ended or the Spot Price increases above the maximum price, whichever is sooner.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#user-acceptance-testing"&gt;
  &lt;/a&gt;
  User acceptance testing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The objective of user acceptance testing is to present the current release to a testing team representing the final user base, to determine if the project requirements and specification are met. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When users can test the software earlier, they can spot conceptual weaknesses that have been introduced during the analysis phase, or clarify gray areas in the project requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By testing the software more frequently, users can identify functional implementation errors and user interface or application flow misconceptions earlier, lowering the cost and impact of correcting them. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flaws detected by user acceptance testing may be very difficult to detect by other means. The more often you conduct acceptance tests, the better for the project, because end users provide valuable feedback to development teams as requirements evolve.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, like any other test practice, acceptance tests require resources to run the environment where the application to be tested will be deployed. As described in previous sections, AWS provides on-demand capacity as needed in a cost-effective way, which is also appropriate for acceptance testing. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using some of the techniques described previously, AWS enables complete automation of the process of provisioning new test environments and of disposing environments no longer needed. Test environments can be provided for certain times only, or continuously from the latest source code version, or for every major release.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By deploying the acceptance test environment within Amazon VPC, internal users can transparently access the application to be tested. Such an application can also be integrated with other production services inside the company, such as LDAP, email servers, and so on, offering a test environment to the end users that is even closer to the real and final production environment.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sidebyside-testing"&gt;
  &lt;/a&gt;
  Side-by-side testing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Side-by-side testing is a method used to compare a control system to a test system. The goal is to assess whether changes applied to the test system improve a desired metric compared to the control system. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use this technique to optimize the performance of complex systems where a multitude of different parameters can potentially affect the overall efficiency. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Knowing which parameter will have the desired effect is not always obvious, especially when multiple components are used together and influence the performance of each other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also use this technique when introducing important changes to a project, such as new algorithms, caches, different database engines, or third-party software. In such cases, the objective is to ensure your changes positively affect the global performance of the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After you’ve deployed the test and control systems, send the same input to both, using load-testing techniques or simple test inputs. Finally, collect performance metrics and logs from both systems and compare them to determine if the changes you introduced in the test system present an improvement over the control system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By provisioning complete test environments on-demand, you can perform side-by-side tests efficiently. While you can do side-by-side testing without automated environment provisioning, using the automation techniques described above makes it easier to perform those tests whenever needed, taking advantage of the pay-as-you-go model of AWS. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In contrast, with traditional hardware, it may not be possible to run multiple test environments for multiple projects simultaneously.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Side-by-side tests are also valuable from a cost optimization point of view. By comparing two environments in different AWS accounts, you can easily come up with cost / performance ratios to compare both environments. By continuously testing architecture changes for cost performance, you can optimize your architectures for efficiency.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#faulttolerance-testing"&gt;
  &lt;/a&gt;
  Fault-tolerance testing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When AWS is the target production environment for the application you’ve developed, some specific test practices provide insights into how the system will handle corner cases, such as component failures. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS offers many options for building fault-tolerant systems. Some services are inherently fault-tolerant, for example, Amazon S3, Amazon DynamoDB, Amazon SimpleDB, Amazon SQS, Amazon Route 53, Amazon CloudFront, and so on. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Other services such as Amazon EC2, Amazon EBS, and Amazon RDS provide features that help architect fault-tolerant and highly available systems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, Amazon RDS offers the Multi-Availability Zone option that enhances database availability by automatically provisioning and managing a replica in a different Availability Zone. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many AWS customers run mission-critical applications on AWS, and they need to make sure their architecture is fault tolerant. As a result, an important practice for all systems is to test their fault-tolerance capability. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While a test scenario exercises the system (using similar techniques to load testing), some components are taken down on purpose to check if the system is able to recover from such simulated failure. You can use the AWS Management Console or the CLI to interact with the test environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, you might end Amazon EC2 instances, and then test whether an Auto Scaling group is working as expected and a replacement instance automatically provisioned. You can also automate this kind of test by integrating AWS Fault Injection Simulator with your CI/CD pipeline. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is a best practice is to use automated tools that, for example, occasionally and randomly disrupt Amazon EC2 instances. With Fault Injection Simulator, you can stress an application by creating disruptive events, such as a sudden increase in CPU or memory consumption, to observe how the system responds and implement improvements.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#resource-management"&gt;
  &lt;/a&gt;
  Resource management
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;With AWS, your development and test teams can have their own resources, scaled according to their own needs. Provisioning complex environments or platforms composed of multiple resources can be done using AWS CloudFormation stacks, or some of the other automation techniques described in this whitepaper. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In large organizations comprising multiple teams, it is a good practice to create an internal role or service responsible for centralizing and managing IT resources running on AWS. This role typically consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Promoting the internal development and test practices described here&lt;/li&gt;
&lt;li&gt;Developing and maintaining template AMIs and template AWS CloudFormation stacks with the different tools and platforms used in your organization&lt;/li&gt;
&lt;li&gt;Collecting resource requests from project teams, and provisioning resources on AWS according to your organization’s policies, including network configuration (such as Amazon VPC) and security configurations (such as Security Groups and IAM credentials)&lt;/li&gt;
&lt;li&gt;Monitoring resource usage and charges using AWS Cost Explorer, and allocating these to team budgets&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use the AWS Service Catalog to achieve the tasks above or you might want to develop your own internal provisioning and management portal for a tighter integration with internal processes. You can do this by using one of the AWS SDKs, which allow programmatic access to resources running on AWS.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cost-allocation-and-multiple-aws-accounts"&gt;
  &lt;/a&gt;
  Cost allocation and multiple AWS accounts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Some customers have found it helpful to create specific accounts for development and test activities. This can be important when your production environment also runs on AWS and you need to separate teams and responsibilities. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Separate accounts are isolated from each other by default, so that, for example, development and test users do not interfere with production resources. To enable collaboration, AWS offers a number of features that enable sharing of resources across accounts, such as Amazon S3 objects, AMIs, and Amazon EBS snapshots.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To separate out and allocate the cost for the various activities and phases of the development and test cycle, AWS offers various options. One option is to use separate accounts (for example, for development, testing, staging, and production), and each account will have its own bill. You can also consolidate multiple accounts using consolidated billing for AWS Organizations to simplify costs and take advantage of quantity discounts with a single bill.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another option is to make use of the monthly cost allocation report, which enables you to organize and track your AWS costs by using resource tagging. In the context of development and test, tags can represent the various stages or teams of the development cycle, though you are free to choose the dimensions you find most helpful.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Development and test practices require certain resources at certain times for the development cycle. In traditional environments, those resources might not be available at all, or not in the necessary timeframe. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When those resources are available, they provide a fixed amount of capacity that is either insufficient (especially in variable activities like testing), or wasted (but paid for) when the resources are not used. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS offers a cost-effective alternative to traditional development and test infrastructures. Instead of waiting weeks or even months for hardware, you can instantly provision resources, scale up as the workload grows, and release resources when they are no longer needed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whether development and test environments consist of a few instances or hundreds, whether they are needed for a few hours or 24/7, you still pay only for what you use. AWS is a programming-language and operating system−agnostic platform, and you can choose the development platform or programming model used in your business. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This flexibility enables you to focus on your project, not on operating and maintaining your infrastructure.&lt;br&gt;
AWS also enables possibilities that are difficult to realize with traditional hardware. You can fully automate resources on AWS so that environments can be provisioned and decommissioned without human intervention. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can start development environments on-demand; kick off builds when needed, unconstrained by the availability of resources; provision test resources; and automatically orchestrate entire test runs or campaigns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS offers you the ability to experiment and iterate with a rapidly changeable infrastructure. Your project teams are free to use inexpensive capacity to perform any kind of tests or to experiment with new ideas, with no upfront expenses or long-term commitments, making AWS a platform of choice for development and test.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://d1.awsstatic.com/whitepapers/aws-development-test-environments.pdf?did=wp_card&amp;amp;trk=wp_card"&gt;Original paper&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AWS Sagemaker Best Practices Packt Book Review</title>
      <author>Salah Elhossiny</author>
      <pubDate>Fri, 03 Dec 2021 10:09:01 +0000</pubDate>
      <link>https://dev.to/aws-heroes/aws-sagemaker-best-practices-packt-book-review-1hjh</link>
      <guid>https://dev.to/aws-heroes/aws-sagemaker-best-practices-packt-book-review-1hjh</guid>
      <description>&lt;p&gt;4 weeks ago, I was invited from &lt;a href="https://www.packtpub.com/"&gt; Packt &lt;/a&gt; publishing team to review on the awesome books about &lt;a href="https://www.packtpub.com/product/amazon-sagemaker-best-practices/9781801070522"&gt; AWS Sagemaker best practices &lt;/a&gt; as I am AWS ML hero. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#book-chapters"&gt;
  &lt;/a&gt;
  Book chapters:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-sagemaker-overview"&gt;
  &lt;/a&gt;
  1. Sagemaker Overview
&lt;/h3&gt;

&lt;p&gt;This chapter provides an overview of whole ML pipeline: preparing, building, training, tuning, deployment and monitoring. It also provides a data preparation capabilities, such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sagemaker/groundtruth/"&gt; Sagemaker Ground Truth &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/sagemaker/data-wrangler/"&gt; SageMaker Data Wrangler &lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/aws/amazon-sagemaker-processing-fully-managed-data-processing-and-model-evaluation/"&gt; Sagemaker processing &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/sagemaker/feature-store/"&gt; Feature store &lt;/a&gt; and &lt;a href="https://aws.amazon.com/sagemaker/clarify/"&gt; Clarify &lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also provides a feature tour about model building capabilities, such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sagemaker/studio/"&gt; Sagemaker studio &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/nbi.html"&gt; Sagemaker notebook instances &lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html"&gt; Built-in algorithms &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-byoc-containers.html"&gt; Bring your own container (BYOC) scripts and algorithms &lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also provides an overview for training and tuning&lt;br&gt;
capabilities, such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works-training.html"&gt; SageMaker training jobs &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/sagemaker/autopilot/"&gt; Autopilot &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning.html"&gt; Hyperparameter Optimization (HPO) &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-debugger.html"&gt; SageMaker Debugger &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/aws/amazon-sagemaker-experiments-organize-track-and-compare-your-machine-learning-trainings/"&gt; SageMaker Experiments &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ML phases on Sagemaker:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For data preparation &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For operations&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MdbEt16e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psoua09hmy0iscq0hoj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MdbEt16e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psoua09hmy0iscq0hoj3.png" alt="Image description" width="562" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For model training&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F1fFi3Te--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9nriq554u8m2d2v2h77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1fFi3Te--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9nriq554u8m2d2v2h77.png" alt="Image description" width="591" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-data-science-environments"&gt;
  &lt;/a&gt;
  2. Data Science Environments
&lt;/h3&gt;

&lt;p&gt;This chapter provides an overview of how to create managed data science environments to scale and create repeatable environments for your model-building activities using &lt;a href="https://www.perforce.com/blog/vcs/configuration-as-code#:~:text=Configuration%20as%20Code%20vs.&amp;amp;text=Configuration%20as%20code%20(referred%20to,about%20managing%20your%20IT%20infrastructure.&amp;amp;text=Configuration%20as%20code%20is%20about,components%20interact%20with%20each%20other."&gt; IaC or CaC &lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;It also provides an overview for Cloudformation importance and capabilities: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consistency&lt;/li&gt;
&lt;li&gt;Improved management&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reducing manual approvals  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reducing hand-offs in siloed teams &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Providing centralized governance &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By ensuring environments are provisioned across teams using only approved configurations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Service Catalog and its importance in such approach. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will get a brief overview of the machine learning (ML) use case. ML use case mentioned is prediction of a value for a particular type of air quality measurement (for example, pm25) given location (weather station) and date, that's can be treated using regression XGBoost model. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-data-labeling-with-amazon-sagemaker-ground-truth"&gt;
  &lt;/a&gt;
  3. Data Labeling with Amazon SageMaker Ground Truth
&lt;/h2&gt;

&lt;p&gt;This chapter provides an review of labeling data using SageMaker Ground Truth and its challenges, such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Challenges with labeling data at scale&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Addressing unique labeling requirements with custom labeling workflows&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using active learning to reduce labeling time&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security and permissions (&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-console.html"&gt; private workforces &lt;/a&gt; ) &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-data-preparation-at-scale-using-aws-sagemaker-data-wrangler-and-processing"&gt;
  &lt;/a&gt;
  4. Data Preparation at Scale Using AWS SageMaker Data Wrangler and Processing
&lt;/h3&gt;

&lt;p&gt;In this chapter, the following topics are covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual data preparation with Data Wrangler&lt;/li&gt;
&lt;li&gt;Bias detection and explainability with Data Wrangler&lt;/li&gt;
&lt;li&gt;Data preparation at scale with SageMaker Processing&lt;/li&gt;
&lt;li&gt;Difference between Data Wrangler and Spark(in EMR) according to dataset size. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt; My personal feedback &lt;/b&gt; on this chapter is that it needs more clarification and examples. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-centralized-feature-repository-with-aws-sagemaker-feature-store"&gt;
  &lt;/a&gt;
  5. Centralized Feature Repository with AWS SageMaker Feature Store
&lt;/h3&gt;

&lt;p&gt;This chapter, we are going to cover the following main topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basic concepts of SageMaker Feature Store.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating reusable features to reduce feature inconsistencies and inference latency.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Designing solutions for near real-time ML predictions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-training-and-tuning-at-scale"&gt;
  &lt;/a&gt;
  6. Training and Tuning at Scale
&lt;/h3&gt;

&lt;p&gt;This chapter covers the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ML training at scale with SageMaker distributed libraries.&lt;/li&gt;
&lt;li&gt;Difference between data parallelism and model parallelism. &lt;/li&gt;
&lt;li&gt;Some considerations to be taken before choosing between data &amp;amp; model parallelism. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wS-4UH1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ye9bo8gv71fbi0bwnbic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wS-4UH1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ye9bo8gv71fbi0bwnbic.png" alt="Image description" width="880" height="846"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automated model tuning with SageMaker hyperparameter tuning. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Organizing and tracking training jobs with SageMaker Experiments. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Best practices to consider while configuring hyperparameter jobs on Amazon SageMaker. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#7-profile-training-jobs-with-amazon-sagemaker-debugger"&gt;
  &lt;/a&gt;
  7. Profile Training Jobs with Amazon SageMaker Debugger
&lt;/h3&gt;

&lt;p&gt;This chapter covers the following main topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon SageMaker Debugger essentials&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Real-time monitoring of training jobs using built-in and custom rules&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gain insight into the training infrastructure and training framework by:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analyzing and visualizing the system and framework metrics generated by the profiler. &lt;/li&gt;
&lt;li&gt;Analyzing the profiler report generated by SageMaker Debugger.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#8-managing-models-at-scale-using-a-model-registry"&gt;
  &lt;/a&gt;
  8. Managing Models at Scale Using a Model Registry
&lt;/h3&gt;

&lt;p&gt;A model registry is a central repository for metadata related to a certain model version. It contains details about how the model was created, how it performed, and where and how it was deployed. &lt;/p&gt;

&lt;p&gt;Additional features, such as approval workflows and notifications, are frequently included in model registry services or solutions.&lt;/p&gt;

&lt;p&gt;This chapter covers the following topics: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using a model registry&lt;/li&gt;
&lt;li&gt;Choosing a model registry solution&lt;/li&gt;
&lt;li&gt;Managing models using the Amazon SageMaker model registry&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#9-updating-production-models-using-sagemaker-endpoint-production-variants"&gt;
  &lt;/a&gt;
  9. Updating Production Models Using SageMaker Endpoint Production Variants
&lt;/h3&gt;

&lt;p&gt;This chapter covers the following main topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basic concepts of Amazon SageMaker Endpoint Production Variants&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deployment strategies for updating ML models with Amazon SageMaker Endpoint Production Variants&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Selecting an appropriate deployment strategy&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#10-optimizing-model-hosting-and-inference-costs"&gt;
  &lt;/a&gt;
  10. Optimizing Model Hosting and Inference Costs
&lt;/h3&gt;

&lt;p&gt;This chapter covers the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Real-time inference versus batch inference&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deploying multiple models behind a single inference endpoint&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scaling inference endpoints to meet inference traffic demands&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using Elastic Inference for deep learning models&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimizing models with SageMaker Neo&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#11-monitoring-production-models-with-amazon-sagemaker-model-monitor-and-clarify"&gt;
  &lt;/a&gt;
  11. Monitoring Production Models with Amazon SageMaker Model Monitor and Clarify
&lt;/h3&gt;

&lt;p&gt;This chapter covers the following main topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basic concepts of Amazon SageMaker Model Monitor and Amazon&lt;br&gt;
SageMaker Clarify&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;End-to-end architectures for monitoring ML models&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Best practices for monitoring ML models&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#12-machine-learning-automated-workflows"&gt;
  &lt;/a&gt;
  12. Machine Learning Automated Workflows
&lt;/h3&gt;

&lt;p&gt;This chapter covers the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Considerations for automating your SageMaker ML workflows&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Building ML workflows with Amazon SageMaker Pipelines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating CI/CD ML pipelines using Amazon SageMaker projects&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#13-wellarchitected-machine-learning-with-amazon-sagemaker"&gt;
  &lt;/a&gt;
  13. Well-Architected Machine Learning with Amazon SageMaker
&lt;/h3&gt;

&lt;p&gt;This chapter covers the following main topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Best practices for operationalizing ML workloads&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Best practices for securing ML workloads&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Best practices for building reliable ML workloads&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Best practices for building performant ML workloads&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Best practices for building cost-optimized ML workloads&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#14-managing-sagemaker-features-across-accounts"&gt;
  &lt;/a&gt;
  14. Managing SageMaker Features across Accounts
&lt;/h3&gt;

&lt;p&gt;This chapter discusses the following topics as they relate to managing SageMaker features across multiple AWS accounts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Examining an overview of the AWS multi-account environment&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understanding the benefits of using multiple AWS accounts with Amazon SageMaker&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Examining multi-account considerations with Amazon SageMaker&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;I really enjoyed reading this article and my personal rate for it is 4.5 / 5, because it gives a very good overview for best practices for implementing ML on AWS Sagemaker. &lt;/p&gt;

&lt;p&gt;Happy reading :) &lt;/p&gt;

</description>
      <category>aws</category>
      <category>machinelearning</category>
      <category>books</category>
    </item>
    <item>
      <title>Project 2:JavaScript Clock</title>
      <author>prachigarg19</author>
      <pubDate>Fri, 03 Dec 2021 10:08:51 +0000</pubDate>
      <link>https://dev.to/prachigarg19/project-2javascript-clock-5a0c</link>
      <guid>https://dev.to/prachigarg19/project-2javascript-clock-5a0c</guid>
      <description>&lt;p&gt;Welcome to my "Build 30 Js Projects in 30 Days" Series .This is day 2 and project 2. If you haven't read the other articles in this series please check them out first. I'll list them at the end of this article.&lt;/p&gt;

&lt;p&gt;As mentioned in my previous article. This is the Day 2 challenge of &lt;a href="https://javascript30.com/"&gt;Wes Bos Javascript30 course&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the final result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--auOZRTdX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8l86vcfsj0o3v2bac4i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--auOZRTdX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8l86vcfsj0o3v2bac4i.png" alt="JS clock" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As always before starting download the starter files from &lt;a href="https://github.com/wesbos/JavaScript30/tree/master/02%20-%20JS%20and%20CSS%20Clock"&gt;here&lt;/a&gt;. I've made a separate article on how to download starter files, you can check it out &lt;a href="https://dev.to/prachigarg19/build-30-javascript-projects-in-30-daysday-0-2m8j"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#part-1html"&gt;
  &lt;/a&gt;
  &lt;em&gt;PART 1:HTML&lt;/em&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Clock&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class="container"&amp;gt;
    &amp;lt;div class="hand hour-hand" id="hour"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class="hand min-hand" id="min" &amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class="hand sec-hand" id="sec"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#part-2css"&gt;
  &lt;/a&gt;
  &lt;em&gt;PART 2:CSS&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Now we are going to style our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*{
    margin:0;
    padding:0;
}
body{
    background-color: rgb(33, 33, 36);
    display: flex;
    justify-content: center;
}
.container{
    border:20px solid white;
    border-radius: 50%;
    position: absolute;
    margin-top: 8rem;
    height:25vw;
    width: 25vw;
    transition: ease-in-out;

}
.hand{
    position: relative;
    top: 50%;
    width:47%;
    left:3%;
    height: 0.6rem;
    background-color: white;
    transform: rotate(90deg);
    transform-origin: 100%;

}
.hour-hand,.sec-hand,.min-hand {
   position: absolute;
}



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at the styling part for hand class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.hand{
    position: relative;
    top: 50%;
    width:47%;
    left:3%;
    height: 0.6rem;
    background-color: white;
    transform: rotate(90deg);
    transform-origin: 100%;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Position has been set to relative so that hands can be positioned with respect to container that is the clock boundary. Then we can easily set top and width accordingly to center the hands.&lt;br&gt;
Hand class will be a common class to all hour,min and sec hand. We have used transform(90deg) to start all the hands from 12o'clock (as div content is horizontal by default).&lt;/p&gt;

&lt;p&gt;Here transform:origin has been used as on applying transform, rotate hands will be rotated from center(by default) , hence we set origin to 100% to rotate it from the end.&lt;/p&gt;

&lt;p&gt;One issue that we will face is that our 3 hands will appear in block format as div is a block property by default.To solve this we will use position:absolute at individual hand classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.hour-hand,.sec-hand,.min-hand {
   position: absolute;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Refer to &lt;a href="https://stackoverflow.com/questions/1909648/stacking-divs-on-top-of-each-other"&gt;this&lt;/a&gt; for more details on stacking divs part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-3javascript"&gt;
  &lt;/a&gt;
  &lt;em&gt;PART 3:JAVASCRIPT&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Now we will make our project interactive.&lt;/p&gt;

&lt;p&gt;Here the idea is to change transform:rotate property for each hand class as per change in hours,min and sec and calling each function again and again every sec using setInterval() function.&lt;/p&gt;

&lt;p&gt;Let's look at the function for hour hand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function changeHour(){
    let hour=document.getElementById('hour');
    let hangle;
    if(date.getHours()&amp;lt;12)
    {   
        hangle=(date.getHours()*30);
    }
    else hangle=(date.getHours()-12)*30+90;
    hour.style.transform=`rotate(${hangle}deg)`;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we will take two cases. If our hour is less than 12 then we will simply multiply it by 30 deg as hour hand moves 30deg after every hour and we will add it to 90deg as initially our hand is at 90deg. If our hour is&amp;gt;=12 then we will subtract them by 12.&lt;br&gt;
Here's an example- If hour returned by getHours() is 1 (1am) then our hour-hand will be at 1*(360/12) degrees.&lt;br&gt;
If 13 is returned( 1pm) then (13-12)*(360/12) will give 30 degrees.&lt;/p&gt;

&lt;p&gt;Same logic goes for min and sec -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function changeMin(){
    date=new Date();
    let min=document.getElementById('min');
    let mangle=date.getMinutes()*6+90;  
    min.style.transform=`rotate(${mangle}deg)`;
}
function changeSec(){
    date=new Date();
    let sec=document.getElementById('sec');
    let sangle=date.getSeconds()*6;
    sangle+=90;   
    sec.style.transform=`rotate(${sangle}deg)`;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to call these function every second-&lt;br&gt;
Here we will use setInterval(function,time interval in milisecond),which will keep on calling function passed as parameter after time interval passed as second parameter until closeInterval() is closed,which we won't call since we want our function to keep on running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setInterval(changeSec,1000);
setInterval(changeMin,1000);
setInterval(changeHour,1000);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#previous-article-from-this-series"&gt;
  &lt;/a&gt;
  &lt;em&gt;&lt;u&gt;Previous article from this series:&lt;/u&gt;&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/prachigarg19/project-1-javascript-drumkit-3b06"&gt;Project 1 Day 1&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-learnt"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;u&gt;Things learnt:&lt;/u&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;1.Stacking divs&lt;br&gt;
2.transform-origin&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;u&gt;Source Code&lt;/u&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/prachigarg19/Javacript_beginner_projects/tree/main/js30"&gt;Feel free to suggest changes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;em&gt;&lt;u&gt;Conclusion&lt;/u&gt;&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;That's it for today's project.Next project will be on CSS variables.&lt;/p&gt;

&lt;p&gt;If you have any doubts or suggestions please do let me know in the comment section. I'll be more than happy to interact with you.&lt;/p&gt;

&lt;p&gt;If you like this series and want to be a part of it, do consider following me at &lt;a class="mentioned-user" href="https://dev.to/prachigarg19"&gt;@prachigarg19&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading. :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Day 54 of 100 Days of Code &amp; Scrum: Ghost on Heroku and Next.js on Vercel</title>
      <author>Rammina</author>
      <pubDate>Fri, 03 Dec 2021 09:58:56 +0000</pubDate>
      <link>https://dev.to/rammina/day-54-of-100-days-of-code-scrum-ghost-on-heroku-and-nextjs-on-vercel-2gj9</link>
      <guid>https://dev.to/rammina/day-54-of-100-days-of-code-scrum-ghost-on-heroku-and-nextjs-on-vercel-2gj9</guid>
      <description>&lt;p&gt;Greetings, everyone!&lt;/p&gt;

&lt;p&gt;Today, I started working on my Ghost blog setup. After consulting various resources online, I will most likely use a combination of Next.js frontend deployed on Vercel and Ghost headless CMS deployed on Heroku for my blog. It's a free solution that can scale even with significant traffic increase (I can just use CDN in the future). I'm pretty excited for it!&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I finally deployed my &lt;a href="https://www.rammina.com/"&gt;business website&lt;/a&gt;. I think it's satisfactory for now despite being simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;updated the contact form validation to require proper email format.&lt;/li&gt;
&lt;li&gt;added an input field that is visible to bots only, to help prevent spam.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ghost"&gt;
  &lt;/a&gt;
  Ghost
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;read a lot of the documentations for getting started.&lt;/li&gt;
&lt;li&gt;learned how to deploy an initial setup for a Ghost blog locally and on Heroku.&lt;/li&gt;
&lt;li&gt;learned about Jamstack for Next.js + Ghost blog setup.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I did some practice flashcards for Scrum.&lt;/li&gt;
&lt;li&gt;reviewed some of the things I've learned before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading and continuing to support me!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/deployment"&gt;Deployment | Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/pathway/scrum-master"&gt;Scrum Master learning pathway | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>4 ways to create modern GUI in python in the easiest way possible</title>
      <author>Yash Makan</author>
      <pubDate>Fri, 03 Dec 2021 09:37:20 +0000</pubDate>
      <link>https://dev.to/yash_makan/4-ways-to-create-modern-gui-in-python-in-easiest-way-possible-5e0e</link>
      <guid>https://dev.to/yash_makan/4-ways-to-create-modern-gui-in-python-in-easiest-way-possible-5e0e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hi developers, I am Yash Makan and today we are going to discuss how can you make beautiful UI applications in python. I know that this sounds a little weird when I say "beautiful UI" together in context with python as I personally feel that the standard Tkinter library is not good enough to develop amazing UI. Today we will cover 4 different ways to make modern applications in python so without any further ado let's begin,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--52xLUZel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/3BUYbmXltgQ4zu0Tv5/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--52xLUZel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/3BUYbmXltgQ4zu0Tv5/giphy.webp" alt="https://i.giphy.com/media/3BUYbmXltgQ4zu0Tv5/giphy.webp" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKunCO25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cj3guv1g8ku69j50la5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKunCO25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cj3guv1g8ku69j50la5v.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cj3guv1g8ku69j50la5v.png" width="416" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iLLekv5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a5f3tplukh7tucr5blm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iLLekv5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a5f3tplukh7tucr5blm.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a5f3tplukh7tucr5blm.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-using-eel"&gt;
  &lt;/a&gt;
  1. Using eel
&lt;/h2&gt;

&lt;p&gt;The first method in our list is for developers who know HTML &amp;amp; CSS(if you don't then I highly recommend it too) with the basics of javascript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h3&gt;

&lt;p&gt;Basically, you are going to develop the frontend using HTML and CSS and write your computation or backend part in python. nd eel act as a bridge between python and javascript and pass data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KntlxLX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2irr9ptvtvo4c1pslxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KntlxLX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2irr9ptvtvo4c1pslxv.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2irr9ptvtvo4c1pslxv.png" width="880" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install Eel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#directory-structure"&gt;
  &lt;/a&gt;
  Directory Structure
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;└── Folder
    ├── templates
    |   ├── index.html
    |   ├── main.js
    |   └── style.css
    └── main.py

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cat-mainpy"&gt;
  &lt;/a&gt;
  cat main.py
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;eel&lt;/span&gt;

&lt;span class="c1"&gt;# name of folder where the html, css, js, image files are located
&lt;/span&gt;&lt;span class="n"&gt;eel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'templates'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;eel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expose&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="c1"&gt;# 1000 is width of window and 600 is the height
&lt;/span&gt;&lt;span class="n"&gt;eel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cat-mainjs"&gt;
  &lt;/a&gt;
  cat main.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="nx"&gt;eel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// call the demo function which we have created in the main.py file&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cat-indexhtml"&gt;
  &lt;/a&gt;
  cat index.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;sample&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/eel.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/scrip&lt;/span&gt;&lt;span class="err"&gt;t
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--
have to call compute() from here for example when user clicks any button or something like that.
--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#github-reference"&gt;
  &lt;/a&gt;
  Github Reference
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;https://github.com/ChrisKnott/Eel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-figma-and-python"&gt;
  &lt;/a&gt;
  2. Figma and Python
&lt;/h2&gt;

&lt;p&gt;Alright, you must be thinking that what is the combination between Figma and python? and Figma is a UI development tool, not a library written in python... Yeah! I know you are right, but let's keep reading the post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install tkdesigner
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;The only thing the user needs to do is design an interface with Figma, and then paste the Figma file URL and API token into Tkinter Designer. Tkinter Designer will automatically generate all the code and images required to create the GUI in Tkinter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cnhjcCuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/42001064/119832620-fb88c980-bf1b-11eb-8e9b-4affe7b92ba2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cnhjcCuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/42001064/119832620-fb88c980-bf1b-11eb-8e9b-4affe7b92ba2.jpg" alt="https://user-images.githubusercontent.com/42001064/119832620-fb88c980-bf1b-11eb-8e9b-4affe7b92ba2.jpg" width="750" height="1686"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;For complete procedure do watch [this](https://www.youtube.com/watch?v=mFjE2-rbpm8&amp;amp;t=66s&amp;amp;ab_channel=Parthjadhav) video on youtube from Parth Jadhav
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#github-reference"&gt;
  &lt;/a&gt;
  Github Reference
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://github.com/ParthJadhav/Tkinter-Designer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-pywebview"&gt;
  &lt;/a&gt;
  3. Pywebview
&lt;/h2&gt;

&lt;p&gt;pywebview is a lightweight cross-platform wrapper around a webview component that allows displaying HTML content in its own native GUI window. pywebview is created by &lt;a href="https://github.com/r0x0r/"&gt;Roman Sirokov&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install pywebview
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import webview

if __name__ == '__main__':
    window = webview.create_window('Load HTML Example', 'index.html')
    webview.start(window)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#github-reference"&gt;
  &lt;/a&gt;
  Github Reference
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://github.com/r0x0r/pywebview/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-pyqt5"&gt;
  &lt;/a&gt;
  4. PyQT5
&lt;/h2&gt;

&lt;p&gt;PyQt is a great library to develop modern flat GUI in python. You can create applications with coding in python which can be a little difficult and overwhelming but as we are covering the easiest way possible you can even make GUI with a drag-drop builder known as PyQt5Designer. It is a great way to build applications by generating a .ui file which is the drag-drop program and then later you can convert this .ui file to a .py file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install PyQt5Designer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;p&gt;After installation designer will be installed in your system. Simply type &lt;code&gt;designer&lt;/code&gt; in your command prompt and designer.exe will pop up. It will look something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sa5TbJCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s76hssmdz999arj3e72w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sa5TbJCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s76hssmdz999arj3e72w.png" alt="PyQT5Designer" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now here you can drag-drop elements in the canvas. After designing your application simply export it as a .ui file. Later you can convert this .ui file in .py file using,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pyuic5 -x [NAME_OF_UI_FILE].ui [NAME_OF_PY_FILE].py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So you see, here are the 4 easy ways to make impressive-looking GUI in python. I hope you liked my blog and if this article adds any value then it would be great if you leave a like and make sure to bookmark it as well. Also, share the post with your friends so that they too can learn something new(don't be selfish...). Also, you can follow me on &lt;a href="https://twitter.com/Yash_Makan"&gt;Twitter&lt;/a&gt; for more tech and python related content. Hope to be in your mind again, till then b-bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ldo5yJZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--H3ignATo--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://media4.giphy.com/media/w89ak63KNl0nJl80ig/giphy.gif%253Fcid%253Decf05e478g5vv310sx1w5035xnuj17tgxbdtlcpcvas5fsoj%2526rid%253Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ldo5yJZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--H3ignATo--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://media4.giphy.com/media/w89ak63KNl0nJl80ig/giphy.gif%253Fcid%253Decf05e478g5vv310sx1w5035xnuj17tgxbdtlcpcvas5fsoj%2526rid%253Dgiphy.gif" alt="Bye Bye" width="480" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-articles"&gt;
  &lt;/a&gt;
  Other Articles
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/4-best-python-web-app-hosting-services-for-freewith-complete-process-57nb"&gt;4 Free hosting platforms for python web app with step-by-step process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/18-python-one-liners-that-will-speed-up-your-coding-process-21md"&gt;18 Python one-liners that will speed up your coding process.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/ai-bot-that-could-answer-any-questions-asked-gmn"&gt;AI bot that could answer your questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/generate-your-own-favourite-tv-episode-using-python-1pb3"&gt;Generate your own favourite TV episode using python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#socials"&gt;
  &lt;/a&gt;
  Socials
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.yashmakan.co.in/"&gt;My Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Yash_Makan"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.yashmakan.co.in/banner"&gt;Banner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>design</category>
      <category>beginners</category>
      <category>figma</category>
    </item>
    <item>
      <title>Thank you, Apple, for hijacking port 5000 😣</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 03 Dec 2021 09:23:50 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/thank-you-apple-for-hijacking-port-5000-nm</link>
      <guid>https://dev.to/dailydevtips1/thank-you-apple-for-hijacking-port-5000-nm</guid>
      <description>&lt;p&gt;You might have already upgraded to Mac OS Monterey. If not, there might be an unpleasant surprise awaiting you.&lt;/p&gt;

&lt;p&gt;For me, it was running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And getting a message stating port 5000 is already in use...&lt;/p&gt;

&lt;p&gt;It took me a good couple of minutes to find out no other application was using this port, and I was baffled at this point.&lt;/p&gt;

&lt;p&gt;Surely all I did was upgrade to Monterey...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reopening-port-5000-on-mac-os-monterey"&gt;
  &lt;/a&gt;
  Re-opening port 5000 on Mac OS Monterey
&lt;/h2&gt;

&lt;p&gt;After doing some research, I did a portscan and noticed "AirPlay Receiver" was using this port.&lt;/p&gt;

&lt;p&gt;That didn't sound like anything I made.&lt;br&gt;
Did some more research to find out that the AirPlay receiver is on by default.&lt;/p&gt;

&lt;p&gt;To re-enable port 5000, you can simply turn off this checkbox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fimsbWqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637558048297/YHaewxiZ2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fimsbWqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637558048297/YHaewxiZ2.png" alt="AirPlay Receiver in macOS Monterey listening on port 5000" width="880" height="740"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find this checkbox in &lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Sharing&lt;/code&gt; &amp;gt; &lt;code&gt;AirPlay Receiver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is not a new thing though, Apple has been using port 5000 for AirPlay since 2004.&lt;br&gt;
The only new part is the introduction to having a Mac listening to AirPlay, which, as mentioned, uses port 5000.&lt;/p&gt;

&lt;p&gt;If you wish to use AirPlay on your Mac, I'd suggest switching your development to a different port.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>We open-sourced our Node.js API Generator</title>
      <author>DhiWise</author>
      <pubDate>Fri, 03 Dec 2021 09:06:31 +0000</pubDate>
      <link>https://dev.to/dhiwise/we-open-sourced-our-nodejs-api-generator-5b1f</link>
      <guid>https://dev.to/dhiwise/we-open-sourced-our-nodejs-api-generator-5b1f</guid>
      <description>&lt;p&gt;Last week we open-sourced our entire Node.js API generator along with the front-end React app that helps to build it. Check our &lt;a href="https://github.com/dhiwise/dhiwise-nodejs/"&gt;Repository here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vPC6Inqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AJoazw5NqPtHRCbr4Nif7fA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPC6Inqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AJoazw5NqPtHRCbr4Nif7fA.jpeg" alt="" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is going to tell you about who we are, what is Node.js API Generator &amp;amp; its features, why we open-sourced it, and how we have made this project open for external contributions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-are-we"&gt;
  &lt;/a&gt;
  Who are we?
&lt;/h2&gt;

&lt;p&gt;At &lt;a href="https://hubs.la/H0_-wmC0"&gt;DhiWise&lt;/a&gt;, our mission is to build the most intelligent programming platform in the world. We &lt;strong&gt;automate the developer’s repetitive tasks&lt;/strong&gt; so that they can focus on what matters the most.&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://hubs.la/H0_-wmC0"&gt;DhiWise&lt;/a&gt;, developers can fully go on to an autopilot mode, where one can take a nap or walk while &lt;a href="https://hubs.la/Q0102mTP0"&gt;DhiWise &lt;/a&gt;generates production-ready code for you. Yeah, just like Tesla.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--winjNr66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AdvX7PFawX1jyGmeWEK-zxw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--winjNr66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AdvX7PFawX1jyGmeWEK-zxw.gif" alt="" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-basically-is-the-nodejs-api-generator"&gt;
  &lt;/a&gt;
  So what basically is the Node.js API Generator?
&lt;/h2&gt;

&lt;p&gt;Imagine you want to bake a cake and you have all the raw materials you need such as flour, baking powder, eggs. Now, you give us those materials and we will bake you the ready-to-serve cake of your choice.&lt;/p&gt;

&lt;p&gt;With this builder’s context, with just minimal inputs like models, attributes, ORM type, platforms, routes, role access, authentication, this builder is going to build backend CRUD APIs along with other essential features to boost developers’ productivity time by twofold.&lt;/p&gt;

&lt;p&gt;Most importantly, the Node.js API generator gives developers clean, scalable, human-readable code with complete ownership. The code it generates is bug-free and easily customizable, not to forget in one of the two different architectures of your choice. (Clean code &amp;amp; MVC)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;User Authentication&lt;/strong&gt; and Authorization (using Passport)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Social Login&lt;/strong&gt; APIs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CRUD APIs with middleware and attributes’ selection&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List API with &lt;strong&gt;pagination, populate, and queries&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Upload attachment API&lt;/strong&gt; with validation and &lt;strong&gt;storage options&lt;/strong&gt; like (Local server or S3 public/private bucket)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Role-Permission&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hooks and Indexes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Policy/middleware&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API &lt;strong&gt;request body validation&lt;/strong&gt; (Using joi)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API response with standard &lt;strong&gt;error and message pattern&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test cases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Postman collection and API documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Constants&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Environment Variables for development, QA, and production&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom API setup&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Multiple Platform selection&lt;/strong&gt; and User type configuration&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MVC and Clean-code architecture&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supported Databases&lt;br&gt;
a. MongoDB&lt;br&gt;
b. SQL Server&lt;br&gt;
c. MYSQL&lt;br&gt;
d. PostgreSQL&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-did-we-opensource-it"&gt;
  &lt;/a&gt;
  Why did we open-source it?
&lt;/h2&gt;

&lt;p&gt;Our main focus is to empower the developer community to be more productive and try to automate their repetitive tasks so that in their remaining time they can add any new features or fix any bugs in this repository to make it available to their entire community.&lt;/p&gt;

&lt;p&gt;It may sound cheesy but by open-sourcing the platform we intend to have open communication with DhiWise community in order to build something epic.&lt;/p&gt;

&lt;p&gt;Also, we wouldn’t want to stop users who are trying to self-host the API builder and want to check how easy &amp;amp; productive it is to generate project and production-ready source code at their demand. Don’t forget to tag us on Twitter (@&lt;a href="https://twitter.com/dhiwise"&gt;dhiwise&lt;/a&gt;) when you get the AHA moment after checking the end result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-is-just-the-beginning"&gt;
  &lt;/a&gt;
  This is just the beginning!
&lt;/h2&gt;

&lt;p&gt;It took a long time and a lot of work to get here, though this is just ONE OF THE FEW builders we have offered to the community for now.&lt;br&gt;
Figuring out how to open-source this project has been a fun challenge, but I think the best is yet to come. Working in the open is the most fun way to build software, and I can’t wait to see how this project evolves as we invite contributors from around the world to help shape its future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-were-calling-on-you-to-take-what-weve-created-and-build-on-it"&gt;
  &lt;/a&gt;
  Now, we’re calling on you to take what we’ve created and build on it!
&lt;/h2&gt;

&lt;p&gt;Please let us know what you are creating with what we have started. We can’t wait to push the developer’s community to be more productive together to become the best it can be!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By Ravi Sojitra 
(Tech Lead | DhiWise)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to use Margin in CSS?</title>
      <author>dev-ashishsethi</author>
      <pubDate>Fri, 03 Dec 2021 08:41:21 +0000</pubDate>
      <link>https://dev.to/devashishsethi/how-to-use-margin-in-css-501i</link>
      <guid>https://dev.to/devashishsethi/how-to-use-margin-in-css-501i</guid>
      <description>&lt;p&gt;According to box model in CSS margin is the outer most edge of any element, it can be set on all the four sides of the element. It can be written in shorthand or assigning different values to individual margin properties for example, margin-top:10px, margin-right:20px, margin-left:2px, margin-bottom:8px.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-margin-in-shorthand"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;u&gt;Writing margin in shorthand&lt;/u&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;For writing margin in shorthand there are some things to learn first, let me tell what those are.&lt;/p&gt;

&lt;p&gt;In shorthand you can specify only &lt;strong&gt;one value&lt;/strong&gt; or &lt;strong&gt;two values&lt;/strong&gt; or &lt;strong&gt;three values&lt;/strong&gt; or &lt;strong&gt;four values&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-value"&gt;
  &lt;/a&gt;
  One Value
&lt;/h2&gt;

&lt;p&gt;example-&amp;gt; margin: 2rem;&lt;br&gt;
 It applies same measurement(2rem here) to all the four sides.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-values"&gt;
  &lt;/a&gt;
  Two Values
&lt;/h2&gt;

&lt;p&gt;example-&amp;gt; margin: 2rem 4rem&lt;br&gt;
 First value gets applied to top and bottom and second value gets &lt;br&gt;
 applied to left and right of element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-values"&gt;
  &lt;/a&gt;
  Three Values
&lt;/h2&gt;

&lt;p&gt;example-&amp;gt; margin: 2rem 4rem 1rem;&lt;br&gt;
 First value applies to top, second value applies to right and &lt;br&gt;
 left and third value applies to bottom.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#four-values"&gt;
  &lt;/a&gt;
  Four Values
&lt;/h2&gt;

&lt;p&gt;example-&amp;gt; margin: 2rem 4rem 3rem 1rem;&lt;br&gt;
 First value gets assigned to top, second values is assigned to &lt;br&gt;
 right, third values gets assigned to bottom and fourth value gets &lt;br&gt;
 assigned to left.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Create HTML, CSS &amp; Javascript Folder 📁 Structure </title>
      <author>Pratik</author>
      <pubDate>Fri, 03 Dec 2021 08:13:26 +0000</pubDate>
      <link>https://dev.to/pratikdhame/create-html-css-javascript-folder-structure-4m5p</link>
      <guid>https://dev.to/pratikdhame/create-html-css-javascript-folder-structure-4m5p</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. You need to have node.js installed in your computer&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGkfXwA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcRaz4IN0nOGPud9MV0QlkWdO_RXtnyIfh77hg%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGkfXwA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcRaz4IN0nOGPud9MV0QlkWdO_RXtnyIfh77hg%26usqp%3DCAU" alt="node.js" width="739" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.&lt;em&gt;Download the Windows installer from Nodejs.org.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;em&gt;Run the installer (the . msi file you downloaded in the previous step.)&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;3.&lt;em&gt;Follow the prompts in the installer (Accept the license agreement, click the NEXT button a bunch of times and accept the default installation settings).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;em&gt;Restart your computer.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Open Terminal&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ptOoYhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/7/78/Appleterminal2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ptOoYhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/7/78/Appleterminal2.png" alt="Terminal" width="880" height="617"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Open Terminal wherever you want to create project&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Write Command &lt;code&gt;npx touch-5&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Final Output&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QjGTUPT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcQuTwTkLgQs7xOKdMy9k4KW5QLP-TVYpMqpaA%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QjGTUPT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcQuTwTkLgQs7xOKdMy9k4KW5QLP-TVYpMqpaA%26usqp%3DCAU" alt="CSS and JavaScript Files linked to HTML" width="640" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can see Folder 📁 and Files linked together&lt;/li&gt;
&lt;li&gt;HTML boiler-plate code in HTML file&lt;/li&gt;
&lt;li&gt;You can see css and javascript files linked to the html file&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
