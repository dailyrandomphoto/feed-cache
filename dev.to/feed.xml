<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How they made controls at Github? Popup</title>
      <author>Kiran Mantha</author>
      <pubDate>Wed, 12 Jan 2022 13:13:43 +0000</pubDate>
      <link>https://dev.to/kiranmantha/how-they-made-controls-at-github-popup-2omi</link>
      <guid>https://dev.to/kiranmantha/how-they-made-controls-at-github-popup-2omi</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Episode1: &lt;a href="https://dev.to/kiranmantha/how-they-made-controls-at-github-1h18"&gt;Dropdown&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode2: &lt;a href="https://dev.to/kiranmantha/how-they-made-controls-at-github-modal-dialog-2pgi"&gt;Modal dialog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode3: &lt;a href="https://dev.to/kiranmantha/how-they-made-controls-at-github-hamburger-menu-20k"&gt;Hamburger menu&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Episode4: &lt;strong&gt;Popup&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;In last episode we gone through creation of hamburger menu with details and summary tags.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now"&gt;
  &lt;/a&gt;
  Now
&lt;/h2&gt;

&lt;p&gt;This is the last episode of this series which walks through creation of popups using these wonderful tags.&lt;/p&gt;

&lt;p&gt;Asusual let's start with same boring repeatitive html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;details&lt;/span&gt; &lt;span class="na"&gt;aria-haspopup=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        I'm a popcorn
    &lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;You are awesome!!&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ahhhh popcornnn it's movie time...😃 wait that's a stupid accordion...😬&lt;/p&gt;

&lt;p&gt;ok ok i saw your frustation.. take a drink&lt;/p&gt;

&lt;p&gt;you know what, we don't have to start from scratch for this. Popup is same as that of dropdown which we designed in &lt;a href="https://dev.to/kiranmantha/how-they-made-controls-at-github-1h18"&gt;1st episode&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The difference is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Popup can contain any type of content whereas a dropdown contain a list of options.&lt;/li&gt;
&lt;li&gt;It is an in-line element unlike dropdown which is a block element.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;so we can reuse dropdown styles(&lt;em&gt;well we don't need most of them&lt;/em&gt;) which looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;--spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;aria-haspopup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;summary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;open&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;summary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There it is. The basic structure is done. Click anywhere on the page, the accordion will close. Now lets add simple styles to container &lt;code&gt;div&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;summary&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome!! right?? click on &lt;code&gt;summary&lt;/code&gt; tag, it will open a small popup saying &lt;strong&gt;&lt;em&gt;You are awesome&lt;/em&gt;&lt;/strong&gt; yes i mean it. you really are!!&lt;/p&gt;

&lt;p&gt;By applying &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; or &lt;code&gt;bottom&lt;/code&gt; css to &lt;code&gt;div&lt;/code&gt; tag, you can position the popup in any direction.&lt;/p&gt;

&lt;p&gt;And that's it. There's your Popcorn.. ohh i mean Popup 😄&lt;/p&gt;

&lt;p&gt;Thanks for your time and &lt;a href="https://stackblitz.com/edit/details-summary-tag-based-controls?file=index.html"&gt;here&lt;/a&gt; is the working example.&lt;/p&gt;

&lt;p&gt;See you again ✌️,&lt;br&gt;
Kiran 👋&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>github</category>
    </item>
    <item>
      <title>Make your first Crypto with ThirdWeb 🤯</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Wed, 12 Jan 2022 12:36:30 +0000</pubDate>
      <link>https://dev.to/avneesh0612/make-your-first-crypto-with-thirdweb-2fj8</link>
      <guid>https://dev.to/avneesh0612/make-your-first-crypto-with-thirdweb-2fj8</guid>
      <description>&lt;p&gt;Have you ever wondered how amazing it would be to create your crypto? So, in this article let's build our very first crypto!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Create a new folder-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; mkdir thirdweb-crypto
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initialize Node.js-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change type to &lt;code&gt;module&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;we are going to use modular imports so change the type to &lt;code&gt;module&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"type": "module",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the packages needed-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @3rdweb/sdk dotenv ethers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initiazling-3rdweb"&gt;
  &lt;/a&gt;
  Initiazling 3rdweb
&lt;/h2&gt;

&lt;p&gt;To keep stuff clean, create a new folder &lt;code&gt;scripts&lt;/code&gt;. Inside of it create a file a file &lt;code&gt;initialize-sdk.js&lt;/code&gt;. Now, paste in the following-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { ThirdwebSDK } from "@3rdweb/sdk";
import ethers from "ethers";

import dotenv from "dotenv";
dotenv.config();

if (!process.env.PRIVATE_KEY || process.env.PRIVATE_KEY == "") {
  console.log("🛑 Private key not found.");
}

if (!process.env.ALCHEMY_API_URL || process.env.ALCHEMY_API_URL == "") {
  console.log("🛑 Alchemy API URL not found.");
}

if (!process.env.WALLET_ADDRESS || process.env.WALLET_ADDRESS == "") {
  console.log("🛑 Wallet Address not found.");
}

const sdk = new ThirdwebSDK(
  new ethers.Wallet(
    process.env.PRIVATE_KEY,
    ethers.getDefaultProvider(process.env.ALCHEMY_API_URL)
  )
);

(async () =&amp;gt; {
  try {
    const apps = await sdk.getApps();
    console.log("Your app address is:", apps[0].address);
  } catch (err) {
    console.error("Failed to get apps from the sdk", err);
    process.exit(1);
  }
})();

export default sdk;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to initialize 3rdweb for us but first, we need some keys. So, create a new file &lt;code&gt;.env&lt;/code&gt; in the root of your folder and add these three variables-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WALLET_ADDRESS=&amp;lt;3rdweb_project_address&amp;gt;
ALCHEMY_API_URL=&amp;lt;alchemy_api_key&amp;gt;
PRIVATE_KEY=&amp;lt;wallet_private_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-a-3rdweb-project"&gt;
  &lt;/a&gt;
  Creating a 3rdweb project
&lt;/h3&gt;

&lt;p&gt;Go to  &lt;a href="https://thirdweb.com/"&gt;Thirdweb&lt;/a&gt; sign up/in then, create a new project. I am going to use Rinkeby for this demo. Give a name to your project and you can also add a description if you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xiQ-LHR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641983754661/iFAG14OuU4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xiQ-LHR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641983754661/iFAG14OuU4.png" alt="image.png" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the address that you get and replace it as the value of &lt;code&gt;WALLET_ADDRESS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bAXgsLqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641984766639/qRsZEzp1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bAXgsLqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641984766639/qRsZEzp1l.png" alt="image.png" width="463" height="154"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-alchemy-project"&gt;
  &lt;/a&gt;
  Creating an alchemy project
&lt;/h3&gt;

&lt;p&gt;Go to  &lt;a href="https://alchemyapi.io/"&gt;alchemy&lt;/a&gt; after signing in, create a new project on the same chain and network as you did on thirdweb.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLFY6Vpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641984259639/7p-ar-Isl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLFY6Vpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641984259639/7p-ar-Isl.png" alt="image.png" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the view key button and copy the HTTP one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eKoQjuz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641985336824/Fpy2kRSm0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eKoQjuz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641985336824/Fpy2kRSm0.png" alt="image.png" width="880" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the API key that we need from alchemy so paste it in the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-the-private-key"&gt;
  &lt;/a&gt;
  Getting the Private Key
&lt;/h3&gt;

&lt;p&gt;In your metamask wallet, click on account details&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQgaY11o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641985709370/q0ORYddS8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQgaY11o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641985709370/q0ORYddS8.png" alt="image.png" width="449" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the export private key button, enter the password and copy the key that you get. This is your &lt;code&gt;PRIVATE_KEY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's now run the initializing script-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node scripts/initialize-sdk.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will now see your app address-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlzxLoIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641986218189/E-WpBbIJD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlzxLoIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641986218189/E-WpBbIJD.png" alt="image.png" width="880" height="147"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-and-deploying-our-crypto"&gt;
  &lt;/a&gt;
  Creating and deploying our crypto
&lt;/h2&gt;

&lt;p&gt;Create a new file &lt;code&gt;deploy-token.js&lt;/code&gt; and paste in the following-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import sdk from "./initialize-sdk.js";

const app = sdk.getAppModule("YOUR_APP_ADDRESS");

(async () =&amp;gt; {
  try {
    const tokenModule = await app.deployTokenModule({
      name: "My Token",
      symbol: "TOKEN",
    });
    console.log(
      "✅ Successfully deployed token module, address:",
      tokenModule.address
    );
  } catch (error) {
    console.error("failed to deploy token module", error);
  }
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to replace the app address with the address that came in the console. You also need to change the name and symbol of the token to what you want it to be called. Let's now run it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node scripts/deploy-token.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works and the token has been deployed 🥳&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t-xDlQQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988251933/cS1Or4sUP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t-xDlQQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988251933/cS1Or4sUP.png" alt="image.png" width="880" height="102"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also view the contract on  &lt;a href="https://rinkeby.etherscan.io/"&gt;Etherscan&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aTTLNz4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988321364/9nju9LAo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aTTLNz4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988321364/9nju9LAo8.png" alt="image.png" width="880" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#import-the-token-to-your-metamask-wallet"&gt;
  &lt;/a&gt;
  Import the token to your metamask wallet
&lt;/h2&gt;

&lt;p&gt;We can also see how many tokens we have through the metamask wallet, so open Metamask scroll below and you will see a button "Import tokens".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4eDw4kh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988462000/-PlYIVzMO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4eDw4kh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988462000/-PlYIVzMO.png" alt="image.png" width="447" height="142"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste in the address of your token and click &lt;strong&gt;add&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92Srqb2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988496990/KPFJzu_FG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92Srqb2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988496990/KPFJzu_FG.png" alt="image.png" width="447" height="754"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will now see our token here 🎉. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8NFGNUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988567376/6jMQO-afG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N8NFGNUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641988567376/6jMQO-afG.png" alt="image.png" width="447" height="754"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it is 0 in quantity so let's mint some tokens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minting-tokens"&gt;
  &lt;/a&gt;
  Minting tokens
&lt;/h2&gt;

&lt;p&gt;Create a new file &lt;code&gt;mint-token.js&lt;/code&gt; and add the following-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { ethers } from "ethers";
import sdk from "./initialize-sdk.js";

const tokenModule = sdk.getTokenModule("YOUR_TOKEN_ADDRESS");

(async () =&amp;gt; {
  try {
    const amount = 1_000_000;
    const amountWith18Decimals = ethers.utils.parseUnits(amount.toString(), 18);
    await tokenModule.mint(amountWith18Decimals);
    const totalSupply = await tokenModule.totalSupply();

    console.log(
      "✅ There now is",
      ethers.utils.formatUnits(totalSupply, 18),
      "$TOKEN in circulation"
    );
  } catch (error) {
    console.error("Failed to mint tokens", error);
  }
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace &lt;code&gt;YOUR_TOKEN_ADDRESS&lt;/code&gt; with the address you got. You can also change the number of tokens to be minted. Currently, it will mint 1,000,000 tokens.&lt;/p&gt;

&lt;p&gt;Run the script-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node scripts/mint-token.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We successfully minted the tokens! 🥳&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSkZeUua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641989192684/gg9oPg9xv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSkZeUua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641989192684/gg9oPg9xv.png" alt="image.png" width="880" height="93"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In metamask also it shows the tokens!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o_7Wpck1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641989215876/D8gN8Nm59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o_7Wpck1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641989215876/D8gN8Nm59.png" alt="image.png" width="448" height="113"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also send these tokens to your friends or anyone you like :D&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;@&lt;a href="https://dev.to@thirdweb"&gt;thirdweb&lt;/a&gt; is a great way to build web3 stuff, hope you found this article useful and made your first crypto. See ya in the next one ✌️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/avneesh0612/thirdweb-crypto"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://thirdweb.com/"&gt;ThirdWeb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://links.avneesh.tech/"&gt;Let's connect&lt;/a&gt;&lt;/p&gt;

</description>
      <category>web3</category>
      <category>thirdweb</category>
      <category>crypto</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>Top Golang Use Cases 2022</title>
      <author>Bacancy</author>
      <pubDate>Wed, 12 Jan 2022 12:30:54 +0000</pubDate>
      <link>https://dev.to/bacancy/top-golang-use-cases-2o22-3kb0</link>
      <guid>https://dev.to/bacancy/top-golang-use-cases-2o22-3kb0</guid>
      <description>&lt;p&gt;Companies that want to increase their business productivity used Goland. Golang helps companies to modernization, maintain higher efficiency with code, and develop faster mobile apps.&lt;/p&gt;

&lt;p&gt;Today, we come up with the article of varied domains that have benefitted from the Go programming language. Let’s have quick look at these &lt;strong&gt;Golang use cases&lt;/strong&gt; now. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-golang"&gt;
  &lt;/a&gt;
  Why use Golang?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. Created For Multi-core Processing&lt;/li&gt;
&lt;li&gt;2. Build For Large Projects&lt;/li&gt;
&lt;li&gt;3. Easy Learning Curve&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#best-golang-use-cases-industrywise"&gt;
  &lt;/a&gt;
  Best Golang Use Cases (Industry-wise)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Golang in eCommerce&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alibaba is one of the best eCommerce Go projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Golang in Online Booking Systems&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uber: The Golang project that broke all records!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Golang in Fintech&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Capital One: Go application in the Fintech&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Golang in Payments Processing Systems&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Paypal: Golang excellence in Payment Processing Systems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Golang in Technology Platforms&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DropBox- Go project for Tech&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Golang in Instant Communication Platforms&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stream: Golang’s power in Chat Apps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Golang in Cyber Security&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1Password uses Golang&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason why we talk about &lt;em&gt;Golang uses cases&lt;/em&gt; is because we can feel the bright future in the long run. If you want to know more and like to read in detail about these &lt;a href="https://www.bacancytechnology.com/blog/golang-use-cases"&gt;Golang uses cases&lt;/a&gt;, read our article now. &lt;/p&gt;

</description>
      <category>go</category>
      <category>cases</category>
    </item>
    <item>
      <title>The Pomodoro Technique: Productivity hacks</title>
      <author>saransh kataria</author>
      <pubDate>Wed, 12 Jan 2022 12:22:49 +0000</pubDate>
      <link>https://dev.to/saranshk/the-pomodoro-technique-productivity-hacks-3222</link>
      <guid>https://dev.to/saranshk/the-pomodoro-technique-productivity-hacks-3222</guid>
      <description>&lt;p&gt;The irony of time management productivity tips is that the people who need them the most do not realize that they do. There are too many productivity tips out there but the Pomodoro technique is probably the most discussed and used one. The reason for its popularity is that it is easy to understand and implement.&lt;/p&gt;

&lt;p&gt;The intent of the technique is to alternate pomodoros with short breaks in between. By pomodoros, we do not mean tomatoes (Pomodoro means tomato in Italian). A Pomodoro is a focused work session.&lt;/p&gt;

&lt;p&gt;The idea is to have short breaks in between sessions to promote sustained concentration and avoid mental fatigue. It also helps avoid distractions from derailing the day since everything has a time and place in this technique.&lt;/p&gt;

&lt;p&gt;This gamified goal-setting has helped me optimize my productivity and get things done.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-pomodoro-technique"&gt;
  &lt;/a&gt;
  What is the Pomodoro Technique?
&lt;/h1&gt;

&lt;p&gt;Pomodoro is a cyclical system. All that is needed to implement is a timer. No other special apps or tools are required. (There are a ton of apps if one wants to explore them, but the basic concept is simple). Here are the basics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the task&lt;/li&gt;
&lt;li&gt;Set a timer for 25 minutes&lt;/li&gt;
&lt;li&gt;Execute the task until the Pomodoro timer rings&lt;/li&gt;
&lt;li&gt;Take a short break of 5 minutes&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;li&gt;Take longer breaks of 15-30 minutes after 4 Pomodoros&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have changed my Pomodoro duration to 50 minutes and shorter breaks to 10 minutes, and I find that that works better for me.&lt;/p&gt;

&lt;p&gt;A few other things that help are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before beginning, break down tasks in terms of Pomodoros. This also helps in estimations and also track progress clearly.&lt;/li&gt;
&lt;li&gt;Group smaller tasks in a Pomodoro.&lt;/li&gt;
&lt;li&gt;A Pomodoro is an indivisible unit of work. It should not be broken for checking incoming messages, emails etc. Anything that comes in between should be postponed until the Pomodoro is complete.&lt;/li&gt;
&lt;li&gt;There can be unavoidable distractions, and Cirilo, the creator recommends that they should be tracked. And we should then reflect on how to avoid them in our next session. In case you decide to not postpone the distraction, end the Pomodoro there and start a new one later.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-makes-the-technique-effective"&gt;
  &lt;/a&gt;
  What makes the technique effective?
&lt;/h1&gt;

&lt;p&gt;The system has been intentionally kept simple to keep our mind in the zone to finish tasks.&lt;/p&gt;

&lt;p&gt;Breaking down into smaller tasks and tackling them one at a time helps avoid procrastination and negative feelings. It becomes easy to get started and not worry about the outcome. We tend to focus on things one Pomodoro at a time.&lt;/p&gt;

&lt;p&gt;The Pomodoro technique also helps combat distractions by limiting our flow state to a Pomodoro and then dealing with the distractions outside of it. We also tend to become more aware of where our time goes because we are tracking progress in terms of Pomodoros and distractions outside Pomodoros.&lt;/p&gt;

&lt;p&gt;The biggest reason it works is that we end up gamifying our productivity and tricking our minds to focus on consistency rather than perfection.&lt;/p&gt;

&lt;p&gt;I also tend to get away from my screen during my breaks, take a walk, move around or just stretch and grab a snack.&lt;/p&gt;

&lt;p&gt;I use the Chrome extension to track my Pomodoros though a simple timer works too. But the extension gives me analytics on my Pomodoros and makes it easier for me to stick to the Pomodoro technique.&lt;/p&gt;

&lt;p&gt;And that is all there is to know about the Pomodoro technique. If you choose to implement it in your schedule, do let us know how it goes!&lt;/p&gt;

&lt;p&gt;Originally published at (&lt;a href="https://www.wisdomgeek.com)%5Bhttps://www.wisdomgeek.com/self-help/productivity/the-pomodoro-technique-productivity-hacks/%5D"&gt;https://www.wisdomgeek.com)[https://www.wisdomgeek.com/self-help/productivity/the-pomodoro-technique-productivity-hacks/]&lt;/a&gt; on July 21, 2021.&lt;/p&gt;

</description>
      <category>productivity</category>
    </item>
    <item>
      <title>Which VS Code shortcut do you use the most?</title>
      <author>Adam Davis</author>
      <pubDate>Wed, 12 Jan 2022 12:17:48 +0000</pubDate>
      <link>https://dev.to/brewinstallbuzzwords/which-vs-code-shortcut-do-you-use-the-most-d9i</link>
      <guid>https://dev.to/brewinstallbuzzwords/which-vs-code-shortcut-do-you-use-the-most-d9i</guid>
      <description>&lt;p&gt;If VS Code is your primary editor, what’s the shortcut you use most frequently?&lt;/p&gt;

&lt;p&gt;Do you have another shortcut you use less frequently, but you enjoy using it a lot?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Polyglot Cloud Native Debugging - Beyond APM and Logging</title>
      <author>Shai Almog</author>
      <pubDate>Wed, 12 Jan 2022 12:16:34 +0000</pubDate>
      <link>https://dev.to/codenameone/polyglot-cloud-native-debugging-beyond-apm-and-logging-3gb5</link>
      <guid>https://dev.to/codenameone/polyglot-cloud-native-debugging-beyond-apm-and-logging-3gb5</guid>
      <description>&lt;p&gt;I've done quite a few conference talks since I became a developer advocate for &lt;a href="https://lightrun.com/"&gt;Lightrun&lt;/a&gt;. One of my most popular talks has a title similar to the title of this post. In this post I'll try to cover the gist of the post. You can see one of the longer versions of the talk that I gave at DDD at the end of 2021:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cj--cJrYqhQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloudnative-applications"&gt;
  &lt;/a&gt;
  Cloud-Native Applications
&lt;/h2&gt;

&lt;p&gt;There's practically an alphabet soup of terms covering public cloud, hybrid cloud, etc. There's also a lot of overlap between the various terms. The nice thing about this post is that it applies, regardless. You will run into problems with microservices, architecture and monolithic applications or serverless. &lt;/p&gt;

&lt;p&gt;Debugging is universal and nowadays so is polyglot. With the recent log4j shell bug, a lot of companies discovered they use Java. Python is everywhere and Node is also deeply entrenched by now. It's rare to find a cloud platform that doesn't have all three of them somewhere... A polyglot approach improves time to market by leveraging best of breed to deliver a product faster.&lt;/p&gt;

&lt;p&gt;But I'm getting ahead of myself. Let's take a step back and discuss the problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloud-native-lives-and-dies-by-apms-and-logs"&gt;
  &lt;/a&gt;
  Cloud Native Lives and Dies by APMs and Logs
&lt;/h3&gt;

&lt;p&gt;Without those two, we're blind. Regardless of the architecture you choose. If you don't have observability, you have a cat in a box (I'll get back to it). &lt;/p&gt;

&lt;p&gt;We need to provision cloud resources, need to know if things work... Actually DevOps teams need to know those things. R&amp;amp;D should know it too, but they aren't immediately connected to that. Back in the days before cloud-native applications and the advent of DevOps, we would often deploy things ourselves. &lt;/p&gt;

&lt;p&gt;This often ended badly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#observability-in-the-90s-kick-the-server"&gt;
  &lt;/a&gt;
  Observability in the 90s - Kick The Server
&lt;/h3&gt;

&lt;p&gt;DevOps practices and cloud native revolutionized this painful and problematic approach. They did it by removing the wildcard problematic variable: R&amp;amp;D. Thanks to DevOps teams, we enjoy a level of uptime we could only dream of 20 years ago. Private cloud made sure that these benefits of cloud are now available to everyone.&lt;/p&gt;

&lt;p&gt;Container orchestration, microservice architecture, serverless, etc. made scaling easier. But it also made application deployment far more challenging. Cloud infrastructures are much easier to deploy thanks to IaC solutions, but the complexity shifted. &lt;/p&gt;

&lt;p&gt;Troubleshooting cloud-native applications is harder. We have amazing observability tools but they're dealing with complex underlying infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloud-native-logs"&gt;
  &lt;/a&gt;
  Cloud Native Logs
&lt;/h2&gt;

&lt;p&gt;In recent years, cloud-native apps rely more and more on modern logging infrastructure. These aren't our old log files. Cloud provider logging solutions handle ingestion, search, meta-data, PII reduction, etc. at scale. I can't imagine running a major deployment without one of those solutions.&lt;/p&gt;

&lt;p&gt;Logs are wonderful, but they have two major drawbacks...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-log-test-deploy-rinse-repeat"&gt;
  &lt;/a&gt;
  Add Log, Test, Deploy, Rinse, Repeat
&lt;/h3&gt;

&lt;p&gt;This is the situation with logging. We aren't clairvoyant. We don't know how our native applications will fail in the deployment target. If a log is missing, we need to go through CI/CD, which can take hours (or days for some deployment processes). Then you need to go through that again, for the fix or additional logging.&lt;/p&gt;

&lt;p&gt;During that time, there's a bug in production and the development teams end up wasting time.&lt;br&gt;
As a result, over-logging is pretty common for a cloud application. This leads us to a different problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance-and-expense"&gt;
  &lt;/a&gt;
  Performance and Expense
&lt;/h3&gt;

&lt;p&gt;Logging a cloud-native application at scale can quickly become your biggest expense. We can reduce IO costs by caching, but even a read only operation that has a perfect cache hit will produce a log. Modern cloud applications must log everything due to scale. The size of ingested logs can become prohibitive.&lt;br&gt;
Performance hit of over-logging can compound this problem. Ingesting more data can seriously impact performance, which would require more containers to handle the same load. Additional container images breed complexity, which means more bugs and a bigger need for logs. &lt;/p&gt;

&lt;p&gt;When we observe, we affect the observer. It's as true for Schrödinger's cat as it is for scalable applications. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#observability-toolsapms"&gt;
  &lt;/a&gt;
  Observability Tools/APMs
&lt;/h2&gt;

&lt;p&gt;Modern observability tools are a marvel. I feel there should be a German word to describe the satisfaction one gets from a detailed APM dashboard. These tools enable the production of complex applications like nothing we've seen before. &lt;/p&gt;

&lt;p&gt;These tools are wonderful. I don't want to qualify that with a "but they are...". They're perfect.&lt;br&gt;
For the operations team, who are the target market of these tools. &lt;/p&gt;

&lt;p&gt;They're nice for R&amp;amp;D teams too, but we aren't the target market.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-engine"&gt;
  &lt;/a&gt;
  Check Engine
&lt;/h3&gt;

&lt;p&gt;I usually compare these tools to the check engine light or even the bat signal. They tell us there's a problem with cloud-native services, but they aren't exact. E.g. if your car shows the check engine light, you take it to the mechanic. She then connects his computer directly to the engine in order to debug the problem...&lt;/p&gt;

&lt;p&gt;The job of these tools is to detect a problem and alert us. As a bonus, they often give us the initial direction of the problem, but if the solution isn't immediately obvious, developers are left with limited options. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;For most apps, the overhead of observability is acceptable and well worth it. But there are limits. Most observability tools can be tuned to observe more information and trade off performance.&lt;/p&gt;

&lt;p&gt;This is usually a problematic notion that brings us back to the discussion of scaling infrastructure to support observability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h2&gt;

&lt;p&gt;When we native applications we can debug them using existing native technologies such as platform debuggers. Those work great for local debugging but at scale (especially horizontal scaling) they have some problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security - I've gone on record before on the security issues of remote debugging. Specifically JDWP but also other protocols&lt;/li&gt;
&lt;li&gt;Impractical - When dealing with lightweight containers or serverless, we don't have a place to attach our debugger. We can have multiple containers and a user might hit an arbitrary server&lt;/li&gt;
&lt;li&gt;Stability - I've heard stories of servers stuck in production because a breakpoint wouldn't release. It's very easy to crash production with a debugger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we work around those issues, debuggers are the perfect tool. R&amp;amp;D knows how to use them as they are a core tenant in software development. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-in-the-cloud-environment"&gt;
  &lt;/a&gt;
  Debugging in the Cloud Environment
&lt;/h2&gt;

&lt;p&gt;This is where continuous observability steps in. Observability tools work by monitoring the entire system and exposing relevant information.&lt;/p&gt;

&lt;p&gt;Continuous observability flips the switch, we ask the system about specific information we would like to know. It's the natural progression of problem solving... An observability platform points to a problem in our native software, and we use continuous observability to investigate the problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#as-a-debugger"&gt;
  &lt;/a&gt;
  As a Debugger
&lt;/h3&gt;

&lt;p&gt;There are many tools that we can classify as continuous observability tools. I'll focus on &lt;a href="https://lightrun.com/"&gt;Lightrun&lt;/a&gt;, which exposes its capabilities as a debugger for cloud-native computing environments. It differs from existing observability tools in the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IDE Integration - this is a tool for R&amp;amp;D. It works on the source code level directly in the IDE, like the debugger&lt;/li&gt;
&lt;li&gt;Low impact - continuous observability tools provide more information with lower overhead. They accomplish this by only observing the area of code you're debugging at the moment. If the tool isn't used, the impact is minimal&lt;/li&gt;
&lt;li&gt;Secure - there are several approaches to deployment (public cloud, on-prem, etc.). However, R&amp;amp;D doesn't get direct access to the container runtime. DevOps still has full control and R&amp;amp;D can't accidentally destroy a production environment (there are other protections such as PII reduction, blocklists etc.)&lt;/li&gt;
&lt;li&gt;Scale - you can debug multiple servers at once with tagging and similar features. No need to search through a huge cloud deployment &lt;/li&gt;
&lt;li&gt;Snapshots not Breakpoints - Breakpoints are a core concept in debugging, but we obviously can't use them when debugging a cloud server. Snapshots provide the same functionality (stack trace, frame variable states, etc.), without suspending the executing thread&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#logging-in-dynamic-environments"&gt;
  &lt;/a&gt;
  Logging in Dynamic Environments
&lt;/h3&gt;

&lt;p&gt;Some software developers consider logging to be superior to debugging. I always considered them to be two approaches that excel at different things. Logging is debugging.&lt;/p&gt;

&lt;p&gt;The static nature of logging is its biggest problem. If we could just inject a log dynamically, it would fit far better into the cloud-native architecture.  &lt;/p&gt;

&lt;p&gt;Notice, we still need existing logging to give us context and direction. This is simply for those cases where a developer is reviewing the logs and is missing a specific log. This solves the problem of over-logging, as a new log can be injected dynamically as needed.&lt;/p&gt;

&lt;p&gt;Furthermore, injected logs are interlaced and ingested with the native logs. This gives them the context we need to understand the root cause of a problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metrics-to-verify-instantly"&gt;
  &lt;/a&gt;
  Metrics to Verify Instantly
&lt;/h3&gt;

&lt;p&gt;Debugging is first and foremost the practice of verifying assumptions. But some assumptions are harder to verify with snapshots or logs, e.g. "this is the method that slows my docker containers".&lt;/p&gt;

&lt;p&gt;This is something for which we would normally use a profiler, but it's problematic to do in a production setting. Alternatively, we use a timer where we take the current time on method entry and log it on exit... &lt;br&gt;
That's great for a development machine, but deploying something like this to production is "noisy" and problematic. We usually want to keep narrowing the scope of measurements to find the true culprit. &lt;/p&gt;

&lt;p&gt;That's where metrics come in. We can add counters, timers, and more to measure the execution of a specific method. We can even pipe this information to Prometheus and other such tools. When an APM alerts us to a performance penalty in our finished application code, we can narrow it down with a metric.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conditions-to-pinpoint-issues"&gt;
  &lt;/a&gt;
  Conditions to Pinpoint Issues
&lt;/h3&gt;

&lt;p&gt;I somewhat side-stepped one of the biggest features in continuous observability conditions.&lt;br&gt;
Let's say I want to place a snapshot, log or metric on critical code. It will get hit instantly. &lt;br&gt;
That can be exactly what I want, but what if I want to debug a problem that happens only under specific conditions, e.g. to a specific user...&lt;br&gt;
Debuggers solved this problem before by coming up with conditional breakpoints. This applies to every action on a continuous observability platform. You can place a condition on any action within the platform, e.g. I can set a snapshot that would only be triggered by a user with the given ID. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modern-applications"&gt;
  &lt;/a&gt;
  Modern Applications
&lt;/h2&gt;

&lt;p&gt;We sometimes tread more lightly when building in the cloud-native world. We know how a minor change can have a cascading effect and we know how hard it is to track such issues. Continuous observability changes that dynamic, high-impact changes can be made more easily as we now have the tools to deal with them. In that sense, a debugger serves as a safety net for faster code to production cycles.&lt;/p&gt;

&lt;p&gt;But even if you don't subscribe to a more "ambitious" continuous deployment strategy. The additional safety net afforded by continuous observability provides many advantages for your entire application.&lt;/p&gt;

&lt;p&gt;E.g. Have you ever asked yourself if a particular method is even used in production?&lt;/p&gt;

&lt;p&gt;Is the dependent service at fault for the failure or is it my bug?&lt;/p&gt;

&lt;p&gt;With continuous observability, you can find out right from the comfort of your IDE.&lt;/p&gt;

&lt;p&gt;In that sense, it's the realization of cloud-native computing by giving developers a direct channel to the applicable information. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#polyglot-cross-platform-cross-language"&gt;
  &lt;/a&gt;
  Polyglot, Cross Platform, Cross Language
&lt;/h2&gt;

&lt;p&gt;Most observability tools are platform agnostic at the system level. Continuous observability tools are a bit more complex. A continuous observability tool works at the code level and needs deep access to the language runtime. As such, it's deeply adopted in each programming language on every platform. It's technically possible to support all languages, but there are challenges involved.&lt;/p&gt;

&lt;p&gt;In the demo video above, I show debugging a snapshot in NodeJS which leads me to code in a Spring Boot Java backend. Using such independent services isn't out of the ordinary for the cloud-native approach. I didn't demo a lambda service because of a lack of time. With stateless services and serverless, the need is even greater. Debugging serverless locally is so difficult some developers advocate deploying directly to production (through CD and testing).&lt;/p&gt;

&lt;p&gt;With a continuous observability tool, we can use tags creatively to monitor serverless services as they come online and bind the right actions to the function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;In my talk I also do a demo, you can check it out in the video above. &lt;/p&gt;

&lt;p&gt;Continuous observability is already revolutionizing the cloud native industry in the same way observability, modern logging and docker containers did more than a decade ago. It fills an important blind spot in our current set of native technologies: a tool for developers that lets them deep dive production issues in the finished application code.&lt;/p&gt;

&lt;p&gt;Production bugs are like spores, they survived QA, staging, etc. They are resilient; we need heavy guns to kill them at scale. Cloud-native technologies made the scale much bigger and, as a result, much harder to debug. &lt;/p&gt;

&lt;p&gt;With serverless, microservices and worker frameworks (e.g. AirFlow, Spark, etc.) things are even more dire. The lifecycle is so difficult some developers accept a relatively high failure rate as "the cost of doing business". &lt;/p&gt;

&lt;p&gt;I hope this article will make your first steps into continuous observability. I believe this technology can facilitate a new generation of applications that will change the customer experience and yours.&lt;/p&gt;

&lt;p&gt;Follow me on  &lt;a href="https://twitter.com/debugagent/"&gt;Twitter&lt;/a&gt;  to learn more and get updates for future posts.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>[PT-BR] 8 Coisas que aprendi durante minha jornada que podem te ajudar em 2022.</title>
      <author>Caio "Em1dio" Carnelós</author>
      <pubDate>Wed, 12 Jan 2022 12:08:12 +0000</pubDate>
      <link>https://dev.to/em1dio/pt-br-coisas-que-aprendi-durante-minha-jornada-que-podem-te-ajudar-em-2022-4ai1</link>
      <guid>https://dev.to/em1dio/pt-br-coisas-que-aprendi-durante-minha-jornada-que-podem-te-ajudar-em-2022-4ai1</guid>
      <description>&lt;p&gt;Adoraria comecar meu primeiro post falando sobre Hardskills. Linguagens, Frameworks, Libs e etc que prometem bombar em 2022. &lt;em&gt;- que prometo falar em outro post! -&lt;/em&gt; Mas vou falar nesse projeto sobre dicas de softskills que bombam ... pasmem... desde SEMPRE.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-saber-min%C3%BAcias-n%C3%A3o-te-fazem-um-bom-profissional"&gt;
  &lt;/a&gt;
  1. Saber minúcias não te fazem um bom profissional.
&lt;/h2&gt;

&lt;p&gt;Acredite. Sabe aquele cara que quando você fala sobre aquele novo protocolo/biblioteca/framework e ele sabe TUDO sobre o novo protocolo? Mas nao sabe o mais importante que é como aquilo pode trazer valor pro dia a dia. Definitivamente, não seja esse cara. Procure o que cada tecnologia pode te trazer de benefício. Ao compreender a tecnologia supõe-se que você sabe para quais casos ela mais serve e como ela pode ajudar seu cliente a se desenvolver.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-ser-individualista-te-diminui"&gt;
  &lt;/a&gt;
  2. Ser individualista te diminui.
&lt;/h2&gt;

&lt;p&gt;Caso você seja aquele cara que tem o seguinte pensamento: "Não preciso de mais ninguém, resolvo tudo sozinho". Você está errando feio, errando rude! Compartilhe seus conhecimentos. Faça parte de um time. A velha frase ainda vale: &lt;em&gt;"Quer ir rapido? va sozinho. Quer ir longe? Vá em grupo!"&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-voce-ser%C3%A1-mais-conhecido-pela-maneira-que-lida-com-os-desafios-do-que-pela-sua-qualidade-de-software"&gt;
  &lt;/a&gt;
  3. Voce será mais conhecido pela maneira que lida com os desafios do que pela sua qualidade de software.
&lt;/h2&gt;

&lt;p&gt;Acredite ou não. Isso vai acontecer. Hoje com mais de 10 anos nessa indústria e tendo passado e tido contato com milhares de pessoas posso te garantir. A maneira na qual você lida com desafios e crises. Como voce se comunica, como voce resolve os passos que voce percorre para investigar e corrigir o problema. Você será lembrado por isso. Muito mais do que a solução em si.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-fa%C3%A7a-network-nem-que-seja-online"&gt;
  &lt;/a&gt;
  4. Faça Network. Nem que seja online.
&lt;/h2&gt;

&lt;p&gt;Caso voce more em um centro urbano. Procure coworkers. A ideia é básica. Voce senta e faz seu trabalho. Enquanto alguém aleatório com uma história, trajetória e desafios 100% diferentes dos seus senta próximo a voce e durante aquele dia vocês têm a possibilidade de conversar sobre as dificuldades do dia-a-dia e quem sabe você não encontra um amigo ou até mesmo parceiro para futuros negócios. Hoje o que mais me aparece são pessoas que me admiram como profissional e me procuram para saber se eu faço "freela".&lt;br&gt;
Caso voce more fora de um grande centro urbano. Procure comunidades onlines! Eu por morar fora do Brasil participo da &lt;a href="https://ahub.tech/discord"&gt;Hub no Discord&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-nao-banque-o-her%C3%B3i"&gt;
  &lt;/a&gt;
  5. Nao banque o herói.
&lt;/h2&gt;

&lt;p&gt;Esse ponto é simples e objetivo. Conheça seus limites.&lt;br&gt;
Saiba o que você domina. Aquela ideia de aceitar qualquer coisa sem ter o menor nível de conhecimento e entregar o projeto de qualquer maneira. Pode até te render uma grana. Mas um dia você vai falhar. E isso pode te dar problemas legais. A ideia é basica. Nunca viu sobre? Antes de dizer "eu consigo fazer" estude sobre. Ninguém precisa dizer sim no primeiro momento.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-se-venda-bem-ou-melhor-negocie-sempre"&gt;
  &lt;/a&gt;
  6. Se venda bem ou melhor, Negocie SEMPRE!
&lt;/h2&gt;

&lt;p&gt;Você vai receber propostas boas e propostas ruins. Mas se coloque um valor próprio. Evite trabalhar por nada (ex: "Seu trabalho por uma ideia milionaria"). Sou da opinião  que gostaria de pagar nem que fosse 50 reais pelo serviço de alguém. Esta pessoa vai entender que eu valorizo o trabalho dela. E eu vou entender que o trabalho de uma outra pessoa tem custo. Não  sabe qual o valor e como cobrar? De início faça aquele velho calculo... Demoro 10 horas pra fazer esse software. O preço da minha hora é 10 e o custo para manter isso por mes é 10?&lt;br&gt;
&lt;em&gt;Número de Horas * Preço de Horas + (Custo * 12)&lt;/em&gt; &lt;br&gt;
Não tem erro. ok ;) Aos poucos voce vai saber metrificar melhor.&lt;br&gt;
*Lembrando que o custo seria por ano.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-tenha-mais-de-uma-fonta-de-renda"&gt;
  &lt;/a&gt;
  7. Tenha mais de uma fonta de renda!
&lt;/h2&gt;

&lt;p&gt;Parece óbvio, mas busque tua saúde financeira. É muito importante que você  busque nao depender apenas do seu emprego. Tenha uma reserva de emergência, faça investimentos de baixo/médio e alto risco. Tudo de acordo com o que você quer fazer. O Seu "eu" de 2032 vai me agradecer por isso.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-seja-humilde"&gt;
  &lt;/a&gt;
  8. Seja Humilde
&lt;/h2&gt;

&lt;p&gt;Você vai chegar nos objetivos que você quis. Você alcançar aquele valor financeiro. Vai se dedicar e vai concluir seus projetos. Não esqueça de ajudar quem está comecando. Converse, mentore e aceite que a realidade deles possivelmente será mais fácil do que a sua. Hoje em 2022 existe muito mais material para se estudar do que quando eu comecei la por 2008-2009. As novas linguagens e servicos fazem o que demoravamos horas em poucos segundos. Não diminua a qualidade de quem está comecando. E por fim não se esqueça: &lt;em&gt;"Juntos somos mais"&lt;/em&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Engineering leadership – here are my go to books</title>
      <author>The Serverless Edge</author>
      <pubDate>Wed, 12 Jan 2022 12:07:27 +0000</pubDate>
      <link>https://dev.to/serverlessedge/engineering-leadership-here-are-my-go-to-books-29lc</link>
      <guid>https://dev.to/serverlessedge/engineering-leadership-here-are-my-go-to-books-29lc</guid>
      <description>&lt;p&gt;Originally published by &lt;a class="mentioned-user" href="https://dev.to/davidand393"&gt;@davidand393&lt;/a&gt; on &lt;a href="https://www.theserverlessedge.com/engineering-leadership-my-go-to-references/"&gt;The Serverless Edge&lt;/a&gt;&lt;br&gt;
Reading Time: 5 minutes&lt;/p&gt;

&lt;p&gt;I’ve been an engineering leader for many years. Despite the experience under my belt, and as any good technical professional will tell you, you are always learning – every day is a school day. There are a lot of books, &lt;a href="https://www.theserverlessedge.com/how-to-be-a-technological-maestro-and-not-the-dope-at-the-top/"&gt;podcasts&lt;/a&gt;, articles and frameworks about leadership. The following provide me with the insights that heavily shape my thoughts on engineering leadership.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://wardleypedia.org/mediawiki/index.php/Main_Page"&gt;Simon Wardley for engineering leadership&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gKjMlJD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fouv9cjzqycucha44x2b.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gKjMlJD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fouv9cjzqycucha44x2b.jpeg" alt="Image description" width="880" height="670"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have to understand your landscape; therefore, you must map. Simon Wardley has created a complete approach that he calls his strategy cycle. It’s brilliant:&lt;/p&gt;

&lt;p&gt;Purpose – Why? Do you know what you are doing?&lt;/p&gt;

&lt;p&gt;Movement – Wardley Mapping will help you understand your landscape; it’s evolution and blockers to change (inertia).&lt;/p&gt;

&lt;p&gt;Climatic patterns – these help describe factors that you may be observing. Internal or external.&lt;/p&gt;

&lt;p&gt;Doctrine – this is a list of potential things you could/should do. Do you know how good your execution is?&lt;/p&gt;

&lt;p&gt;Leadership – given all of the above, what are you going to do.&lt;/p&gt;

&lt;p&gt;Engineering Leadership and the Wardley Cycle&lt;br&gt;
And once complete, go back to the start (it’s a cycle). Wardley Mapping is a critical component of this – start there (and the book is free).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Creativity,_Inc."&gt;Creativity Inc. – culture for engineering leadership&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TCTkljBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycn7grsixtlfdj52s561.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TCTkljBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycn7grsixtlfdj52s561.png" alt="Image description" width="289" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This may be a surprise, but the Pixel story as told by Ed Catmull is an excellent example of engineering leadership. The idea of the ugly baby and the machine is compelling.&lt;/p&gt;

&lt;p&gt;Catmull explains: “….when you think of how a movie starts out. It’s a baby. It’s like the fetus of a movie star; we all start out ugly. Every one of Pixar’s stories starts out that way. A new thing is hard to define; it’s not attractive, and it requires protection. When I was a researcher at DARPA, I had protection for what was ill-defined. Every new idea in any field needs protection. Pixar is set up to protect our director’s ugly baby. Of course you can’t protect the baby forever. At some point, it has to grow up and change into something, because the beast is still there. That’s a positive thing. Because sometimes the ugly baby would rather play in the sandbox forever.”.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://senseandrespond.co/"&gt;Sense and Respond – customer&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLw04mqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uapmv8s606htooowghx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLw04mqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uapmv8s606htooowghx.png" alt="Image description" width="394" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every engineering leadership organisation must be empathetic towards the customer. There are many ways to do this, but the approach laid out by Seth is straightforward and effective.&lt;/p&gt;

&lt;p&gt;As Seth explains: “Most leaders and project teams think this is simply the evolution of “IT”—leaving business management unchanged. This is not true. As this technology becomes embedded in literally every phase and process of our businesses, we need new organizational structures and management practices capable of leveraging these new capabilities.”.&lt;/p&gt;

&lt;p&gt;His book: “describes the tools, techniques, and practices that managers need to thrive in this new world.”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.oreilly.com/library/view/accelerate/9781457191435/"&gt;Accelerate – rapid delivery&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f0bGdeWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhowshp87nbtz7mbtg24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f0bGdeWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhowshp87nbtz7mbtg24.png" alt="Image description" width="282" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are too many books and complicated approaches to write great software. Some of the techniques are so contrived that the engineering leadership forget entirely what they are doing. There are dozens of metrics that teams can track, but many end up in confusion. Accelerate is incredible as it reduces delivery down to 4 key metrics [explain]. It is the simplest thing when talking to a team to ask “how many times did you delivery last week?” That question will unravel everything you ever need to know about performance in 3 minutes. Or you could spend three weeks doing a Root Cause Analysis. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://architectelevator.com/"&gt;Architect Elevator – engineering leadership&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MO0hqQF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ght81fg37os60qnv70sn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MO0hqQF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ght81fg37os60qnv70sn.png" alt="Image description" width="263" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Architecture is the lost art. In many ways, Agile has killed it as it’s seen to be a phase early in the waterfall cycle. Gregor has done the best job at explaining how an Architect should work:&lt;/p&gt;

&lt;p&gt;“The role of architects has fundamentally changed. While knowing UML and architecture styles was sufficient a few years ago, modern architects reduce friction, align technology and organization, and chart a credible transformation journey. All while keeping up with the latest tech without being blind sighted by buzzwords. These architects ride the Architect Elevator to connect the organization’s penthouse, where the business strategy is defined, with the engine room, where the enabling technologies are implemented.”.&lt;/p&gt;

&lt;p&gt;And it’s not just Architects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://teamtopologies.com/"&gt;Team Topologies – teams&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5maoQ8Qd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7nwxbb5wzu6tokmdsoc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5maoQ8Qd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7nwxbb5wzu6tokmdsoc.png" alt="Image description" width="383" height="567"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The team has always been the fundamental unit of delivery. Not organisations or individuals. How you organise teams and how they interact is crucial. There are four fundamental topologies:&lt;/p&gt;

&lt;p&gt;Stream-aligned team: aligned to a flow of work from (usually) a segment of the business domain&lt;/p&gt;

&lt;p&gt;Enabling team: helps a Stream-aligned team to overcome obstacles. Also detects missing capabilities.&lt;/p&gt;

&lt;p&gt;Complicated Subsystem team: where significant mathematics/calculation/technical expertise is needed.&lt;/p&gt;

&lt;p&gt;Platform team: a grouping of other team types that provide a compelling internal product to accelerate delivery by Stream-aligned team&lt;/p&gt;

&lt;p&gt;The enablement team is the most powerful concept here and widely misunderstood.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://fearlessorganization.com/"&gt;Fearless organisation – environment&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UEPmPHzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6ux4zj5j0pm35fi3biy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UEPmPHzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6ux4zj5j0pm35fi3biy.png" alt="Image description" width="227" height="347"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It goes without saying, but psych safety is critical to allow individuals and the engineering leadership to bring their whole selves to work. Prof. Edmondson of Harvard Business School explains that: “psychological safety is required for team high-performance. Psychological safety is defined as “a belief that one will not be punished or humiliated for speaking up with ideas, questions, concerns, or mistakes“.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://emilywebber.co.uk/building-successful-communities-of-practice/"&gt;Community of Practice – sharing&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w87gVqEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yj852qwxeixfuhwbhvsh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w87gVqEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yj852qwxeixfuhwbhvsh.png" alt="Image description" width="309" height="523"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, there are many complex ways you can structure communication channels and knowledge management. Millions are spent on this by large companies. Often the most effective method is “unscripted collaboration”. Put people together, and they will talk. The power of community inside an org is very effective. Webber’s 5 step process is very insightful.&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>productivity</category>
      <category>management</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Method Overriding in Java.</title>
      <author>Isaac Tonyloi</author>
      <pubDate>Wed, 12 Jan 2022 12:02:47 +0000</pubDate>
      <link>https://dev.to/isaacttonyloi/method-overriding-in-java-1p6</link>
      <guid>https://dev.to/isaacttonyloi/method-overriding-in-java-1p6</guid>
      <description>&lt;p&gt;Connect with me &lt;a href="https://www.linkedin.com/in/isaactonyloi/"&gt;Isaac Tonyloi&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wy-PbQLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2osolals5wiyyojgzdf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wy-PbQLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2osolals5wiyyojgzdf.jpg" alt="A Software Engineer&amp;lt;br&amp;gt;
  " width="640" height="427"&gt;&lt;/a&gt;&lt;br&gt;
Photo by &lt;a href="https://unsplash.com/@nublson?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Nubelson Fernandes&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/code?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Method overriding can be achieved through inheritance in java. Inheritance allows us to derive a new class from a preexisting class. Inheritance also promotes code reusability by allowing one class known as the sub class or child class to inherit methods and fields from another class known as the super class or the parent class.&lt;/p&gt;

&lt;p&gt;Now method overriding occurs when a method is defined with the same name both in the subclass and the super class. Here is an example of method overriding in java.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Bicycle {
    public void brake() {
        System.out.println("All bikes should have breaks");
    }
}

class MountainBicycle extends Bicycle {
    public void brake() {
        System.out.println("Mountain bicycle should also have brakes");
    }
}

class Main {
    public static void main(String[] args) {

        MountainBicycle obj = new MountainBicycle();

        obj.brake();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mountain bicycle should also have brakes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example the method brake() is both in the super class and the subclass. Therefore the method in the subclass overrides the method in the super class. In such scenarios we should use the @Override annotation, however it is not mandatory.&lt;br&gt;
However when using the @Override annotation we should be keen to ensure that:&lt;/p&gt;

&lt;p&gt;We are not overriding methods that have been declared static or final.&lt;br&gt;
Neither should we Override methods with different return types, parameters or name for that sake.&lt;br&gt;
We can access the same method defined in the superclass by using the keyword super() as shown below. The same keyword can also be used to call a constructor in the super class from the subclass.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Mfs {
    public void display() {
        System.out.println("User payment systems");
    }
}

class Kplc extends Mfs {
    @Override
    public static display() {
        System.out.println("Kenya power tokens payment system");
    }

    super.display();
}

class Main() {
    public static void main(String[] args) {
        Kplc obj = new Kplc();

        obj.display();
    }  
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;All bikes should have breaks
Mountain bicycle should also have brakes

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should also note that it is in order to override methods with different access specifiers. However  we can only do so if the method in the subclass has a more broader access specifier than the one used in the superclass method. For instance in the example below the method in the super class has ‘protected’ as the class specifier while that in the subclass has public which provides larger access. This allows us to override the method in the super class as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Bicycle {
    protected void brake() {
        System.out.println("All bikes should have breaks");
    }

}

class MountainBicycle extends Bicycle {
    public void brake() {
        super.brake();
        System.out.println("Mountain bicycles should also have brakes");


    }
}

class Main {
    public static void main(String[] args) {

        MountainBicycle obj = new MountainBicycle();

        obj.brake();
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;All bikes should have breaks
Mountain bicycles should also have brakes

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not every method can be overridden however abstract methods should always be overridden&lt;/p&gt;

</description>
      <category>java</category>
      <category>inheritance</category>
      <category>methodoverriding</category>
      <category>methods</category>
    </item>
    <item>
      <title>React Developers’ Top 10 Topics of 2021</title>
      <author>Nora Georgieva</author>
      <pubDate>Wed, 12 Jan 2022 11:07:28 +0000</pubDate>
      <link>https://dev.to/nora_init/react-developers-top-10-topics-of-2021-48bm</link>
      <guid>https://dev.to/nora_init/react-developers-top-10-topics-of-2021-48bm</guid>
      <description>&lt;p&gt;From the React Context API and React Router to building dashboards and form validation, React developers were excited about a range of topics in 2021. Check out the list of the Top 10 hottest topics making waves in the React ecosystem and see if you have missed something. It’s just January - not too late to catch up. Actually, it's never too late!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-word-on-methodology"&gt;
  &lt;/a&gt;
  A Word on Methodology
&lt;/h2&gt;

&lt;p&gt;My method, in short: I have access to the entire &lt;a href="https://www.telerik.com/blogs"&gt;Telerik Blogs&lt;/a&gt; performance data and I’m not afraid to use it. What's more, I want to share that (knowledge=)power with you.&lt;/p&gt;

&lt;p&gt;The Telerik Blogs serve millions of readers every year across a variety of technologies, including hundreds of thousands of unique visitors of all React-focused blogs. Considering that there are about 6-7 million React developers today, I would call the Telerik Blogs' React audience a representative sample and my method: semi-scientific. ;)&lt;/p&gt;

&lt;p&gt;(If you’re wondering about how I estimated the size of the React developer community: I combined the &lt;a href="https://www.developernation.net/resources/reports/state-of-the-developer-nation-q3-2021"&gt;SlashData Q3 2021 survey&lt;/a&gt; results, which state that there are ~16M JavaScript developers. Then I took a conservative 40% of that number, based on &lt;a href="https://insights.stackoverflow.com/survey/2021#technology-most-popular-technologies"&gt;Stack Overflow React usage stats&lt;/a&gt;. I say “conservative” because according to the &lt;a href="https://2020.stateofjs.com/en-US/technologies/front-end-frameworks/"&gt;State of JavaScript 2021&lt;/a&gt;, 80% of JavaScript devs use React.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before We Begin
&lt;/h2&gt;

&lt;p&gt;Let's make this even more fun! Make a mental list of the top React topics in 2021 according to you, and pick your top three. Great, now you have something at stake. Read on to see how closely your list matches what we've observed. In true countdown fashion, we'll start from #10 and work our way up to #1. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-developers-top-10-topics-of-2021"&gt;
  &lt;/a&gt;
  React Developer's Top 10 Topics of 2021
&lt;/h2&gt;

&lt;p&gt;.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-topic-10-the-react-context-api"&gt;
  &lt;/a&gt;
  Hot Topic #10: The React Context API
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OzvS0uQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94ze2i6kbvd4mz1uoszf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OzvS0uQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94ze2i6kbvd4mz1uoszf.png" alt="React Context API code snippet" width="680" height="92"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;State management is always on React developer’s minds, which is why it’s no surprise that ever since graduating to “safe to use in production” with React 16.3, the React Context API has been growing in usage. Sometimes hailed as the Redux killer, one of React Context API’s main benefits is that with its help, you don’t need to install external libraries to handle state management. Leonardo Maldonado did a great job explaining what the Context API is, the problems it solves and how to use it with his popular blog, &lt;a href="https://www.telerik.com/blogs/understand-react-context-api"&gt;Understand React Context API&lt;/a&gt;.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-topic-9-building-dashboard-apps-with-react"&gt;
  &lt;/a&gt;
  Hot topic #9: Building dashboard apps with React
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-Va3DSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjzmep2k39hp4wudlab5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-Va3DSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjzmep2k39hp4wudlab5.png" alt="React sales dashboard example built with KendoReact" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can build all sorts of apps with React and it can be lots of fun. Where things get challenging is when you have to build more complex, line-of-business apps that need to handle a lot of data (perhaps even live-updating data), enable the users to edit, and visualize all this in a user-friendly way. In other words: it can be tough to build a dashboard with React. That’s why we saw steady interest in our three popular dashboard building tutorials all year round. If you haven’t read them, you’re building dashboards the hard way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.telerik.com/blogs/lets-build-a-financial-dashboard-with-react"&gt;Let’s Build a Financial Dashboard with React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.telerik.com/blogs/lets-build-a-sales-dashboard-with-react"&gt;Let's Build a Sales Dashboard with React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.telerik.com/blogs/react-dashboard-tutorial-build-interactive-dashboard"&gt;How To Build an Interactive Dashboard&lt;/a&gt; with the &lt;a href="https://www.telerik.com/kendo-react-ui/tilelayout/"&gt;React TileLayout component&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-topic-8-react-pdf-rendering-exporting-html-to-pdf"&gt;
  &lt;/a&gt;
  Hot topic #8: React PDF Rendering: Exporting HTML to PDF
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--My2YLruj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xs7eb6vk9lvphiu0azl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--My2YLruj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xs7eb6vk9lvphiu0azl.png" alt="React-to-PDF exporting illustration with KendoReact mascot" width="880" height="214"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to export HTML to PDF in your React apps is a very popular question – mostly because it is hard to do, and you need to have a couple of tricks up your sleeve to do it right. That’s why Carl Bergenhem’s 3-part series on different React-to-PDF exporting scenarios was a big hit in 2021. You’ve missed it? Now you haven’t:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.telerik.com/blogs/generating-pdf-react-easy-as-1-2-3"&gt;Part 1: Generating PDF in React: As Easy As 1-2-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.telerik.com/blogs/generating-pdf-html-react-demo-exporting-invoices"&gt;Part 2: Generating PDF from HTML in React: Exporting Invoices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.telerik.com/blogs/generating-pdf-html-react-example-exporting-data-grids"&gt;Part 3: Generating PDF from HTML in React: An Example of Exporting Data Grids&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-topic-7-how-to-create-a-responsive-layout-in-react"&gt;
  &lt;/a&gt;
  Hot topic #7: How to Create a Responsive Layout in React
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUhEIKRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgs8marc6s4548f8bjjo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUhEIKRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgs8marc6s4548f8bjjo.gif" alt="React responsive layout example" width="727" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We find that developers love design-related development tutorials – and no wonder! Creating good UI/UX often falls on them, yet one could argue that it requires a separate skillset. Using third-party UI libraries that do a lot of the work for you can be of great help (spotlight on &lt;a href="https://www.telerik.com/kendo-react-ui/"&gt;KendoReact&lt;/a&gt;), but even so, there’s no doubt that good developers need to know a thing or two about UI/UX. That’s why Eric Bishard’s blog has perennial appeal and has been helping developers create responsive layouts since 2019: &lt;a href="https://www.telerik.com/blogs/creating-a-responsive-layout-in-react"&gt;Creating a Responsive Layout in React&lt;/a&gt;.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-topic-6-react-hooks"&gt;
  &lt;/a&gt;
  Hot topic #6: React Hooks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6poiC3E8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/061lllwkq7wj7hhjpvfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6poiC3E8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/061lllwkq7wj7hhjpvfm.png" alt="React hooks key topics" width="819" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hooks all the things!… or something. Ever since React Hooks were released in October 2018, they have been helping developers write clearer and more concise code. Needless to say, to make the most of them, you need to learn about them first. No wonder &lt;a href="https://www.telerik.com/kendo-react-ui/react-hooks-guide/"&gt;The Ultimate Guide to Learning React Hooks&lt;/a&gt; is still a go-to resource for tens of thousands of developers. What’s more, Leonardo Maldonado strikes again in our top 10 chart with his &lt;a href="https://www.telerik.com/blogs/usecallback-useref-two-react-hooks-you-should-learn"&gt;useCallback and useRef: Two React Hooks You Should Learn&lt;/a&gt;. &lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-topic-5-loops-in-react-jsx"&gt;
  &lt;/a&gt;
  Hot topic #5: Loops in React JSX
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SUKQY2I6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r7qc9pllywj16lx74fs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SUKQY2I6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r7qc9pllywj16lx74fs.png" alt="Loops in React code snippet" width="681" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JSX is a custom syntax extension to JavaScript which is used for creating markup with React. The most common way of using a loop to render a list of items is with the map function that will return JSX. Not sure how to do that? You’re not alone! Happily, Thomas Findlay solved that mystery for all of us with his super helpful &lt;a href="https://www.telerik.com/blogs/beginners-guide-loops-in-react-jsx"&gt;Beginner’s Guide to Loops in React JSX&lt;/a&gt;.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-topic-4-building-forms-in-react-amp-react-form-validation"&gt;
  &lt;/a&gt;
  Hot topic #4: Building Forms in React &amp;amp; React Form Validation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vXq-faoi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/youlxrh2bzyfzo74rl9r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vXq-faoi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/youlxrh2bzyfzo74rl9r.png" alt="React Forms &amp;amp; React Form validation illustration with KendoReact mascot" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Four is my favorite number and forms are an interface React developers love to build. Okay, one of these statements is a lie. Forms are an extremely common thing to have in your React app and look deceptively simple to implement until you get down to it. Let's demystify them once and for all! Start with &lt;a href="https://www.telerik.com/blogs/how-to-build-forms-with-react-the-easy-way"&gt;How to Build Forms with React the Easy Way&lt;/a&gt; with TJ VanToll, dive into React Form validation with Eric Bishard’s &lt;a href="https://www.telerik.com/blogs/up-and-running-with-react-form-validation"&gt;Up and Running with React Form Validation&lt;/a&gt; and explore the KendoReact team’s &lt;a href="https://www.telerik.com/kendo-react-ui/components/form/guidelines-with-examples/"&gt;best practices and usage examples for building great forms in React&lt;/a&gt; – all extremely popular resources throughout 2021.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-topic-3-dealing-with-cors-in-cra"&gt;
  &lt;/a&gt;
  Hot topic #3: Dealing with CORS in CRA
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wkxRv2_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0sv4akxp8llywj6rkzj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wkxRv2_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0sv4akxp8llywj6rkzj.png" alt="CORS in CRA code snippet: module.exports = function(app)" width="688" height="148"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you thought Create React App (CRA) would be high on the list of the most popular React topics, you’ve guessed right! At number 3 of our most popular resources, we have Blanca Mendizábal Perelló’s short and sweet &lt;a href="https://www.telerik.com/blogs/dealing-with-cors-in-create-react-app"&gt;Dealing with CORS in Create React App&lt;/a&gt; – a blog that helps you get around CORS issues using CRA’s proxying capabilities. It’s great value for your time as you can scan the blog in three minutes and come out the wiser for it!&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-topic-2-react-router"&gt;
  &lt;/a&gt;
  Hot topic #2: React Router
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fS9eSazs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7xeft7l3ltvv5fib12j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fS9eSazs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7xeft7l3ltvv5fib12j.png" alt="React Router logo" width="256" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Did you guess that one? If you search for “what is React Router” with Google , you’ll get a mind-boggling 49,800,000 results. Developed by the &lt;a href="https://remix.run/"&gt;Remix&lt;/a&gt; team, &lt;a href="https://twitter.com/ryanflorence"&gt;Ryan Florence&lt;/a&gt; and &lt;a href="https://twitter.com/mjackson"&gt;Michael Jackson&lt;/a&gt;, this lightweight, fully featured routing library generates over 6 million npm downloads each week! Little wonder then, that Gift Egwuenu’s &lt;a href="https://www.telerik.com/blogs/programmatically-navigate-with-react-router"&gt;Programmatically Navigate with React Router&lt;/a&gt; served so many of you this year. If you don’t know what programmatic navigation is, now you know.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-topic-1-how-to-show-and-hide-elements-in-react"&gt;
  &lt;/a&gt;
  Hot topic #1: How to Show and Hide Elements in React
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QHMQtPUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siuoe7c70c6byoimoj2t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QHMQtPUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siuoe7c70c6byoimoj2t.jpg" alt="Squirrel peeking curiously from behind a tree" width="880" height="376"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Does the most popular React topic of 2021 surprise you? How to control what gets displayed in your app is one of the first things you need to learn when you start developing – this holds the key to the incredible popularity of this topic. A rough estimate based on this year’s developer surveys (referring to the &lt;a href="https://www.developernation.net/resources/reports/state-of-the-developer-nation-q3-2021"&gt;SlashData’s Q3 2021 survey&lt;/a&gt; again, where they note that 4 million developers have joined the JavaScript community in the last year) indicates that every year, hundreds of thousands of developers enter the React ecosystem and start learning. Well, where else to start but from the beginning? With that, I present to you the most popular React blog on Telerik Blogs in 2021, by far: it is Leigh Halliday’s &lt;a href="https://www.telerik.com/blogs/how-to-show-and-hide-elements-in-react"&gt;How to Show and Hide Elements in React&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-staying-till-the-end"&gt;
  &lt;/a&gt;
  Thank you for staying till the end!
&lt;/h2&gt;

&lt;p&gt;This concludes our yearly retrospective of the topics that rocked the React world in 2021. Did you guess any of the top 3? What are the topics that didn’t make it in this list, but rank in your personal Top 10? Don’t be a silent observer, let me know in the comments!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Curious squirrel photo by &lt;a href="https://unsplash.com/@hasselossius?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Hasse Lossius&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/curiosity?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>react</category>
      <category>yearinreview</category>
      <category>analytics</category>
      <category>kendoreact</category>
    </item>
    <item>
      <title>Polyfill and shim</title>
      <author>MurtazaBagwala07</author>
      <pubDate>Wed, 12 Jan 2022 10:35:14 +0000</pubDate>
      <link>https://dev.to/murtazabagwala07/polyfill-and-shim-1o25</link>
      <guid>https://dev.to/murtazabagwala07/polyfill-and-shim-1o25</guid>
      <description>&lt;p&gt;I will try to give a brief overview of what polyfill and shim is and why are they used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Polyfill"&gt;Polyfill &lt;/a&gt;&lt;/strong&gt;: It basically is a code that allows browser to support such feature which it is not capable of implementing on its own.&lt;br&gt;
Generally it refers to Javascript Library which implements the HTML5 or CSS web standard.&lt;/p&gt;

&lt;p&gt;For example, Math.floor(n) is a function that returns the largest integer less than or equal to a given number, e.g Math.floor(1.23) returns 1.&lt;/p&gt;

&lt;p&gt;In some (very outdated) JavaScript engines, there’s no Math.floor, so such code will not work.&lt;/p&gt;

&lt;p&gt;So how is this code supposed to work in those outdated JS engines?&lt;br&gt;
Thats Where polyfill comes in.&lt;/p&gt;

&lt;p&gt;It is a script that updates/adds new functions.It “fills in” the gap and adds missing implementations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Shim"&gt;Shim &lt;/a&gt;&lt;/strong&gt;: A shim is any piece of code that performs interception of an API call and provides a layer of abstraction. It isn't necessarily restricted to a web application or HTML5/CSS3.&lt;/p&gt;

&lt;p&gt;The idea here is to make it normal using certain APIs across different environments. So, if two browsers implement the same API differently, you could intercept the API calls in one of those browsers and make its behavior align with the other browser.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>React: Conditional rendering</title>
      <author>Abayomi Ogunnusi</author>
      <pubDate>Wed, 12 Jan 2022 10:34:13 +0000</pubDate>
      <link>https://dev.to/drsimplegraffiti/react-conditional-rendering-32b4</link>
      <guid>https://dev.to/drsimplegraffiti/react-conditional-rendering-32b4</guid>
      <description>&lt;p&gt;This is one of the concepts I found most confusing when I started React. This post is a simple demonstration of how to render components with react using conditional rendering. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-to-it"&gt;
  &lt;/a&gt;
  Let's get to it
&lt;/h2&gt;

&lt;p&gt;🥦  Create a react project using &lt;code&gt;npx create-react-app .&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QO1LHnaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oku9191i840kykk5juxc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QO1LHnaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oku9191i840kykk5juxc.PNG" alt="Image description" width="771" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🥦 Then start the react app using this command: &lt;code&gt;npm start&lt;/code&gt;, this opens up the react page on the default localhost:3000&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQ3Yh7Hl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rpzf2b6hyaan79habrc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQ3Yh7Hl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rpzf2b6hyaan79habrc.PNG" alt="Image description" width="880" height="367"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#clean-up"&gt;
  &lt;/a&gt;
  Clean Up
&lt;/h2&gt;

&lt;p&gt;Next, we cleanup our src folder and just have a h1 tag inside the App.jsthat says Choose your favorite pet.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./logo.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;favorite&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;🥦 Let's give this a well.&lt;br&gt;
Our result: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSsQDja6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onb073a5otg2ctk295ta.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSsQDja6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onb073a5otg2ctk295ta.PNG" alt="Image description" width="880" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🥦 Next, we create a component folder and a file, I call it Choose.jsx. You can call it whatever you like.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a component
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;cute&lt;/span&gt; &lt;span class="nx"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
        &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.google.com/url?sa=i&amp;amp;url=https%3A%2F%2Fwww.countryliving.com%2Flife%2Fkids-pets%2Fnews%2Fa44032%2Fdog-owners-take-more-pictures-of-their-pet-than-their-spouse%2F&amp;amp;psig=AOvVaw1qbUbk4x640915cLFiHmZ0&amp;amp;ust=1642064745637000&amp;amp;source=images&amp;amp;cd=vfe&amp;amp;ved=0CAsQjRxqFwoTCMDU14Duq_UCFQAAAAAdAAAAABAJ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cute dog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;🥦 Now let's import our Choose.jsx into the App.js component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Choose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;favorite&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should have the following on save: &lt;/p&gt;




&lt;p&gt;🥦 Now let's write the logic that toggles our dog into a cat.&lt;br&gt;
import &lt;code&gt;useState&lt;/code&gt; Hook and declare an initial value for your useState.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Choose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsToggle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;favorite&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;🥦 Next, we create  a button with an onClick function, and we tell it to change the setToggle state to true&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Choose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsToggle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setIsToggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Change&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;favorite&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🥦 Now, whenever we click our button, the value of our toggle is set to the inverse of its initial value.&lt;br&gt;
Let me show you how this works by adding a console.log to the isToggle variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Choose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsToggle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setIsToggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Change&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;favorite&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🥦 If you open your developer console by pressing f12 or use the inspect we have:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8uhwg7v7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpnpbuas7ve7kgsdmaxm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8uhwg7v7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpnpbuas7ve7kgsdmaxm.PNG" alt="Image description" width="780" height="634"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, using ternary operators, let's build a conditional rendering that says, "Render my lovely dog or give me a cat." &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#method-1-inline-if-with-logical-ampamp-operator"&gt;
  &lt;/a&gt;
  🎯 Method 1: Inline If with Logical &amp;amp;&amp;amp; Operator
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import "./App.css";
import { Choose } from "./components/Choose";

function App() {
  const [toggle, setIsToggle] = useState(false);
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;h1&amp;gt;Choose your favorite pet&amp;lt;/h1&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setIsToggle(!toggle)}&amp;gt;Change&amp;lt;/button&amp;gt;
      {toggle &amp;amp;&amp;amp; &amp;lt;Choose /&amp;gt;}
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Explanation:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{toggle &amp;amp;&amp;amp; &amp;lt;Choose /&amp;gt;}&lt;/code&gt; this means if toggle is true, render  component.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#method-2-inline-ifelse-with-conditional-operator"&gt;
  &lt;/a&gt;
  🎯 Method 2: Inline If-Else with Conditional Operator
&lt;/h2&gt;

&lt;p&gt;Let's bring our cat into the picture by declaring that if we can't choose between a dog and a cat, we'll take a cat.&lt;/p&gt;

&lt;p&gt;In the Choose.jsx file, quickly develop and export a working component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;cute&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
        &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://th-thumbnailer.cdn-si-edu.com/ZoiTX0zdWNy5LOUC6Yh-qQsDcsE=/fit-in/1072x0/filters:focal(1834x1782:1835x1783)/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer/11/2c/112cfb7f-d73f-40d6-afab-7e05be7c7b73/andy_warhol_ch_6.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cute cat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;500px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;380x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's import it into our App.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Choose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsToggle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;favorite&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setIsToggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Change&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Cat&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our final code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Choose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsToggle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;favorite&lt;/span&gt; &lt;span class="nx"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setIsToggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Change&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Cat&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where the magic happens &lt;code&gt;{toggle ? &amp;lt;Choose /&amp;gt; : &amp;lt;Cat /&amp;gt;}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here, we are saying if toggle is true render  which is our dog and if not render cat.&lt;/p&gt;

&lt;p&gt;I hope you found this article useful.For reference, you can find the entire code here &lt;a href="https://github.com/drsimplegraffiti/conditional-render-react-tuts"&gt;click&lt;/a&gt;. Thanks &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/conditional-rendering.html"&gt;React&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
  </channel>
</rss>
