<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Changing careers into tech: Why perseverance and mindset matters.</title>
      <author>Rita Correia</author>
      <pubDate>Fri, 12 Feb 2021 16:39:36 +0000</pubDate>
      <link>https://dev.to/ritaxcorreia/changing-careers-into-tech-why-perseverance-and-mindset-matters-3g6j</link>
      <guid>https://dev.to/ritaxcorreia/changing-careers-into-tech-why-perseverance-and-mindset-matters-3g6j</guid>
      <description>&lt;p&gt;2020 was the year of &lt;em&gt;change&lt;/em&gt; for all of us. We had to adapt to a new reality, where draconian words like ‚Äúlockdown‚Äù and ‚Äúpandemic‚Äù became the new normal. It was also the year I decided to turned my life around and change careers‚Ä¶‚Ä®‚Ä®&lt;/p&gt;

&lt;p&gt;What in Summer 2020 seemed to be a huge mountain to climb, it became a reality in early February 2021 and I still have to pinch myself that I actually pulled this off, and &lt;strong&gt;landed my first role and a Frontend Engineer&lt;/strong&gt;! üéâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-true-what-they-say-it-aint-easy" class="anchor"&gt;
  &lt;/a&gt;
  It's true what they say, it ain't easy
&lt;/h2&gt;

&lt;p&gt;I must say that changing careers in your early 30‚Äôs with a young child in tow sure is challenging, although having a lot of self-discipline and focus definitely helped keeping me in the right track.&lt;/p&gt;

&lt;p&gt;If you‚Äôre on the same path and pursuing a career in tech, please don‚Äôt give up! Stepping out of our comfort zone and trying something new requires a level of mental strength that we might not be used to anymore, especially as adults.&lt;br&gt;
The uncertainty and self-doubt can be hard to manage at times, and in these moments a new mindset must come into play: the &lt;strong&gt;growth mindset&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-mindset-had-to-change" class="anchor"&gt;
  &lt;/a&gt;
  My mindset had to change
&lt;/h2&gt;

&lt;p&gt;Whether I liked or not, I grew up both being moulded by or fighting against what the people around me thought would be the best for me. Good intentions, of course. But it was always implicit that because I wasn‚Äôt getting straight As in Maths, pursuing studies or a career in STEM wouldn‚Äôt be the best option for me. Unfortunately, lots of girls and young women go through these exact same feelings of inadequacy, having invisible barriers put up in front of them.&lt;br&gt;
I developed my personality under the assumption I wasn‚Äôt good enough or smart enough, and with that came a fixed mindset that lasted throughout my early adulthood. Although I always considered myself hardworking and goal-driven, this mindset eventually led me to follow the path of least resistance. I always tended to dedicate time to things I was comfortable with, where it was easy to see what was on the other side of the tunnel.&lt;/p&gt;

&lt;p&gt;Software engineering wasn‚Äôt even an option for me while growing up in countryside Portugal, especially as a young female. For some time I wanted to be a journalist while my family tried hard to convince me I should study Law. I wasn't having it. I enjoyed being creative and ended up studying New Communication Technologies in University, which thankfully gave me a good mix of user-centric design, coding and computer science fundamentals. I learnt HTML, CSS, ActionScript&lt;br&gt;
(you know Flash was all the rage in 2005) and some PHP (which I now remember absolutely nothing about), with some 3D modeling and video in the mix.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Perseverance is your most powerful weapon when it comes to learning new skills.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did finish my Bachelor's Degree but I didn‚Äôt even consider pursuing a technical role because &lt;em&gt;again&lt;/em&gt; I didn‚Äôt think I was smart enough, good enough or that i could possibly succeed in the tech world. My Uni experience definitely felt like a "boys club", where the men were into programming and I once again leaned towards the creative aspects of my degree, finding comfort hanging out with other like minded females, who highly likely felt a bit lost like me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-career-path-doesnt-have-to-be-linear" class="anchor"&gt;
  &lt;/a&gt;
  A career path doesn't have to be linear
&lt;/h2&gt;

&lt;p&gt;Being professionally stagnated to a point of having no real sense of direction was consuming me. With age and increasing dissatisfaction in regards to my choice of career, I eventually stopped caring about what people expected of me.&lt;br&gt;
I stopped believing in the notion that you are born with only one talent, and that you are expected to stay in what will likely be a fifty-year work-life.&lt;/p&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;We are multidisciplinary beings with a plethora of interests and capabilities and we can find ways to channel them, if we're audacious enough to step outside our own box. &lt;/p&gt;

&lt;p&gt;Being a mother, I also wanted to set a good example for my daughter, hoping to become someone she can look up to as she grows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#persevere-and-believe-in-yourself" class="anchor"&gt;
  &lt;/a&gt;
  Persevere and believe in yourself
&lt;/h2&gt;

&lt;p&gt;You can be anything you want to be, if you work hard enough and keep persevering.&lt;/p&gt;

&lt;p&gt;Our talents can be developed through hard work, good strategies and discipline. People with a growth mindset tend to achieve more than those who believe their talents are innate gifts, and because of this they will put more energy into learning.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For the first time, I stuck with something I was inherently both fascinated and scared by.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Countless times I considered giving up and taking a U-turn, but I am glad I persevered and kept at it. If changing careers into tech is something you're currently attempting, &lt;strong&gt;DO NOT GIVE UP!&lt;/strong&gt;&lt;br&gt;
Sharing goals with close family and friends will help massively as they will likely be rooting for you, while making you accountable.&lt;/p&gt;

&lt;p&gt;It was also extremely important having some badass role models and an incredible sense of support from the &lt;a href="https://twitter.com/"&gt;Twitter&lt;/a&gt; community, where I could share my journey with other folks like me.&lt;br&gt;
There are great initiatives to help you stick to your goals such as #100DaysOfCode, #Javascript30, #7Days7Projects or even #30Days30Projects. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xOaKl55m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b72e0dijbavzhndt12xs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xOaKl55m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b72e0dijbavzhndt12xs.jpg" alt="if-we-persevere"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;On my next blogpost, I will share some tips and advice from my experience in landing my first tech role!&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>womenintech</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>I  wrote a crawler for the first time.</title>
      <author>Kayla Sween</author>
      <pubDate>Fri, 12 Feb 2021 15:58:51 +0000</pubDate>
      <link>https://dev.to/kaylasween/i-wrote-a-crawler-for-the-first-time-58l3</link>
      <guid>https://dev.to/kaylasween/i-wrote-a-crawler-for-the-first-time-58l3</guid>
      <description>&lt;p&gt;Early on in the pandemic, I decided that I wanted a way to track the moving average of cases per day in my state, Mississippi, since that wasn't something our Department of Health had a graph for at the time. Since I thought, "you know, this won't be too long... I could definitely just do this for a few months," I had been manually adding data for every single day until the end of January. I would frequently forget or just not want to look at the data for a month or more at a time. I realized I needed to find a way to automate this process so I didn't have to go back through the last month's data to update my graph. So, I decided to finally write a crawler to get all that data from our state‚Äôs Department of Health website without even thinking about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-crawler" class="anchor"&gt;
  &lt;/a&gt;
  The Crawler
&lt;/h2&gt;

&lt;p&gt;For me, this was the easy part. I wanted to write a web crawler in a language I was comfortable with to get it up relatively quickly, so I decided on JavaScript. I took bits and pieces from various tutorials I had found and decided on using Axios to grab the data and Cheerio to parse it.&lt;/p&gt;

&lt;p&gt;To start out, I added Axios and Cheerio to my site.&lt;/p&gt;

&lt;p&gt;for yarn: &lt;code&gt;yarn add axios cheerio&lt;/code&gt;&lt;br&gt;
for npm: &lt;code&gt;npm install axios cheerio&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, I included them in the JavaScript file I used for my crawler code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const axios = require('axios')
const cheerio = require('cheerio')&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could also do it the ‚ú®ES6 way‚ú®:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import axios from 'axios'
import cheerio from 'cheerio'&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also included my JSON file and filestream so I could add the newest data to that JSON file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const fs = require('fs')
const data = require('../src/constants/covidData.json')&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, I created a function to get the latest cases for the day off of the MSDH website. I fetched the data with Axios, loaded it into Cheerio, and then pulled the value out of the section of the DOM that contained the current day's data. I found this selector by going into the dev tools in the browser and looking for the section of the page that contained the daily case data. In this case, there was a &lt;code&gt;data-description&lt;/code&gt; attribute on a &lt;code&gt;p&lt;/code&gt; tag that helped me locate the correct HTML element. I removed any commas from the string it returned and made sure that it was getting saved as an integer so it would work with my charts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const msdh = 'https://msdh.ms.gov/msdhsite/_static/14,0,420.html'
const getDailyCases = async () =&amp;gt; {
  try {
    const { data } = await axios.get(msdh)
    const $ = cheerio.load(data);
    let dailyCases = parseInt($('[data-description="New cases"]').text().replace(/,/g, ''))

    return dailyCases
  } catch (error) {
    throw error;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I created a new date object. And since All data is from the previous day, I set the date to the day before.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let today = new Date()
today.setDate(today.getDate() - 1)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then initialized my data object to eventually add those two pieces of information to an object to add to my JSON file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let dailyCases = {
    newCases: 0,
    date: today.getFullYear() + '-' + today.getMonth() + '-' + today.getDate() //formatting date to match what I needed
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I wrote another async function to call my &lt;code&gt;getDailyCases&lt;/code&gt; function and, after it gets that data, add it to my JSON file as long as there are new cases, and that date doesn't exist in the JSON file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const getCovidData = async () =&amp;gt; {
  dailyCases.newCases = await getDailyCases()

  if (!data.data.includes(daily.date) &amp;amp;&amp;amp; daily.newCases != 0) {
    data.data.push(dailyCases)

    fs.writeFile('src/constants/covidData.json', JSON.stringify(data), (err) =&amp;gt; {
      if (err) {
        throw err;
      }
    })
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, of course, call that function so that it'll actually run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getCovidData()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all there is to the crawler! You can check out the &lt;a href="https://github.com/kaylasween/KaylaSweenWebsite/blob/main/functions/msdatacrawler-background.js"&gt;full crawler file on my GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-it-to-run-regularly" class="anchor"&gt;
  &lt;/a&gt;
  Getting it to run regularly
&lt;/h2&gt;

&lt;p&gt;My first thought was to use a combination of Netlify functions to run the web crawler and Zapier to schedule the daily deployment. I quickly realized this wasn't going to work. Since my database was just a JSON file in my GitHub repo, I needed to make sure that the data was getting added every day. When I tried using the Netlify/Zapier combination, it would run the crawler and "overwrite" the last entry daily, since that data wasn't getting pushed back to GitHub.&lt;/p&gt;

&lt;p&gt;After that didn't pan out, I decided to try GitHub Actions, which I had never used before. (&lt;strong&gt;Spoiler&lt;/strong&gt;, this is what I ended up using.)&lt;/p&gt;

&lt;p&gt;I just jumped right into GitHub Actions without any real research or planning. Normally, that's not something I'd recommend. However, it worked out pretty well this time because of how well the default YAML file was commented. I used a lot of the default YAML file for the action.&lt;/p&gt;

&lt;p&gt;To get the Action to run daily, I used &lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07"&gt;POSIX cron syntax&lt;/a&gt; to set the interval.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;on:
  schedule:
    - cron: "00 20 * * *"&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of those places separated by spaces represents a unit of time. This will determine how often your Action will run. A lot of times, you may see that denoted by five asterisks (&lt;code&gt;"* * * * *"&lt;/code&gt;). The first place is the minute field. The second place is the hour (which hour in UTC). The third is the day. The fourth is the month (&lt;code&gt;1&lt;/code&gt;-&lt;code&gt;12&lt;/code&gt; or &lt;code&gt;JAN&lt;/code&gt;-&lt;code&gt;DEC&lt;/code&gt;). Finally, the fifth place is the day of the week (&lt;code&gt;0&lt;/code&gt;-&lt;code&gt;6&lt;/code&gt; or &lt;code&gt;SUN&lt;/code&gt;-&lt;code&gt;SAT&lt;/code&gt;). If you leave any of these as a star, it'll run for every one of those units of time. In my code, I wanted my Action to run every day at UTC 20:00 (or 2PM CST) to ensure the Department of Health had time to publish data that day. Therefore, I only put units of time in the minute and hour places and left the rest as asterisks.&lt;/p&gt;

&lt;p&gt;Once I determined how often I needed it to run, I needed to define what the actual job (with steps!) was that I need it to run. So I set up Node.js, installed my dependencies (Axios and Cheerio), ran my crawler, and then pushed the changes to my repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on (I left it as the default)
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.4
    
      - name: Install axios and cheerio
        run: |
          npm install axios
          npm install cheerio
    
      - name: Get Covid Data
        run: |
          node functions/crawler.js
          
      - name: Push changes
        uses: actions-go/push@v1
        with:
          # The commit message used when changes needs to be committed
          commit-message: "running daily COVID data crawler"&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all there is to it! Now the web crawler is running every day! You can check out the &lt;a href="https://github.com/kaylasween/KaylaSweenWebsite/blob/main/.github/workflows/main.yml"&gt;GitHub Action file on my GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can also see the final product in action on the &lt;a href="https://www.kaylasween.com/COVID-19/"&gt;COVID-19 page on my website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seniorish-developers-get-intimidated-too" class="anchor"&gt;
  &lt;/a&gt;
  Senior-ish developers get intimidated too.
&lt;/h2&gt;

&lt;p&gt;Writing a web crawler was something I put off for a LONG time in my career. It was probably the first thing I was asked to do as a developer (which I didn't). Quite honestly, it intimidated me a lot and took me around 9 years to get over that intimidation. I just assumed that I wouldn't be able to do it, and I let that consume me. Now, every single time I see that commit message "running daily COVID data crawler," I feel so proud. I've built many things throughout my career, but this may be the thing I'm most proud of because &lt;strong&gt;I proved to myself that I could do it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let this be a lesson for new developers that sometimes things don't get less scary. You just get less afraid of failing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Illustration from &lt;a href="https://undraw.co/illustrations"&gt;Undraw&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Implement Google Photos Grid in javascript</title>
      <author>Shailesh</author>
      <pubDate>Fri, 12 Feb 2021 13:59:08 +0000</pubDate>
      <link>https://dev.to/shaileshpandit/how-to-implement-google-photos-grid-in-javascript-575i</link>
      <guid>https://dev.to/shaileshpandit/how-to-implement-google-photos-grid-in-javascript-575i</guid>
      <description>&lt;p&gt;This is a step by step tutorial of how I implemented Scrubbable Photos Grid in javascript.&lt;/p&gt;

&lt;p&gt;Google Photos uses virtual scrubbable photos grid. Scrubbable photos grid is laying out all your photos in grid so that users can jump to any random year/month/day in their timeline. This grid is virtual so that we are efficiently using the user's resources like cpu, memory, disk and network.&lt;/p&gt;

&lt;p&gt;In this blog post I will cover how to implement such a grid in javascript, whether we can substitute this with a simple navigation mechanism for jumping to random year/month/day is separate design discussion all together.&lt;/p&gt;

&lt;p&gt;This implementation will use many techniques to make this virtual grid as close to actual grid including&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Estimating and maintaining grid height as close to actual&lt;/li&gt;
&lt;li&gt;Loading only visible photos to DOM&lt;/li&gt;
&lt;li&gt;Detaching not visible photos from DOM&lt;/li&gt;
&lt;li&gt;Positioning photos absolutely inside grid&lt;/li&gt;
&lt;li&gt;Adjusting scroll position to compensate layout shifts in some scenarios&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#design" class="anchor"&gt;
  &lt;/a&gt;
  Design
&lt;/h1&gt;

&lt;p&gt;Throughout the blog I will give summary of design decisions Google has taken for their scrubbable grid, but I will recommend to check this &lt;a href="https://medium.com/google-design/google-photos-45b714dfbed1"&gt;Google Design Blog&lt;/a&gt; for details.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are going to keep our design goals same as stated in Google Design Blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"&lt;strong&gt;Scrubbable Photos&lt;/strong&gt; - the ability to quickly jump to any part of the photo library.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Justified Layout&lt;/strong&gt; - fill the width of the browser and preserve the aspect-ratio of each photo (no square crops).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;60fps Scrolling&lt;/strong&gt; - ensuring the page remains responsive even when looking at many thousands of photos.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Instantaneous Feel&lt;/strong&gt; - minimize the time waiting for anything to load."
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Google has gone extra mile to ensure row heights are uniform and near the target height while implementing justified layout, we will just use Flicker's justified layout lib for this demo.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#implementation" class="anchor"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h1&gt;

&lt;p&gt;I will be implementing this step by step, each step is a commit in the &lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid"&gt;scrubbable-photos-grid&lt;/a&gt; Github Repo. If you want to skip all detailed explanation and check final implementation, check this &lt;a href="https://glitch.com/edit/#!/scrubbable-photos-grid?path=script.js%3A15%3A0"&gt;Glitch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our grid will be divided into sections, sections will have segments, segments will have tiles and tiles will have an image tag. Will cover reasons for these divisions in detail when we need to add them.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EE58vtid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fg27c23lcwzbdcve5rhj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EE58vtid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fg27c23lcwzbdcve5rhj.png" alt="Section Segments and Tiles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I chose javascript to demonstrate how things should happen at runtime, you should be able to implement this in any client side framework of your choice.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-1-dividing-whole-grid-in-sections-and-estimating-their-heights" class="anchor"&gt;
  &lt;/a&gt;
  Step 1 - Dividing whole grid in sections and estimating their heights
&lt;/h2&gt;

&lt;p&gt;In contrast to pagination and infinite scrolling, scrubbable grid always has all the photos present in the grid giving correct representation of finite height and size of scroll knob. This also gives the user ability to jump to any random time in the whole timeline of photos instantly.&lt;/p&gt;

&lt;p&gt;An inefficient implementation of this will load metadata like width and height of all photos in the whole timeline as soon as page loads. Using the width and height of each photo we can allocate space on page for actual height of the grid. This will waste a lot of bandwidth and initial load time will be unacceptable.&lt;/p&gt;

&lt;p&gt;To reduce this initial metadata payload, we will divide the whole timeline into virtual sections and estimate the height of each section to get the estimated height of the grid. Our initial payload will consist of an array of all sections with a number of images in those sections. Simplest way to divide the whole grid into sections is to have a section per month in the timeline. So if users timeline spans 10 years, our initial payload will consist of max 120 sections and number of photos in each section.&lt;/p&gt;

&lt;p&gt;We start by adding basic html with a &lt;code&gt;grid div&lt;/code&gt; as a container of our  grid.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Apis used are simulated in &lt;code&gt;api.js&lt;/code&gt;, it basically depends on included &lt;code&gt;store.json&lt;/code&gt; for all section details. We add the &lt;code&gt;getSections&lt;/code&gt; api to retrieve all sections and count of images inside each section. Apis are using random latency of 50-550ms.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Sample output of &lt;code&gt;getSections&lt;/code&gt; api&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;We add &lt;code&gt;script.js&lt;/code&gt; for loading our grid. Our entry point is &lt;code&gt;loadUi&lt;/code&gt;, in this we call &lt;code&gt;getSections&lt;/code&gt; api. After getting all sections we allocate space by creating an empty &lt;code&gt;div&lt;/code&gt; for each section with estimated height.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;¬†&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As described in Google Design Blog, to estimate height of sections we will assume average aspect ratio of all images being 3:2, approximate total width of all images in that section if laid horizontally and divide it by our grid width to approximate height of section when these images are wrapped at grid width.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Next we add basic &lt;code&gt;style.css&lt;/code&gt; to highlight sections&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid/commit/7ddef4c73ee010f248a0235bddc3a80496ec4bb5"&gt;Step 1 Full Commit&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step 1 Result&lt;/strong&gt; - Observe that all empty section divs with estimated heights are created on load and give estimated height to the whole grid and scroll knob.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9JpUmHmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bsrtdeavyr84276gzyj4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JpUmHmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bsrtdeavyr84276gzyj4.gif" alt="Step 1"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-2-populating-section-with-segments" class="anchor"&gt;
  &lt;/a&gt;
  Step 2 - Populating section with segments
&lt;/h2&gt;

&lt;p&gt;While sections are virtual divisions of the whole grid to minimize initial load resources, segments are visible divisions of the grid for users to navigate and see photos in logical groups. We are going to use static segments for each day, but can be dynamic based on location or more granular time slots based on the number of photos a user has in a day.&lt;/p&gt;

&lt;p&gt;We add &lt;code&gt;getSegments(sectionId)&lt;/code&gt; api to retrieve all segments of a section and images inside each segment.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Here is a sample output of a &lt;code&gt;getSegments(sectionId)&lt;/code&gt; call&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Next we add &lt;code&gt;populateSection(sectionDiv)&lt;/code&gt; method in &lt;code&gt;script.js&lt;/code&gt; to populate a section div. While populating a section div we call &lt;code&gt;getSegments(sectionId)&lt;/code&gt; api, get segment html for all inner segments, add it to section div and update its height to 100% from the estimated height set initially.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;For generating segment html we use &lt;a href="https://www.npmjs.com/package/justified-layout"&gt;justified-layout&lt;/a&gt; lib. It gives us an absolute layout for all the tiles inside the segment. We generate individual tile html using this absolute layout and add it as segment childs.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;We call &lt;code&gt;populateSection&lt;/code&gt; eagerly in &lt;code&gt;populateGrid&lt;/code&gt; for all sections to demonstrate how populated sections will look like in ui and in DOM.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Finally we make tiles absolutely positioned relative to segments and highlight segments and tiles in &lt;code&gt;style.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid/commit/200db9fc752ae537c8f8d153148a27c5add6e0d4"&gt;Step 2 Full Commit&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step 2 Result&lt;/strong&gt; - Observe all sections and segments eagerly loaded.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fJZRGi21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hl2mghdchvvmc04udpns.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fJZRGi21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hl2mghdchvvmc04udpns.gif" alt="Step 2"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-3-lazily-load-and-unload-sections" class="anchor"&gt;
  &lt;/a&gt;
  Step 3 - Lazily load and unload sections
&lt;/h2&gt;

&lt;p&gt;While in previous step we eagerly loaded all sections on page load for demo, we want to attach sections when they are about to come in viewport and detach when they go out of viewport. We will use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;intersection observer&lt;/a&gt; to implement this.&lt;/p&gt;

&lt;p&gt;First we create &lt;code&gt;sectionObserver&lt;/code&gt; IntersectionObserver with &lt;code&gt;handleSectionIntersection&lt;/code&gt; as the intersection handler and use &lt;code&gt;200px&lt;/code&gt; of margin so that intersection will be triggered when our sections cross virtual viewport of actual viewport + 200px extra on both sides vertically.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;We handle intersection events by populating incoming sections and detaching outgoing sections from the virtual viewport. As populating a section needs fetching segments which is async, actual population can go out of order from intersection order. To mitigate this we maintain &lt;code&gt;lastSectionUpdateTimes&lt;/code&gt; for all sections and only populate if this section was not updated meanwhile.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;We detach the section by removing all child segments and not changing height.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;We attach &lt;code&gt;sectionObserver&lt;/code&gt; to all sections instead of eagerly loading all sections in &lt;code&gt;populateGrid&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid/commit/b6cab98216964a789f250285cf725e91cad535a7"&gt;Step 3 Full Commit&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step 3 Result&lt;/strong&gt; - Observe how section divs are getting loaded and unloaded as we scroll.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9EYyEfaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z04umeikzxp2exgz6i6q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9EYyEfaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z04umeikzxp2exgz6i6q.gif" alt="Step 3"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-4-moving-segments-and-sections-to-absolute-positioning" class="anchor"&gt;
  &lt;/a&gt;
  Step 4 - Moving segments and sections to absolute positioning
&lt;/h2&gt;

&lt;p&gt;Ideally browsers will calculate positioning changes of all segments and sections efficiently when height of some section changes. But if we want to make sure we control all positioning changes, we can move both segments and sections to absolute positioning. Our sections will be positioned absolutely within the grid and segments will be positioned absolutely within sections. Our tiles are already positioned absolutely within segments.&lt;/p&gt;

&lt;p&gt;First we set sections and segments to absolute positioning and remove margins in css.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Next we maintain &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;lastUpdateTime&lt;/code&gt; of all sections as a state in &lt;code&gt;sectionStates&lt;/code&gt;. We initialize it in &lt;code&gt;populateGrid&lt;/code&gt; and use it while creating initial detached sections.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Next we update &lt;code&gt;populateSection&lt;/code&gt; to generate segments with absolute positioning, calculating top of each segment. We calculate the new height of the section, check if it has changed, in case it is changed, we move all next sections by adding &lt;code&gt;heightDelta&lt;/code&gt; to their tops. We also keep &lt;code&gt;sectionStates&lt;/code&gt; in sync of these changes.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;We don't need to keep the old height any more after detaching the section now, because absolute height remains the same after removing child segments.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid/commit/ce0d430f51550ea6c69dd0a81cde9fcb5b5b8b26"&gt;Step 4 Full Commit&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step 4 Result&lt;/strong&gt; - Observe how absolute positioning is maintained by updating the top of all following section divs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Xb6aDN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bu4sw6mx9bfstiya2v7y.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Xb6aDN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bu4sw6mx9bfstiya2v7y.gif" alt="Step 4"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-5-adjust-scroll-position-in-case-of-layout-shift" class="anchor"&gt;
  &lt;/a&gt;
  Step 5 - Adjust scroll position in case of layout shift
&lt;/h2&gt;

&lt;p&gt;At this point if you try to scroll down, sections will get attached and detached as expected and scrolling will feel normal. This works as the user scrolls linearly, sections get attached, their height changes, top of further sections increases, grid height changes, whole layout changes and yet we don't feel jumps while scrolling. This is because all layout changes are after current scroll position.&lt;/p&gt;

&lt;p&gt;This will change if we allow random jumps to the scroll position. e.g. If we jump to a random scroll position on page load, we will be in state with some detached sections with estimated height prior to our current scroll position. Now if we scroll up, sections will get attached before scroll position and will result in layout changes before scroll position. It will feel like the whole page is jumping when we scroll. To try this just add the following to Step 4 commit inside &lt;code&gt;loadUi&lt;/code&gt; and try scrolling up.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;strong&gt;Page Jumping&lt;/strong&gt; - Observe how it feels like page is jumping to new position while scrolling&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P1ABhhoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sp8rhw5l0ii046gsk5n2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1ABhhoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sp8rhw5l0ii046gsk5n2.gif" alt="Page Jumping"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;To fix this, we check if our current scroll position is ahead of the section for which we adjusted height and adjust scroll by &lt;code&gt;heightDelta&lt;/code&gt; at end of &lt;code&gt;populateSection&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid/commit/df9599074b011876b9b31b2466503d47b20e98ef"&gt;Step 5 Full Commit&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Final Result&lt;/strong&gt; - Observe how page jumping is fixed by adjusting scroll position&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCdbb4Ql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jq46vi1o3gsmhgin8b8c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCdbb4Ql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jq46vi1o3gsmhgin8b8c.gif" alt="Final"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Final Glitch&lt;/strong&gt; - Open &lt;a href="https://scrubbable-photos-grid.glitch.me"&gt;live app&lt;/a&gt;. Use rewind in Glitch to see each step in action.&lt;br&gt;
&lt;/p&gt;
&lt;div class="glitch-embed-wrap"&gt;
  &lt;iframe src="https://glitch.com/embed/#!/embed/scrubbable-photos-grid?path=script.js" alt="scrubbable-photos-grid on glitch"&gt;&lt;/iframe&gt;
&lt;/div&gt;




&lt;h1&gt;
  &lt;a href="#whats-next" class="anchor"&gt;
  &lt;/a&gt;
  Whats next
&lt;/h1&gt;

&lt;p&gt;There is lot to add to this, here are some things you can try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add actual images.&lt;/li&gt;
&lt;li&gt;Go through google blog and add improvements they mentioned.&lt;/li&gt;
&lt;li&gt;Cancel ongoing api call to fetch segments when that section goes out of the virtual viewport to save bandwidth when the user is scrolling fast. We can even defer fetching when the speed of scrolling is high.&lt;/li&gt;
&lt;li&gt;Add intersection observers to tiles to load low-res thumbnails for distant tiles and high-res thumbnails for nearer ones.&lt;/li&gt;
&lt;li&gt;Add Google Photos like timeline instead of scroll knob, with this user will be able to jump to any year/month.&lt;/li&gt;
&lt;li&gt;Implement whole thing in some framework like React, you can create components for Section, Segment and Tile.&lt;/li&gt;
&lt;li&gt;This demo assumes that the grid consumes the whole viewport width, you can use grid container's width. It is currently not handling viewport resize also.&lt;/li&gt;
&lt;li&gt;One can even make open source component for scrubbable grid.&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Google Design Blog - &lt;a href="https://medium.com/google-design/google-photos-45b714dfbed1"&gt;Building the Google Photos Web UI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Flickr's Justified Layout Lib - &lt;a href="https://www.npmjs.com/package/justified-layout"&gt;justified-layout npm&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Intersection Observer - &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer Api - Web Apis - MDN&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github Repo for this implementation, with commits for each Step - &lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid"&gt;scrubbable-photos-grid&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Live App with Source Code for this implementation - &lt;a href="https://glitch.com/edit/#!/scrubbable-photos-grid?path=script.js%3A15%3A0"&gt;Glitch&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you made it this far, kudos to you! I enjoyed implementing this and even more, writing about it. This is my first tech article in long time, so any feedback is much appretiated.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Protecting your API keys with Next JS</title>
      <author>Ivan Maximiliano Saldano</author>
      <pubDate>Fri, 12 Feb 2021 13:36:49 +0000</pubDate>
      <link>https://dev.to/ivanms1/protecting-your-api-keys-with-next-js-21ej</link>
      <guid>https://dev.to/ivanms1/protecting-your-api-keys-with-next-js-21ej</guid>
      <description>&lt;h4&gt;
  &lt;a href="#this-is-the-story-of-max" class="anchor"&gt;
  &lt;/a&gt;
  This is the story of Max.
&lt;/h4&gt;

&lt;p&gt;Max thought his API keys were safe because he put them inside an &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XreQmk7ETCak0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img width="100%" src="https://i.giphy.com/media/XreQmk7ETCak0/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Max didn't know his keys were visible in the network tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B9IgU_U4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613111422990/i0K3IR3U3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B9IgU_U4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613111422990/i0K3IR3U3.jpeg" alt="Screenshot from 2021-02-12 15-25-47.jpg"&gt;&lt;/a&gt;&lt;br&gt;
ü•≤&lt;/p&gt;

&lt;p&gt;Max is actually me, Max is actually everyone.&lt;/p&gt;

&lt;p&gt;Especially when we are just learning and start playing with public APIs that require a private key.&lt;/p&gt;

&lt;p&gt;There is not a good (or any) way to protect your keys in the frontend.&lt;br&gt;
One good alternative is to create a proxy in your own server, since backend code is not exposed to the browser. But many people using these APIs are beginners that don't know much about backend yet.&lt;/p&gt;

&lt;p&gt;Well, Next JS comes to save the with its integrated and ready to use &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;API Routes&lt;/a&gt;. Which is basically a Node JS environment that you can use to create API endpoints, a server ready to go.&lt;/p&gt;

&lt;p&gt;Let's take a look.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#initial-setup" class="anchor"&gt;
  &lt;/a&gt;
  Initial setup
&lt;/h3&gt;

&lt;p&gt;First let's create a next js app.&lt;/p&gt;

&lt;p&gt;In the terminal run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app next-api-key
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn create next-app next-api-key
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then move to the app folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;next-api-key
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-different-env-file" class="anchor"&gt;
  &lt;/a&gt;
  A different .env file
&lt;/h3&gt;

&lt;p&gt;Once inside the project we can create a &lt;code&gt;.env.local&lt;/code&gt; file. This looks the same as your normal &lt;code&gt;.env&lt;/code&gt; files if you are familiar with them. The difference is that the variables inside &lt;code&gt;.env.local&lt;/code&gt; are only available in the Node JS environment of Next. This means the browser doesn't have access to them.&lt;/p&gt;

&lt;p&gt;So where can we use these variables?&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;pages&lt;/code&gt;, there is another folder called &lt;code&gt;api&lt;/code&gt;, any file inside here will be treated as an API endpoint.&lt;/p&gt;

&lt;p&gt;It works more or less like this.&lt;/p&gt;

&lt;p&gt;On the server side we have &lt;code&gt;pages/api/hello.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On the client side we can call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchHello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/hello`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// notice the naming&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// data = { name: "John Doe" }&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#protecting-the-keys" class="anchor"&gt;
  &lt;/a&gt;
  Protecting the keys
&lt;/h3&gt;

&lt;p&gt;So now that we know how that works, let's add a key in the &lt;code&gt;.env.local&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Let's pretend I have a key that I need to send in the url of my request.&lt;/p&gt;

&lt;p&gt;Let's add the key inside &lt;code&gt;.env.local&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;someSecretKeyThatNoOneShouldSee
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And instead of using our key on the client side, we use it inside &lt;code&gt;hello.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This variable won't work on the client anyways, read more &lt;a href="https://nextjs.org/docs/basic-features/environment-variables#exposing-environment-variables-to-the-browser"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/api/hello.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.i.require.keys/?&amp;amp;api_key=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You will need to install axios, node-fetch  or a similar library to manage the fetching, since &lt;code&gt;fetch&lt;/code&gt; API is not available in Node.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nothing really changes on the client side, but let's use &lt;code&gt;axios&lt;/code&gt; since we already installed it for the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchHello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;And that's about it, our key is nowhere to be seen in the network tab.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That wasn't too hard right?&lt;/p&gt;

&lt;p&gt;Please like and share if you found this helpful.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

</description>
      <category>react</category>
      <category>next</category>
      <category>security</category>
    </item>
    <item>
      <title>JavaScript: Array Tips and Tricks You Should Know</title>
      <author>Jenuel Oras Ganawed</author>
      <pubDate>Fri, 12 Feb 2021 13:02:46 +0000</pubDate>
      <link>https://dev.to/brojenuel/javascript-array-tips-and-tricks-you-should-know-3d0n</link>
      <guid>https://dev.to/brojenuel/javascript-array-tips-and-tricks-you-should-know-3d0n</guid>
      <description>&lt;p&gt;An array is one of the most common concepts of Javascript, which gives us a lot of possibilities to work with data stored inside. Taking into consideration that array is one of the most basic topics in Javascript which you learn about at the beginning of your programming path, in this article, I would like to show you a few tricks which you may not know about and which may be very helpful in coding! Let‚Äôs get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-remove-duplicates-from-an-array" class="anchor"&gt;
  &lt;/a&gt;
  1. Remove duplicates from an array
&lt;/h3&gt;

&lt;p&gt;It‚Äôs a very popular interview question about Javascript arrays, how to extract the unique values from Javascript array. Here is a quick and easy solution for this problem, you can use a new Set() for this purpose. And I would like to show you two possible ways to do it, one with .from() method and second with spread operator (‚Ä¶).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;banana&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;watermelon&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;grape&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


&lt;span class="c1"&gt;// First method&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;uniqueFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uniqueFruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns [‚Äúbanana‚Äù, ‚Äúapple‚Äù, ‚Äúorange‚Äù, ‚Äúwatermelon‚Äù, ‚Äúgrape‚Äù]&lt;/span&gt;
&lt;span class="c1"&gt;// Second method&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;uniqueFruits2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uniqueFruits2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns [‚Äúbanana‚Äù, ‚Äúapple‚Äù, ‚Äúorange‚Äù, ‚Äúwatermelon‚Äù, ‚Äúgrape‚Äù]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Easy, right?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-replace-the-specific-value-in-an-array" class="anchor"&gt;
  &lt;/a&gt;
  2. Replace the specific value in an array
&lt;/h3&gt;

&lt;p&gt;Sometimes it‚Äôs necessary to replace a specific value in the array while creating code, and there is a nice short method to do it which you might not know yet. For this, we may use .splice(start, value to remove, valueToAdd) and pass there all three parameters specifying where we want to start modification, how many values we want to change and the new values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;banana&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;watermelon&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;grape&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;potato&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;tomato&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns [‚Äúpotato‚Äù, ‚Äútomato‚Äù, ‚Äúorange‚Äù, ‚Äúwatermelon‚Äù, ‚Äúapple‚Äù, ‚Äúorange‚Äù, ‚Äúgrape‚Äù, ‚Äúapple‚Äù]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-map-array-without-map" class="anchor"&gt;
  &lt;/a&gt;
  3. Map array without .map()
&lt;/h3&gt;

&lt;p&gt;Probably everyone knows .map() method of arrays, but there is a different solution that may be used to get a similar effect and very clean code as well. We can use .from() method for this purpose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;friends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="nx"&gt;John&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="nx"&gt;Peter&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="nx"&gt;Mark&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="nx"&gt;Maria&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="nx"&gt;Monica&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="nx"&gt;Martha&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;friendsNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friendsNames&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns [‚ÄúJohn‚Äù, ‚ÄúPeter‚Äù, ‚ÄúMark‚Äù, ‚ÄúMaria‚Äù, ‚ÄúMonica‚Äù, ‚ÄúMartha‚Äù]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-empty-an-array" class="anchor"&gt;
  &lt;/a&gt;
  4. Empty an array
&lt;/h3&gt;

&lt;p&gt;Do you have an array full of elements but you need to clean it for any purpose, and you don‚Äôt want to remove items one by one? It‚Äôs very simple to do it in one line of code. To empty an array, you need to set an array‚Äôs length to 0, and that‚Äôs it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;banana&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;watermelon&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;grape&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns []&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-convert-array-to-an-object" class="anchor"&gt;
  &lt;/a&gt;
  5. Convert array to an object
&lt;/h3&gt;

&lt;p&gt;It happens that we have an array, but for some purpose, we need an object with this data, and the fastest way to convert the array into an object is to use a well-known spread operator (‚Ä¶).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;banana&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;watermelon&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fruitsObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruitsObj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns {0: ‚Äúbanana‚Äù, 1: ‚Äúapple‚Äù, 2: ‚Äúorange‚Äù, 3: ‚Äúwatermelon‚Äù, 4: ‚Äúapple‚Äù, 5: ‚Äúorange‚Äù, 6: ‚Äúgrape‚Äù, 7: ‚Äúapple‚Äù}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-fulfill-array-with-data" class="anchor"&gt;
  &lt;/a&gt;
  6. Fulfill array with data
&lt;/h3&gt;

&lt;p&gt;There are some situations when we create an array, and we would like to fill it with some data, or we need an array with the same values, and in this case .fill() method comes with an easy and clean solution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns [‚Äú1‚Äù, ‚Äú1‚Äù, ‚Äú1‚Äù, ‚Äú1‚Äù, ‚Äú1‚Äù, ‚Äú1‚Äù, ‚Äú1‚Äù, ‚Äú1‚Äù, ‚Äú1‚Äù, ‚Äú1‚Äù, ‚Äú1‚Äù]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-merge-arrays" class="anchor"&gt;
  &lt;/a&gt;
  7. Merge arrays
&lt;/h3&gt;

&lt;p&gt;Do you know how to merge arrays into one array not using .concat() method? There is a simple way to merge any amount of arrays into one in one line of code. As you probably realized already spread operator (‚Ä¶) is pretty useful while working with arrays and it‚Äôs the same in this case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;banana&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;meat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;poultry&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;beef&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;fish&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;vegetables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;potato&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;tomato&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;cucumber&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="nx"&gt;meat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="nx"&gt;vegetables&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúorange‚Äù, ‚Äúpoultry‚Äù, ‚Äúbeef‚Äù, ‚Äúfish‚Äù, ‚Äúpotato‚Äù, ‚Äútomato‚Äù, ‚Äúcucumber‚Äù]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-find-the-intersection-of-two-arrays" class="anchor"&gt;
  &lt;/a&gt;
  8. Find the intersection of two arrays
&lt;/h3&gt;

&lt;p&gt;It‚Äôs also one of the most popular challenges which you can face on any Javascript interview because it shows if you can use array methods and what is your logic. To find the intersection of two arrays, we will use one of the previously shown methods in this article, to make sure that values in the array we are checking are not duplicated and we will use .filter method and .includes method. As a result, we will get the array with values that were presented in both arrays. Check the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;numOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;numTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;duplicatedValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numOne&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;numTwo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;duplicatedValues&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns [2, 4, 6]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-remove-falsy-values-from-an-array" class="anchor"&gt;
  &lt;/a&gt;
  9. Remove falsy values from an array
&lt;/h3&gt;

&lt;p&gt;At first, let‚Äôs defined falsy values. In Javascript, falsy values are false, 0, ‚Äû‚Äù, null, NaN, undefined. Now we can find out how to remove this kind of values from our array. To achieve this, we are going to use the .filter() method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mixedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;trueArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mixedArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trueArr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns [‚Äúblue‚Äù, 9, true, ‚Äúwhite‚Äù]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-get-random-value-form-the-array" class="anchor"&gt;
  &lt;/a&gt;
  10. Get random value form the array
&lt;/h3&gt;

&lt;p&gt;Sometimes we need to select a value from the array randomly. To create it in an easy, fast, and short way and keep our code clean we can get a random index number according to the array length. Let‚Äôs see the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;navy&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;pink&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;purple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;black&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;brown&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;randomColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#11-reversing-an-array" class="anchor"&gt;
  &lt;/a&gt;
  11. Reversing an array
&lt;/h3&gt;

&lt;p&gt;When we need to flip our array there is no need to create it through the complicated loops and functions, there is an easy array method which does it all for us, and with one line of code, we may have our array reversed. Let‚Äôs check it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;navy&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;pink&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;purple&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;black&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;brown&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;reversedColors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reversedColors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns [‚Äúbrown‚Äù, ‚Äúblack‚Äù, ‚Äúyellow‚Äù, ‚Äúorange‚Äù, ‚Äúpurple‚Äù, ‚Äúpink‚Äù, ‚Äúnavy‚Äù, ‚Äúgreen‚Äù, ‚Äúwhite‚Äù, ‚Äúblue‚Äù]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#12-lastindexof-method" class="anchor"&gt;
  &lt;/a&gt;
  12. .lastIndexOf() method
&lt;/h3&gt;

&lt;p&gt;In Javascript, there is an interesting method which allows finding the index of the last occurrence of the given element. For example, if our array has duplicated values, we can find the position of the last occurrence of it. Let‚Äôs see the code example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;lastIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 9&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#13-sum-all-the-values-in-the-array" class="anchor"&gt;
  &lt;/a&gt;
  13. Sum all the values in the array
&lt;/h3&gt;

&lt;p&gt;Another challenge which happens very often during Javascript Engineer interviews. Nothing scary comes here; it can be solved using .reduce method in one line of code. Let‚Äôs check out the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 14&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this article, I presented you 13 tricks and tips which can help you with coding and keep your code short and clean. Also, remember there are lots of different tricks which you may use in Javascript worth exploring, not only about arrays but also different data types. I hope you like the solutions provided in the article, and you will use them to improve your development process.&lt;/p&gt;

&lt;p&gt;Have a nice coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ref" class="anchor"&gt;
  &lt;/a&gt;
  REF:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.blog.duomly.com/13-useful-javascript-array-tips-and-tricks-you-should-know/"&gt;https://www.blog.duomly.com/13-useful-javascript-array-tips-and-tricks-you-should-know/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related-readings" class="anchor"&gt;
  &lt;/a&gt;
  Related readings üìñ
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.blog.duomly.com/how-to-code-learn-step-by-step-how-to-become-a-programmer-with-duomly/"&gt;How to code ‚Äì learn step by step how to become a programmer with Duomly&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.blog.duomly.com/for-loop-while-loop-do-while-loop-and-other-javascript-loops-comparison-and-performance/"&gt;For loop, while loop, do‚Ä¶while loop and other JavaScript loops ‚Äì comparison and performance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.blog.duomly.com/the-most-useful-features-in-the-latest-javascript-since-es6/"&gt;The most useful features in the latest Javascript (since ES6)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>vue</category>
      <category>react</category>
    </item>
    <item>
      <title>Still got love for format()</title>
      <author>Joe Neville</author>
      <pubDate>Fri, 12 Feb 2021 12:05:41 +0000</pubDate>
      <link>https://dev.to/joeneville_/still-got-love-for-string-format-4ck3</link>
      <guid>https://dev.to/joeneville_/still-got-love-for-string-format-4ck3</guid>
      <description>&lt;p&gt;‚úçÔ∏è In my previous post about Python f-strings, I was a little too hard on the older string formatting approach, format().&lt;br&gt;
üëÄ I was focused solely the string formatting in terms of string substitution, for which I find f-strings the more intuitive and superior approach.&lt;br&gt;
üß∞ However, as some devs rightly pointed out, format has some other, very useful, features, and should not be consigned to the mental dustbin. But rather dusted off and placed alongside f-strings in your Python toolkit when it comes to strings.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#format-uses" class="anchor"&gt;
  &lt;/a&gt;
  format() uses
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#formatting-strings-with-variable-substitution-and-concatenation" class="anchor"&gt;
  &lt;/a&gt;
  üëâ Formatting strings with variable substitution and concatenation
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"know"&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"thanks!"&lt;/span&gt;
&lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Yes, we already {} this, {} {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Yes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;know&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thanks&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;So far, so f-strings.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#string-formatting-with-padding" class="anchor"&gt;
  &lt;/a&gt;
  üëâ String formatting with padding
&lt;/h3&gt;

&lt;p&gt;If you are struggling to structure your string lay-out and presenting them in a way that is pleasing to the eye, format can help. Rather than having to count out 26 whitespaces each time (or was it 25) to get them to line up, you can use padding.&lt;br&gt;
Rather than just use empty curly braces, padding allows you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;define a field size to be inserted into the string&lt;/li&gt;
&lt;li&gt;position your characters&lt;/li&gt;
&lt;li&gt;define the fill characters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the curly braces, to the right of a colon, add the minimum number of character fields: &lt;code&gt;{:20}&lt;/code&gt; this will be 20 fields minimum.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Give me some {:20} please!"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"space"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Give&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;                &lt;span class="n"&gt;please&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Use "&amp;lt;" to left-align, "&amp;gt;" to right align and "=" to centre. The default is to left-align, as above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Give me some {:&amp;gt;20} please!"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"space"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Give&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt;                &lt;span class="n"&gt;space&lt;/span&gt; &lt;span class="n"&gt;please&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Give me some {:^20} please!"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"space"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Give&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt;        &lt;span class="n"&gt;space&lt;/span&gt;         &lt;span class="n"&gt;please&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Add in a character to fill the designed number of spaces, the default is just whitespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Give me some {:*^20} please!"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"space"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Give&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="o"&gt;*******&lt;/span&gt;&lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="o"&gt;********&lt;/span&gt; &lt;span class="n"&gt;please&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that if you want to use your own fill characters, you need to set the alignment as well, not rely on the default. Thus for left-align:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This will throw an error
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Give me some {:*20} please!"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"space"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Invalid&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="n"&gt;specifier&lt;/span&gt;
&lt;span class="c1"&gt;# Define the alignment
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Give me some {:*&amp;lt;20} please!"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"space"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Give&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="o"&gt;***************&lt;/span&gt; &lt;span class="n"&gt;please&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In fact, format uses a "mini-language" that has numerous other options. &lt;a href="https://docs.python.org/3.4/library/string.html#format-specification-mini-language"&gt;Check the Python docs for more info.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's going to be some uses for padding, but if you are trying to align your text into a table, there are Python libraries for that, which are probably a better option, like &lt;a href="https://pypi.org/project/tabulate/"&gt;tabulate.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-dictionary-values" class="anchor"&gt;
  &lt;/a&gt;
  üëâ Accessing Dictionary Values
&lt;/h3&gt;

&lt;p&gt;If you're working with Python dictionaries, format has another useful feature for you. You can access the values of a dictionary directly from format. No need to unpack to variables then reference them, you can call the dictionary inside the format argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;paint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"colour"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Sky Blue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"volume"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;"For sale, {volume} litres of {colour} paint"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'For sale, 5 litres of Sky Blue paint'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#check-this-docs-for-more" class="anchor"&gt;
  &lt;/a&gt;
  üëâ Check this docs for more
&lt;/h3&gt;

&lt;p&gt;format() has even more features that those listed here, &lt;a href="https://docs.python.org/3.4/library/string.html#format-examples"&gt;check the Python docs for more examples.&lt;/a&gt;&lt;br&gt;
Also, I've used &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-string-formatters-in-python-3"&gt;this blog from Digital Ocean&lt;/a&gt; a few times. It presents information about format() in a style that I found easier to understand than diving straight in the official docs.&lt;/p&gt;

&lt;p&gt;In conclusion, f-strings and format(); group hug. ü§ó&lt;/p&gt;

</description>
      <category>python</category>
      <category>coding</category>
    </item>
    <item>
      <title>‚ö°Ô∏èReactend "The story of react.js on backend"</title>
      <author>Orkhan Jafarov</author>
      <pubDate>Fri, 12 Feb 2021 11:13:10 +0000</pubDate>
      <link>https://dev.to/orkhanjafarovr/reactend-the-story-of-react-js-on-backend-103h</link>
      <guid>https://dev.to/orkhanjafarovr/reactend-the-story-of-react-js-on-backend-103h</guid>
      <description>&lt;p&gt;Hey guys!&lt;/p&gt;

&lt;p&gt;As I promised in &lt;a href="https://dev.to/orkhanjafarovr/express-in-react-react-backend-whut-4lkg"&gt;my previous article&lt;/a&gt;. Here's the project/framework to build your &lt;strong&gt;React-like http-server&lt;/strong&gt;.&lt;br&gt;
@reactend/express repo &lt;a href="https://github.com/gigantz/reactend-express"&gt;link&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-that" class="anchor"&gt;
  &lt;/a&gt;
  What's that?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Node.js http-server based on React-Components&lt;/li&gt;
&lt;li&gt;Express.js inside&lt;/li&gt;
&lt;li&gt;Get, Post, Delete and etc. components to use router method&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Get(render)&lt;/code&gt; and &lt;code&gt;Res.Render&lt;/code&gt; to render your regular React DOM Components&lt;/li&gt;
&lt;li&gt;useContext(ReqResContext) hook to access &lt;code&gt;req, res&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Support &lt;code&gt;styled-components&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Built-in logger (morgan)&lt;/li&gt;
&lt;li&gt;Middleware component in Router and its Routes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;handler&lt;/code&gt; prop in Route components to use as regular controller&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;and many many features that should be documented...&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#get-started" class="anchor"&gt;
  &lt;/a&gt;
  Get started
&lt;/h2&gt;

&lt;p&gt;Run this to create reactend project on your local machine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-reactend my-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#play-with-that-on-replit" class="anchor"&gt;
  &lt;/a&gt;
  Play with that on repl.it
&lt;/h3&gt;

&lt;p&gt;üïπ &lt;a href="https://repl.it/@orkhanjafarov/reactend-playground?v=1"&gt;Playground on repl.it&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;registerApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Static&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reactend/express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExpressApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Static&lt;/span&gt; &lt;span class="nx"&gt;publicPath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Logger&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cache-Control&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public, max-age=31557600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Render&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Get&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ComponentsPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;
          &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;It is okay, bro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalUrl&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Not Found&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/App&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;registerApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ExpressApp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#you-can-use-this-way-too" class="anchor"&gt;
  &lt;/a&gt;
  You can use this way too
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Middleware&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-res-components" class="anchor"&gt;
  &lt;/a&gt;
  Use Res.* components
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/redirect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Redirect&lt;/span&gt; &lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://ru.reactjs.org&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Get&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Status&lt;/span&gt; &lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Content&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No Access&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Post&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/send-file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SendFile&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public/code-example.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="nx"&gt;onError&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Get&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/render&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Render&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Shut&lt;/span&gt; &lt;span class="nx"&gt;Up&lt;/span&gt; &lt;span class="nx"&gt;And&lt;/span&gt; &lt;span class="nx"&gt;Take&lt;/span&gt; &lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;Money&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;} /&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Get&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#components" class="anchor"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note. This minor description for now (Docs is on the way)&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; - App Instance (props: port)&lt;br&gt;
&lt;code&gt;&amp;lt;Static /&amp;gt;&lt;/code&gt; - Static route (props: publicPath, path, options)&lt;br&gt;
&lt;code&gt;&amp;lt;Router /&amp;gt;&lt;/code&gt; - Router-Provider (props: path)&lt;br&gt;
&lt;code&gt;&amp;lt;Get /&amp;gt;, &amp;lt;Post /&amp;gt; and ...&lt;/code&gt; - Route component (props: path, content, handler, status)&lt;br&gt;
&lt;code&gt;&amp;lt;Middleware /&amp;gt;&lt;/code&gt; - Middleware (props: handler)&lt;br&gt;
&lt;code&gt;&amp;lt;Logger /&amp;gt;&lt;/code&gt; - morgan logger (props: mode, disabled)&lt;br&gt;
&lt;code&gt;&amp;lt;Res /&amp;gt;&lt;/code&gt; - Response components&lt;br&gt;
&lt;code&gt;&amp;lt;Res.Render /&amp;gt;&lt;/code&gt; - Render (props: component)&lt;br&gt;
&lt;code&gt;&amp;lt;Res.Content /&amp;gt;&lt;/code&gt; - Response send (props: json, text, contentType) &lt;br&gt;
&lt;code&gt;&amp;lt;Res.Status /&amp;gt;&lt;/code&gt; - Response Status (props: statusCode)&lt;br&gt;
&lt;code&gt;&amp;lt;Res.SendFile /&amp;gt;&lt;/code&gt; - Response Send File (props: path, options, onError)&lt;br&gt;
&lt;code&gt;&amp;lt;Res.Redirect /&amp;gt;&lt;/code&gt; - Redirect (props: path, statusCode)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-planning" class="anchor"&gt;
  &lt;/a&gt;
  What is planning?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Done with Docs&lt;/li&gt;
&lt;li&gt;Work on fixes/updates&lt;/li&gt;
&lt;li&gt;Write an article about "How it works inside" &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Just to be clear. It's not a production-ready product and it's not Next.js or whatever. &lt;strong&gt;Reactend&lt;/strong&gt; is an experimental project to integrate React into Node.js server. But I'm working on it and trying to nail it. Let see :) &lt;/p&gt;

&lt;p&gt;Follow me on twitter &lt;a href="https://twitter.com/orkhanjafarovr"&gt;@orkhanjafarovr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers üéâ‚ú®,&lt;br&gt;
Orkhan Jafarov&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>5 Tips for effective meetings</title>
      <author>Mauro Garcia</author>
      <pubDate>Fri, 12 Feb 2021 11:11:12 +0000</pubDate>
      <link>https://dev.to/mauro_codes/5-tips-for-effective-meetings-40dd</link>
      <guid>https://dev.to/mauro_codes/5-tips-for-effective-meetings-40dd</guid>
      <description>&lt;p&gt;After listening to the last episode of the DevDiscuss podcast with &lt;a class="comment-mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;
, &lt;a class="comment-mentioned-user" href="https://dev.to/jess"&gt;@jess&lt;/a&gt;
, and &lt;a href="https://twitter.com/GoodmanCenter"&gt;Andy Goodman&lt;/a&gt;, I decided to make a post talking about what I've learned.&lt;/p&gt;

&lt;p&gt;By the way, if you want to listen to the full episode, follow &lt;a href="https://dev.to/devdiscuss/s4-e1-this-is-how-you-have-effective-meetings"&gt;this link.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prepare-your-agenda" class="anchor"&gt;
  &lt;/a&gt;
  Prepare your agenda
&lt;/h1&gt;

&lt;p&gt;Having a well-prepared agenda is the single best predictor of a successful meeting. The agenda should cover all the things that have to be covered to prepare people to be effective. Besides, it would help if you didn't think about the agenda as a simple list of topics but as a strategic plan for the next hour of your life.&lt;/p&gt;

&lt;p&gt;Here are a few tips for a well-prepared agenda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define the objective of the meeting.&lt;/li&gt;
&lt;li&gt;Send invitations to all the participants 24 to 48 hours in advance to discuss who should be there and who doesn't.&lt;/li&gt;
&lt;li&gt;Make a list of topics that should be handled during the meeting.&lt;/li&gt;
&lt;li&gt;For each topic on the list, you may consider including:

&lt;ul&gt;
&lt;li&gt;A notation to explain how the topic will be handled. You can use three kinds of interactions: 

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Information&lt;/strong&gt;: Meaning you'll inform about something.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Discuss&lt;/strong&gt;: Meaning that you‚Äôre going to bring up a topic here, and you'll ask for feedback.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Action&lt;/strong&gt;: Meaning that this item will lead to an action (making a decision)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The name of the person who'll handle or present that topic.&lt;/li&gt;
&lt;li&gt;The estimated duration for the item&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You may include a "WW, DW, BW" (Who will do what by when) section at the end of the agenda. There you'll specify the responsible, the responsibility, and the deadline for each task.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#avoid-voting-try-gradients-of-agreement" class="anchor"&gt;
  &lt;/a&gt;
  Avoid voting; try "Gradients of Agreement."
&lt;/h1&gt;

&lt;p&gt;The thing about voting to make a decision is that there'll always be winners and losers. If you lose, you'll feel like you didn't get what you wanted.&lt;/p&gt;

&lt;p&gt;That's why you could consider using a technique called "Gradients of Agreement" to see where everyone is without making a decision. With this technique, each participant can choose between:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Endorse&lt;/li&gt;
&lt;li&gt;Endorse with reservations&lt;/li&gt;
&lt;li&gt;Abstain&lt;/li&gt;
&lt;li&gt;Disagree, but don't block&lt;/li&gt;
&lt;li&gt;Veto&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#" class="anchor"&gt;
  &lt;/a&gt;
  ‚ö†Ô∏è
&lt;/h2&gt;

&lt;p&gt;If you're faced with &lt;strong&gt;ambiguous support&lt;/strong&gt;, meaning the participants are all over the scale in response to a decision, it could be a sign that the problem was poorly defined.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#" class="anchor"&gt;
  &lt;/a&gt;
  üëé
&lt;/h2&gt;

&lt;p&gt;If you're faced with &lt;strong&gt;meager support&lt;/strong&gt;, meaning that although some team members are clustered towards endorsement, others are clustered in the low part of the scale (disagree or veto), you may consider slowing down and search for better ideas.&lt;/p&gt;

&lt;p&gt;If you want to dig deeper into &lt;strong&gt;Gradients of Agreement&lt;/strong&gt;, check out the &lt;a href="https://web.archive.org/web/20160304210428/http://www.teamstarproject.org/pdf/Team%20Decision%20Making.pdf"&gt;following link&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#think-about-the-people" class="anchor"&gt;
  &lt;/a&gt;
  Think about the people
&lt;/h1&gt;

&lt;p&gt;There are some basic rules as to what people expect from a meeting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They want their time to be used constructively and efficiently.&lt;/li&gt;
&lt;li&gt;They want to know what do they need to do to come prepared.&lt;/li&gt;
&lt;li&gt;They want to be clear about what do you expect from them after the meeting as a follow-up.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#keep-it-short" class="anchor"&gt;
  &lt;/a&gt;
  Keep it short
&lt;/h1&gt;

&lt;p&gt;Even though there are certain types of meetings that could last for hours, most of the time it's really hard to keep everyone's attention for more than 1 hour. This is especially true for online meetings.&lt;/p&gt;

&lt;p&gt;Try to keep your meetings under 1 hour so everyone can contribute in the best possible way.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#listen-to-understand-and-dont-speak-just-to-be-heard" class="anchor"&gt;
  &lt;/a&gt;
  Listen to understand and don't speak just to be heard.
&lt;/h1&gt;

&lt;p&gt;As a participant of the meeting, try to be a good listener:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Listen with the intent to understand, not to respond.&lt;/li&gt;
&lt;li&gt;Try to speak up only if you have something to contribute.&lt;/li&gt;
&lt;li&gt;Avoid speaking just to be heard or to leave your mark on the table.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h1&gt;

&lt;p&gt;As a software developer, I attended thousands of meetings during the last ten years. I witnessed awful discussions and productive conversations.&lt;/p&gt;

&lt;p&gt;I've met with people that like to use meetings as an excuse to take a break and with people that only call a meeting after an exhaustive preparation.&lt;/p&gt;

&lt;p&gt;My experience tells me that meetings can be a game-changer tool if they're used properly. It's up to each organization to follow validated methods and make a clear and complete plan for each meeting to take full advantage of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-there-any-good-tip-that-im-missing-let-me-know-in-the-comments-below" class="anchor"&gt;
  &lt;/a&gt;
  Is there any good tip that I'm missing? Let me know in the comments below üëá
&lt;/h3&gt;

</description>
      <category>productivity</category>
      <category>meetings</category>
      <category>learning</category>
    </item>
    <item>
      <title>The Most Important Thing to Understand About Component Composition üöÄ</title>
      <author>Tomasz Kula</author>
      <pubDate>Fri, 12 Feb 2021 10:42:58 +0000</pubDate>
      <link>https://dev.to/realtomaszkula/the-most-important-thing-to-understand-about-component-composition-3ia4</link>
      <guid>https://dev.to/realtomaszkula/the-most-important-thing-to-understand-about-component-composition-3ia4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The problem
&lt;/h1&gt;

&lt;p&gt;Say you are working on an e-commerce application and are tasked with creating a product page that renders a call to action button to buy awesome Nike shoes.&lt;/p&gt;

&lt;p&gt;Right now, the app has a following component tree:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; product-page
&amp;gt;&amp;gt; card
&amp;gt;&amp;gt;&amp;gt; card-content
&amp;gt;&amp;gt;&amp;gt;&amp;gt; cta-button
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You want to render "Buy Air Max" as a label of the call to action button. &lt;/p&gt;

&lt;p&gt;The issue is the button component is deeply nested in the component tree, and the product model information is available in the top most component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; product-page &amp;lt;-- Here we know the product name
&amp;gt;&amp;gt; card
&amp;gt;&amp;gt;&amp;gt; card-content
&amp;gt;&amp;gt;&amp;gt;&amp;gt; cta-button  &amp;lt;-- Here we want to render the product name
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-struggle" class="anchor"&gt;
  &lt;/a&gt;
  The Struggle
&lt;/h1&gt;

&lt;p&gt;You might jump in and create the &lt;code&gt;@Input()&lt;/code&gt; in each component and pass it down to the button component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- product-page.component --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;card&lt;/span&gt; &lt;span class="na"&gt;[productName]=&lt;/span&gt;&lt;span class="s"&gt;"productName"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/card&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- card.component --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;card-content&lt;/span&gt; &lt;span class="na"&gt;[productName]=&lt;/span&gt;&lt;span class="s"&gt;"productName"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/card-content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- card-content.component --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;cta-button&lt;/span&gt; &lt;span class="na"&gt;[productName]=&lt;/span&gt;&lt;span class="s"&gt;"productName"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/cta-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- cta-button.component --&amp;gt;&lt;/span&gt;
Buy {{ productName }}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It works fine, but there are couple of issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are adding &lt;code&gt;@Inputs()&lt;/code&gt; to components which don't use them, only passing them down to the child components.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; product-page 
&amp;gt;&amp;gt; card &amp;lt;-- I don't care about the product name
&amp;gt;&amp;gt;&amp;gt; card-content &amp;lt;-- I don't care about the product name
&amp;gt;&amp;gt;&amp;gt;&amp;gt; cta-button  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;It makes adding additional &lt;code&gt;@Inputs()&lt;/code&gt; painful. If button needs more data from the product page, you have to pass it through two other components. This process is sometimes referred to as prop drilling.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; product-page &amp;lt;- We know the product price
&amp;gt;&amp;gt; card &amp;lt;-- I have to add @Input() for price
&amp;gt;&amp;gt;&amp;gt; card-content &amp;lt;-- I have to add @Input() for price
&amp;gt;&amp;gt;&amp;gt;&amp;gt; cta-button &amp;lt;-- I have to add @Input() for price
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;It makes unit testing more difficult as you have to test passing the &lt;code&gt;@Inputs()&lt;/code&gt; in each component.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#the-solution" class="anchor"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h1&gt;

&lt;p&gt;You can solve this problem using a different approach. How about we use content projection instead of drilling props with &lt;code&gt;@Inputs()&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Compare the previous solution, with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- product-page.component --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;card&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;card-content&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;cta-button&amp;gt;&lt;/span&gt;Buy {{ productName }}&lt;span class="nt"&gt;&amp;lt;/cta-button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/card-content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/card&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- card.component --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- card-content.component --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- cta-button.component --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This approach has the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We no longer add &lt;code&gt;@Inputs()&lt;/code&gt; to components that don't need them so we avoid prop drilling.&lt;/li&gt;
&lt;li&gt;Components become more extensible. You can pass as much information to the button component as you'd like, without touching the card components.&lt;/li&gt;
&lt;li&gt;Because of the previous points, unit testing becomes much easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#the-benefits" class="anchor"&gt;
  &lt;/a&gt;
  The Benefits
&lt;/h1&gt;

&lt;p&gt;Let's see how we might benefit from this approach.&lt;/p&gt;

&lt;p&gt;Say you are now tasked with extending the call to action button with a price tag - "Buy Air Max at $199".&lt;/p&gt;

&lt;p&gt;With content projection approach, we only need to make a small change in the product page component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- product-page.component --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;card&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;card-content&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;cta-button&amp;gt;&lt;/span&gt;Buy {{ productName }} at {{ productPrice }}&lt;span class="nt"&gt;&amp;lt;/cta-button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/card-content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/card&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it! See how easy it is? No props drilling, no test changes for the child components, no problem :)&lt;/p&gt;

&lt;p&gt;Hope you're having a great one, and I'll see you for more web dev posts in the future ü•≥&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-case-you-missed-it" class="anchor"&gt;
  &lt;/a&gt;
  In Case You Missed it
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/realtomaszkula/how-distinct-is-distinctuntilchanged-3pf9"&gt;How Distinct Is DistinctUntilChanged?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/realtomaszkula/streaming-the-angular-output-2369"&gt;Streaming the Angular Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>angular</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>dato.rss - RSS with Ruby</title>
      <author>Davide Santangelo</author>
      <pubDate>Fri, 12 Feb 2021 10:01:21 +0000</pubDate>
      <link>https://dev.to/daviducolo/dato-rss-rss-with-ruby-3fj1</link>
      <guid>https://dev.to/daviducolo/dato-rss-rss-with-ruby-3fj1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;My latest side Rails project is Search Engine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://datorss.com"&gt;dato.rss&lt;/a&gt; is a simple, clean and fast RSS search engine with a RESTful API.&lt;/p&gt;

&lt;p&gt;the project is divided into&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search Engine:&lt;/strong&gt; Quickly search through the millions of available RSS feeds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RESTful API:&lt;/strong&gt; Turns feed data into an awesome API. The API simplifies how you handle RSS, Atom, or JSON feeds. You can add and keep track of your favourite feed data with a simple, fast and clean REST API. All entries are enriched by Machine Learning and Semantic engines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#search" class="anchor"&gt;
  &lt;/a&gt;
  Search
&lt;/h2&gt;

&lt;p&gt;Search is just implemented with Full Text Search Postgres feature.&lt;/p&gt;

&lt;p&gt;I used the &lt;em&gt;pg_search Gem&lt;/em&gt;, which can be used in two ways:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multi Search:&lt;/strong&gt; Search across multiple models and return a single array of results. Imagine having three models: Product, Brand, and Review. Using Multi Search we could search across all of them at the same time, seeing a single set of search results. This would be perfect for adding federated search functionality to your app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search Scope:&lt;/strong&gt; Search within a single model, but with greater flexibility.&lt;/p&gt;

&lt;p&gt;for the implementation I found very useful the article &lt;a href="https://pganalyze.com/blog/full-text-search-ruby-rails-postgres"&gt;https://pganalyze.com/blog/full-text-search-ruby-rails-postgres&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;    &lt;span class="k"&gt;execute&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;
      &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt;
      &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;searchable&lt;/span&gt; &lt;span class="n"&gt;tsvector&lt;/span&gt; &lt;span class="k"&gt;GENERATED&lt;/span&gt; &lt;span class="n"&gt;ALWAYS&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;setweight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'simple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="n"&gt;setweight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'simple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="n"&gt;setweight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'simple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coalesce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;STORED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;SQL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#search-view" class="anchor"&gt;
  &lt;/a&gt;
  Search View
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--27doRaOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gf9kje6y5kcumlwlxh96.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--27doRaOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gf9kje6y5kcumlwlxh96.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#feed-rank" class="anchor"&gt;
  &lt;/a&gt;
  Feed Rank
&lt;/h2&gt;

&lt;p&gt;Feed Ranking is provided by &lt;a href="https://openrank.io"&gt;openrank&lt;/a&gt; a free root domain authority metric based on the common search pagerank dataset. The value is normilized by&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain_rank&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#machine-learning" class="anchor"&gt;
  &lt;/a&gt;
  Machine Learning
&lt;/h2&gt;

&lt;p&gt;Machine Learning is provided by &lt;a href="https://dandelion.eu"&gt;dandelion API&lt;/a&gt; Semantic Text Analytics as a service, from text to actionable data. Extract meaning from unstructured text and put it in context with a simple API.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#restful-api" class="anchor"&gt;
  &lt;/a&gt;
  RESTful API
&lt;/h2&gt;

&lt;p&gt;All API documentation is in the Wiki section. Feel free to make it better, of course.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davidesantangelo/dato.rss/wiki"&gt;https://github.com/davidesantangelo/dato.rss/wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use some features such as adding a new feed you need a token with &lt;strong&gt;write&lt;/strong&gt; permission. Currently only I can enable it. In case contact me&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#github" class="anchor"&gt;
  &lt;/a&gt;
  Github
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/davidesantangelo"&gt;
        davidesantangelo
      &lt;/a&gt; / &lt;a href="https://github.com/davidesantangelo/dato.rss"&gt;
        dato.rss
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      RSS search engine
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
DATO.RSS&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;The best RSS Search Engine experience you can find.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/ad6181d9dbb040cf7c8295b5eafcbd1bc588aa3d1bd1a88f86f3aa1418aee490/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f692f67377179337538316c6c70383865336e323735662e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/ad6181d9dbb040cf7c8295b5eafcbd1bc588aa3d1bd1a88f86f3aa1418aee490/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f692f67377179337538316c6c70383865336e323735662e706e67" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Search Engine:&lt;/strong&gt; Quickly search through the millions of available RSS feeds.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RESTful API:&lt;/strong&gt; Turns feed data into an awesome API. The API simplifies how you handle RSS, Atom, or JSON feeds. You can add and keep track of your favourite feed data with a simple, fast and clean REST API. All entries are enriched by Machine Learning and Semantic engines.&lt;/p&gt;
&lt;h2&gt;
Live&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://datorss.com" rel="nofollow"&gt;https://datorss.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Example&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;curl &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;https://datorss.com/api/searches?q=news&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;|&lt;/span&gt; json_pp
{
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;data&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: [
    {
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;86b0f829-e300-4eef-82e1-82f34d03aff6&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;entry&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;attributes&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-cce"&gt;\"&lt;/span&gt;Pandemic, Infodemic&lt;span class="pl-cce"&gt;\"&lt;/span&gt;: 2 Cartoon Characters Battling Fake News In Assam&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;url&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;https://www.ndtv.com/india-news/coronavirus-pandemic-infodemic-2-cartoon-characters-battling-fake-news-in-assam-2222333&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;published_at&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: 1588448805,
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;body&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;An English daily in Assam's&lt;/span&gt;&lt;/pre&gt;‚Ä¶&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/davidesantangelo/dato.rss"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>showdev</category>
      <category>rails</category>
      <category>ruby</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>TIL ‚Ä¢ I discovered GitHub for Unity and GitHub CLI commands</title>
      <author>Michelle Mannering</author>
      <pubDate>Fri, 12 Feb 2021 07:18:21 +0000</pubDate>
      <link>https://dev.to/mishmanners/til-i-discovered-github-for-unity-and-github-cli-commands-37na</link>
      <guid>https://dev.to/mishmanners/til-i-discovered-github-for-unity-and-github-cli-commands-37na</guid>
      <description>&lt;p&gt;Probably the coolest thing I learned this week, is how to better use GitHub with Unity. One of the problems with Unity is there are a lot of tiny files and some of them have exceptionally long file names.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-for-unity" class="anchor"&gt;
  &lt;/a&gt;
  GitHub for Unity
&lt;/h2&gt;

&lt;p&gt;A quick Google search of the term ‚Äúhow to store Unity files on GitHub‚Äù gave me an interesting result: &lt;a href="https://unity.github.com/"&gt;GitHub for Unity&lt;/a&gt;. This is an open source project which adds GitHub directly into Unity. It‚Äôs almost like working with GitHub desktop, only within Unity itself. You can choose the files you want to add, enter your commit message, and then commit to main all from Unity. But this still didn‚Äôt solve the problem of these crazy long file names that don‚Äôt seem to fit nicely into GitHub.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/github-for-unity"&gt;
        github-for-unity
      &lt;/a&gt; / &lt;a href="https://github.com/github-for-unity/Unity"&gt;
        Unity
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      GitHub for Unity
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="https://unity.github.com"&gt;GitHub for Unity&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;The GitHub for Unity extension brings &lt;a href="https://git-scm.com/" rel="nofollow"&gt;Git&lt;/a&gt; and GitHub into &lt;a href="https://unity3d.com/" rel="nofollow"&gt;Unity&lt;/a&gt;, integrating source control into your work with friendly and accessible tools and workflows.&lt;/p&gt;
&lt;p&gt;You can reach the team right here by opening a &lt;a href="https://github.com/github-for-unity/Unity/issues/new"&gt;new issue&lt;/a&gt;. You can also tweet at &lt;a href="https://twitter.com/GitHubUnity" rel="nofollow"&gt;@GitHubUnity&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ci.appveyor.com/project/github-windows/unity" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ea4dd250803e336cb006953976c5d573cbc448b545d1bd4bb58682f78f66fef2/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6769746875622d666f722d756e6974792f556e6974793f6272616e63683d6d6173746572267376673d74727565" alt="Build Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Notices&lt;/h2&gt;
&lt;p&gt;Please refer to the &lt;a href="https://github.com/github-for-unity/Unity/issues?q=is%3Aissue+is%3Aopen+label%3Abug"&gt;list of known issues&lt;/a&gt;, and make sure you have backups of your work before trying it out.&lt;/p&gt;
&lt;p&gt;From version 0.19 onwards, the location of the plugin has moved to &lt;code&gt;Assets/Plugins/GitHub&lt;/code&gt;. If you have version 0.18 or lower, you need to delete the &lt;code&gt;Assets/Editor/GitHub&lt;/code&gt; folder before you install newer versions. You should exit Unity and delete the folder from Explorer/Finder, as Unity will not unload native libraries while it's running. Also, remember to update your &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;
&lt;h2&gt;
Building and Contributing&lt;/h2&gt;
&lt;p&gt;Please read the &lt;a href="https://raw.githubusercontent.com/github-for-unity/Unity/master/docs/contributing/how-to-build.md"&gt;How to Build&lt;/a&gt; document for information on how to build GitHub for Unity.&lt;/p&gt;
&lt;p&gt;The‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/github-for-unity/Unity"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;That‚Äôs when one of my viewers (remember I am streaming while I‚Äôm learning) chimed in and said I should use the command line. I‚Äôve been doing a lot of work using the &lt;a href="https://cli.github.com/"&gt;GitHub CLI&lt;/a&gt; and it‚Äôs been amazing. Being able to clone, fork, create repos and more from the terminal makes life a lot easier. I totally forgot (or rather didn‚Äôt really know how) the command line allows you to make lots of changes all at once.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-command-line-for-uploading-long-unity-files" class="anchor"&gt;
  &lt;/a&gt;
  GitHub Command Line for uploading long Unity files
&lt;/h2&gt;

&lt;p&gt;You‚Äôve probably heard of &lt;code&gt;.gitignore&lt;/code&gt;, which means you specifically identify files for git to ignore; or rather not bother committing them to your repo. If you want all your files in one place then this isn‚Äôt really an option.&lt;/p&gt;

&lt;p&gt;So what do you do to get all these long file names onto GitHub? Use the command line. Here‚Äôs the commands we discovered to help you commit your Unity files to GitHub.&lt;/p&gt;

&lt;p&gt;Make sure you have the GitHub CLI installed:&lt;br&gt;
&lt;code&gt;gh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command will tell you whether the CLI is installed, as well as information about what version you have. Plus it gives you a list of useful commands to get you started.&lt;/p&gt;

&lt;p&gt;Next you need to navigate to your local git folder:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd #add your file location for your local project here&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we need to change all the long file names:&lt;/p&gt;

&lt;p&gt;` git config --system core.longpaths true&lt;/p&gt;

&lt;p&gt;It will look like nothing happens, but all the names changed. If this doesn't work for you, then run your terminal as admin.&lt;/p&gt;

&lt;p&gt;Then add all the files to your local git:&lt;/p&gt;

&lt;p&gt;&lt;code&gt; git add . &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt; add . &lt;/code&gt; means that you're all all the files in your local directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LzaNAtDu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/87sfnzh1yx7eh07eoi2x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LzaNAtDu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/87sfnzh1yx7eh07eoi2x.gif" alt="git long"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Commit all the changes:&lt;/p&gt;

&lt;p&gt;&lt;code&gt; git commit &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lots of changes will happen, and colours. Make sure you then finalise the commit by adding the commit message:&lt;/p&gt;

&lt;p&gt;&lt;code&gt; git commit -m #add your commit message in here &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This might take a while depending on how big the repo is.&lt;/p&gt;

&lt;p&gt;At this stage they are still on your local machine. Now you just need to add them to GitHub. Do this by using:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_v4QKaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5vdhif6msaf74p3zqpwy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_v4QKaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5vdhif6msaf74p3zqpwy.gif" alt="git add"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-me-on-stream" class="anchor"&gt;
  &lt;/a&gt;
  Join me on Stream
&lt;/h2&gt;

&lt;p&gt;I had a lot of fun learning about this and really excited to see some more open source projects as we stream. If you want to join in on these streams, &lt;a href="https://twitch.tv/MishManners"&gt;follow me on Twitch&lt;/a&gt; and tune in when we go live. Guaranteed fun times, learning, and lots of great networking.&lt;br&gt;
If want to watch these recordings then check out the &lt;a href="https://www.twitch.tv/videos/910770320"&gt;first&lt;/a&gt; and &lt;a href="https://www.twitch.tv/videos/910781876"&gt;second&lt;/a&gt; streams on Unity game dev.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-the-lego-game-challenge" class="anchor"&gt;
  &lt;/a&gt;
  Join the LEGO Game Challenge
&lt;/h2&gt;

&lt;p&gt;We are also using the &lt;a href="https://store.unity.com/lego-microgame"&gt;LEGO Microgame&lt;/a&gt; to test this all out and have some fun. Participate in the &lt;a href="https://ideas.lego.com/challenges/6811cf30-f944-4dfa-8714-9b38be6fbb52?query=&amp;amp;sort=top"&gt;LEGO Microgame challenge&lt;/a&gt; to win cool things.&lt;/p&gt;

</description>
      <category>github</category>
      <category>opensource</category>
      <category>unity3d</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Low-Hanging Fruits of Web Security</title>
      <author>Karmasakshi Goyal</author>
      <pubDate>Fri, 12 Feb 2021 06:35:09 +0000</pubDate>
      <link>https://dev.to/karmasakshi/low-hanging-fruits-of-web-security-16fk</link>
      <guid>https://dev.to/karmasakshi/low-hanging-fruits-of-web-security-16fk</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;I talk about implementing common headers in your web app to increase its security.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#headers" class="anchor"&gt;
  &lt;/a&gt;
  Headers
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;: Defines domains that can access your content. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"&gt;MDN link&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Permissions-Policy&lt;/code&gt;: Defines permissions your web app can request for. &lt;a href="https://w3c.github.io/webappsec-permissions-policy/#permissions-policy-http-header-field"&gt;W3C link&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Referrer-Policy&lt;/code&gt;: Defines how much information you share with link B about link A when you go from link A to link B. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"&gt;MDN link&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Strict-Transport-Security&lt;/code&gt;: Defines whether or not &lt;code&gt;https://&lt;/code&gt; should be compulsory when accessing your web app. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security"&gt;MDN link&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;X-Content-Type-Options&lt;/code&gt;: Mandates content to be of the type defined. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options"&gt;MDN link&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;X-Frame-Options&lt;/code&gt;: Defines whether or not your web app can be loaded within an iframe or other embed elements. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"&gt;MDN link&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;X-XSS-Protection&lt;/code&gt;: Defines Cross-Site Scripting filter level. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection"&gt;MDN link&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;Say you have a web app hosted on &lt;a href="https://example.com:"&gt;https://example.com:&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HEADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Permissions-Policy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autoplay=(), camera=(), fullscreen=(), geolocation=(), microphone=()&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Referrer-Policy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-referrer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Strict-Transport-Security&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;max-age=63072000; includeSubDomains; preload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-Content-Type-Options&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nosniff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-Frame-Options&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DENY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-XSS-protection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1; mode=block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On Next.js apps deployed on Vercel, you set the headers in &lt;code&gt;next.config.js&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// next.config.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/(.*)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// Paste HEADERS here&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;headers&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On SPAs deployed on Firebase Hosting, you set the headers in &lt;code&gt;firebase.json&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// firebase.json&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hosting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;headers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;source&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;**&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;headers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// Paste HEADERS here&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You may want to change the value of &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header to allow &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;CORS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may also want to change the value of &lt;code&gt;Permissions-Policy&lt;/code&gt; header based on permissions you intend to ask for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#csp-the-king-of-security-headers" class="anchor"&gt;
  &lt;/a&gt;
  CSP: The King of Security Headers
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Content-Security-Policy&lt;/code&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;MDN link&lt;/a&gt;) is an extremely powerful header since it combines various policies, allowing you to define the security policy of your web app in a fine-grained fashion. It is difficult to get right in the first attempt, so it behoves to not be included in the ‚Äúlow-hanging fruits‚Äù list above ‚Äî but you shouldn‚Äôt skip it. It guarantees visitors have a safe time on your web app.&lt;/p&gt;

&lt;p&gt;To build the tightest CSP for your web app, it is recommended to start with locked-down policies and open them up as you proceed. Chrome is very descriptive about CSP violations so it is easy to know which policy to open-up next. It is essential to test all features of your web app to ensure there are no violations. Use a new Incognito window every time you make changes to any policy to ensure you aren‚Äôt working with cached results.&lt;/p&gt;

&lt;p&gt;It is common to disable CSP during development to allow tools to work properly. You can use an environment variable to disable CSP during development. Here‚Äôs an example of a CSP header configuration of a Next.js app that uses Google Fonts (note the usage of environment variable &lt;code&gt;NEXT_PUBLIC_IS_PRODUCTION&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// next.config.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HEADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;...,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Security-Policy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_IS_PRODUCTION&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connect-src 'self'; default-src 'self'; font-src https://fonts.gstatic.com; img-src 'self' data:; manifest-src 'self'; object-src 'none'; script-src 'self'; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; upgrade-insecure-requests;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can evaluate the strictness of your policy using Google‚Äôs &lt;a href="https://csp-evaluator.withgoogle.com"&gt;CSP Evaluator&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quantifying-the-result" class="anchor"&gt;
  &lt;/a&gt;
  Quantifying the Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://observatory.mozilla.org"&gt;Mozilla Observatory&lt;/a&gt; is to Web Security, what &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt; is to Web Performance. It rates the security of your web app and provides suggestions to improve that rating. It also integrates 3rd party scanners like &lt;a href="https://securityheaders.com"&gt;Security Headers&lt;/a&gt; so you can have multiple opinions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QnfHOUhb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ubnif984uhr9ht2kkx3x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QnfHOUhb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ubnif984uhr9ht2kkx3x.png" alt="Mozilla Observatory‚Äôs security score of Share By Cam" title="Mozilla Observatory‚Äôs security score of Share By Cam"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Was I able to help you increase your web app‚Äôs security score? Let me know on &lt;a href="https://twitter.com/karmasakshi/status/1359986487467606021"&gt;my Twitter&lt;/a&gt;. Cheers!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>security</category>
      <category>react</category>
      <category>angular</category>
    </item>
  </channel>
</rss>
