<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learn Github &amp;&amp; Git in an afternoon (Beginners) üê±‚Äçüíª‚òÅÔ∏è</title>
      <author>Jose Antonio Felix </author>
      <pubDate>Tue, 09 Nov 2021 00:40:01 +0000</pubDate>
      <link>https://dev.to/jafb321/learn-github-git-in-an-afternoon-beginners-20de</link>
      <guid>https://dev.to/jafb321/learn-github-git-in-an-afternoon-beginners-20de</guid>
      <description>&lt;p&gt;If you want to have your code available in a cloud git repository (for free) and be able to collaborate with other developers, this tutorial is for you üòéüíª. Firstly, we have to know some concepts:&lt;/p&gt;

&lt;p&gt;
  Git
  &lt;br&gt;
If you don't know Git (in basic terms), you need to see the post attached bellow before start this tutorial üëáüèª


&lt;div class="ltag__link"&gt;
  &lt;a href="/jafb321" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e56tJ5Uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xtPa33d5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/730606/daa63256-d553-4f15-a12d-ddfb40d2c17e.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e56tJ5Uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xtPa33d5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/730606/daa63256-d553-4f15-a12d-ddfb40d2c17e.jpeg" alt="jafb321"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jafb321/learn-git-in-an-afternoon-beginners-200m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn Git in an afternoon (Beginners) üòéüê±‚Äçüíª&lt;/h2&gt;
      &lt;h3&gt;Jose Antonio Felix  „Éª Oct 27 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#code&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;


  Github
  &lt;h3&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  Github
&lt;/h3&gt;

&lt;p&gt;Is a platform where you can put your code in a cloud &lt;strong&gt;git repository&lt;/strong&gt; completely free and where other developers could see your code and contribute or use it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bTSzRCon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvoo4wdp66oqddqh7qio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bTSzRCon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvoo4wdp66oqddqh7qio.png" alt="Github logo" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github is &lt;strong&gt;very useful&lt;/strong&gt; and &lt;strong&gt;is used by a lot of developers in the world&lt;/strong&gt;. This tool could allow you to improve as developer and be atractive to software companies.&lt;/p&gt;



&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-of-all"&gt;
  &lt;/a&gt;
  First of all
&lt;/h4&gt;

&lt;p&gt;We'll learn the Github (and some Git) basics in this tutorial, if you already know Git fundamentals (repository, commits, log, etc) you're fine, but if you don't, please check the post attached on the previous &lt;strong&gt;"Git"&lt;/strong&gt; tab. Good luck!ü§†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-github"&gt;
  &lt;/a&gt;
  How to use Github
&lt;/h2&gt;

&lt;p&gt;First, we have few things that we should have/know:&lt;br&gt;
  Pre-requisites
  &lt;ul&gt;
&lt;li&gt;A Github account. &lt;a href="https://github.com/signup"&gt;Create one here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Git installed on your PC. 
&lt;a href="https://dev.to/jafb321/learn-git-in-an-afternoon-beginners-200m"&gt;Learn Git&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="//github.com/JAFB321"&gt;Follow me on Github&lt;/a&gt; üê±‚ÄçüèçüéØ&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;
&lt;p&gt;Now we can start the tutorial properly, next we'll see some sections where we will:&lt;/p&gt;

&lt;p&gt;
  Create a Github repository ‚òÅÔ∏èüê±‚Äçüëì
  &lt;br&gt;
When you're in the Github main page (logged), you'll see this button:

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GZ3cqlPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0txa73l7w4xwdzjodzq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GZ3cqlPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0txa73l7w4xwdzjodzq.png" alt="Github create repository button" width="442" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on it and you'll see this page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BeH90PzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifeoyl56ze0gsldrhvz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BeH90PzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifeoyl56ze0gsldrhvz0.png" alt="Github repository create page" width="810" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This page is very intuitive, but I'll explain the elements on it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Repository name&lt;/strong&gt;: Is the name wich the people will see in your repositories list, find a cool and explicative one.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Description&lt;/strong&gt;: Here you'll explain the project in a few words. Maybe you could write the objective or the tech used on it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Public/Private&lt;/strong&gt;: If you want to show your repo to other developers, set &lt;strong&gt;public&lt;/strong&gt; (recommended). If you want to keep the project only for you, set &lt;strong&gt;private&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following 3 options can be skipped for now, we just have to click on &lt;strong&gt;create repository&lt;/strong&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gk2yMucL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vn3dc3g5julqeal0qxwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gk2yMucL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vn3dc3g5julqeal0qxwj.png" alt="Github create repository extra options" width="590" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, We have done our repository successfully, we'll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWCJiYQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19ycwota9r6qaf8fht5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWCJiYQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19ycwota9r6qaf8fht5b.png" alt="Blank github repository" width="880" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't worry if you don't understand what that is, we'll see about it in the next steps. For now, you just need to know that you have your first Github repository! üê±‚Äçüëì&lt;br&gt;&lt;/p&gt;

&lt;/p&gt;

&lt;p&gt;
  Configure and push your local repository üß™
  &lt;br&gt;
We already have our Github repository, but also we need a local Git repository on our pc. If you don't know how to create one, you need to see &lt;a href="https://dev.to/jafb321/learn-git-in-an-afternoon-beginners-200m"&gt;this post&lt;/a&gt;.

&lt;p&gt;Okay, the following is an example local repository with 3 files and few commits:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hCQFiW6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z6y1e5jk1jvfx4cr841.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCQFiW6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z6y1e5jk1jvfx4cr841.png" alt="Basic repository project" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have to upload or &lt;strong&gt;push&lt;/strong&gt; our local repository to the Github repository, is like sync both. For this we have to do the following:&lt;/p&gt;

&lt;p&gt;Do you remember the github page of our new repository? there we found this commands:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2sJ5R84u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc5lt7xf1e99873wlrn1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2sJ5R84u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc5lt7xf1e99873wlrn1.png" alt="Github repository push commands" width="642" height="154"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add origin URL_EXAMPLE&lt;/code&gt; &lt;br&gt;
This git command allow you to add a new &lt;em&gt;remote repository&lt;/em&gt; (URL) to your local repository, that means that you could upload your commits (push), update your local repository (pull) and more. &lt;/p&gt;

&lt;p&gt;In this case, we're adding a new remote &lt;code&gt;URL_EXAMPLE&lt;/code&gt;  with the alias &lt;code&gt;origin&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -M main&lt;/code&gt;&lt;br&gt;
This command change the &lt;em&gt;branch&lt;/em&gt; name of our repository to "main". The reason of the change is because by default git names the branch "master" and Github need a branch named "main" (to avoid racial discrimination of &lt;em&gt;master and slave&lt;/em&gt;).&lt;br&gt;
&lt;em&gt;The &lt;strong&gt;branch&lt;/strong&gt; concept needs a more complete explanation to be understood, but for now isn't necesary, just see it like the main name of this repository&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push -u origin main&lt;/code&gt;&lt;br&gt;
This is the interesting thing. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;git push&lt;/code&gt; command allow us to &lt;strong&gt;push&lt;/strong&gt; (upload) our commits to the github repo.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;origin main&lt;/code&gt; indicates that we want to &lt;strong&gt;push&lt;/strong&gt; the changes to the remote named "origin" (setted on the first command) and the branch named "main" (setted on the previous command)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;-u&lt;/code&gt; is an option to set the &lt;code&gt;origin main&lt;/code&gt; options to default on the future git push/pulls calls.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we know what this commands are for, so we can type them on the terminal an check the results:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDVtaG8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb6cmb5qg1i8b1mzqtqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDVtaG8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb6cmb5qg1i8b1mzqtqt.png" alt="First push to github repo" width="880" height="243"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;(When you enter the last command a window will open and it will ask you to login to Github, just enter your account and password and continue. This will happen only 1 time)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you refresh the repository page, you'll see your files and you could check interesting info like the commits made, the languages used on the repo and it's description.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J714BEqu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4leoac5olysi7liifka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J714BEqu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4leoac5olysi7liifka.png" alt="Github repository" width="880" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we'll have our repository on Github! And the best part is comming! In the next sections you'll learn what things you can do with Git and Github.&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;
  Push new commits üöÄ
  &lt;br&gt;
In the last section we have pushed our local repository to the Github. Now, both repositories have the same commits. But maybe we want to make more local changes and then commit and push it to the Github repo again. Okay, Let's do it.

&lt;p&gt;First, we'll make some changes:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4dD0kY-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu8mkzy06s6wpzeres91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4dD0kY-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu8mkzy06s6wpzeres91.png" alt="File change" width="477" height="229"&gt;&lt;/a&gt;&lt;br&gt;
Then, add the changes and commit it:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e48VIUjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utvqbahian4a0epavnac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e48VIUjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utvqbahian4a0epavnac.png" alt="Add and commit the changes" width="700" height="88"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can get the repository log (history) to see the new commit:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvr5-vi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hoy58nyx0z3fzypi3kz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvr5-vi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hoy58nyx0z3fzypi3kz.png" alt="Repository log with new commit" width="552" height="128"&gt;&lt;/a&gt;&lt;br&gt;
As we can see, the new commit was made successfully. But this commit is only in the local repository, and it need to be pushed to the Github repo. &lt;/p&gt;

&lt;p&gt;For this, we can type one of the following commands:&lt;br&gt;
&lt;code&gt;git push&lt;/code&gt;&lt;br&gt;
or&lt;br&gt;
&lt;code&gt;git push origin main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Both work fine, the difference is that the second one declare explicitly in wich "remote" and "branch" the commits will be pushed. And the first one just take the &lt;em&gt;default&lt;/em&gt; settings.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(If you rememeber, this "remote" and "branch" default settings was been setted in the previous section on the &lt;code&gt;git push -u origin main&lt;/code&gt; command, thanks to the &lt;code&gt;-u&lt;/code&gt; option&lt;/em&gt;) ü§Ø&lt;/p&gt;

&lt;p&gt;When we enter one of this commands, we'll get:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DWWdFbYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc90g3qf19dvd4iomgt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DWWdFbYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc90g3qf19dvd4iomgt9.png" alt="New commit pushed successfully message" width="652" height="227"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if we go to the Github repository page again and refresh it, we'll see our new commit(s) üòé.&lt;br&gt;&lt;/p&gt;

&lt;/p&gt;

&lt;p&gt;
  Clone a repository üêë
  &lt;br&gt;
In the last sections, we have created new repositories and push our local commits to github, but, if we want to download a Github repository to our local computer, what do we have to do? Well, this process is called "cloning".

&lt;p&gt;To clone a repository we have to know some things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We need the real URL of the repository wich we want to clone. For get it, we have to go to the github repository page and copy this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---aI4N8Wo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dajvs1dib11hhmtjw53m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---aI4N8Wo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dajvs1dib11hhmtjw53m.png" alt="Link to clone a github repository" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can clone whatever public repository that we want, this means that we can go to the page of any repository of any user and copy it's link and clone it on our pc, this is awesome ü§© because we are able to download every open source code , for example we can go to the oficial &lt;a href="https://github.com/microsoft/vscode"&gt;Microsoft Visual Studio code repository&lt;/a&gt;, clone it, change it's code and modify it as we want üß®&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this example, we'll clone this &lt;a href="https://github.com/JAFB321/devto-learn-github"&gt;Example repository&lt;/a&gt;. So, go and copy it's URL.&lt;/p&gt;

&lt;p&gt;Now, we have to open a terminal and go to the folder where we want to clone the repo:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl-g7szC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmmos03lecod1ny8b4gl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl-g7szC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmmos03lecod1ny8b4gl.png" alt="Terminal in a folder" width="307" height="95"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;In my case, I want to clone it in &lt;code&gt;D:\personal-projects&amp;gt;&lt;/code&gt; folder.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now we just have to type this command:&lt;br&gt;
&lt;code&gt;git clone &lt;a href="https://github.com/JAFB321/devto-learn-github.git"&gt;https://github.com/JAFB321/devto-learn-github.git&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We'll get something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PsSwxu-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/indwy5xvtdlm7wfisczi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PsSwxu-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/indwy5xvtdlm7wfisczi.png" alt="Git repository clone result" width="819" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This should have created a new folder called like the repository cloned. In this case, the folder is &lt;code&gt;D:\personal-projects\devto-learn-github&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then this folder will have all repository files:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--keCYil1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wufbe58st4mey9h0n6oj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--keCYil1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wufbe58st4mey9h0n6oj.png" alt="Repository folder files" width="672" height="237"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can open a terminal on this folder and type &lt;code&gt;git log --oneline&lt;/code&gt; or &lt;code&gt;git status&lt;/code&gt; to check the new local repository:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2etbIwRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0nn0rnxp7ah2im1o15k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2etbIwRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0nn0rnxp7ah2im1o15k.png" alt="Cloned local repository" width="672" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can make changes and commit them as we want. But, can we &lt;strong&gt;push&lt;/strong&gt; this new commits to the original Github repo? ü§î In this case, you won't be able to do that, Why?ü§® because the repository isn't yours, you don't have permission to push changes to repositories that you aren't the owner (or where you don't have explicit access).&lt;/p&gt;

&lt;p&gt;For get permission and do that, we have 2 options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Request write access to a Github repository to the owner.&lt;/li&gt;
&lt;li&gt;Make a copy of the Github project on your own Github repositories or &lt;strong&gt;Fork a project&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both options are material for another tutorial, we won't see them in this one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Obviously, if you clone a repository wich you're the owner (like the repo that you created on the first sections) you are able to push your changes to the Github repo without problem.&lt;/em&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;
  Update local repo with last changes üîÅ
  &lt;br&gt;
Imagine you have a Github repo, and you clone it on you laptop üíª and your desktop pc üñ•Ô∏è. You go to the laptop and do some changes and make a couple of committs, then you &lt;strong&gt;push&lt;/strong&gt; that commits to the Github repo. Now, you have 1 local repository outdated (in your desktop pc).

&lt;p&gt;To update the desktop pc repository, you must &lt;strong&gt;pull&lt;/strong&gt; the new changes from the Github repo. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-solve-the-problem"&gt;
  &lt;/a&gt;
  How to solve the problem
&lt;/h3&gt;

&lt;p&gt;To do that, we'll clone one of our Github repo 2 times in our pc.&lt;br&gt;
We'll create 2 folders to clone the repo 1 time on each folder:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v32g_S2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjxqox6ymzhm7k1y4yr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v32g_S2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjxqox6ymzhm7k1y4yr9.png" alt="Github cloned repos Folders" width="184" height="68"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXjc2Gtr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfo96g4j1hn3ni1gv8sr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXjc2Gtr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfo96g4j1hn3ni1gv8sr.png" alt="Cloning a repo on 2 folders" width="532" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have 2 copies of the same Github repository on our pc. I cloned &lt;a href="https://github.com/JAFB321/devto-learn-github"&gt;my own repository&lt;/a&gt; but you must clone one of your own Github repos (for example the repo you created in first sections).&lt;/p&gt;

&lt;p&gt;Now, we'll make some new commits on the &lt;code&gt;example-repo1&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QsTJu6g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl7zdxa9wvjl2n2pwwkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QsTJu6g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl7zdxa9wvjl2n2pwwkr.png" alt="Commits on example repo 1" width="720" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And push them:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6jyAWigg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4rkifhrgmmtsm0c8w29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6jyAWigg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4rkifhrgmmtsm0c8w29.png" alt="Push new commits of example repo 1" width="655" height="212"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that you don't need to type &lt;code&gt;-u origin main&lt;/code&gt; because is a cloned repository, and these options were set in the cloning process automaticaly&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once this is done, we have the Github repository and &lt;code&gt;example-repo1&lt;/code&gt; updated, but &lt;code&gt;example-repo2&lt;/code&gt; is outdated because it doesn't have the 2 last commits.&lt;/p&gt;

&lt;p&gt;To update &lt;code&gt;example-repo2&lt;/code&gt; we need to &lt;strong&gt;pull&lt;/strong&gt; this new commits from Github repo. For that we have to type one of the following commands on the terminal in &lt;code&gt;example-repo2&lt;/code&gt; repo:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; &lt;br&gt;
or&lt;br&gt;
&lt;code&gt;git pull origin main&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Both work fine, the difference is the same of the &lt;code&gt;git push&lt;/code&gt; command where &lt;code&gt;origin main&lt;/code&gt; are the "remote" and "branch" explicity defined.&lt;/p&gt;

&lt;p&gt;When we enter one of these comands, we'll get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0Ph9Y8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5z4c7md5ck79pei5g51w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0Ph9Y8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5z4c7md5ck79pei5g51w.png" alt="Git pull new changes from github repo" width="633" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The elements inside blue rectangle are the changes summary of the commits downloaded. If we run &lt;code&gt;git log --oneline&lt;/code&gt; we'll see these new commits:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LKRceBDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl0b9w9nxkzoqjqgnpxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LKRceBDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl0b9w9nxkzoqjqgnpxj.png" alt="Updated example repo 2 log" width="724" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have the 2 repositories updated and ready to work üòé. But take care about pull and push your commits on 2+ copies of the same cloned repository, because if you make different local commits on each repo separately and try to push them at same time you could get a &lt;em&gt;merge error&lt;/em&gt; üå™Ô∏è, but don't worry there is an easy solution for those kinds of problems wich we'll see on future Git tutorials üê±‚Äçüèç.&lt;br&gt;&lt;/p&gt;

&lt;/p&gt;




&lt;p&gt;There are a lot of useful and interesting things that you can do with Git + Github, in this tutorial you have learned the most &lt;em&gt;important&lt;/em&gt; topics ü•á.&lt;/p&gt;

&lt;p&gt;You have learned a lot but there are still more things to learn wich can help you to be a very efficient developer, contribute to the open source community and grow in the IT world ü§ñ.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Shmee8vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r74qfs5joj5e0kmz7jk0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Shmee8vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r74qfs5joj5e0kmz7jk0.gif" alt="git meme" width="640" height="358"&gt;&lt;/a&gt;&lt;br&gt;
(If you want to understand the meme, don't forget follow me to learn about git branches, merge, fork and more üéà)&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
      <category>code</category>
    </item>
    <item>
      <title>How I decided which languages to use for my tech startup</title>
      <author>Kalob Taulien</author>
      <pubDate>Mon, 08 Nov 2021 23:18:30 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/how-i-decided-which-languages-to-use-for-my-tech-startup-1ida</link>
      <guid>https://dev.to/kalobtaulien/how-i-decided-which-languages-to-use-for-my-tech-startup-1ida</guid>
      <description>&lt;p&gt;This is article numero dos (that means number 2) in the series about starting &lt;a href="https://arbington.com/"&gt;Arbington.com&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lets talk about how I decided which languages to use at my startup&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-it-boils-down-to"&gt;
  &lt;/a&gt;
  What it boils down to...
&lt;/h2&gt;

&lt;p&gt;Simplicity. Efficiency. Community support. And.. do I know it?&lt;/p&gt;

&lt;p&gt;It all boils down to these four things. And most startups probably say this, I get it. I ain't &lt;em&gt;that&lt;/em&gt; unique :P &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simplicity"&gt;
  &lt;/a&gt;
  Simplicity
&lt;/h2&gt;

&lt;p&gt;Which language is the easiest to read, write and learn? &lt;/p&gt;

&lt;p&gt;Python. &lt;/p&gt;

&lt;p&gt;Even if you disagree, it's Python. Like, it's just a fact of programming. &lt;/p&gt;

&lt;p&gt;I need code to not become a crazy nest of curly brackets. Something I can hack away at and it maintains it's cleanliness (to some degree). &lt;/p&gt;

&lt;p&gt;It's easy for future developers to pick up and learn quickly, and easy to read through to understand the business logic. &lt;/p&gt;

&lt;p&gt;Plus, there are a lot of Python developers so I'll never be worried about finding a developer (it's the worlds most popular language, officially). &lt;/p&gt;

&lt;p&gt;And! It has an insane ecosystem of packages that lets you install awesome tools super fast. Need to make an API request? Use &lt;code&gt;requests&lt;/code&gt;. Need to parse HTML? Use BeautifulSoup4. This kind of "need &lt;em&gt;x&lt;/em&gt;, use &lt;em&gt;y&lt;/em&gt;" pattern goes on for AGES. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#efficiency"&gt;
  &lt;/a&gt;
  Efficiency
&lt;/h2&gt;

&lt;p&gt;Python is relatively fast. As is JavaScript. Both of which I use &lt;strong&gt;A LOT&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Are they the fastest out there? Heck no. But they are well supported, popular, and &lt;em&gt;fast enough&lt;/em&gt; for what I need. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community-support"&gt;
  &lt;/a&gt;
  Community support
&lt;/h2&gt;

&lt;p&gt;I touched on this a little in the &lt;code&gt;Simplicity&lt;/code&gt; section. But having access to packages, libraries and frameworks is very important. &lt;/p&gt;

&lt;p&gt;Don't reinvent the wheel. &lt;/p&gt;

&lt;p&gt;And when you inevitably have questions, are there a sufficient amount of answers available on the web? &lt;/p&gt;

&lt;p&gt;Python ‚úîÔ∏è &lt;br&gt;
JavaScript ‚úîÔ∏è &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-i-know-it"&gt;
  &lt;/a&gt;
  Do I know it?
&lt;/h2&gt;

&lt;p&gt;This is the most important part, to be honest. &lt;/p&gt;

&lt;p&gt;Build using languages you know. Don't learn a programming language just to build something new. That's how you write unmaintainable code. &lt;/p&gt;

&lt;p&gt;So, I built using what I know. But I also know other languages, so I also chose what was simple and easy for future developers to pick up after me. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-this-important-to-you"&gt;
  &lt;/a&gt;
  Why is this important to you?
&lt;/h2&gt;

&lt;p&gt;You're going to see lots of companies showing off their tech stacks and you'll be pulled in 100 different directions with no idea what to learn. &lt;/p&gt;

&lt;p&gt;Pick a language, learn it, then apply for those jobs (if you're looking for a job). You can't be the perfect dev for every company, ever. Just do what you can, and see which jobs exist for you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-languages-and-other-things-do-we-use"&gt;
  &lt;/a&gt;
  So what languages (and other things) do we use?
&lt;/h2&gt;

&lt;p&gt;Remember the above because I'm going to blow your mind with one of these. &lt;/p&gt;

&lt;p&gt;Here is what we use: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML/CSS/JavaScript (because that's what 100% of all websites use) &lt;/li&gt;
&lt;li&gt;jQuery. Not React.js. React is awesome! But it's slow to code when your company is moving at the speed of light. Told you - mind blown yet!?&lt;/li&gt;
&lt;li&gt;Tailwind CSS. It's awesome once you learn about it and how it works. Truly, it's powerful. We wrote like 50 lines of custom CSS, the rest is all in the &lt;code&gt;class=""&lt;/code&gt; attribute. &lt;/li&gt;
&lt;li&gt;Python. Because it's powerful, simple, etc. &lt;/li&gt;
&lt;li&gt;Django. It's a batteries included framework that lets you get a lot done with very little code, and it's super secure (and open source!) &lt;/li&gt;
&lt;li&gt;PostgresQL. Just needed a database, and Postgres is a world class database and it's also the one Django devs prefer. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes, we use jQuery. Why? It's simple, we know it inside and out, it's fast to develop with and the barrier to entry is incredibly low. And it's a wee bit less typing than vanilla JS with cross browser compatibility. But we'll eventually move to something else like Vue or React, I'm sure. &lt;/p&gt;

&lt;p&gt;In the next article I'll highlight which frameworks and libraries we use, and why. &lt;/p&gt;

</description>
      <category>startup</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Understanding timing attacks with code examples</title>
      <author>propelauthblog</author>
      <pubDate>Mon, 08 Nov 2021 23:10:04 +0000</pubDate>
      <link>https://dev.to/propelauth/understanding-timing-attacks-with-code-examples-32e6</link>
      <guid>https://dev.to/propelauth/understanding-timing-attacks-with-code-examples-32e6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#vulnerable-login-example"&gt;
  &lt;/a&gt;
  Vulnerable login example
&lt;/h2&gt;

&lt;p&gt;The following code snippet has a subtle security issue with it. Can you tell what's wrong?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Returns true if the email/password pair is valid&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Fetch the password hash from the DB by email address&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passwordHashOrNull&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchPasswordHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// If there was no match, return false&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;passwordHashOrNull&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Bcrypt is "a library to help you hash passwords"&lt;/span&gt;
    &lt;span class="c1"&gt;// Here we use the compare function to check that the&lt;/span&gt;
    &lt;span class="c1"&gt;//   provided password matches the hashed password in the DB&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doesPasswordMatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;passwordHashOrNull&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;doesPasswordMatch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Fetches the password hash from the DB&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchPasswordHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// impl not important&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a hint, let's look at how long a few calls to &lt;code&gt;isValidCredentials&lt;/code&gt; takes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;timeIsValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Checking &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;isValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Checking &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;timeIsValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test@test.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Checking test@test.com: 63.813ms&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;timeIsValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test@test.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Checking test@test.com: 62.867ms&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;timeIsValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test2@test.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Checking test2@test.com: 4.017ms&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;timeIsValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test3@test.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Checking test3@test.com: 4.008ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a noticeable difference between how long &lt;code&gt;test@test.com&lt;/code&gt; emails take and &lt;code&gt;test2@test.com&lt;/code&gt; or &lt;code&gt;test3@test.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It turns out that the issue is these lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// If there was no match, return false&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;passwordHashOrNull&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By returning early if there was no match, an attacker can easily tell that &lt;code&gt;test@test.com&lt;/code&gt; has an account, but &lt;code&gt;test2@test.com&lt;/code&gt; and &lt;code&gt;test3@test.com&lt;/code&gt; don't.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timing-attacks"&gt;
  &lt;/a&gt;
  Timing attacks
&lt;/h2&gt;

&lt;p&gt;This is a common example of a timing attack. They are a class of attacks where the length of time that your application takes to perform a task leaks some information.&lt;/p&gt;

&lt;p&gt;In the login case, the difference in times made it pretty obvious from even one request. If the difference was more subtle, an attacker can make many requests over a long time and average them together to distinguish different cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-a-big-deal"&gt;
  &lt;/a&gt;
  Is it a big deal?
&lt;/h2&gt;

&lt;p&gt;This might not seem like a big deal, but let's say I'm trying to find someone's personal email. I only have their name, and I know they have signed up for your site. &lt;/p&gt;

&lt;p&gt;I can try a bunch of variations of &lt;code&gt;firstname.lastname@gmail.com&lt;/code&gt; or &lt;code&gt;lastname{3digitnumber}@gmail.com&lt;/code&gt; and so on until I find a valid one.&lt;/p&gt;

&lt;p&gt;Additionally, there are other timing attacks that leak even more sensitive information, which we'll see in a bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-we-fix-it"&gt;
  &lt;/a&gt;
  How can we fix it?
&lt;/h2&gt;

&lt;p&gt;There are a few strategies, but the simplest answer is "make sure all codepaths take the same amount of time". You don't have to do this everywhere, just in sensitive parts of the codebase.&lt;/p&gt;

&lt;p&gt;Instead of returning early, we could have checked the password against some hash and then returned false:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// If there was no match, waste time and then return false&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;passwordHashOrNull&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RANDOM_PASSWORD_HASH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also useful to add rate limiting whenever possible. If an attacker needs a lot of requests to distinguish different cases, rate limiting them could make the attack impractical.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timing-attacks-in-practice"&gt;
  &lt;/a&gt;
  Timing attacks in practice
&lt;/h2&gt;

&lt;p&gt;Recently, a clever &lt;a href="https://soatok.blog/2021/08/20/lobste-rs-password-reset-vulnerability/"&gt;timing attack was found in Lobste.rs' password reset&lt;/a&gt;. It exploited the fact that databases when comparing two strings will return early if the strings don't match.&lt;/p&gt;

&lt;p&gt;So checking&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;should take less time than&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that the more characters you have correct, the longer the call will take. An attacker could try different prefixes and see which one takes the longest to slowly determine a valid password reset token. &lt;/p&gt;

&lt;p&gt;This same vulnerability exists anywhere where someone is checking a secret value directly against a database, so while it may seem pretty theoretical, there are definitely real world cases that have been reported and fixed.&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Day 3 of #100daysofcode: React-bootstrap Components</title>
      <author>Ryan Whelchel</author>
      <pubDate>Mon, 08 Nov 2021 23:07:24 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-3-of-100daysofcode-react-bootstrap-components-49gn</link>
      <guid>https://dev.to/rydwhelchel/day-3-of-100daysofcode-react-bootstrap-components-49gn</guid>
      <description>&lt;p&gt;Have you ever been working in a new language and right when you start feeling confident, you realize that something you've been using does not function &lt;em&gt;at all&lt;/em&gt; the way you thought it did? Let me walk you through today's journey of how some capital letters caused me to forget React worked. Or maybe it was the lower-cased letters. It was probably a combination&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Today I played around with React-bootstrap components a bit like a kid in a sandbox. I threw some components at my app with no real thought for design, I just tried to see how they ticked.&lt;/p&gt;

&lt;p&gt;While messing around with components, I decided to fix my input method for &lt;code&gt;artist IDs&lt;/code&gt; in my song display app. The only problem was that I was trying to use React-bootstrap-styled input boxes, and that cause significantly more confusion than it probably should have. More on this later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learned-about-the-components"&gt;
  &lt;/a&gt;
  What I've learned about the components
&lt;/h2&gt;

&lt;p&gt;I think the biggest hurdle today was learning about how to pass arguments to the components. More specifically, it was learning which arguments you &lt;em&gt;can&lt;/em&gt; pass to them. As someone with limited React/JS experience, seeing React-components immediately made me think that I should try and figure out which arguments they expect to see. Components feel sort of like classes or methods from other languages; you import them because they have their own logic you want to use (and reuse) that logic. Classes and methods expect certain input or constructors, and &lt;em&gt;won't accept&lt;/em&gt; other types of input that they don't handle. While I think this is still probably the case for React components, what I didn't realize is that there are so many global arguments that are applicable. That is to say: just because it isn't explicitly listed in the React-bootstrap API for that component &lt;em&gt;doesn't mean&lt;/em&gt; it isn't applicable.&lt;/p&gt;

&lt;p&gt;Let me give you an example: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ev8_cbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bte7knm9q1s63neven11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ev8_cbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bte7knm9q1s63neven11.png" alt="React-bootstrap API example" width="880" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above is an example of &lt;code&gt;InputGroup&lt;/code&gt; from React-bootstrap's documentation. Being how I am, I decided to copy-paste this code and immediately jump into trying to use it to figure out its quirks. &lt;/p&gt;

&lt;p&gt;The very first question I decided to try and solve was: how do I access this input and make it useful? Looking at this component, it appears that the text value is stored in the &lt;code&gt;id&lt;/code&gt; &lt;code&gt;"basic-addon1"&lt;/code&gt;, because that's the ID of the InputGroup's Text! Wrong, it's just a decorator that is showing an &lt;code&gt;@&lt;/code&gt; before the text box. What else can it be?&lt;/p&gt;

&lt;p&gt;Unfortunately from here, I got really into the weeds and started messing with things that were not helpful. To not dwell on this too much, I'll just list them out real quick. I researched &lt;code&gt;aria-label&lt;/code&gt; and &lt;code&gt;aria-describedby&lt;/code&gt; hoping to be able to use them to reference the &lt;code&gt;input&lt;/code&gt; value. My conclusion on the &lt;code&gt;aria&lt;/code&gt; values is that you &lt;em&gt;may&lt;/em&gt; be able to use them to access the text input, but it really seemed like overkill for the scope of my project. Next I attempted using &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;inputRef&lt;/code&gt; to access the input values. Again, I ran into a lot of trouble implementing any sort of way to access the data, even though I found a &lt;a href="https://stackoverflow.com/questions/41085220/how-to-get-an-input-value-using-refs-in-react-bootstrap-form"&gt;bunch&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/45194498/get-value-of-input-text-with-react-bootstrap"&gt;of&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/45194498/get-value-of-input-text-with-react-bootstrap"&gt;Stackoverflow&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/60917459/react-bootstrap-how-to-get-value-of-form-control"&gt;answers&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;One answer would say that you should use &lt;code&gt;inputRef&lt;/code&gt; instead of &lt;code&gt;ref&lt;/code&gt; to access the data, others would say to use &lt;code&gt;ref&lt;/code&gt; instead of &lt;code&gt;inputRef&lt;/code&gt;. Many answers seemed sure that you should create a new component class to contain the &lt;code&gt;InputGroup&lt;/code&gt; and &lt;code&gt;FormControl&lt;/code&gt;, however it felt like a very odd way to handle accessing the input. Why would you import an &lt;code&gt;InputGroup&lt;/code&gt; component into another component, just to get the value of the text?&lt;/p&gt;

&lt;p&gt;So after stubbornly trying to get to the bottom of these React-bootstrap components and why they were so much more complicated, I decided to take a break and just read some more tutorials on general React.&lt;/p&gt;

&lt;p&gt;One of the very first things I found was using &lt;code&gt;getElementById&lt;/code&gt; and I nearly facepalmed. &lt;code&gt;getElementById&lt;/code&gt; was one of the very first things I learned about in React, I used it to retrieve data being sent up from my Python Flask server.&lt;/p&gt;

&lt;p&gt;I decided to stick with the tutorial a little bit longer, and they introduced an argument that I had not seen before:&lt;code&gt;onChange&lt;/code&gt;. In 10 minutes of learning about basics,I learned two solutions to a problem that I had spent the better part of an hour trying to solve.&lt;/p&gt;

&lt;p&gt;Quickly summarizing the solution, I can use &lt;code&gt;onChange={(e)=&amp;gt;...}&lt;/code&gt; to retrieve the text every time it changes, or I can simply set &lt;code&gt;id="uniqueId"&lt;/code&gt; and retrieve it elsewhere using `document.getElementById("uniqueId").value. &lt;/p&gt;

&lt;p&gt;What makes this worse is that I &lt;em&gt;already knew this&lt;/em&gt;. I have used them in the past on html-style forms in React. Whenever the React-bootstrap components entered the picture, its like I forgot everything I already learned! Doh.&lt;/p&gt;

&lt;p&gt;The bright-side of all of this is that I feel I have a much greater grasp of how these components resolve themselves in the bigger picture.&lt;/p&gt;

&lt;p&gt;The downside is that I think my app has gotten much uglier than it was before. It gets worse before it gets better I guess!&lt;/p&gt;

&lt;p&gt;On the way out, I'll quickly go over a list of the components I've implemented into my page so far: ListGroup, InputGroup, Form, Buttons and Alerts. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here's a quick list of what I did today:&lt;br&gt;
Read through some of the React-bootstrap documentation&lt;br&gt;
Implemented a few React-bootstrap components into my app&lt;br&gt;
Struggled through some input and state shenanigans (above)&lt;br&gt;
Began creating the UI for a group project I'm working on&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;I have much less time tomorrow to work on things, so I will likely have a much shorter update. I probably will look into some CSS styling tomorrow and see how to shape my page a little better. I was going to do that today, but I think learning the components that fit &lt;em&gt;into&lt;/em&gt; the shape makes more sense to learn first. I think I'm going to try to utilize Grid and Flexbox from CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm struggling on
&lt;/h2&gt;

&lt;p&gt;Right now I'm struggling on the crossroads between CSS and React. HTML and CSS feels fairly simple in comparison to React and CSS. There's odd syntax (such as &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt;) and other interactions I'm not quite used to yet. I imagine it will make more sense once I try it out more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-of-this-challenge"&gt;
  &lt;/a&gt;
  Future of this challenge
&lt;/h2&gt;

&lt;p&gt;Following the first couple days of this challenge, I think it might be a good idea to have a quick section that's dedicated to briefly describing what I'm struggling on, hence above. I think in general, I'm going to shape my blogs as followed:&lt;br&gt;
In-depth Discussion (Optional)&lt;br&gt;
Today&lt;br&gt;
Tomorrow&lt;br&gt;
What I'm Struggling on&lt;/p&gt;

&lt;p&gt;I may not always have time to type out some kind of in-depth discussion, or maybe I won't always have something to say about what I worked on that day. So I won't try and force it, I'll just include it if I really have something to share. I imagine if things go perfectly, I probably won't be sharing a whole lot, so take no discussion as a good thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations?
&lt;/h2&gt;

&lt;p&gt;If you're reading this and you're thinking: "Hey this guy is missing this really obvious thing..." You're probably right! If that's you, please share it's greatly appreciated&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-and-suggested-readingwatching"&gt;
  &lt;/a&gt;
  Resources and Suggested Reading/Watching
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=w7ejDZ8SWv8"&gt;React JS Crash Course 2021&lt;/a&gt;&lt;br&gt;
&lt;a href="https://react-bootstrap.github.io/"&gt;React-bootstrap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.theodinproject.com/paths/full-stack-javascript/courses/javascript/lessons/state-and-props"&gt;React JS - The Odin Project&lt;/a&gt; (Thank you &lt;a class="mentioned-user" href="https://dev.to/rammina"&gt;@rammina&lt;/a&gt;
 for the suggestion!)&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Typescript Example #2.</title>
      <author>Calin Baenen</author>
      <pubDate>Mon, 08 Nov 2021 22:48:24 +0000</pubDate>
      <link>https://dev.to/baenencalin/typescript-example-2-42n1</link>
      <guid>https://dev.to/baenencalin/typescript-example-2-42n1</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// An example of using generics in a type union.&lt;/span&gt;
&lt;span class="c1"&gt;// A compact version of my Option&amp;lt;T&amp;gt; type from&lt;/span&gt;
&lt;span class="c1"&gt;// "Typescript Example #1." (https://dev.to/baenencalin/typescript-example-1-ia3).&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>programming</category>
      <category>watercooler</category>
      <category>typescript</category>
    </item>
    <item>
      <title>GitHub Actions: Build Your First Workflow</title>
      <author>Rizel Scarlett</author>
      <pubDate>Mon, 08 Nov 2021 22:37:46 +0000</pubDate>
      <link>https://dev.to/github/github-actions-build-your-first-workflow-2m34</link>
      <guid>https://dev.to/github/github-actions-build-your-first-workflow-2m34</guid>
      <description>&lt;h2&gt;
  &lt;a href="#github-actions-what-is-it"&gt;
  &lt;/a&gt;
  Github Actions: What is it?
&lt;/h2&gt;

&lt;p&gt;GitHub Actions is a tool that conveniently enables you to automate custom workflows inside of your GitHub repository. There is a marketplace filled with already-made actions created by developers around the world that you can use. However, if you‚Äôre not able to find an Action for your use-case, you can create your own. And if you want to, feel free to share it on GitHub Marketplace to improve the lives of other developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-workflow"&gt;
  &lt;/a&gt;
  What is a workflow?
&lt;/h2&gt;

&lt;p&gt;In the above paragraph, I mentioned that GitHub Actions allows you to automate custom workflows, but what is a workflow? A workflow is a configurable, automated process. Each workflow is written in a YAML (Yet Another Markup Language) file using YAML syntax. All workflows can be triggered by events that happen within or to your repository. Examples of events that happen within your repository include: a push or pull request. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#actions-vs-workflow-whats-the-difference"&gt;
  &lt;/a&gt;
  Actions vs. Workflow: What's the difference?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The definitions seems pretty similar, so what is the difference?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The answer is that you can use an action &lt;em&gt;IN&lt;/em&gt; a workflow!&lt;/p&gt;

&lt;p&gt;Actions are standalone commands that are combined into steps to create a job. Actions are the smallest portable building block of a workflow. You can create your own actions, or use actions created by the GitHub community. To use an action in a workflow, you must include it as a step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-actions"&gt;
  &lt;/a&gt;
  Useful Actions
&lt;/h2&gt;

&lt;p&gt;Developers often find themselves doing tedious tasks that take away from their productivity. Here are some actions I've used in the past that helped me immensely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/marketplace/actions/deploy-to-github-pages"&gt;Deploying to GitHub Pages&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/marketplace/actions/s3-sync"&gt;Syncing a directory to an AWS S3 bucket&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/marketplace/actions/npm-publish"&gt;Re-publishing NPM packages on release&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mtfoley/pr-compliance-action"&gt;Checking that a PR meets the basic requirements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-create-my-first-workflow"&gt;
  &lt;/a&gt;
  How do I create my first workflow?
&lt;/h2&gt;

&lt;p&gt;To write your own workflow for GitHub Actions, create a directory at the root of your project called &lt;code&gt;.github/workflows/&lt;/code&gt;. Inside the directory is where you will store your workflows. Each workflow file should end with the extension &lt;code&gt;.yml&lt;/code&gt; indicating that it's written using YAML syntax. &lt;/p&gt;

&lt;p&gt;Follow GitHub's written &lt;a href="https://docs.github.com/en/actions/quickstart"&gt;tutorial&lt;/a&gt; to build your very first action in 5 minutes. &lt;/p&gt;

&lt;p&gt;If you want to learn more, you can read about &lt;a href="https://blackgirlbytes.dev/how-to-sync-an-s3-bucket-with-github-actions"&gt;my personal experience&lt;/a&gt; setting up a workflow to sync a directory to an AWS S3 bucket.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-the-github-actions-hackathon"&gt;
  &lt;/a&gt;
  Join the GitHub Actions Hackathon
&lt;/h2&gt;

&lt;p&gt;From now until December 8th, GitHub is running a Hackathon. By participating, you have the chance to win gift cards and swag. The challenge is to create and submit a workflow leveraging already &lt;a href="https://github.com/marketplace?type=actions"&gt;existing actions&lt;/a&gt;. GitHub Marketplace currently has over &lt;a href="https://github.blog/2021-10-21-github-marketplace-welcomes-its-10000th-action/#:~:text=Celebrating%20the%20power%20of%2010%2C000%20actions&amp;amp;text=Linting%2C%20testing%2C%20and%20validating%20code,Connecting%20to%20third%2Dparty%20services"&gt;10,000 actions&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Read &lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4"&gt;here&lt;/a&gt; to learn more about participating in the hackathon.&lt;/p&gt;

&lt;p&gt;And if you need any help regarding actions, I'll be available to answer questions in this &lt;a href="https://dev.to/devteam/github-actions-hackathon-2021-help-thread-1lk0"&gt;thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Comment below and tell me some of your favorite actions! I'm curious!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Five common causes for flaky tests and what you can do about them</title>
      <author>Spriha B. Tucker</author>
      <pubDate>Mon, 08 Nov 2021 22:20:24 +0000</pubDate>
      <link>https://dev.to/sprihatucker/five-common-causes-for-flaky-tests-and-what-you-can-do-about-them-2ej7</link>
      <guid>https://dev.to/sprihatucker/five-common-causes-for-flaky-tests-and-what-you-can-do-about-them-2ej7</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hm2P5MgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4r245jnm7ttuiwn5hf4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hm2P5MgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4r245jnm7ttuiwn5hf4.png" alt="FlakyBot Test History showing flaky test runs" width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-flaky-tests-and-why-do-they-happen"&gt;
  &lt;/a&gt;
  What are flaky tests and why do they happen?
&lt;/h1&gt;

&lt;p&gt;Flaky tests are non-deterministic tests in your test suite. They may be intermittently passing or failing, making test results unreliable.&lt;/p&gt;

&lt;p&gt;Why are flaky tests bad?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developer productivity goes down as test results become inaccurate and trust in the test-suite decreases.&lt;/li&gt;
&lt;li&gt;Multiple, unrelated commits cause similar errors, making maintenance difficult.&lt;/li&gt;
&lt;li&gt;Legitimate issues may get ignored due to a high number of false positives.&lt;/li&gt;
&lt;li&gt;Repetitive work is required to determine if bugs exist at all.&lt;/li&gt;
&lt;li&gt;Diagnostics time increases as errors can be in the test or code.&lt;/li&gt;
&lt;li&gt;User dissatisfaction due to bugs ending up in production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at five common causes for flaky tests showing up in your build pipeline and what you can do about them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-shared-state-resources-between-tests"&gt;
  &lt;/a&gt;
  1. Shared state resources between tests
&lt;/h1&gt;

&lt;p&gt;One of the common reasons why tests do not find bugs is concurrency. They occur because developers may have made incorrect assumptions about the ordering of operations between threads. One test thread might be assuming a state for shared resources like data or memory.&lt;/p&gt;

&lt;p&gt;For example, test 2 might assume test 1 passes and use test 1‚Äôs output as an input for itself. Or test 2 might assume that test 1 leaves a data variable in state x, but test 1 may not always do that ‚Äì causing test 2 to fail. Tests can also be flaky if they do not correctly acquire and release shared resources between them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do-about-it"&gt;
  &lt;/a&gt;
  What can you do about it?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use synchronization blocks between tests.&lt;/li&gt;
&lt;li&gt;Change the test to accept a wider range of behaviors.&lt;/li&gt;
&lt;li&gt;Remove dependencies between tests.&lt;/li&gt;
&lt;li&gt;Explicitly set static variables to their default value.&lt;/li&gt;
&lt;li&gt;Use resource pools - your tests can acquire and return resources to the pool.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-unreliable-3rd-party-apis"&gt;
  &lt;/a&gt;
  2. Unreliable 3rd party APIs
&lt;/h1&gt;

&lt;p&gt;Decreased control of your test environment increases the chances of test unpredictability. Flaky tests can occur when your test suite is dependent on unreliable third-party APIs or functionality maintained by another team. These tests may intermittently fail due to third-party system errors, unreliable network connections, or third-party contract changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do-about-it"&gt;
  &lt;/a&gt;
  What can you do about it?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use test stubs or test doubles to replace the third-party dependency. Your regular tests can talk to the double instead of the external source.&lt;/li&gt;
&lt;li&gt;Test doubles will not detect API contract changes. You will need to develop a separate suite of integration contract tests for this.&lt;/li&gt;
&lt;li&gt;Contract tests can be run separately and need not break the build the same as other tests. They can be run less frequently and be actioned independently of other bugs.&lt;/li&gt;
&lt;li&gt;Communicate with the third-party provider to discuss the impact of changes made by them on your system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#3-infrastructure-issues"&gt;
  &lt;/a&gt;
  3. Infrastructure issues
&lt;/h1&gt;

&lt;p&gt;Test infrastructure failure is one of the common causes for flaky tests. These include network outages, database issues, Continuous Integration Node Failure, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do-about-it"&gt;
  &lt;/a&gt;
  What can you do about it?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;These issues are typically easier to spot than others. Your debugging process can check these first before attempting to find other causes.&lt;/li&gt;
&lt;li&gt;Write fewer end-to-end tests and more unit tests.&lt;/li&gt;
&lt;li&gt;Run tests on real devices instead of emulators or simulators.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#4-flaky-ui-tests"&gt;
  &lt;/a&gt;
  4. Flaky UI tests
&lt;/h1&gt;

&lt;p&gt;UI tests are used to test visual logic, browser compatibility, animation, etc. Since they start at the browser level, they can be very flaky due to a variety of reasons ‚Äì from missing HTML elements, cookie changes, etc. to actual system issues. If you visualize your test suite as a pyramid, UI tests are at the top. They should only occupy a small portion of your test portfolio because they are brittle, expensive to maintain, and time-consuming to run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do-about-it"&gt;
  &lt;/a&gt;
  What can you do about it?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don‚Äôt use UI tests to test back-end logic.&lt;/li&gt;
&lt;li&gt;Capture the network layer using Chrome DevTools Protocol(CDP). CDP allows for tools to inspect, debug, and profile Chromium, Chrome, and other Blink-based browsers&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#5-badly-written-tests"&gt;
  &lt;/a&gt;
  5. Badly written tests
&lt;/h1&gt;

&lt;p&gt;Not following good test writing practices can result in a large number of flaky tests in your pipeline. Some common mistakes include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not adopting a testing framework even as code complexity and team size increases.&lt;/li&gt;
&lt;li&gt;Caching data. Over time, cached data may become stale affecting test results.&lt;/li&gt;
&lt;li&gt;Using random number generators without accounting for the full range of possibilities.&lt;/li&gt;
&lt;li&gt;Using floating-point operations without paying attention to underflows and overflows.&lt;/li&gt;
&lt;li&gt;Making assumptions about the order of elements in an unordered collection.&lt;/li&gt;
&lt;li&gt;Using sleep statements to make your test wait for a state change. Sleep statements are imprecise and one of the biggest causes of flaky tests. It is better to replace them with the waitFor() function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-can-you-do-about-it"&gt;
  &lt;/a&gt;
  What can you do about it?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Treat automation testing like any other software development effort. Make testing a shared responsibility between developers and analysts.&lt;/li&gt;
&lt;li&gt;Use tools to monitor test flakiness. If the flakiness is too high, the tool can quarantine the test, (removing it from the critical path) and help resolve issues faster.&lt;/li&gt;
&lt;li&gt;Start all tests in a known state.&lt;/li&gt;
&lt;li&gt;Avoid hardcoding test data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#is-there-a-way-to-eliminate-flaky-tests-completely"&gt;
  &lt;/a&gt;
  Is there a way to eliminate flaky tests completely?
&lt;/h1&gt;

&lt;p&gt;The unfortunate answer is, no, there is no silver bullet that entirely eliminates flakiness. Even &lt;a href="https://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html"&gt;high-performing teams like Google&lt;/a&gt; have reported at least some flakiness in 16% of their test suite.&lt;/p&gt;

&lt;p&gt;The best way to deal with the issue is by monitoring test-health and having both short-term and long-term mitigation strategies in place. If flaky tests are a severe problem for your team, or if this is a general topic of interest, email us at &lt;a href="mailto:founders@flakybot.com"&gt;founders@flakybot.com&lt;/a&gt; to get an invite to our private beta group for &lt;a href="https://www.flakybot.com"&gt;Flaky Bot&lt;/a&gt;, a tool to help manage flaky test infrastructure better.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>testing</category>
      <category>devops</category>
    </item>
    <item>
      <title>3 reasons to use 'var' in JavaScript</title>
      <author>Paul Thompson</author>
      <pubDate>Mon, 08 Nov 2021 22:19:53 +0000</pubDate>
      <link>https://dev.to/paritho/3-reasons-to-use-var-in-javascript-1hoe</link>
      <guid>https://dev.to/paritho/3-reasons-to-use-var-in-javascript-1hoe</guid>
      <description>&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword was JavaScript's first way to declare a variable. It fits, right? Var, variable, it's in the name. But like the Joker, &lt;code&gt;var&lt;/code&gt; is more than pretty face -- it has some baggage. As a beginning programmer, or a seasoned one dipping your toe into the seedy underbelly of JavaScript development, you maybe be wondering when you should use &lt;code&gt;var&lt;/code&gt; to declare your JavaScript objects and functions.&lt;/p&gt;

&lt;p&gt;Never fear. I have 3 reasons for you to use &lt;code&gt;var&lt;/code&gt; in your next JavaScript project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-love-tradition-and-spurn-anything-new"&gt;
  &lt;/a&gt;
  You love tradition and spurn anything new
&lt;/h2&gt;

&lt;p&gt;Var maybe the oldest keyword to declare a variable, but it is by far the only one. It's younger cousins, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; exploded onto the scene with &lt;a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015"&gt;ES6&lt;/a&gt; (over 6 years ago as of this writing!). But if sticking to old norms fraught with perils is your thing, keep using &lt;code&gt;var&lt;/code&gt; and leave these upstart keywords to listen to their terrible pop music and complain about their parents.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-prefer-mutability-even-when-you-dont"&gt;
  &lt;/a&gt;
  You prefer mutability, even when you don't
&lt;/h2&gt;

&lt;p&gt;Var has the troubling distinction of creating a variable of any type, which can then be changed to a variable of any type later. That's right, the number you declared on line 4 just became a string on line 17 and a boolean on line 109. This type flexibility is a key feature of JavaScript, but it can be avoided. But if you too like to live dangerously, keep using var.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-like-leaky-scopes"&gt;
  &lt;/a&gt;
  You like leaky scopes
&lt;/h2&gt;

&lt;p&gt;Prior to ES6, JavaScript variables were always defined at the function scope. In a lot of cases, this meant variables were &lt;em&gt;global&lt;/em&gt;. JavaScript didn't enforce block-level scopes such as inside a &lt;code&gt;for&lt;/code&gt; loop or &lt;code&gt;if&lt;/code&gt; block. So a variable declared with &lt;code&gt;var&lt;/code&gt; would be &lt;em&gt;hoisted&lt;/em&gt; to the top of its function scope. In other words, the variable declaration moved to the top of the current lexical environment with a value of &lt;code&gt;undefined&lt;/code&gt;. A common issue arising from hoisting is that such variables are accessible outside the block scope, where the developer may not expect them to be. &lt;/p&gt;

&lt;p&gt;A subtler and more difficult to detect bug can happen here as well, &lt;a href="https://eloquentjavascript.net/1st_edition/chapter3.html#p468c043e14dd0d54"&gt;variable shadowing&lt;/a&gt;. Rarely this may be desired. If that is you, &lt;code&gt;var&lt;/code&gt; is your hero.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-must-be-a-better-way"&gt;
  &lt;/a&gt;
  There must be a better way
&lt;/h2&gt;

&lt;p&gt;If you made it this far, you're probably seconds away from pounding out a fierce comment about how I'm wrong about &lt;code&gt;var&lt;/code&gt;. The truth is, no one should be using &lt;code&gt;var&lt;/code&gt; in any JavaScript code except for a history lesson. Even then, it should come with a footnote that says something like, "please don't ever do this."&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; have been available in &lt;a href="https://caniuse.com/?search=let"&gt;every major browser for the last 6 years&lt;/a&gt;. This is really, really ancient in frontend years. &lt;code&gt;var&lt;/code&gt; isn't just the parent misunderstanding their teen, it's the great grandparent everyone loves but no one invites to the &lt;em&gt;fun&lt;/em&gt; parties.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Let&lt;/code&gt; retains JavaScript's flexible type system while enabling block-scoping. &lt;code&gt;Const&lt;/code&gt; creates a -- you guessed it -- constant variable in block-scope. &lt;code&gt;Const&lt;/code&gt; creates a that cannot be reassigned, but similar to most other languages, &lt;code&gt;const&lt;/code&gt; objects can have their properties mutated. These two alternatives to &lt;code&gt;var&lt;/code&gt; should cover every use case you have. Even if you are in the tough spot of needing to support truly archaic browsers, don't use &lt;code&gt;var&lt;/code&gt;. Use a tool such as &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So please, please, do not use &lt;code&gt;var&lt;/code&gt;.  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>System Monitoring Commands üìàüíª</title>
      <author>Seb </author>
      <pubDate>Mon, 08 Nov 2021 22:14:58 +0000</pubDate>
      <link>https://dev.to/linuxseb/system-monitoring-commands-4gc9</link>
      <guid>https://dev.to/linuxseb/system-monitoring-commands-4gc9</guid>
      <description>&lt;p&gt;Hey everyone! I am back with another Linux article!üòä&lt;/p&gt;

&lt;p&gt;Today I will be going over basic commands you can use to monitor system performance! üìàüìâüíª&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-top"&gt;
  &lt;/a&gt;
  1. top üíª
&lt;/h4&gt;

&lt;p&gt;The 'top' command is used to display active processes and how much they are using system resources.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFJWMFZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n17hjqdillbfnhhbavy7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFJWMFZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n17hjqdillbfnhhbavy7.png" alt="Image description" width="726" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-lsof"&gt;
  &lt;/a&gt;
  2.  lsof üíª
&lt;/h4&gt;

&lt;p&gt;lsof stands for list of open files- basically shows you list of files and the processes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gzUpzHfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ue6rn9nld4aixjf63yf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gzUpzHfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ue6rn9nld4aixjf63yf.png" alt="Image description" width="732" height="180"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-tcpdump"&gt;
  &lt;/a&gt;
  3. tcpdump üíª
&lt;/h4&gt;

&lt;p&gt;'tcpdump' is used to analyze network traffic&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-htop"&gt;
  &lt;/a&gt;
  4. htop üíª
&lt;/h4&gt;

&lt;p&gt;'htop' is a lot like top - It's just allows you to monitor system resources or processes. As you can see, it's a bit more fancy than top&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4PYp2Wob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ltfrfogvjaj2mebb0jz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4PYp2Wob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ltfrfogvjaj2mebb0jz.png" alt="Image description" width="734" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-iostat"&gt;
  &lt;/a&gt;
  5. iostat üíª
&lt;/h4&gt;

&lt;p&gt;'iostat' is a command that is used to monitor input/output devices, by telling you how long the devices have been active.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u9h1QRNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wp9hq278mkobjnfj1va7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u9h1QRNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wp9hq278mkobjnfj1va7.png" alt="Image description" width="734" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-ps"&gt;
  &lt;/a&gt;
  6. ps üíª
&lt;/h4&gt;

&lt;p&gt;Displays the processes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SqGUknjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ln6t5yb92nam2axl5dej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SqGUknjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ln6t5yb92nam2axl5dej.png" alt="ps" width="286" height="186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-uptime"&gt;
  &lt;/a&gt;
  7. uptime üíª
&lt;/h4&gt;

&lt;p&gt;Tells you how long the system has been up&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rn2HSSQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lnyfjc1n6b2d8z8qp6y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rn2HSSQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lnyfjc1n6b2d8z8qp6y.png" alt="Image description" width="638" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-free"&gt;
  &lt;/a&gt;
  8. free üíª
&lt;/h4&gt;

&lt;p&gt;'free' shows you the amount of available memory you have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rYJz_V5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct8gmbzkmhyzyfis49py.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rYJz_V5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct8gmbzkmhyzyfis49py.png" alt="Image description" width="730" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-pidstat"&gt;
  &lt;/a&gt;
  9. pidstat üíª
&lt;/h4&gt;

&lt;p&gt;Used to monitor individual tasks. Great for troubleshooting issues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l1gUcII---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4b8fawt6vil4mymrpx6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l1gUcII---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4b8fawt6vil4mymrpx6.png" alt="Image description" width="728" height="227"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-w"&gt;
  &lt;/a&gt;
  10. w üíª
&lt;/h4&gt;

&lt;p&gt;'w' tells you information about users logged on and their processes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QNGMpvVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znh4lf2828hkwmdtmlke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QNGMpvVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znh4lf2828hkwmdtmlke.png" alt="Image description" width="721" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thats-it-thank-you-for-reading-todays-article"&gt;
  &lt;/a&gt;
  That's it! Thank you for reading today's articleü•≥
&lt;/h5&gt;

&lt;p&gt;These commands can be vital for you to monitor your system, so I will be releasing a part 2 soon, as well!üòÜ&lt;/p&gt;

&lt;p&gt;For future Linux and security content, please give me a follow &lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/linuxseb"&gt;@linuxseb&lt;/a&gt;
 &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thank-you-again"&gt;
  &lt;/a&gt;
  Thank you again!üòä
&lt;/h5&gt;

</description>
      <category>linux</category>
      <category>beginners</category>
      <category>systems</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Quick way to collapse/expand all files at once on a pull request on GitHub</title>
      <author>Dzhavat Ushev</author>
      <pubDate>Mon, 08 Nov 2021 22:11:17 +0000</pubDate>
      <link>https://dev.to/this-is-learning/quick-way-to-collapseexpand-all-files-at-once-on-a-pull-request-on-github-4pcp</link>
      <guid>https://dev.to/this-is-learning/quick-way-to-collapseexpand-all-files-at-once-on-a-pull-request-on-github-4pcp</guid>
      <description>&lt;p&gt;When I review pull requests on GitHub I usually start by collapsing all files and then expand them one at a time in order to focus on a single thing.&lt;/p&gt;

&lt;p&gt;This can be slightly annoying because GitHub by default shows all files in an expanded state and one needs to go through every single file header and click on the chevron icon to collapse all of them. Depending on the PR size this might take some time.&lt;/p&gt;

&lt;p&gt;Luckily, there‚Äôs a quicker way. I recently found this neat shortcut/trick that can collapse/expand all files at once. It‚Äôs &lt;code&gt;Alt + click&lt;/code&gt; on any chevron icon in the file‚Äôs header. Here‚Äôs a video:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FW7xRAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FBbddYgXoAEfdea.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--54EgR7Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1159369600053780480/MWhI9fwI_normal.jpg" alt="Dzhavat Ushev profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dzhavat Ushev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @dzhavatushev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Recently needed (then discovered) a neat way to collapse all files at once in a pull request (PR) on &lt;a href="https://twitter.com/github"&gt;@github&lt;/a&gt; . It's `Alt + click` on the caret icon in the file header. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:40 PM - 11 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1447587912133054470" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1447587912133054470" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1447587912133054470" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Now you know it too. Happy PR reviewing üéâ&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@baconandbaileys?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Kelly Neil&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/many?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>I wrote a Cozy Programming language</title>
      <author>Shaw</author>
      <pubDate>Mon, 08 Nov 2021 22:10:39 +0000</pubDate>
      <link>https://dev.to/shawsumma/i-wrote-a-cozy-programming-language-12lj</link>
      <guid>https://dev.to/shawsumma/i-wrote-a-cozy-programming-language-12lj</guid>
      <description>&lt;p&gt;When i started on writing &lt;a href="https://github.com/ShawSumma/paka"&gt;Paka&lt;/a&gt; in March 2020 I had no idea what I was getting into.&lt;/p&gt;

&lt;p&gt;I had only previously spent one month tops per project; Moving onto newer ideas and abandoning code was my modus operandi. I started new project, like the countless before, that was intended to be an interpreter for a new langugage called DEXT written in &lt;a href="https://dlang.org"&gt;The D Programming Language&lt;/a&gt;. As time passed and the code grew to about 3000 lines before the name change to Paka.&lt;/p&gt;

&lt;p&gt;Paka was intended to be a lisp originally, but ended up a scripting language with a 'polite' syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# add two numbers&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
 ‚Äã&lt;/p&gt;

&lt;p&gt;It translated recursion into simple array pushes and pops. This allowed for recursion to one's heart's content. &lt;/p&gt;

&lt;p&gt;It supported freezing the entire running program, heap and all, to a JSON subset consisting of only objects and strings. Sadly this had to be removed for its performance penalty. This is a feature on the top of the list to bring back, and I have devised a system to keep performance up.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#quest-october-2020"&gt;
  &lt;/a&gt;
  Quest (October 2020)
&lt;/h2&gt;

&lt;p&gt;In order to help others' languages that looked fun, I decided to implement a new language that works alongside Paka. A free little language called &lt;a href="https://github.com/sampersand/quest"&gt;Quest&lt;/a&gt;, made by a friend by the name of sampersand. It had more performance than the implementation they made, though had much head room to improve. It ended up not working out in the end, but it was a fun way to test my language's capability and try to improve quest as a language.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#passerine-february-2021"&gt;
  &lt;/a&gt;
  Passerine (February 2021)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/vrtbl/passerine"&gt;Passerine&lt;/a&gt; was the next language i decided to try to fit onto paka, but alas this one too was eventually put aside for the time being.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#minivm"&gt;
  &lt;/a&gt;
  MiniVM
&lt;/h2&gt;

&lt;p&gt;One day in a discord call a twist of fate come. Someone asked how to implement a virtual machine in C. I, having learned much about virtual machines in the past 13 months, was asked how to write one. What was going to be a one-off example soon ballooned into a new runtime and virtual machine for Paka.&lt;/p&gt;

&lt;p&gt;Performance was through the roof&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which ran in 850ms was now taking  500ms.&lt;/p&gt;

&lt;p&gt;MiniVM was soon converted from a stack machine to a register machine. This came with another reduction, this time to 400ms, for the above program&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-dream"&gt;
  &lt;/a&gt;
  A Dream
&lt;/h2&gt;

&lt;p&gt;One of my far-off seeming goals was to get Paka to the point where it could be used to write a compiler for itself in.&lt;br&gt;
This dream manifested almost out of thin air, when i made a simple Paka file to evaluate expressions like &lt;code&gt;1 + 2 + 3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then came the rest of the syntax to see how far i could get; It turns out it was less of an undertaking than i had expected.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-state-of-it-all"&gt;
  &lt;/a&gt;
  The state of it all
&lt;/h2&gt;

&lt;p&gt;Paka is now a cozy little language with a 30kb vm and 20kb compiler.&lt;/p&gt;

&lt;p&gt;It builds in less than a second for most folks with a computer from the last decade...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# build minivm and paka&lt;/span&gt;
git clone https://github.com/shawsumma/purr &lt;span class="nt"&gt;--recursive&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;purr
make &lt;span class="nt"&gt;-C&lt;/span&gt; minivm
make &lt;span class="nt"&gt;-C&lt;/span&gt; ./
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# run a file
./minivm/minivm bin/stage3 lang/test/echo.paka -- hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#call-to-action"&gt;
  &lt;/a&gt;
  Call to Action
&lt;/h2&gt;

&lt;p&gt;If you found any of this article interesting or helpful, it would be appreciated to give me a star over at &lt;a href="https://github.com/shawsumma/purr"&gt;shawsumma/purr&lt;/a&gt; and/or &lt;a href="https://github.com/shawsumma/minivm"&gt;shawsumma/minivm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And please be kind to me, this is my first time really writing about paka or minivm more than a paragraph.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>DOM Selectors in JavaScript</title>
      <author>Christopher Ninman</author>
      <pubDate>Mon, 08 Nov 2021 21:50:26 +0000</pubDate>
      <link>https://dev.to/alternate_robot/dom-selectors-in-javascript-344i</link>
      <guid>https://dev.to/alternate_robot/dom-selectors-in-javascript-344i</guid>
      <description>&lt;p&gt;While creating interactive content with JavaScript, you will often find yourself needing to access various HTML elements in order to make changes to them. We'll go through some of the main ways you can grab elements in the DOM, and how you can make use of what they hold.&lt;/p&gt;

&lt;h1&gt;Different Types of Selectors&lt;/h1&gt;

&lt;h3&gt;ID&lt;/h3&gt;

&lt;p&gt;If you want to manipulate one single element, the easiest and most straight-forward approach is to find that element by &lt;code&gt;id&lt;/code&gt;. Only one HTML element can have a specific &lt;code&gt;id&lt;/code&gt; attribute, and each ID is unique to one element.&lt;/p&gt;

&lt;h3&gt;Class&lt;/h3&gt;

&lt;p&gt;Multiple elements can be grouped together when they are given the same &lt;code&gt;class&lt;/code&gt; name. An example would be if you have multiple buttons that serve the purpose of deleting content, and you want all of those buttons to be manipulated in the same manner.&lt;/p&gt;

&lt;h3&gt;Tag&lt;/h3&gt;

&lt;p&gt;Some common tags in HTML are &lt;code&gt;body&lt;/code&gt;, &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;span&lt;/code&gt;, and &lt;code&gt;img&lt;/code&gt;, though there are numerous others. Another DOM selector is &lt;code&gt;tagName&lt;/code&gt;, which selects elements based on the type of element they are.&lt;/p&gt;

&lt;h1&gt;Accessing an Element by ID&lt;/h1&gt;

&lt;p&gt;In order to access an element with a specific &lt;code&gt;id&lt;/code&gt;, you have a few options. You can either use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById('element-id')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector('#element-id')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Either option will search the entire document and return the element with a matching &lt;code&gt;id&lt;/code&gt; as an object. If no element with the given &lt;code&gt;id&lt;/code&gt; is found, &lt;code&gt;null&lt;/code&gt; will be returned. If you encounter a &lt;code&gt;TypeError: Cannot read properties of null&lt;/code&gt;, it is likely that no element with that &lt;code&gt;id&lt;/code&gt; was found.&lt;/p&gt;

&lt;p&gt;You can also use these methods to create a variable, and then manipulate the DOM by calling that variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let foundElement = document.getElementById('first-header')
foundElement.style.color = 'blue'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If an element does not exist in the HTML file and is created using JavaScript, you can still give that element an &lt;code&gt;id&lt;/code&gt; using JavaScript with the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let createdWithJsElement = document.createElement('p')
createdWithJsElement.id = 'js-element'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Accessing an Element by ClassName&lt;/h1&gt;

&lt;p&gt;Similar to accessing an element by &lt;code&gt;id&lt;/code&gt;, you have a few choices for selecting elements by &lt;code&gt;class&lt;/code&gt;. You can access elements by &lt;code&gt;class&lt;/code&gt; name with the following methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector('.element-class')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return only the &lt;strong&gt;first&lt;/strong&gt; element that matches the specified &lt;code&gt;class&lt;/code&gt; name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementsByClassName('element-class')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The use of &lt;code&gt;getElementsByClassName&lt;/code&gt; will return a live &lt;code&gt;HTMLCollection&lt;/code&gt; of all the elements matching that &lt;code&gt;class&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelectorAll('.element-class')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;querySelectorAll&lt;/code&gt; method will return a static &lt;code&gt;NodeList&lt;/code&gt; of all the elements matching that class. Distinguishing between a &lt;code&gt;NodeList&lt;/code&gt; and an &lt;code&gt;HTMLCollection&lt;/code&gt; is a whole other topic which you can explore &lt;a href="https://unicorntears.dev/posts/queryselectorall-vs-getelementsbyclassname/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note the use of a &lt;strong&gt;dot&lt;/strong&gt; prior to the &lt;code&gt;class&lt;/code&gt; name, as opposed to the &lt;strong&gt;hash-tag&lt;/strong&gt; prior to doing a query selector on an &lt;code&gt;id&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In order to manipulate every element that is returned from the &lt;code&gt;getElementsByClassName&lt;/code&gt; or &lt;code&gt;querySelectorAll&lt;/code&gt; methods, you'll need to run a &lt;code&gt;for loop&lt;/code&gt; to iterate the array-like object and make the desired changes to each element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let allButtons = document.getElementsByClassName('button')

function testButtons () {
  for (let i = 0; i &amp;lt; allButtons.length; i++) {
    console.log(`I am button ${[i+1]}`);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can create or change an element's &lt;code&gt;class&lt;/code&gt;, or other &lt;code&gt;attribute&lt;/code&gt;, by accessing that element by its &lt;code&gt;[index]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;allButtons[5].className = 'delete-button'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Accessing an Element by TagName&lt;/h1&gt;

&lt;p&gt;Yet another way to select elements in the DOM is to select the elements by their &lt;code&gt;tag&lt;/code&gt; name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let allParagraphs = document.getElementsByTagName('p')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get even more specific with your search for specific elements based on &lt;code&gt;tag name&lt;/code&gt;. Suppose you want to change the color of the text in all the paragraphs of a "Skills" section. You can search for elements by &lt;code&gt;tag name&lt;/code&gt; within a specific div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mySkills = document.getElementById("skills-div");
const skillParagraphs = mySkills.getElementsByTagName("p");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like when the &lt;code&gt;getElementsByClassName&lt;/code&gt; method is called, &lt;code&gt;getElementsByTagName&lt;/code&gt; will return a live HTML collection of elements. This can be iterated over with a &lt;code&gt;for loop&lt;/code&gt; just like the list of elements gathered with the &lt;code&gt;getElementsByClassName&lt;/code&gt; method.&lt;/p&gt;

&lt;h1&gt;Wrapping It Up&lt;/h1&gt;

&lt;p&gt;If you can't precisely locate elements, you'll have difficulty making your JavaScript code come to life. These selectors are just the tip of the iceberg for making your creations dynamic.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@max_duz?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Max Duzij&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/programming?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>html</category>
    </item>
  </channel>
</rss>
