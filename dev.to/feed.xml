<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Path aliases in Nextjs</title>
      <author>Alexander Kim</author>
      <pubDate>Sat, 18 Dec 2021 05:31:45 +0000</pubDate>
      <link>https://dev.to/avxkim/path-aliases-in-nextjs-4pio</link>
      <guid>https://dev.to/avxkim/path-aliases-in-nextjs-4pio</guid>
      <description>&lt;p&gt;Tired of writing such imports?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../../components/Test.tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're using a typescript, you can create a path alias instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"baseUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"@/*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"./*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can import more conveniently:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/Test.tsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Don't forget to restart your running task to affect changes.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Download spotify music for no cost!</title>
      <author>C Vamshi Krishna</author>
      <pubDate>Sat, 18 Dec 2021 04:44:33 +0000</pubDate>
      <link>https://dev.to/insaiyancvk/download-spotify-music-for-no-cost-24aj</link>
      <guid>https://dev.to/insaiyancvk/download-spotify-music-for-no-cost-24aj</guid>
      <description>&lt;p&gt;Hey there!&lt;br&gt;
Check out this little project I worked on that you might find useful :)&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Download single song&lt;/li&gt;
&lt;li&gt;Download Youtube Playlist&lt;/li&gt;
&lt;li&gt;Download Spotify playlist/album (searches on youtube and downloads the top result)&lt;/li&gt;
&lt;li&gt;Convert downloaded songs to mp3 or flac&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#the-final-result"&gt;
  &lt;/a&gt;
  The final result
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B4WOWONa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/insaiyancvk/pymusicdl/raw/main/assets/downloads.jfif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4WOWONa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/insaiyancvk/pymusicdl/raw/main/assets/downloads.jfif" alt="https://open.spotify.com/playlist/4WtqLI6gaRFaWB4g6mDnAX" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the demo, installation guide on YouTube or &lt;a href="https://github.com/insaiyancvk/pymusicdl"&gt;GitHub&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1_BmOtZoo1o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>python</category>
      <category>opensource</category>
      <category>spotify</category>
    </item>
    <item>
      <title>id() in python</title>
      <author>Siddhesh Agarwal</author>
      <pubDate>Sat, 18 Dec 2021 04:28:59 +0000</pubDate>
      <link>https://dev.to/siddhesh_agarwal/id-in-python-27b5</link>
      <guid>https://dev.to/siddhesh_agarwal/id-in-python-27b5</guid>
      <description>&lt;p&gt;In this post, I will try to improve your idea about memory in python using the in-built &lt;code&gt;id()&lt;/code&gt; function. For those of you who don't know what &lt;code&gt;id()&lt;/code&gt; is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;id()&lt;/code&gt; function returns a unique ID of the object. All objects in python have a unique ID and no 2 different values correspond to the same ID.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let us begin with a small example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Fun fact:&lt;/strong&gt; In python, &lt;code&gt;id(a) == id(b)&lt;/code&gt; is analogous to &lt;code&gt;a is b&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above code prints &lt;code&gt;True&lt;/code&gt; because python creates the variable &lt;code&gt;b&lt;/code&gt; with the value &lt;code&gt;500&lt;/code&gt; and then creates a variable &lt;code&gt;a&lt;/code&gt; pointing to the value of &lt;code&gt;b&lt;/code&gt;. This implies that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are pointing towards the same memory location and hence the same ID.&lt;/p&gt;




&lt;p&gt;Now let us raise the bar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code prints &lt;code&gt;False&lt;/code&gt; because: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python creates a variable &lt;code&gt;a&lt;/code&gt; pointing to the value &lt;code&gt;500&lt;/code&gt; in the memory. &lt;/li&gt;
&lt;li&gt;Then it creates another variable &lt;code&gt;b&lt;/code&gt; pointing to another value &lt;code&gt;500&lt;/code&gt; (yeah, both 500 are different).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence, both have different IDs because both point towards different memory locations.&lt;/p&gt;




&lt;p&gt;I hope you guys aren't confused because there is more to come. Guess the output for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You guys may think &lt;em&gt;"This is the previous question with different values. I know the answer is &lt;code&gt;False&lt;/code&gt;"&lt;/em&gt; but not so fast.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xy2VjLtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/zYO7NF-U234AAAAC/er-not-so-fast-hold-up.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xy2VjLtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/zYO7NF-U234AAAAC/er-not-so-fast-hold-up.gif" alt="Not so fast" width="498" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For small integers (The CPython range is -5 to 256, both inclusive), then integer objects (&lt;code&gt;&amp;lt;class 'int'&amp;gt;&lt;/code&gt;) are shared. This is done entirely to save space. The memory imprint of the console would be significantly larger if these objects weren’t sharing their memory.&lt;/p&gt;

&lt;p&gt;So the correct answer is &lt;code&gt;True&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;Okay, okay. Just one more to go. The last one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="n"&gt;id1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="n"&gt;id2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;id2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, even though I am re-declaring the same variable with the same value, the answer is &lt;strong&gt;most likely&lt;/strong&gt; to be &lt;code&gt;False&lt;/code&gt;. I'll explain to you why. When you re-declare a variable in python, the interpreter works in the same way as a declaration. i.e. It entirely deletes the before existing value and creates a variable with the new value. So when we give &lt;code&gt;a = 500&lt;/code&gt;, the second time the interpreter deletes the previously existing value of &lt;code&gt;a&lt;/code&gt; and create a new memory location for &lt;code&gt;500&lt;/code&gt; where &lt;code&gt;a&lt;/code&gt;  would point towards. Both these IDs are most likely to be different.&lt;/p&gt;

&lt;p&gt;SO, the answer is &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If the above example had a number belonging to the inclusive range -5 to 256, the answer would have been &lt;code&gt;True&lt;/code&gt;. this is because number belonging to the inclusive range have a fixed memory location.&lt;/p&gt;

</description>
      <category>python</category>
      <category>memorymanagement</category>
    </item>
    <item>
      <title>Our entrepreneur virtual coworking space setup</title>
      <author>Wannabe Entrepreneur 🎙️</author>
      <pubDate>Sat, 18 Dec 2021 04:13:40 +0000</pubDate>
      <link>https://dev.to/wbepodcast/our-entrepreneur-virtual-coworking-space-setup-3508</link>
      <guid>https://dev.to/wbepodcast/our-entrepreneur-virtual-coworking-space-setup-3508</guid>
      <description>&lt;p&gt;A virtual coworking space for entrepreneurs is a place where indie makers from all over the world can work together on their projects while supporting each other and feeling like part of a team.&lt;/p&gt;

&lt;p&gt;I have been growing the &lt;a href="https://wannabe-entrepreneur.com/coworking/"&gt;WBE space&lt;/a&gt; for the past 5 months to a community that has 40 members now and here is the setup that best works for us:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Slack Channel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This channel is the center of communication and the place where most of the indie makers hang out.  I have tried out multiple channels but here are the ones that have the most engagement:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- what-i-am-doing-today:&lt;/strong&gt; Everyday members write down their daily goals and support each other with encouraging words or relevant tips. I am quite surprised with the fact that people not only share their business-related tasks but also more personal ones... Really cool!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- victories-and-frustrations:&lt;/strong&gt; We celebrate each other victories and give support when needed. This channel is not used on a daily basis by every member but it's still very popular&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- introductions:&lt;/strong&gt; This is a classic but a must for every community. I set up an automatic message that asks every new member to introduce themselves in the channel. It works as an ice breaker for the newbie and the members are very welcoming.&lt;/p&gt;

&lt;p&gt;We have a couple of other popular channels like the &lt;strong&gt;looking-for-advice,&lt;/strong&gt; &lt;strong&gt;feedback&lt;/strong&gt;, and &lt;strong&gt;today-I-learned&lt;/strong&gt; which are used multiple times a week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Virtual Office Rooms&lt;/strong&gt;&lt;br&gt;
Using jitsi and the slack API I created two virtual rooms that are available 24/7:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Work Room:&lt;/strong&gt; Entrepreneurs turn on the camera and work together in their individual tasks. Is like being in an office. I also implemented a shared Pomodoro timer 🍅 , so normally we work for 30min, have a 5min chat, and restart&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Break Room:&lt;/strong&gt; Just a place to chill and drink a coffee or beer and chat about our projects and life in general. Once a month we also do a community event that gathers most of the members.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entrepreneurs Wiki&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I put it together using netlify cms and it works great! Is a place where members can document their favorite tools together with how they use them. I also use it to document all the community-only discounts that I have been able to get from SaaS founders.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;&lt;br&gt;
A member pays 4 euros per month to be part of the space, I use &lt;a href="https://www.buymeacoffee.com/"&gt;buymeacoffee&lt;/a&gt; to manage the subscriptions. To be honest I haven't played much around the pricing but from what I gathered the members seem quite happy with it. One cool thing I noticed is that the paying members are much more active and engaged than the guests...&lt;/p&gt;

&lt;p&gt;And here is what I have learned so far and how our setup looks like. If you have a community I would love to hear about your setup and let me know if you have any questions.&lt;/p&gt;

&lt;p&gt;Cheers&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Run Js - The best code editor for JavaScript Developers </title>
      <author>duskycoders</author>
      <pubDate>Sat, 18 Dec 2021 03:13:27 +0000</pubDate>
      <link>https://dev.to/duskycoders/run-js-the-best-code-editor-for-javascript-developers-3jd1</link>
      <guid>https://dev.to/duskycoders/run-js-the-best-code-editor-for-javascript-developers-3jd1</guid>
      <description>&lt;p&gt;Run Js is a code editor for JavaScript developers with zero setup. There are lot of code editors and IDEs for JavaScript. There is Sublime a light weight code editor for all types of developers. We can easily build Laravel application with sublime. Atom on the other hand is another code editor with little bit look of IDE but it is not. It is a bit better than atom in sense it has own command line APM with no integrated terminal. It has nice GUI with ease in installing packages and themes. &lt;/p&gt;

&lt;p&gt;VS code is another famous boy not a kid. VS code still we can not say it is an IDE. But VS code is not a simple code editors with huge awesomeness like it has Integrated terminal, Code refactoring, code intelligence, themes and large marketplace for extensions. Web storm is super duper and complete solution for JavaScript ecosystem. But it is paid.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#problems-with-ordinary-code-editors-and-ides"&gt;
  &lt;/a&gt;
  Problems with ordinary code editors and IDEs
&lt;/h1&gt;

&lt;p&gt;JavaScript is a client side as well server language. It has two paths. On the client side we need a browser and terminal for the server side. A developer in hurry wants to test JavaScript code but he has number of hurdles like setting browser or setting up terminal for Node Js. You could lose your interest if you have to make huge setup before running hello world same as we do in Android Development setup. How you can solve your problems. Yeah I have solution! Run Js. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#run-js-for-the-developers-want-to-ace"&gt;
  &lt;/a&gt;
  Run Js - For the developers want to ace
&lt;/h1&gt;

&lt;p&gt;Run Js is zero setup, beginner friendly, with Node Js development support. RunJs is a good code editor and IDE for the Frontend Developers as well as Node Js Develoeprs. You don't need to inject script tag to html. You don't even need html to run JavaScript code. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is JavaScript playground for your desktop. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It would be like you are writing any other language like python that does not need html file or browser. It does not need any terminal or console. Everything inside RunJs is integrated and many features are out of the box. I&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#runjs-beginner-friendly-for-hurry-developers"&gt;
  &lt;/a&gt;
  RunJs - Beginner friendly | For hurry developers
&lt;/h2&gt;

&lt;p&gt;Explore and experiment with JavaScript and TypeScript, visualize your ideas and get instant feedback as you type. Some features are listed below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Exploring JavaScript has never been easier. Live feedback as you type, with per-line results makes it super clear what your code is doing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qt9ajs2w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639795562163/3zC2H9KMq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qt9ajs2w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639795562163/3zC2H9KMq.png" alt="screenshot-runjs.app-2021.12.18-07_44_25.png" width="771" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
In RunJS you have access to Node and Browser APIs, including full DOM access. This gives you a level of versatility that's not possible in a standard REPL or Chrome console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yxLPQKsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639795735499/9hx0WJTm0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yxLPQKsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639795735499/9hx0WJTm0.png" alt="screenshot-runjs.app-2021.12.18-07_47_54.png" width="860" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Babel and TypeScript support enables you to write modern, up-to-date syntax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_fUc_HyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639795907081/hUK0I4Lkh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_fUc_HyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639795907081/hUK0I4Lkh.png" alt="screenshot-runjs.app-2021.12.18-07_50_49.png" width="772" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#freemium"&gt;
  &lt;/a&gt;
  Freemium
&lt;/h3&gt;

&lt;p&gt;Only cons you might consider that is price 28 $ -&amp;gt; &lt;a href="https://runjs.app/buy"&gt; Buy -&amp;gt; not affiliated link &lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7z5n9OqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639796274576/WVKri91K-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7z5n9OqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639796274576/WVKri91K-.png" alt="screenshot-runjs.app-2021.12.18-07_54_18.png" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download for free&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://runjs.app/#platforms"&gt;Get RunJs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for spending your important time for reading this article.   &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>npm</category>
      <category>webdev</category>
    </item>
    <item>
      <title>RDS Encryption and Security</title>
      <author>Vijay Patel</author>
      <pubDate>Sat, 18 Dec 2021 03:10:41 +0000</pubDate>
      <link>https://dev.to/easyawslearn/rds-encryption-and-security-1l53</link>
      <guid>https://dev.to/easyawslearn/rds-encryption-and-security-1l53</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-amazon-rds"&gt;
  &lt;/a&gt;
  What is Amazon RDS?
&lt;/h2&gt;

&lt;p&gt;Amazon Relational Database Service (Amazon RDS) makes it easy to set up, operate, and scale a relational database in the cloud. &lt;br&gt;
It provides cost-efficient and resizable capacity while automating time-consuming administration tasks such as hardware provisioning, database setup, patching, and backups. &lt;br&gt;
It frees you to focus on your applications so you can give them the fast performance, high availability, security, and compatibility they need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-rds-security"&gt;
  &lt;/a&gt;
  AWS RDS Security
&lt;/h2&gt;

&lt;p&gt;AWS provides multiple features to provide RDS security&lt;br&gt;
DB instance can be hosted in a VPC for the greatest possible network access control&lt;br&gt;
IAM policies can be used to assign permissions that determine who is allowed to manage RDS resources&lt;br&gt;
Security groups allow controlling what IP addresses or EC2 instances can connect to the databases on a DB instance&lt;br&gt;
Secure Socket Layer (SSL) connections with DB instances&lt;br&gt;
RDS encryption to secure RDS instances and snapshots at rest.&lt;br&gt;
Network encryption and transparent data encryption (TDE) with Oracle DB instances&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Here is the full tutorial video based on RDS Encryption and Security👇👇&lt;/code&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=77h8NnV2JAw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t1vgUscF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38ho0x2dkijk9lvypodz.png" alt="Image description" width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rds-authentication-and-access-control"&gt;
  &lt;/a&gt;
  RDS Authentication and Access Control
&lt;/h2&gt;

&lt;p&gt;IAM can be used to control which RDS operations each individual user has permission to call&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssl-to-encrypt-a-connection-to-a-db-instance"&gt;
  &lt;/a&gt;
  SSL to Encrypt a Connection to a DB Instance
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Encrypt connections using SSL for data in transit between the applications and the DB instance&lt;/li&gt;
&lt;li&gt;Amazon RDS creates an SSL certificate and installs the certificate on the DB instance when RDS provisions the instance.&lt;/li&gt;
&lt;li&gt;SSL certificates are signed by a certificate authority. SSL certificate includes the DB instance endpoint as the Common Name (CN) for the SSL certificate to guard against spoofing attacks&lt;/li&gt;
&lt;li&gt;While SSL offers security benefits, be aware that SSL encryption is a compute-intensive operation and will increase the latency of the database connection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#iam-database-authentication"&gt;
  &lt;/a&gt;
  IAM Database Authentication
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IAM database authentication works with MySQL and PostgreSQL.&lt;/li&gt;
&lt;li&gt;IAM database authentication prevents the need to store static user credentials in the database because authentication is managed externally using IAM.&lt;/li&gt;
&lt;li&gt;IAM database authentication does not require a password but needs an authentication token&lt;/li&gt;
&lt;li&gt;An authentication token is a unique string of characters that RDS generates on request.&lt;/li&gt;
&lt;li&gt;Authentication tokens are generated using AWS Signature Version 4.&lt;/li&gt;
&lt;li&gt;Each Authentication token has a lifetime of 15 minutes&lt;/li&gt;
&lt;li&gt;IAM database authentication provides the following benefits:

&lt;ul&gt;
&lt;li&gt;Network traffic to and from the database is encrypted using Secure Sockets Layer (SSL).&lt;/li&gt;
&lt;li&gt;helps centrally manage access to the database resources, instead of managing access individually on each DB instance.&lt;/li&gt;
&lt;li&gt;enables using IAM Roles to access the database instead of a password, for greater security.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;▬▬▬▬▬▬ WANT TO LEARN MORE? ▬▬▬▬▬▬&lt;br&gt;
Full Terraform tutorial ► &lt;a href="https://bit.ly/2GwK8V2"&gt;https://bit.ly/2GwK8V2&lt;/a&gt;&lt;br&gt;
DevOps Tools, like Ansible ► &lt;a href="https://bit.ly/3iASHuP"&gt;https://bit.ly/3iASHuP&lt;/a&gt;&lt;br&gt;
Docker Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
AWS Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
GCP Tutorial ► &lt;a href="https://bit.ly/3mwh412"&gt;https://bit.ly/3mwh412&lt;/a&gt;&lt;br&gt;
Jenkins Tutorials ► [&lt;a href="https://bit.ly/3iHnfv4"&gt;https://bit.ly/3iHnfv4&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>aws</category>
      <category>rds</category>
      <category>security</category>
      <category>encryption</category>
    </item>
    <item>
      <title>Laravel breeze vs Jetstream</title>
      <author>oyedeletemitope</author>
      <pubDate>Sat, 18 Dec 2021 03:05:18 +0000</pubDate>
      <link>https://dev.to/oyedeletemitope/laravel-breeze-vs-jetstream-27hp</link>
      <guid>https://dev.to/oyedeletemitope/laravel-breeze-vs-jetstream-27hp</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;laravel offers several options for authentication in your applications to provide a robust and modern scaffolding for our authentication layer. Laravel starter kits are one of those options and this consists of breeze and jetstream.&lt;/p&gt;

&lt;p&gt;Laravel Breeze is an excellent choice when it comes to getting things running quickly,  And then there’s jetstream which offers two-factor auth, API tokens, and team management. If you are looking for additional features then jetstream is for you.&lt;/p&gt;

&lt;p&gt;In this article,  We will be exploring everything you need to know about getting started with both starter kits packages. We will look at the installation guide, discuss the differences between them, their similarities, and when to use them. So let's get started&lt;br&gt;
Objectives&lt;/p&gt;

&lt;p&gt;At the end of this article, we should be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Know what Laravel and jetstream are.&lt;/li&gt;
&lt;li&gt;Install Laravel and jetstream.&lt;/li&gt;
&lt;li&gt;Know their similarities.&lt;/li&gt;
&lt;li&gt;Identify their differences.&lt;/li&gt;
&lt;li&gt;Know when to use them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;To continue with this article you must have had prior knowledge as to what laravel is, and  have Laravel 8 installed on your pc. If not you can check out their documentation to get started with Laravel and also its installation process. You must also have a PHP version of 7.3 and above.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#laravel-breeze"&gt;
  &lt;/a&gt;
  Laravel Breeze
&lt;/h3&gt;

&lt;p&gt;Laravel Breeze is an implementation of all of Laravel’s authentication features, The Breeze in essence is a scaffold for solid authentication flow in your Laravel application with sleek views, component system, and a basic dashboard layout; it is built with Laravel Blade.&lt;/p&gt;

&lt;p&gt;If you’ve used Laravel before, Laravel Breeze is an upgrade of Laravel UI which sets up basic login, register logout, forgot password, create a password, email verification, and password confirmation functionality so you can customize it to your needs, Breeze doesn't rely on any job script framework, just Laravel, and blade. It does use the tailwind framework which is a CSS framework for the styling. If you haven’t heard of tailwind before it is a styling meaning of CSS. To learn more about tailwind visit this link.&lt;/p&gt;

&lt;p&gt;Laravel Breeze creates all the controllers, routes, and views needed to set up and configure authentication features and functionality.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;The installation looks pretty straightforward. For us to install Laravel Breeze, let’s head over to our terminal and run the following composer command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require laravel/breeze &lt;span class="nt"&gt;--dev&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we run our artisan command below to complete this installation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan breeze:install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This installs the necessary views, styles, and scaffolding. You will get the following output saying: &lt;code&gt;breeze scaffolding successfully&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run your npm install &amp;amp;&amp;amp; npm run dev command to get our dependencies installed and compile our frontend assets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit your domain name or server IP address via your browser, you will be able to see the default Laravel page with a login and register link at the top.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--APUCD1WV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ft3qpdjkcpjsnglrl181.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--APUCD1WV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ft3qpdjkcpjsnglrl181.jpg" alt="laravel breeze" width="327" height="154"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look at the file structure which includes the routes, the view, and the controllers and can be found at standard locations.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#routes"&gt;
  &lt;/a&gt;
  Routes
&lt;/h4&gt;

&lt;p&gt;The route is a way of creating a request URL for your application. The route files are located in the &lt;code&gt;routes/auth.php file&lt;/code&gt;, which, on the other hand, is included directly in your web.php file with the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;require__DIR__.&lt;span class="s1"&gt;'/auth.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Opening the auth.php is a list of authentication routes which includes routes for logging in, registration, password reset, email validation, password confirmation, and logging out.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#controllers"&gt;
  &lt;/a&gt;
  Controllers
&lt;/h4&gt;

&lt;p&gt;Controllers accept commands from the model and convert them so the data can be used by the view. All routers are directly linked to the controller. The Auth controllers are stored in &lt;code&gt;app/Http/Controllers/Auth/&lt;/code&gt;.&lt;br&gt;
In the folder, we have the following controllers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AuthenicatedSessionController.php&lt;/li&gt;
&lt;li&gt;ConfirmablePasswordController.php&lt;/li&gt;
&lt;li&gt;EmailVerificationNotificationController.php&lt;/li&gt;
&lt;li&gt;NewPasswordController.php&lt;/li&gt;
&lt;li&gt;PasswordResetLinkController.php&lt;/li&gt;
&lt;li&gt;RegisterdUserController.php&lt;/li&gt;
&lt;li&gt;VerifyEmailController.php&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#views"&gt;
  &lt;/a&gt;
  Views
&lt;/h4&gt;

&lt;p&gt;Views are methods in Laravel that separate the controller logic and domain logic from the presentation logic. Views are located in resources/views/auth/.&lt;/p&gt;

&lt;p&gt;The list of blade views available include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;confirm-password.blade.php&lt;/li&gt;
&lt;li&gt;forgot -password.blade.php&lt;/li&gt;
&lt;li&gt;login.blade.php&lt;/li&gt;
&lt;li&gt;register.blade.php&lt;/li&gt;
&lt;li&gt;reset-password.blade.php&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#when-should-you-use-breeze"&gt;
  &lt;/a&gt;
  When should you use Breeze?
&lt;/h4&gt;

&lt;p&gt;Breeze is perfect for you when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your app mainly consists of an ordinary Laravel blade template or if you want to rapidly get authentication added to an application without a large amount of opinion needed code.&lt;/li&gt;
&lt;li&gt;You want to modify the authentication functionality of your app quickly.&lt;/li&gt;
&lt;li&gt;You're building an app from scratch that doesn't require the features that fortify or Jetstream provide.&lt;/li&gt;
&lt;li&gt;You just want a more up-to-date Laravel UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let’s move on to Jetstream.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#jetstream"&gt;
  &lt;/a&gt;
  Jetstream
&lt;/h4&gt;

&lt;p&gt;Jetstream takes things a bit more advanced than Breeze,  It adds a lot more features than the basic authentication features that we need. It’s a package that’s much bigger than Breeze. In Jetstream we get:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login and registration functionality&lt;/li&gt;
&lt;li&gt;Email verification&lt;/li&gt;
&lt;li&gt;Two-factor authentication&lt;/li&gt;
&lt;li&gt;Session management&lt;/li&gt;
&lt;li&gt;API authentication with Sanctum&lt;/li&gt;
&lt;li&gt;Team management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jetstream is meant to be a framework within a framework giving you a scaffold and library features to build a fully functioning Sass dashboard or another type of application out of. Laravel Jetstream is free and open-source.&lt;/p&gt;

&lt;p&gt;Jetstream actually uses a package called Fortify. Fortify actually does the job of defining the routes and controllers for implementing the application's authentication features while the Jetstream UI makes requests to those routes.&lt;/p&gt;

&lt;p&gt;When Jetstream is installed, the config/fortify.php configuration file is installed into your application. You can use this package if you want to have complete control of your frontend or maybe you're building an API and you don’t even need a front end altogether. Laravel Jetstream is free and open-source&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Jetstream can be installed in different ways, You can use a composer or the Laravel installer&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#installing-with-laravel-installer"&gt;
  &lt;/a&gt;
  Installing with Laravel installer
&lt;/h4&gt;

&lt;p&gt;Get the latest version of Laravel installer, add &lt;code&gt;--jet&lt;/code&gt; flag in order to install a new Laravel Jetstream project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;laravel new project-name &lt;span class="nt"&gt;--jet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next thing is to run your migrations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#installing-jetstream-with-composer"&gt;
  &lt;/a&gt;
  Installing Jetstream with Composer
&lt;/h4&gt;

&lt;p&gt;For installation using composer, you need to run the following command inside your Laravel directory just like you would with any other package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require laravel/jetstream
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is finished  run the PHP artisan command along with our scaffold of choice&lt;/p&gt;

&lt;p&gt;• For those who prefer to use Livewire with Blade run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan jetstream:install livewire
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those who prefer to  use Inertia with Vue run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan jetstream:install inertia
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may also add the &lt;code&gt;--teams&lt;/code&gt; flag to enable Laravel Jetstream team support.&lt;/p&gt;

&lt;p&gt;Download and compile assets with npm install and  npm run dev&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command above will build your assets. Finally, make sure to run your migrations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Jetstream has been given its own dedicated subdomain website and if we head over to it here &lt;a href="https://jetstream.laravel.com/2.x/introduction.html"&gt;link&lt;/a&gt; you can find all the information about what it does.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h4&gt;

&lt;p&gt;Our newly installed Jetstream comes with a login form,two-factor authentication, registration form password reset, email verification which can all be found in &lt;code&gt;resources/views/auth&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Like I mentioned before, Jetstream uses a package called fortify. You can find the fortify actions in &lt;code&gt;app/actions/Fortify/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Fortify configurations can be found in config/fortify.php.&lt;/p&gt;

&lt;p&gt;Here you can make changes like enable and disable different features.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#profile-management"&gt;
  &lt;/a&gt;
  Profile Management
&lt;/h4&gt;

&lt;p&gt;Jetstream provides users with user profile management functionality which allows users to update their name, email address, and also upload their profile photos.&lt;/p&gt;

&lt;p&gt;The user profile view is stored in resources/views/profile/update-profile-information-form.blade.php.&lt;/p&gt;

&lt;p&gt;Just in case you’re using inertia you can find the views in &lt;code&gt;resources/js/Pages/Profile/UpdateProfileInformationForm.vue&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h4&gt;

&lt;p&gt;Worried about your application security? That’s not a problem, Laravel Jetstream comes with the standard functionality that allows users to update their password and log out which means it’s more than just safe.&lt;/p&gt;

&lt;p&gt;What’s more impressive is that it offers two-factor authentication with QR code, which the users could enable and disable directly. Also, users can log out of other browser sessions as well. The profile Blade views can be found in resources/views/profile/.&lt;/p&gt;

&lt;p&gt;And if you are working with inertia, you can find them in &lt;code&gt;resources/js/Pages/Profile/&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#jetstream-api"&gt;
  &lt;/a&gt;
  Jetstream API
&lt;/h4&gt;

&lt;p&gt;Laravel Jetstream uses Laravel Sanctum to provide a simple token-based API. It is a Laravel package created for the authentication of Single Page Applications (SPAs), mobile applications, and basic token-based APIs. &lt;br&gt;
To know more about APIs with sanctum I’ll recommend reading &lt;a href="https://www.twilio.com/blog/build-restful-api-php-laravel-sanctum"&gt;this&lt;/a&gt; article. Using Sanctum, each user can generate API tokens with specific permissions like Create, Read, Update, and Delete (CRUD).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#jetstream-teams"&gt;
  &lt;/a&gt;
  Jetstream Teams
&lt;/h4&gt;

&lt;p&gt;In case you used the &lt;code&gt;--team&lt;/code&gt;` flag during your Jetstream installation, your website would be able to support team creation and management.&lt;/p&gt;

&lt;p&gt;With the Jetstream teams feature, each user can create and belong to multiple teams.&lt;/p&gt;

&lt;p&gt;For more information about Jetstream teams, you can check out their official documentation here.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#when-should-you-use-jetstream"&gt;
  &lt;/a&gt;
  When should you use Jetstream?
&lt;/h4&gt;

&lt;p&gt;You should use Jetstream if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You're conversant with Laravel Livewire, Inertia, and tailwind or you don’t mind taking time to learn them.&lt;/li&gt;
&lt;li&gt;You have an understanding&lt;/li&gt;
&lt;li&gt;You want to immediately start building the core functionality of your app without investing much time in procedures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#differences"&gt;
  &lt;/a&gt;
  Differences
&lt;/h3&gt;

&lt;p&gt;One of the main differences between the two is that Jetstream relies heavily on a frontend stack. It comes with two different options which are the livewire blades and inertia Vue. If you're used to using Vue for your applications, then go down the inertia root otherwise go for live wire and blade. Also if you’ve used Laravel Jetstream before, you will notice that it is a little overwhelming and has a stiff learning curve while Laravel Breeze was developed to get you set up immediately.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#similarities"&gt;
  &lt;/a&gt;
  Similarities
&lt;/h3&gt;

&lt;p&gt;Their similarities are quite glaring as they are both packages that add pieces of frontend and backend functionality to your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So far we’ve explored Laravel Breeze and Jetstream, how to install them, differences, similarities, and also when you can use them. Both have outstanding features for the authentication process these packages were introduced to protect a secured area or restricted actions. You just have to choose the one that best suits your style. Please share if this was helpful.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>100daysofcode</category>
      <category>programming</category>
    </item>
    <item>
      <title>Scheduled exports from Shopify to Google sheets</title>
      <author>Ajay Jarhad</author>
      <pubDate>Sat, 18 Dec 2021 02:50:57 +0000</pubDate>
      <link>https://dev.to/canonic/scheduled-exports-from-shopify-to-google-sheets-495l</link>
      <guid>https://dev.to/canonic/scheduled-exports-from-shopify-to-google-sheets-495l</guid>
      <description>&lt;p&gt;Next on our list to &lt;strong&gt;Integrate and optimize the daily workflow&lt;/strong&gt;, we have got a detailed guide on how to get scheduled exports from &lt;strong&gt;Shopify to Google sheets&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;By the end of this guide, you will be able to &lt;strong&gt;create a trigger&lt;/strong&gt; that &lt;strong&gt;updates the inventory on Shopify&lt;/strong&gt; whenever a new row is added to the inventory sheet. So let's begin, shall we! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started! 🚀
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Create necessary sheets to hold our inventory data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First thing first, let's create an empty google sheet to hold our inventory data. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lmarVBPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wzxuq18vhwvtmoplr0h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lmarVBPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wzxuq18vhwvtmoplr0h.png" alt="Sheet-Step1" width="688" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Let’s now work on those integrations!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to this &lt;a href="https://app.canonic.dev/projects/61af33b3b9347d002d5beb7b/api-2?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=step2_sample_project&amp;amp;utm_content=day_18"&gt;sample project&lt;/a&gt; and click on the top right corner to clone it. This project already has YouTube integration for metrics set up. So all we have to do is clone it and get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Nrj8r19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8hw7sohtk8szxohb4xa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Nrj8r19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8hw7sohtk8szxohb4xa.png" alt="Step 2" width="880" height="514"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Explore API tab&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the same project, from the left-hand navigation bar, move to the &lt;strong&gt;API tab&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;There, in the left-hand panel, you’ll find different divisions like - &lt;strong&gt;Endpoints, Scheduled triggers, DB triggers, Integration triggers, etc&lt;/strong&gt;. In the scheduled triggers, you should find it already set up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: The dailyInventoryReporting flow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's now build the &lt;strong&gt;integration scheduled trigger&lt;/strong&gt; that gets triggered every evening at 8 pm.&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;dailyInventoryReporting&lt;/strong&gt; trigger and it’ll open up the graph for it. Our flow looks something like this &lt;br&gt;
👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xaim5vPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hsyef8mls4zzzc8h72p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xaim5vPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hsyef8mls4zzzc8h72p.png" alt="Step 4" width="880" height="188"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Updating configuration of integrations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's start inspecting and correcting any integration settings should we have to. Click on the left most trigger will reveal its settings.&lt;/p&gt;

&lt;p&gt;As you can check we've set it up to execute every day around 8:00PM. You can change this schedule should you want to by clicking on the trigger.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jCd0KSGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3he4qxctdsofx31lovh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCd0KSGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3he4qxctdsofx31lovh2.png" alt="Step 5" width="818" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly in Shopify integration, you will have to enter your &lt;strong&gt;API key to authenticate&lt;/strong&gt;. You will then need the product ID for which you want to fetch the inventory of, once you input product ID in required fields, you are all set.&lt;/p&gt;

&lt;p&gt;And, the last is the Google Sheets API, after authenticating, in required fields you will need to input your Google Sheet's ID and Range. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hD2rZj_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euw30gij68aipplpxf09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hD2rZj_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euw30gij68aipplpxf09.png" alt="Step 5" width="818" height="1316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you've reached here, you've successfully &lt;strong&gt;scheduled exports from Shopify to Google sheets&lt;/strong&gt;. 🥳&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check out the sample project &lt;a href="https://app.canonic.dev/projects/61af33b3b9347d002d5beb7b/api-2?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=step5_here&amp;amp;utm_content=day_18"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thank you for reading this guide. If you happen to create any of these integrations, please remember to mention us on social media or drop us a line on our &lt;a href="https://discord.gg/9dyytsM"&gt;discord channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also check out our other guides &lt;a href="https://dev.to/canonic/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Write to us for any support requests at &lt;a href="https://support@canonic.dev/"&gt;support@canonic.dev&lt;/a&gt;. Check out our &lt;a href="https://www.canonic.dev/30-days-of-canonic/?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=conclusion_website&amp;amp;utm_content=day_18"&gt;website&lt;/a&gt; to know more about Canonic.&lt;/p&gt;

</description>
      <category>shopify</category>
      <category>showdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Fixing CROSS Origin Resource Sharing (CORS) from the Front end.</title>
      <author>Mopharr</author>
      <pubDate>Sat, 18 Dec 2021 02:11:41 +0000</pubDate>
      <link>https://dev.to/mopharr/fixing-cross-origin-resource-sharing-cors-from-the-front-end-5hcb</link>
      <guid>https://dev.to/mopharr/fixing-cross-origin-resource-sharing-cors-from-the-front-end-5hcb</guid>
      <description>&lt;p&gt;Most front-end developer tends to come across CORS issue and they try to fix it with a solution on Stack overflow as I did, some turns out wrong and some didn't explain fully for better understanding. &lt;/p&gt;

&lt;p&gt;In this article, I will talk about CORS and how it can be fixed from the Front End (client-side).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#know-your-enemy-what-is-cors"&gt;
  &lt;/a&gt;
  Know Your Enemy, What is CORS? 👹👹
&lt;/h2&gt;

&lt;p&gt;The common Cross Origin Resource Sharing (CORS) is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource was served.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-it-exit"&gt;
  &lt;/a&gt;
  Why does it Exit?🤔
&lt;/h2&gt;

&lt;p&gt;To protect us! It’s our friend!💯🐕&lt;/p&gt;

&lt;p&gt;Most of the time a website will require resources hosted in the same place as the website is, for example, making API calls to the same Back end that is serving the website.🏡&lt;/p&gt;

&lt;p&gt;So this policy would be the first layer of protection to avoid other unknown people using our API.⚔️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-end-up-having-cors-issues"&gt;
  &lt;/a&gt;
  Why do we end up having CORS issues?
&lt;/h2&gt;

&lt;p&gt;Because in some scenarios we need to request resources from one origin to a different one. For example, when our API is hosted in a different domain than our website (any 3rd party API), or when you need to use web fonts.&lt;/p&gt;

&lt;p&gt;CORS doesn’t allow this by default, so an error will appear that can be seen in the browser console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--apCrHYHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w057pocs2kcib28vz3oe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--apCrHYHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w057pocs2kcib28vz3oe.png" alt="Image description" width="880" height="116"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-happening-between-our-browser-and-the-destination-of-our-requests"&gt;
  &lt;/a&gt;
  What is happening between our browser and the destination of our requests?
&lt;/h2&gt;

&lt;p&gt;Web browsers can use special headers to determine whether or not an XMLHttpRequest call should continue or fail.&lt;/p&gt;

&lt;p&gt;Let’s get into more technical detail… 👇👇👇👇👇👇👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#options-request"&gt;
  &lt;/a&gt;
  OPTIONS request 🧐
&lt;/h2&gt;

&lt;p&gt;Most people know the basic request methods (POST, GET, PUT) but not everyone is familiarized with the OPTIONS method. This request method is used to ask for information from a specific endpoint about what communication options it supports.&lt;/p&gt;

&lt;p&gt;This request is used to determine the exact CORS capabilities of the server, which is in turn used to determine whether or not the intended CORS protocol is understood. If the result of the OPTIONS call dictates that the request cannot be made, the actual request to the server will not be executed.&lt;/p&gt;

&lt;p&gt;The options contained in an &lt;strong&gt;OPTIONS&lt;/strong&gt; request are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Access-Control-Request-Method&lt;/code&gt;: The intended method of the request (e.g. GET or POST)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Access-Control-Request-Headers&lt;/code&gt;: An indication of the custom headers that will be sent with the request&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Origin&lt;/code&gt;: The usual origin header that contains the script's current origin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So our client is asking🤔:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;“_I would like to make a GET request with the Content-Type and Accept headers from http://localhost:3000 — is that possible?_”.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -i -X OPTIONS localhost:3001/api/ping 
'Access-Control-Request-Method: GET'
'Access-Control-Request-Headers: Content-Type, Accept'
'Origin: &amp;lt;http://localhost:3000&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The server will include some &lt;code&gt;Access-Control-*&lt;/code&gt; headers within the response to indicate whether the request that follows will be allowed or not. These include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;: The origin that is allowed to make the request, or * if a request can be made from any origin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt;: A comma-separated list of HTTP methods that are allowed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Access-Control-Allow-Headers&lt;/code&gt;: A comma-separated list of the custom headers that are allowed to be sent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Access-Control-Max-Age&lt;/code&gt;: The maximum duration that the response to the pref light request can be cached before another call is made.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The response would then be examined by the browser to decide whether to continue with the requester to abandon it.&lt;/p&gt;

&lt;p&gt;So our server is replying🤓:&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;I accept requests from every domain (*) and I allow the following methods GET, HEAD, PUT, PATCH, POST, DELETE”&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTP/1.1 204 No Content
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET,HEAD,PUT,PATCH,POST,DELETE
Vary: Access-Control-Request-Headers
Access-Control-Allow-Headers: Content-Type, Accept
Content-Length: 0
Date: Fri, 05 Apr 2019 11:41:08 GMT
Connection: keep-alive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if the first request the client is trying to perform meets the requirements it sends the initial request and the process continues normally, and everyone is happy 🎊🎊🎉😁 . If it doesn’t you get a dramatic CORS error which means your initial request wasn’t even sent and you cry 😭.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-do-we-fix-it"&gt;
  &lt;/a&gt;
  So, how do we fix it? 🔧
&lt;/h2&gt;

&lt;p&gt;If a CORS issue appears during development, because we are using a local development server, this is not an “error”, it is just an inconvenience that we will learn to solve.&lt;/p&gt;

&lt;p&gt;🤔Maybe you are thinking about changing the “origin” header to avoid CORS, forget about it, ‘origin’ is a forbidden header which means you can’t update it.🙄&lt;/p&gt;

&lt;p&gt;🤔The next and most common solution is to ask the server to set the headers to *** (allow all)**.&lt;/p&gt;

&lt;p&gt;💩🤦‍♀️This is not a good practice, the final domain for the Front end should be whitelisted of course, but to simply allow all is a breach of security that shouldn’t be encouraged.🤦‍♂️💩&lt;br&gt;
While developing our domain is usually localhost and toward the outside world that domain is our IP, unless you whitelist it, which can be ineffective if the IP changes, it is never allowed by CORS restrictions unless you allow all domains. 🤷‍♂️🤷‍♀️&lt;/p&gt;

&lt;p&gt;🤓Now the most efficient and least painful way to bypass this restriction for development is to use a proxy. This way we do the request to a proxy server that allows our requests and this one does the request to the original API domain. This request will be performed by a proxy server, not a browser, so it will be able to perform the requests without restrictions. It will also send the original content back to our Front end in the response from the API.👌&lt;/p&gt;

&lt;p&gt;There are already built proxy servers, so you don’t have to create your own, just install one cors-proxy from npm and you are all set.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-a-cors-proxy-%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  Setting up a CORS proxy 🛠
&lt;/h2&gt;

&lt;p&gt;In my case, I used this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/local-cors-proxy"&gt;https://www.npmjs.com/package/local-cors-proxy&lt;/a&gt; but there are hundreds. You can install it locally in your project or globally on your computer, depending on if you want to add it to your project development dependencies and make it run while you are developing.&lt;/p&gt;

&lt;p&gt;(Usually automating stuff is a good idea, just saying🙄)&lt;/p&gt;

&lt;p&gt;In this case, the steps are easy to follow, but just in case I’m going to review them one by one:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simple Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;API endpoint that we want to request that has CORS issues:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.yourdomain.ie/movies/list

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install dependency by running the following command:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i local-cors-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Start proxy for the specific domain if it’s giving you issues:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lcp --proxyUrl https://www.yourdomain.ie
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In your client update your API endpoint to point it to your proxy:
From this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;https://www.yourdomain.ie/movies/list&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;http://localhost:8010/proxy/movies/list&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CORS Fixed 🎉🎉🎉🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As I hope you can see now, there is no magic surrounding CORS🧙‍♂️, it’s something “the backend is supposed to fix”. But if you are working with a Public API, we have the issue and now you can fix CORS yourself. &lt;strong&gt;Thank You&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>Let's explore Azure Functions &amp; Azure Cosmos DB - Part 1</title>
      <author>Bervianto Leo Pratama</author>
      <pubDate>Sat, 18 Dec 2021 01:43:39 +0000</pubDate>
      <link>https://dev.to/berviantoleo/lets-explore-azure-functions-azure-cosmos-db-part-1-560n</link>
      <guid>https://dev.to/berviantoleo/lets-explore-azure-functions-azure-cosmos-db-part-1-560n</guid>
      <description>&lt;p&gt;Hi everyone,&lt;/p&gt;

&lt;p&gt;I want to learn more about cloud, cloud services, cloud computing, etc. That is why I write up this one. I want to explore more Azure Functions. This is not a tutorial, I just want to take note some problems and what went well when I was exploring the Azure Functions. You want to learn more about Azure Cosmos DB, you can check &lt;a href="https://docs.microsoft.com/en-us/learn/paths/az-204-develop-solutions-that-use-azure-cosmos-db/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems"&gt;
  &lt;/a&gt;
  Problems
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#azure-functions-problems"&gt;
  &lt;/a&gt;
  Azure Functions Problems
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-claimsprincipal-endraw-is-not-filled-by-usernameemail"&gt;
  &lt;/a&gt;
  &lt;code&gt;ClaimsPrincipal&lt;/code&gt; is not filled by Username/Email
&lt;/h4&gt;

&lt;p&gt;This problem took me many days to find the solution. Until now, I still can't figure out why. So, I take workaround. My workaround are read the header &lt;code&gt;X-MS-CLIENT-PRINCIPAL-NAME&lt;/code&gt; and activate the &lt;code&gt;Easy Auth&lt;/code&gt;. This is a disadvantage, I can't know if my solution works. I need to deploy to the Azure Functions and call it with my client code. I want to minimize test directly to "production" when heavy development time, but I don't have many choice now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#azure-cosmos-db-problems"&gt;
  &lt;/a&gt;
  Azure Cosmos DB Problems
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#the-error-come-from-ef-cosmosdb-provider-little-bit-hard-to-understand"&gt;
  &lt;/a&gt;
  The Error Come from EF CosmosDB Provider Little Bit Hard to Understand
&lt;/h4&gt;

&lt;p&gt;As a newcomer at CosmosDB, I think the error little bit hard to understand. When I am not setting up the Container, they only said 404. It is hard for me to know the error context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some notes&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Database Name: You will set up this at &lt;code&gt;UseCosmos&lt;/code&gt;. This is same with  &lt;code&gt;database&lt;/code&gt; in CosmosDb.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lqOFAdS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrfbh62i4imh4ym39rms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqOFAdS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrfbh62i4imh4ym39rms.png" alt="Database Name" width="435" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collection: When use define &lt;code&gt;DbContext&lt;/code&gt;, your &lt;code&gt;DbContext&lt;/code&gt; will become Collection. So you need to create it or setup it before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Ykk3VYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyo8difijuv8rmueew8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Ykk3VYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyo8difijuv8rmueew8o.png" alt="Collection" width="435" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cant-create-azure-cosmos-db-because-high-demand"&gt;
  &lt;/a&gt;
  Can't create Azure Cosmos DB because high demand?
&lt;/h4&gt;

&lt;p&gt;I don't understand for this. Is it really because high demand? I want to provision Azure Cosmos DB at Southeast Asia, but it is always said high demand. So I take workaround to use Azure Cosmos DB free and use different region. It is have different region and quite far from my place. It has huge delay in my application because of this. Anyway, do you want to try Azure Cosmos DB? You can check &lt;a href="https://azure.microsoft.com/en-us/try/cosmosdb/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-case"&gt;
  &lt;/a&gt;
  Show Case
&lt;/h2&gt;

&lt;p&gt;I have some videos when I was exploring the Azure Functions and Azure Cosmos DB. Here we are,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy Azure Functions using Visual Studio 2022&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HIOkXkobvrY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create Azure Cosmos Db Free&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hM933BovVSY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setup Azure Cosmos Db&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pBkiIeW1VAE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setup &lt;code&gt;Easy Auth&lt;/code&gt; Azure Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yw0GVblXsNc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bervProject"&gt;
        bervProject
      &lt;/a&gt; / &lt;a href="https://github.com/bervProject/azure-function-example"&gt;
        azure-function-example
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Azure Function Example in .NET
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
azure-function-example&lt;/h1&gt;
&lt;p&gt;Azure Function Example in .NET&lt;/p&gt;
&lt;h2&gt;
Directory Structure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/bervProject/azure-function-example./azure-functions"&gt;azure-functions&lt;/a&gt;: Root directory for Azure Functions of Backend that will be hosted at Azure Functions. Using .NET Core 3.1.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bervProject/azure-function-example./ToDo.Web"&gt;ToDo.Web&lt;/a&gt;: Root directory that consume the Backend from Azure Functions, run as Web App and will be hosted at Azure Web App Service. Using .NET 5.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Contribute&lt;/h2&gt;
&lt;p&gt;Please see at &lt;a href="https://github.com/bervProject/azure-function-example./CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;MIT&lt;/p&gt;
&lt;h2&gt;
Author&lt;/h2&gt;
&lt;p&gt;Bervianto Leo Pratama&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bervProject/azure-function-example"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#next-part"&gt;
  &lt;/a&gt;
  Next Part
&lt;/h2&gt;

&lt;p&gt;For the next part, I will tell more about the Azure Static Web Apps and deploy the client into there. We will consume the azure functions and use &lt;code&gt;msal&lt;/code&gt; as our authentication client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5A4H6rLzx2hWLOd0Lw/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5A4H6rLzx2hWLOd0Lw/giphy.gif" alt="Thanks GIF" width="480" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>azurefunctions</category>
      <category>backend</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Latest trends in Front end development | Front End Trends 2022</title>
      <author>DevDevShow</author>
      <pubDate>Sat, 18 Dec 2021 00:09:50 +0000</pubDate>
      <link>https://dev.to/devdevshow50/latest-trends-in-front-end-development-front-end-trends-2022-203d</link>
      <guid>https://dev.to/devdevshow50/latest-trends-in-front-end-development-front-end-trends-2022-203d</guid>
      <description>&lt;p&gt;There are two sides of website development which we all know front-end and the back-end.  &lt;/p&gt;

&lt;p&gt;The Front-end handles the presentation of a website for end users while a backend handles the relations and connections of servers and features with databases. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdevshow.com/category/front-end/" rel="noreferrer noopener"&gt;Front-end&lt;/a&gt; plays a major role in a website’s performance and its end-user experience. Front-end development is a combination of different languages including HTML, CSS &amp;amp; JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I_PPTbNh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devdevshow.com/wp-content/uploads/2021/11/image-1-1024x683.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I_PPTbNh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devdevshow.com/wp-content/uploads/2021/11/image-1-1024x683.png" alt="latest trends in front end development " width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we will discuss the latest trends in front end development, including the most popular languages and techniques adopted widely by developers.&lt;/p&gt;

&lt;p&gt;As the market competition reaches new heights, frontend teams are being pressed to come up with logical solutions to develop competence, Great user experience in terms of UX/UI, client satisfaction, accessibility, and optimized speed. &lt;/p&gt;

&lt;p&gt;Front end trends change so quickly that even at times it becomes difficult and hectic to make a trends list or layout and the reason behind these fast-paced changes is just because of the front end’s significant role in development.&lt;/p&gt;

&lt;h2&gt;latest trends in front end development&lt;/h2&gt;

&lt;h3&gt;
&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;Widely Used JavaScript &lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript is the most popular and widely used language for web development.  &lt;/p&gt;

&lt;p&gt;Since the time of its evolution, it is seen that many major websites used JavaScript and are still using the same. It is popular because of its vast libraries and multiple frameworks. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rnB58DtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devdevshow.com/wp-content/uploads/2021/09/coded-stuff-screen-2-1024x683.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rnB58DtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devdevshow.com/wp-content/uploads/2021/09/coded-stuff-screen-2-1024x683.jpg" alt="Front End Trends" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we discuss the most influential languages, then there isn’t anything that can beat JavaScript. &lt;/p&gt;

&lt;p&gt;It remains constant in all phases of front-end development and seems to remain constant in coming years as well.&lt;/p&gt;

&lt;h3&gt;
&lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;Popularity of Headless Architecture&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Headless architecture means to summarize all features and functions of a website into a set of API connected with a strong backend and are accessible to all front-end developers to link and provide the desired results related to that specific channel.  &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6MQ8e65kZqI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The headless architecture was first adopted by Netflix and then became hugely popular. &lt;/p&gt;

&lt;p&gt;A headless CMS has added benefits like improved scalability, a list of content for separate web portals, which is getting popular as it provides a command center of freedom in editing and eliminating the need to do things multiple times at different locations or on separate web pages.&lt;/p&gt;

&lt;h3&gt;
&lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;Single Page Applications &lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Single-page websites are becoming quite high in demand. It is not only easy to develop but also it prevents a website from being overloaded or overcrowded. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zBZRdW_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devdevshow.com/wp-content/uploads/2021/12/4428861-1024x683.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zBZRdW_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devdevshow.com/wp-content/uploads/2021/12/4428861-1024x683.jpg" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Single-page Websites are also getting popularity because of their optimized loading speed and ease to manage the content and graphics all at one landing page. &lt;/p&gt;

&lt;p&gt;A plus point of single-page websites/applications is considered to be its mobile-friendly environment which is quite easy to convert into mobile applications and web portals.&lt;/p&gt;

&lt;h3&gt;
&lt;strong&gt;4.&lt;/strong&gt; &lt;strong&gt;Component Based Development &lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Component-based development is actually a development technique of building applications by using pre-built reusable components which not only reduce the coding time but also helps the developers to access the components for different web portals having or acquiring the same features of functionalities. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i4dKKzvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devdevshow.com/wp-content/uploads/2021/12/image-2-1024x683.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i4dKKzvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devdevshow.com/wp-content/uploads/2021/12/image-2-1024x683.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This type of development also helps to maintain code with ease and flexibility and enhance the output time of any front-end developer.&lt;/p&gt;

&lt;h3&gt;
&lt;strong&gt;5.&lt;/strong&gt; &lt;strong&gt;JamStack &lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;JamStack is shortly used for the combination of JavaScript, APIs, &amp;amp; Markup. &lt;/p&gt;

&lt;p&gt;These three are used as a stack to get the most enhanced features and functionalities and are widely used as a combination which makes it set a new trend and become a popular trend of 2021 &amp;amp; of course for the coming year 2022 as well. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ySJGjo3_EX4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Using JamStack makes a website faster, easy to manage, and secure. &lt;/p&gt;

&lt;p&gt;There are big names in the industry using and admiring the Jamstack architecture including Unilever, Nike &amp;amp; &lt;a href="https://www.paypal.com/" rel="noreferrer noopener"&gt;PayPal&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
&lt;strong&gt;6.&lt;/strong&gt; &lt;strong&gt;Progressive Web Applications &lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Progressive web apps are now a new trend of front-end development. These apps are created using the same most popular front-end languages like HTML CSS &amp;amp; &lt;a href="https://devdevshow.com/category/javascript/" rel="noreferrer noopener"&gt;JavaScript&lt;/a&gt;. These are actually cross-platform web apps. &lt;/p&gt;

&lt;p&gt;There are so many companies that are moving towards developing advanced web applications functional within their existing applications. &lt;/p&gt;

&lt;p&gt;This eliminates the demand of having a separate native application for mobiles, and the company can enjoy extra benefits by enabling progressive web applications.&lt;/p&gt;

&lt;h3&gt;
&lt;strong&gt;7.&lt;/strong&gt; &lt;strong&gt;Motion UI - Animations &lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Graphics and user interfaces are a vital part of front-end development. It is the responsibility to maintain and create a user-friendly interface. &lt;/p&gt;

&lt;p&gt;Currently, the use of animations and motion graphics is becoming a trend in front-end development. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UgCW1Wlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8M3damKV--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ov5adrhpdxz0xyt3fa4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UgCW1Wlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8M3damKV--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ov5adrhpdxz0xyt3fa4.gif" alt="" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The use of motion graphics and animations is adopted to create a great user experience so that a user can navigate and explore the application as a live program. &lt;/p&gt;

&lt;p&gt;The animations include CSS animations, charts progress, changing images, and different types of animations and motion effects. &lt;/p&gt;

&lt;p&gt;There are numerous companies using and adopting the motion graphics trend including Google, Facebook, Instagram, &lt;a href="https://www.uber.com/" rel="noreferrer noopener"&gt;Uber&lt;/a&gt;, and Spotify. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zfULzL8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://bs-uploads.toptal.io/blackfish-uploads/uploaded_file/file/53365/image-1568763179922-9ed56d6e130934e4a5b7366e42ba96c8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfULzL8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://bs-uploads.toptal.io/blackfish-uploads/uploaded_file/file/53365/image-1568763179922-9ed56d6e130934e4a5b7366e42ba96c8.gif" alt="" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;strong&gt;8.&lt;/strong&gt; &lt;strong&gt;Micro Frontend Architecture&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Micro Frontend Architecture is a technique to break the components into smaller groups and work individually on these code groups to make it productive in a combination with other components. &lt;/p&gt;

&lt;p&gt;This technique helps developers to increase their productivity and enhance their performance. &lt;/p&gt;

&lt;p&gt;With isolated modules to work on, development teams can instantaneously work together on individual components of a single codebase to develop the entire frontend.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The above mentioned are some of front end trends that are getting popular in terms of their efficiency, effectiveness, and innovations. &lt;/p&gt;

&lt;p&gt;For sure the trends are not limited to only the ones mentioned above but we tried to cover the topic with the most popular and widely adopted techniques and trends. &lt;/p&gt;

&lt;p&gt;Front-end development holds a very vital role in the development cycle and hence adopts new trends and techniques every day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related Posts:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdevshow.com/interview-questions-for-front-end-developer/"&gt;&lt;strong&gt;BEST INTERVIEW QUESTIONS FOR FRONT END DEVELOPER WITH ANSWERS&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdevshow.com/front-end-developer-skills-required-technologies/"&gt;&lt;strong&gt;FRONT END DEVELOPER SKILLS REQUIRED &amp;amp; TECHNOLOGIES TO LEARN&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdevshow.com/best-online-front-end-development-courses/"&gt;&lt;strong&gt;BEST ONLINE FRONT END DEVELOPMENT COURSES&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdevshow.com/best-tools-for-front-end-development/"&gt;&lt;strong&gt;BEST TOOLS FOR FRONT END DEVELOPMENT&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>frontend</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Cerealizing with Serializers</title>
      <author>michael-neis</author>
      <pubDate>Fri, 17 Dec 2021 23:24:32 +0000</pubDate>
      <link>https://dev.to/michaelneis/cerealizing-with-serializers-1h4p</link>
      <guid>https://dev.to/michaelneis/cerealizing-with-serializers-1h4p</guid>
      <description>&lt;p&gt;If you are reading this, you might, like me, be relatively new to Ruby on Rails, and are still getting familiar with some of the features it has to offer. Personally, when I first heard about serializers, they seemed a bit redundant. We are already handling what we are rendering in our controller, so why add an extra layer? While it may seem like extra work in a small application, as you expand your database, you will start to realize that sorting through your data in the controllers becomes increasingly difficult.&lt;/p&gt;

&lt;p&gt;For now, let's just take a look at a smaller application to understand the basics. Let's say we've built out the basics for a database for cereal companies, and we want to show those cereals to users buying them online (for now, we won't worry about creating users, we will just focus on the cereal side). Right now, we aren't using serializers, we just have a &lt;em&gt;controller&lt;/em&gt; and a &lt;em&gt;model&lt;/em&gt; for &lt;strong&gt;Company&lt;/strong&gt;, &lt;strong&gt;CEO&lt;/strong&gt;, &lt;strong&gt;Charity&lt;/strong&gt;, and of course, &lt;strong&gt;Cereal&lt;/strong&gt;. For our purposes, a &lt;strong&gt;Company&lt;/strong&gt; &lt;code&gt;has_many&lt;/code&gt; &lt;em&gt;CEOs&lt;/em&gt;, &lt;em&gt;Charities&lt;/em&gt; and &lt;em&gt;Cereals&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZxNS1KQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsk78szla7qqk1yo14bv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZxNS1KQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsk78szla7qqk1yo14bv.png" alt="Image description" width="713" height="221"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We just have some simple models for now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Company&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:ceos&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:charities&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:cereals&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ceo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:company&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Charity&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:company&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cereal&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:company&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright, now let's take a look at our &lt;code&gt;routes.rb&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:cereals&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:companies&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:charities&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:ceos&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;resources&lt;/code&gt; will automatically include all &lt;a href="https://medium.com/podiihq/understanding-rails-routes-and-restful-design-a192d64cbbb5"&gt;RESTful routes&lt;/a&gt;, which means we can define &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt; in our cereal controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CerealsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
        &lt;span class="n"&gt;cereals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Cereal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;
        &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="n"&gt;cereals&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
        &lt;span class="n"&gt;cereal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Cereal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="n"&gt;cereal&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; using a .find in the show route on its own is not best practice, because if an incorrect id is provided, there will be no rescue from the error. If you would like to know more about handling errors, check out the &lt;a href="https://guides.rubyonrails.org/active_record_validations.html"&gt;Rails documentation&lt;/a&gt; for info on error handling and validations. Since we are only focused on setting up serializers, we'll skip this for now.&lt;/p&gt;

&lt;p&gt;Ok, so as it stands right now, let's take a look at what returns to us on a GET request to '/cereals'.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
    {
        "id": 1,
        "name": "Cheerios",
        "company_id": 1,
        "price": 3.49,
        "ingredients": "*list of ingredients*",
        "time_to_make": 1.3,
        "transportation_schedule": "*list of schedule details*",
        "expiration_date": "Jan 12, 2022",
        "warehouse_location": "Cleveland",
        "created_at": "2021-12-17T17:55:35.618Z",
        "updated_at": "2021-12-17T17:55:35.618Z"
    },
    {
        "id": 2,
        "name": "Chex",
        "company_id": 1,
        "price": 3.99,
        "ingredients": "*list of ingredients*",
        "time_to_make": 0.9,
        "transportation_schedule": "*list of schedule details*",
        "expiration_date": "Jan 10, 2022",
        "warehouse_location": "Des Moines",
        "created_at": "2021-12-17T17:55:35.633Z",
        "updated_at": "2021-12-17T17:55:35.633Z"
    },
    {
        "id": 3,
        "name": "Lucky Charms",
        "company_id": 1,
        "price": 4.49,
        "ingredients": "*list of ingredients*",
        "time_to_make": 1.5,
        "transportation_schedule": "*list of schedule details*",
        "expiration_date": "Jan 02, 2022",
        "warehouse_location": "Minneapolis",
        "created_at": "2021-12-17T17:55:35.648Z",
        "updated_at": "2021-12-17T17:55:35.648Z"
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works! But that is a lot of data that we don't necessarily need. If the request is being made by a user that is hoping to buy a box of cereal, there is definitely some data that can be left out. When you are buying cereal, you don't need to know the id of that particular box of cereal, how long it took to make, the transportation schedule, the warehouse it is stored in, or when it was added or updated to the database. What we could do is specify what parts of the hash we want rendered in our controller, but we would have to repeat that process on any and every request we make as we continue to build out the application. What we can do instead is use &lt;em&gt;serializers&lt;/em&gt;. To get started, we have to install the serializers gem.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundle add active_model_serializers&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will add the gem to your gemfile and install it at the same time. Now we can create a serializer for cereal with &lt;code&gt;rails g serializer cereal&lt;/code&gt;. You will see that this automatically create a serializers folder in your application and add a cereal_serializer to it. I know what you may be thinking, "Generating serializers for all of my models sounds exhausting and time consuming!" And if you do it the way we just did, you'd be right. But, a bonus to the serializer gem is that if you install it at the beginning of your application, before creating any of your migrations, models, or controllers, running &lt;code&gt;rails g cereal&lt;/code&gt; will &lt;em&gt;also create a serializer&lt;/em&gt; so that you don't have to. By default, it will even include any relationships and attributes that you added to your generation. Since we didn't do that this time around, this is what our serializer looks like right now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CerealSerializer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Serializer&lt;/span&gt;
  &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because it only includes the attribute &lt;code&gt;:id&lt;/code&gt;, the only thing that will be rendered it the cereal id. Taking a look at our GET request again, we see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
    {
        "id": 1
    },
    {
        "id": 2
    },
    {
        "id": 3
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty cool, but still not the information we want to show our buyers. Looking at all of the data from the previous request, the realistic attributes we might want to include are name, company_id, price, ingredients, and expiration date. So let's do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CerealSerializer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Serializer&lt;/span&gt;
  &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:company_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ingredients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="ss"&gt;:expiration_date&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And see the new return results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
    {
        "name": "Cheerios",
        "company_id": 1,
        "price": 3.49,
        "ingredients": "*list of ingredients*",
        "expiration_date": "Jan 12, 2022"
    },
    {
        "name": "Chex",
        "company_id": 1,
        "price": 3.99,
        "ingredients": "*list of ingredients*",
        "expiration_date": "Jan 10, 2022"
    },
    {
        "name": "Lucky Charms",
        "company_id": 1,
        "price": 4.49,
        "ingredients": "*list of ingredients*",
        "expiration_date": "Jan 02, 2022"
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sweet! Now, without changing anything in our controller, let's look at the results of a Get request to a specific cereal id, triggering the &lt;code&gt;show&lt;/code&gt; route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "Cheerios",
    "company_id": 1,
    "price": 3.49,
    "ingredients": "*list of ingredients*",
    "expiration_date": "Jan 12, 2022"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the specified attributes of the cereal serializer are being used in both routes from the cereal controller. This way, we can specify what attributes we want in a scope that will affect all of our routes.&lt;/p&gt;

&lt;p&gt;But what about that &lt;code&gt;company_id&lt;/code&gt; that we are getting? That won't be very useful to a buyer. We want to be able to see the actual company name, not just the id. Serializers have the ability to show associations through &lt;code&gt;has_many&lt;/code&gt; and &lt;code&gt;belongs_to&lt;/code&gt;, just like in our models. You may notice that if you generate a serializer using &lt;code&gt;resource&lt;/code&gt;, a model that belongs to another will have a serializer with a &lt;code&gt;has_one&lt;/code&gt; association instead of &lt;code&gt;belongs_to&lt;/code&gt;. These operate the same, but I find it easier and more consistent to use &lt;code&gt;belongs_to&lt;/code&gt;. Let's update our cereal serializer with a &lt;code&gt;belongs_to&lt;/code&gt; and see what we get. We also remove the company_id attribute, since we won't be needing that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CerealSerializer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Serializer&lt;/span&gt;
  &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:company_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ingredients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:expiration_date&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:company&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On a show route, this will return:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "Cheerios",
    "price": 3.49,
    "ingredients": "*list of ingredients*",
    "expiration_date": "Jan 12, 2022",
    "company": {
        "id": 1,
        "name": "General Mills",
        "employees": 40000,
        "healthcare_plan": "*plan description*",
        "revenue": 17000000000.0,
        "created_at": "2021-12-17T19:05:02.950Z",
        "updated_at": "2021-12-17T19:05:02.950Z"
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now we have the company details from that association. But again, we're getting information that we don't need. There's a few ways we could handle this now. &lt;/p&gt;

&lt;p&gt;The first way we can handle it is to create serializers for our other classes, and use them through our &lt;code&gt;belongs_to&lt;/code&gt; association. Let's create a serializer for company with &lt;code&gt;rails g serializer company&lt;/code&gt;, and edit the attributes it shows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CompanySerializer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Serializer&lt;/span&gt;
  &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the result of requesting now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "Cheerios",
    "price": 3.49,
    "ingredients": "*list of ingredients*",
    "expiration_date": "Jan 12, 2022",
    "company": {
        "name": "General Mills"
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sweet! We now have the company name associated with our cereal. There are a few problems with this solution, however. For one, as you can see, in order to access that company name, we have to read down two levels to the nested data. Not too ideal. Another is that this serializer will be filtering all of the company requests as well. So, a GET request to '/companies' will only give us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
    {
        "name": "General Mills"
    },
    {
        "name": "Kellogg's"
    },
    {
        "name": "Quaker Oats"
    },
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If all we are using this database for is to show the company names, this is fine, but we may want to be able to access different attributes of those parent models.&lt;/p&gt;

&lt;p&gt;The second solution fixes those problems. We can create custom serializer methods and include them in the attributes. First we'll want to remove the &lt;code&gt;belongs_to :company&lt;/code&gt; from our cereal serializer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CerealSerializer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Serializer&lt;/span&gt;
  &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ingredients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:expiration_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="ss"&gt;:company_name&lt;/span&gt;


  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;company_name&lt;/span&gt;
    &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;company&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can define methods &lt;em&gt;within&lt;/em&gt; our serializers to perform data handling, then all we need to do is add that method name to our attributes list. &lt;code&gt;object&lt;/code&gt; is a moniker for the object that is being passed to the serializer, similar to &lt;code&gt;self&lt;/code&gt; in class models. Here's what we get on this request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "Cheerios",
    "price": 3.49,
    "ingredients": "*list of ingredients*",
    "expiration_date": "Jan 12, 2022",
    "company_name": "General Mills"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much cleaner! Using &lt;em&gt;custom methods&lt;/em&gt; is a pretty slick way to include associated data when we only want certain attributes of that data. Now, as you can see, the company name is on the same level as all of our other data, so no need to dig into nested data.&lt;/p&gt;

&lt;p&gt;To show another example of &lt;em&gt;custom methods&lt;/em&gt;, I am now going to use the &lt;strong&gt;CEO&lt;/strong&gt; and &lt;strong&gt;Charity&lt;/strong&gt; models that were defined earlier, but never used. Let's say a company wanted to include some details of a charitable cause they are backing and a motto from their fearless CEO on the box they are selling. Obviously, in real life, these would just be mass-printed on the boxes during packing, but since we are working in a digital world, we need to find a way to render that information. Since both are children of &lt;strong&gt;Company&lt;/strong&gt;, I will just be using &lt;code&gt;Ceo.first&lt;/code&gt; and &lt;code&gt;Charity.first&lt;/code&gt; in reference to each instance I want to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CerealSerializer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Serializer&lt;/span&gt;
&lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ingredients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:expiration_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="ss"&gt;:company_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ceo_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ceo_motto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:charity_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="ss"&gt;:charity_cause&lt;/span&gt;


  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;company_name&lt;/span&gt;
    &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;company&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ceo_name&lt;/span&gt;
    &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;company&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ceos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ceo_motto&lt;/span&gt;
    &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;company&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ceos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;motto&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;charity_name&lt;/span&gt;
    &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;company&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;charities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;charity_cause&lt;/span&gt;
    &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;company&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;charities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cause&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's our render:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "name": "Cheerios",
    "price": 3.49,
    "ingredients": "*list of ingredients*",
    "expiration_date": "Jan 12, 2022",
    "company_name": "General Mills",
    "ceo_name": "Jeff Harmening",
    "ceo_motto": "Cereal is our passion.",
    "charity_name": "General Mills Foundation",
    "charity_cause": "Advancing regenerative agriculture"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way in which you go about receiving data will differ based on how your database is set up and nested, but hopefully this gives you an idea of how to start that process.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
