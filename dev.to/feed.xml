<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Amazing Grid Card Hover Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Wed, 21 Apr 2021 14:20:27 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-grid-card-hover-using-html-css-1c3h</link>
      <guid>https://dev.to/nikhil27b/amazing-grid-card-hover-using-html-css-1c3h</guid>
      <description>&lt;p&gt;Hello, &lt;/p&gt;

&lt;p&gt;Today I created an Amazing Grid Card Hover Using HTML &amp;amp; CSS. when you hover on this card image size changes to half &amp;amp; also shows some information about the place we will be adding more animation in the upcoming post I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to more support me then buy me a &lt;a href="https://www.buymeacoffee.com/nikhilbobade27"&gt;coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/mdRQEJd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a Personal Portfolio Website Using HTML CSS and JavaScript</title>
      <author>Mystery Code</author>
      <pubDate>Wed, 21 Apr 2021 14:11:20 +0000</pubDate>
      <link>https://dev.to/foolishdeveloper/create-a-personal-portfolio-website-using-html-css-and-javascript-fam</link>
      <guid>https://dev.to/foolishdeveloper/create-a-personal-portfolio-website-using-html-css-and-javascript-fam</guid>
      <description>&lt;p&gt;In this article, I am going to show you how to design a personal portfolio website using HTML, CSS, and JavaScript code. I have previously designed many more websites and personal portfolio designs. Hope you like this design like the others. I have included in this design all the qualities that a personal portfolio website needs to have. Meanwhile, I have used the bootstrap programming code to make it fully responsive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Tutorial of Responsive Personal Portfolio Website&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hDeIX9c7Guw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In the video, you've seen the Responsive One Page Personal Portfolio Website and I hope you've understood the little bit codes of this design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsive Personal Portfolio Website [Source Codes]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To create this program [One Page Personal Portfolio Website]. First, you need to create three Files one HTML File, one CSS File and the last one is JavaScript File. After creating these files just paste the following codes into your file. You can also download the source code files from the given download button. Remember that, In the source files, there you also get the images of this program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://cutt.ly/UvFHEyJ"&gt;Download Source Code {Google Drive}&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://youtu.be/hDeIX9c7Guw"&gt;Video Tutorial {YouTube}&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Good VS Bad – Beyond the JavaScript Console</title>
      <author>Suchitkumar Khunt</author>
      <pubDate>Wed, 21 Apr 2021 14:02:05 +0000</pubDate>
      <link>https://dev.to/khuntsr/good-vs-bad-beyond-the-javascript-console-59ak</link>
      <guid>https://dev.to/khuntsr/good-vs-bad-beyond-the-javascript-console-59ak</guid>
      <description>&lt;p&gt;In your development career, you mostly know about the console.log() but the console API can do many things that you may don’t know. HERE, in this article, we are going to learn all about console API with Good VS Bad practice.&lt;/p&gt;

&lt;p&gt;Let’s start with consoling the console object.&lt;/p&gt;

&lt;p&gt;Write console.log(console) in your browser’s console editor and you found the list of APIs provided by the console object. Each API purpose is unique and useful in certain cases. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yl631MlW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va0ynbvtikamvo21qvmt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yl631MlW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va0ynbvtikamvo21qvmt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below are my explanations of the most useful APIs in console object.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assume-you-have-an-object-on-the-list-and-you-show-that-on-the-javascript-console"&gt;
  &lt;/a&gt;
  Assume you have an Object on the list and you show that on the JavaScript console.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#the-bad-practice"&gt;
  &lt;/a&gt;
  &lt;em&gt;The Bad Practice&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4HzvkbEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22ucvec01lbcdd2a9edp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4HzvkbEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22ucvec01lbcdd2a9edp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-good-practice"&gt;
  &lt;/a&gt;
  &lt;em&gt;The Good Practice&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-QiYYb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uhhc8p35tif25g2fbl4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-QiYYb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uhhc8p35tif25g2fbl4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assertion-sometimes-we-want-to-log-only-when-the-condition-is-false"&gt;
  &lt;/a&gt;
  Assertion – Sometimes we want to log only when the condition is false.
&lt;/h3&gt;

&lt;p&gt;console.assert() – If condition false then only give an error. It eliminating the need for if condition and keep your code clean.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-bad-practice"&gt;
  &lt;/a&gt;
  &lt;em&gt;The Bad Practice&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ta1QeLow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4yu3o6uaf764h8c2iaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ta1QeLow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4yu3o6uaf764h8c2iaz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-good-practice"&gt;
  &lt;/a&gt;
  &lt;em&gt;The Good Practice&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_0XGhJDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3wzryy2mmsq41myfurl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_0XGhJDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3wzryy2mmsq41myfurl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-always-use-braces-to-log-the-object-with-the-name"&gt;
  &lt;/a&gt;
  { } – Always use Braces to log the object with the name.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#the-bad-practice"&gt;
  &lt;/a&gt;
  &lt;em&gt;The Bad Practice&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aXEyw89l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/442yfrf2cf1pm7v7ob9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aXEyw89l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/442yfrf2cf1pm7v7ob9w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-good-practice"&gt;
  &lt;/a&gt;
  &lt;em&gt;The Good Practice&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D44MYGnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36mdhwtvpsl424l8m3sa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D44MYGnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36mdhwtvpsl424l8m3sa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#group-if-you-have-multiple-logs-then-try-log-group-for-collapsible-sections"&gt;
  &lt;/a&gt;
  Group: If you have multiple logs, then try log group for collapsible sections.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#the-bad-practice"&gt;
  &lt;/a&gt;
  &lt;em&gt;The Bad Practice&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OB1q5fyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yydkurh4005ondd3pf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OB1q5fyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yydkurh4005ondd3pf7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-good-practice"&gt;
  &lt;/a&gt;
  &lt;em&gt;The Good Practice&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yZotWbE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/114friljz9t7kjqus2kj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yZotWbE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/114friljz9t7kjqus2kj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#always-console-object-with-its-properties"&gt;
  &lt;/a&gt;
  Always, console object with its’ properties.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#the-bad-practice"&gt;
  &lt;/a&gt;
  &lt;em&gt;The Bad Practice&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--asKZdZoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqnl3u0mb8h9i7k07h9b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asKZdZoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqnl3u0mb8h9i7k07h9b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-good-practice"&gt;
  &lt;/a&gt;
  &lt;em&gt;The Good Practice&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v0ZZzjy5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/878u8ljdikwft0zqd1vi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v0ZZzjy5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/878u8ljdikwft0zqd1vi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-set-a-timer-with-the-console"&gt;
  &lt;/a&gt;
  How to set a timer with the console?
&lt;/h3&gt;

&lt;p&gt;We can start a timer with the console by calling time, then call timeLog to measure the elapsed time. It provides a simple solution for measuring performance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_kL7ycjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unxp5mx00eufstvg5xir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_kL7ycjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unxp5mx00eufstvg5xir.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-lets-talk-about-remaining-apis-in-console-log"&gt;
  &lt;/a&gt;
  Now, lets talk about remaining APIs in console log.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#consoleclear"&gt;
  &lt;/a&gt;
  &lt;em&gt;console.clear()&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;The console.clear() method clears the console&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consolecount"&gt;
  &lt;/a&gt;
  &lt;em&gt;console.count()&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;Writes to the console the number of times that particular console.count() is called.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJp3i-u3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rotopfk8v79kficv2kwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJp3i-u3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rotopfk8v79kficv2kwn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consoleinfo"&gt;
  &lt;/a&gt;
  &lt;em&gt;console.info()&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;This method writes a message to the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8qvCHsFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xio8j4aicbtetyb1njvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8qvCHsFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xio8j4aicbtetyb1njvf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consolewarn"&gt;
  &lt;/a&gt;
  &lt;em&gt;console.warn()&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;The console.warn() method writes a warning to the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pARPg5D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6huotxlhfsmdl9qo5ch2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pARPg5D---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6huotxlhfsmdl9qo5ch2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consoleerror"&gt;
  &lt;/a&gt;
  &lt;em&gt;console.error()&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;The console.error() method writes an error message to the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nSToQqou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxhzbrmiki44olsf96p2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nSToQqou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxhzbrmiki44olsf96p2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consoletrace"&gt;
  &lt;/a&gt;
  &lt;em&gt;Console.trace()&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;The console.trace() method displays a trace that shows how the code ended up at a certain point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T7S9E5YX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6l6zqwa1f8mqz632cyiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T7S9E5YX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6l6zqwa1f8mqz632cyiz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-apply-css-in-consolelog"&gt;
  &lt;/a&gt;
  How to apply CSS in console.log()?
&lt;/h3&gt;

&lt;p&gt;We can also apply the style in the console.log(). Use the special %c character to add some style.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udfDzKM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pvlnwselnnfh4nut6l6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udfDzKM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pvlnwselnnfh4nut6l6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading this article.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>debugging</category>
    </item>
    <item>
      <title>Is Protobuf.js Faster Than JSON?</title>
      <author>Amir Blum</author>
      <pubDate>Wed, 21 Apr 2021 13:59:20 +0000</pubDate>
      <link>https://dev.to/aspecto/is-protobuf-js-faster-than-json-ed4</link>
      <guid>https://dev.to/aspecto/is-protobuf-js-faster-than-json-ed4</guid>
      <description>&lt;p&gt;When you have structured data in JavaScript, which needs to be sent over the network (for another microservice, for example) or saved into a storage system, it first needs to be serialized.&lt;/p&gt;

&lt;p&gt;The serialization process converts the data object you have in the JavaScript program memory into a buffer of bytes, which then can be deserialized back into a JavaScript object.&lt;/p&gt;

&lt;p&gt;Two popular serialization methods are JSON and Google Protocol Buffers (Protobuf).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  JSON
&lt;/h2&gt;

&lt;p&gt;Serializing data to JSON is as easy as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const data = { name: 'foo', age: 30 };
const serialized = JSON.stringify(data); // produce: '{"name":"foo","age":30}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#protobufjs"&gt;
  &lt;/a&gt;
  Protobuf.js
&lt;/h2&gt;

&lt;p&gt;Google Protocol Buffers is a method of serializing structure data based on a scheme (written in .proto file).&lt;/p&gt;

&lt;p&gt;Example of how to serialize the previous payload to Protobuf with the protobufjs package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;syntax = "proto3";
message Message {
    string name = 1;
    uint32 age = 2;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const protobuf = require("protobufjs");

protobuf.load("message.proto", (err, root) =&amp;gt; {
    if (err)
        throw err;

    const Message = root.lookupType("Message");
    const data = { name: 'foo', age: 30 };
    var errMsg = Message.verify(data);
    if (errMsg)
        throw Error(errMsg);

    const serialized = Message.encode(data).finish(); // produce: &amp;lt;Buffer 0a 03 66 6f 6f 10 1e&amp;gt;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that the generated output is only 7 bytes long, much less than the 23 bytes we got on JSON serialization.&lt;/p&gt;

&lt;p&gt;Protobuf can serialize data so compactly mainly because it does not need to embed the field names as text in the data, possibly many times (“name” and “age” in this example are replaced by short descriptors of 2 bytes).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#picking-the-right-format"&gt;
  &lt;/a&gt;
  Picking the Right Format
&lt;/h2&gt;

&lt;p&gt;Choosing the correct serialization format that works best for you is a task that involves multiple factors.&lt;/p&gt;

&lt;p&gt;JSON is usually easier to debug (the serialized format is human-readable) and easier to work with (no need to define message types, compile them, install additional libraries, etc.).&lt;/p&gt;

&lt;p&gt;Protobuf, on the other hand, usually compresses data better and has built-in protocol documentation via the schema.&lt;/p&gt;

&lt;p&gt;Another major factor is the CPU performance — the time it takes for the library to serialize and deserializes a message. In this post, we want to compare just the performance in JavaScript. &lt;/p&gt;

&lt;p&gt;You might eventually choose a format that is less performant but delivers value in other factors. But if performance might be a big issue for you, well, in that case, keep reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#encode-performance"&gt;
  &lt;/a&gt;
  Encode Performance
&lt;/h2&gt;

&lt;p&gt;At Aspecto, we wrote an &lt;a href="https://docs.aspecto.io/v1/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=json-vs-protobuf"&gt;SDK&lt;/a&gt; that collects trace events and exports them to an OpenTelemetry collector. &lt;/p&gt;

&lt;p&gt;The data is formatted as JSON and sent over HTTP. &lt;/p&gt;

&lt;p&gt;The exporter and collector can also communicate in protobuf using the protobufjs library.&lt;/p&gt;

&lt;p&gt;Since the protobuf format is so compressed, we might think that encoding to protobuf requires less CPU (measured as the number of operations (encode/decode) in a second).&lt;/p&gt;

&lt;p&gt;A quick Google search on the topic strengthens this thesis.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/protobufjs/protobuf.js#performance"&gt;Performance Section in protobufjs documentation&lt;/a&gt; led us to replace our SDK exporter from JSON to protobuf payload, thinking we will get better performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#actual-performance"&gt;
  &lt;/a&gt;
  Actual Performance
&lt;/h2&gt;

&lt;p&gt;After changing from JSON serialization to protobuf serialization, we ran our SDK benchmark.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To our surprise, the performance decreased.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That observation, which we first believed was a mistake, sent us to further investigate the issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benchmarking-baseline"&gt;
  &lt;/a&gt;
  Benchmarking — baseline
&lt;/h3&gt;

&lt;p&gt;We first ran the original &lt;a href="https://github.com/protobufjs/protobuf.js/tree/master/bench"&gt;benchmark of protobufjs library&lt;/a&gt; to get a solid starting point. Indeed we got results similar to the library README:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;benchmarking encoding performance ...

protobuf.js (reflect) x 724,119 ops/sec ±0.69% (89 runs sampled)
protobuf.js (static) x 755,818 ops/sec ±0.63% (90 runs sampled)
JSON (string) x 499,217 ops/sec ±4.02% (89 runs sampled)
JSON (buffer) x 394,685 ops/sec ±1.75% (88 runs sampled)
google-protobuf x 376,625 ops/sec ±1.05% (89 runs sampled)


   protobuf.js (static) was fastest
  protobuf.js (reflect) was 4.2% ops/sec slower (factor 1.0)
          JSON (string) was 36.1% ops/sec slower (factor 1.6)
          JSON (buffer) was 48.4% ops/sec slower (factor 1.9)
        google-protobuf was 50.4% ops/sec slower (factor 2.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These results show that protobuf.js performance is better than JSON, as opposed to our previous observation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benchmark-telemetry-data"&gt;
  &lt;/a&gt;
  Benchmark — telemetry data
&lt;/h2&gt;

&lt;p&gt;We then modified the benchmark to encode our example data which is an &lt;a href="https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/trace/v1/trace.proto"&gt;opentelemetry trace data.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We copied the proto files and data to the benchmark and got the following results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;benchmarking encoding performance ...

protobuf.js (reflect) x 37,357 ops/sec ±0.83% (93 runs sampled)
JSON (string) x 52,952 ops/sec ±2.63% (89 runs sampled)
JSON (buffer) x 45,817 ops/sec ±1.80% (89 runs sampled)

          JSON (string) was fastest
          JSON (buffer) was 12.8% ops/sec slower (factor 1.1)
  protobuf.js (reflect) was 28.2% ops/sec slower (factor 1.4)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These were the results we expected — for this data, protobuf was actually slower than JSON.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benchmark-strings"&gt;
  &lt;/a&gt;
  Benchmark — strings
&lt;/h3&gt;

&lt;p&gt;We got two results for two different data schemas. &lt;/p&gt;

&lt;p&gt;In one – protobufjs was faster, and in the second — JSON was faster. &lt;/p&gt;

&lt;p&gt;Looking at the schemas, the immediate suspect was the number of strings. &lt;/p&gt;

&lt;p&gt;Our schemas were composed almost entirely of strings. So we created a third test, populating a simple schema with many many many strings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;syntax = "proto3";
message TestStringArray {
    repeated string  stringArray = 1;    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We ran the benchmark with this payload (10,000 strings, of length 10 each).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var payload   = {
    stringArray: Array(10000).fill('0123456789')
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the results proved our suspicion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;benchmarking encoding performance ...

protobuf.js (reflect) x 866 ops/sec ±0.68% (92 runs sampled)
JSON (string) x 2,411 ops/sec ±0.91% (94 runs sampled)
JSON (buffer) x 1,928 ops/sec ±0.85% (94 runs sampled)

          JSON (string) was fastest
          JSON (buffer) was 20.0% ops/sec slower (factor 1.2)
  protobuf.js (reflect) was 64.0% ops/sec slower (factor 2.8)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When your data is composed of many strings, protobuf performance in JavaScript drops below those of JSON. &lt;/p&gt;

&lt;p&gt;It might be related to JSON.stringify function being implemented in C++ inside V8 engine and highly optimized compared to the JS implementation of protobufjs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decoding"&gt;
  &lt;/a&gt;
  Decoding
&lt;/h3&gt;

&lt;p&gt;The benchmarks above are for encoding (serializing). The benchmarks results for decoding (deserializing) are similar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you have the time, our recommendation is to profile your common data, understand the expected performance of each option, and choose the format that works best for your needs.&lt;/p&gt;

&lt;p&gt;It is essential to be aware that protobuf is not necessarily the fastest option. &lt;/p&gt;

&lt;p&gt;If your data is mainly string, then JSON format might be a good choice.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>performance</category>
      <category>testing</category>
    </item>
    <item>
      <title>EuroPython 2021 Financial Aid </title>
      <author>whykay 👩🏻‍💻🐈🏳️‍🌈 (she/her)</author>
      <pubDate>Wed, 21 Apr 2021 13:48:16 +0000</pubDate>
      <link>https://dev.to/europython/europython-2021-financial-aid-2fh3</link>
      <guid>https://dev.to/europython/europython-2021-financial-aid-2fh3</guid>
      <description>&lt;h6&gt;
  &lt;a href="#original-post-httpsep2021europythoneuregistrationfinancialaid"&gt;
  &lt;/a&gt;
  (Original post: &lt;a href="https://ep2021.europython.eu/registration/financial-aid/"&gt;https://ep2021.europython.eu/registration/financial-aid/&lt;/a&gt;)
&lt;/h6&gt;

&lt;p&gt;As part of our commitment to the Python community, we are pleased to announce that we offer special grants for people in need of financial aid to attend EuroPython. Please follow the instructions below to apply for a grant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--laVUiHIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c203638nfm6taa1pykmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--laVUiHIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c203638nfm6taa1pykmm.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
EuroPython Society are sponsoring financial aid with €10,000 this year.&lt;/p&gt;

&lt;p&gt;We offer financial aid conference grants in these 2 categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Discount ticket&lt;/strong&gt;. Get a standard ticket for the conference with an affodable price (including access to conference days (Wed-Fri), sponsored workshops, Beginners’ Day workshop and sprints). 

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Note: Training passes are NOT included in the free conference ticket.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Free ticket&lt;/strong&gt;. Get a standard ticket for the conference for free (including access to conference days (Wed-Fri), sponsored workshops, Beginners’ Day workshop and sprints). 

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Note: Training passes are NOT included in the free conference ticket.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#grant-eligibility"&gt;
  &lt;/a&gt;
  Grant Eligibility
&lt;/h1&gt;

&lt;p&gt;EuroPython is the a wonderful place to meet and share your experience for Python developers from Europe and all around the world. Our goal is to support people who want to make the Python community better: conference speakers and tutorial presenters, active people from small Python communities and open source contributors.&lt;/p&gt;

&lt;p&gt;Our grants are open to all people in need of financial aid. We will specifically take into account the following criteria in the selection process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Contributors:&lt;/strong&gt; potential speakers/trainers of EuroPython (people who submitted a proposal), volunters and all who contribute to EuroPython and/or Python community projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Economic factors:&lt;/strong&gt; we want everybody to have a chance to come to EuroPython, regardless of economic situation or income level.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Country based:&lt;/strong&gt; as EuroPython 2021 will be distributed and there may be participants joining outside of Europe, we understand not all countries are having the same income levels and cost of living.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Diversity:&lt;/strong&gt; we aim to be the most diverse and inclusive event possible.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#how-to-apply"&gt;
  &lt;/a&gt;
  How to apply
&lt;/h1&gt;

&lt;p&gt;Simply use the application form: &lt;a href="https://forms.gle/4FePrmsbsJTxeNdG7"&gt;https://forms.gle/4FePrmsbsJTxeNdG7&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#timeline"&gt;
  &lt;/a&gt;
  Timeline
&lt;/h1&gt;

&lt;p&gt;The timeline will be published soon at &lt;a href="https://ep2021.europython.eu/registration/financial-aid/"&gt;this original post&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-you-can-expect"&gt;
  &lt;/a&gt;
  What you can expect
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Free/ discount ticket:&lt;/strong&gt; Individual coupons will be generated for a free/ discount ticket.&lt;/p&gt;

&lt;p&gt;Please note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Please only apply if you will attend the conference. &lt;/li&gt;
&lt;li&gt;Transfers to other people are not possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you find that you cannot attend the conference for some reason, please send an email to &lt;a href="mailto:finaid@europython.eu"&gt;finaid@europython.eu&lt;/a&gt; informing us, so that we can allocate the funds to someone else.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#privacy-policy"&gt;
  &lt;/a&gt;
  Privacy Policy
&lt;/h1&gt;

&lt;p&gt;The data we collect on this form will exclusively be used by our financial aid work group for the selection of grant recipients and the processing of financial aid refunds. No data is passed on to third parties, except to our accountants and the bank in order to process the refunds. We use Google Forms for the processing and Google Drive for storing the relevant information. For more details on our privacy policies, please see our &lt;a href="https://ep2021.europython.eu/privacy/"&gt;privacy policy&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#become-a-financial-aid-sponsor"&gt;
  &lt;/a&gt;
  🌈 Become a Financial Aid sponsor!
&lt;/h1&gt;

&lt;p&gt;You or your company can support our diversity initiative by becoming a EuroPython Financial Aid sponsor. We have a special &lt;a href="https://ep2021.europython.eu/sponsor/packages/#special"&gt;Financial Aid package&lt;/a&gt; that can be booked separately or on top of a &lt;a href="https://ep2021.europython.eu/sponsor/packages/#main"&gt;main sponsor package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more sponsorship information, feel free to contact us at &lt;a href="mailto:finaid@europython.eu"&gt;finaid@europython.eu&lt;/a&gt; or the Sponsor Workgroup directly at &lt;a href="mailto:sponsoring@europython.eu"&gt;sponsoring@europython.eu&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;💖 Thank you for supporting diversity at EuroPython 2021!&lt;/p&gt;

</description>
      <category>europython</category>
      <category>conference</category>
      <category>financialaid</category>
      <category>diversity</category>
    </item>
    <item>
      <title>A Brief Introduction to Colour Theory</title>
      <author>Akila Maithripala</author>
      <pubDate>Wed, 21 Apr 2021 13:36:54 +0000</pubDate>
      <link>https://dev.to/ucscmozilla/a-brief-introduction-to-colour-theory-2hcd</link>
      <guid>https://dev.to/ucscmozilla/a-brief-introduction-to-colour-theory-2hcd</guid>
      <description>&lt;p&gt;Whatever the art or design you do, colour theory plays an important role in conveying your message to your audience. Although many won't really know it, the colour mix you implement in your designs can affect the audience in a psychological way. &lt;/p&gt;

&lt;p&gt;Before going that mental, let's dig up the basics.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#colour-systems"&gt;
  &lt;/a&gt;
  Colour Systems
&lt;/h1&gt;

&lt;p&gt;Understanding colour system is vital in reproducing more colours. There are two main colour systems. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Additive&lt;/li&gt;
&lt;li&gt;Subtractive &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Additive colours are used in screens while subtractive colours are used in printed materials. Another way of looking at this is that objects that emit light use additive colours and objects that reflect light use subtractive colour.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-additive-colour"&gt;
  &lt;/a&gt;
  1. Additive Colour
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4K8jAI9c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j5DGWeJ.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4K8jAI9c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j5DGWeJ.jpg" alt="Additive"&gt;&lt;/a&gt;&lt;br&gt;
Primary colours of this are Red, Green and Blue (RGB). This is the holy trinity of additive colours that is the basis for all colours that's used on a screen. Combination of all these colours creates white, and absence of the all three colours is black.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-subtractive-colour"&gt;
  &lt;/a&gt;
  2. Subtractive Colour
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RO8D120Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7gpJGMh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RO8D120Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7gpJGMh.jpg" alt="Subtractive"&gt;&lt;/a&gt;&lt;br&gt;
Primary colours of subtractive are cyan, magenta, yellow and black (CMYK). K stands for 'key' because cyan, magenta and yellow don't fully absorb light and a need arose for a compensating colour to account for this. Hence, black is added as a fourth colour. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#colour-wheel"&gt;
  &lt;/a&gt;
  Colour Wheel
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8PbNDTJq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/SBvcU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8PbNDTJq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/SBvcU.png" alt="Colour-wheel"&gt;&lt;/a&gt;&lt;br&gt;
A bit of a history for you; the colour wheel was invented in 1666 by Isaac Newton, as he mapped the colour spectrum onto a circle. The colour wheel is called the basis of colour theory, as it shows the relationship between colours.&lt;/p&gt;

&lt;p&gt;Colour Wheel is used to find colour &lt;em&gt;harmonies&lt;/em&gt; by using the specific colour combinations. Colour harmony is achieved by using colours that look good together. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#colour-combinations"&gt;
  &lt;/a&gt;
  Colour Combinations
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Complementary Colours&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PkPDtxvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/complementary-colors.1200x690.f6aff61a6d4a050896d92666ac184888.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PkPDtxvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/complementary-colors.1200x690.f6aff61a6d4a050896d92666ac184888.png" alt="Complementary Colours"&gt;&lt;/a&gt;&lt;br&gt;
Complementary colours are &lt;strong&gt;two&lt;/strong&gt; colours that are on opposite sides of the colour wheel. A combination of two of these like this provides a high contrast for your work and these colours will appear brighter and more prominent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Monochromatic&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4xEu1mri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/monochromatic-colors.1200x690.c7f66f1fcd6a6993b518384ac67996cf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4xEu1mri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/monochromatic-colors.1200x690.c7f66f1fcd6a6993b518384ac67996cf.png" alt="Monochromatic Colours"&gt;&lt;/a&gt;&lt;br&gt;
Monochromatic colour is used as shades, tones and tints (later explained) of a one base colour. It adds minimalism to your work and also it's easier to design too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Analogous&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2qIh4bfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/analogous-colors.1200x690.09f7dce335bf3297b64fbe9ec4107942.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2qIh4bfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/analogous-colors.1200x690.09f7dce335bf3297b64fbe9ec4107942.png" alt="Analogous Colours"&gt;&lt;/a&gt;&lt;br&gt;
Three colours which are placed side by side on the colour wheel are called Analogous colours. The idea is to use one colour as the dominant colour and use the others as supplementary colours. This combination is often called a versatile but overwhelming combination.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Triadic&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UOIRPW4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/triadic-colors.1200x690.a4b8643c90eb65eeec9ee403474a8688.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOIRPW4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/triadic-colors.1200x690.a4b8643c90eb65eeec9ee403474a8688.png" alt="Triadic Colours"&gt;&lt;/a&gt;&lt;br&gt;
Triadic involves three colours that are evenly spaced on colour wheel. This combination creates a high contrast, bold and vibrant colour schemes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Tetradic&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7rVpgWN2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/tetradic-colors.1200x690.fccadf1e4d2ef031edc49c508d2fe2d9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7rVpgWN2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/tetradic-colors.1200x690.fccadf1e4d2ef031edc49c508d2fe2d9.png" alt="Monochromatic Colours"&gt;&lt;/a&gt;&lt;br&gt;
Tetradic is four colours that are evenly spaced on the colour wheel. As in the analogous combination, this combination works best if you let one colour be dominant and use others as supplementary. Although they make a bold impression, more colours means it is more difficult to balance them all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#warm-and-cool-colours"&gt;
  &lt;/a&gt;
  Warm and Cool Colours
&lt;/h2&gt;

&lt;p&gt;The colours of colour wheel can be also divided as warm and cool. Warmness or coolness is known as the temperature of a colour. According to psychology as mentioned above, different colour temperature evokes different feelings.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oXgRup44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/warm-cool-colors.1200x707.217f638962f8da17d66dc775cc16807a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oXgRup44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/warm-cool-colors.1200x707.217f638962f8da17d66dc775cc16807a.png" alt="Monochromatic Colours"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The general idea is that warm colours arouse or stimulate the viewer and cool colours make the viewer calm and relax. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#three-components-of-a-colour"&gt;
  &lt;/a&gt;
  Three Components of a Colour
&lt;/h1&gt;

&lt;p&gt;You can refer to many different 'colours' as when you say the name of a certain colour. To overcome this, there are three primary factors that help in defining a colour. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tbbjzbiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/hue-saturation-luminance.1200x707.05679cea2b904bb29845f87e16c1962d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tbbjzbiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/hue-saturation-luminance.1200x707.05679cea2b904bb29845f87e16c1962d.png" alt="Components-of-colour"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-hue"&gt;
  &lt;/a&gt;
  1. Hue
&lt;/h3&gt;

&lt;p&gt;Hue is defined by the position of the colour wheel, and it represents the name of the colour.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-saturation"&gt;
  &lt;/a&gt;
  2. Saturation
&lt;/h3&gt;

&lt;p&gt;Saturation defines how saturated (rich) a colour is. Saturation at 100% is the normal state of the colour while 0% can result in just a shade of grey. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-brightness-luminance"&gt;
  &lt;/a&gt;
  3. Brightness (Luminance)
&lt;/h3&gt;

&lt;p&gt;Same as the saturation, this is expressed as a percentage between 0 and 100. 0% brightness of a colour is black and 100% bright is the full colour.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#shades-tints-and-tones"&gt;
  &lt;/a&gt;
  Shades, tints and tones
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vDhMO240--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/shade-tint-tones.1200x707.99715a943279b262c99287f9db129c26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vDhMO240--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/_next/static/assets/shade-tint-tones.1200x707.99715a943279b262c99287f9db129c26.png" alt="Shades-tint-tones"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shade"&gt;
  &lt;/a&gt;
  Shade
&lt;/h3&gt;

&lt;p&gt;Created by adding &lt;strong&gt;black&lt;/strong&gt; to base hue and it makes the colour darker. This results in a deeper and richer effect and can be overpowering at times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tint"&gt;
  &lt;/a&gt;
  Tint
&lt;/h3&gt;

&lt;p&gt;Created by adding &lt;strong&gt;white&lt;/strong&gt; to base hue and results in lighter colour. It decreases the intense and used to balance vivid colour combinations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tones"&gt;
  &lt;/a&gt;
  Tones
&lt;/h3&gt;

&lt;p&gt;Created by adding black and black &lt;em&gt;and&lt;/em&gt; white (or grey) to base hue. Tones may not look lie pastel but can reveal complex characters which were not apparent in the base hue.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ekFNyqcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freepik.com/blog/app/uploads/2019/08/UXColor.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ekFNyqcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freepik.com/blog/app/uploads/2019/08/UXColor.jpeg" alt="colours-in-ui-ux"&gt;&lt;/a&gt;&lt;br&gt;
This has been just an introduction to the world of colours. However, with the basics in mind, you can explore more combinations and techniques to use colours in your designs to really make an effect on the viewer. &lt;/p&gt;

</description>
      <category>colour</category>
      <category>ui</category>
      <category>ux</category>
      <category>colourtheory</category>
    </item>
    <item>
      <title>JWT-authentication</title>
      <author>satish-rajnale</author>
      <pubDate>Wed, 21 Apr 2021 13:36:51 +0000</pubDate>
      <link>https://dev.to/satishrajnale/jwt-authentication-3kgj</link>
      <guid>https://dev.to/satishrajnale/jwt-authentication-3kgj</guid>
      <description>&lt;p&gt;This project describes the steps involed in a authentication process between client &amp;amp; server using JWT tokens.&lt;br&gt;
Find it on my Github repo : &lt;br&gt;
&lt;a href="https://github.com/satish-rajnale/JwtwebToken"&gt;Satish-Rajnale&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-you-need-to-generate-some-tokens"&gt;
  &lt;/a&gt;
  First you need to generate some tokens
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It's very easy just enter &lt;strong&gt;node&lt;/strong&gt; and then the code in below image.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VSk5C0Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113830479-4865e480-97a4-11eb-8c28-64451f35146e.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSk5C0Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113830479-4865e480-97a4-11eb-8c28-64451f35146e.PNG" alt="generateTokens"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then add these tokens in your .env file as ACCESS_TOKEN_PATH &amp;amp; REFRESH_TOKEN_PATH.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WtwXmwqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113831448-40f30b00-97a5-11eb-800a-45dc8f1aa073.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtwXmwqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113831448-40f30b00-97a5-11eb-800a-45dc8f1aa073.PNG" alt="dotenv"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#now-create-the-authuserjs-file-as-shown-below"&gt;
  &lt;/a&gt;
  Now Create the authUser.js file as shown below.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1QvQkPxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113831623-70a21300-97a5-11eb-80e5-cd50fbd93f68.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1QvQkPxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113831623-70a21300-97a5-11eb-80e5-cd50fbd93f68.PNG" alt="AuthUserjs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#now-create-the-inedxjs-file-as-shown-below"&gt;
  &lt;/a&gt;
  Now Create the inedx.js file as shown below.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AvIjBkBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113831847-ab0bb000-97a5-11eb-9f75-113b9504c43d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AvIjBkBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113831847-ab0bb000-97a5-11eb-9f75-113b9504c43d.PNG" alt="Indexjs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#onto-the-requests-part-create-a-requestsrest-file-as-shown-below"&gt;
  &lt;/a&gt;
  Onto the Requests part create a Requests.rest file as shown below.
&lt;/h3&gt;

&lt;p&gt;You can use the extension &lt;code&gt;Rest Client&lt;/code&gt; in VsCode or you can also use &lt;code&gt;Postman&lt;/code&gt;, both are great but in this project I am using the entension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n3GRhBQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113832525-5288e280-97a6-11eb-9109-14458854f6db.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3GRhBQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113832525-5288e280-97a6-11eb-9109-14458854f6db.PNG" alt="RequsetsRest"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First make a request of &lt;code&gt;POST&lt;/code&gt; for login on port:4000&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On successfully making the request you will get the following response with tokens.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8oaP8IgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113832996-c75c1c80-97a6-11eb-907b-6ab3b290bb5f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8oaP8IgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113832996-c75c1c80-97a6-11eb-907b-6ab3b290bb5f.PNG" alt="logintoken"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the accessToken and paste it in your &lt;code&gt;GET&lt;/code&gt; request's Auhtorization value. PORT:8080&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cI5Y3u0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113833458-4f422680-97a7-11eb-98f0-7d8d9a6e4137.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cI5Y3u0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113833458-4f422680-97a7-11eb-98f0-7d8d9a6e4137.PNG" alt="getUser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Copy the refreshToken and paste it in your &lt;code&gt;Post&lt;/code&gt; request for token.PORT:4000&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yKpVLF4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113833515-65e87d80-97a7-11eb-8e76-ad3bb49915de.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yKpVLF4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113833515-65e87d80-97a7-11eb-8e76-ad3bb49915de.PNG" alt="PostRefresh"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When sent a request from &lt;code&gt;GET&lt;/code&gt; method you will get the following response.
###NOTE:
There is a TimeLimit added and within that time limit you have to make the get request.
For your convenience you can extend the time limit through your authuser.js code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YE5E9v1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113834011-f1620e80-97a7-11eb-82d2-bd4783220aaa.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YE5E9v1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113834011-f1620e80-97a7-11eb-82d2-bd4783220aaa.PNG" alt="Response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When you send the &lt;code&gt;POST&lt;/code&gt; request for token it generates the following access token which you can copy and paste in the &lt;code&gt;GET&lt;/code&gt; request. This will extend the user access/auth time. Basically you get access again.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ce8RsYx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113834313-51f14b80-97a8-11eb-89bc-12372ae35445.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ce8RsYx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113834313-51f14b80-97a8-11eb-89bc-12372ae35445.PNG" alt="PostRefreshToken"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now to delete the generated JWT token and logout the user use the &lt;code&gt;DELETE&lt;/code&gt; request.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-u8qCY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113834785-d9d75580-97a8-11eb-9db2-1c54abd8d7e5.PNG" alt="Delete"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c-dyiif6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76589507/113834891-f5426080-97a8-11eb-8650-b600bfaf8bba.PNG" alt="TokenDeleted"&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>node</category>
      <category>jwt</category>
      <category>express</category>
      <category>restapi</category>
    </item>
    <item>
      <title>Make your npm package work on both Node.js and browser</title>
      <author>Nir Hadassi</author>
      <pubDate>Wed, 21 Apr 2021 13:34:44 +0000</pubDate>
      <link>https://dev.to/aspecto/make-your-npm-package-work-on-both-node-js-and-browser-30n7</link>
      <guid>https://dev.to/aspecto/make-your-npm-package-work-on-both-node-js-and-browser-30n7</guid>
      <description>&lt;p&gt;I recently worked on an npm package that is supposed to be consumed on both Node.js environment and the browser (using React/Angular/etc..).&lt;/p&gt;

&lt;p&gt;Things started getting complicated when the node branch of the code needed to require native Node.js packages — like &lt;code&gt;fs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Consider the following (simplified) code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// node-handler.js
const fs = require('fs');

export const handle = () =&amp;gt; { 
  fs.readFileSync(…);
  …
};

// browser-handler.js
export const handle = () =&amp;gt; { … };

// index.js
const nodeHandler = require('./node-handler').handle;
const browserHandle = require('./browser-handler').handle;
const isNode = require('./config').isNode;

const handle = isNode ? nodeHandler : browserHandle;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When testing the module on my React + Webpack app, the app crashed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKbVjFBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wq7fou7mjg5rbejt1sqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKbVjFBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wq7fou7mjg5rbejt1sqm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This happened even though the &lt;code&gt;node-handler&lt;/code&gt; file wasn’t executed, this is due to Webpack nature of creating a bundle containing all the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-postpone-your-requires"&gt;
  &lt;/a&gt;
  Step 1: Postpone your requires
&lt;/h2&gt;

&lt;p&gt;Instead of requiring &lt;code&gt;fs&lt;/code&gt; in the global scope, we can require it only where we actually need it, that way we don’t require it when running in the browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// node-handler.js
export const handle = () =&amp;gt; { 
  require('fs').readFileSync(…);
  …
};

// browser-handler.js
export const handle = () =&amp;gt; { … };

// index.js
const nodeHandler = require('./node-handler').handle;
const browserHandle = require('./browser-handler').handle;
const isNode = require('./config').isNode;

const handle = isNode ? nodeHandler : browserHandle;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool! Our React app is not crashing anymore! But we do get an annoying compilation warning right now:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ttwWDeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ptgfju0o8i9ut8o8dhp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ttwWDeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ptgfju0o8i9ut8o8dhp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While we can live with a warning ⚠️ , our end-users will probably not like this too much and will end up not installing our package.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-eval-your-require"&gt;
  &lt;/a&gt;
  Step 2: eval your require
&lt;/h2&gt;

&lt;p&gt;This is not the most elegant solution (to say the least..), but it’s keeping Webpack quiet and your end-users happy. Instead of using &lt;code&gt;require('fs')&lt;/code&gt;, we’re gonna use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval"&gt;eval&lt;/a&gt;&lt;code&gt;('require')('fs')&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// node-handler.js
export const handle = () =&amp;gt; { 
  eval('require')('fs').readFileSync(…);
  …
};

// browser-handler.js
export const handle = () =&amp;gt; { … };

// index.js
const nodeHandler = require('./node-handler').handle;
const browserHandle = require('./browser-handler').handle;
const isNode = require('./config').isNode;

const handle = isNode ? nodeHandler : browserHandle;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that’s it! Just two simple steps to make your npm package work on both Node.js and browser.&lt;/p&gt;

&lt;p&gt;Good luck and may you be blessed with tons of stars 🌟&lt;/p&gt;

</description>
      <category>npm</category>
      <category>node</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Welcome to DEV, AWS Community ASEAN!</title>
      <author>Raphael Jambalos</author>
      <pubDate>Wed, 21 Apr 2021 13:06:09 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/welcome-to-dev-to-aws-community-asean-ao9</link>
      <guid>https://dev.to/awscommunity-asean/welcome-to-dev-to-aws-community-asean-ao9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-to-our-devto-blog"&gt;
  &lt;/a&gt;
  Welcome to our Dev.to blog!
&lt;/h2&gt;

&lt;p&gt;We have decided to start this blog to help members have more channels in contributing to the community. Every member has a story to tell and by starting this blog, we aim to encourage each member to share their story and help inspire the next generation of AWS cloud professionals and enthusiasts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-contribute"&gt;
  &lt;/a&gt;
  How do I contribute?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-join-an-aws-community-in-asean"&gt;
  &lt;/a&gt;
  [1] Join an AWS Community in ASEAN
&lt;/h3&gt;

&lt;p&gt;To contribute, you must be part of any AWS User Group in ASEAN. You can find them here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS User Group Philippines: &lt;a href="https://www.facebook.com/groups/AWSUGPH"&gt;https://www.facebook.com/groups/AWSUGPH&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS User Group Malaysia: &lt;a href="https://www.facebook.com/groups/AWSUGMY"&gt;https://www.facebook.com/groups/AWSUGMY&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS User Group Singapore: &lt;a href="https://www.facebook.com/groups/AWSUGSG"&gt;https://www.facebook.com/groups/AWSUGSG&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS User Group Vietnam: &lt;a href="https://www.facebook.com/groups/awsvn/"&gt;https://www.facebook.com/groups/awsvn/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS User Group Thailand: &lt;a href="https://www.facebook.com/groups/awsusergroup/"&gt;https://www.facebook.com/groups/awsusergroup/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS User Group Cambodia: &lt;a href="https://www.facebook.com/groups/aws.ug.phnompenh/"&gt;https://www.facebook.com/groups/aws.ug.phnompenh/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS User Group Pakistan: &lt;a href="https://www.facebook.com/groups/awsugpk"&gt;https://www.facebook.com/groups/awsugpk&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS User Group Myanmar: &lt;a href="https://www.facebook.com/groups/AWSusergroupmyanmar/"&gt;https://www.facebook.com/groups/AWSusergroupmyanmar/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-create-an-account-here-in-devto-if-you-havent"&gt;
  &lt;/a&gt;
  [2] Create an account here in Dev.to (if you haven't)
&lt;/h3&gt;

&lt;p&gt;Dev.to is an awesome platform where developers are able to share their ideas. Sign up &lt;a href="https://dev.to/enter?state=new-user"&gt;here&lt;/a&gt; for an account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-fill-up-the-form"&gt;
  &lt;/a&gt;
  [3] Fill up &lt;a href="https://airtable.com/shrnAzkTs95CbFytS"&gt;the form&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Fill up &lt;a href="https://airtable.com/shrnAzkTs95CbFytS"&gt;this form&lt;/a&gt; so we can properly contact you and add you to the Facebook group of AWS Asean Blog Contributors. We will also share with you the unique token that you will use to be able to post content in the Dev.to website. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-lets-get-writing"&gt;
  &lt;/a&gt;
  [4] Let's get writing!
&lt;/h3&gt;

&lt;p&gt;Once you are part of the community, you will be able to post to the &lt;a href="https://dev.to/awscommunity-asean"&gt;AWS Community ASEAN&lt;/a&gt;. We will strictly enforce our house rules below to ensure the community remains a safe space where members can share their ideas and start a discourse.&lt;/p&gt;

&lt;p&gt;TLDR: Posts should be related to AWS. It doesn't have to be technical in nature but it does need to somehow connect to AWS. There should be no mention of competing products and it should not threaten or harass others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-you-go-here-are-some-house-rules"&gt;
  &lt;/a&gt;
  Before you go, here are some house rules
&lt;/h2&gt;

&lt;p&gt;The AWS Community Asean is a safe space where people of any gender, nationality, association, sexual orientation can express their ideas and have a platform to share them with the world. But every community needs a set of rules to make sure everyone can take part in the community. Here are our house rules. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each post should comply with the code of conduct of our platform, dev.to. You can view the document here: &lt;a href="https://dev.to/code-of-conduct"&gt;https://dev.to/code-of-conduct&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;On top of the platform code of conduct, our core team will also enforce:

&lt;ul&gt;
&lt;li&gt;Each post should be related to AWS. It should have no mention of competing cloud providers or products.&lt;/li&gt;
&lt;li&gt;The community is a safe place. Any post that threatens, harass, causes harm to any member of the community or the dev.to user base in general will be taken down.&lt;/li&gt;
&lt;li&gt;Any post that blatantly sells products without regard to the community's objectives of sharing knowledge and promoting discourse will be taken down.&lt;/li&gt;
&lt;li&gt;We have no tolerance for plagiarized content. It will be taken down.&lt;/li&gt;
&lt;li&gt;The community is not a platform for users to reflect or assert their political and social views. Therefore, posts with political or social commentary will be taken down.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-bloggin"&gt;
  &lt;/a&gt;
  Let's get bloggin' 🥂
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wr0CT3vJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqolf42kqt5fqirjspbn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wr0CT3vJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqolf42kqt5fqirjspbn.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@johnschno?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;John Schnobrich&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/collaborate?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devrel</category>
      <category>cloud</category>
      <category>community</category>
    </item>
    <item>
      <title>Introducing Sound Null Safety Support for Appwrite Flutter and Dart SDKs</title>
      <author>Damodar Lohani</author>
      <pubDate>Wed, 21 Apr 2021 13:06:00 +0000</pubDate>
      <link>https://dev.to/appwrite/introducing-sound-null-safety-support-for-appwrite-flutter-and-dart-sdks-2mhc</link>
      <guid>https://dev.to/appwrite/introducing-sound-null-safety-support-for-appwrite-flutter-and-dart-sdks-2mhc</guid>
      <description>&lt;p&gt;Flutter has always been one of the highly active &lt;a href="https://appwrite.io"&gt;Appwrite&lt;/a&gt; platforms with lots of developers already using Appwrite to power their Flutter Apps. That is why today we are especially excited to announce that our &lt;a href="https://pub.dev/packages/appwrite/versions/0.5.0-dev.1"&gt;Flutter Client SDK&lt;/a&gt; and the &lt;a href="https://pub.dev/packages/dart_appwrite/versions/0.5.0-dev.1"&gt;Dart Server SDK&lt;/a&gt; have both received an upgrade to support null safety, and we have a pre-release version of both SDKs (Flutter v0.5.0-dev.1 &amp;amp; Dart v0.5.0-dev.1) in &lt;a href="https://pub.dev"&gt;pub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-the-null-safe-sdk"&gt;
  &lt;/a&gt;
  Get the Null Safe SDK
&lt;/h2&gt;

&lt;p&gt;To use the Null Safe SDK in your project, you can use the following as a dependency in your &lt;code&gt;pubspec.yaml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;dependencies:&lt;/span&gt;
  &lt;span class="nl"&gt;appwrite:&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="nl"&gt;dart_appwrite:&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-null-safety"&gt;
  &lt;/a&gt;
  What is null safety?
&lt;/h2&gt;

&lt;p&gt;Sound null safety allows developers to specify which variables can contain null values. This has the potential to eradicate dreaded null reference exceptions, offering guarantees in development and at runtime that types can only contain null values if the developer expressly chooses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theres-more"&gt;
  &lt;/a&gt;
  There's more
&lt;/h2&gt;

&lt;p&gt;To properly support access to private files in the Appwrite Storage, we have updated the methods that access the file-related Storage endpoints along with the Avatars endpoint.&lt;br&gt;
Now, all of the Avatars service methods return &lt;code&gt;Future&amp;lt;Response&amp;gt;&lt;/code&gt; instead of the previous &lt;code&gt;String&lt;/code&gt;. Also the Storage methods &lt;code&gt;getFilePreview&lt;/code&gt;, &lt;code&gt;getFileView&lt;/code&gt; and &lt;code&gt;getFileDownload&lt;/code&gt; as well return &lt;code&gt;Future&amp;lt;Response&amp;gt;&lt;/code&gt; instead of previous &lt;code&gt;String&lt;/code&gt;. With the new method signatures you can now easily integrate any Appwrite hosted images in your Flutter app with the &lt;code&gt;Image.memory&lt;/code&gt; widget. Below is an example of how you can load and display image preview in your Flutter Application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;FutureBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;future:&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFileView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;fileId:&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;YOUR_FILE_ID&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasData&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;AppwriteException&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;AppwriteException&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;CircularProgressIndicator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;},&lt;/span&gt;
&lt;span class="o"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would love your help in testing the dev releases of both SDKs and provide us with feedback on how we can improve it further. We are excited to see what you build with Flutter 2.0 &amp;amp; Appwrite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  Learn More
&lt;/h2&gt;

&lt;p&gt;Appwrite has many services and tools to allow you to build applications in a much more productive and secure way. You can use the following resources to learn more about Appwrite and how to leverage it in building your next Appwrite + Flutter project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🚀 &lt;a href="https://appwrite.io/docs/getting-started-for-flutter"&gt;Getting Started Tutorial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📜 &lt;a href="https://appwrite.io/docs"&gt;Appwrite Docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💬 &lt;a href="https://appwrite.io/discord"&gt;Discord Community&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🚂 &lt;a href="https://github.com/appwrite/playground-for-flutter"&gt;Appwrite Flutter Playground&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;❓&lt;a href="https://github.com/appwrite/quiz-with-flutter"&gt;Demo - Quiz With Flutter&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't forget to join the &lt;a href="https://appwrite.io/discord"&gt;Appwrite Discord community&lt;/a&gt;, where you can learn more about Appwrite, get the latest updates, and get light-speed help with any question you might have.&lt;/p&gt;

</description>
      <category>appwrite</category>
      <category>dart</category>
      <category>flutter</category>
      <category>nullsafety</category>
    </item>
    <item>
      <title>UI Dev Newsletter #53</title>
      <author>Silvestar Bistrović</author>
      <pubDate>Wed, 21 Apr 2021 12:47:58 +0000</pubDate>
      <link>https://dev.to/starbist/ui-dev-newsletter-53-823</link>
      <guid>https://dev.to/starbist/ui-dev-newsletter-53-823</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3dv9IHB"&gt;CSS is a Strongly Typed Language&lt;/a&gt;&lt;br&gt;
Eric Bailey explains how CSS is strongly typed language, lists all possible types of values, and offers some proof.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3v32xwa"&gt;Overflow Issues In CSS&lt;/a&gt;&lt;br&gt;
Ahmad Shadeed explores the causes of overflow issues and how to solve them using DevTools and other methods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3uZqnck"&gt;Say Hello To CSS Container Queries&lt;/a&gt;&lt;br&gt;
Ahmad Shadeed explains why we need container queries, how they could make our life easier, and how to achieve more powerful components and layouts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3tClIgk"&gt;Prevent overflow with overflow: clip&lt;/a&gt;&lt;br&gt;
Pete LePage announces Chrome 90 supports a new overflow property 'clip' that prevents any scrolling for the box, including programmatic scrolling.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/2Qz69qU"&gt;The best approach to lazy load images for maximum performance&lt;/a&gt;&lt;br&gt;
Adrian Bece explains how to use image lazy loading in browsers that do and don't support native lazy load.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3mZnbus"&gt;Quick Tips for High Contrast Mode&lt;/a&gt;&lt;br&gt;
Sarah Higley covers some surprising behavior of Windows High Contrast mode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3dsCqc6"&gt;CSS Generators&lt;/a&gt;&lt;br&gt;
Marko Denic shares a collection of the best CSS generators that could help you avoid time-consuming tasks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3tIZ7Pf"&gt;uiwtf&lt;/a&gt;&lt;br&gt;
uiwtf is an experimental laboratory of user interface patterns and interactions that make you think 'what the f**k?' in a thought-provoking way.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/34155z3"&gt;Subscribe to the newsletter here!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Cypress Commands (Get, Click, Find)</title>
      <author>Automation Bro</author>
      <pubDate>Wed, 21 Apr 2021 12:18:54 +0000</pubDate>
      <link>https://dev.to/automationbro/cypress-commands-get-click-find-51ig</link>
      <guid>https://dev.to/automationbro/cypress-commands-get-click-find-51ig</guid>
      <description>&lt;p&gt;In this tutorial, we will cover some commonly used Cypress Commands such as Get, Click and Find. We will also take a look at how to find the text of a particular element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cypress-get-amp-click-command"&gt;
  &lt;/a&gt;
  Cypress Get &amp;amp; Click Command
&lt;/h3&gt;

&lt;p&gt;One of the most commands that you will use in Cypress is the ‘Get’ command. The ‘get’ command is used to access one or more DOM elements by a selector.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8m-olCam--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xekt9mgrb63g3b5dxxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8m-olCam--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xekt9mgrb63g3b5dxxg.png" alt="commands-get"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#cypress-get-text-of-an-element"&gt;
  &lt;/a&gt;
  Cypress Get Text of an Element
&lt;/h3&gt;

&lt;p&gt;There are multiple ways to get the text of an element in Cypress.&lt;/p&gt;

&lt;p&gt;1 – Easiest option is via the assertion method:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wEfdUyXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uwut5ejkqxkv675lvor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wEfdUyXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uwut5ejkqxkv675lvor.png" alt="commands-text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2 – This option you can use if you need to manipulate the text first:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pOFa9Ve8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3mujly4gsldaheyfvmy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pOFa9Ve8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3mujly4gsldaheyfvmy.png" alt="carbon-gettext"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#cypress-find-command"&gt;
  &lt;/a&gt;
  Cypress Find Command
&lt;/h3&gt;

&lt;p&gt;The ‘find’ command is used to get the descendant of a particular selector. For example, in the below code we are first accessing the nav menu by the id selector and then finding all the list items within the nav using the ‘find’ command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gchKxj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohlogw38izyib0gct7r8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gchKxj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohlogw38izyib0gct7r8.png" alt="find-command"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#check-out-the-video-below-to-see-learn-more-about-the-get-click-and-the-find-commands-"&gt;
  &lt;/a&gt;
  Check out the video below to see learn more about the Get, Click, and the Find commands –
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jyDr97ubWMQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this &lt;/p&gt;

&lt;p&gt;👍 Follow &lt;a href="https://twitter.com/automationbro"&gt;automationbro&lt;/a&gt; on Twitter for the latest updates&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
