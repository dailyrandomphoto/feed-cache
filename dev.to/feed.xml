<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Abstract Factory</title>
      <author>GauravRatnawat</author>
      <pubDate>Sun, 17 Oct 2021 19:38:03 +0000</pubDate>
      <link>https://dev.to/gauravratnawat/abstract-factory-haf</link>
      <guid>https://dev.to/gauravratnawat/abstract-factory-haf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#creational-design-pattern"&gt;
  &lt;/a&gt;
  Creational Design Pattern
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=""&gt;Abstract Factory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To support families of related or dependent objects.&lt;/li&gt;
&lt;li&gt;To encapsulate platform dependencies to make an application portable.&lt;/li&gt;
&lt;li&gt;To prevent client code from using the 'new' operator.&lt;/li&gt;
&lt;li&gt;To easily swap the underlying platform with minimal changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#intent"&gt;
  &lt;/a&gt;
  Intent
&lt;/h3&gt;

&lt;p&gt;Provide an interface for creating families of related or dependent objects without specifying their concrete classes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;An Abstract Factory class (public)&lt;/li&gt;
&lt;li&gt;Factory Implementations for various familes (protected)&lt;/li&gt;
&lt;li&gt;Interfaces for various products (public)
*Set of product implementations for various families (protected)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ouNNBftr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61ayjyx0haumjg8oqz31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouNNBftr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61ayjyx0haumjg8oqz31.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Define interfaces for different types products/objects. Each family will have all these parts.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

public interface Engine {

  public void design();
  public void manufacture();
  public void test();

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

public interface Tyre {

  public void design();
  public void manufacture();

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create sets of implementation subclasses for the above interfaces. Classes are access protected to prohibit instantiations in client modules using the 'new' operator.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

class CarEngine implements Engine {

  @Override
  public void design() {
    System.out.println("Designing Car Engine");
  }

  @Override
  public void manufacture() {
    System.out.println("Manufacturing Car Engine");
  }

  @Override
  public void test() {
    System.out.println("Testing Car Engine");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

class CarEngine implements Engine {

  @Override
  public void design() {
    System.out.println("Designing Car Engine");
  }

  @Override
  public void manufacture() {
    System.out.println("Manufacturing Car Engine");
  }

  @Override
  public void test() {
    System.out.println("Testing Car Engine");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

class CarTyre implements Tyre {

  @Override
  public void design() {
    System.out.println("Designing Car Tyre");
  }

  @Override
  public void manufacture() {
    System.out.println("Manufacturing Car Tyre");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
package com.gaurav.abstractfactory;

class TruckTyre implements Tyre {

  @Override
  public void design() {
    System.out.println("Designing Truck Tyre");
  }

  @Override
  public void manufacture() {
    System.out.println("Manufacturing Truck Tyre");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create a Abstract Factory class with factory method 'getFactory()'. Clients can use this method to get an object the required factory. This example uses both Singleton and Factory Method patterns for better design.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

public abstract class Factory {

  /* Singleton Factory objects */
  private static Factory carFactory = null;
  private static Factory truckFactory = null;

  public abstract Engine getEngine();
  public abstract Tyre getTyre();

  /*
   * This is the factory method exposed to the client.
   * Client requests for a factory instance by passing the type.
   * Client does not need to know about which &amp;amp; how
   * object is created internally.
   */
  public static Factory getFactory(String vehicleType)
      throws UnknownVehicleException {

    if (vehicleType == null) {
      return null;
    }

    Factory factory = null;
    switch (vehicleType) {
      case "car":
        if (carFactory == null)
          carFactory = new CarFactory();
        factory = carFactory;
        break;
      case "truck":
        if (truckFactory == null)
          truckFactory = new TruckFactory();
        factory = truckFactory;
        break;
      default:
        throw new UnknownVehicleException();
    }

    return factory;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create Factory implementations. Classes are protected to prohibit direct access in client modules.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

class CarFactory extends Factory {

  @Override
  public Engine getEngine() {
    return new CarEngine();
  }

  @Override
  public Tyre getTyre() {
    return new CarTyre();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
package com.gaurav.abstractfactory;

public class TruckFactory extends Factory {

  TruckFactory() {}

  @Override
  public Engine getEngine() {
    return new TruckEngine();
  }

  @Override
  public Tyre getTyre() {
    return new TruckTyre();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The client code. Client is exposed to only the Abstract Factory class and the interfaces.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.client;

import java.util.Scanner;

import com.gaurav.abstractfactory.Engine;
import com.gaurav.abstractfactory.Factory;
import com.gaurav.abstractfactory.Tyre;
import com.gaurav.abstractfactory.UnknownVehicleException;

public class AbstractFactoryClient {

  public static void main(String[] args) {

    Scanner in = new Scanner(System.in);
    String vehicleType = in.nextLine().toLowerCase();

    /* Get the factory instance */
    Factory factory;
    try {
      factory = Factory.getFactory(vehicleType);

      /* Get the Engine from the factory */
      Engine engine = factory.getEngine();
      engine.design();
      engine.manufacture();
      engine.test();

      /* Get the Tyre from the factory */
      Tyre tyre = factory.getTyre();
      tyre.design();
      tyre.manufacture();

    } catch (UnknownVehicleException e) {
      System.out.println("Invalid vehicle type entered!");
    }

    in.close();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[input1]
    Car
[output1]
    Designing Car Engine
    Manufacturing Car Engine
    Testing Car Engine
    Designing Car Tyre
    Manufacturing Car Tyre

[input2]
    Bus
[output2]
    Invalid vehicle type entered!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Loosely coupled code.&lt;/li&gt;
&lt;li&gt;Abstract Factory provides a single point of access for all products in a family.&lt;/li&gt;
&lt;li&gt;New product family can be easily supported.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;More layers of abstraction increases complexity.&lt;/li&gt;
&lt;li&gt;If there are any changes to any underlying detail of one factory, the interface might need to be modified for all the factories.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#real-world-examples"&gt;
  &lt;/a&gt;
  Real World Examples
&lt;/h3&gt;

&lt;p&gt;Providing data access to two different data sources (e.g. a SQL Database and a XML file). You have two different data access classes (a gateway to the datastore). Both inherit from a base class that defines the common methods to be implemented (e.g. Load, Save, Delete). Which data source shall be used shouldn't change the way client code retrieves it's data access class. Your Abstract Factory knows which data source shall be used and returns an appropriate instance on request. The factory returns this instance as the base class type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-examples"&gt;
  &lt;/a&gt;
  Software Examples
&lt;/h3&gt;

&lt;p&gt;Dependency Injection&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#java-sdk-examples"&gt;
  &lt;/a&gt;
  Java SDK Examples
&lt;/h4&gt;

&lt;p&gt;javax.xml.parsers.DocumentBuilderFactory newInstance()&lt;br&gt;
javax.xml.transform.TransformerFactory newInstance()&lt;br&gt;
javax.xml.xpath.XPathFactory newInstance()&lt;/p&gt;

</description>
      <category>java</category>
      <category>design</category>
      <category>architecture</category>
      <category>designpattern</category>
    </item>
    <item>
      <title>Amazon Textract with expense analyzing</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 17 Oct 2021 19:09:50 +0000</pubDate>
      <link>https://dev.to/aws-builders/amazon-textract-with-expense-analyzing-516b</link>
      <guid>https://dev.to/aws-builders/amazon-textract-with-expense-analyzing-516b</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/textract"&gt;Amazon Textract&lt;/a&gt; now supports receipts and invoices processing which makes expense management systems analyze better with &lt;em&gt;only receipt's or invoice's&lt;/em&gt; image or document. &lt;br&gt;
Read more about the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/07/amazon-textract-announces-specialized-support-automated-processing-invoices-receipts/"&gt;announcement&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#key-takeaways-from-the-blog"&gt;
  &lt;/a&gt;
  Key takeaways from the blog
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-textract"&gt;What is Textract?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#receipts-and-invoices"&gt;How Textract processes receipts and invoices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#textract-implementation"&gt;Implementing Textract with NodeJS SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#what-is-textract"&gt;
  &lt;/a&gt;
  What is Textract? &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/textract"&gt;Amazon Textract&lt;/a&gt; is a fully-managed Machine Learning service which extract textual information from documents and images. The Textract &lt;code&gt;DetectDocumentText&lt;/code&gt; API is capable of detecting and extracting textual data which are handwritten or typed present either as texts, forms or tables in the document or image. &lt;/p&gt;

&lt;p&gt;Common use-cases of Textract are - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data capture from forms.&lt;/li&gt;
&lt;li&gt;Automating certain processes similar to KYC process.
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGPOi-lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Em9AG0nVoAYV-YQ.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qv16LiyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1368794503285383171/qoMhip1Z_normal.jpg" alt="Jeff Barr ☁️ (@ 🏠 ) 💉 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jeff Barr ☁️ (@ 🏠 ) 💉
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jeffbarr
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Cool demo video &lt;a href="https://twitter.com/mikegchambers"&gt;@mikegchambers&lt;/a&gt; - Amazon Textract Handwriting Recognition (New) - &lt;a href="https://t.co/MXKDL4p8Pr"&gt;youtube.com/watch?v=Efbgai…&lt;/a&gt; . Be sure to fill in those TPS Reports... 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:55 PM - 16 Nov 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1328351004903948288" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1328351004903948288" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1328351004903948288" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aeVGONp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4wFsduWUAIwFaU.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxE8Xk6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1322901525476331520/-8TMD1WC_normal.jpg" alt="Danilo Poccia profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Danilo Poccia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/danilop"&gt;@danilop&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Improve newspaper digitalization efficacy with a generic document segmentation tool using Amazon Textract &lt;a href="https://t.co/ObIlGsEhKs"&gt;buff.ly/3xFEKnp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AWS"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/MachineLearning"&gt;#MachineLearning&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:27 PM - 25 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1408507048111845386" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1408507048111845386" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1408507048111845386" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

And more use-cases available on &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/what-is.html#first-time-user"&gt;Amazon Textract documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Textract exposes the following SDK APIs for developers to integrate - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;AnalyzeDocument&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_AnalyzeDocument.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AnalyzeExpense&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_AnalyzeExpense.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DetectDocumentText&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_DetectDocumentText.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GetDocumentAnalysis&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_GetDocumentAnalysis.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GetDocumentTextDetection&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_GetDocumentTextDetection.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;StartDocumentAnalysis&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentAnalysis.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;StartDocumentTextDetection&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentTextDetection.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With Textract, the processing of images or documents can be handled &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/sync.html"&gt;synchronously&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/async.html"&gt;asynchronous&lt;/a&gt;.&lt;br&gt;
&lt;code&gt;StartDocumentAnalysis&lt;/code&gt; / &lt;code&gt;GetDocumentAnalysis&lt;/code&gt; and &lt;code&gt;StartDocumentTextDetection&lt;/code&gt; / &lt;code&gt;GetDocumentTextDetection&lt;/code&gt; are the asynchronous implementation of Amazon Textract and whenever the action start (&lt;code&gt;StartDocumentAnalysis&lt;/code&gt; and &lt;code&gt;StartDocumentTextDetection&lt;/code&gt;) is executed, it returns a &lt;code&gt;JobID&lt;/code&gt; which is referred to when getting the data.&lt;/p&gt;

&lt;p&gt;Textract APIs are flexible to take either document/image buffer data or the object stored on S3 to process and extract textual information. &lt;/p&gt;

&lt;p&gt;Python samples are available in - &lt;a href="https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/python/example_code/textract"&gt;GitHub/awsdocs&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aws-samples"&gt;
        aws-samples
      &lt;/a&gt; / &lt;a href="https://github.com/aws-samples/amazon-textract-code-samples"&gt;
        amazon-textract-code-samples
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Amazon Textract Code Samples
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
Amazon Textract Code Samples&lt;/h2&gt;
&lt;p&gt;This repository contains example code snippets showing how Amazon Textract and other AWS services can be used to get insights from documents.&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;python3 01-detect-text-local.py&lt;/p&gt;
&lt;p&gt;For examples that use S3 bucket, upload sample images to an S3 bucket and update variable "s3BucketName" in the example before running it.&lt;/p&gt;
&lt;h2&gt;
Python Samples&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/01-detect-text-local.py"&gt;01-detect-text-local.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing processing a document on local machine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/02-detect-text-s3.py"&gt;02-detect-text-s3.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing processing a document in Amazon S3 bucket.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/03-reading-order.py"&gt;03-reading-order.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing printing document in reading order.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/04-nlp-comprehend.py"&gt;04-nlp-comprehend.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing detecting entities and sentiment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/05-nlp-medical.py"&gt;05-nlp-medical.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing detecting medical entities.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/06-translate.py"&gt;06-translate.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing translation of documents.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/07-search.py"&gt;07-search.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing document indexing in Elasticsearch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/08-forms.py"&gt;08-forms.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing form (key/value) processing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/09-forms-redaction.py"&gt;09-forms-redaction.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing redacting information in document.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/10-tables.py"&gt;10-tables.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing table processing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/11-tables-expense.py"&gt;11-tables-expense.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing validation of table data.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/12-pdf-text.py"&gt;12-pdf-text.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing PDF document processing.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
.NET Usage&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;Usage: dotnet run [--switch]
To run this console&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aws-samples/amazon-textract-code-samples"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
NodeJS samples are in an open pull request - &lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/aws-samples/amazon-textract-code-samples/pull/18"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Added NodeJS samples
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#18&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zachjonesnoel"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--BEC0gOey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/12515425%3Fv%3D4" alt="zachjonesnoel avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zachjonesnoel"&gt;zachjonesnoel&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/aws-samples/amazon-textract-code-samples/pull/18"&gt;&lt;time&gt;Sep 18, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;em&gt;Issue #, if available:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Description of changes:&lt;/em&gt;
Added NodeJS text detect samples.&lt;/p&gt;
&lt;p&gt;By submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aws-samples/amazon-textract-code-samples/pull/18"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#how-textract-processes-receipts-and-invoices"&gt;
  &lt;/a&gt;
  How Textract processes receipts and invoices &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Textract &lt;code&gt;AnalyzeExpense&lt;/code&gt; API processes the data and extracts the key information from the document such as &lt;em&gt;Vendor names&lt;/em&gt;, &lt;em&gt;Receipt number&lt;/em&gt; or &lt;em&gt;Invoice number&lt;/em&gt;. &lt;code&gt;AnalyzeExpense&lt;/code&gt; API is available &lt;strong&gt;only in the latest version of SDK&lt;/strong&gt;, as this is one of the new functions available now. So ensure, you have updated your SDK.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Starting today, Amazon Textract adds the following capabilities for receipts and invoices: 1) Identifies Vendor Name - Amazon Textract can find the vendor name on a receipt even if it's only indicated within a logo on the page without an explicit label called “vendor”. It can also find and extract item, quantity, and prices that are not labeled with column headers for line items, 2) Enables consolidation of output from many documents - Textract normalizes keynames and column headers when extracting data from invoices and receipts, into a standard taxonomy. For example, it detects that “invoice no.” “invoice number” and “receipt #” are identical and outputs “INVOICE_RECEIPT_ID,” so that downstream applications can easily compare output from many documents, and 3) Extracts line item details, even when the column headers are missing - Textract extracts line items including items, quantities, and prices of individual goods purchased from an invoice or a receipt. If the table of line items does not include column headers, Textract now infers what the column headers are meant to be based on the table content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As described in the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/07/amazon-textract-announces-specialized-support-automated-processing-invoices-receipts/"&gt;announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This makes it easier for systems which are integrating Textract to manage expense analysis with the consolidated information.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#implementing-textract-with-nodejs-sdk"&gt;
  &lt;/a&gt;
  Implementing Textract with NodeJS SDK &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;In this walkthrough, we will be using the &lt;code&gt;AnalyzeExpense&lt;/code&gt; and &lt;code&gt;AnalyzeDocument&lt;/code&gt; API from Textract. &lt;/p&gt;

&lt;p&gt;To get started, you can navigate to &lt;em&gt;Amazon Textract&lt;/em&gt; AWS Console from where you will be able to run Textract on sample documents and view the response pretty-formatted on the console. &lt;/p&gt;

&lt;p&gt;Image used for the demo - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pCxWYwzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sb11vrufnvowmhv16nd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCxWYwzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sb11vrufnvowmhv16nd.png" alt="Image used for the demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using &lt;code&gt;AnalyzeDocument&lt;/code&gt; from the console/ SDK API, you would have to use what type of feature you want to extract. From SDK API you would have to pass the input for &lt;code&gt;FeatureTypes&lt;/code&gt; as &lt;code&gt;TABLES&lt;/code&gt; or &lt;code&gt;FORMS&lt;/code&gt;, if you are trying this from the console, you can additionally extract all the text as &lt;code&gt;RAW TEXT&lt;/code&gt; also.&lt;br&gt;
Raw text - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1vSzhe0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h870m55u4vvpe3vj7doh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1vSzhe0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h870m55u4vvpe3vj7doh.png" alt="RAW TEXT"&gt;&lt;/a&gt;&lt;br&gt;
Forms - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BpvF_Zmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2to2u7uufwxfck0dxqkj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpvF_Zmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2to2u7uufwxfck0dxqkj.png" alt="Forms"&gt;&lt;/a&gt;&lt;br&gt;
Tables - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SE9z8l9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quwjjls2amtzxa6zepnc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SE9z8l9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quwjjls2amtzxa6zepnc.png" alt="Tables"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="na"&gt;S3Object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xxxxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;download.jfif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;FeatureTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TABLES&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FORMS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;textract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;analyzeDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Response available on &lt;a href="https://gist.github.com/zachjonesnoel/c56763bdea593f0ad30e6d9246557401#file-analyzedocumentresponse-json"&gt;GitHub Gist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;AnalyzeExpense&lt;/code&gt; API, from the console and SDK API, you will get the response with both &lt;code&gt;SummaryFields&lt;/code&gt; and &lt;code&gt;LineItemFields&lt;/code&gt;.&lt;br&gt;
Summary fields - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hry_XvtK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2vs16e31xblixe0gyww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hry_XvtK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2vs16e31xblixe0gyww.png" alt="SummaryFields"&gt;&lt;/a&gt;&lt;br&gt;
Line item fields&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gdhjKRxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsszs6hc98gvda963upm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gdhjKRxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsszs6hc98gvda963upm.png" alt="LineItemFields"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="na"&gt;S3Object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xxxxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;download.jfif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;textract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;analyzeExpense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Response available on &lt;a href="https://gist.github.com/zachjonesnoel/c56763bdea593f0ad30e6d9246557401#file-analyzeexpenseresponse-json"&gt;GitHub Gist&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Amazon Textract's pricing varies upon the API that is executed as internally it uses &lt;em&gt;OCR technology&lt;/em&gt; to process and extract textual information. Also based on the feature type, it focuses to extract either &lt;code&gt;FORM&lt;/code&gt; or &lt;code&gt;TABLE&lt;/code&gt; data.&lt;br&gt;
Detailed information on pricing is available &lt;a href="https://aws.amazon.com/textract/pricing/"&gt;on Textract pricing page&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;Amazon Textract enables applications to integrate with SDK APIs so that the documents or images with textual data from various representations of text in form of raw text, forms, tables are easily extratable. Now with the expense analysis support, Textract goes a level ahead to consolidate the items and also extract key information from the invoice or receipts. Textract also provides the confidence level / percentage of the extracted text making it a choice for the integrating applications to either consider it or neglect it. &lt;/p&gt;

</description>
      <category>textract</category>
      <category>aws</category>
      <category>machinelearning</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Using Chi as a router for Go APIs</title>
      <author>Sam Newby</author>
      <pubDate>Sun, 17 Oct 2021 18:55:45 +0000</pubDate>
      <link>https://dev.to/nwby/using-chi-as-a-router-for-go-apis-53n2</link>
      <guid>https://dev.to/nwby/using-chi-as-a-router-for-go-apis-53n2</guid>
      <description>&lt;p&gt;The Go &lt;code&gt;net/http&lt;/code&gt; package is great, it provides Go developers with a fantastic build block for building super fast APIs with Go.&lt;/p&gt;

&lt;p&gt;However, it doesn't have a built in router that most developers would be used to. Luckily, a lot of community members have built really simple routers that can be used with the standard &lt;code&gt;net/http&lt;/code&gt; package. There is a lot of options out there, but my personal favourite is &lt;a href="https://go-chi.io/#/"&gt;Chi&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Disclaimer: I'm not going to go into a lot of detail why I personally prefer Chi as I believe that those who are new to Go should be allowed to freely make there own choice on their favourite router without influence from others.&lt;/p&gt;

&lt;p&gt;Right, let's take a look at how we can build a small API using Chi as our router.&lt;/p&gt;

&lt;p&gt;Firstly, let's install Chi&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get -u github.com/go-chi/chi/v5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll define our &lt;code&gt;main.go&lt;/code&gt; and start using Chi straight away. We're going to declare a new router and create an initial route to receive a &lt;code&gt;GET&lt;/code&gt; request and then start our &lt;code&gt;http&lt;/code&gt; server. That will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "net/http"
    "github.com/go-chi/chi/v5"
)

func main() {
    router := chi.NewRouter()

    r.Get("/", testHandler)

    http.ListenAndServe(":8000", r)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To recap this we're importing &lt;code&gt;chi&lt;/code&gt; and &lt;code&gt;net/http&lt;/code&gt; then defining a main function and creating a new Chi router and assigning it a new variable called &lt;code&gt;router&lt;/code&gt;. We're then defining a new route at the path &lt;code&gt;/&lt;/code&gt; that will receive a &lt;code&gt;GET&lt;/code&gt; request and will run the &lt;code&gt;testHandler&lt;/code&gt; function, we haven't defined that handler and we won't to keep this tutorial short. We then start the &lt;code&gt;http&lt;/code&gt; server on port 8000 and pass the Chi router.&lt;/p&gt;

&lt;p&gt;This has just touched the surface on Chi and it has a lot more features to offer when building an API and I plan to write more on the power of Chi in the future.&lt;/p&gt;

&lt;p&gt;If you'd like to stay up to date with my content, make sure to follow me on &lt;a href="https://twitter.com/samnewby_"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>chi</category>
      <category>apis</category>
    </item>
    <item>
      <title>Why Good Syntax Highlighting is Important</title>
      <author>Ashish Bailkeri</author>
      <pubDate>Sun, 17 Oct 2021 18:30:11 +0000</pubDate>
      <link>https://dev.to/aboss123/why-good-syntax-highlighting-is-important-4gan</link>
      <guid>https://dev.to/aboss123/why-good-syntax-highlighting-is-important-4gan</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;All code snippets posted are under the &lt;strong&gt;MIT License&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#so-does-it-really-matter"&gt;
  &lt;/a&gt;
  So does it really matter?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Yes.&lt;/strong&gt; There good programming practices in certain programming languages but there is also good developing practices and this is one of them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-are-the-advantages"&gt;
  &lt;/a&gt;
  So what are the advantages?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Higher Productivity 

&lt;ul&gt;
&lt;li&gt;When programming with better syntax highlighting it becomes easier to identify where parts of your program is based on the color. With color schemes with limiting syntax highlighting on certain semantics, it can be really difficult to differentiate between what may be a parameter variable or a local variable, or in the case of C++, macros, enum values, global variables, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Encourages you to code

&lt;ul&gt;
&lt;li&gt;What do I mean by this? I mean that you actually feel more engaged looking at a diverse array of colors on your screen rather than dull jumbled array of words that happen to put together a program. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me show you what I mean:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good Example&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T771lJKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyaroxfhhy8hj9ciity7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T771lJKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyaroxfhhy8hj9ciity7.png" alt="Good Syntax Highlighting Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Snippet from &lt;a href="https://github.com/The-NextGen-Project/jet"&gt;&lt;strong&gt;Jet&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this do well? It has a vast amount of colors that is easy to differentiate parts of the program immediately, it is not just about I have highlighting, but it really tries and brings out different parts of the program. I can easily point out macros, class variables, parameters, and functions almost instantly through this highlighting.&lt;/p&gt;

&lt;p&gt;There are benefits to this in dynamically-typed languages too,&lt;br&gt;
let's have a look at JavaScript:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dAWWrb_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp3m1ll70vm53zcf1gaa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dAWWrb_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp3m1ll70vm53zcf1gaa.png" alt="JavaScript Highlighting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, this also depends on your editor's capability but other popular editors like Visual Studio Code, still provide support for &lt;a href="https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide"&gt;semantic highlighting&lt;/a&gt;. But we can see clearly how this highlighting improves the coder's experience and provides clarity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not so Great Example&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XJhv2dz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nul4bkga0fbhh4zkpm76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XJhv2dz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nul4bkga0fbhh4zkpm76.png" alt="Okay Syntax Highlighting Example"&gt;&lt;/a&gt;&lt;br&gt;
This theme is known as &lt;strong&gt;Dracula&lt;/strong&gt;, JetBrains's default dark theme syntax highlighting, and while it does the job, makes me feel less excited to code. Important type values such as &lt;code&gt;size_t&lt;/code&gt; are not highlighted in this example and can easily be overlooked as they have a very similar color to the delimiter tokens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-good-syntax-highlight"&gt;
  &lt;/a&gt;
  Disadvantages of Good Syntax Highlight
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get lost in the sea of colors that is your code

&lt;ul&gt;
&lt;li&gt;No? That's just me? Well let's move on then.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;My opinion is this: the making of a good programmer is one that knows how to use the tools available today to further increase their skills, and this includes something as subtle as syntax highlighting and font choice.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>beginners</category>
      <category>development</category>
      <category>programming</category>
    </item>
    <item>
      <title>Pop culture design patterns: creational</title>
      <author>MeStrak</author>
      <pubDate>Sun, 17 Oct 2021 18:28:44 +0000</pubDate>
      <link>https://dev.to/mestrak/pop-culture-design-patterns-creational-3m32</link>
      <guid>https://dev.to/mestrak/pop-culture-design-patterns-creational-3m32</guid>
      <description>&lt;p&gt;During a recent interview I asked the candidate about their understanding of design patterns. I was impressed not only with their honesty, telling me they only had basic knowledge, but also with their description of the Singleton pattern:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's like Highlander … there can be only one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since then I discovered that there are already some memes floating around with the same joke, but it made me chuckle anyway. It got me thinking that perhaps there is something in the idea of using pop culture references to remember the fundamental goals of design patterns.&lt;/p&gt;

&lt;p&gt;This series is my attempt to choose some good references. It's not to be taken too seriously, and I won't provide in depth explanations of each pattern as there are already amazing sites for this like &lt;a href="https://refactoring.guru"&gt;https://refactoring.guru&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's try creational patterns first. Here goes …&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#singleton-highlander-there-can-be-only-one"&gt;
  &lt;/a&gt;
  Singleton: Highlander - there can be only one
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJuolwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebeesxz1sp1v7tpd645f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8UJuolwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebeesxz1sp1v7tpd645f.png" alt="Highlander movie poster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image sourced from: &lt;a href="https://www.vintagemovieposters.co.uk/wp-content/uploads/2021/03/IMG_1541-scaled.jpeg"&gt;https://www.vintagemovieposters.co.uk/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Singleton ensures that only one instance of the class which implements it can exist. Global access to that object can be used within state management applications (think Redux).&lt;/p&gt;

&lt;p&gt;If you haven't seen The Highlander, you're missing out. I love it, even though it's 80s cheese. Immortals battle it out to be the only immortal, because just like the Singleton pattern 'THERE CAN BE ONLY ONE!'.&lt;/p&gt;

&lt;p&gt;Other similarities between Singleton and The Highlander:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They're both classics, and both much criticised. I'm not afraid to say that I love both of them - I can still remember my first time implementing a Singleton.&lt;/li&gt;
&lt;li&gt;In The Highlander, after beheading another immortal, all knowledge that person has obtained during their lifetime is transferred to the surviving immortal in a process called The Quickening. One of the criticisms of Singleton is that it can be used as a global store for everything, resulting in separate components of an application knowing too much about each other.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#builder-five-guys"&gt;
  &lt;/a&gt;
  Builder: Five Guys
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XieV3ZhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wza2d9qri3slhfvkw3hm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XieV3ZhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wza2d9qri3slhfvkw3hm.png" alt="Five Guys burger, fries and milkshake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image sourced from: &lt;a href="https://www.timeout.com/miami/restaurants/everything-on-the-five-guys-menu-ranked"&gt;https://www.timeout.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The goal of the Builder pattern is to construct complex objects, and allow you to create variations on those objects using the same code.&lt;/p&gt;

&lt;p&gt;A frequently used analogy for this pattern is assembling a meal in a fast food restaurant. My somewhat limited imagination allowed me to think of Five Guys. Think of making a burger as a complex task - implement the Builder pattern to call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AddPickles()
AddBacon()
AddCheese()
AddKetchup()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Obviously if those are your only choices of Five Guys burger toppings something has gone wrong, but hopefully you get the idea.&lt;/p&gt;

&lt;p&gt;Builder also has an optional implementation of a Director, further abstracting the implementation and simplifying things for the client. This is like your Five Guys cashier who takes your order for a burger all the way, and a crazy milkshake with 11 mixins, and then sends all required instructions to the builder team who assemble and deliver your meal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prototype-futurama-s6e17-benderama"&gt;
  &lt;/a&gt;
  Prototype: Futurama S6E17 - Benderama
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T4xAgUNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myx2pzjyi90t47synirh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4xAgUNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myx2pzjyi90t47synirh.png" alt="Bender from Futurama with his clones on a triple bike"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image sourced from: &lt;a href="https://www.assignmentx.com/wp-content/uploads/2011/06/FUTURAMA-Season-6B-Benderama2.jpg"&gt;https://www.assignmentx.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Prototype pattern is used to remove complexity from copying objects. Objects that implement the Prototype pattern know how to clone themselves, so code that needs to make a copy does not need to know the complexity of the class.&lt;/p&gt;

&lt;p&gt;In Benderama, Bender makes clones of himself. Unfortunately each clone is smaller than the previous one and when they reach molecular level they nearly destroy the world. Obviously knowing that detail this analogy falls down entirely.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#factory-method-the-pepsi-challenge"&gt;
  &lt;/a&gt;
  Factory Method: The Pepsi Challenge
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OQvnfOZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0b6se6ovocrk7zdl9k4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OQvnfOZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0b6se6ovocrk7zdl9k4h.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image sourced from &lt;a href="https://abcnews.go.com/Business/pepsi-challenge-returns-bubbly-twist/story?id=29552172"&gt;https://abcnews.go.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Factory Method provides a way for a class to create similar objects, but to leave the individual subclasses to use their own logic. This is done by defining an interface implemented by all subclasses so individual objects can be created using common methods, but without knowing the details of what's inside.&lt;/p&gt;

&lt;p&gt;First of all, in case you don't know what it is, the Pepsi Challenge is a marketing campaign from the 1980s where shoppers would do a blind tasting of Coke and Pepsi and say which one they preferred.&lt;/p&gt;

&lt;p&gt;Why is Factory Method similar to the Pepsi Challenge? Think of an abstract class called &lt;code&gt;SoftDrink&lt;/code&gt; which provides a creational method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CreateDrink()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And an interface implemented by every soft drink providing the following common methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FillBottle()
OpenBottle()
PourDrink()
DrinkCola()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is Factory Method! The creational logic of each drink is the secret recipe closely guarded by Coke or Pepsi. When the consumer takes the challenge, they call the &lt;code&gt;DrinkCola()&lt;/code&gt; function but they do not know if they are doing that for Coke or Pepsi, thanks to the Factory Method which hides that complexity (in the form of a big yellow box).&lt;/p&gt;

&lt;p&gt;Using this approach, Pepsi could add as many drinks as they want to into the challenge. They don't really need to do that though, as instead through shameless capitalism the two companies have successfully wiped out or bought out most other competition.&lt;/p&gt;

&lt;p&gt;One drawback of the Factory Method is that requires implementation of many subclasses. This can make quite a simple concept harder to understand than intended when actually implemented, just like my attempt to use the Pepsi Challenge to explain this pattern.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#abstract-factory-ikea"&gt;
  &lt;/a&gt;
  Abstract Factory: Ikea
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p-TAvmDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i86et0u2jrknmdq8yskj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p-TAvmDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i86et0u2jrknmdq8yskj.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image sourced from &lt;a href="https://about.ikea.com/"&gt;https://about.ikea.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You may guess from the name that this one adds a layer of abstraction to the Factory Method. It is used for creating groups of related objects (a family). The Abstract Factory class holds a bunch of abstract creation methods which know how to create instances of the objects. Concrete factories will then be called to actually create the object.&lt;/p&gt;

&lt;p&gt;Think of each family like a set of matching furniture from Ikea. The furniture family might contain a chair, sofa and a table. Different style chairs would have the same chair interface, the &lt;code&gt;create()&lt;/code&gt; method would implement the style of that chair's given family. The factory for a given family will call the specific &lt;code&gt;create()&lt;/code&gt; methods to create each furniture type with the correct style matching the family.&lt;/p&gt;

&lt;p&gt;I'm sorry to say that I had a lack of imagination for this one, and the chosen analogy is the same as several other examples online. One of those is the excellently written article on &lt;a href="https://refactoring.guru/design-patterns/abstract-factory"&gt;https://refactoring.guru/&lt;/a&gt; which has a great explanation. I recommend that you spend some time reading that, and hopefully the Ikea link will start to stick.&lt;/p&gt;




&lt;p&gt;And there you have it, hopefully some memorable references for Singleton, Builder, Prototype Factory and Abstract Factory creational design patterns.&lt;/p&gt;

&lt;p&gt;Look out for further posts in this series where I will &lt;em&gt;try&lt;/em&gt; to do the same for Structural and Behavioural patterns.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Fin.&lt;/code&gt;&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>culture</category>
      <category>design</category>
    </item>
    <item>
      <title>Introduction to GitHub Actions</title>
      <author>Peter Mbanugo</author>
      <pubDate>Sun, 17 Oct 2021 18:19:00 +0000</pubDate>
      <link>https://dev.to/pmbanugo/introduction-to-github-actions-4bp5</link>
      <guid>https://dev.to/pmbanugo/introduction-to-github-actions-4bp5</guid>
      <description>&lt;p&gt;GitHub is fast becoming an all-in-one platform where developers build, maintain and ship their software. You may use it primarily as a collaborative code management tool for your software. But today, you have features like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/features/codespaces"&gt;Codespaces&lt;/a&gt;, a cloud-powered development environment that allows you to build, run and debug your code in the cloud.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/features/actions"&gt;Actions&lt;/a&gt;, an automation platform that allows you to automate your development workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm going to focus on GitHub Actions in this post. This will be a basic introduction to the concept of GitHub Actions for developers of all skill levels. I'll start out with a simple action that prints out text, and then finish off with an Actions workflow that will run the test script of a Node.js application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-github-actions"&gt;
  &lt;/a&gt;
  What Is GitHub Actions?
&lt;/h2&gt;

&lt;p&gt;GitHub Actions is an event-driven, automation platform that allows you to run a series of commands after a specified event has occurred. For example, when a commit is made to your staging branch, and you want to build, test and then deploy the changes to your staging environment. With Actions, you can automate tasks within your development lifecycle, all within GitHub.&lt;/p&gt;

&lt;p&gt;A common use case for Actions is automated continuous integration and deployment, and you may ask if you need to know yet another CI/CD tool, or which is better. GitHub Actions is much more than a CI/CD tool. You can use it to automate any task based on any event related to your GitHub project. They can be events related to GitHub Issues where you want to automatically triage issues and label them, or block pull requests that reference no existing issues. It's more of an automation tool than a CI/CD tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-first-hello-world-github-actions"&gt;
  &lt;/a&gt;
  Your First Hello World GitHub Actions
&lt;/h2&gt;

&lt;p&gt;We're going to create a simple Actions workflow that can be manually invoked, or run automatically for every commit pushed to the &lt;code&gt;main&lt;/code&gt; branch. GitHub Actions are stored in your repository, in a directory called &lt;strong&gt;.github/workflows&lt;/strong&gt;, and they're defined using the YAML syntax. &lt;/p&gt;

&lt;p&gt;To get started, fork and clone this &lt;a href="https://github.com/pmbanugo/hello-world-actions"&gt;repository on GitHub&lt;/a&gt;. Create the directory &lt;strong&gt;.github/workflows&lt;/strong&gt;, then add a new file &lt;strong&gt;hello-world-actions.yml&lt;/strong&gt; and paste the code below in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This is a basic workflow to help you get started with Actions&lt;/span&gt;

&lt;span class="c1"&gt;#The name of your workflow that'll be displayed in the Actions tab&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Hello-World-Actions&lt;/span&gt;

&lt;span class="c1"&gt;# Events that control when the action will run.&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Triggers the workflow on push events but only for the main branch&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;# Allows you to run this workflow manually from the Actions tab&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# This workflow contains a single job called "say_hello"&lt;/span&gt;
  &lt;span class="na"&gt;say_hello&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="c1"&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Runs a single command using the runners shell&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Say Hello&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo Hello World!&lt;/span&gt;

      &lt;span class="c1"&gt;# Runs a set of commands using the runners shell&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Say Goodbye&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo Job Finished.&lt;/span&gt;
          &lt;span class="s"&gt;echo Goodbye!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break down the content of this file to help you understand the component of GitHub Actions. But before that, commit and push this change to the upstream branch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h3&gt;

&lt;p&gt;The file you added represents a workflow. A workflow is a configurable automated process made up of one or more jobs and can be scheduled or triggered by an event. A workflow can be used to build, test, package, release or deploy a project. &lt;/p&gt;

&lt;p&gt;GitHub displays the name of your workflow on your repository's Actions page. You can set the name using the &lt;code&gt;name&lt;/code&gt; key in your YAML file, and, if omitted, GitHub sets it to the file path relative to the root of the repository. In the example above, we specified the name as &lt;code&gt;Hello-World-Actions&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events
&lt;/h3&gt;

&lt;p&gt;A workflow can be triggered manually or in response to specific events. To specify the events that trigger a workflow, you use the &lt;code&gt;on&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example executes the workflow on push to the main branch and can be triggered manually from the Actions page because we specified &lt;code&gt;workflow_dispatch&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jobs-runners-and-steps"&gt;
  &lt;/a&gt;
  Jobs, Runners and Steps
&lt;/h3&gt;

&lt;p&gt;A workflow execution is made up of one or more jobs. In our example, we have a single job named &lt;code&gt;say_hello&lt;/code&gt;. A job is a set of steps that execute a series of commands, using the specified runner.&lt;/p&gt;

&lt;p&gt;A runner is a server that has the &lt;a href="https://github.com/actions/runner"&gt;GitHub Actions runner application&lt;/a&gt; installed. It listens for available jobs, runs one job at a time, and reports the progress, logs and results back to GitHub. You can host your own runner or use GitHub hosted runners. In our example, we're using the Ubuntu runner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you specify the runner, then you specify the steps with the commands to run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Runs a single command using the runners shell&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Say Hello&lt;/span&gt;
        &lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo Hello World!&lt;/span&gt;

    &lt;span class="c1"&gt;# Runs a set of commands using the runners shell&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Say Goodbye&lt;/span&gt;
        &lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo Job Finished.&lt;/span&gt;
          &lt;span class="s"&gt;echo Goodbye!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; keyword tells the job to execute a command on the runner. In this case, run the &lt;code&gt;echo&lt;/code&gt; command with the specified values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viewing-the-workflow-activity"&gt;
  &lt;/a&gt;
  Viewing the Workflow Activity
&lt;/h3&gt;

&lt;p&gt;With the changes you made, whenever you push a change to the &lt;code&gt;main&lt;/code&gt; branch, it'll run this workflow. Since you already pushed the change to GitHub, you should have had your workflow executed. You will see the workflow executions on the Actions page on GitHub. You can see a visual graph of the progress for each execution, and also drill down into the details of each step. &lt;/p&gt;

&lt;p&gt;Follow the instructions below to see the workflow executions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open GitHub and go to the main page of your repository.&lt;/li&gt;
&lt;li&gt;You will find the &lt;em&gt;Actions&lt;/em&gt; tab after &lt;em&gt;Pull requests&lt;/em&gt;. Click &lt;em&gt;Actions&lt;/em&gt; to open the Actions page.&lt;/li&gt;
&lt;li&gt;You should see the workflow listed in the left sidebar, and the run for the workflow listed on the main page. Click any of the workflow runs you would like to see more information about its execution.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bw-UEMZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117479820-14c3d900-af61-11eb-9df6-f554b2308c6d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bw-UEMZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117479820-14c3d900-af61-11eb-9df6-f554b2308c6d.png" alt="workflow run" title="workflow run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybkPkCtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117481148-d3ccc400-af62-11eb-97ca-a3da0036db34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybkPkCtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117481148-d3ccc400-af62-11eb-97ca-a3da0036db34.png" alt="job details" title="job details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-workflow-to-run-tests"&gt;
  &lt;/a&gt;
  Create a Workflow to Run Tests
&lt;/h2&gt;

&lt;p&gt;While you can write your own workflow and actions from scratch, there are community contributed ones that you can use and customize. The GitHub marketplace is a central location for you to find actions created by the GitHub community. We will create a new workflow that will run the test in the project. For this, we will use the GitHub interface to create a workflow using one of the suggested templates, then, within the workflow, you will use a public action to set up Node.js.&lt;/p&gt;

&lt;p&gt;Open GitHub and click the &lt;strong&gt;Actions&lt;/strong&gt; tab in order to open the actions page. On the left sidebar, click the &lt;strong&gt;New workflow&lt;/strong&gt; button. You will be presented with a page that contains suggestions for templates that you can modify to create a workflow. Click the &lt;strong&gt;Set up this workflow&lt;/strong&gt; button in the Node.js workflow template card.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eZVAzAN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117490650-5ce9f800-af6f-11eb-9606-8431ff29c33b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eZVAzAN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117490650-5ce9f800-af6f-11eb-9606-8431ff29c33b.png" alt="workflow suggestions" title="workflow suggestions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This opens the workflow editor with the file prefilled with jobs and steps. Change the name of the file to &lt;code&gt;test.yml&lt;/code&gt;. This file is similar to the one you saw earlier but with a few new syntaxes. On lines 17 and 18, you notice the &lt;code&gt;strategy&lt;/code&gt; and &lt;code&gt;matrix&lt;/code&gt; keywords.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;10.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;12.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;14.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;15.x&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The strategy creates a build matrix for the jobs, such that your job will run against the specified variations. In this example, the specified job will run multiple times for the specified Node.js versions in the array. We don't want to run against Node.js 10.x; therefore, we will update line 19 as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node-version: [12.x, 14.x, 15.x, 16.x]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will notice the use of the &lt;code&gt;uses&lt;/code&gt; keyword in this workflow. This is a way to specify actions that you want to execute for the step. An action is a reusable set of commands that can be defined in the same repository as the workflow, a public repository or a Docker image. You can create your own actions, or use actions created by the GitHub community.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;uses: actions/checkout@v2&lt;/code&gt; statement tells the job to retrieve &lt;em&gt;v2&lt;/em&gt; of the community action named &lt;code&gt;actions/checkout@v2&lt;/code&gt;. This is an action that checks out your repository at a particular version, then downloads it to the runner. This allows you to run actions against your code, and you can use this action any time your workflow will run against the repository's code.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;actions/setup-node@v2&lt;/code&gt; action installs the &lt;strong&gt;Node&lt;/strong&gt; software package on the runner, thereby giving you access to &lt;strong&gt;node&lt;/strong&gt; and &lt;strong&gt;npm&lt;/strong&gt; commands.&lt;/p&gt;

&lt;p&gt;The rest of the command runs &lt;strong&gt;npm&lt;/strong&gt; to install the project dependencies and then run the &lt;em&gt;test&lt;/em&gt; script.&lt;/p&gt;

&lt;p&gt;Commit and push these changes and observe the workflow run on the Actions page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fv-hD4H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117639711-80d25700-b184-11eb-8a06-589a720eabb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fv-hD4H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4036118/117639711-80d25700-b184-11eb-8a06-589a720eabb5.png" alt="Node CI Workflow Run" title="Node CI Workflow Run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h2&gt;

&lt;p&gt;GitHub Actions is a nice addition to the suite of features available on GitHub. It enables you to automate your development tasks and visualize how those tasks run, all within GitHub. It can be used to automate CI/CD tasks or automate how you triage issues or labelling of pull requests. Actions serves as your serverless workflow engine, with the automation code maintained alongside the code for the application. The &lt;a href="https://github.com/marketplace"&gt;GitHub marketplace&lt;/a&gt; is where you can find actions for common tasks such as building and publishing a Docker image, and you can also create and share your actions in the marketplace.&lt;/p&gt;

&lt;p&gt;Try it out, and let me know how Actions worked out for you by leaving a comment here or DMing me on &lt;a href="https://twitter.com/p_mbanugo"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally published at &lt;a href="https://www.telerik.com/blogs/introduction-github-actions"&gt;https://www.telerik.com/blogs/introduction-github-actions&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>devops</category>
      <category>cicd</category>
      <category>github</category>
    </item>
    <item>
      <title>8 Steps Guide To Ace A System Design Interview</title>
      <author>Sunil Kumar</author>
      <pubDate>Sun, 17 Oct 2021 18:02:00 +0000</pubDate>
      <link>https://dev.to/sunilc_/8-steps-guide-to-ace-a-system-design-interview-2j8b</link>
      <guid>https://dev.to/sunilc_/8-steps-guide-to-ace-a-system-design-interview-2j8b</guid>
      <description>&lt;p&gt;System Designing has become one of the important rounds to crack a Software Developer job interview, especially for a senior-level position. Preparing for this round is necessary to crack interviews of some of the popular companies like Amazon, Netflix, Google, Twitter, etc.&lt;/p&gt;

&lt;p&gt;In this round, you are basically expected to discuss the design of a large-scale distributed system like Twitter, Uber, Facebook, Dropbox, etc. &lt;/p&gt;

&lt;p&gt;There is no one right solution when it comes to designing a system. There can be multiple ways to solve a problem and thus this round is going to be an open-ended round where the focus will be on a working design + your thought process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-it-important-to-prepare-for-a-system-design%C2%A0round"&gt;
  &lt;/a&gt;
  Why Is It Important To Prepare for a System Design Round:
&lt;/h3&gt;

&lt;p&gt;Due to the lack of experience or knowledge in building scalable systems in everyday work, a lot of developers struggle with this round. Even after being a good Software Developer, they fail to get into good companies just because they fail to clear this round.&lt;/p&gt;

&lt;p&gt;So it's important to focus on this round and prepare well to get into your dream company.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-to-expect-in-a-system-design-interview"&gt;
  &lt;/a&gt;
  What To Expect in a System Design Interview:
&lt;/h3&gt;

&lt;p&gt;Great engineers spend years of time building a robust and scalable system. You cannot possibly come up with a  similar solution in a short duration of 1–1.5 hours in a System Design interview. &lt;/p&gt;

&lt;p&gt;So generally only a part of the entire system is discussed in this round.&lt;/p&gt;

&lt;p&gt;As mentioned earlier there is no one right solution in designing a good system. This round is generally open-ended and discussion can go in any direction based on what the interviewer is interested in, how you lead the discussion, and in what direction you take it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sample-questions-asked-in-a-system-design-interview"&gt;
  &lt;/a&gt;
  Sample Questions Asked in a System Design Interview:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Design a chat service like WhatsApp&lt;/li&gt;
&lt;li&gt;Design a parking lot&lt;/li&gt;
&lt;li&gt;Design a URL shortener service like TinyURL&lt;/li&gt;
&lt;li&gt;Design a video streaming service like YouTube/Netflix&lt;/li&gt;
&lt;li&gt;Design a file sharing service like Google Drive&lt;/li&gt;
&lt;li&gt;Design a Social Media platform like Instagram, Twitter, or Facebook.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are some of the popular questions that are asked in this round. As you can see the questions are vague and the problem statement doesn't provide specific details on what part of the system should be designed. &lt;/p&gt;

&lt;p&gt;So, it's important to know how to approach this round to come up with a good design at the end of this discussion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#different-system-design%C2%A0rounds"&gt;
  &lt;/a&gt;
  Different System Design Rounds:
&lt;/h3&gt;

&lt;p&gt;System Design is generally split into two separate rounds. &lt;/p&gt;

&lt;p&gt;But again, it depends on the company and its process. So be prepared to design both high-level and low-level components of a system in this round.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High-level Design&lt;/li&gt;
&lt;li&gt;Low-level Design&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#highlevel-design"&gt;
  &lt;/a&gt;
  High-Level Design:
&lt;/h4&gt;

&lt;p&gt;This round mainly checks your ability to architect &amp;amp; design high-level components for the given requirements.&lt;/p&gt;

&lt;p&gt;For example, given a problem statement like &lt;code&gt;Design a social media platform like Instagram&lt;/code&gt;, you need to come up with the different microservices you will need, the pub-sub mechanism (if needed), queues, databases, caching, etc.&lt;/p&gt;

&lt;p&gt;The interviewer will ask questions on how data would flow through different microservices in the design, fault tolerance, retry mechanism, etc. You can also expect questions around non-functional requirements like scalability, data consistency, concurrency, etc.&lt;/p&gt;

&lt;p&gt;Building a distributed scalable system is hard. You need to think about different scenarios while coming up with an architecture.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#different-concepts-you-should-learn-about-to-prepare-for-an-hld%C2%A0round"&gt;
  &lt;/a&gt;
  Different concepts you should learn about to prepare for an HLD round:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Key Characteristics of Distributed Systems&lt;/li&gt;
&lt;li&gt;Load Balancing&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Data Partitioning&lt;/li&gt;
&lt;li&gt;Indexes&lt;/li&gt;
&lt;li&gt;Proxies&lt;/li&gt;
&lt;li&gt;Redundancy and Replication&lt;/li&gt;
&lt;li&gt;SQL vs. NoSQL&lt;/li&gt;
&lt;li&gt;CAP Theorem&lt;/li&gt;
&lt;li&gt;Consistent Hashing&lt;/li&gt;
&lt;li&gt;Long-Polling vs WebSockets vs Server-Sent Events&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#lowlevel-design"&gt;
  &lt;/a&gt;
  Low-Level Design:
&lt;/h4&gt;

&lt;p&gt;This round mainly focuses on your ability to design low-level components of your HLD. Given a problem statement you should come up with a design with different entities, classes &amp;amp; attributes, inheritance, composition, design patterns, databases, tables &amp;amp; schema, etc.&lt;/p&gt;

&lt;p&gt;You cannot possibly cover all of these in one interview round. The interviewer may be interested in anyone depending on how the discussion goes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#different-concepts-you-should-learn-about-to-prepare-for-an-lld%C2%A0round"&gt;
  &lt;/a&gt;
  Different concepts you should learn about to prepare for an LLD round:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;UML&lt;/li&gt;
&lt;li&gt;Use case diagram&lt;/li&gt;
&lt;li&gt;Class diagram&lt;/li&gt;
&lt;li&gt;Database design&lt;/li&gt;
&lt;li&gt;Sequence diagram&lt;/li&gt;
&lt;li&gt;Activity diagram&lt;/li&gt;
&lt;li&gt;Separation of concerns&lt;/li&gt;
&lt;li&gt;OOP principles&lt;/li&gt;
&lt;li&gt;SOLID principles etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-approach-a-system-design-interview-round"&gt;
  &lt;/a&gt;
  How To Approach a System Design Interview Round:
&lt;/h3&gt;

&lt;p&gt;Here is my 8 step guide to approaching System Design rounds effectively.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-ask-a-lot-of-questions-and-set-the-scope-for-the-interview"&gt;
  &lt;/a&gt;
  Step 1: Ask a lot of questions and set the scope for the interview:
&lt;/h4&gt;

&lt;p&gt;System Design problem statements are vague. And there's no one right answer. So, it's important to ask a lot of questions and clarify the scope of the discussion.&lt;/p&gt;

&lt;p&gt;Candidates who ask a lot of questions have a better chance of success. For example here is a list of questions you can ask for the Design Instagram question:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What are the different types of accounts possible?&lt;br&gt;
A: Only users. We will not consider business accounts for now&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What type of posts can a user post?&lt;br&gt;
A: Let's consider users can post only images for this discussion. Videos are out of scope.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Can users follow other users?&lt;br&gt;&lt;br&gt;
A: Yes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Should we support tags for each post?&lt;br&gt;&lt;br&gt;
A: Yes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Can posts be private?&lt;br&gt;&lt;br&gt;
A: Let's assume posts can only be public for this discussion.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Can users search for posts?&lt;br&gt;&lt;br&gt;
A: Yes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Should we focus on the client-side architecture or the server-side architecture?&lt;br&gt;&lt;br&gt;
A: I would like to understand the client-server interaction on a high level. But the focus should be more on building a scalable backend system.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How many users are expected to use the system every day?&lt;br&gt;&lt;br&gt;
A: Let's assume we have around 100M users logging in every day.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Should we focus on generating a user's home feed?&lt;br&gt;&lt;br&gt;
A: Let's not focus on the feed generation algorithm&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Should we focus on the high-level or low-level design of the system?&lt;br&gt;&lt;br&gt;
A: Let's discuss the high-level design of the system in this discussion&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These are some of the example questions you can ask to set the scope of the discussion. As you see now we know we need to focus on building the high-level design of Instagram. We don't need to consider users posting videos. We don't need to consider generating users' home feeds in an intelligent way. etc&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-system-interface-definition"&gt;
  &lt;/a&gt;
  Step 2: System Interface Definition
&lt;/h4&gt;

&lt;p&gt;Once we have the requirements finalized, the next step is to come up with a list of APIs we will need to build the system.&lt;/p&gt;

&lt;p&gt;You should define the different REST APIs and their contract to support the requirements given.&lt;/p&gt;

&lt;p&gt;For example in our Instagram example, here are some example APIs we will need:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;storePhoto(user_id, tags, image_url, user_location,…)&lt;br&gt;&lt;br&gt;
getPhoto(image_id)&lt;br&gt;&lt;br&gt;
likePhoto(image_id, user_id)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Of course these are example APIs. The APIs used in a real-world application are much more complicated.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-capacity-estimation-and-constraints"&gt;
  &lt;/a&gt;
  Step 3: Capacity Estimation and Constraints
&lt;/h4&gt;

&lt;p&gt;Your system should have enough storage and resources to handle the expected load and number of users who might use your system in 1 year from now, 5 years from now, etc.&lt;/p&gt;

&lt;p&gt;So it's important to estimate how much resources you need to allocate when designing a system to avoid running into problems in the future.&lt;/p&gt;

&lt;p&gt;If you have a database in your system design, cache in your system, the capacity estimation process generally involves calculating how much memory is used on a daily basis across all the databases and cache clusters. &lt;/p&gt;

&lt;p&gt;This gives us a good estimation of how much memory we will need in years from now.&lt;br&gt;
Capacity estimation also helps in the way we design our system so that it is horizontally and vertically scalable for higher capacity requirements in the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's a calculation of how much storage is needed to store photos in our Instagram example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We have 100M users log in every day based on our assumption above&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's assume 1M users upload an average of 2 photos every day&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2M photos are uploaded every day&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This computes to 23 photos added every second&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's assume an average photo size of 400KB&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Storage needed each day: 2M * 400KB =&amp;gt; 800 GB&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Storage needed for 5 years:&lt;br&gt;&lt;br&gt;
*800GB * 365 (days a year) * 5(years) ~= 1425TB&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Storage needed for 10years:&lt;br&gt;&lt;br&gt;
800GB * 365 (days a year) * 10(years) ~= 2850TB&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-4-highlevel-design"&gt;
  &lt;/a&gt;
  Step 4: High-Level Design
&lt;/h4&gt;

&lt;p&gt;At this point, it helps to list down all the high-level components that are involved in the system and how they interact with each other. &lt;/p&gt;

&lt;p&gt;It can be microservices, databases, caches, messaging queues, low-cost storage services, etc.&lt;/p&gt;

&lt;p&gt;For our Instagram example, we can create two separate microservices. One service is responsible for uploading the photos. Another service for retrieving the photos.&lt;/p&gt;

&lt;p&gt;What's the point of two separate microservices you may ask?&lt;/p&gt;

&lt;p&gt;The reason for this is the upload photos requests are generally lower than reading photos requests. So we can scale the services separately based on the traffic demands.&lt;/p&gt;

&lt;p&gt;We can even use low-cost storage to store photos and a SQL metadata database to store the details about a photo like uploaded_by, location, image_name, size, created_at, etc.&lt;/p&gt;

&lt;p&gt;You should be able to explain how the data would flow through these high-level components once you have this ready.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-5-database-schema%C2%A0design"&gt;
  &lt;/a&gt;
  Step 5: Database Schema Design
&lt;/h4&gt;

&lt;p&gt;In DB design we decide what kind of database suits our use case: A SQL or NoSQL and also the entities and the relationships between them.&lt;/p&gt;

&lt;p&gt;If we're building a banking application where the movement of money is involved we cannot use NoSQL databases that are eventually consistent in nature.&lt;/p&gt;

&lt;p&gt;Similarly, we cannot use a SQL database where data changes very frequently. In our Instagram example, we can use a NoSQL database to store metadata details for a post.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Because a post may have properties like likes, image_url, created_at, created_by, etc. But in the future let's say we want to introduce other features like dislike, tags, etc, it can be easily done using a NoSQL DB without any schema changes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-6-class%C2%A0design"&gt;
  &lt;/a&gt;
  Step 6: Class Design
&lt;/h4&gt;

&lt;p&gt;In class design, we come up with the low-level class entities which share the same responsibilities, relationships, operations, attributes, and semantics.&lt;/p&gt;

&lt;p&gt;We basically list down the classes, their attributes, methods, and their relationship with other classes.&lt;/p&gt;

&lt;p&gt;The way you're evaluated depends on whether you're using the right object-oriented concepts, principles, and design patterns. A good system is designed keeping all of these in mind: Abstraction, Encapsulation, Inheritance &amp;amp; Polymorphism.&lt;/p&gt;

&lt;p&gt;It's also important to learn about the &lt;strong&gt;SOLID principles&lt;/strong&gt; (&lt;strong&gt;The First 5 Principles of Object-Oriented Design&lt;/strong&gt;). These principles will help you design software that is easier to maintain and extend as it grows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;S - Single-responsibility Principle&lt;/li&gt;
&lt;li&gt;O - Open-closed Principle&lt;/li&gt;
&lt;li&gt;L - Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;I - Interface Segregation Principle&lt;/li&gt;
&lt;li&gt;D - Dependency Inversion Principle&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#step-7%C2%A0caching"&gt;
  &lt;/a&gt;
  Step 7: Caching
&lt;/h4&gt;

&lt;p&gt;A cache is a high-speed, in-memory data storage layer to store data for faster access in the future. It's a means to improve the overall system performance. Caching is important in any system that needs to scale. &lt;/p&gt;

&lt;p&gt;We basically cache the data that is frequently used. Doing this will result in applications taking lesser time compared to accessing the data from a database every time.&lt;/p&gt;

&lt;p&gt;In our Instagram example, we can cache the metadata of photos like created_by, location, created_at, etc since these parameters are never going to change for a given photo. Other parameters like comments, likes, etc cannot be cached since they are changing frequently.&lt;/p&gt;

&lt;p&gt;The moment we start using cache in our design we also need to think about the eviction policies. Since caches are costlier than database storage we have to keep a check on the amount of data we store in a cache. So cache eviction becomes important.&lt;/p&gt;

&lt;p&gt;There are many eviction policies like LRU (Least Recently Used), FIFO (First In First Out), LFU (Least Frequently Used), etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-8-data-partitioningsharding"&gt;
  &lt;/a&gt;
  Step 8: Data Partitioning/Sharding
&lt;/h4&gt;

&lt;p&gt;Often times it happens that all the data in our application cannot be stored on a single database server. In cases like these, we need to come up with strategies to store the data on multiple database servers.&lt;/p&gt;

&lt;p&gt;Here we basically split the large set of data into multiple chunks (logical partitions) and we store these chunks on multiple nodes.&lt;/p&gt;

&lt;p&gt;Sharding is a good technique to scale a growing application.&lt;/p&gt;

&lt;p&gt;There are many techniques to partition data:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Range based partitioning&lt;/li&gt;
&lt;li&gt;Hash-based partitioning&lt;/li&gt;
&lt;li&gt;Directory-based partitioning&lt;/li&gt;
&lt;li&gt;Vertical partitioning etc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should read about these in order to understand which partitioning schemes are suitable in which scenarios.&lt;/p&gt;

&lt;p&gt;This 8 steps approach gives you a framework to approach any system design question. But remember that the interviewer may be interested in any one of these steps in which case you should be able to focus only on that step and figure out the details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-tips"&gt;
  &lt;/a&gt;
  More Tips:
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#system-before%C2%A0scale"&gt;
  &lt;/a&gt;
  System before scale
&lt;/h4&gt;

&lt;p&gt;Many candidates try to focus on building a scalable system before even they have a design for a working system. Focus on building the system first and then think about scaling it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#start-highlevel-and-then-drill%C2%A0down"&gt;
  &lt;/a&gt;
  Start High-level and then drill down
&lt;/h4&gt;

&lt;p&gt;Start with writing down the high-level components we need for the system we are building. Then drill down on any of the lower-level components the interviewer suggests. &lt;/p&gt;

&lt;p&gt;This keeps your mind clear and helps you design a better system during the interview.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mention-all-the-assumptions-youre%C2%A0making"&gt;
  &lt;/a&gt;
  Mention all the assumptions you're making
&lt;/h4&gt;

&lt;p&gt;You should mention all the assumptions you're making during the interview. It's important that you and the interviewer are on the same page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consider-both-function-and-nonfunctional-requirements"&gt;
  &lt;/a&gt;
  Consider both function and non-functional requirements
&lt;/h4&gt;

&lt;p&gt;Keep both functional and non-functional requirements in mind when designing the system.&lt;/p&gt;

&lt;p&gt;Sometimes it becomes difficult to support non-functional requirements like consistency, availability, data durability, etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#core-algorithm"&gt;
  &lt;/a&gt;
  Core Algorithm
&lt;/h4&gt;

&lt;p&gt;Some systems need a core algorithm to be implemented for the system to work. For example, if you want to designs a TinyURL-like system, you need to come up with an algorithm to generate the tiny URLs for a given long URL.&lt;/p&gt;

&lt;p&gt;Not many system design questions need a complex algorithm to be implemented.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#design-for-the-right%C2%A0scale"&gt;
  &lt;/a&gt;
  Design for the right scale
&lt;/h4&gt;

&lt;p&gt;The same system can be designed in completely different ways based on the scale needed. So, clarify the scale you're designing the system for at the beginning of the discussion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recommended-courses-to-prepare-for-system-design-interviews"&gt;
  &lt;/a&gt;
  Recommended Courses To Prepare For System Design Interviews:
&lt;/h3&gt;

&lt;p&gt;Here are the best courses that I recommend for preparing for System Design interviews:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/grokking-the-system-design-interview?aff=xmn2"&gt;Grokking the System Design Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/grokking-the-object-oriented-design-interview?aff=xmn2"&gt;Grokking the Object Oriented Design Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCn1XnDWhsLS5URXTi5wtFTA"&gt;Tech Dummies Narendra L&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLMCXHnjXnTnvo6alSjVkgxV-VH6EPyvoX"&gt;System Design by Gaurav Sen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLAC2AM9O1C5KioUMeH9qIjbAV_RMmX8rd"&gt;Low Level Design | The Code Mate&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Think of the System Design interview as an open-ended discussion with your colleague.&lt;/li&gt;
&lt;li&gt;You cannot possibly come up with the best possible solution for a system in the given 1–1.5 hours.&lt;/li&gt;
&lt;li&gt;Clarify all the requirements and set the scope for the discussion.&lt;/li&gt;
&lt;li&gt;Make sure you and the interviewer are on the same page throughout the discussion.&lt;/li&gt;
&lt;li&gt;Learn how to estimate the data capacity required in the next 5–10 years and design the system for the capacity expected.&lt;/li&gt;
&lt;li&gt;Mention all the assumptions you are making during the interview.&lt;/li&gt;
&lt;li&gt;Given a problem statement, try to think of all the high-level components (services, databases, caches, message queues, etc) first. Then figure out the lower-level details of the system.&lt;/li&gt;
&lt;li&gt;It is important to learn how to design classes, databases, and APIs.&lt;/li&gt;
&lt;li&gt;It's is important to learn Object-Oriented and SOLID principles for low-level design interviews.&lt;/li&gt;
&lt;li&gt;The interviewer wants to know how you approach a given problem and the thought process behind it. As long as you are able to justify why a component is designed in a certain way, you're good.&lt;/li&gt;
&lt;li&gt;Practice solving system design problems. That's the only way to do well in this round.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;The article was originally published on my blog. You can find it &lt;a href="https://sunilkumarc.in/8-steps-guide-to-ace-a-system-design-interview"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can connect with me on &lt;a href="https://twitter.com/sunilc_"&gt;twitter&lt;/a&gt; where I usually share my knowledge more frequently on topics like Software Development, freelancing, creating multiple passive income streams etc.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>systems</category>
      <category>architecture</category>
      <category>cloud</category>
    </item>
    <item>
      <title>How to participate and contribute to  HacktoberFest ?</title>
      <author>Avinash Singh</author>
      <pubDate>Sun, 17 Oct 2021 17:55:55 +0000</pubDate>
      <link>https://dev.to/avinash201199/how-to-participate-and-contribute-to-hacktoberfest--3b7n</link>
      <guid>https://dev.to/avinash201199/how-to-participate-and-contribute-to-hacktoberfest--3b7n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-hacktoberfest-"&gt;
  &lt;/a&gt;
  What is Hacktoberfest ?
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Hacktoberfest encourages participation in the open source community, which grows bigger every year. Complete the 2021 challenge and earn a limited edition T-shirt.  &lt;/p&gt;

&lt;p&gt;Hacktoberfest, in its 8th year, is a month-long celebration of open source software run by &lt;a href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt;. During the month of October, we invite you to join open-source software enthusiasts, beginners, and the developer community by contributing to open-source projects. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hlbC0DKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/40369168/135885122-0931eeb0-ef6c-4ac7-9842-9d555c58a467.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hlbC0DKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/40369168/135885122-0931eeb0-ef6c-4ac7-9842-9d555c58a467.png" alt="Hacktoberfest_Wallpaper_desktop-02"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can do this in a variety of ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prepare and share your project for collaboration&lt;/li&gt;
&lt;li&gt;Contribute to the betterment of a project via pull requests&lt;/li&gt;
&lt;li&gt;Organize an event&lt;/li&gt;
&lt;li&gt;Mentor others&lt;/li&gt;
&lt;li&gt;Donate directly to open source projects&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;[ ] GitHub profile&lt;/li&gt;
&lt;li&gt;[ ] Coder/Developer's mindset&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#steps-to-perform"&gt;
  &lt;/a&gt;
  Steps to perform
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#registeration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Registeration&lt;/strong&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;The very first thing is to login into your github profile in your browser.&lt;/li&gt;
&lt;li&gt;Navigate to the &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktober Fest 2021&lt;/a&gt; url.&lt;/li&gt;
&lt;li&gt;Click on Start Hacking button.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sign Up with your &lt;a href="https://github.com/avinash201199"&gt;github&lt;/a&gt; profile. (You may also use your gitlab profile)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here marks the ending of registeration part in Hacktobert Fest 2021.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#uploading-your-project-in-github-account-as-a-maintainer"&gt;
  &lt;/a&gt;
  Uploading your project in GitHub account as a Maintainer
&lt;/h3&gt;

&lt;p&gt;1.Click on the + button in the top-right corner of your account.&lt;br&gt;
2.Enter the repository name as your project name.&lt;br&gt;
3.Click on Add File button &amp;amp; select Upload existing file from the dropdown.&lt;br&gt;
4.Drag &amp;amp; Drop the directory into the space or else Browse through the computer to upload the full directory.&lt;br&gt;
5.Click on the commit changes button to upload &amp;amp; save the repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: Make sure you've uploaded README.MD file for the attractive look of your repository.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-find-a-repository-to-contribute-to-hacktoberfest-as-a-participant"&gt;
  &lt;/a&gt;
  How to find a repository to contribute to Hacktoberfest as a participant?
&lt;/h3&gt;

&lt;p&gt;1.Go to the search bar of GitHub.&lt;br&gt;
2.Search for hacktoberfest2021.&lt;br&gt;
3.Chose any one of them.&lt;br&gt;
4.You can also find the repository to contribute from their official Discord channel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-raise-an-issue-before-raising-a-pull-request"&gt;
  &lt;/a&gt;
  How to raise an issue before raising a Pull request?
&lt;/h3&gt;

&lt;p&gt;The question should be why to raise an issue before PR. The answer is simple - Maybe your idea/code has been contributed by other fellow developers already. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The maintainer doesn't want a particular type of code/project in his repo. So, he can deny the Pull Request.&lt;/p&gt;

&lt;p&gt;1.Click on the issue tab.&lt;br&gt;
2.Then click on the new issue button.&lt;br&gt;
3.Give the heading to the issue and then add the description about what you will gonna contribute.&lt;br&gt;
4.Click on the raise issue button at the bottom.&lt;br&gt;
5.The moderator/Maintainer will review the issue/idea for the project and will assign it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-a-pull-request-from-a-fork-in-github"&gt;
  &lt;/a&gt;
  How to Create a Pull Request from a Fork in GitHub?
&lt;/h3&gt;

&lt;p&gt;Once you’ve made changes to your forked repository, you can suggest pushing them into the original repository using the following steps:&lt;/p&gt;

&lt;p&gt;1.Open the main page of the original repository that you created a fork for.&lt;br&gt;
2.Navigate to the Pull requests tab above the files displayed.&lt;br&gt;
3.Now, click on compare across forks on the page that appears.&lt;br&gt;
4.Using the respective drop-down menus, select the &lt;em&gt;base repository&lt;/em&gt; and &lt;em&gt;base branch&lt;/em&gt; to select the destination repo and branch you want the changes to be merged to.&lt;br&gt;
5.Also, select the forked repo using the &lt;em&gt;head repository&lt;/em&gt; drop-down menu and the correct branch with the suggested changes using the &lt;em&gt;compare branch&lt;/em&gt; drop-down.&lt;br&gt;
6.Click on &lt;code&gt;Create pull request&lt;/code&gt; and give your pull request an apt title and description. Now, your changes are ready to be reviewed and approved by Maintainer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-track-your-progress-in-hacktoberfest"&gt;
  &lt;/a&gt;
  How to track your progress in HacktoberFest?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Log in to the official HacktoberFest site.&lt;/li&gt;
&lt;li&gt;Click on start hacking.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVtrVHZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcxhnex60r3js1pqscv3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVtrVHZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcxhnex60r3js1pqscv3.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your profile will be loaded like this with progress details&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4MNMmRV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr6entht0l564jfjuzt7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4MNMmRV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr6entht0l564jfjuzt7.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To see the details of the pull request you have contributed, scroll down to see.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0w6MUrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/016bcst759v8v505qky8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0w6MUrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/016bcst759v8v505qky8.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once your 4 pull request are verified and accepted,you will see message like this.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3nQi74Ts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38hgvqor516245djlg1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3nQi74Ts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38hgvqor516245djlg1c.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Check my &lt;a href="https://github.com/avinash201199"&gt;Github&lt;/a&gt; repository to contribute as a beginner.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect with me on &lt;a href="https://www.linkedin.com/in/avinash-singh-071b79175/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading! &lt;/p&gt;

&lt;p&gt;Don't forget to like the post :)&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>github</category>
    </item>
    <item>
      <title>How I automated publishing my personal blog posts to dev.to</title>
      <author>Nico Riedmann</author>
      <pubDate>Sun, 17 Oct 2021 17:51:50 +0000</pubDate>
      <link>https://dev.to/unseenwizzard/how-i-automated-publishing-my-personal-blog-posts-to-devto-23l8</link>
      <guid>https://dev.to/unseenwizzard/how-i-automated-publishing-my-personal-blog-posts-to-devto-23l8</guid>
      <description>&lt;p&gt;I've recently decided to start writing again.&lt;/p&gt;

&lt;p&gt;And like most engineers I've immediately got down to... updating my website to&lt;br&gt;
contain a blog, and automating things like posting to other sites like dev.to.&lt;/p&gt;

&lt;p&gt;So to at least get &lt;em&gt;some&lt;/em&gt; writing done and share a bit of my workflow, here's&lt;br&gt;
how I've automated posting to dev.to using Github Actions.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-idea"&gt;
  &lt;/a&gt;
  The Idea
&lt;/h1&gt;

&lt;p&gt;My personal website is setup as a &lt;a href="https://pages.github.com/"&gt;GitHub Page&lt;/a&gt; which allows&lt;br&gt;
me to focus on content by turning text checked in to a GitHub repo&lt;br&gt;
into a static website using &lt;a href="https://jekyllrb.com/"&gt;jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Given that my blogposts are already written in markdown and dev.to offers an API that accepts&lt;br&gt;
markdown, publishing new posts to my personal website as well as dev.to seems easy.&lt;/p&gt;

&lt;p&gt;Simply take any new blog posts pushed to the GitHub repo, and send them to the dev.to API in addition to rendering my&lt;br&gt;
website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GqI2D1UB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://riedmann.dev/img/blog-automation/blog_automation_overview.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GqI2D1UB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://riedmann.dev/img/blog-automation/blog_automation_overview.svg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;image created with &lt;a href="//excalidraw.com"&gt;Excalidraw&lt;/a&gt; and the &lt;a href="https://libraries.excalidraw.com/?target=_excalidraw&amp;amp;referrer=https%3A%2F%2Fexcalidraw.com%2F&amp;amp;useHash=true&amp;amp;t%5Boken=WP8NRfaPj79aLbcdlm8CN&amp;amp;theme=light&amp;amp;sort=default#markopolo123-dev_ops"&gt;Dev Ops Icons&lt;/a&gt; library by &lt;a href="https://www.marksharpley.co.uk/"&gt;Mark Sharpley&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And because it seems so easy and I like things simple I've decided to make this work on my own using just Unix tools, git and curl instead of using an existing &lt;a href="https://github.com/features/actions"&gt;GitHub Action&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#finding-new-blog-posts"&gt;
  &lt;/a&gt;
  Finding new Blog Posts
&lt;/h1&gt;

&lt;p&gt;For the initial version of this I'm only interested in finding newly added blog posts on the main&lt;br&gt;
branch of my GitHub repo.&lt;/p&gt;

&lt;p&gt;Let's say the latest commit on the main branch was &lt;code&gt;aaaaaaa&lt;/code&gt; and I've just added two new posts and modified an old one in &lt;code&gt;bbbbbbb&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#just-a-raw-git-diff-endraw-"&gt;
  &lt;/a&gt;
  Just a &lt;code&gt;git diff&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;A simple &lt;code&gt;git diff aaaaaaa bbbbbbb&lt;/code&gt; will show us the changes the between these two commits.&lt;/p&gt;

&lt;p&gt;But that's way to much, because all we care about are the type of modification and filename.&lt;/p&gt;

&lt;p&gt;Which &lt;code&gt;diff&lt;/code&gt; can luckily give us with a flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git diff &lt;span class="nt"&gt;--name-status&lt;/span&gt; aaaaaaa bbbbbbb
M  _posts/2019-06-02-modified.md
A  _posts/2021-09-30-added.md
A  _posts/2021-10-17-added.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! One &lt;strong&gt;M&lt;/strong&gt;odified file and two &lt;strong&gt;A&lt;/strong&gt;dded files in &lt;code&gt;_posts/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But we still need to get this down to just the paths to new posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-sed-endraw-to-the-rescue"&gt;
  &lt;/a&gt;
  &lt;code&gt;sed&lt;/code&gt; to the Rescue
&lt;/h2&gt;

&lt;p&gt;To filter this down to just the filepaths of added posts, we'll use one of the more daunting Unix tools, the stream editor &lt;a href="https://www.gnu.org/software/sed/manual/sed.html"&gt;sed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We'll use it with a simple regex to transform the output of &lt;code&gt;git diff&lt;/code&gt; into a list of newly added blog posts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;'s/A\s*\(_posts\/.*.md\)/\1/p'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple right? Let's quickly run through that line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-n&lt;/code&gt; tells &lt;code&gt;sed&lt;/code&gt; to be 'silent'.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sed&lt;/code&gt; operates per line, reading a line, performing operations and then printing/returning the edited line - unless told to be silent, which makes it print nothing unless told otherwise.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;p&lt;/code&gt; at the end of our commands tells it to print when the pattern was matched.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-e&lt;/code&gt; simply tells &lt;code&gt;sed&lt;/code&gt; explicitly that the next part is a command. We could omit this.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;s&lt;/strong&gt;ubstitution command that follows is the interesting part. It follows this format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;s/[pattern to replace]/[what to replace it with]/[options]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dissect how ours turns the input into just outputting the paths to any added files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;s/A\s*\(_posts\/.*.md\)/\1/p`

&amp;gt; s/

Substitution command

&amp;gt; A\s*\(_posts\/.*.md\)

A         - lines starting with 'A'
\s*       - followed by zero or more whitespaces
_posts\/  - followed by '_posts/'
.*        - followed by zero or more characters
.md       - ending in .md
\(...\)   - captures what is between the braces to use again later

&amp;gt; \1

Simply references the content of the first capture group - the content of the braces above, which is our filepath.

&amp;gt; /p

Print the output of the substitution command.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Putting &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; together with a pipe (&lt;code&gt;|&lt;/code&gt;), we get what we need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git diff &lt;span class="nt"&gt;--name-status&lt;/span&gt; aaaaaaa bbbbbbb | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;'s/A\s*\(_posts\/.*.md\)/\1/p'&lt;/span&gt;
_posts/2021-09-30-added.md
_posts/2021-10-17-added.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#posting-to-devto"&gt;
  &lt;/a&gt;
  Posting to dev.to
&lt;/h1&gt;

&lt;p&gt;Now that we have the markdown files of new posts, it's time to send them to dev.to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forem-api"&gt;
  &lt;/a&gt;
  Forem API
&lt;/h2&gt;

&lt;p&gt;dev.to uses &lt;a href="https://www.forem.com/"&gt;forem&lt;/a&gt; which offers a straight forward &lt;a href="https://developers.forem.com/api#operation/createArticle"&gt;articles API&lt;/a&gt; that accepts markdown with typical frontmatter directly.&lt;/p&gt;

&lt;p&gt;So in theory we can POST the contents of our markdown files straight to dev.to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wiremock-for-testing-api-integrations"&gt;
  &lt;/a&gt;
  Wiremock for testing API integrations
&lt;/h3&gt;

&lt;p&gt;To test this - or any API - locally, &lt;a href="//wiremock.org."&gt;wiremock&lt;/a&gt; is a great tool.&lt;/p&gt;

&lt;p&gt;In standalone mode it can be run as a jar directly or using the &lt;a href="https://hub.docker.com/r/wiremock/wiremock/"&gt;docker container&lt;/a&gt;, and be configured using JSON to offer the endpoints you need and return what you want for testing.&lt;/p&gt;

&lt;p&gt;To test the basics of integrating with the forem API we'll do the following:&lt;/p&gt;

&lt;p&gt;Start the wiremock docker container in &lt;strong&gt;v&lt;/strong&gt;erbose mode, mapping it's default &lt;code&gt;8080&lt;/code&gt; port to the same port on our system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 8080:8080 wiremock/wiremock:latest &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then define a simple version of the articles API by sending it to the wiremock instance.&lt;/p&gt;

&lt;p&gt;For this we use &lt;code&gt;curl&lt;/code&gt; to call wiremock's API with JSON &lt;strong&gt;d&lt;/strong&gt;ata modelling the API endpoint we want to mock:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl localhost:8080/__admin/mappings/new &lt;span class="nt"&gt;-d&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;'{
    "request": {
        "method": "POST",
        "url": "/api/articles"
    },
    "response": {
        "status": 200
    }
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;localhost:8080/api/articles&lt;/code&gt; will accept POST requests and always return a HTTP 200 response.&lt;/p&gt;

&lt;p&gt;Not really realistic, but a good start for testing, and seeing what payload arrives at the API, thanks to wiremock printing all calls it receives in verbose mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#posting-blog-posts"&gt;
  &lt;/a&gt;
  POSTing Blog Posts
&lt;/h2&gt;

&lt;p&gt;To try out the local mock API we can send it a test payload:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl localhost:8080/api/articles &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{"article": { "published": false, "body_markdown": "--- \n layout: post \n title: An automation test\n subtitle: a test subtitle\n---\n\n# Test content\n"} }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will POST an &lt;code&gt;article&lt;/code&gt; object - which could be completely defined with just it's &lt;code&gt;body_markdown&lt;/code&gt; as that already contains required information like the title, etc. in it's frontmatter.&lt;/p&gt;

&lt;p&gt;But as I want to be able to give posts a final look, the payload also includes &lt;code&gt;"published": false&lt;/code&gt; so posts will be created as a draft that can be published manually.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#-raw-git-endraw-raw-sed-endraw-raw-curl-endraw-raw-profit-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;git&lt;/code&gt; + &lt;code&gt;sed&lt;/code&gt; + &lt;code&gt;curl&lt;/code&gt; = &lt;code&gt;profit&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Time to put it all together, which I've done in a simple shell script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$URL&lt;/span&gt;
&lt;span class="nv"&gt;api_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$API_KEY&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Detecting files added between commits &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;..."&lt;/span&gt;

&lt;span class="nv"&gt;new_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;git diff &lt;span class="nt"&gt;--name-status&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;'s/A\s*\(_posts\/.*.md\)/\1/p'&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="k"&gt;for &lt;/span&gt;f &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$new_files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Creating dev.to article for &lt;/span&gt;&lt;span class="nv"&gt;$f&lt;/span&gt;&lt;span class="s2"&gt;..."&lt;/span&gt;

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"article": { "published": false, "body_markdown": "'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; api_payload
    &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;':a;N;$!ba;s/\n/\\n/g'&lt;/span&gt; &lt;span class="nv"&gt;$f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; api_payload
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'" }}'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; api_payload

    curl &lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"api-key: &lt;/span&gt;&lt;span class="nv"&gt;$api_key&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;-d&lt;/span&gt; @api_payload &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nt"&gt;-v&lt;/span&gt;

    &lt;span class="nb"&gt;rm &lt;/span&gt;api_payload
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a few more steps than just &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;curl&lt;/code&gt; in there, so let's quickly run through them.&lt;/p&gt;

&lt;p&gt;The scripts will get the &lt;code&gt;URL&lt;/code&gt; and dev.to &lt;code&gt;API_KEY&lt;/code&gt; from environment variables, so they can be passed in from a GitHub Action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$URL&lt;/span&gt;
&lt;span class="nv"&gt;api_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$API_KEY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then it will find any &lt;code&gt;new_files&lt;/code&gt; between two commits that are passed in as first and second input arguments (&lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt;), and then post the content to the given &lt;code&gt;URL&lt;/code&gt; for each of the &lt;code&gt;new_files&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;new_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;git diff &lt;span class="nt"&gt;--name-status&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;'s/A\s*\(_posts\/.*.md\)/\1/p'&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="k"&gt;for &lt;/span&gt;f &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$new_files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The body of the HTTP POST is placed in a temporary &lt;code&gt;api_payload&lt;/code&gt; file - but could also be built in place, or one long command piping into &lt;code&gt;curl&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'{"article": { "published": false, "body_markdown": "'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; api_payload
&lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;':a;N;$!ba;s/\(["\\]\)/\\\1/g;s/\n/\\n/g;s/\t/  /g'&lt;/span&gt; &lt;span class="nv"&gt;$f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; api_payload
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s1"&gt;'" }}'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; api_payload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only really interesting part of creating the payload is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;':a;N;$!ba;s/\(["\\]\)/\\\1/g;s/\n/\\n/g;s/\t/  /g'&lt;/span&gt; &lt;span class="nv"&gt;$f&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; api_payload&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;sed&lt;/code&gt; is used here to escape or replace special characters in the JSON payload.&lt;/p&gt;

&lt;p&gt;Double quotes and backslashes will be escaped with a backslash by the first substitution.&lt;/p&gt;

&lt;p&gt;The second substitution will replace newline in the markdown file with an escaped newline &lt;code&gt;\\n&lt;/code&gt;, so that the payload will actually contain &lt;code&gt;\n&lt;/code&gt; characters for each line break. Without this the API call would swallow all newlines and the blog post on dev.to would miss all linebreaks.&lt;/p&gt;

&lt;p&gt;The third substitution replaces tabs with two spaces rather than escaping them.&lt;/p&gt;

&lt;p&gt;How exactly that &lt;code&gt;sed&lt;/code&gt; expression replaces characters in the whole file is nicely described in &lt;a href="https://stackoverflow.com/a/1252191"&gt;this stakeoverflow post&lt;/a&gt;, so I will not repeat it here.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl&lt;/code&gt; simply sends the json content of the temporary &lt;code&gt;api_payload&lt;/code&gt; file to the given &lt;code&gt;URL&lt;/code&gt; using the &lt;code&gt;API_KEY&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"api-key: &lt;/span&gt;&lt;span class="nv"&gt;$api_key&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-d&lt;/span&gt; @api_payload &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#github-action"&gt;
  &lt;/a&gt;
  GitHub Action
&lt;/h2&gt;

&lt;p&gt;Now to have this script run whenever I add a new blog post to my website repo, we're still missing a GitHub action that calls it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post-to-dev-to&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;_posts/**"&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;post-to-dev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.github/workflows/dev-post.sh ${{ github.event.before}} ${{github.event.after}}&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://dev.to/api/articles&lt;/span&gt;
          &lt;span class="na"&gt;API_KEY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DEV_TO_KEY }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because posting to dev.to should only happen for new posts I've pushed to the main branch of the repo, the Action is configured to only trigger if the &lt;code&gt;_posts/&lt;/code&gt; folder changes after a push to &lt;code&gt;master&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;_posts/**"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then the Action executes one job on an Ubuntu container, in which it first makes sure the repo is checked out, and then executes our script from above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;post-to-dev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.github/workflows/dev-post.sh ${{ github.event.before}} ${{github.event.after}}&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://dev.to/api/articles&lt;/span&gt;
          &lt;span class="na"&gt;API_KEY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DEV_TO_KEY }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To execute the script is uses information from the &lt;code&gt;github.event&lt;/code&gt; that triggered the Action to get the latest commit &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; the push happened.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h1&gt;

&lt;p&gt;You're hopefully reading this on dev.to, proving this first part of blog automation has worked.&lt;/p&gt;

&lt;p&gt;If this is actually interesting to anyone I'll continue the series with a write-up on how I use markdown and GitHub actions to also create and publish slide-decks.&lt;/p&gt;

&lt;p&gt;Else I'll just continue my personal mission of only ever having to write markdown and wasting time on automation quietly and go back to writing about other things.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Create a Bottom Sheet in React Native</title>
      <author>Francisco Mendes</author>
      <pubDate>Sun, 17 Oct 2021 17:48:10 +0000</pubDate>
      <link>https://dev.to/franciscomendes10866/how-to-create-a-bottom-sheet-in-react-native-3n4d</link>
      <guid>https://dev.to/franciscomendes10866/how-to-create-a-bottom-sheet-in-react-native-3n4d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Nowadays we have a great diversity of components that are always necessary to create a web page or a mobile application and I believe that in almost all the applications we always end up having a Bottom Sheet.&lt;/p&gt;

&lt;p&gt;This component has several use cases, from filling in forms, to performing an action such as creating, editing or deleting. However, it can also be used to show something in detail or when you want to introduce something on a screen but have no context for it, such as sending feedback or contacting support.&lt;/p&gt;

&lt;p&gt;Now comes a dilemma, there are several ways to implement it, the same way that you can do everything by yourself, you can also use a dependency. I think that doing everything by hand, apart from taking much longer to implement, can also cause other problems. And on the other hand, sometimes when using a dependency we are stuck with certain limitations, the most famous ones are its stylization.&lt;/p&gt;

&lt;p&gt;So in this example we will use two dependencies, one will be to create a portal (a very famous approach when working with modals) and the other will be a dependency to create hugely customizable modals.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;p&gt;Let's install the following dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @gorhom/portal react-native-modalize react-native-gesture-handler
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First let's create our component, which in this case will be the Bottom Sheet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/components/BottomSheet.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BottomSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BottomSheet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's import the Portal and Modalize into our component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/components/BottomSheet.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Portal&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@gorhom/portal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Modalize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-modalize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BottomSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Portal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Modalize&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Modalize&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Portal&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BottomSheet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will need to pass two attributes to our Modalize, the first will be the ref (which we will receive through the component's props) and the second will be the height of the modal.&lt;/p&gt;

&lt;p&gt;To define the height of the modal we will import the Dimensions from React Native and we will create a variable called modalHeight which will be half the height of the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/components/BottomSheet.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Dimensions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Portal&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@gorhom/portal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Modalize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-modalize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Dimensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;screen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modalHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BottomSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;modalRef&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Portal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Modalize&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;modalRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;modalHeight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;modalHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Modalize&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Portal&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BottomSheet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we will start working on the content that we will have on the Bottom Sheet, in this case we will use a View as a wrapper of our content, then we will use a Text to have a small message and finally we will have a Button to close the Bottom Sheet.&lt;/p&gt;

&lt;p&gt;To close the modal we will use a function that will be passed as the component's prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/components/BottomSheet.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Dimensions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Portal&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@gorhom/portal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Modalize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native-modalize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Dimensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;screen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modalHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BottomSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;modalRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onClose&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Portal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Modalize&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;modalRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;modalHeight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;modalHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Close Modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#F0F5F9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClose&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Modalize&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Portal&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BottomSheet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;space-between&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;modalHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;paddingHorizontal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;paddingVertical&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#52616B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;600&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;letterSpacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.02&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignSelf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#C9D6DF&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now on our App.js let's start by importing the PortalProvider which will be the root component of our application. Then we will import from React the useRef hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PortalProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@gorhom/portal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PortalProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PortalProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First let's create our modalRef and we'll create two functions, one to open the modal and the other to close it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PortalProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@gorhom/portal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modalRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;modalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;modalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PortalProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PortalProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can import our Bottom Sheet component and we can pass it the necessary props. But before that, let's import from React Native the View component that will be the wrapper of the screen content and the Button that will be responsible for opening the BottomSheet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PortalProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@gorhom/portal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BottomSheet&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/BottomSheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modalRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;modalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;modalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PortalProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BottomSheet&lt;/span&gt; &lt;span class="nx"&gt;modalRef&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;modalRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClose&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Open Modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#1E2022&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onOpen&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PortalProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#C9D6DF&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As always, I hope you found it interesting. If you noticed any errors in this article, please mention them in the comments. 🧑🏻‍💻&lt;/p&gt;

&lt;p&gt;Hope you have a great day! 🙌&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>mobile</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>DOM (Document object model)</title>
      <author>Rakshit Nayak</author>
      <pubDate>Sun, 17 Oct 2021 17:28:38 +0000</pubDate>
      <link>https://dev.to/rakshitnayak/dom-document-object-model-4dmp</link>
      <guid>https://dev.to/rakshitnayak/dom-document-object-model-4dmp</guid>
      <description>&lt;p&gt;Hello 🙋‍♂️,in this article we will talk about &lt;strong&gt;DOM&lt;/strong&gt; in less than 500 words&lt;/p&gt;

&lt;p&gt;DOM(Document Object Model) is a software interface for HTML, XML and SVG documents. It provides a structured view of the document(tree) as a group of nodes and objects that have properties and methods, and defines the way in which the structure can be accessed by the program.&lt;br&gt;
DOM binds web pages to scripts or programming languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIfJ_60l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewcikyduk50wdyxbshp4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIfJ_60l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewcikyduk50wdyxbshp4.gif" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The basis of an HTML document is tags.&lt;br&gt;
According to the DOM, an HTML tag is an object and nested tags are its "children".&lt;br&gt;
All objects are available with JavaScript, we can use them to modify the page.&lt;br&gt;
For example, &lt;code&gt;document.body&lt;/code&gt; is an object for the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dom-example"&gt;
  &lt;/a&gt;
  DOM EXAMPLE
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8t2gI8jh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shktjienlnm7su9vu13t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8t2gI8jh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shktjienlnm7su9vu13t.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is a view of an HTML document as a tag tree:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--icjJgjj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuv28ony3gmw33th8s3t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icjJgjj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuv28ony3gmw33th8s3t.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tags are node elements(elements). They form the structure of the tree: &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; is the root node, &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; its child nodes, etc. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Text&lt;/strong&gt; inside the elements forms &lt;strong&gt;text nodes&lt;/strong&gt; named #text. The text node contains only a string of text. It cannot have descendants (it is always at the lowest level).&lt;br&gt;
Spaces and line breaks are also symbols. Like letters and numbers, they form text nodes and become part of the DOM tree.&lt;/p&gt;

&lt;p&gt;Here you can see &lt;a href="http://software.hixie.ch/utilities/js/live-dom-viewer/#"&gt;Dom in real time&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>dom</category>
      <category>html</category>
      <category>websites</category>
    </item>
    <item>
      <title>Cloud Functions with Dart and Appwrite</title>
      <author>Nehansh Jain</author>
      <pubDate>Sun, 17 Oct 2021 17:01:50 +0000</pubDate>
      <link>https://dev.to/nehanshj/cloud-functions-with-dart-and-appwrite-2nob</link>
      <guid>https://dev.to/nehanshj/cloud-functions-with-dart-and-appwrite-2nob</guid>
      <description>&lt;p&gt;Being a Flutter Developer it becomes hard to use cloud functions as they need to be written in Javascript/Node.js. Appwrite came as a surprise to me.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#what-is-appwrite"&gt;
  &lt;/a&gt;
  What is Appwrite?
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://appwrite.io"&gt;Appwrite&lt;/a&gt; is an open-source, self-hosted Backend-as-a-Service that makes app development easier with a suite of SDKs and APIs to accelerate app development.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#where-is-stands-against-firebase"&gt;
  &lt;/a&gt;
  Where is stands against Firebase?
&lt;/h4&gt;

&lt;p&gt;It is the go-to open-source alternative to Firebase. It gives you all what Firebase has to offer including Cloud Functions. That brings us to our topic of discussion.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-cloud-functions"&gt;
  &lt;/a&gt;
  What are Cloud Functions?
&lt;/h4&gt;

&lt;p&gt;As per &lt;a href="https://cloud.google.com/functions/docs/concepts/overview"&gt;Google&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cloud Functions lets you write simple, single-purpose functions that are attached to events emitted from your cloud infrastructure and services. Your function is triggered when an event being watched is fired. Your code executes in a fully managed environment. There is no need to provision any infrastructure or worry about managing any servers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;But most platforms don't allow to write functions in dart or need to be trans compiled to JavaScript&lt;/strong&gt; making it a tedious process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Appwrite comes to our Rescue. It provides Dart runtime upto Dart v2.13&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Appwrite can  also execute our custom code in response to any Appwrite system event like account creation, user login, or document update.&lt;/p&gt;

&lt;p&gt;So, let's first install Appwrite on our Systems.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#docker-installation"&gt;
  &lt;/a&gt;
  Docker Installation
&lt;/h5&gt;

&lt;p&gt;You can download the executable file to install Docker for Windows from &lt;a href="https://docs.docker.com/desktop/windows/install/"&gt;here&lt;/a&gt; and follow the easy steps. After Successfull installation you'll be left with a screen like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D16F8tt5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnj4mhzv7hm24lwykr4y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D16F8tt5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnj4mhzv7hm24lwykr4y.png" alt="Docker Installed"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#appwrite-installation"&gt;
  &lt;/a&gt;
  Appwrite &lt;a href="https://appwrite.io/docs/installation"&gt;Installation&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;Just choose a directory to be the root of your appwrite installation. and run the following command on PowerShell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -it --rm ,
    --volume /var/run/docker.sock:/var/run/docker.sock ,
    --volume ${pwd}/appwrite:/usr/src/code/appwrite:rw ,
    --entrypoint="install" ,
    appwrite/appwrite:0.10.4

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#enabling-dart-environment"&gt;
  &lt;/a&gt;
  Enabling Dart Environment
&lt;/h6&gt;

&lt;p&gt;In the Appwrite installation folder look for .env file. Within the file add &lt;code&gt;dart-2.12&lt;/code&gt; to the comma seperated list in the environment variable &lt;code&gt;_APP_FUNCTIONS_ENVS&lt;/code&gt; and &lt;code&gt;_APP_FUNCTIONS_RUNTIMES&lt;/code&gt;. This enables Dart runtime environment for Appwrite Cloud Functions.&lt;/p&gt;

&lt;p&gt;In the root directory of Appwrite where you have your &lt;code&gt;docker-compose.yml&lt;/code&gt; run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that on opening Docker you'd be able to see Appwrite Instance running.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vd77fEUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by1if1uhovb8nneuyrqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vd77fEUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by1if1uhovb8nneuyrqk.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To check if everything is ok you can try running &lt;code&gt;docker exec appwrite doctor&lt;/code&gt; which will give you a similar output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQMCy00L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnf81hfd74vdicugylsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQMCy00L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnf81hfd74vdicugylsy.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to your defined host address and you'll be able to see the appwrite console. You'll need to create a new User to access the console. The Landing page after signing in would look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgA0eMxJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ylh51zyp7ddic00wjk1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgA0eMxJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ylh51zyp7ddic00wjk1.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#project-creation"&gt;
  &lt;/a&gt;
  Project Creation
&lt;/h4&gt;

&lt;p&gt;Create a new folder  with &lt;code&gt;main.dart&lt;/code&gt; and &lt;code&gt;pubspec.yaml&lt;/code&gt;, or you can copy from Appwrite Demos Function &lt;a href="https://github.com/appwrite/demos-for-functions/tree/master/dart/"&gt;Repository&lt;/a&gt;.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#adding-dependency"&gt;
  &lt;/a&gt;
  Adding Dependency
&lt;/h6&gt;

&lt;p&gt;We need to install the dart_appwrite package present on &lt;a href="https://pub.dev/packages/dart_appwrite"&gt;pub.dev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;open your &lt;code&gt;pubspec.yaml&lt;/code&gt; file and make sure it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: project_name
version: 1.0.0 
description: ""

environment:
  sdk: "&amp;gt;=2.12.0 &amp;lt;3.0.0"

dependencies:
  dart_appwrite: ^1.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#template-code-for-your-cloud-function"&gt;
  &lt;/a&gt;
  Template code for your Cloud Function
&lt;/h6&gt;

&lt;p&gt;add the following code in your &lt;code&gt;main.dart&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'dart:io';

import 'package:dart_appwrite/dart_appwrite.dart';

void main(List&amp;lt;String&amp;gt; args) {
  // Initialise the client SDK
  final Client client = Client();
  client
          .setEndpoint('https://[HOSTNAME_OR_IP]/v1') // Your API Endpoint
          .setProject(Platform.environment['APPWRITE_FUNCTION_PROJECT_ID']) // Your project ID
          .setKey('919c2d18fb5d4...a2ae413da83346ad2') // Your secret API key
      ;

//Your Custom Code
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use your system's local ip address instead of localhost or 127.0.0.1.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#getting-dependencies"&gt;
  &lt;/a&gt;
  Getting Dependencies
&lt;/h6&gt;

&lt;p&gt;In your Terminal, run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ set PUB_CACHE=.appwrite
$ dart pub get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will get dependencies and store them inside &lt;code&gt;.appwrite&lt;/code&gt; folder. Now you project will have 2 auto-created files as &lt;code&gt;.appwrite&lt;/code&gt; and &lt;code&gt;pubspec.lock&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deploying-cloud-function"&gt;
  &lt;/a&gt;
  Deploying Cloud Function
&lt;/h4&gt;

&lt;p&gt;Inside the Appwrite Console, tap on the &lt;strong&gt;Functions&lt;/strong&gt; menu. In the functions dashboard, tap the &lt;strong&gt;Add Function&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;Inside the Dialog Box enter your function name and choose the environment as &lt;code&gt;Dart 2.12&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eUeXcDQy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mc1wk044uy3u2x8w030.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eUeXcDQy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mc1wk044uy3u2x8w030.png" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
 Clicking on create will create a function on the appwrite console.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#deploy-tagcustom-dart-code"&gt;
  &lt;/a&gt;
  Deploy Tag/Custom Dart Code
&lt;/h5&gt;

&lt;p&gt;Before deploying we'll need to create a GZipped File of your project. So in the root directory of your dart project, run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ..
$ tar -zcvf code.tar.gz project_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this go to the Function overview page and click on &lt;em&gt;Deploy Tag&lt;/em&gt;. Write command as &lt;code&gt;dart main.dart&lt;/code&gt; and select your GZipped File.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DzcfR0J6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/laoi3ybqs2vwmoms3lkp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzcfR0J6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/laoi3ybqs2vwmoms3lkp.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or you can also deploy the function using CLI by entering the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;appwrite functions createTag `
    --functionId=6162f0965a4e4 `
    --command='mycommand' `
    --code='/myrepo/myfunction'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Deployed Tag will appear like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1tA-jCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fp6a9g0vbh01987k3v0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1tA-jCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fp6a9g0vbh01987k3v0.png" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
Click &lt;em&gt;Activate&lt;/em&gt; and the Deployed Function would be activated and ready to execute.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#testing-the-function"&gt;
  &lt;/a&gt;
  Testing the Function
&lt;/h4&gt;

&lt;p&gt;This is how your Function Overview Page will look like after performing all the above mentioned steps.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TUMaU945--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a70sb35hrku2oubsn1ts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TUMaU945--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a70sb35hrku2oubsn1ts.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;em&gt;Execute Now&lt;/em&gt; and wait for few seconds and click &lt;em&gt;View Logs&lt;/em&gt;. If the Function ran successfully you'll get something like this.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NVOm1JF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ymiiiya2n97u9ull3gf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NVOm1JF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ymiiiya2n97u9ull3gf.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  THANK YOU
&lt;/h2&gt;

&lt;p&gt;This was my take on creating and deploying Cloud Functions with our very own Dart Language. Would love to hear your suggestions and feedback.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>cloud</category>
      <category>docker</category>
      <category>appwrite</category>
    </item>
  </channel>
</rss>
