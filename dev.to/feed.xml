<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The techniques to help simplify CSS</title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 19 Jul 2021 15:00:10 +0000</pubDate>
      <link>https://dev.to/melnik909/the-techniques-to-help-simplify-css-39gj</link>
      <guid>https://dev.to/melnik909/the-techniques-to-help-simplify-css-39gj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#mobile-first-without-overrides"&gt;
  &lt;/a&gt;
  Mobile First without overrides
&lt;/h2&gt;

&lt;p&gt;There is the mobile first approach dictates we should create interfaces from small (such as cell phones, watch, etc) to large devices (desktop, tv, etc). &lt;/p&gt;

&lt;p&gt;So developers use the min-width media feature. As a result, they'll get a lot of overrides. For example, I add paddings with overriding. &lt;/p&gt;

&lt;p&gt;I think it will become not readable when you have a lot of code. So I propose to save the idea of the mobile first approach but think about ranges of devices and add styles only when they're needed using the min-width and max-width features. &lt;/p&gt;

&lt;p&gt;For example, I use different paddings but the ranges help to avoid overrides.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;481px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;961px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;480px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;481px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;960px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;961px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-shorthands-as-needed"&gt;
  &lt;/a&gt;
  Using shorthands as needed
&lt;/h2&gt;

&lt;p&gt;Usually, developers like to use the CSS shorthand syntax. Yes, it will work. But you don't think shorthand always defines values for a few properties. For example, the background sets the value for 10 properties! &lt;/p&gt;

&lt;p&gt;Thus that will lead to overrides of properties and difficult maintaining in the future. So just don't use the shorthand syntax, if you aren't sure that is really needed. For example, just use the background-color property to change the element's background color.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#margin-and-padding-without-0-values"&gt;
  &lt;/a&gt;
  margin and padding without 0 values
&lt;/h2&gt;

&lt;p&gt;A lot of time there is the practice of using the margin and padding shorthand that leads to complication of code maintaining in the future. The problem is people set 0 value when it doesn't need. For example, if they have to set top and bottom margins to 1rem they'll write padding: 1rem 0;&lt;/p&gt;

&lt;p&gt;In this case, the 0 value will lead to you have to override it in the future. And do that every time. So you will go to overrides hell. &lt;/p&gt;

&lt;p&gt;As a solution, I recommend using margin and padding shorthand only when you have to set values for all sides. And if you have to set value for specific sides use single margin-* and padding-* properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
If you like this post, please, &lt;a href="//twitter.com/intent/tweet?text=Stas%20Melnikov%20(%40melnik909)%20shared%20The%20techniques%20to%20help%20simplify%20CSS%20on%20%40ThePracticalDev%20Let%27s%20go%20to%20read%20it%20dev.to/melnik909/the-techniques-to-help-simplify-css-39gj"&gt;share it on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm always open to any opportunities to share knowledge about CSS and HTML with you. So I can:&lt;br&gt;
🖐 answer any of your questions about CSS and HTML (&lt;em&gt;free&lt;/em&gt;)&lt;br&gt;
💻 make written code review of your projects (&lt;em&gt;paid&lt;/em&gt;)&lt;br&gt;
👨‍🎓 tell about what you should learn (&lt;em&gt;paid&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Just chat me on &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also you can say thank you:&lt;br&gt;
👘 Buy a shirt, stickers, or other goods for frontenders: &lt;a href="https://www.redbubble.com/shop/ap/79109127"&gt;https://www.redbubble.com/shop/ap/79109127&lt;/a&gt;&lt;br&gt;
🥇 Support my work: &lt;a href="https://www.patreon.com/melnik909"&gt;https://www.patreon.com/melnik909&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me:&lt;br&gt;
🦜 Twitter: &lt;a href="https://twitter.com/melnik909"&gt;https://twitter.com/melnik909&lt;/a&gt;&lt;br&gt;
🦉 Facebook: &lt;a href="https://www.facebook.com/melnik909/"&gt;https://www.facebook.com/melnik909/&lt;/a&gt;&lt;br&gt;
🐞 Instagram: &lt;a href="https://www.instagram.com/s.melnik909/"&gt;https://www.instagram.com/s.melnik909/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my sponsors: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Integrate your React App with Smart Contracts</title>
      <author>Nazeeh Vahora</author>
      <pubDate>Mon, 19 Jul 2021 14:57:34 +0000</pubDate>
      <link>https://dev.to/nazeeh21/integrate-your-react-app-with-smart-contracts-4o3m</link>
      <guid>https://dev.to/nazeeh21/integrate-your-react-app-with-smart-contracts-4o3m</guid>
      <description>&lt;p&gt;In the &lt;a href="https://nazeeh.hashnode.dev/develop-your-first-dapp"&gt;previous blog&lt;/a&gt;, we discussed writing a Smart Contract using Solidity and interacting with it using &lt;a href="http://remix.ethereum.org/"&gt;Remix IDE&lt;/a&gt;. Now, we'll deploy our &lt;strong&gt;Lottery contract&lt;/strong&gt; wrote in &lt;a href="https://nazeeh.hashnode.dev/develop-your-first-dapp"&gt;previous blog&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#note-you-can-refer-this-repo-to-follow-along"&gt;
  &lt;/a&gt;
  Note: You can refer &lt;a href="https://github.com/Nazeeh21/Lottery-Contract"&gt;this repo&lt;/a&gt; to follow along.
&lt;/h5&gt;

&lt;p&gt;Initialize an empty react project namely &lt;em&gt;Lottery-Contract&lt;/em&gt; using the following script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;contract&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add &lt;em&gt;Typescript&lt;/em&gt; support to your project by following the steps mentioned &lt;a href="https://create-react-app.dev/docs/adding-typescript/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;lottery-contract&lt;/code&gt; directory, create a directory namely &lt;code&gt;contracts&lt;/code&gt;.  In &lt;code&gt;contracts&lt;/code&gt; directory, create new file namely &lt;code&gt;Lottery.sol&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Copy the Smart contract from the Remix IDE and paste it in the &lt;code&gt;Lottery.sol&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Previously in Remix, we tested our Smart Contract by deploying it locally. Now, to interact with our Contract from the frontend, we need to deploy it to a public blockchain network i.e. &lt;strong&gt;Rinkeby Test Network&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For deploying a Contract to a public network, we first need to have the &lt;strong&gt;Metamask extension&lt;/strong&gt; installed. If you don't have Metamask, you can install it from &lt;a href="https://metamask.io/"&gt;here&lt;/a&gt; and Sign in. While signing in, you will be prompted to copy the &lt;em&gt;Backup Phrase&lt;/em&gt;. Copy that &lt;em&gt;Backup Phrase&lt;/em&gt; and save it for future reference. After signing in, get some free ethers from public faucets.&lt;/p&gt;

&lt;p&gt;Now, to deploy our contract we first need to compile our Solidity Contract.&lt;/p&gt;

&lt;p&gt;To deploy our Contract, we need to add *&lt;em&gt;Solidity *&lt;/em&gt; compiler to our project by running the following command. We also need &lt;code&gt;fs&lt;/code&gt; (file-system) module for reading the files, along with the Solidity compiler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;fx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;extra&lt;/span&gt; &lt;span class="nx"&gt;solc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the project directory, create a &lt;code&gt;compile.js&lt;/code&gt; file, for writing the logic to compile our Solidity contract.&lt;/p&gt;

&lt;p&gt;Navigate to the &lt;code&gt;compile.js&lt;/code&gt; file and paste the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;solc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;solc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lotteryPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contracts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lottery.sol&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lotteryPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;source&lt;/code&gt; variable, we have stored Solidity Contract by reading the Contract using &lt;code&gt;fs&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; module (&lt;code&gt;path&lt;/code&gt; is a native js library).&lt;/p&gt;

&lt;p&gt;Now, we have to compile this contract and export it. For that, paste the code from below in the &lt;code&gt;compile.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;solc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;contracts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:Lottery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we have used &lt;code&gt;solc.compile()&lt;/code&gt; which compiles our Solidity Contract and returns &lt;code&gt;interface&lt;/code&gt; and &lt;code&gt;bytecode&lt;/code&gt;,  which we will use to deploy our Contract on Rinkeby Test Network.&lt;/p&gt;

&lt;p&gt;You can see the compiled Contract by logging the output from &lt;code&gt;solc.compile()&lt;/code&gt; in the console.&lt;/p&gt;

&lt;p&gt;Now, in the root directory, create a &lt;code&gt;deploy.js&lt;/code&gt; file, which will contain our deployment logic.&lt;/p&gt;

&lt;p&gt;To deploy our contract, we need to add 2 libraries i.e. &lt;code&gt;truffle-hdwallet-provider&lt;/code&gt; and &lt;code&gt;web3&lt;/code&gt;. For that, run the following code in the root directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;truffle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;hdwallet&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have added the library packages required to deploy our Contract. But apart from the libraries, we'll need to access a &lt;em&gt;Blockchain node&lt;/em&gt; to deploy our contract on a live public network. This node will be provided by &lt;a href="https://infura.io/"&gt;infura&lt;/a&gt; to us.&lt;/p&gt;

&lt;p&gt;To get access to &lt;em&gt;node&lt;/em&gt; for our project, &lt;em&gt;singup&lt;/em&gt; on &lt;a href="https://infura.io/"&gt;infura.io&lt;/a&gt; and navigate to &lt;strong&gt;Ethereum&lt;/strong&gt; tab on the left Navbar. &lt;br&gt;
Under the &lt;strong&gt;Ethereum&lt;/strong&gt; tab, click on &lt;em&gt;Create New Project&lt;/em&gt; for creating a new project.&lt;/p&gt;

&lt;p&gt;After &lt;em&gt;creating new project&lt;/em&gt;, under the &lt;strong&gt;KEYS&lt;/strong&gt; section, expand the &lt;strong&gt;ENDPOINTS&lt;/strong&gt; and select &lt;strong&gt;Rinkeby&lt;/strong&gt; as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_7KNgB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626432039782/ksLgyj_8mp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_7KNgB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626432039782/ksLgyj_8mp.png" alt="infura-endpoint.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selecting the &lt;strong&gt;Rinkeby&lt;/strong&gt; network will change the 2 URLs displayed below the &lt;em&gt;ENDPOINTS&lt;/em&gt; dropdown. Copy the second URL from the two and save it, as we'll use it after some time to deploy our Contract.&lt;/p&gt;

&lt;p&gt;Navigate back to the &lt;code&gt;deploy.js&lt;/code&gt; file in our project and paste the code from below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HDWalletProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truffle-hdwallet-provider&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Web3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Getting the output of our compiled Solidity Contract&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bytecode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./compile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To deploy a Contract to Rinkeby, we first need to set up a &lt;em&gt;wallet provider&lt;/em&gt; to connect our &lt;em&gt;Infura node&lt;/em&gt; with our &lt;em&gt;Metamask wallet&lt;/em&gt;. For that, copy the below code and paste in the &lt;code&gt;deploy.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HDWalletProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// `$YOUR_METAMASK_RECOVERY_CODE`,&lt;/span&gt;
  &lt;span class="c1"&gt;// `$RINKEBY_INFURA_API`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace &lt;code&gt;$YOUR_METAMASK_RECOVERY_CODE&lt;/code&gt; and &lt;code&gt;$RINKEBY_INFURA_API&lt;/code&gt; with your &lt;em&gt;Metamask recovery phrase&lt;/em&gt; and your &lt;em&gt;Infura API&lt;/em&gt; respectively.&lt;/p&gt;

&lt;p&gt;For interacting with the BlockChain Network and deploying our Contract, we are going to use &lt;code&gt;web3&lt;/code&gt;. To initialize an instance of &lt;code&gt;web3&lt;/code&gt; paste the below code in the &lt;code&gt;deploy.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Web3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While creating an instance of web3, we are providing &lt;code&gt;provider&lt;/code&gt; as an argument to &lt;code&gt;Web3()&lt;/code&gt; function. Note, that we have configured our &lt;code&gt;provider&lt;/code&gt; with our &lt;em&gt;Metamask's recovery phrase&lt;/em&gt; and &lt;em&gt;Infura URL&lt;/em&gt;. Due to this, our Contract will get deployed using Ethers from our &lt;em&gt;Metamask wallet&lt;/em&gt; and our &lt;em&gt;Infura Node URL&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finally, let's move to our deploy function. For that, paste the below code to the &lt;code&gt;deploy.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deploy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// getting accounts from our Metamask wallet&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAccounts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Attempting to deploy from account&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// deploying our contract&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bytecode&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1000000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Contract deployed to&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's discuss our &lt;code&gt;deploy&lt;/code&gt; function. Firstly, we have fetched the accounts connected to our &lt;em&gt;Metamask wallet&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Now, each &lt;strong&gt;Metamask wallet&lt;/strong&gt; comprises of &lt;em&gt;12 Ethereum wallets&lt;/em&gt;. Thus &lt;code&gt;web3.eth.getAccounts()&lt;/code&gt; will return an array comprising of &lt;strong&gt;12 wallet addresses&lt;/strong&gt;.&lt;br&gt;
Among these 12 addresses, we'll deploy from our &lt;em&gt;first account&lt;/em&gt;. Thus, we have used &lt;code&gt;accounts[0]&lt;/code&gt; for deploying our contract.&lt;/p&gt;

&lt;p&gt;Following that, we have declared a &lt;code&gt;result&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;In that, we have stored the returned data from our deployed Contract. &lt;/p&gt;

&lt;p&gt;To deploy our Contract, we need to call &lt;code&gt;new web3.eth.Contract(JSON.parse(interface))&lt;/code&gt; and in the &lt;code&gt;.Contract()&lt;/code&gt; method, we need to provide our Contract's &lt;code&gt;instance&lt;/code&gt; in JSON form as an argument.&lt;/p&gt;

&lt;p&gt;Following the &lt;code&gt;.Contract()&lt;/code&gt;, we have called &lt;code&gt;.deploy({ data: bytecode})&lt;/code&gt; and &lt;code&gt;.send({ gas: '1000000', from: accounts[0] })&lt;/code&gt; methods respectively. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;.deploy()&lt;/code&gt; function will take &lt;code&gt;bytecode&lt;/code&gt; of our contract as an argument and &lt;code&gt;.send()&lt;/code&gt; function will take &lt;strong&gt;gas&lt;/strong&gt; value and &lt;strong&gt;account address&lt;/strong&gt; as an argument.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gas&lt;/code&gt; is the amount of ether we need to send along with the deployment of our Contract and its unit is &lt;strong&gt;Wei&lt;/strong&gt;. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#note-gas-value-wont-get-stored-as-a-contract-ethers-on-the-rinkeby-network"&gt;
  &lt;/a&gt;
  Note: Gas value won't get stored as a Contract Ether's on the Rinkeby Network.
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;from&lt;/code&gt; attribute specifies the account from which we want to deploy our contract.&lt;/p&gt;

&lt;p&gt;Now run &lt;code&gt;node deploy.js&lt;/code&gt; in the terminal. &lt;/p&gt;

&lt;p&gt;After a successful deployment of the Contract, &lt;strong&gt;interface&lt;/strong&gt; and &lt;strong&gt;Address&lt;/strong&gt; of the Contract will be logged in the console. Copy both the values and keep them for future reference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We have completed the deployment, now let's head on to the frontend interaction.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For that, we need to create a local instance of our contract, using our &lt;em&gt;Contract's interface&lt;/em&gt; and &lt;em&gt;blockchain Address&lt;/em&gt; on which our Contract is deployed.&lt;/p&gt;

&lt;p&gt;For that, in the &lt;code&gt;src&lt;/code&gt; folder, create an empty &lt;code&gt;web3.js&lt;/code&gt; file. In that file, copy the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Web3&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ethereum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Web3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentProvider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;web3&lt;/code&gt; configuration, we have used &lt;code&gt;window.web3.currentProvider&lt;/code&gt; as a provider which uses the &lt;strong&gt;provider&lt;/strong&gt; from the &lt;strong&gt;Metamask&lt;/strong&gt; extension in the browser.&lt;/p&gt;

&lt;p&gt;But before using the Metamask provider, we need to enable it by writing &lt;code&gt;window.ethereum.enable();&lt;/code&gt;. This will allow us to use the Metamask provider in our browser.&lt;/p&gt;

&lt;p&gt;Now, let's create a local instance of our Contract using the Configuration of &lt;code&gt;web3&lt;/code&gt; we just configured above.&lt;/p&gt;

&lt;p&gt;Create an empty &lt;code&gt;lottery.ts&lt;/code&gt; file and copy the code from below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./web3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/* Your Contract's address */&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
 &lt;span class="c1"&gt;//  Your Contract's abi code&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, get your Contract's &lt;em&gt;abi&lt;/em&gt; and &lt;em&gt;address&lt;/em&gt; which we logged in the terminal while deploying our Contract. Using both the values, export a new instance of &lt;code&gt;web3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, let's interact with our contract. Head on to the &lt;code&gt;App.tsx&lt;/code&gt; file in the &lt;code&gt;src&lt;/code&gt; folder.  Declare 3 variables shown below and Copy the &lt;code&gt;useEffect()&lt;/code&gt; function into the &lt;code&gt;App.tsx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setManager&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPlayers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;contractBalance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setContractBalance&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPlayers&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;setManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setPlayers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setContractBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For using the instance of our locally deployed &lt;strong&gt;Lottery&lt;/strong&gt; Contract, we need to import it. Thus, copy the &lt;code&gt;import&lt;/code&gt; statements from below to &lt;code&gt;App.tsx&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./lottery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;useEffect()&lt;/code&gt;, we are fetching the &lt;strong&gt;manager&lt;/strong&gt; of the Contract by calling &lt;code&gt;await lottery.methods.manager().call()&lt;/code&gt; method. Similarly, we can get &lt;strong&gt;players&lt;/strong&gt; in the Contract by calling &lt;code&gt;.getPlayers().call()&lt;/code&gt; method. &lt;/p&gt;

&lt;p&gt;But, for getting the &lt;strong&gt;balance&lt;/strong&gt; of the Contract, we need to call &lt;code&gt;web3.eth.getBalance(lottery.options.address);&lt;/code&gt;. This function will use an instance of &lt;code&gt;web3&lt;/code&gt; and get the balance at the specified &lt;strong&gt;address&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These all functions will return &lt;code&gt;Promise&lt;/code&gt;. Thus, we need to make this function &lt;em&gt;asynchronous&lt;/em&gt;. After fetching all the values, update their respective states.&lt;/p&gt;

&lt;p&gt;Following, in the &lt;code&gt;src&lt;/code&gt; create an &lt;code&gt;App.css&lt;/code&gt; file. In &lt;code&gt;App.css&lt;/code&gt; add the code from below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;pointer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prefers&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;reduced&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;preference&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spin&lt;/span&gt; &lt;span class="nx"&gt;infinite&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;282&lt;/span&gt;&lt;span class="nx"&gt;c34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nx"&gt;vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;justify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="nx"&gt;dafb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;keyframes&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="nx"&gt;deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import this css in the &lt;code&gt;App.js&lt;/code&gt; file using the following import statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following code in the return statement of &lt;code&gt;App.tsx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Lottery&lt;/span&gt; &lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;managed&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;currently&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;entered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;competing&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromWei&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contractBalance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="nx"&gt;ether&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;submitForm&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;luck&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Amount&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;ether&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1vw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1vh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Enter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Ready&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;pick&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;winner&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onPickWinner&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Pick&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;winner&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above &lt;strong&gt;return&lt;/strong&gt; statement, it is clear that we are displaying the Contract's data and providing a form to enter the Contract.&lt;/p&gt;

&lt;p&gt;But, for our Frontend to get functional, we need to define &lt;code&gt;submitForm&lt;/code&gt; and &lt;code&gt;onPickWinner&lt;/code&gt; functions. So let's define it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submitForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAccounts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Waiting on transaction success...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWei&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You have been entered!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;submitForm()&lt;/code&gt; function, we are initially fetching the accounts. Following that, we are calling &lt;code&gt;lottery.methods.enter().send()&lt;/code&gt; method to enter the lottery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: Here, we need to call the &lt;code&gt;.send()&lt;/code&gt; method as we are creating a transaction on the blockchain network and also need to specify the &lt;code&gt;account&lt;/code&gt; from which we want to make a transaction. Also, making a transaction on the blockchain network requires some amount of fee as a gas value and its unit is &lt;code&gt;Wei&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, declare &lt;code&gt;PickWinner()&lt;/code&gt; function as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onPickWinner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAccounts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Waiting on transaction success...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pickWinner&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A winner has been picked!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember, we have allowed only the manager of the contract to pick a winner. Thus, calling &lt;code&gt;pickWinner&lt;/code&gt; function from accounts other than the &lt;em&gt;manager's account&lt;/em&gt; will throw an error. Also sending a transaction on the blockchain will take about 15 - 20 s to get executed.&lt;/p&gt;

&lt;p&gt;Congratulations! You have successfully developed your first Dapp.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>solidity</category>
      <category>ethereum</category>
    </item>
    <item>
      <title>When it Pays to Choose Microservices</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 19 Jul 2021 14:53:31 +0000</pubDate>
      <link>https://dev.to/typeable/when-it-pays-to-choose-microservices-12h5</link>
      <guid>https://dev.to/typeable/when-it-pays-to-choose-microservices-12h5</guid>
      <description>&lt;p&gt;Author: Victoriia Zaripova&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8qTHaWq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/microservices/1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8qTHaWq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/microservices/1.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi everybody! My name is Victoria. Here at Typeable, I deal with the issues of application architecture, so I couldn't help asking the perennial question: To be or not to be? Specifically, is it worthwhile switching our solutions to microservices or not? To understand this, I've done small research of potential pros and cons. Here are my findings.&lt;/p&gt;

&lt;p&gt;Microservices started gaining popularity in 2011-2014, smoothly replacing heavyweight SOA and monolithic solutions, where the architecture obstructed access to the rapidly growing market of cloud applications.&lt;/p&gt;

&lt;p&gt;The approach itself evolved at the intersection of technologies out of the competitive need to bring the business to the next level instantaneously. Because of this, the solutions developed avalanche-like and quickly acquired add-ons, patterns, and CI/CD accessories. These reasons are still relevant for the business, and the interest in microservices has not declined over the last decade. At the same time, developing a microservice-based solution is a creative intellectual task for an IT team. It allows trying out state-of-the-art approaches and pinning down the conservatism dragons of previous solutions. That is, the challenge is quite noble.&lt;/p&gt;

&lt;p&gt;However, the benefit of giving in to this magic is highly questionable.&lt;/p&gt;

&lt;p&gt;Like any other fancy solution, microservices aren't always beneficial. Neither do they give a plaster for all sores.&lt;/p&gt;

&lt;p&gt;Nevertheless, let's look into the matter.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#history-of-the-solution-and-microservices"&gt;
  &lt;/a&gt;
  History of the solution and microservices
&lt;/h1&gt;

&lt;p&gt;The evolution of a typical IT solution can take the following path:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;MVP startup&lt;/strong&gt; is a solution mainly aimed to try the market and decide whether this concept works altogether. Complex technologies, advanced interfaces and high-load services are not needed here. Cost minimization and time to market are valued most of all at this stage. At times, MVP fails as early as at the stage of the focus group interview. Does it make sense to start building a microservice-based solution right away? My answer is no, don't give it a second thought. Time will be lost while you're thinking over the architecture and setting up the infrastructure. And this is the most valuable resource for a startup. Besides, it would be difficult to use the key profit factor of microservices – parallel development – with the startup team.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Newborn monolithic solution.&lt;/strong&gt; The application architecture is not fully verified, all internal and external services that will be used are not defined. The goals and objectives of end-users are not quite known. The data structure and functionality development strategy is not clear. Definitely, here it also doesn't make sense to start heading toward microservices, unless your team consists of profs for whom microservices are as easy as a pie.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;An old commercially available and stable monolithic solution&lt;/strong&gt; with a thoroughly verified functionality; any arising issues are solved by skilful refactoring; the development is expected to be smooth, without any competition between functional blocks. Does it make sense to switch to microservices? Probably, this needs to be thought if the aim is to provide integration with external services, increase the load on the existing functional blocks, ensure their independent development and market launch or if you want to cut corners on the technology stack or improve the solution characteristics by reusing components. In this case, you should be ready to reinforce your team with necessary specialists and spend time to break the monolith down into independent or very loosely coupled functional blocks and then bring these blocks out from the monolith as separate services. This will definitely require additional resources, as well as time to train the team and search for suitable technologies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multilevel monolith in DDD concept&lt;/strong&gt;. The functionality is split into logically grouped isolated or loosely coupled blocks, which are still located within a monolithic structure; the logic is separated from the infrastructure. This is a good starting point for the migration to microservices.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Distributed monolith.&lt;/strong&gt; The development team has almost succeeded in breaking down the monolith, but something has obviously gone wrong. The services are too tightly connected to each other; explicit and implicit dependencies exist; the business is suffering because it sets forth requirements for one module, but it turns out that several modules need to be reworked; it's difficult to trace the effect of changes; testing and deployment require individual non-trivial approaches. Stop here and just think about it. Do you need microservices? Are there really any problems that cannot be solved by an initially monolithic solution? If you do need it, you should rebuild this pyramid but in the correct order.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SOA solution.&lt;/strong&gt; You shouldn't take microservices as the next step of the SOA evolution. It must be kept in mind that the main difference between the bus and the message exchange channel between services is that it is the bus that carries a significant portion of data conversion and orchestration logic. The message exchange channel between microservices, in its turn, must be fully reliable and straightforward. Its aim is to transmit a message. Implementing microservices in such solutions can be very costly because the supposedly "independent" modules can be closely coupled through the bus logic, and a simple replacement of this logic with aggregating patterns won't be sufficient. Moreover, the existing SOA solutions mostly use heterogeneous technologies and constructs which are difficult to adapt. Does it make sense to think about such migration at all? Usually, it doesn't. Most probably, the choice of SOA was driven by the complexity and diversity of the applications to be integrated into, the application scale, and the need to provide data consistency and the complex logic of data conversion. In this case, the choice is right. The microservices as an alternative should be considered only if the main part of the solution has become obsolete; when it's no more necessary to integrate with heavyweight application; if removing legacy code and migrating to simpler web solutions are on the agenda; if there is no need to maintain the high level of abstraction and data consistency but the speed of developing individual modules is still critical or it is necessary to enable independent work of separate teams.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Monstrous monolith.&lt;/strong&gt; The monolith full of legacy code and built on patches. The monolith developed so long ago that it's turned into a huge structure resistant to changes. The monolith consisting almost completely of spaghetti code. This is probably the only case when it makes sense to raze everything to the ground, sweep up the debris, and build a new solution on the ruins. Probably, based on microservices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a rule, the development team starts thinking about the microservices at the stage of startup or monstrous monolith. And maybe, this thought just jumps to the minds on the back of the microservice boom.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#now-when-to-choose-microservices"&gt;
  &lt;/a&gt;
  Now, when to choose microservices?
&lt;/h1&gt;

&lt;p&gt;If:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the aim is to develop a medium-sized non-trivial web application consisting of a set of loosely coupled or completely isolated modules;&lt;/li&gt;
&lt;li&gt;there are critical requirements for the application's resistance to loads and/or support of integration with external services (payment systems, banks, external storages etc.);&lt;/li&gt;
&lt;li&gt;the business requires significant acceleration of the development right now, plans to launch the changes on the market in all areas at once, and is not ready to wait for the sequential implementation of key changes in each area;&lt;/li&gt;
&lt;li&gt;it's necessary to use a heterogeneous technology stack (for the purposes of renovation, adaptation to market conditions, acceleration of internal processes, etc.);&lt;/li&gt;
&lt;li&gt;it's possible to distinguish the modules that allow reuse and support calls by various channels (authorization and authentication services, search engines, audit, etc.);&lt;/li&gt;
&lt;li&gt;the business sets forth requirements for the system blocks at different rates; the importance of the quick release of the individual block also varies;&lt;/li&gt;
&lt;li&gt;there's a commercial need to make frequent changes in an individual block in the future (to follow a trend or the marketing strategy);&lt;/li&gt;
&lt;li&gt;strategic business objectives require or will require a point-like scaling or different rates of changes in various points of the application;&lt;/li&gt;
&lt;li&gt;tactic business objectives require making multiple micro-changes in different modules of the system on the fly without disrupting the application as a whole (24/7 access and high probability of bugs due to the system complexity);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then you probably need to think about developing a solution using microservices.&lt;/p&gt;

&lt;p&gt;Note that almost in every case it's not the development team who drives the decision-making but the business, and this is important. If microservices don't solve the business tasks, this is a waste of time and money. If the development team or the business itself has no idea of the current and strategic paradigm of the product, this is also a waste of time and money.&lt;/p&gt;

&lt;p&gt;For example, interesting findings are provided in the &lt;a href="https://dzone.com/articles/new-research-shows-63-percent-of-enterprises-are-a"&gt;research&lt;/a&gt; conducted by Camunda in 2018 among 354 companies in different countries and industries. Though the research revealed that 63% of enterprises support the adoption of microservices or are already adopting them, only 45% explicitly document the business processes. It creates a certain problem for evaluating the influence of microservice architecture on the implementation of these processes. At the same time, companies report that the top reasons for adopting a microservices architecture are: improved scalability of applications (64%), shortened development cycle (60%), support of digital transformation trends and integration with next-generation applications (54%), greater autonomy for development teams (54%); improved application resilience (50%).&lt;/p&gt;

&lt;p&gt;However, based on the data provided by O'Reilly that ran a similar &lt;a href="https://www.oreilly.com/radar/microservices-adoption-in-2020/"&gt;survey&lt;/a&gt; in 2020 among 1052 companies, 77% of respondents are using microservices and about one-third of respondents have been using them for the last three years. Of course, these two pieces of research cannot be compared, but the increasing popularity of microservices is obvious. Here similar issues were also found: incorrect decomposition and complexity of both the solution itself and the microservices management. Nevertheless, the surveys figuratively show that corporate culture takes the center stage. However, when it comes to the adoption of microservices, it's also an inhibitive factor.&lt;/p&gt;

&lt;p&gt;Besides, there are some constraints you should take into account:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have a large team that has nothing to do :) It's a joke but it has a grain of truth. The minimum pool for one microservice is a team of six to nine persons, including developers, testers, and, advisably, an analyst. These people must not be occupied with anything else than their microservice or, as the last resort, two microservices. You can say, where there are two, there are three, and where there are three, there are four and so on. But this is a wrong path. Where there are two, there are no more than two. Period.&lt;/li&gt;
&lt;li&gt;Your DevOps architecture is configured to support independent development or you are ready to allocate resources and time for this. To start with, you do have DevOps. Make sure that you have.&lt;/li&gt;
&lt;li&gt;You are ready to organize test environments suitable for independent testing of microservices, as well as for testing of the microservices interaction, and you are ready to migrate from the concept of pure end-to-end testing to the structure consisting of modular, integration, component and end-to-end tests including placeholders development and contract publication.&lt;/li&gt;
&lt;li&gt;You are ready to spend time on failures or you've already fallen into all traps while developing your monolith and know exactly into which isolated services you can break it down without impairing the data quality, its processing speed and application reliability in general. At the very least, you clearly understand the data structure in each domain, know the business needs and can identify loosely coupled or completely independent domains. In no case should you link the microservice structure to the enterprise structure. Hierarchical schemes look pretty on paper, but in real life they often hide the pitfalls of poorly organized business processes.&lt;/li&gt;
&lt;li&gt;And, finally, make sure that the development doesn't involve legacy applications that must be integrated with, and that the data transactionality support is not critical in the domains you've identified (unless you know and are ready to use SAGA, the distributed transactions pattern).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Microservices are always associated with a degree of complexity, so if the business has no issues which could be resolved by microservices, don't add them, as the business will not appreciate this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ive-already-selected-the-microservices-whats-gone-wrong"&gt;
  &lt;/a&gt;
  I've already selected the microservices, what's gone wrong?
&lt;/h3&gt;

&lt;p&gt;Alas, if the time to release hasn't been reduced, everything has gone wrong.&lt;/p&gt;

&lt;p&gt;Most probably, you need to assess once again the potential sources of the problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Too many microservices. Probably, it makes sense to replace the seven microservices overburdening five teams with only five? Or even two. In fact, the opinion that there must be many microservices is erroneous. In most cases, the company is neither Amazon nor Netflix.&lt;/li&gt;
&lt;li&gt;Poor analysis of business domains. There exist implicit dependencies, transactionality is required, there's no common solution for the architecture.&lt;/li&gt;
&lt;li&gt;Preliminary agreements on API development, testing, CI/CD cycle setup are missing/violated.&lt;/li&gt;
&lt;li&gt;The teams are either not autonomous or too autonomous, and the practice of experience exchange and retrospective is missing.&lt;/li&gt;
&lt;li&gt;The team's life activities are not managed and supported properly. There are conflicts over resources, there is no clear vision of the business purposes of both the application as a whole and individual services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, a situation may occur when it seems that something is going wrong but you're not quite sure of this.&lt;/p&gt;

&lt;p&gt;To save you the trouble of reading another long text, I'm just placing a picture here with a number of examples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9tvMyoN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/microservices/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9tvMyoN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/microservices/2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;Here let me finish my post and make brief conclusions on this subject:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There's no use destroying what is working well just for the sake of fashion.&lt;/li&gt;
&lt;li&gt;If you've decided on destroying something, consult the property (business) owner first and explain all potential consequences. First of all, it's necessary to analyze whether this will produce a positive effect on the business processes and whether there are any needs that cannot be satisfied by an existing solution. Don't draw a nice model over the ruins. First of all, this will have negative consequences for the development teams.&lt;/li&gt;
&lt;li&gt;If the business approached you with this praiseworthy initiative, also explain the consequences. Business is business, they don't have to know about all pitfalls.&lt;/li&gt;
&lt;li&gt;Before you start, make sure that you have all resources and clearly understand the path.&lt;/li&gt;
&lt;li&gt;Don't miss the warning signs indicating that you've taken the wrong turn.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally. Most teams who have succeeded in using microservices had to rebuild their architecture on multiple occasions and followed the path of sequential monolith breakdown. So keep your head up.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#credits-and-additional-materials"&gt;
  &lt;/a&gt;
  Credits and additional materials
&lt;/h1&gt;

&lt;p&gt;As a final point, I would like to recommend several articles on this topic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dzone.com/articles/chaos-engineering-make-disciplined-microservices"&gt;Сhaos engineering make disciplined microservices&lt;/a&gt; by Shamik Mitra, Jun. 24, 21 · &lt;a href="https://dzone.com/microservices-news-tutorials-tools"&gt;Microservices Zone&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://containerjournal.com/topics/container-ecosystems/when-to-use-and-not-to-use-microservices/"&gt;When to use and not to use microservices&lt;/a&gt; by Hardik Shah, Dec. 24, 20 · &lt;a href="https://containerjournal.com/"&gt;Container Journal&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.bmc.com/blogs/microservice-vs-nanoservice/"&gt;Microservices vs Nanoservices: Weighing Framework Options&lt;/a&gt; by Sudip Sengupta, Mar.10, 21 · &lt;a href="https://www.bmc.com/"&gt;BMC blogs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://page.camunda.com/wp-building-scalable-business-automation-with-microservices"&gt;Camunda Whitepaper Building Scalable Business Automation with Microservices&lt;/a&gt; by Sandy Kemsley, Dec. 2019 · &lt;a href="https://camunda.com/"&gt;Camunda&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found these materials interesting and worth noticing.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>architecture</category>
      <category>software</category>
    </item>
    <item>
      <title>Detecting and Visualizing Twitter Sentiment during COVID-19 Pandemic using AWS Comprehend and Quicksight</title>
      <author>Vivek0712</author>
      <pubDate>Mon, 19 Jul 2021 14:50:15 +0000</pubDate>
      <link>https://dev.to/aws-builders/detecting-and-visualizing-twitter-sentiment-during-covid-19-pandemic-using-aws-comprehend-and-quicksight-2a9p</link>
      <guid>https://dev.to/aws-builders/detecting-and-visualizing-twitter-sentiment-during-covid-19-pandemic-using-aws-comprehend-and-quicksight-2a9p</guid>
      <description>&lt;p&gt;People are experiencing a prolonged state of physical isolation from their friends, as well as teachers, extended family, and community networks due to COVID-19 lockdown. While quarantining adults has generally led to negative psychological effects, including confusion, anger, and post-traumatic distress, it is unknown how these measures have impacted children.&lt;/p&gt;

&lt;p&gt;The twitter consumer sentiment is the most common text classification tool that analyzes an incoming tweet and conveys if the underlying sentiment is positive negative or neutral from the public.&lt;/p&gt;

&lt;p&gt;Taking India as a case study, we are going to analyze the sentiment of people during each phase of COVID-19 Pandemic. The three phases are Pre-lockdown, Lockdown and Unlock phases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--os7NdK0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oirk35fncwh9sbctllsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--os7NdK0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oirk35fncwh9sbctllsx.png" alt="Lockdown Phases"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets orchestrate AWS services to access the data, identify the sentiment and then visualise the results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RfKLuA5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiznv5l2027p4ytwh0nl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RfKLuA5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiznv5l2027p4ytwh0nl.png" alt="AWS Services Solution System Design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tweet-processing-and-upload"&gt;
  &lt;/a&gt;
  Tweet Processing and Upload
&lt;/h2&gt;

&lt;p&gt;The tweets were collected on three bases: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keyword&lt;/li&gt;
&lt;li&gt;Location&lt;/li&gt;
&lt;li&gt;Date range &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Only tweets in English were collected for this purpose.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Keyword&lt;/em&gt; : 15 trending keywords related to COVID-19.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Location&lt;/em&gt; : Chennai, Bangalore, Hyderabad, Delhi, Mumbai, Kolkata.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Date Range&lt;/em&gt; : Three phases — Pre-lockdown, Lockdown, Unlock.&lt;br&gt;
The GetOldTweets3 python library was used to collect the tweets based on the above three criteria. To preprocess the data, NLTK packages were used.&lt;/p&gt;

&lt;p&gt;To save you from the hassle, I have uploaded the dataset in my &lt;a href="https://github.com/Vivek0712/covidtwitterdataset/tree/master/dataset/processed"&gt;Github repo&lt;/a&gt;. The techniques used for data collection and preprocessing is explained in the readme file.&lt;br&gt;
All dataset contains three features: tweet text, location, phase.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-aws-account-and-iam-roles-and-users"&gt;
  &lt;/a&gt;
  Setting up AWS Account and IAM roles and users
&lt;/h2&gt;

&lt;p&gt;If you are new to AWS, then you create your &lt;a href="https://aws.amazon.com/free/"&gt;free AWS account&lt;/a&gt; here.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-creating-a-new-role"&gt;
  &lt;/a&gt;
  1. Creating a new role
&lt;/h3&gt;

&lt;p&gt;Go to IAM Console and then click roles. Give a name for the role (s3-lambda-role) and then select Lambda as the use case. Under permission, attach the following policies as mentioned in the picture below and create.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aG555GSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44ychbxiyaht1mrmb45w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aG555GSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44ychbxiyaht1mrmb45w.png" alt="IAM Role"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-creating-a-new-user"&gt;
  &lt;/a&gt;
  2. Creating a new user
&lt;/h3&gt;

&lt;p&gt;We are creating a user to export the Dynamo DB data. Click Users in the side pane of IAM console. Create a new user and attach “AmazonDynamoDBFullAccess” permission. Also, under the security tab, generate an access key and secret key (Keep it safe as we need it in later part of the tutorial)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#orchestrating-the-aws-services"&gt;
  &lt;/a&gt;
  Orchestrating the AWS services
&lt;/h2&gt;

&lt;p&gt;Now we all are all set to proceed with the next step. So, whenever a file gets uploaded in the bucket, we need to send it to AWS Comprehend and receive the sentiment of each tweet and populate the data in Dynamo DB. So we need three things here.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An S3 Bucket&lt;/li&gt;
&lt;li&gt;Dynamo DB table&lt;/li&gt;
&lt;li&gt;A Lambda function&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#create-an-s3-bucket"&gt;
  &lt;/a&gt;
  Create an S3 bucket
&lt;/h3&gt;

&lt;p&gt;Navigate to S3 console and create new bucket name it as “covidsentimenttwitter” or any name as you wish. This is where our dataset will be uploaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qILupV1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdxvig8g0etfh499aeg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qILupV1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdxvig8g0etfh499aeg5.png" alt="S3 Bucket Creation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-a-dynamodb-table"&gt;
  &lt;/a&gt;
  Create a DynamoDB table
&lt;/h3&gt;

&lt;p&gt;Navigate to DynamoDB console and on the side navigation pane, click Tables. Create a new table with “text” as the partition key. Also, note down the region where the table is created. In this tutorial, my table “covidsentiment” is created in “us-east-2” region.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFLxY0Rs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcpizyadmuuoc2uouwbz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFLxY0Rs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcpizyadmuuoc2uouwbz.png" alt="DynamoDB Table"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lambda-function"&gt;
  &lt;/a&gt;
  Lambda Function
&lt;/h3&gt;

&lt;p&gt;The lambda function is going to act as a bridge between S3 object and Dynamo DB table.&lt;br&gt;
Navigate to Lambda function console and click create function.&lt;br&gt;
Give a suitable name and choose Python 3.8 as runtime. Under Permissions, click “Use an existing role” and select the role which we had created earlier in this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jkBtXj78--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2kqmekabgsooiy3oqs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jkBtXj78--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2kqmekabgsooiy3oqs8.png" alt="Lambda Function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the function is created, navigate inside it. In the Designer Pane, click Add Trigger. In Trigger Configuration, select S3 and select the bucket name which we had created earlier. Set the event type as “All Object create event”. So whenever a new object is created in the S3 bucket, this lambda function will be triggered.&lt;br&gt;
Also, set the execution timeout for lambda function as 15 minutes.&lt;br&gt;
Now we need to identify the sentiment of the tweet in the uploaded file and write the data to Dynamo DB. Run the following code under the function code of the lambda function. Replace the name of the bucket, table name as per your configuration and save the function. The lambda function code is as below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now you can upload all three dataset files in S3 bucket. You can monitor the lambda function and view the output logs by switching to the Monitoring tab in the lambda function. You can view the populated items in the Dynamo DB under Items tab in Dynamo DB console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#export-dynamodb-data"&gt;
  &lt;/a&gt;
  Export DynamoDB Data
&lt;/h3&gt;

&lt;p&gt;Once the data is populated, we can simply export the whole Dynamo DB data as CSV. Install the AWS CLI, and jq library in your local machine, if you don't have it.&lt;br&gt;
In your terminal, type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws configure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter the Access ID, Secret key, Region name which we had created earlier.&lt;br&gt;
Execute the following command to export the Dynamo DB. Replace the table name as per your config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws dynamodb scan — table-name covidsentiment — select ALL_ATTRIBUTES — page-size 500 — max-items 100000 — output json | jq -r “.Items” | jq -r “(.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ].S])[] | @csv” &amp;gt; table.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#visualizing-the-sentiment-dataset-using-aws-quicksight"&gt;
  &lt;/a&gt;
  Visualizing the sentiment dataset using AWS QuickSight
&lt;/h2&gt;

&lt;p&gt;Navigate to AWS QuickSight. Under the Analysis tab, click New Analysis -&amp;gt; New Dataset -&amp;gt; Upload a file. Click and upload the exported Dynamo DB data CSV file.&lt;br&gt;
Once the dataset is imported, Click Add Visual and then select your preferred graph and set the relevant Axis, filters and play with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WEGUdlRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsxnvf2nx67a95kxdpkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WEGUdlRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsxnvf2nx67a95kxdpkf.png" alt="AWS Quicksight Graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6CAnaW4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syrycvnhq28exf6fzx21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6CAnaW4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syrycvnhq28exf6fzx21.png" alt="AWS Quicksight Graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have derived meaningful insights with the data, you can publish the QuickSight dashboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-enhancement"&gt;
  &lt;/a&gt;
  Future Enhancement
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can use AWS Firehose to stream real-time data from Twitter to S3.&lt;/li&gt;
&lt;li&gt;You can build a data pipeline between Dynamo DB / or any other DB to Quicksight Data source.&lt;/li&gt;
&lt;li&gt;Host the dashboard as a web app using Elastic Beanstalk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voila, we have built a dashboard to visualize the sentiment of the twitter during COVID-19 pandemic.&lt;/p&gt;

&lt;p&gt;If you have reached this part of the article, do like and share and follow me for more articles on AI and Cloud.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>ai</category>
      <category>cloud</category>
    </item>
    <item>
      <title>The Most Asked Questions In Interviews For Django Developers</title>
      <author>Shivam Rohilla</author>
      <pubDate>Mon, 19 Jul 2021 14:49:46 +0000</pubDate>
      <link>https://dev.to/shivamrohilla/the-most-asked-questions-in-interviews-for-django-developers-oal</link>
      <guid>https://dev.to/shivamrohilla/the-most-asked-questions-in-interviews-for-django-developers-oal</guid>
      <description>&lt;p&gt;Hello guys, in this post, I will tell you the most asked topic in the interview for Django developers, everyone asks and that's the most important thing also in Django. And that is Django ORM, everyone asks you that you know about SQL queries, JOIN, and OR and how to perform that in Django, your interviewer asks you some tricky questions like how can you fetch all the data in Python and SQL they will ask questions related to SQL but remember one thing you are a Python or Django developer, so please give them answer as a Django Developer and tell them how this thing is work in Django because they are going to hire as a Django Developer and guys you already know how Django database queries are much different from SQL queries, so answer carefully if you answer them as a Django Developer or in your own way so they'll hire you easily, change their mind with your answers or your words and be confident. &lt;/p&gt;

&lt;p&gt;I'm telling you guys this from my personal experience they ask questions like:-&lt;/p&gt;

&lt;p&gt;1) How to fetch all the data from any row&lt;/p&gt;

&lt;p&gt;Ans) Don't say like sir Select * from table_name no that's the wrong answer and you give an interview for Django developer post, so answer them like that, Sir in Django we create models, and fetch the data from that model with an only line, Model_name.objects.all() that's it. we can fetch all the data from this single line.&lt;/p&gt;

&lt;p&gt;2) How you can connect two rows or tables.&lt;/p&gt;

&lt;p&gt;Ans) Answer them like, In Django, we can connect Two models with Foreignkey that's it.&lt;/p&gt;

&lt;p&gt;3) then they will ask you about Many to Many Field and OneToOneField.&lt;/p&gt;

&lt;p&gt;Now, they will ask you about Django Rest Framework.&lt;br&gt;
They straightly ask you these questions and I think I don't need to answer them if you know about Django Rest Framework then you already know these answers. &lt;/p&gt;

&lt;p&gt;1) What is Serializers&lt;/p&gt;

&lt;p&gt;2) What is request and Response&lt;/p&gt;

&lt;p&gt;3) How to create an API&lt;/p&gt;

&lt;p&gt;4) How to serialize Django Queryset.&lt;/p&gt;

&lt;p&gt;Most companies test your Django ORM and Django Rest Framework basics, they just want to know that you are capable enough to write some queries or not and the main thing is Python DSA.&lt;/p&gt;

&lt;p&gt;Guys company hire you as a Python Django Developer remember this thing, bro you are a Python Developer first then you are a Django Developer, Most people don't study DSA they learn or practice only frameworks but learning the framework is not enough guys, DSA is the most important thing in every developer's life, if you know DSA then nothing can stop you, Some people think that DSA is not used in Django or any framework, remember one thing logics is always written in DSA, you have to write logics in DSA or in your framework guys, they ask you some questions related to DSA like.&lt;/p&gt;

&lt;p&gt;1) Tuples and Lists&lt;/p&gt;

&lt;p&gt;2) Recursion&lt;/p&gt;

&lt;p&gt;3) Reverse the String and etc.&lt;/p&gt;

&lt;p&gt;But remember one thing, Be Confident that's it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;My linkedin:- https://www.linkedin.com/in/shivamrohillaa/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank You&lt;/p&gt;

&lt;p&gt;Shivam Rohilla | Python Developer&lt;/p&gt;

</description>
      <category>career</category>
      <category>python</category>
      <category>django</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>O que é API?</title>
      <author>Ana Beatriz</author>
      <pubDate>Mon, 19 Jul 2021 14:44:32 +0000</pubDate>
      <link>https://dev.to/womakerscode/o-que-e-api-2dnj</link>
      <guid>https://dev.to/womakerscode/o-que-e-api-2dnj</guid>
      <description>&lt;p&gt;Sumario:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="##%20A%20Sigla%20API"&gt;Sigla API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="##%20O%20que%20de%20fato%20uma%20API%20faz?"&gt;O que de Fato uma API faz?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="##%20Um%20exemplo%20da%20vida%20real"&gt;Um exemplo da vida real&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="##%20Concluindo"&gt;Concluindo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estamos vivendo num mundo onde tudo é on-line e tudo se conecta de alguma forma, hoje é possível fazer pagamentos num piscar de olhos, mas uma questão sempre fica na mente de quem está iniciando na área: Como que tudo isso se conecta? Como que o dado passa do pronto A para o ponto B.&lt;/p&gt;

&lt;p&gt;Na área de tecnologia mais especifícamente em desenvolvimento nos deparamos muito com essa palavra: API. &lt;/p&gt;

&lt;p&gt;Porém muitas pessoas desenvolvedoras que estão iniciando tem um pouco de dificuldade de realmente entender o propósito desta sigla de fato.&lt;/p&gt;

&lt;p&gt;Este é o objetivo desse artigo, clarear um pouco o conceito de API através de exemplos e de forma simples. Espero que ajude você!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-sigla-api"&gt;
  &lt;/a&gt;
  A Sigla API
&lt;/h2&gt;

&lt;p&gt;Como dito na introdução API é um acrônimo vindo da língua inglesa na qual significa &lt;strong&gt;Interface&lt;/strong&gt; de &lt;strong&gt;Programação&lt;/strong&gt; de &lt;strong&gt;Aplicações&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;API acaba sendo um compilado de definições e protocolos que são usados no mundo do desenvolvimento e principalmente na integração de software de aplicações nas empresas, por isso é muito comum ouvir sobre API's em reuniões desde max-level corporativas até numa roda de conversa de amigos em T.I.&lt;/p&gt;

&lt;p&gt;Boas API's tornam mais fácil desenvolver um programa de um computador fornecendo todos os blocos de construção possíveis que são reunidos pelo programador.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-de-fato-uma-api-faz"&gt;
  &lt;/a&gt;
  O que de fato uma API faz?
&lt;/h2&gt;

&lt;p&gt;API faz de maneira simplificada a conexão com ainfraestrutura por meio do desenvolvimento de aplicações que são nativas em nuvem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lNBAnNPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6sbeoeaey8sd92hwupp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNBAnNPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6sbeoeaey8sd92hwupp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.redhat.com/pt-br/topics/api/what-are-application-programming-interfaces#:~:text=API%20%C3%A9%20um%20acr%C3%B4nimo%20em,economia%20de%20tempo%20e%20dinheiro."&gt;Imagem tirada do artigo "O que é API" - RedHat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;API é nada mais nada menos do que o código escrito necessário para atingir o objetivo do ponto A ir ao pontoB.&lt;/p&gt;

&lt;p&gt;"Ao entrar no restaurante, o consumidor (site ou mobile), após conferir o cardápio e decidir o que vai querer comer, vai efetuar seu pedido para o Garçom (API). Em seguida, o Garçom vai até a cozinha (servidor) solicitar o pedido do Consumidor. Dependendo do gerenciamento da comunicação do pedido, estrutura da Cozinha, agilidade dos Cozinheiros, o tempo para obter a Entrega do Pedido, no caso o Prato (Resposta) será rápido.&lt;br&gt;
Também podemos adotar o cliente Delivery (Embarcado), no qual também poderá consumir os dados da nossa Cozinha através da mesma API."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mundoapi.com.br/materias/para-entender-o-que-e-api-o-garcom/"&gt;Trecho retirado do MundoAPI&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#um-exemplo-da-vida-real"&gt;
  &lt;/a&gt;
  Um exemplo da vida real
&lt;/h2&gt;

&lt;p&gt;Um exemplo bem bacana que podemos tirar do mundo real é o ato de comprar passagens áreas online. &lt;br&gt;
O processo é basicamente o seguinte: &lt;br&gt;
Tu vai até o site da companhia áerea e insere o local de destino e no processo de compra insere suas informações como - Nome, Cpf, Infos do Cartão de Crédito e depois disso você tem acesso ao seu ingresso online sendo o mesmo já autenticado para validação no aeroporto.&lt;/p&gt;

&lt;p&gt;Mas o que acontece por debaixo dos panos entre inserir suas informações e receber sua passagem online?&lt;br&gt;
É isso mesmo, as API's estão aí!! E as mesmas estão trabalhando num tipo de bastidos e staff com os outros recursos e aplicações para te entregar um resultado final!&lt;/p&gt;

&lt;p&gt;Isso é possível por conta de uma ação chamada: &lt;strong&gt;Integração&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A integração de sistemas é uma técnica que promove uma grande melhoria no desempenho e na organização das operações de um negócio dentro de um software. ... Para permitir que as soluções de TI sejam empregadas para a circulação de informações entre vários setores, gestores podem implementar diversas técnicas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concluindo"&gt;
  &lt;/a&gt;
  Concluindo
&lt;/h2&gt;

&lt;p&gt;API's estao muito presentes no dia a dia de uma pessoa desenvolvedora, e esta tudo bem nao entender tudo de início, conforme as tasks vão sendo passadas pra você, intrísicamente você irá entender o papel das API's.&lt;/p&gt;

&lt;p&gt;Um dica de exercicio é tentar criar uma regrinha de negócio: Biblioteca, Escola ou até mesmo um catalogo de músicas. E ir criando uma aquitetura para essa regra de negócio, você vai ver que com o tempo vai entender o papel da API.&lt;br&gt;
Obs.: Peça sempre um feedback para entender onde melhorar e como evoluir.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>development</category>
      <category>api</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to build a carousel from scratch using Vue.js</title>
      <author>Luis Velásquez</author>
      <pubDate>Mon, 19 Jul 2021 14:29:16 +0000</pubDate>
      <link>https://dev.to/luvejo/how-to-build-a-carousel-from-scratch-using-vue-js-4ki0</link>
      <guid>https://dev.to/luvejo/how-to-build-a-carousel-from-scratch-using-vue-js-4ki0</guid>
      <description>&lt;p&gt;Instead of going through a complex third-party library docs, I tried to figure out how to build a "multi-card" carousel from scratch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iEPvcSl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3ylulgdqk28liz2tj3i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iEPvcSl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3ylulgdqk28liz2tj3i.gif" alt="Final result screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the final code, check my GitHub &lt;a href="https://github.com/luvejo/vue-3-carousel-tutorial"&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to see a real-world example, I used the logic of this approach (inspired by a Thin Tran's &lt;a href="https://medium.com/tinyso/how-to-create-the-responsive-and-swipeable-carousel-slider-component-in-react-99f433364aa0"&gt;tutorial&lt;/a&gt;) in one of my recent projects: &lt;a href="https://sprout.luvejo.me"&gt;sprout.luvejo.me&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-understanding-the-structure"&gt;
  &lt;/a&gt;
  1. Understanding the structure
&lt;/h2&gt;

&lt;p&gt;This is the underling structure of the demo above:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTyvpgSj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2baew25ru2w4bzwt045.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTyvpgSj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2baew25ru2w4bzwt045.jpg" alt="structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But let's see how it actually works:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BJvJLwGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bx5ue1ym8if28u68hpjd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BJvJLwGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bx5ue1ym8if28u68hpjd.gif" alt="flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though in this .gif every step has an animated transition, this is just to make it easier to visualize all 4 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Translate the &lt;code&gt;.inner&lt;/code&gt; wrapper.&lt;/li&gt;
&lt;li&gt;Extract the first item.&lt;/li&gt;
&lt;li&gt;Paste it to the tail.&lt;/li&gt;
&lt;li&gt;Move &lt;code&gt;.inner&lt;/code&gt; back to its original position.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the actual implementation, only step #1 will be animated. The others will happen instantly. This is what give us the impression of an infinite/continuous navigation loop. Can't you see it? Stick with me 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-building-the-carousel-structure"&gt;
  &lt;/a&gt;
  2. Building the carousel structure
&lt;/h2&gt;

&lt;p&gt;Let's start with this basic component:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Line 2&lt;/strong&gt;: This is exactly the structure from in section 1. The &lt;code&gt;.carousel&lt;/code&gt; container is the frame within which the cards will move.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 9-10&lt;/strong&gt;: Our navigation buttons.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-adding-styles"&gt;
  &lt;/a&gt;
  3. Adding styles
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Line 5&lt;/strong&gt;: With a fixed width we are sure new items will be appended outside of the carousel's visible area. But if you have enough cards, you can make it as width as you want.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 6&lt;/strong&gt;: Using the property &lt;code&gt;overflow: hidden;&lt;/code&gt; will allow us to crop those elements that go outside of &lt;code&gt;.carousel&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 10&lt;/strong&gt;: Prevents &lt;code&gt;inline-block&lt;/code&gt; elements (or &lt;code&gt;inline-flex&lt;/code&gt;, in our case) from wrapping once the parent space has been filled. See &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/white-space"&gt;white-space&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Expected result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EsLUrHYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xn6hk3z76khe1lprexnj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EsLUrHYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xn6hk3z76khe1lprexnj.png" alt="Result 1 screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-translating-the-raw-inner-endraw-wrapper-step-1"&gt;
  &lt;/a&gt;
  4. Translating the &lt;code&gt;.inner&lt;/code&gt; wrapper (step 1)
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Line 22&lt;/strong&gt;: The &lt;code&gt;$refs&lt;/code&gt; property let you access your &lt;a href="https://v3.vuejs.org/guide/component-template-refs.html"&gt;template refs&lt;/a&gt;. &lt;code&gt;scrollWith&lt;/code&gt; give us the width of an element, even if it's partially hidden due to overflow.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 24&lt;/strong&gt;: This will dynamically set our carousel "step", which is the distance we need to translate our &lt;code&gt;.inner&lt;/code&gt; element every time the "next" or "prev" buttons are pressed. Having this, you don't even need to specify the width of your &lt;code&gt;.card&lt;/code&gt; elements (as long as they're all the same size).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 27-35&lt;/strong&gt;: To move the cards we'll be translating the whole &lt;code&gt;.inner&lt;/code&gt; wrapper, manipulating its &lt;code&gt;transform&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 44&lt;/strong&gt;: &lt;code&gt;transform&lt;/code&gt; is the property we want to animate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Expected result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PPc058NH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znvi3i7gajv03rfrz62p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PPc058NH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znvi3i7gajv03rfrz62p.gif" alt="Result 2 screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-shifting-the-raw-cards-endraw-array-steps-2-and-3"&gt;
  &lt;/a&gt;
  5. Shifting the &lt;code&gt;cards[]&lt;/code&gt; array (steps 2 and 3)
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Line 7&lt;/strong&gt;: &lt;code&gt;afterTransition()&lt;/code&gt; takes a callback as an argument that's going to be executed after a transition in &lt;code&gt;.inner&lt;/code&gt; occurs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 8&lt;/strong&gt;: The &lt;code&gt;Array.prototype.shift()&lt;/code&gt; method take the first element out of the array and returns it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 9&lt;/strong&gt;: The &lt;code&gt;Array.prototype.push()&lt;/code&gt; method inserts an element to the end of the array.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 14-17&lt;/strong&gt;: We define the event listener callback: &lt;code&gt;listener()&lt;/code&gt;. It will call our actual callback and then remove itself when executed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 18&lt;/strong&gt;: We add the event listener.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I encourage you to implement the &lt;code&gt;prev()&lt;/code&gt; method. Hint: check this MDN &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;entry&lt;/a&gt; on Array operations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-moving-raw-inner-endraw-back-to-its-original-position-step-4"&gt;
  &lt;/a&gt;
  6. Moving &lt;code&gt;.inner&lt;/code&gt; back to its original position (step 4)
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Line 9&lt;/strong&gt;: It resets &lt;code&gt;.inner&lt;/code&gt;'s position after shifting the &lt;code&gt;cards[]&lt;/code&gt; array, counteracting the additional translation caused by the latter.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Line 17&lt;/strong&gt;: We set &lt;code&gt;transition&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt; so the reset happens instantly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Expected result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sJMYCguo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a55htd9cs40ewrdjv7zj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJMYCguo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a55htd9cs40ewrdjv7zj.gif" alt="Result 3 screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-final-tunings"&gt;
  &lt;/a&gt;
  7. Final tunings
&lt;/h2&gt;

&lt;p&gt;At this point, our carousel just works. But there are a few bugs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Bug 1&lt;/strong&gt;: Calling &lt;code&gt;next()&lt;/code&gt; too often results in non-transitioned navigation. Same for &lt;code&gt;prev()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to find a way to disable those methods during the CSS transitions. We'll be using a data property &lt;code&gt;transitioning&lt;/code&gt; to track this state.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Bug 2&lt;/strong&gt;: Unlike what happens with &lt;code&gt;next()&lt;/code&gt;, when we call &lt;code&gt;prev()&lt;/code&gt; the previous card doesn't slide-in. It just appears instantly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you watched carefully, our current implementation still differs from the structure proposed at the beginning of this tutorial. In the former the &lt;code&gt;.inner&lt;/code&gt;'s left side and the &lt;code&gt;.carousel&lt;/code&gt;'s left side aligns. In the latter the &lt;code&gt;.inner&lt;/code&gt;'s left side starts outside the &lt;code&gt;.carousel&lt;/code&gt;'s boundaries: the difference is the space that occupies a single card.&lt;/p&gt;

&lt;p&gt;So let's keep our &lt;code&gt;.inner&lt;/code&gt; always translated one step to the left.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Lines 12 and 19&lt;/strong&gt;: Every time we execute &lt;code&gt;moveRight()&lt;/code&gt; or &lt;code&gt;moveLeft()&lt;/code&gt; we are reseting all the &lt;code&gt;transform&lt;/code&gt; values for &lt;code&gt;.inner&lt;/code&gt;. Therefore it becomes necessary to add that additional &lt;code&gt;translateX(-${this.step})&lt;/code&gt;, which is the position we want all other transformations occur from.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-conclusion"&gt;
  &lt;/a&gt;
  8. Conclusion
&lt;/h2&gt;

&lt;p&gt;And that's it. What a trip, huh? 😅 No wonder why this is a common question in technical interviews. But now you know how to ―or another way to― build your own "multi-card" carousel.&lt;/p&gt;

&lt;p&gt;Again, here is the &lt;a href="https://github.com/luvejo/vue-3-carousel-tutorial"&gt;full code&lt;/a&gt;. I hope you found it useful, and feel free to share your thoughts/improvements in the comments.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/luvejo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FFrhOh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1slnz77dvrx76i3u0u7s.png" alt="Link to my Buy me a coffee profile"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Creating a custom scrollbar</title>
      <author>Anjali Jha</author>
      <pubDate>Mon, 19 Jul 2021 14:28:50 +0000</pubDate>
      <link>https://dev.to/anjalijha22/creating-a-custom-scrollbar-k1o</link>
      <guid>https://dev.to/anjalijha22/creating-a-custom-scrollbar-k1o</guid>
      <description>&lt;p&gt;Recently, I figured out about customizing scrollbars. Adding custom scrollbars to websites you make, helps enhance it even further and also helps in overall color-coordination.&lt;/p&gt;

&lt;p&gt;To start with, we use ::-webkit-scrollbar.It can be included in your CSS section. It's a pseudo element used to modify the look of a browser’s scrollbar. Most browsers other than firefox support this.&lt;/p&gt;

&lt;p&gt;A sample example of the code would be-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* width */
::-webkit-scrollbar {
  width: 10px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This section targets the width of your scrollbar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Track */
::-webkit-scrollbar-track {
  background: #f1f1f1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This relates to the progress bar. Properties such as border radius, box shadow can also be added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Handle */
::-webkit-scrollbar-thumb {
  background: #888;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It specifies the properties of the scrolling handle that can be dragged. &lt;br&gt;
To design that even further you can try-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: #555;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will change the color upon hovering.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#similarly-some-of-the-other-pseudo-elements-you-can-use-are"&gt;
  &lt;/a&gt;
  Similarly some of the other pseudo elements you can use are-
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#webkitscrollbarbutton"&gt;
  &lt;/a&gt;
  ::-webkit-scrollbar-button
&lt;/h4&gt;

&lt;p&gt;the buttons on the scrollbar (arrows pointing upwards and downwards).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#webkitscrollbartrackpiece"&gt;
  &lt;/a&gt;
  ::-webkit-scrollbar-track-piece
&lt;/h4&gt;

&lt;p&gt;the track (progress bar) NOT covered by the handle.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#webkitscrollbarcorner"&gt;
  &lt;/a&gt;
  ::-webkit-scrollbar-corner
&lt;/h4&gt;

&lt;p&gt;the bottom corner of the scrollbar, where both horizontal and vertical scrollbars meet&lt;br&gt;
&lt;em&gt;and many more&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hope it helps!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K0kObWWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jmxvam8rgm4ctzd89io.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K0kObWWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jmxvam8rgm4ctzd89io.gif" alt="End"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Do Developers Have Too Many Options?</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 19 Jul 2021 14:22:49 +0000</pubDate>
      <link>https://dev.to/codesphere/do-developers-have-too-many-options-1eo9</link>
      <guid>https://dev.to/codesphere/do-developers-have-too-many-options-1eo9</guid>
      <description>&lt;p&gt;It feels like every other week there is some new web framework popping up on HackerNews, promising to cause a ground-breaking paradigm shift. While some of these "innovations", like NoSQL databases or front-end javascript libraries, might make life easier for many developers, there's no question that these "innovations" have caused the technologies used by developers to become increasingly diverse, perhaps even to a fault.&lt;/p&gt;

&lt;p&gt;The golden question that's been debated by developers for years, of course, is whether the abundance of options actually creates a net good for developers and users. So does it?&lt;br&gt;
Let's take a closer look…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#framework-fatigue"&gt;
  &lt;/a&gt;
  Framework Fatigue
&lt;/h3&gt;

&lt;p&gt;As someone who does a good amount of front-end development, I can say with confidence that ReactJS makes my life easier. I love being able to create reusable components, handle inputs easily, and set up conditional rendering with a couple characters.&lt;/p&gt;

&lt;p&gt;The potential issue isn't that a tool exists that makes our life easier. It's the fact that 20 tools exist to make our life easier in the exact same way.&lt;/p&gt;

&lt;p&gt;Are there minor differences between React, Angular, Vue, Django, Ember, Meteor, and the 50 other web frameworks? Yes. Are you going to be able to successfully build almost any website no matter the framework you choose? Also yes.&lt;br&gt;
The different use cases of these frameworks have little to do with the underlying technology, and more so are just a matter of preference.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#new-hires"&gt;
  &lt;/a&gt;
  New Hires
&lt;/h3&gt;

&lt;p&gt;A common frustration that people have with the abundance of options is that it can make applying for developer roles particularly difficult. Many employers will list their specific tech stack as a requirement for the role.&lt;/p&gt;

&lt;p&gt;While listing "Javascript" or "SQL" as a skill is definitely reasonable, when developers list hyper-specific web frameworks or database technologies, it creates a landscape where those looking for a job are forced to take a crash course in each of these technologies.&lt;/p&gt;

&lt;p&gt;In reality, if you have the JS or SQL fundamentals down, it's not going to take you that long to adapt to your new employer's tech stack. The expectation that developers should know every specific technology prior to being hired is therefore counter-productive.&lt;/p&gt;

&lt;p&gt;In addition, there is an argument to be made that having developers gain experience in all these separate, yet extremely similar, technologies makes it harder for the team to work together. A minority of developers actually get to choose their own tech stack(StackOverflow' 2020 Developer Survey), so a good amount of us are going to be left working in a framework that we don't prefer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E82lvZrd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60qr9n4ph16on3p0ecix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E82lvZrd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60qr9n4ph16on3p0ecix.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-myth-of-sparse-resources"&gt;
  &lt;/a&gt;
  The Myth of Sparse Resources
&lt;/h3&gt;

&lt;p&gt;I think an argument that gets thrown around a lot that does not have a ton of merit is the idea that as the amount of technologies increases, the amount of learning resources on each technology is going to decrease.&lt;/p&gt;

&lt;p&gt;Let's be honest here, there's FAR from a shortage of developer tutorials. I'd be incredibly surprised if you were able to find a web technology that didn't have at least one article or a video covering how to use it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQK7TnkI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahsjt2ty5tx7anjeomwr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQK7TnkI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahsjt2ty5tx7anjeomwr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7BpdQK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtuxuy6r16pycpxcu30r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7BpdQK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtuxuy6r16pycpxcu30r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nX8BsABj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nx6g8e3c1fcyqwepp4op.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nX8BsABj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nx6g8e3c1fcyqwepp4op.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#risk"&gt;
  &lt;/a&gt;
  Risk
&lt;/h3&gt;

&lt;p&gt;Another common argument in this debate is that when the developer landscape is constantly changing, there comes an incredible amount of risk in choosing a tech stack.&lt;/p&gt;

&lt;p&gt;We all know migrating to different web technology is hard, and that's why most companies elect to maintain an older tech stack instead of transitioning to the status quo.&lt;/p&gt;

&lt;p&gt;These "innovative" web technologies, by nature of being new instead of being built on existing tech, can only be so effective in the short run. Chances are, by the time companies migrate to your new framework, a better framework is already being released.&lt;/p&gt;

&lt;p&gt;A company looking to pick a tech stack is therefore going to be much safer building their software with vanilla JS, instead of a framework that can be deprecated or antiquated in a couple of years.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#competition-makes-us-better%C2%A0off"&gt;
  &lt;/a&gt;
  Competition makes us better off
&lt;/h3&gt;

&lt;p&gt;Probably the greatest argument in support of the web development landscape we see today is that the competition among frameworks and technologies makes us better off. Would HTML5 be what it is today without Adobe Flash? Would we have React Native without Flutter or Xamarin?&lt;/p&gt;

&lt;p&gt;The tech landscape is always going to evolve. We can at least find solace in the fact that the creators of new web technologies are going to try their best at making development easier, more secure, and more efficient so that they can capture the market.&lt;/p&gt;

&lt;p&gt;At Codesphere, we're proud to be competing with the likes of AWS, Heroku, and Netlify because we think that we can make cloud development much easier for developers. If developers don't end up wanting the tools we offer, so be it. But we're confident that we can make a real difference in software development and we're excited at the opportunity to make our case.&lt;/p&gt;

&lt;p&gt;Does this make things harder for new hires and companies picking tech stacks? Probably a little bit, but I'm not sure that the alternative is any more viable.&lt;/p&gt;




&lt;p&gt;What do you think? Do we have too many options? Do you like getting to choose between so many different web frameworks?&lt;br&gt;
Let us know down below!&lt;/p&gt;

&lt;p&gt;Brought to you from your good friends at &lt;a href="https://link.codesphere.com/BK"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
      <category>frameworks</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Build an Interactive Flow Map in JavaScript</title>
      <author>andreykh1985</author>
      <pubDate>Mon, 19 Jul 2021 14:07:49 +0000</pubDate>
      <link>https://dev.to/andreykh1985/how-to-build-an-interactive-flow-map-in-javascript-mja</link>
      <guid>https://dev.to/andreykh1985/how-to-build-an-interactive-flow-map-in-javascript-mja</guid>
      <description>&lt;h6&gt;
  &lt;a href="#a-stepbystep-tutorial-showing-how-to-create-an-interactive-js-flow-map-illustrated-by-visualizing-data-on-migration-to-the-us"&gt;
  &lt;/a&gt;
  &lt;em&gt;A step-by-step tutorial showing how to create an interactive JS Flow Map. Illustrated by visualizing data on migration to the US.&lt;/em&gt;
&lt;/h6&gt;

&lt;p&gt;It may seem to be complicated to create an interactive Flow Map for the Web using JavaScript. But it’s not! This easy-to-follow tutorial will show you how to build beautiful JS flow maps without too much effort.&lt;/p&gt;

&lt;p&gt;In these difficult times of the pandemic, there is a lot of confusion and concern about the immigration status of people around the globe. I decided to take a look at the immigration data of the US which has more migrants than any other country in the world. Here, I explore where these immigrants come from and represent the top 15 countries that contributed the highest number of migrants to the US in the year 2019.&lt;/p&gt;

&lt;p&gt;A flow map seems the perfect way to showcase the inflow of migrants into the United States from various countries. Before going further, let me give you a brief idea about a flow map and its uses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-flow-map"&gt;
  &lt;/a&gt;
  What is a Flow Map?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.anychart.com/chartopedia/chart-type/flow-map/"&gt;Flow Maps&lt;/a&gt; geographically visualize the movement of objects — for example, people or goods from one location to another and their amount.&lt;/p&gt;

&lt;p&gt;A flow map is a type of connector map that is drawn by connecting points placed on a map by straight or curved lines with an arrow or marker indicating the direction of the flow. Generally, the magnitude of the flow is represented by the thickness of the line.&lt;/p&gt;

&lt;p&gt;Start and endpoints for the connectors in these maps are defined by the latitude and longitude parameters so it’s necessary to set these for each connector. Note that the latitude of the point should be defined first and then the longitude for each point.&lt;/p&gt;

&lt;p&gt;For example, here’s the flow map I will have created by the end of this tutorial. [&lt;a href="https://codepen.io/shacheeswadia/pen/abJJxvx"&gt;CodePen&lt;/a&gt; | &lt;a href="https://playground.anychart.com/a8W1R42d/"&gt;Playground&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lqUNWdCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0z0196c8suzfqm8lph6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqUNWdCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0z0196c8suzfqm8lph6.png" alt="An interactive JS flow map being visualized along this tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-flow-map-with-javascript"&gt;
  &lt;/a&gt;
  Creating a Flow Map with JavaScript
&lt;/h2&gt;

&lt;p&gt;There are a lot of good &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_JavaScript_charting_libraries"&gt;JavaScript charting libraries&lt;/a&gt; that can be used to create compelling data visualizations. Many of them provide the capabilities to build maps and have their strengths. So you can use whichever library best fits your project requirements.&lt;/p&gt;

&lt;p&gt;In this tutorial, I am using &lt;a href="https://www.anychart.com/"&gt;AnyChart&lt;/a&gt;. It looks the most suitable here with the out-of-the-box flow map option and in-depth &lt;a href="https://docs.anychart.com/"&gt;documentation&lt;/a&gt; to understand the process.&lt;/p&gt;

&lt;p&gt;A flow map is slightly more complicated than a basic chart like a bar or a pie chart but I will walk you through the lines of code to make it easier to grasp. Some background knowledge about HTML and JavaScript will help you understand faster but nonetheless, it is not too difficult. Look how you can create a beautiful interactive JavaScript flow map in 4 simple steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-creating-an-html-page"&gt;
  &lt;/a&gt;
  1. Creating an HTML page
&lt;/h3&gt;

&lt;p&gt;The first step is to create a blank HTML page that will hold the interactive flow map. Add a &lt;code&gt;div&lt;/code&gt; element with a unique id to this page which will be referenced later.&lt;/p&gt;

&lt;p&gt;I set the width and height of the div to 100% so that the map is displayed over the entire screen. This can be modified based on the requirement and preference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript Flow Map&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;      
      &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-adding-the-necessary-scripts"&gt;
  &lt;/a&gt;
  2. Adding the necessary scripts
&lt;/h3&gt;

&lt;p&gt;To use a charting library for building a data visualization, you will need to link the appropriate JS scripts of the library you are using. All these script files are included in the HTML page.&lt;/p&gt;

&lt;p&gt;For creating a JS flow map, I will add AnyChart’s ‘&lt;a href="https://docs.anychart.com/Quick_Start/Modules#core"&gt;core&lt;/a&gt;’ and ‘&lt;a href="https://docs.anychart.com/Quick_Start/Modules#geo_maps"&gt;geo maps&lt;/a&gt;’ modules.&lt;/p&gt;

&lt;p&gt;Since the map is of the whole world, I link the file containing the world geodata, from the library’s collection of maps also available on its &lt;a href="https://cdn.anychart.com/"&gt;CDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, I will make use of another JavaScript library — &lt;a href="http://proj4js.org/"&gt;Proj4js&lt;/a&gt; — which, in short, takes care of plotting the coordinates over the respective geographical areas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript Flow Map&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/releases/8.10.0/js/anychart-core.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/releases/8.10.0/js/anychart-map.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/geodata/latest/custom/world/world.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.15/proj4.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;      
      &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// All the code for the JS flow map will come here&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-connecting-the-data"&gt;
  &lt;/a&gt;
  3. Connecting the data
&lt;/h3&gt;

&lt;p&gt;For the map, the data needs to have the latitude and longitude coordinates along with the other information to be displayed. I created the dataset by collating immigration information from &lt;a href="https://en.wikipedia.org/wiki/Immigration_to_the_United_States#Ethnicity"&gt;Wikipedia&lt;/a&gt; and adding the coordinates from a site called &lt;a href="https://www.latlong.net/"&gt;Latlong&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the flow map, I need the latitude and longitude of the source country as well as the destination country. Here, the destination country is the US for all the data points. To check out how the dataset looks, you can find the file &lt;a href="https://gist.githubusercontent.com/shacheeswadia/a20ba5b62cef306ccc1a8e8857e5316a/raw/0337b16fa8dc4de97263bc0a4ededf935a529c35/migration-data.json"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To load the data file, I will include the &lt;a href="https://docs.anychart.com/Quick_Start/Modules#data_adapter"&gt;Data Adapter module&lt;/a&gt; of AnyChart in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of the HTML page [and make use of the &lt;code&gt;loadJsonFile()&lt;/code&gt; method within the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in the HTML page body to load the file with the JSON data for the flow map visualization].&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript Flow Map&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/releases/8.10.0/js/anychart-core.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/releases/8.10.0/js/anychart-map.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/geodata/latest/custom/world/world.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.15/proj4.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/releases/8.10.0/js/anychart-data-adapter.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;      
      &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;anychart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadJsonFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://gist.githubusercontent.com/shacheeswadia/a20ba5b62cef306ccc1a8e8857e5316a/raw/0337b16fa8dc4de97263bc0a4ededf935a529c35/migration-data.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// The JS flow map's code will come here&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-writing-the-js-code-to-draw-the-flow-map"&gt;
  &lt;/a&gt;
  4. Writing the JS code to draw the flow map
&lt;/h3&gt;

&lt;p&gt;Before anything else, I will enclose all the code inside the &lt;code&gt;anychart.onDocumentReady()&lt;/code&gt; function which will ensure that the page is fully loaded before anything is executed. Next, I will load the data using &lt;code&gt;anychart.data.loadJsonFile()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Now, I create the flow map using the connector function since this is a type of connector map and then set the geodata along with settings to make sure that all the regions of the world are visible clearly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;anychart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onDocumentReady&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;anychart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadJsonFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://gist.githubusercontent.com/shacheeswadia/a20ba5b62cef306ccc1a8e8857e5316a/raw/0337b16fa8dc4de97263bc0a4ededf935a529c35/migration-data.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// сreate a connector map chart instance&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;anychart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connector&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// include the world map geodata&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geoData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;anychart.maps.world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// darken all regions&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unboundRegions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#E1E1E1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#D2D2D2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I add a title to the chart and allow the overlap so that all the data points along with their labels are seen on the map even if they overlap.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// set the map chart title&lt;/span&gt;
&lt;span class="nx"&gt;map&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Migrations to the USA from the top 15 countries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// display all labels even if there is an overlap&lt;/span&gt;
&lt;span class="nx"&gt;map&lt;/span&gt; 
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overlapMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;allow-overlap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now comes the main part of creating the connector series which will represent the various connections.&lt;/p&gt;

&lt;p&gt;For this, I create a helper function with data as its parameter. In the function, I create the series that will form the connector lines and add the arrow markers at 100% position which is the destination since our flow is from the various source countries to the destination country — the US.&lt;/p&gt;

&lt;p&gt;I then add labels that display the source country names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// a helper function to create the series&lt;/span&gt;
&lt;span class="c1"&gt;// that will form the connector lines&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;createSeries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// create and customize the connector series&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;connectorSeries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;connectorSeries&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// set the labels for the source countries&lt;/span&gt;
  &lt;span class="nx"&gt;connectorSeries&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;from&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I now set the data and call the function that I created with that dataset as the argument. The final steps are setting the container to reference the previously added div and drawing the map.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create a dataset from the data&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dataSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;anychart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;mapAs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;createSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataSet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// set the container&lt;/span&gt;
&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// draw the map&lt;/span&gt;
&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lo and behold! A nice, functional, JavaScript-based flow map is made! It wasn’t that tough to create such an interactive data visualization, was it?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TxmqEUPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zu1s5cncu9rmzecnpcym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TxmqEUPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zu1s5cncu9rmzecnpcym.png" alt="A basic interactive JavaScript flow map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have a look at this initial version on &lt;a href="https://codepen.io/shacheeswadia/pen/gOmwpXP"&gt;CodePen&lt;/a&gt; [or &lt;a href="https://playground.anychart.com/yR1yOY6X/"&gt;Playground&lt;/a&gt;].&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customizing-the-js-flow-map"&gt;
  &lt;/a&gt;
  Customizing the JS Flow Map
&lt;/h2&gt;

&lt;p&gt;The existing flow map just built using JavaScript is a good representation showing where the majority of migrants come from. But the amount of immigrants from each country is not displayed. So, I will customize the map to show that and make the map more insightful, with some additional code. I will also improve the visual aesthetics and make some other minor changes.&lt;/p&gt;

&lt;p&gt;A. Setting the colors and size of the connectors along with the legend&lt;br&gt;
B. Improving the tooltip information&lt;br&gt;
C. Enhancing the title and labels&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.anychart.com/blog/2021/07/13/flow-map-js/"&gt;CONTINUE READING HERE&lt;/a&gt; FOR A WALKTHROUGH OF THESE JS FLOW MAP CUSTOMIZATIONS&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>datascience</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How Can a Programmer Design a Website? (That is actually good)</title>
      <author>Itay Schechner</author>
      <pubDate>Mon, 19 Jul 2021 14:01:57 +0000</pubDate>
      <link>https://dev.to/itays123/how-can-a-programmer-design-a-website-that-is-actually-good-4oa7</link>
      <guid>https://dev.to/itays123/how-can-a-programmer-design-a-website-that-is-actually-good-4oa7</guid>
      <description>&lt;p&gt;As a web developer, the #1 topic I've been struggling with is designing. I managed to master HTML\CSS, React.js, Node.js, TypeScript, Java and Spring Boot but something about my websites always felt wrong.&lt;/p&gt;

&lt;p&gt;As I began working on my big project called Partydeck, this issue became a real struggle.&lt;/p&gt;

&lt;p&gt;This is the homepage I had designed last March. It looks clean, the theme is clear, and it's easy to understand what the user is expected to do. Yet, something is missing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NrBlzJxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u23bqftca7yvksbtl35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NrBlzJxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u23bqftca7yvksbtl35.png" alt="The Old Website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the homepage I am currently designing. You can see it is in a whole new level, containing colorful interfaces and is able to keep the user's eyes hooked for a longer time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yai_uvbY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq8a0zy6fgg4v1w3w8fe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yai_uvbY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq8a0zy6fgg4v1w3w8fe.png" alt="The New Website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-do"&gt;
  &lt;/a&gt;
  What to do?
&lt;/h2&gt;

&lt;p&gt;Here are some of the tips I found the most inspiring and that have helped me the most. Do you have any other good tips? Let me know in the comments!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-a-designing-software"&gt;
  &lt;/a&gt;
  Use a designing software
&lt;/h3&gt;

&lt;p&gt;The reason this is so important is because it's much more easy to experiment and see what works best when you design your website in an external software before actually programming it.&lt;/p&gt;

&lt;p&gt;You don't have to master Photoshop or be the best Adobe user on the planet, just have the minimal understanding of the software of your choice.&lt;/p&gt;

&lt;p&gt;My personal preference is &lt;strong&gt;Figma&lt;/strong&gt;, because... it's made of React.js, which I absolutely love.&lt;/p&gt;

&lt;p&gt;A great example of the usage of Figma for designing websites can be found in this video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iHXB34ZsjHQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-inspired"&gt;
  &lt;/a&gt;
  Get Inspired
&lt;/h3&gt;

&lt;p&gt;If you design a To-Do app, get to Todoist, Any.do or any other website with a purpose close to yours and get inspired by their design.&lt;/p&gt;

&lt;p&gt;In my case, my website is similar to Quizlet and Kahoot, so I visited their websites many times to get inspired.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-be-afraid-to-use-colors"&gt;
  &lt;/a&gt;
  Don't be afraid to use colors
&lt;/h3&gt;

&lt;p&gt;The only website I have ever seen with an almost 100% monochromatic UI is Instagram, and the reason it looks good is because the posts are the ones who keep the user's eyes hooked. Unless you design a social media application, use a color theme.&lt;/p&gt;

&lt;p&gt;I don't want you to pick an exact shade, but a color from a pre-made theme such as the Material color theme.&lt;/p&gt;

&lt;p&gt;Once you have a color theme, here's what you do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is your &lt;strong&gt;primary&lt;/strong&gt; color? Use it for ~60% of your interface. In my case - the Tailwind.css indigo.&lt;/li&gt;
&lt;li&gt;The secondary color should be similar to the primary, but a bit lighter or darker. You can use different shades of the same color to spice things up.&lt;/li&gt;
&lt;li&gt;What are your &lt;strong&gt;accent&lt;/strong&gt; colors? Picking one is interesting, but in the context of my application I thought I should pick more. Use it in unexpected locations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A great usage of color themes can be found in the &lt;a href="//quizlet.com"&gt;Quizlet&lt;/a&gt; website&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-me-and-my-project"&gt;
  &lt;/a&gt;
  About Me And My Project
&lt;/h2&gt;

&lt;p&gt;Last October, My friend gave me an excellent app idea. I decided to develop it and gained tond of experience regarding app development, project management and product design. I'm planning on posting a lot about this topic later on.&lt;/p&gt;

&lt;p&gt;Check out my project - &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/itays123"&gt;
        itays123
      &lt;/a&gt; / &lt;a href="https://github.com/itays123/partydeck"&gt;
        partydeck
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A cool online card game!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Partydeck - A cool online card game&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;Partydeck&lt;/code&gt; app contains 3 microservices, all connected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The live &lt;code&gt;server&lt;/code&gt;&lt;/strong&gt;, responsible for creating live games, shufling the cards and generating game codes. Powered by Java and the Spring framework.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The live &lt;code&gt;game&lt;/code&gt;&lt;/strong&gt;, the fronend &lt;code&gt;React.js&lt;/code&gt; app that connects to the live server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The game &lt;code&gt;panel&lt;/code&gt;&lt;/strong&gt;, a traditional MERN application to store and manage decks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Want to give it a try?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Go to the game panel url: &lt;a href="https://partydeck-game-panel-iygnk5fpxq-ue.a.run.app" rel="nofollow"&gt;https://partydeck-game-panel-iygnk5fpxq-ue.a.run.app&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Sign up and create a game (or choose one from the public library)&lt;/li&gt;
&lt;li&gt;Click 'play' to create a live game&lt;/li&gt;
&lt;li&gt;Invite your friends to play&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;This software has no open-srouce license, which means the default copyright laws apply to it. Under Github's terms of service, you can view and fork the code for this repository for private use.&lt;/p&gt;
&lt;p&gt;For more information regarding non-licensed softwares: &lt;a href="https://choosealicense.com/no-permission/" rel="nofollow"&gt;https://choosealicense.com/no-permission/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/itays123/partydeck"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>html</category>
      <category>design</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why Do Companies Ask For Passion?</title>
      <author>Nočnica Fee</author>
      <pubDate>Mon, 19 Jul 2021 14:00:56 +0000</pubDate>
      <link>https://dev.to/run-x/why-do-companies-ask-for-passion-46dp</link>
      <guid>https://dev.to/run-x/why-do-companies-ask-for-passion-46dp</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover image from&lt;/em&gt; Passion &lt;em&gt;(1954), public domain. Screenshot by Wayne77.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Popular job advice, especially in highly competitive fields like tech, often states that you should be “passionate” about your work. The word passion gets written into job descriptions all the time. There are plenty of articles on Dev discussing &lt;a href="https://dev.to/mpodlasin/5-things-i-ve-put-on-my-resume-to-stand-out-and-get-a-badass-job-2o1n"&gt;how to demonstrate your passion to employers&lt;/a&gt;, &lt;a href="https://dev.to/ardennl/you-need-a-passion-project"&gt;how to cultivate your passion&lt;/a&gt;, or how to &lt;a href="https://dev.to/heroku/how-do-you-maintain-your-passion-3cc3"&gt;maintain passion through tough times&lt;/a&gt;. While the sentiment originated in white-collar jobs, it’s now so pervasive that you might see a customer service position that requires the applicants to be “passionate about the customer experience”--there are even articles about &lt;a href="https://bizfluent.com/info-8563658-characteristics-employee-passion-customers.html"&gt;how to tell if an employee is passionate enough about it&lt;/a&gt;. If we accept that demanding passion is absurd at the cashier level (do you really want your grocery bagger to be passionately placing each can in your reusable waxed canvas bag), then why is passion considered a prerequisite for so many jobs in tech?&lt;/p&gt;

&lt;p&gt;Asking interviewees to demonstrate passion might be a way to try and predict quality of work--you might assume that someone who loves what they do will do it better than someone who’s just here to get their paycheck. However, it’s pretty easy to play up passion on a resume or in a job interview that you might not feel during a forty hour work week. So why do employers assume that they can gauge someone’s passion, and that passion matters, when it’s fairly easy to falsify?&lt;/p&gt;

&lt;p&gt;A cynical answer might be that an employee who’s claimed that they are passionate (or who--I guess--is actually passionate) might be easier to persuade to work longer hours for the same pay, or pursue work-related research and professional development off the clock. From an accounting perspective, that means you can pay the passionate person less. Someone who puts in a 60 hour week when the job is for 40 hours is technically getting paid about 67% of what they said their hourly rate was--and they’re giving themselves professional development off the clock, which means you don’t necessarily have to pay for conferences and trainings. And so perhaps employers are incentivized to ask for passion so that they can expect you to prove your love by making big sacrifices for the company.&lt;/p&gt;

&lt;p&gt;But even if we assume that employers aren’t trying to get one over on you, there are drawbacks to their seeking only the most passionate employees. Some fields within tech don’t have degree certifications, and must be either learned on the job or self-taught. If the expectation is that hires will have to learn those skills off the clock, in order to demonstrate passion, then employers will lose out on smart, teachable candidates who might have great reasons for not “passionately” pursuing their career outside of work--for example, if they have young children, or have to support elderly relatives, or have illnesses or disabilities that take up much of their non-work time. Sometimes, what employers mistake for passion is actually “plenty of free time” or “some disposable income to spend on personal projects.” This can make passion a metric that inadvertently locks out women, people of color, and working-class people from tech positions where they might otherwise thrive.&lt;/p&gt;

&lt;p&gt;In many fields, the passion requirement ends up screening out candidates who would otherwise be qualified-enough, because they didn’t manage to sufficiently demonstrate their love for doing work for free. Liking your job and doing it well are important, but a great step to diversifying tech would be to back off this endless thirst for endlessly thirsty employees. &lt;/p&gt;

&lt;p&gt;Have you had an employer ask you about your passion for your work? What do you think about passion as a job requirement? Tell me in the comments. &lt;/p&gt;

</description>
      <category>passion</category>
      <category>career</category>
      <category>diversity</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
