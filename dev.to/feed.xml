<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Working with NFT Metadata, IPFS, and Pinata</title>
      <author>Rounak Banik</author>
      <pubDate>Thu, 18 Nov 2021 16:50:54 +0000</pubDate>
      <link>https://dev.to/rounakbanik/working-with-nft-metadata-ipfs-and-pinata-3ieh</link>
      <guid>https://dev.to/rounakbanik/working-with-nft-metadata-ipfs-and-pinata-3ieh</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NFca0Jal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1378sjgjblut105ikbpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NFca0Jal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1378sjgjblut105ikbpm.png" alt="Pinata" width="700" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article serves as a sequel to my tutorial on &lt;a href="https://dev.to/rounakbanik/create-generative-nft-art-with-rarities-1n6f"&gt;creating generative NFT art&lt;/a&gt;. If you haven’t read it, I suggest you do so. I assume your system is already set up (with Python and required packages), and you have used the &lt;a href="https://github.com/rounakbanik/generative-art-nft"&gt;generative-art-nft&lt;/a&gt; library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnoaF9fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xohh1lzo9bgbm7nj4b4l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnoaF9fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xohh1lzo9bgbm7nj4b4l.png" alt="Mekaverse NFTs" width="700" height="233"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous tutorial, you learned how to create a generative art collection with custom rarities. If you followed along with your custom artwork (or used my samples), you should now have a collection of PNG images, and a metadata CSV file that contains information on traits for each image. &lt;/p&gt;

&lt;p&gt;This is a great first step towards creating an NFT collection but we still have a long way to go. The images that we generated exist on our local systems and are not really accessible to anyone. The metadata we generated is ideal for analyzing on Excel but is not in a format that adheres to standards (and by extension, cannot be used by an NFT marketplace platform like OpenSea).&lt;/p&gt;

&lt;p&gt;I will be addressing these issues in this article. More specifically, we will show you how to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Upload Images to IPFS&lt;/li&gt;
&lt;li&gt;Generate compliant JSON NFT metadata&lt;/li&gt;
&lt;li&gt;Upload metadata files to IPFS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Don’t worry if some of these words don’t make sense right now. I will be explaining them as and when required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-nft-minting-works"&gt;
  &lt;/a&gt;
  How NFT Minting Works
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8qWwR412--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2jufo45pbfcn96agssz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8qWwR412--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2jufo45pbfcn96agssz.png" alt="Mekaverse NFTs" width="700" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To understand why we’re doing what we’re doing, we need to understand how NFT minting works. If you know this already, feel free to skip this section.&lt;/p&gt;

&lt;p&gt;Let’s say you want to mint a collection of 10,000 NFTs. What does that really mean?&lt;/p&gt;

&lt;p&gt;This means that you’re writing some code (called a smart contract) that tells the blockchain to initialize a table for you. This table stores ownership and metadata information about your NFTs. More specifically, each row of the table consists of the following information:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Token Identifier (or ID)&lt;/li&gt;
&lt;li&gt;The Owner of the Token&lt;/li&gt;
&lt;li&gt;The Metadata associated with the token &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Yw_TaOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irah15b0q4na6os3h1au.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Yw_TaOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irah15b0q4na6os3h1au.png" alt="Table" width="349" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see here that the &lt;code&gt;ID&lt;/code&gt; is nothing but a unique positive integer that identifies a particular NFT. The &lt;code&gt;Owner&lt;/code&gt; column stores the addresses associated with each NFT’s holder. Finally, the &lt;code&gt;Metadata&lt;/code&gt; is a column that may contain data &lt;em&gt;of&lt;/em&gt; the NFT or &lt;em&gt;about&lt;/em&gt; the NFT. &lt;/p&gt;

&lt;p&gt;It is possible to store the entire image in the &lt;code&gt;Metadata&lt;/code&gt; column of the table. However, &lt;strong&gt;storing data on a blockchain is expensive&lt;/strong&gt;. To give you some context, our collection of 10,000 squirrels occupies a disk space of 600 MB. If we wanted to store 600 MB worth of data on the Ethereum blockchain, it would cost us &lt;strong&gt;$1 million dollars.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is clearly not a great option. Therefore, in most cases, instead of storing data &lt;em&gt;of&lt;/em&gt; the NFT, we instead simply store data &lt;em&gt;about&lt;/em&gt; the NFT. This data (or metadata) is stored in a format called JSON. If you don’t know what JSON is, don’t worry about it. For our purposes, think of them like Python dictionaries (encapsulated in {}) that you encountered in the previous article to define layers.&lt;/p&gt;

&lt;p&gt;This JSON file needs to have information about the NFT such as its name, description, image URL, attributes, etc. In order to make sure that everyone in the ecosystem (including NFT marketplaces like OpenSea) understands what’s in our JSON files, we need to format them in a way that is compliant with the standards. In our case, we will use the &lt;a href="https://docs.opensea.io/docs/metadata-standards"&gt;standards recommended by OpenSea&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a JSON metadata file for a sample NFT.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my-nft.json

{   
   "description": "Friendly OpenSea Creature",      
   "image": "https://opensea-prod.appspot.com/puffs/3.png",  
   "name": "Dave Starbelly",   
   "attributes": [
       { "trait_type": "Base", "value": "Starfish" },      
       { "trait_type": "Eyes", "value": "Big" },      
       { "trait_type": "Mouth","value": "Surprised" },
   ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Storing metadata in this format on the blockchain is still very expensive. Hence, we add an additional layer of abstraction, and upload this JSON to the cloud as well and simply store a URL pointing to the JSON file.&lt;/p&gt;

&lt;p&gt;Therefore, at the end of the data, all you’re storing on the blockchain is &lt;em&gt;&lt;a href="https://mywebsite.com/my-nft.json"&gt;https://mywebsite.com/my-nft.json&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To summarize, here is what we need to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Upload all our images online and get a URL associated with each image. (This URL will go into our metadata).&lt;/li&gt;
&lt;li&gt;Generate a separate JSON file for each image containing metadata in the standard shown above (Image URL, attributes/traits, name, etc.)&lt;/li&gt;
&lt;li&gt;Upload all the JSON files to the cloud and get a URL associated with each JSON file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#uploading-images-to-ipfs"&gt;
  &lt;/a&gt;
  Uploading Images to IPFS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ilB5dBv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qlnglbcvo70cugw0ukx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ilB5dBv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qlnglbcvo70cugw0ukx.png" alt="Uploads" width="700" height="334"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uploading images to the internet is pretty simple. We’re sure you must have used a service like Google Drive, GitHub, or AWS to upload folders to the cloud.&lt;/p&gt;

&lt;p&gt;While uploading images to such centralized services (AWS, Google Drive, your own server, etc.) would work, &lt;strong&gt;it would not be a very good idea.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why not? For two reasons, mainly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#centralized-storage-tends-to-be-location-based"&gt;
  &lt;/a&gt;
  Centralized Storage tends to be location based
&lt;/h3&gt;

&lt;p&gt;Imagine you upload an image of a dog (called dog.jpeg) to a centralized storage service. Your dog image would then be available by accessing a URL (something like &lt;em&gt;&lt;a href="https://mystorage.com/dog.jpeg"&gt;https://mystorage.com/dog.jpeg&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;However, it is very easy to swap this image for another. I could upload another image with the same name (dog.jpeg) that replaces the original image.&lt;/p&gt;

&lt;p&gt;Now, if I visited the same URL as before (&lt;em&gt;&lt;a href="https://mystorage.com/dog.jpeg"&gt;https://mystorage.com/dog.jpeg&lt;/a&gt;&lt;/em&gt;), I will see a different image. You can see why this is not ideal in NFT world. People spend thousands of dollars on NFTs and they would be pissed if you simply replaced an avatar with extremely rare traits with something else.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#centralized-storage-can-be-taken-down"&gt;
  &lt;/a&gt;
  Centralized Storage can be taken down
&lt;/h3&gt;

&lt;p&gt;Let’s say you upload an image to a Google Drive or AWS. If you removed the image from these services or the services themselves shut down, the URL pointing to the image would break. Therefore, it is very easy to pull the rug if your images and data exist on a centralized storage service.&lt;/p&gt;

&lt;p&gt;For these reasons, almost every serious NFT project uses a service called &lt;strong&gt;IPFS (or Interplanetary File System).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IPFS is a peer-to-peer filesharing system that is decentralized, uses content-based addressing, and is secure.&lt;/p&gt;

&lt;p&gt;If none of the words above make sense, don’t worry. All you need to know is this:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ipfs-used-contentbased-addressing"&gt;
  &lt;/a&gt;
  IPFS used content-based addressing
&lt;/h3&gt;

&lt;p&gt;On the IPFS network, the address (URL) of a file will be dependent on the content of the file. If you change the contents of a file, then the address of the file on the IPFS will also change.&lt;/p&gt;

&lt;p&gt;Therefore, on the IPFS network, it is impossible to make one URL point to two different images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ipfs-never-goes-down"&gt;
  &lt;/a&gt;
  IPFS never goes down
&lt;/h3&gt;

&lt;p&gt;Like most decentralized systems (like blockchains), IPFS never goes down. This means that once you’ve uploaded a file (or image) to IPFS, it will always be available as long as at least one node in the network has the file. This means that you cannot pull the rug at will. Nor is there a threat that the system will be shut down.&lt;/p&gt;

&lt;p&gt;We’re not going to go into the nitty-gritties of how IPFS works. If you’re interested, we suggest you give the following two articles a read:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/a-beginners-guide-to-ipfs-20673fedd3f"&gt;https://hackernoon.com/a-beginners-guide-to-ipfs-20673fedd3f&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ipfs.io/how-to/mint-nfts-with-ipfs/#a-short-introduction-to-nfts"&gt;https://docs.ipfs.io/how-to/mint-nfts-with-ipfs/#a-short-introduction-to-nfts&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Uploading to IPFS is as easy as uploading to Google Drive, thanks to a service called &lt;a href="https://www.pinata.cloud/"&gt;Pinata&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.pinata.cloud/signin"&gt;Go to the Pinata website and create an account&lt;/a&gt;. It’s free if you’re uploading up to 1 GB of data.&lt;/p&gt;

&lt;p&gt;Once you have signed up, you will be taken to the Pin Manager window. Upload your folder using the interface. Once you’ve uploaded your folder, you will get a CID associated with it. It should look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--up7NmPiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1lodkdedmqpiuqthu4f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--up7NmPiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1lodkdedmqpiuqthu4f.png" alt="Pinata screen" width="700" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This CID was generated based on the contents of the folder. If the contents of the folder change (an image removed, an image swapped with another of the same name, etc.), the CID will also change.&lt;/p&gt;

&lt;p&gt;For my folder, the CID is QmRvSoppQ5MKfsT4p5Snheae1DG3Af2NhYXWpKNZBvz2Eo.&lt;/p&gt;

&lt;p&gt;Therefore, the IPFS URL for this folder is ipfs://QmRvSoppQ5MKfsT4p5Snheae1DG3Af2NhYXWpKNZBvz2Eo.&lt;/p&gt;

&lt;p&gt;This URL will not open in a browser. In order to do that, you can use a HTTP URL of an IPFS gateway. Try visiting this link: &lt;a href="https://ipfs.io/ipfs/QmRvSoppQ5MKfsT4p5Snheae1DG3Af2NhYXWpKNZBvz2Eo/00001.png"&gt;https://ipfs.io/ipfs/QmRvSoppQ5MKfsT4p5Snheae1DG3Af2NhYXWpKNZBvz2Eo/00001.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will display an image that I named 00001.png and uploaded to my folder.&lt;/p&gt;

&lt;p&gt;Congratulations! That is all there is to uploading images on IPFS using Pinata. For the next step, you will need the CID. Keep that handy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-compliant-nft-json-metadata"&gt;
  &lt;/a&gt;
  Generate compliant NFT JSON metadata
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5VL8Mzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89zlcoejff2kcjb3dis0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5VL8Mzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89zlcoejff2kcjb3dis0.png" alt="Opensea" width="700" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we uploaded our images to IPFS, we now have IPFS URLs for each and every image.&lt;/p&gt;

&lt;p&gt;Our next task is to create a JSON file for each image and populate it with data (including the image URL) in a format that is compliant and understandable by platforms like NFT marketplaces.&lt;/p&gt;

&lt;p&gt;Fortunately, the &lt;a href="https://github.com/rounakbanik/generative-art-nft"&gt;generative-art-nft library&lt;/a&gt; does all the heavy lifting for you.&lt;/p&gt;

&lt;p&gt;Check that the &lt;code&gt;metadata.py&lt;/code&gt; file exists in the repository. If not, clone the latest version of the repository and transfer the &lt;em&gt;assets&lt;/em&gt; and &lt;em&gt;output&lt;/em&gt; folders into the new repo.&lt;/p&gt;

&lt;p&gt;Open the metadata.py file in a text editor. Don’t worry if you don’t understand the code here. The only things you need to fill are &lt;code&gt;BASE_NAME&lt;/code&gt;, &lt;code&gt;BASE_URL&lt;/code&gt;, and &lt;code&gt;BASE_JSON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In line 17, replace &lt;code&gt;←Your CID Code →&lt;/code&gt; with the CID code of the image folder you uploaded to Pinata.&lt;/p&gt;

&lt;p&gt;In line 18, add a base name for your NFTs. This is strictly optional. If you do not add a base name, your NFTs will be named 0, 1, 2, and so on. If you put a base name like &lt;em&gt;“Scrappy Squirrel #”&lt;/em&gt;, your NFTs will be named &lt;em&gt;Scrappy Squirrel #0&lt;/em&gt;, &lt;em&gt;Scrappy Squirrel #1&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;Finally, in line 22, add a description for your collection. Like the base name, this is optional.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adZPT9-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64qehqbu8v11zfi5hdcp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adZPT9-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64qehqbu8v11zfi5hdcp.png" alt="Sample inputs" width="670" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, open a Terminal in this folder and run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python metadata.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The program will ask you the edition to generate metadata for. In our case, it was &lt;strong&gt;v2&lt;/strong&gt;, so that’s what we enter.&lt;/p&gt;

&lt;p&gt;It should take less than 15 seconds to generate 10,000+ JSON files. All these files will be conveniently available in a json folder within your edition folder.&lt;/p&gt;

&lt;p&gt;That’s it for step 2!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upload-json-metadata-files-to-ipfs"&gt;
  &lt;/a&gt;
  Upload JSON metadata files to IPFS
&lt;/h2&gt;

&lt;p&gt;The third step is probably the simplest. Just like you did with the images, upload your &lt;code&gt;json&lt;/code&gt; folder to Pinata.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations! You now have a very good setup for your NFT metadata. The last and most important step is to write a smart contract that can use this metadata and assign ownership to various holders. That is, however, a topic of a future article. Stay tuned!&lt;/p&gt;

&lt;p&gt;If you have any questions or would like us to add additional features to this library, please reach out to us on our Discord server, or drop them in the comments below. We will try to address as many of them as possible.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-scrappy-squirrels"&gt;
  &lt;/a&gt;
  &lt;em&gt;About Scrappy Squirrels&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Scrappy Squirrels is a collection of 10,000+ randomly generated NFTs. Scrappy Squirrels are meant for buyers, creators, and developers who are completely new to the NFT ecosystem.&lt;/p&gt;

&lt;p&gt;The community is built around learning about the NFT revolution, exploring its current use cases, discovering new applications, and finding members to collaborate on exciting projects with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Join our community here:&lt;/strong&gt; &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;https://discord.gg/8UqJXTX7Kd&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>blockchain</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Playing With Tuya API: An API for Pythonistas</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Thu, 18 Nov 2021 16:50:43 +0000</pubDate>
      <link>https://dev.to/unitybuddy/playing-with-tuya-api-an-api-for-pythonistas-2f8c</link>
      <guid>https://dev.to/unitybuddy/playing-with-tuya-api-an-api-for-pythonistas-2f8c</guid>
      <description>&lt;p&gt;Hello, buddies! Recently, I found an interesting API to play with. It's Tuya! Even though Tuya is known for IoT development, there's a hidden side: the Tuya Cloud Development platform, which can help developers in many ways—  especially in marketing your product or whatever.&lt;/p&gt;

&lt;p&gt;Tuya APIs has many services including Email service and SMS service which can be used effectively for marketing and many things. So today we're going to explore how we can use them with Python easily with a few lines of code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tuya-exactly"&gt;
  &lt;/a&gt;
  What is Tuya, exactly?
&lt;/h2&gt;

&lt;p&gt;Tuya Smart is a global IoT development platform that builds interconnectivity standards to bridge the intelligent needs of brands, OEMs, developers, and retail chains across a broad range of smart devices and industries.&lt;/p&gt;

&lt;p&gt;Based on the global public cloud, Tuya connects different intelligent scenarios and smart devices by providing hardware development tools, &lt;strong&gt;integrating public cloud services&lt;/strong&gt;, and offering an intelligent business development platform. &lt;/p&gt;

&lt;p&gt;Great, let's go ahead!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tuya Developer Account. Get it here - &lt;a href="https://developer.tuya.com/en/?_source=b0137273d9769517af96e1f625818fe3"&gt;https://developer.tuya.com/en/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;TuyaOpenAPI. To install,
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pip install tuya-iot-py-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Some basic Python knowledge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-tuya"&gt;
  &lt;/a&gt;
  Setting Up Tuya
&lt;/h2&gt;

&lt;p&gt;After signing up, you will head over to the dashboard. From there, go to 'Cloud' and create a project inserting the following information.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Toq23T4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635854853118/WcUmOaNkZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Toq23T4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635854853118/WcUmOaNkZ.png" alt="image.png" width="877" height="562"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use your Data Center Correctly or it will give bugs as a gift!&lt;/p&gt;

&lt;p&gt;Next, you will be asked to Authorize APIs. They give some APIs by default but we don't need them. So you will have to remove most of them and keep only these five. (You should add the Email service and Short Message Service from the other part)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w1AdfRiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636025698700/NzKhjS9nw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1AdfRiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636025698700/NzKhjS9nw.png" alt="image.png" width="880" height="698"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, it will be a configuration wizard. Follow the given instructions and fill in that too!&lt;/p&gt;

&lt;p&gt;Done, next, it is,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-time"&gt;
  &lt;/a&gt;
  Coding Time!
&lt;/h2&gt;

&lt;p&gt;Great! Now we have set up everything. First, we have to import &lt;code&gt;TuyaOpenAPI&lt;/code&gt; from Tuya Connecter that we installed before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tuya_connector&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="n"&gt;TuyaOpenAPI&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we have to authorize.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;ACCESS_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"*************123"&lt;/span&gt;
&lt;span class="n"&gt;ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"*************56565"&lt;/span&gt;
&lt;span class="n"&gt;API_ENDPOINT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://openapi.tuyain.com"&lt;/span&gt;
&lt;span class="n"&gt;MQ_ENDPOINT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"wss://mqe.tuyacn.com:8285/"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait, you can give stars as Input! Your &lt;code&gt;ACCESS_ID&lt;/code&gt; and &lt;code&gt;ACCESS_KEY&lt;/code&gt; are on your Tuya project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnmRZUnv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635956265616/nTfQyv0yZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnmRZUnv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635956265616/nTfQyv0yZ.png" alt="image.png" width="880" height="306"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3rGz-ZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634213930030/UHXxHnCUR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3rGz-ZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634213930030/UHXxHnCUR.png" alt="image.png" width="670" height="374"&gt;&lt;/a&gt;&lt;br&gt;
Access Secret = Access Key&lt;/p&gt;

&lt;p&gt;Also, make sure that your &lt;code&gt;API_ENDPOINT&lt;/code&gt; is set to your location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wuu3_Lb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634214091378/wkNf_Kk_l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wuu3_Lb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634214091378/wkNf_Kk_l.png" alt="image.png" width="560" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Now we have Init OpenAPI and connect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;openapi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TuyaOpenAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;API_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's the foundation for all 3 services. Now let's play with them one by one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#send-emails"&gt;
  &lt;/a&gt;
  Send Emails 📧
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/messages/mails/actions/push"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;  &lt;span class="s"&gt;"to_address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hello@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"template_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"MAIL_1624531323"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"reply_to_address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hi@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't get confused, lemme explain this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First line of this code is the Request Parameter. Request parameters are used in API operations of the Cloud Development Platform. Tuya supports the following request methods.

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;POST&lt;/code&gt;: Requires the server to perform specified operations.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET&lt;/code&gt;: Requests the server to return specified resources.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUT&lt;/code&gt;: Requests the server to update specified resources.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DELETE&lt;/code&gt;: Requires the server to delete specified resources.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every action has its specific Request parameters. When sending emails, we use the above.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next, we give the email address we need to send the email to. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;template_id&lt;/code&gt; is the ID of an email template. You can make them yourself(I will show you later) or use a public one. Tuya gives 2 public default templates,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MAIL_1624531323&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAIL_1624531338&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;reply_to_address&lt;/code&gt; means the address that the user will send replies to.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then you will just have to run the program. If it is a success, the result would be,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{'result': {'send_status': True}, 'success': True, 't': 1634215134788}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to be sure, check your inbox(If you add your email address to the program).&lt;/p&gt;

&lt;p&gt;But it's not possible to use Tuya's default email templates, we should create one for ourselves too. This code will do it, for sure!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/msg-templates/mails"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Here's your code!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"sender_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Booba"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hey! You're so pretty btw"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"remark"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Isn't it?"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the first line is the request parameter. &lt;code&gt;name&lt;/code&gt; stands for the template name. And the &lt;code&gt;title&lt;/code&gt; is the template title. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;sender_name&lt;/code&gt; is the sender name with 1 to 30 characters. For example, if you set the sender to Buddy, and the sender’s email address to &lt;a href="mailto:yo@example.com"&gt;yo@example.com&lt;/a&gt;. The receiver will see the sender’s address as “Buddy” &lt;a href="mailto:yo@example.com"&gt;yo@example.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content&lt;/code&gt; is the content, which means the HTML format and Text!&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;type&lt;/code&gt; stands for email type. It will handle whether the email should be in the 'Primary' tab or 'Promotions'. There are 3 valid email types,

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt; : verification code. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt; : email notification.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;2&lt;/code&gt; : promotional email.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;remark&lt;/code&gt; is remarks of the application for the email template. Describe your application scenario here!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And yeah, now you can run this code and see the result as well. If it is successful, the result is gonna be like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{'result': {'template_id': 'MAIL_0769019106'}, 'success': True, 't': 1634216025543}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXAeMzRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636878381161/cH6uW6zvl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXAeMzRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636878381161/cH6uW6zvl.gif" alt="Screen Recording (11-9-2021 12-42-25 PM).gif" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#send-short-messages"&gt;
  &lt;/a&gt;
  Send Short Messages 📱
&lt;/h2&gt;

&lt;p&gt;Tuya's SMS service allows you to deploy the messaging service for application-to-user communication worldwide. There are 3 types of SMS you can send to users by Tuya,  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt;: Verification code.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt;: Notification
-&lt;code&gt;2&lt;/code&gt;: Promotional messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not like in Emails, first, we have to create an SMS template as below as Tuya doesn't have any default SMS templates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/msg-templates/sms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"The template of the message verification code"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"You are registering with your phone number. The verification code is: ${code}, valid for 5 minutes."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the same as we created the Email template. the first string is a request parameter. And the dict is for content. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt; is the name of your template.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content&lt;/code&gt; stands for the message content.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;type&lt;/code&gt; is for the type of the message— verification code, notification, or promotional.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end, we print the result and it would be something like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{'result': {'template_id': 'SMS_6195054734'}, 'success': True, 't': 1635956558065}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not the ned, we just created a template. Kindly note that you won't be able to use this template until it is reviewed and allowed. Don't worry, that process will only take 2 days. After that, you can query the details of the SMS template with the below request parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/msg-templates/sms/{template_id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, you can continue the process!&lt;/p&gt;

&lt;p&gt;So now we have to send messages by this code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/messages/sms/actions/push"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s"&gt;"country_code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"94"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"945555555"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"template_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"SMS_3746838509"&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;country_code&lt;/code&gt; is for your country code and don't use the &lt;code&gt;+&lt;/code&gt; mark in that.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;phone&lt;/code&gt; stands for the phone number(s) that you need to send messages. The same rule, &lt;em&gt;no symbols&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;template_id&lt;/code&gt; is the Template ID that you made before, which has been approved.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{'result': 'send_status': True, 'success': True, 't': 1634216025543}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-else-to-do-with-tuyaapi"&gt;
  &lt;/a&gt;
  What else to do with TuyaAPI?
&lt;/h2&gt;

&lt;p&gt;Many things! Tuya is for Smart home applications. But we can do a lot with Tuya's cloud development platform as well! Just like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.tuya.com/en/docs/cloud/voice-message-service?id=Kaiuye86cq53b"&gt;Voice Message Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.tuya.com/en/docs/cloud/app-push?id=Kaiuye3tb3yho"&gt;App Push Notification Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.tuya.com/en/docs/cloud/weather-service?id=Kaiuyesukz1v3"&gt;Weather Service&lt;/a&gt; and many!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Discover more &lt;a href="https://developer.tuya.com/en/docs/cloud"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Almost all of these APIs are used in almost the same manner. Request Parameter and the dict containing everything required. 🕺🕺&lt;/p&gt;

&lt;p&gt;What I love about Tuya is its documentation. They are really clear and easy to understand. Besides, it provides examples and explanations which helps everyone to use it easily! Remember to check them out whenever you're stuck &lt;/p&gt;

&lt;p&gt;So, buddies, that's it! Thanks for reading and Happy Pythoneering!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.tuya.com/en/docs/iot/api-request?id=Ka4a8uuo1j4t4"&gt;https://developer.tuya.com/en/docs/iot/api-request?id=Ka4a8uuo1j4t4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iot.tuya.com/?_source=f117b85de6f7ea6e51c321337da12972"&gt;https://iot.tuya.com/?_source=f117b85de6f7ea6e51c321337da12972&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iot.tuya.com/cloud/?_source=dcc7e84a3e88f1dc506e812dcff2f781"&gt;https://iot.tuya.com/cloud/?_source=dcc7e84a3e88f1dc506e812dcff2f781&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVf25NdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636878863029/IaRFgaE7T.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVf25NdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636878863029/IaRFgaE7T.png" alt="Copy of STRINGS.png" width="880" height="96"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>API Prototyping for Salesforce with Postman</title>
      <author>Michael Bogan</author>
      <pubDate>Thu, 18 Nov 2021 16:34:34 +0000</pubDate>
      <link>https://dev.to/salesforcedevs/api-prototyping-for-salesforce-with-postman-2m6f</link>
      <guid>https://dev.to/salesforcedevs/api-prototyping-for-salesforce-with-postman-2m6f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Whether you’re a longtime Salesforce developer, new to the platform, or just need to integrate your system of choice to Salesforce, Postman brings you all the tools you need to make the process easier, faster, and more streamlined.&lt;/p&gt;

&lt;p&gt;In this article, we’ll show how Postman can help you start building the core of your API-driven integration on &lt;strong&gt;both&lt;/strong&gt; sides of the API—either as the provider or the consumer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developing-salesforce-apis"&gt;
  &lt;/a&gt;
  Developing Salesforce APIs
&lt;/h2&gt;

&lt;p&gt;While Salesforce has several pre-built applications for key business tasks such as Sales, Service, and Marketing, in this post we’ll focus on the capability of Salesforce as a development platform, with its own programming language: Apex.&lt;/p&gt;

&lt;p&gt;Salesforce can expose custom-coded services to third party applications, either as SOAP web services or REST APIs. In our demo, we will develop a very lightweight REST API and demonstrate how Postman can speed up that process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-postman-accelerates-development"&gt;
  &lt;/a&gt;
  How Postman accelerates development
&lt;/h2&gt;

&lt;p&gt;One of the most popular use cases for Postman is to explore the API of third-party apps, to better understand how to submit requests, and what to expect for responses. By seeing the requests and responses, developing your own code for handling these APIs becomes much easier. We can also develop a mock server implementation of our own API, one that generates expected responses. In this way, we don’t need to wait for a “real” implementation of the API before we can start developing for it. By using Postman’s tools for API development, we can rapidly prototype a Salesforce REST API &lt;em&gt;before&lt;/em&gt; the API—and the code that uses it—has completed development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bringing-it-together"&gt;
  &lt;/a&gt;
  Bringing it together
&lt;/h2&gt;

&lt;p&gt;As our first step, we'll use one of Postman’s most powerful features: mock servers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mock-servers"&gt;
  &lt;/a&gt;
  Mock servers
&lt;/h3&gt;

&lt;p&gt;A mock server is a lightweight server interface that responds to your API requests realistically, allowing you to quickly and easily get a valid response without worrying too much about the details. With Postman, you can start a mock server that responds to HTTP requests of your design in a very short time, with no coding required. By pointing your code at this mock server, you can write and test your API consumer code.&lt;/p&gt;

&lt;p&gt;We’ll be using the Desktop client for our examples, but everything here should be equally applicable with Postman’s web client. Mock Servers can be found within your Workspace in Postman.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-and-configuring-the-mock-server"&gt;
  &lt;/a&gt;
  Creating and configuring the mock server
&lt;/h3&gt;

&lt;p&gt;Click on &lt;em&gt;Create Mock Server&lt;/em&gt; to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFlFMDOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eglbquqjtl48fvd3xoja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFlFMDOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eglbquqjtl48fvd3xoja.png" alt="" width="564" height="621"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we can start defining the HTTP requests we’d like to mock. By specifying the HTTP request method, URL, response code, and response body, we can tell Postman how to respond to requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IC5erwR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miiziwjtuml2zfw3omdo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IC5erwR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miiziwjtuml2zfw3omdo.png" alt="" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, we’re mocking a request for a Salesforce Account record. Rather than hardcoding a Salesforce account &lt;code&gt;id&lt;/code&gt;, we’re using Postman’s ability to use variables. By matching the variable in both the request and the response, we can return whatever value was supplied in the request. We’ll use this feature in more detail later.&lt;/p&gt;

&lt;p&gt;For now, we will just mock that one request and click the &lt;em&gt;Next&lt;/em&gt; button to finalize our Mock Server setup with a few more parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWrQnP_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glc9xrxhwaa2k1o51mn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWrQnP_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glc9xrxhwaa2k1o51mn7.png" alt="" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides naming the mock server, we’ll just stick to the defaults and click the &lt;em&gt;Create Mock Server&lt;/em&gt; button. This will create our mock server instance with a unique URL for receiving requests, as illustrated below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUKoX04q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzj6d7l8sidujfkw4buc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUKoX04q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzj6d7l8sidujfkw4buc.png" alt="" width="880" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we selected the option to save the mock server URL as an environment variable, however, there is an easier way to reference this. If we expand the environment dropdown in the top-right of Postman, we will see that an environment was automatically created for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Us-lkrJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzgvzntaiv9o5bq2dcc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Us-lkrJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzgvzntaiv9o5bq2dcc2.png" alt="" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we select this environment, the mock server URL is automatically populated for us in a parameter called &lt;code&gt;{{url}}&lt;/code&gt;. The process of creating a new mock server also created a new Postman collection for us. That collection has our request, and the request is ready for us to populate with parameters where applicable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Us-lkrJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzgvzntaiv9o5bq2dcc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Us-lkrJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzgvzntaiv9o5bq2dcc2.png" alt="" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we select this request, we see the user interface for building our request. By replacing the &lt;code&gt;{{accountId}}&lt;/code&gt; variable in the request with an example &lt;code&gt;id&lt;/code&gt; and sending the request, we should receive a response from our Mock Server that repeats that &lt;code&gt;id&lt;/code&gt; back to us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tKjrsHyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqn6mkmnh6vs4git1o50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tKjrsHyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqn6mkmnh6vs4git1o50.png" alt="" width="880" height="707"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extending-the-mock-response"&gt;
  &lt;/a&gt;
  Extending the mock response
&lt;/h3&gt;

&lt;p&gt;Now that we have our basic mock server working, we can extend the responses to be more meaningful and realistic. Expand the example request in our collection from the Workspace tree view, and click on the example (currently called “Default”).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IAoXwAhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqdc5zwqv04vosahexbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IAoXwAhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqdc5zwqv04vosahexbe.png" alt="" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’re going to make some changes to how the mock server responds to this request. The &lt;code&gt;attributes&lt;/code&gt; field is not essential. We’re just simulating how Salesforce would respond.&lt;/p&gt;

&lt;p&gt;In the response body tab in the bottom section, replace the contents with the following JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "attributes" : 
    {
      "type" : "Account",
      "url" : "/services/data/v53.0/sobjects/Account/accountId"
    },
  "Id" : "{{accountId}}",
  "Name" : "{{$randomCompanyName}}"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how we made use of Postman’s convenient &lt;code&gt;$randomCompanyName&lt;/code&gt; variable. Many useful variables can be used to generate example data, documented &lt;a href="https://learning.postman.com/docs/writing-scripts/script-references/variables-list/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the response headers tab in the bottom section, add a &lt;code&gt;Content-Type&lt;/code&gt; key with the value &lt;code&gt;application/json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Click &lt;em&gt;Save&lt;/em&gt; to update the example response. The mock server will now respond with the updated response to the request we made earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d4xU4TKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x860gw5capzi8csivjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d4xU4TKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x860gw5capzi8csivjq.png" alt="" width="880" height="639"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, we can add additional requests and examples to our collection. Click the ellipsis (&lt;code&gt;...&lt;/code&gt;) icon next to our collection name and select &lt;em&gt;Add request&lt;/em&gt; to generate a new one. Then, click the ellipsis icon next to the new request and select &lt;em&gt;Add example&lt;/em&gt;. This adds a new example response that the mock server will serve to your request. You can build a new mock server response in the same way as previously—by specifying new paths, HTTP verbs, and responses—until you’ve drafted your API.  At this point, we can even test the API from outside of Postman - one of the quickest ways to do this is via Postman’s code snippet functionality.  This allows for equally rapid development of code to consume the API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#snippets"&gt;
  &lt;/a&gt;
  Snippets
&lt;/h3&gt;

&lt;p&gt;Postman provides example code for calling your APIs, mock or otherwise, in several languages and libraries. With a request selected in your workspace, click the &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; icon on the right to expand the code snippet menu. From here, you can select a suitable language/library combination and see the example code to call your API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;CORS&lt;/a&gt; is enabled for Postman mock servers. As a result, you can stub your web apps with mocked data using the mock endpoints. Development or production web apps can then make requests to your Postman mock endpoint and receive example responses.&lt;/p&gt;

&lt;p&gt;The code snippet will resolve variables where it can. In our example, where we use the &lt;code&gt;{{url}}&lt;/code&gt; variable to reference our Mock Server, this is expanded for us. This is shown in the JavaScript Fetch code example below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iUQtkXpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2agksw5m336dzlti424u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iUQtkXpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2agksw5m336dzlti424u.png" alt="" width="682" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt; this code snippet, as generated from Postman, has a small error.  HTTP GET requests sent via Fetch should &lt;strong&gt;not&lt;/strong&gt; set a body in the request.  For our testing, we will need to remove line 5 in the example above.  Below is the updated code, wrapped in a lightweight HTML page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;script&amp;gt;
            var raw = "";

            var requestOptions = {
            method: 'GET',
            redirect: 'follow'
            };

            fetch("https://768bb73c-2824-49fa-8787-3967ce6ea0c1.mock.pstmn.io//Account/001000000WCFB8", requestOptions)
            .then(response =&amp;gt; response.text())
            .then(result =&amp;gt; console.log(result))
            .catch(error =&amp;gt; console.log('error', error));
        &amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;p&amp;gt;Check the browser console to see the output from our mock server.&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p6FxAVCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9edy2qo268p9i73yxa5s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p6FxAVCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9edy2qo268p9i73yxa5s.png" alt="" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article, we’ve looked at the basics of setting up a Mock Server in Postman—from creating the mock server and a sample response to extending it with more meaningful JSON data and adding additional responses. We’ve also seen how simple it is to generate code snippets that show how to consume the API in the language/platform of your choice. Code snippets greatly aid the development of your own tools that utilize your API.&lt;/p&gt;

&lt;p&gt;With the tools that Postman provides, we can provide a technical requirement to both our Salesforce developers implementing the API and our developers on other platforms communicating with Salesforce as part of an integration.&lt;/p&gt;

&lt;p&gt;There is a wealth of further resources available for working with both Postman and Salesforce. Some of the ones relevant to what we’ve covered here can be found below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/kZOwHyCl9sY"&gt;Building a mock API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/n_7UUghLpco"&gt;Mock Servers: The Exploratory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/7NA-7TGqsNc"&gt;Integrating With a Custom Salesforce App in Postman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_rest.htm"&gt;Exposing Apex Classes as REST WebServices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://trailhead.salesforce.com/en/content/learn/modules/postman-api-client"&gt;Salesforce Trailhead: Postman API Client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Aumentar la productividad con extensiones en Gnome</title>
      <author>Luis Moreno</author>
      <pubDate>Thu, 18 Nov 2021 16:15:42 +0000</pubDate>
      <link>https://dev.to/luismorenomx/aumentar-la-productividad-con-extensiones-en-gnome-4b9e</link>
      <guid>https://dev.to/luismorenomx/aumentar-la-productividad-con-extensiones-en-gnome-4b9e</guid>
      <description>&lt;p&gt;Hay muchas extensiones en Gnome que son de mi agrado y creo que las de este listado son mis favoritas.&lt;/p&gt;

&lt;p&gt;Compartir estos recursos es porque tengo intensión en todo momento de incrementar la productividad a la hora de estar desarrollando software.&lt;/p&gt;

&lt;p&gt;No sé si en otros entornos de escritorio se pueda mejorar la productividad, lo que sí sé es que en Gnome ha ido mejorando todo poco a poco y se agradece.&lt;br&gt;
Y por eso acá dejo los plugins que les recomiendo bajar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Caffeine&lt;/strong&gt;- Disable the screensaver and auto suspend&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/3997/app-grid-tweaks/"&gt;https://extensions.gnome.org/extension/3997/app-grid-tweaks/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desktop Icons&lt;/strong&gt;- Add icons to the desktop&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/779/clipboard-indicator/"&gt;https://extensions.gnome.org/extension/779/clipboard-indicator/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multi Monitors AddOn&lt;/strong&gt;- Add multiple monitors overview and panel for gnome-shell.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/921/multi-monitors-add-on/"&gt;https://extensions.gnome.org/extension/921/multi-monitors-add-on/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tilix Dropdown&lt;/strong&gt;- Launch Tilix in Quake mode.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/1185/tilix-dropdown/"&gt;https://extensions.gnome.org/extension/1185/tilix-dropdown/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dash to dock&lt;/strong&gt;- Moves the dash out of the overview transforming it in a dock.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/307/dash-to-dock/"&gt;https://extensions.gnome.org/extension/307/dash-to-dock/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenWeather&lt;/strong&gt;- Display weather information from &lt;a href="https://openweathermap.org/"&gt;https://openweathermap.org/&lt;/a&gt;&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/750/openweather/"&gt;https://extensions.gnome.org/extension/750/openweather/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App Grid Tweaks&lt;/strong&gt;- Customize the application grid view.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/3997/app-grid-tweaks/"&gt;https://extensions.gnome.org/extension/3997/app-grid-tweaks/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clipboard Indicator&lt;/strong&gt;- Adds a clipboard indicator to the top panel, and caches clipboard history.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/779/clipboard-indicator/"&gt;https://extensions.gnome.org/extension/779/clipboard-indicator/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Custom Hot Corners&lt;/strong&gt;- Customizable hot corners.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/1362/custom-hot-corners/"&gt;https://extensions.gnome.org/extension/1362/custom-hot-corners/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desktop Scroller&lt;/strong&gt;- Switch between desktops scrolling at the upper edge of the screen, including in overview.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/3709/desktop-scroller-gnome-338/"&gt;https://extensions.gnome.org/extension/3709/desktop-scroller-gnome-338/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gTile&lt;/strong&gt;- Tile windows on a grid.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/28/gtile/"&gt;https://extensions.gnome.org/extension/28/gtile/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Screenshot Tool&lt;/strong&gt;- Conveniently create, copy, store and upload screenshots.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/1112/screenshot-tool/"&gt;https://extensions.gnome.org/extension/1112/screenshot-tool/&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>linux</category>
      <category>gnome</category>
      <category>productivity</category>
    </item>
    <item>
      <title>40+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs [Beginners - Advance] </title>
      <author>Jarvis</author>
      <pubDate>Thu, 18 Nov 2021 16:09:12 +0000</pubDate>
      <link>https://dev.to/jvs/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-fd0</link>
      <guid>https://dev.to/jvs/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-fd0</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;40+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs &lt;/a&gt;&lt;/b&gt; &lt;/p&gt;






</description>
    </item>
    <item>
      <title>CodeCom 2021: A Creative Coding Competition</title>
      <author>Hudson Gouge</author>
      <pubDate>Thu, 18 Nov 2021 16:01:00 +0000</pubDate>
      <link>https://dev.to/hg0428/codecom-2021-a-creative-coding-competition-pi8</link>
      <guid>https://dev.to/hg0428/codecom-2021-a-creative-coding-competition-pi8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#codecom-2021"&gt;
  &lt;/a&gt;
  🎉  CodeCom 2021  🖥️
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81"&gt;
  &lt;/a&gt;
  ━━━━━━━━━━━━━━━━
&lt;/h1&gt;

&lt;p&gt;Join us for our 2nd annual CodeCom, December 1st – 14th. &lt;br&gt;
You can submit on our Discord Server or on Repl.it using &lt;strong&gt;# codecom&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1st Place: $20 + choice of Discord Nitro OR Replit Hacker Plan + More&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;🥏    &lt;strong&gt;CodeCom&lt;/strong&gt;    ⌚️&lt;br&gt;
&lt;strong&gt;━━━━━━━━━━━━━━━━&lt;/strong&gt;&lt;br&gt;
Every year we host a large coding competition. Each year the theme is different, but the magic stays the same. The competition is very open-ended, so creativity is front and center. We try to make it accessible to all yet fun for even the most advanced. We try to make things, that most people would never think about making.     🍃      The prizes are great too, a gift card of your choice, for 1st, 2nd, and 3rd places. And it is free to enter!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We hope to see you soon!&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://eps.hg0428.repl.co/CodeCom"&gt;https://eps.hg0428.repl.co/CodeCom&lt;/a&gt;&lt;br&gt;
&lt;a href="https://discord.gg/KqhqnHrrZJ"&gt;https://discord.gg/KqhqnHrrZJ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>contest</category>
      <category>creativity</category>
      <category>fun</category>
    </item>
    <item>
      <title>Building Open-Source Metrics Stores with Cube</title>
      <author>Igor Lukanin</author>
      <pubDate>Thu, 18 Nov 2021 15:51:30 +0000</pubDate>
      <link>https://dev.to/cubejs/building-open-source-metrics-stores-with-cube-3fpj</link>
      <guid>https://dev.to/cubejs/building-open-source-metrics-stores-with-cube-3fpj</guid>
      <description>&lt;p&gt;&lt;em&gt;TL;DR: You can build a consistent and reusable metrics layer and connect it to a front-end app and a BI tool like Superset or Tableau at the same time.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today, &lt;a href="http://github.com/cube-js/cube.js"&gt;Cube&lt;/a&gt; powers analytics features inside thousands of applications where developers have leveraged Cube’s data schema as a &lt;strong&gt;metrics layer&lt;/strong&gt;—a consistent, single source of truth. By powering a single repository of metrics, Cube helps developers quickly and reliably ship embedded analytics features and other data-powered applications with the peace of mind that their metrics definitions remain consistent.&lt;/p&gt;

&lt;p&gt;Cube solves this problem very well for application developers, but it’s been unsolved for users of dashboards and business intelligence tools, and the data engineering teams that support them.&lt;/p&gt;

&lt;p&gt;In most modern organizations, there are multiple tools that consume data from the same single warehouse but perform their own downstream metrics calculations. This leads to inconsistent calculations and disagreements between teams: &lt;strong&gt;How do we calculate revenue? Does it include revenue from X cohort? How do monthly payments affect annual projections?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The more tools an organization uses, the more inconsistencies and conflicts arise, and the harder it is for a business to make decisions using accurate data. To avoid this, they need a centralized, upstream location in which to build and maintain their metrics, so that every tool works from the same source of metric truth.&lt;/p&gt;

&lt;p&gt;Today, I’m excited to share a way for Cube to function as a metrics store for any data consumer: we’re proud to announce the new &lt;a href="https://cube.dev/docs/backend/sql/?ref=introducing-cube-sql"&gt;Cube SQL API&lt;/a&gt;. With the addition of this API, Cube now functions as a headless BI layer to provide consistent metrics to any querying and visualization tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5AB6Qx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/ebff03e0-fbcd-4941-9a3c-cc71b6142561.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5AB6Qx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/ebff03e0-fbcd-4941-9a3c-cc71b6142561.png" alt="data-flow-diagram" width="880" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;In the modern data stack, Cube acts as a proxy for data warehouses and translates every incoming query, whether it is JSON, GraphQL, or SQL, into native queries to the underlying data storage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTC6QK8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/e47e56c8-07ee-4330-8b6a-e899244cbac1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTC6QK8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/e47e56c8-07ee-4330-8b6a-e899244cbac1.png" alt="sql-generation" width="880" height="376"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cube translates queries by using a JSON-based data modeling layer consisting of cubes. Think of these as database views, backed by either a reference to an existing database table or a new table created by SELECT statement. Cubes contain defined measures and dimensions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Measures&lt;/strong&gt; are quantitative data, such as the number of units sold, unique visits, profit, and so forth. &lt;strong&gt;Dimensions&lt;/strong&gt; are categorical data, such as state, gender, product name, or units of time. (You can learn more about Cube’s &lt;a href="https://cube.dev/docs/schema/getting-started?ref=introducing-cube-sql"&gt;data schema&lt;/a&gt; in the docs.)&lt;/p&gt;

&lt;p&gt;Below is an example of the cube we can use to describe metrics about leads for a sales organization.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Leads`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    SELECT
      persons.id,
      persons.created_date,
      deals.id as deal_id
    FROM persons
      LEFT JOIN deals ON deals.person_id = persons.id
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Leads`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Leads for Insides Sales`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;measures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`count`&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;converted_to_deal_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`count`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;is_converted_to_deal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;) = true`&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;to_deal_conversion_rate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`number`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`ROUND(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;converted_to_deal_count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; / NULLIF(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, 0) * 100, 2)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`percent`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`created`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`time`&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;is_converted_to_deal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`boolean`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`deal_id IS NOT NULL`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the above definitions of our metrics we can ask questions like &lt;strong&gt;"What is our monthly lead-to-deal conversion rate over the last year?"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we query Cube’s metrics layer via the SQL API, cubes will be presented as tables and measures and dimensions as columns. To answer the above question with SQL we need to write the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;DATE_TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'month'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="n"&gt;to_deal_conversion_rate&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;leads&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="s1"&gt;'2021-01-01'&lt;/span&gt;
  &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="s1"&gt;'2021-12-31'&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cube will translate this query into the query for the underlying database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
  &lt;span class="n"&gt;DATETIME_TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;DATETIME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;created_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'America/Los_Angeles'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;MONTH&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;`leads__time_month`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;ROUND&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;deal_id&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;NULLIF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;`leads__to_deal_conversion_rate`&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
      &lt;span class="n"&gt;persons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;persons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;deals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;deal_id&lt;/span&gt;
     &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt;
      &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;deals&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;deals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;person_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="nv"&gt;`leads`&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;created_date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2021-01-01T00:00:00.000Z'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;created_date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2021-12-31T23:59:99.999Z'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;span class="k"&gt;LIMIT&lt;/span&gt;
  &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can query Cube with SQL from your favorite programming language, such as Python.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXMGIGQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2b0d23c8-37fa-4550-8c99-53196c832a26.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXMGIGQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2b0d23c8-37fa-4550-8c99-53196c832a26.gif" alt="jupiter" width="880" height="575"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most powerfully, because the Cube SQL API speaks MySQL-compatible SQL, you also can connect your favorite BI tool—like Superset, Metabase, or Tableau—directly to Cube, and let Cube generate SQL to fetch and display data. Here’s an example of using Superset with the Cube SQL API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ivv2odPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/a775a871-8e89-451c-afb1-671b6dd22e3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ivv2odPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/a775a871-8e89-451c-afb1-671b6dd22e3f.png" alt="superset" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check our documentation for the full &lt;a href="https://cube.dev/docs/recipes/using-apache-superset-with-cube-sql?ref=introducing-cube-sql"&gt;Superset integration tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#builtin-relational-cache"&gt;
  &lt;/a&gt;
  Built-in relational cache
&lt;/h2&gt;

&lt;p&gt;Every query can leverage Cube’s pre-aggregations layer—a database-agnostic materialization engine—in order to make dashboards and reports load in milliseconds instead of minutes.&lt;/p&gt;

&lt;p&gt;While defining metrics, developers can specify which metrics they want to pre-aggregate. Cube will run complex calculations beforehand in the background and will create a cache table with the results. All queries will be served from this cache table, dramatically increasing dashboards’ performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-we-go-next"&gt;
  &lt;/a&gt;
  Where we go next
&lt;/h2&gt;

&lt;p&gt;We’re excited about today’s launch, but it is only the beginning of the journey!  We’re committed to supporting all the major SQL operations, and improving error handling to provide more useful tips to users. Please let us know in our Slack channel if you see something that is not working as you expected.&lt;/p&gt;

&lt;p&gt;Everything described here is available in Cube’s OSS offering, licensed under Apache 2.0. In addition, we're working on cataloguing and collaboration tools for the Cube metrics layer in Cube Cloud, our fully-managed Cube service. Watch this space.&lt;/p&gt;

&lt;p&gt;If you’re interested in learning more, &lt;a href="https://cube.dev?ref=introducing-cube-sql"&gt;please give Cube a try&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Prisma Data Platform's PlanetScale Integration </title>
      <author>etnoctua</author>
      <pubDate>Thu, 18 Nov 2021 15:30:09 +0000</pubDate>
      <link>https://dev.to/planetscale/prisma-data-platforms-planetscale-integration-j3d</link>
      <guid>https://dev.to/planetscale/prisma-data-platforms-planetscale-integration-j3d</guid>
      <description>&lt;p&gt;As developers, we often want to build faster, but that comes with tradeoffs that we have to deal with in the long run. At PlanetScale, we want to empower developers to be able to build without having to worry about issues of database scalability as their application grows. Similarly, Prisma wants to empower developers to efficiently work with data while making fewer errors. &lt;/p&gt;

&lt;p&gt;PlanetScale and Prisma have partnered up to allow developers to create PlanetScale databases in the new &lt;a href="https://www.prisma.io/dataplatform"&gt;Prisma Data Platform&lt;/a&gt;. You can have a starter database schema and a live PlanetScale database ready to accept thousands of new database connections with a few clicks.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.prisma.io/dataplatform"&gt;Prisma Data Platform&lt;/a&gt; provides you with application templates with Prisma data schemas, so you don't even have to think about a data model to get started. Once set up, you can deploy to Vercel immediately or use the Prisma Data Explorer and Query Builder to explore your PlanetScale database.&lt;/p&gt;

&lt;p&gt;Try out creating your first &lt;a href="https://auth.planetscale.com/sign-up"&gt;PlanetScale&lt;/a&gt; database with one of the application templates and experience the power of &lt;a href="https://www.prisma.io/dataplatform"&gt;Prisma&lt;/a&gt; with PlanetScale for yourself.&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>programming</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Basics of MongoDB</title>
      <author>Moises E Liria Rosario</author>
      <pubDate>Thu, 18 Nov 2021 15:29:53 +0000</pubDate>
      <link>https://dev.to/moreno8423/basics-of-mongodb-2lme</link>
      <guid>https://dev.to/moreno8423/basics-of-mongodb-2lme</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JxqbvS8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5567fn7jzumaujixh02o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JxqbvS8i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5567fn7jzumaujixh02o.png" alt="Image description" width="880" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you may know, there are many databases that use the "&lt;a href="https://moeslink.com/learning-the-structure-query-language-sql/"&gt;Structure Query Language SQL&lt;/a&gt;" as their base language. Now we are going to learn about one database that is not based on SQL. That database is MongoDB. As we mentioned  MongoDB is not based on SQL. It's more based on a syntax similar to "JavaScript Object Notation JSON." This tutorial is going to get you through the basics of MongoDB. We are going to learn all the necessary MongoDB to Implement on our applications. By now we assume that you have some &lt;a href="https://moeslink.com/intro-to-javascript-for-web-development/"&gt;JavaScript&lt;/a&gt; knowledge; especially some JSON. Let us start learning MongoDB; It's going to be fun.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h3&gt;

&lt;p&gt;As we stated before, MongoDB is  a NoSQL database system. MongoDB Main purpose is to ease application development and scaling. There are many ways to run MongoDB; The two most used ones are "MongoDB Atlas," and Locally Installed MongoDB. Now We are going to show. you how to use MongoDB in both of these ways.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mongodb-atlas"&gt;
  &lt;/a&gt;
  MongoDB Atlas
&lt;/h3&gt;

&lt;p&gt;MongoDB Atlas is one way of implementing MongoDB. The  main advantage of MongoDB Atlas is that we can create and use our databases in the cloud. We first need to create an account in &lt;a href="https://www.mongodb.com/atlas/database"&gt;MongoDB Atlas&lt;/a&gt;. Then we create organizations and clusters. Once we create a cluster in an organization we are ready to use our database.   Most times they provide a unique string that serves to connect the database to our application. This tutorial is only about MongoDB. In some other tutorials we are going to create an application and connect it to MongoDB Atlas. Now we are only going to see how to create clusters in MongoDB Atlas. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-mongodb-atlas-account"&gt;
  &lt;/a&gt;
  Creating MongoDB Atlas Account
&lt;/h3&gt;

&lt;p&gt;In order to create a MongoDB Atlas Account, We only need to go to their website and create the account. The image below shows you their  home page. You can create an account in their web site just like in any other. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1-gauvTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i49b695a2gyocl0sqil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-gauvTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i49b695a2gyocl0sqil.png" alt="Image description" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-mongodb-atlas-organization"&gt;
  &lt;/a&gt;
  Creating a MongoDB Atlas Organization
&lt;/h3&gt;

&lt;p&gt;Once we create an account on the MongoDB Atlas website, we can create an organization. That task is quite easy. There are many other images below that shows you how to create an organization in MongoDB Atlas. It also shows you a running cluster; but don't worry about that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FTweAD4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ft0d3jhx730h1isbyo7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FTweAD4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ft0d3jhx730h1isbyo7.png" alt="Image description" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OFnjHARM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhiqlwg4br66zqra4wl7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OFnjHARM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhiqlwg4br66zqra4wl7.png" alt="Image description" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-a-cluster"&gt;
  &lt;/a&gt;
  Creating a Cluster
&lt;/h4&gt;

&lt;p&gt;The two previous images show you how to create an organization in MongoDB. Once you create an organization, you can create a database cluster in your organization. That cluster is the one that is going to hold your database. The following images show you the steps to create a database cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---nSCCFbN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m7pfug44focjinu2fgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---nSCCFbN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m7pfug44focjinu2fgb.png" alt="Image description" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBcftXQ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjp5jfvnibcrpvsxxjky.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBcftXQ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjp5jfvnibcrpvsxxjky.png" alt="Image description" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3V5TeYUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yrs33pdnrq5rmrcauq7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3V5TeYUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yrs33pdnrq5rmrcauq7.png" alt="Image description" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c-LDbYLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftaprk8z6fgsh5y9rt4v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c-LDbYLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftaprk8z6fgsh5y9rt4v.png" alt="Image description" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--niJPZzYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xna5enqb5jfgv5tle403.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--niJPZzYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xna5enqb5jfgv5tle403.png" alt="Image description" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-your-database-cluster"&gt;
  &lt;/a&gt;
  Using Your Database Cluster
&lt;/h4&gt;

&lt;p&gt;After you finish with all the steps shown in the images above. You can use your database. MongoDB Atlas provide you a string to use your database in your project. Another set of images below show you how to use your database cluster. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jyJjYNWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8lzkeczzm40rkwonidzf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jyJjYNWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8lzkeczzm40rkwonidzf.png" alt="Image description" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4KAhnpg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxk300gpxtxjp71dh1ih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4KAhnpg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxk300gpxtxjp71dh1ih.png" alt="Image description" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJuROixI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/672y29m93k6t3476ahmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJuROixI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/672y29m93k6t3476ahmf.png" alt="Image description" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The images above show you how to use a MongoDB Atlas database in your application. As you could see there is a string that we can include in our application in order to use the database. If you followed the steps that we showed you in the images, you could also see  some other methods to connect your database. You can choose the  one you need.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#locally-installed-mongodb"&gt;
  &lt;/a&gt;
  Locally Installed MongoDB
&lt;/h3&gt;

&lt;p&gt;We could see above that we can use MongoDB in the cloud. Although it's quite easy to MongoDB in the cloud, my preferred method is to locally install MongoDB. Maybe you occupy some storage in your computer; but you will have everything locally while working in your projects. We only need to install and initialize MongoDB to start using it locally. We can install mongoDB in Windows, MacOS, and Linux.  As you should know these are the most used operating systems.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installing-mongodb-on-windows"&gt;
  &lt;/a&gt;
  Installing MongoDB on Windows
&lt;/h4&gt;

&lt;p&gt;Installing MongoDB on Windows is an easy task. That is because  you only need to download the MongoDB installer from the  &lt;a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/"&gt;MongoDB Download Center&lt;/a&gt;. After you download the installer, you install MongoDB following the instructions of the installer.  For Most operating systems we use MongoDB  Community Edition. It's free, and by now it's also all you need.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installing-mongodb-on-macos"&gt;
  &lt;/a&gt;
  Installing MongoDB on MacOS
&lt;/h4&gt;

&lt;p&gt;It's a little bit more tricky to install MongoDB in MacOS. That's because  in MacOS you don't use an installer; you install MongoDB from the terminal. You also need to have in your system the Xcode command line tool and &lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;.  Once you have everything installed, you can install MongoDB  by typing the following commands in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew tap mongodb/brew

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Command above is going to get the official MongoDB version from Homebrew. Then you can install MongoDB in your system with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;mongodb-community@5.0

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see this command is going to install  MongoDB Community Version 5.0. That is the current version at the time of this tutorial. You can install the version you desire once a new version is available.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#initialize-mongodb"&gt;
  &lt;/a&gt;
  Initialize MongoDB
&lt;/h4&gt;

&lt;p&gt;The commands you saw above show you how to install MongoDB in your system. After the installation you will not be able to use MongoDB unless you initialize it. Some people install MongoDB and spend time trying to use without initializing and not getting any results.  To initialize MongoDB, you only need to type the following command in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew services start mongodb-community@5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That command is going to initialize MongoDB in your system, and you will be able to start working  with MongoDB databases in your system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mongodb-first-steps"&gt;
  &lt;/a&gt;
  MongoDB First Steps
&lt;/h3&gt;

&lt;p&gt;The steps we mentioned above were all to set the MongoDB environment. After you set one of the two work environments, you can start working with MongoDB. The MongoDB shell mongosh is the one responsible for MongoDB database management. In order to start using MongoDB, we only need to type the mongosh command in our terminal. Once we type the mongosh command in our terminal we can see  MongoDB environment and start working.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ % mongosh
Current Mongosh Log ID: 6192ada3da035d7a9f0013b8
Connecting to:      mongodb://127.0.0.1:27017/?directConnection&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&amp;amp;serverSelectionTimeoutMS&lt;span class="o"&gt;=&lt;/span&gt;2000
Using MongoDB:      5.0.2
Using Mongosh:      1.0.6

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

&lt;span class="nt"&gt;------&lt;/span&gt;
   The server generated these startup warnings when booting:
   2021-11-15T07:46:36.293-05:00: Access control is not enabled &lt;span class="k"&gt;for &lt;/span&gt;the database. Read and write access to data and configuration is unrestricted
&lt;span class="nt"&gt;------&lt;/span&gt;

Warning: Found ~/.mongorc.js, but not ~/.mongoshrc.js. ~/.mongorc.js will not be loaded.
  You may want to copy or rename ~/.mongorc.js to ~/.mongoshrc.js.

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#available-databases"&gt;
  &lt;/a&gt;
  Available Databases
&lt;/h3&gt;

&lt;p&gt;In the section above you could start the MongoDB environment by only typing the mongosh command. By now you should ignore some warnings. Later you can update your system if required. Then you can start working on your MongoDB environment. The first thing we are going to do is seeing the already existing databases in the system. In order to see all databases in the system, we only need to type the show dbs command as you can see below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; show dbs
admin    0.000GB
config   0.000GB
&lt;span class="nb"&gt;local    &lt;/span&gt;0.000GB
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some of the databases we can see after we type the command, are created by default in MongoDB. We are going to create our own databases and work with them. To create a database in MongoDB, we only need to type the use command followed by the database name we desire. In this case we are going to create a database called customers.  &lt;/p&gt;

&lt;p&gt;Take note that when we type the use command it's going to create a database with the name we typed if a database with that name does not exist. If there is a database with that name, the system will assume you want to use the existing database. To create the customers database we only need to type use customers. Then the system will create a database called customers as you can see in the following example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; use customers
switched to db customers
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-database-collections"&gt;
  &lt;/a&gt;
  Creating Database Collections
&lt;/h3&gt;

&lt;p&gt;Once we create a MongoDB Database, you can start inserting data in your database. Data in MongoDB is stored in collections; not in tables as the SQL based  databases. There are many ways of creating a collection. All these ways include the db.createCollection() function. Now we are going to show you the two most used ways of creating a collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
customers&amp;gt; db.createCollection&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"domesticCustomers"&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;customerName: String, customerGender: String,
 customerCity: String, customerAge: Numbe&lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="o"&gt;{&lt;/span&gt; ok: 1 &lt;span class="o"&gt;}&lt;/span&gt;

customers&amp;gt; db.createCollection&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foreignCustomers"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; ok: 1 &lt;span class="o"&gt;}&lt;/span&gt;
customers&amp;gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example above shows you two ways of creating collections.  In the first one you specified the fields and types of data to be used. The second one only creates a collection without any specified fields.  Although you could see a confirmation that collection was created { ok: 1 }, you can also confirm the creation of your collections using the command show collections as you can see in the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; show collections
domesticCustomers
foreignCustomers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#json-and-bson"&gt;
  &lt;/a&gt;
  JSON and BSON
&lt;/h3&gt;

&lt;p&gt;Starting this tutorial we specified that data in MongoDB is stored in collections. We also specified that in MongoDB we use syntax similar to JSON. That syntax is called "Binary JSON" or BSON. BSON is similar to JSON; but it's more like an encoded serialization of JSON. We can find useful information in the &lt;a href="https://bsonspec.org/"&gt;BSON website&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inserting-data-into-collections"&gt;
  &lt;/a&gt;
  Inserting Data into Collections
&lt;/h3&gt;

&lt;p&gt;Now that we know that MongoDB data is stored in BSON, it's time to insert some data into our collections. The two most used functions to insert data into MongoDB are insertOne() and insertMany(). Previous versions of MongoDB used the insert() function. That  function still work; but it's going to be deprecated soon. We can use the mentioned functions with the syntax db.collection.insertOne, or db.collection.insertMany(). Where db refers to database, and collection is the collection name. now let us insert some data into our collections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; db.domesticCustomers.insertOne&lt;span class="o"&gt;({&lt;/span&gt; customerName: &lt;span class="s2"&gt;"John Smith"&lt;/span&gt;, CustomerGender:&lt;span class="s2"&gt;"Male"&lt;/span&gt;, CustomerCity: &lt;span class="s2"&gt;"Washington"&lt;/span&gt;, customerAge: 35&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;
  acknowledged: &lt;span class="nb"&gt;true&lt;/span&gt;,
  insertedId: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"6195101d4543a38e25ba68c3"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


customers&amp;gt; db.domesticCustomers.insertMany&lt;span class="o"&gt;([{&lt;/span&gt;customerName: &lt;span class="s2"&gt;"Jackeline Johnson"&lt;/span&gt;, CustomerGender:&lt;span class="s2"&gt;"Female"&lt;/span&gt;, CustomerCity: &lt;span class="s2"&gt;"Los Angeles"&lt;/span&gt;, customerAge: 42&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;customerName: &lt;span class="s2"&gt;"James Peterson"&lt;/span&gt;, CustomerGender:&lt;span class="s2"&gt;"Male"&lt;/span&gt;, CustomerCity: &lt;span class="s2"&gt;"New York"&lt;/span&gt;, customerAge: 27&lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;customerName: &lt;span class="s2"&gt;"Peter Parker"&lt;/span&gt;, CustomerGender:&lt;span class="s2"&gt;"Male"&lt;/span&gt;, CustomerCity: &lt;span class="s2"&gt;"Chicago"&lt;/span&gt;, customerAge: 22&lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;customerName: &lt;span class="s2"&gt;"Sarah Reynolds"&lt;/span&gt;, CustomerGender:&lt;span class="s2"&gt;"Female"&lt;/span&gt;, CustomerCity: &lt;span class="s2"&gt;"Detroit"&lt;/span&gt;, customerAge: 30&lt;span class="o"&gt;}])&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;
  acknowledged: &lt;span class="nb"&gt;true&lt;/span&gt;,
  insertedIds: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'0'&lt;/span&gt;: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619512824543a38e25ba68c4"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s1"&gt;'1'&lt;/span&gt;: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619512824543a38e25ba68c5"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s1"&gt;'2'&lt;/span&gt;: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619512824543a38e25ba68c6"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s1"&gt;'3'&lt;/span&gt;: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619512824543a38e25ba68c7"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#data-id"&gt;
  &lt;/a&gt;
  Data ID
&lt;/h3&gt;

&lt;p&gt;You could see in the example above that we inserted data using the two most used functions. We inserted only one record or object with the insertOne() function. After that we inserted an array of objects or records using the insertMany() function. Once you insert the objects into your collections,  you can see that system returned their ID. In MongoDB all objects contain an unique ID auto assigned by the system. You don't have to worry about assigning a PRIMARY KEY as in SQL; In MongoDB you have it automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visualizing-data"&gt;
  &lt;/a&gt;
  Visualizing Data
&lt;/h3&gt;

&lt;p&gt;After we insert data into any MongoDB collection, we can visualize it using the find() function. In case you have a lot of objects and want to find only one containing certain data, you can use the findOne() function. Also if you want to find many objects containing similar data you can use the findMany() function. As we have only two collections with only a few records, the example below is going to show you how to use the find() function. You can use these function with a syntax similar to the insert functions. db.collection.find(), db.collectionfindOne(), db.collection.findMany(). As you may already know collection is the collection name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; db.domesticCustomers.find&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"6195101d4543a38e25ba68c3"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    customerName: &lt;span class="s1"&gt;'John Smith'&lt;/span&gt;,
    CustomerGender: &lt;span class="s1"&gt;'Male'&lt;/span&gt;,
    CustomerCity: &lt;span class="s1"&gt;'Washington'&lt;/span&gt;,
    customerAge: 35
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619512824543a38e25ba68c4"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    customerName: &lt;span class="s1"&gt;'Jackeline Johnson'&lt;/span&gt;,
    CustomerGender: &lt;span class="s1"&gt;'Female'&lt;/span&gt;,
    CustomerCity: &lt;span class="s1"&gt;'Los Angeles'&lt;/span&gt;,
    customerAge: 42
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619512824543a38e25ba68c5"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    customerName: &lt;span class="s1"&gt;'James Peterson'&lt;/span&gt;,
    CustomerGender: &lt;span class="s1"&gt;'Male'&lt;/span&gt;,
    CustomerCity: &lt;span class="s1"&gt;'New York'&lt;/span&gt;,
    customerAge: 27
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619512824543a38e25ba68c6"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    customerName: &lt;span class="s1"&gt;'Peter Parker'&lt;/span&gt;,
    CustomerGender: &lt;span class="s1"&gt;'Male'&lt;/span&gt;,
    CustomerCity: &lt;span class="s1"&gt;'Chicago'&lt;/span&gt;,
    customerAge: 22
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619512824543a38e25ba68c7"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    customerName: &lt;span class="s1"&gt;'Sarah Reynolds'&lt;/span&gt;,
    CustomerGender: &lt;span class="s1"&gt;'Female'&lt;/span&gt;,
    CustomerCity: &lt;span class="s1"&gt;'Detroit'&lt;/span&gt;,
    customerAge: 30
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find-functions-with-parameters"&gt;
  &lt;/a&gt;
  Find Functions with Parameters
&lt;/h3&gt;

&lt;p&gt;We can also use some parameters to find a record. Most times we use the ID to find any specific record. That is because the ID is unique. The findOne() function is going to find the first object containing the specified information, while the findMany() function is going to find all the records with similar information in the specified fields. The example below is going to use the find function with the _id parameter. You will find a only one record with the specified ID. In case we use findOne() or findMany() even the find() function, we can use different parameters not only the _id.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
customers&amp;gt; db.domesticCustomers.find&lt;span class="o"&gt;({&lt;/span&gt;  _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619512824543a38e25ba68c4"&lt;/span&gt;&lt;span class="o"&gt;)})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619512824543a38e25ba68c4"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    customerName: &lt;span class="s1"&gt;'Jackeline Johnson'&lt;/span&gt;,
    CustomerGender: &lt;span class="s1"&gt;'Female'&lt;/span&gt;,
    CustomerCity: &lt;span class="s1"&gt;'Los Angeles'&lt;/span&gt;,
    customerAge: 42
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-objects-differently"&gt;
  &lt;/a&gt;
  Creating Objects differently
&lt;/h3&gt;

&lt;p&gt;When we created the two collections in our database, you could see that we specified the fields in only one. The other collection we only specified the name. That is because we can insert as many fields as we want in any collection. Remember that MongoDB works with documents; not with tables as SQL. in the example below we are going to insert one object with one more field in the domesticCustomers collection. We are also going to insert some objects in the foreignCustomers collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; db.domesticCustomers.insertOne&lt;span class="o"&gt;({&lt;/span&gt;customerName: &lt;span class="s2"&gt;"Jose Martinez"&lt;/span&gt;, customerGender: &lt;span class="s2"&gt;"Male"&lt;/span&gt;, customerCity: &lt;span class="s2"&gt;"Madison"&lt;/span&gt;, customerAge: 33, customerEtnicy: &lt;span class="s2"&gt;"Hispanic"&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  acknowledged: &lt;span class="nb"&gt;true&lt;/span&gt;,
  insertedId: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"61953e0a4543a38e25ba68c8"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we successfully could enter another object containing an extra field. If we use the find() function for the collection, we are going to see another field similar to the one below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"61953e0a4543a38e25ba68c8"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    customerName: &lt;span class="s1"&gt;'Jose Martinez'&lt;/span&gt;,
    customerGender: &lt;span class="s1"&gt;'Male'&lt;/span&gt;,
    customerCity: &lt;span class="s1"&gt;'Madison'&lt;/span&gt;,
    customerAge: 33,
    customerEtnicy: &lt;span class="s1"&gt;'Hispanic'&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we can insert as many  fields as we want for any object in our collections. Now we are going to insert many records in the foreignCustomers collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; db.foreignCustomers.insertMany&lt;span class="o"&gt;([{&lt;/span&gt;customerName: &lt;span class="s2"&gt;"Pedro Lopez"&lt;/span&gt;,  customerCountry: &lt;span class="s2"&gt;"Mexico"&lt;/span&gt;, customerPayment: 10000&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;customerName: &lt;span class="s2"&gt;"Francois  Pierre"&lt;/span&gt;,  customerCountry: &lt;span class="s2"&gt;"France"&lt;/span&gt;, customerPayment: 50000&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;customerName: &lt;span class="s2"&gt;"Mustafa Ali"&lt;/span&gt;,  customerCountry: &lt;span class="s2"&gt;"Pakistan"&lt;/span&gt;, customerPayment: 30000, customerPlaces: 7&lt;span class="o"&gt;}])&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  acknowledged: &lt;span class="nb"&gt;true&lt;/span&gt;,
  insertedIds: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'0'&lt;/span&gt;: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619541e24543a38e25ba68c9"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s1"&gt;'1'&lt;/span&gt;: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619541e24543a38e25ba68ca"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s1"&gt;'2'&lt;/span&gt;: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619541e24543a38e25ba68cb"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can see the results using the find() function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; db.foreignCustomers.find&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619541e24543a38e25ba68c9"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    customerName: &lt;span class="s1"&gt;'Pedro Lopez'&lt;/span&gt;,
    customerCountry: &lt;span class="s1"&gt;'Mexico'&lt;/span&gt;,
    customerPayment: 10000
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619541e24543a38e25ba68ca"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    customerName: &lt;span class="s1"&gt;'Francois  Pierre'&lt;/span&gt;,
    customerCountry: &lt;span class="s1"&gt;'France'&lt;/span&gt;,
    customerPayment: 50000
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619541e24543a38e25ba68cb"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    customerName: &lt;span class="s1"&gt;'Mustafa Ali'&lt;/span&gt;,
    customerCountry: &lt;span class="s1"&gt;'Pakistan'&lt;/span&gt;,
    customerPayment: 30000,
    customerPlaces: 7
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#another-way-of-creating-collections"&gt;
  &lt;/a&gt;
  Another way of creating collections
&lt;/h3&gt;

&lt;p&gt;The examples above show you how to insert data into collections already created. In case we want to insert data into another collection we can create a collection even without using the db.createCollection()  function. We just need to specify the name of the collection we want to create while inserting the data. The example below is going to create a new collection called customerProducts and insert data at the same time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; db.customerProducts.insertMany&lt;span class="o"&gt;([{&lt;/span&gt;production:&lt;span class="s2"&gt;"rice"&lt;/span&gt;, meat: &lt;span class="s2"&gt;"beef"&lt;/span&gt;, quantityInPounds: 500&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;production:&lt;span class="s2"&gt;" beans"&lt;/span&gt;, meat: &lt;span class="s2"&gt;"chicken"&lt;/span&gt;, quantityInPouns: 800&lt;span class="o"&gt;}])&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  acknowledged: &lt;span class="nb"&gt;true&lt;/span&gt;,
  insertedIds: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'0'&lt;/span&gt;: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619544d84543a38e25ba68cc"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    &lt;span class="s1"&gt;'1'&lt;/span&gt;: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619544d84543a38e25ba68cd"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can  use the commands show collections and see there is a new collection; also we can use the find() function with the new collection as you can see below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; show collections
customerProducts
domesticCustomers
foreignCustomers


customers&amp;gt; db.customerProducts.find&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619544d84543a38e25ba68cc"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    production: &lt;span class="s1"&gt;'rice'&lt;/span&gt;,
    meat: &lt;span class="s1"&gt;'beef'&lt;/span&gt;,
    quantityInPounds: 500
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    _id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619544d84543a38e25ba68cd"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
    production: &lt;span class="s1"&gt;' beans'&lt;/span&gt;,
    meat: &lt;span class="s1"&gt;'chicken'&lt;/span&gt;,
    quantityInPouns: 800
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#updating-data-in-mongodb"&gt;
  &lt;/a&gt;
  Updating Data in MongoDB
&lt;/h3&gt;

&lt;p&gt;We can also update data in MongoDB using some functions. The functions we use to update data are the updateOne(), the updateMany() and we can also use the replaceOne() function. We use a syntax similar to the insert and find() functions. db.collection.updateOne(), db.collection.updateMany(), and db.collection.replaceOne(). Here we only show you the updateOne() function using the _id as parameter to update. The other functions work similar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; db.domesticCustomers.updateOne&lt;span class="o"&gt;({&lt;/span&gt;_id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"619512824543a38e25ba68c5"&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;,
 &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$set&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;customerName: &lt;span class="s2"&gt;"James Thomason"&lt;/span&gt;, CustomerCity: &lt;span class="s2"&gt;"Boston"&lt;/span&gt;&lt;span class="o"&gt;}})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  acknowledged: &lt;span class="nb"&gt;true&lt;/span&gt;,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we could update one object in our collection using the updateOne() function. We first declared the id, and then we set the new values. If you type the find() function, you can see the new results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deleting-data-in-mongodb"&gt;
  &lt;/a&gt;
  Deleting Data in MongoDB
&lt;/h3&gt;

&lt;p&gt;As in any other database we can delete data in MongoDB. We can delete any data by using the delete functions. These functions are  deleteOne() and deleteMany(). The syntax is similar to the other functions we already used. Now we are going to show you how to delete any object using the deleteOne function.  As you may think, we are going to delete the object by ID&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; db.domesticCustomers.deleteOne&lt;span class="o"&gt;({&lt;/span&gt;_id: ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"6195101d4543a38e25ba68c3"&lt;/span&gt;&lt;span class="o"&gt;)})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; acknowledged: &lt;span class="nb"&gt;true&lt;/span&gt;, deletedCount: 1 &lt;span class="o"&gt;}&lt;/span&gt;
customers&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we deleted only one object. If you use the find() function, you won't see the John Smith field.  As the _Id is an unique value, deleting and updating by ID is a good practice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deleting-all-objects-in-a-collection"&gt;
  &lt;/a&gt;
  Deleting All Objects in a Collection
&lt;/h3&gt;

&lt;p&gt;Before deleting all  objects in a collection we need to know if the database have some important information. Now we can delete all objects in any collection because this practice data. Working in the field you would need to know if it's ok to delete all data in a collection. We can delete all data in a collection with only one function. That function is the remove()  function. We only type empty braces {} as parameter in the remove() function in order remove everything from the collection. The example below shows you how to remove everything from the customerProducts collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; db.customerProducts.remove&lt;span class="o"&gt;({})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; acknowledged: &lt;span class="nb"&gt;true&lt;/span&gt;, deletedCount: 2 &lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you try to use the find() function in the collection, you will find nothing. The collection will be empty. This function still works; but you can get a deprecation warning and some other suggestions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deleting-a-collection"&gt;
  &lt;/a&gt;
  Deleting a Collection
&lt;/h3&gt;

&lt;p&gt;The previous example shows you how to delete all data in a collection. We can also delete the whole collection and  all the data in the collection is going to be deleted with it. In order to delete any collection we only need to use the  drop() function. We can use this function as many other functions described above. db.collection.drop(). Now we are going to delete the foreignCustomer collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; db.foreignCustomers.drop&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see once we drop the collection, it will return true. In case it returns false you did not delete any collection. Now if we use the show collections command, we can see the other collections. The one we deleted is not there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deleting-a-database"&gt;
  &lt;/a&gt;
  Deleting  a Database
&lt;/h3&gt;

&lt;p&gt;Before deleting a database we need to know what information it has Now we can delete a practice database;  in a professional environment you need to know before deleting. We can use the dropDatabase() function to delete any database. Now we can delete the same database we have been working with. The customers database. We use the dropDatabase() function in the following way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;customers&amp;gt; db.dropDatabase&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt; ok: 1, dropped: &lt;span class="s1"&gt;'customers'&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final Notes
&lt;/h3&gt;

&lt;p&gt;By now you have seen the basics of MongoDB.  This  information is very useful for MongoDB database development. You saw that MongoDB works with documents not with tables; so  it's very different than SQL. Also we need to be advised that MongoDB is case sensitive. In case you have any misspelled field, or any upper/lower case difference; MongoDB will automatically create a new one with the information we entered. In order to avoid that, we can use a MongoDB ODM. &lt;a href="https://mongoosejs.com"&gt;Mongoose&lt;/a&gt; and &lt;a href="https://mongodb.github.io/node-mongodb-native/api-generated/mongoclient.html"&gt;MongoClient&lt;/a&gt; are  very  popular MongoDB ODMs.&lt;/p&gt;

&lt;p&gt;Although MongoDB can be used in many environments, it's widely used in &lt;a href="https://moeslink.com/introduction-to-nodejs-and-express/"&gt;Nodejs&lt;/a&gt;. This information is only the basics of MongoDB. There is a free &lt;a href="https://university.mongodb.com/"&gt;MongoDB University &lt;/a&gt;website where we can learn with all of their free courses. Thanks for visiting our blog. We hope you learned a lot in this tutorial.&lt;/p&gt;

&lt;p&gt;More at &lt;a href="https://moeslink.com/"&gt; Moe's Link &lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>javascript</category>
      <category>mongodb</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Configurar virtualhost en Apache y Debian 10</title>
      <author>Luis Moreno</author>
      <pubDate>Thu, 18 Nov 2021 15:27:22 +0000</pubDate>
      <link>https://dev.to/luismorenomx/configurar-virtualhost-en-apache-y-debian-10-3p9e</link>
      <guid>https://dev.to/luismorenomx/configurar-virtualhost-en-apache-y-debian-10-3p9e</guid>
      <description>&lt;p&gt;Hay veces que desarrollamos más de un proyecto web en la misma computadora y para eso necesitamos configurar nuestro equipo de tal modo que se puedan tener varios proyectos dentro de la misma carpeta, pero con diferente ruta de acceso desde el navegador y para eso yo realice lo siguiente.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#habilitar-un-archivo-de-configuraci%C3%B3n-para-el-nuevo-dominio"&gt;
  &lt;/a&gt;
  Habilitar un archivo de configuración para el nuevo dominio
&lt;/h2&gt;

&lt;p&gt;Copiar el archivo &lt;code&gt;000-default.conf&lt;/code&gt; a otro (en este caso será blog.local) con el nombre blog.local.conf&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/blog.local.conf 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Editar el archivo &lt;code&gt;blog.local.conf&lt;/code&gt; y dejarlo como a continuación se muestra (recuerda cambiar 'user' por tu usuario local).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;  
   ServerName blog.local    
   ServerAlias blog.local   
   ServerAdmin webmaster@localhost  
   DocumentRoot /home/user/Server/blog  
   ErrorLog ${APACHE_LOG_DIR}/error.log 
   CustomLog ${APACHE_LOG_DIR}/access.log combined
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deshabilitar dominio Default&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo a2dissite 000-default
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Habilitar el dominio creado&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo a2ensite blog.local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y para que Apache2 reconozca los cambios anteriores debes reiniciar el servicio.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl reload apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configurar-la-carpeta-documentroot"&gt;
  &lt;/a&gt;
  Configurar la carpeta DocumentRoot
&lt;/h2&gt;

&lt;p&gt;Para este momento el dominio ya está habilitado, solo falta decir a dónde debe de entrar cuando queramos ver el sitio. Para esto debemos editar el archivo de configuración de Apache2.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo vim /etc/apache2/apache2.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y dejarlo similar a esto que tenemos a continuación. Nótese que yo comenté el Directorio default para poder mover todos mis proyectos en una carpeta ubicada dentro de los archivos del usuario local.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#&amp;lt;Directory /var/www/&amp;gt;
#   Options Indexes FollowSymLinks
#   AllowOverride None
#   Require all granted
#&amp;lt;/Directory&amp;gt;

&amp;lt;Directory /home/user/Server/&amp;gt;  
   Options Indexes FollowSymLinks   
   AllowOverride None   
   Require all granted
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora debemos darle los permisos adecuados y cambiar al propietario del directorio nuevo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo chmod -R 777 /home/$USER/Server
sudo chown -R www-data:www-data /home/$USER/Server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agregar usuario local al grupo www-data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo useradd -g www-data $USER
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verificamos que se haya agregado el usuario&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep ^www-data /etc/group
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y debemos ver algo como esto…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;www-data:x:33:miusuario
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#agregar-el-dominio-en-el-archivo-hosts"&gt;
  &lt;/a&gt;
  Agregar el dominio en el archivo hosts
&lt;/h2&gt;

&lt;p&gt;Aquí ya tienes configurado, habilitado y definido la ruta de acceso para tu domino, pero te falta decirle al Sistema Operativo que debe buscar primeramente el dominio en tu servidor local antes de buscarlo por la web cuando lo escribas como URL en tu browser.&lt;/p&gt;

&lt;p&gt;Por eso, debes de editar del siguiente modo el archivo hosts…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo vim /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y dejarlo similar a esto…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;127.0.0.1   localhost127.0.1.1  MYDESKTOP
# The following lines are desirable for IPv6 capable
hosts::1     localhost 
ip6-localhost 
ip6-loopbackff02::1 
ip6-allnodesff02::2 
ip6-allrouters

127.0.0.1 blog.local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hacer-prueba-de-servicio"&gt;
  &lt;/a&gt;
  Hacer prueba de servicio
&lt;/h2&gt;

&lt;p&gt;Suponiendo que has llegado hasta aquí sin problema, entonces crea un archivo con un texto aleatorio dentro de la carpeta creada para este nuevo dominio y agrégale cualquier cosa para verla desde el navegador.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo 'prueba de dominio' &amp;gt; /home/$USER/Server/blog/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suponiendo que todo es correcto entonces tu browser entrará sin problema alguno escribiendo en la URL &lt;code&gt;blog.local&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hasta aquí he terminado. Solo que debo comentar que los permisos que le dimos anteriormente a la carpeta creada para nuestros proyectos, esto es meramente para usarlo como entorno de desarrollo.&lt;/p&gt;

&lt;p&gt;Recuerda que para desplegar tus proyectos a producción debes considerar la seguridad del lugar donde los alojes.&lt;/p&gt;

&lt;p&gt;Espero que sirva de algo. A mí me servirá de mucho para futuras configuraciones de mis entornos de desarrollo.&lt;/p&gt;

&lt;p&gt;Chao! 📝🐧&lt;/p&gt;

</description>
      <category>linux</category>
      <category>webdev</category>
      <category>howto</category>
    </item>
    <item>
      <title>Making Functional Google Search Page Clone in HTML and CSS</title>
      <author>SnowBit</author>
      <pubDate>Thu, 18 Nov 2021 15:26:57 +0000</pubDate>
      <link>https://dev.to/snowbit/making-working-google-search-page-clone-in-html-and-css-287a</link>
      <guid>https://dev.to/snowbit/making-working-google-search-page-clone-in-html-and-css-287a</guid>
      <description>&lt;p&gt;Hello 👋, I am here again with a new amazing article on the &lt;strong&gt;Making of Google Search Page Clone&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6cxy5bW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5y12i573r0ns324cun3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6cxy5bW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5y12i573r0ns324cun3.png" alt="Clone" width="880" height="404"&gt;&lt;/a&gt;&lt;br&gt;
Can you guess, is this Real or Clone page? (Comment down🙂)&lt;/p&gt;

&lt;p&gt;So, let's gets started 🥳&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;index.html&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;center&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"assets/logo.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Google Logo"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img-fluid google-logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"search-bar shadow-sm mt-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-search icon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"buttons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"gBtn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Google Search&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"gBtn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;I'm Feeling Luck&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"languages mt-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"langText"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Google offered in: &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"languagesInList"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;English&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"languagesInList"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Spanish&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"languagesInList"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;French&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"languagesInList"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;عربي&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

                    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was the skeleton structure of the page; It's time to style it 🏳️‍🌈&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;style.css&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;contenteditable&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.google-logo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;270px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.search-bar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#e3e3e3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.icon&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#9aa0a6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.input&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.87&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;word-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;break-word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;34px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* .... */&lt;/span&gt;
&lt;span class="c"&gt;/* Whole code at https://github.com/snowbit-coderboi/Google-Search-Page-Clone */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For JavaScript code - &lt;a href="https://github.com/snowbit-coderboi/Google-Search-Page-Clone"&gt;Visit the GitHub Repository&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this is it; You have just made clone of &lt;strong&gt;Google Search Page&lt;/strong&gt; 🎉&lt;/p&gt;

&lt;p&gt;Check out demo: &lt;a href="https://snowbit-coderboi.github.io/Google-Search-Page-Clone"&gt;https://snowbit-coderboi.github.io/Google-Search-Page-Clone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This page might get updated when you visit the project, so make sure to check out GitHub Repository and star it to save&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;GitHub Repository: &lt;a href="https://github.com/snowbit-coderboi/Google-Search-Page-Clone"&gt;snowbit-coderboi/Google-Search-Page-Clone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was it; Once again congrats for making Google Search Page Clone&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>[HIRING] Java mid/senior from Eastern Europe</title>
      <author>CrewNew Team</author>
      <pubDate>Thu, 18 Nov 2021 15:21:14 +0000</pubDate>
      <link>https://dev.to/crewnew/hiring-java-midsenior-from-eastern-europe-5n6</link>
      <guid>https://dev.to/crewnew/hiring-java-midsenior-from-eastern-europe-5n6</guid>
      <description>&lt;p&gt;Hey, looking for a full-time mid/senior Java, Spring dev from Eastern-Europe. Good spoken/written English is needed. Salary $2500 - $3000. Fully remote. Visiting Estonia preferred once in a while (paid). Small 2 person dev team. Friendly and relaxed working culture. Apply here: apply.crewnew.com/?p=121&amp;amp;f=LinkedIn_88&amp;amp;q=26-31-23 &lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
