<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Day 13 of 100DaysOfCode:Regular Expressions</title>
      <author>Durga Pokharel</author>
      <pubDate>Wed, 06 Jan 2021 14:46:04 +0000</pubDate>
      <link>https://dev.to/iamdurga/day-13-of-100daysofcode-regular-expressions-1pc3</link>
      <guid>https://dev.to/iamdurga/day-13-of-100daysofcode-regular-expressions-1pc3</guid>
      <description>&lt;p&gt;This is my 13 day of #100daysofcode. Today I learned more about CSS properties like create a gradual CSS linear gradient, use a linear gradient to create a striped element, create texture by adding a subtle pattern as a background image, use the CSS transform scale property to change the size of an image, use the CSS transform scale property to scale an element on hover etc from &lt;a href="https://www.freecodecamp.org/learn/responsive-web-design/applied-accessibility/"&gt;freecodecamp.&lt;/a&gt;&lt;br&gt;
 Also I learned something about web access to python from &lt;a href="https://www.coursera.org/learn/python-network-data/exam/BENWm/regular-expressions?redirectToCover=true"&gt;Coursera.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is my code of this day&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#spam-confidence" class="anchor"&gt;
  &lt;/a&gt;
  Spam Confidence
&lt;/h1&gt;

&lt;p&gt;Regular expression referred to as "regex" or "regexp", provides a concise and flexible means for matching strips of text. My code is start with importing regular expression as re as given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After that we open the file as hand and I build the list to put the number. I started the loop after that I strip line. We going to look findall . Look for the line start with X quit it will be stop in the blank. Then it will start extracting 0 through 9 for floating number bracket one or more time and the we end extracting. There is exactly one extraction. If there is no extraction then this code run empty extraction. This stuff is the list of the matches. If there will be more than one that type of floating number go through below and choose the maximum one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;hand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mbox-short.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;numlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'^X-DSPAM-Confidence: ([0-9.]+)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;numlist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Maximum:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numlist&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;blockquote class="twitter-tweet"&gt;
&lt;br&gt;
&lt;p&gt;Day 13 of &lt;a href="https://twitter.com/hashtag/100dysofcode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100dysofcode&lt;/a&gt; and &lt;a href="https://twitter.com/hashtag/Python?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Python&lt;/a&gt; &lt;br&gt;* More about CSS properties including create a gradual css linear gradient , use a css linear gradient to create a striped element, create texture by adding a subtle pattern as a background image..&lt;br&gt;* More about python to access web data &lt;a href="https://t.co/Mg2vXHWnoa"&gt;pic.twitter.com/Mg2vXHWnoa&lt;/a&gt;&lt;/p&gt;‚Äî Durga Pokharel (@mathdurga) &lt;a href="https://twitter.com/mathdurga/status/1346825510488166401?ref_src=twsrc%5Etfw"&gt;January 6, 2021&lt;/a&gt;&lt;br&gt;
&lt;/blockquote&gt; 

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>python</category>
    </item>
    <item>
      <title>Interact with the Command Line using "process.argv" in NodeJS</title>
      <author>Anna "Apero" McDougall üè≥Ô∏è‚Äçüåà</author>
      <pubDate>Wed, 06 Jan 2021 14:15:37 +0000</pubDate>
      <link>https://dev.to/annajmcdougall/interact-with-the-command-line-using-process-argv-in-nodejs-2doi</link>
      <guid>https://dev.to/annajmcdougall/interact-with-the-command-line-using-process-argv-in-nodejs-2doi</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;a href="http://www.twitter.com/AnnaJMcDougall"&gt;Follow Me on Twitter @AnnaJMcDougall&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of the really cool things I'm discovering about NodeJS is that it allows us to interact more directly with computers, and enables the production of tools using the CLI (Command Line Interface: you may know it as the Terminal).&lt;/p&gt;

&lt;p&gt;Just as how &lt;a href="https://dev.to/annajmcdougall/reading-and-writing-files-directories-in-nodejs-using-the-fs-core-module-225c"&gt;yesterday I wrote about the core module &lt;code&gt;fs&lt;/code&gt;&lt;/a&gt; to achieve some basic file manipulation, today we'll look at one of &lt;em&gt;the&lt;/em&gt; big methods in the &lt;code&gt;process&lt;/code&gt; core module: &lt;code&gt;argv&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-raw-process-endraw-core-module" class="anchor"&gt;
  &lt;/a&gt;
  What is the &lt;code&gt;process&lt;/code&gt; core module?
&lt;/h2&gt;

&lt;p&gt;This module tends to cover anything involving the actual running of Node scripts. It allows us to do things like terminate the program using &lt;code&gt;process.exit()&lt;/code&gt;, for example. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-raw-argv-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;argv&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;The method &lt;code&gt;process.argv&lt;/code&gt; basically captures what the user has typed into the command line or terminal when the programme runs. It returns us an array of each term entered which was separated by a space. If you're familiar with JavaScript string methods, it basically takes the command entered into the terminal, splits it by spaces, and then returns that array.&lt;/p&gt;

&lt;p&gt;For example, if we run this code in the Terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node index.js a b c
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;process.argv&lt;/code&gt; will return:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Program Files&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;nodejs&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;node.exe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;exercises&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we see the path for node, then the path of the file we're running, and then each of the arguments we've entered into the command line.&lt;/p&gt;

&lt;p&gt;The really cool thing about this is that it means if we run a simple slice command, we can pull out whatever the user has entered, and then use that in the program they run.&lt;/p&gt;

&lt;p&gt;For example, we could make a quick and dirty madlibs like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;verb&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; was taking a nice stroll 
along the river when suddenly 
&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;s appeared and 
began to &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;verb&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Line 1 uses destructuring to assign the four words entered by the user to those variables. So now we can enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node index.js Bob 42 frog dig
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We now have a fun little story pop out the other end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Bob was taking a &lt;span class="nb"&gt;nice &lt;/span&gt;stroll
along the river when suddenly
42 frogs appeared and
began to dig!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This might seem a relatively silly example, but this allows us access to the command line and to using typed values in our programmes in all sorts of ways, opening up a whole new world of possibilities for creating tools for our fellow developers.&lt;/p&gt;

</description>
      <category>node</category>
    </item>
    <item>
      <title>Reading and Writing Files/Directories in NodeJS Using the FS Core Module</title>
      <author>Anna "Apero" McDougall üè≥Ô∏è‚Äçüåà</author>
      <pubDate>Wed, 06 Jan 2021 14:13:40 +0000</pubDate>
      <link>https://dev.to/annajmcdougall/reading-and-writing-files-directories-in-nodejs-using-the-fs-core-module-225c</link>
      <guid>https://dev.to/annajmcdougall/reading-and-writing-files-directories-in-nodejs-using-the-fs-core-module-225c</guid>
      <description>&lt;p&gt;Yesterday, I &lt;a href="https://dev.to/annajmcdougall/what-does-it-mean-to-write-run-a-server-answering-my-own-questions-about-nodejs-35kl"&gt;answered my own SUPER-NOOB questions about servers and NodeJS&lt;/a&gt;. Today, I want to have a look at how we can use a core module within NodeJS which allows us to interact with the file system. This core module is called &lt;code&gt;fs&lt;/code&gt; (file system).&lt;/p&gt;

&lt;p&gt;Let's have a look at some of the simplest operations we can achieve using &lt;code&gt;fs&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-note-about-asynchronous-code" class="anchor"&gt;
  &lt;/a&gt;
  A note about asynchronous code
&lt;/h3&gt;

&lt;p&gt;If you aren't already familiar with Promises and the concept of asynchronous code, it is probably best to use the 'Sync' versions of all of the following methods. I won't be covering them here, because they're not what I'm learning, but you can check the NodeJS documentation for more information. &lt;/p&gt;

&lt;p&gt;If you &lt;em&gt;kinda&lt;/em&gt; get the idea of Promises and/or asynchronous callbacks, then you will probably be fine to get through this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asynchronous-callbacks-in-nodejs" class="anchor"&gt;
  &lt;/a&gt;
  Asynchronous callbacks in NodeJS
&lt;/h3&gt;

&lt;p&gt;Each of the following methods follows a similar pattern:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The method/function itself, e.g.&lt;code&gt;fs.readFile(&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The file or folder it will be working with (aka the path), e.g. &lt;code&gt;'./file.txt',&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Additional options, e.g. &lt;code&gt;{flag: "a"},&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;A callback function e.g. &lt;code&gt;(err) =&amp;gt; console.log(err ? err : "success"))&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since all of the following methods are asynchronous, the callback function is what will run &lt;em&gt;after&lt;/em&gt; the method is complete. It usually takes either one or two parameters, and in all cases listed here, the first parameter is the error message if a problem is encountered.&lt;/p&gt;

&lt;p&gt;Now that we've covered the basics, let's have a look at how we can make a new directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-a-path-variable" class="anchor"&gt;
  &lt;/a&gt;
  Setting up a path variable
&lt;/h3&gt;

&lt;p&gt;For the sake of my examples below, I put some nice little code at the top of my file which looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__filename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first two lines import the core module native to NodeJS which we need, and then the third line accesses the file we're in (a simple index.js file) and then pulls out the path into its directory using &lt;code&gt;path.dirname&lt;/code&gt; as the method, and the global variable &lt;code&gt;__filename&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By creating the &lt;code&gt;currentPath&lt;/code&gt; variable, I can more easily test and play with the following methods. If you don't want to do this or something similar, you can also manually enter the path into the directory in which you want to work. Personally, I feel this is easier.&lt;/p&gt;

&lt;p&gt;Now, it's important to note that we don't always &lt;em&gt;need&lt;/em&gt; to use the current path/directory in our methods. We could just use &lt;code&gt;./&lt;/code&gt; or similar, however as I see it, in future we are likely to be needing to work with other paths outside of our source code, so I assume (perhaps wrongly?) that using the full path is a better habit to build. I'd be interested to hear what more experienced developers think about this in the comments!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-raw-fsmkdir-endraw-to-create-a-directory" class="anchor"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;fs.mkdir&lt;/code&gt; to Create a Directory
&lt;/h2&gt;

&lt;p&gt;The following command simply creates a new directory called &lt;code&gt;testFolder&lt;/code&gt; inside our current folder. Using a template literal i.e. &lt;code&gt;a string with backticks\&lt;/code&gt; we can insert our &lt;code&gt;currentPath&lt;/code&gt; into our first argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/testFolder`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-raw-fsreaddir-endraw-to-check-the-contents-of-a-directory" class="anchor"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;fs.readdir&lt;/code&gt; to Check the Contents of a Directory
&lt;/h2&gt;

&lt;p&gt;You may be familiar with the &lt;code&gt;ls&lt;/code&gt; command in the Terminal. This is a similar command, however rather than providing us with a CLI read-out of the files, it returns an array of file and folder names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When I ran this in my test file, this is what I got back:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;testDir2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;testDir3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;testsDir3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Additionally, there is a way to get access to what &lt;em&gt;type&lt;/em&gt; of file is in your directory. Here's a neat little function I came up with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;withFileTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDirectory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;directory&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will allow me to see in my console, whether each item is a directory or a file, using another inbuilt method in Node (I am starting to &lt;em&gt;love&lt;/em&gt; all these in-builts!) called &lt;code&gt;isDirectory()&lt;/code&gt; which comes back on file listings when the &lt;code&gt;withFileTypes: true&lt;/code&gt; object is passed in as an optional second argument.&lt;/p&gt;

&lt;p&gt;So what do we get back?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;
&lt;span class="nx"&gt;testDir2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;directory&lt;/span&gt;
&lt;span class="nx"&gt;testDir3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;directory&lt;/span&gt;
&lt;span class="nx"&gt;testsDir3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;### Using &lt;code&gt;readFile&lt;/code&gt; to Look at File Contents&lt;/p&gt;

&lt;p&gt;Let's say we want to look inside the &lt;code&gt;test.txt&lt;/code&gt; file and see what it says. Unfortunately, data from this file is going to come in encoded. Let me show you what I mean:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/textInfo.txt`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's what we get back&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Buffer 54 68 69 73 20 66 69 6c 65 20 69 73 20 62 79 20 41 6e 6e 61 20 4a 20 4d 63 44 6f 75 67 61 6c 6c 21 21 21&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Uhhh... OK. Well, that's not normal, readable text. WHAT DOES IT MEAN?&lt;/p&gt;

&lt;p&gt;Luckily, we can specify what format to use to decode/parse this information. In the case of simple text, utf-8, which we see entered here as a second parameter in string format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/textInfo.txt`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ERROR: File reading did not work. Error code &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SUCCESS! Here is your data: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now what do we get??&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;This file is by Anna J McDougall!!!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Whew, that makes a lot more sense.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-writefile-endraw-to-create-a-new-file-or-append-text" class="anchor"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;writeFile&lt;/code&gt; to Create a New File or Append Text
&lt;/h3&gt;

&lt;p&gt;Now that you're familiar with the pattern of these commands, let's have a look at a simple example where we create or overwrite a text file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Here is some new text!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/textInfo.txt`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Great! We now have a file called &lt;code&gt;textInfo.txt&lt;/code&gt; which has the text "Here is some new text!" within it. Let's try to add some MORE text!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newText2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;I'm so glad we're adding more text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/textInfo.txt`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newText2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Good work! ...Wait, that's not right...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2XYKYNEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609859702620/psMcVazwO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2XYKYNEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609859702620/psMcVazwO.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where did our first text go? D'oh! That's right! &lt;code&gt;fs.writeFile&lt;/code&gt; overwrites existing file contents! So how can we just add some more text onto the end of our original instead? Using the &lt;code&gt;a&lt;/code&gt; flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newText2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;I'm so glad we're adding more text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/textInfo.txt`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newText2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Aha! Well that looks much better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LnC6_tf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609859833433/6661NFCSG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LnC6_tf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609859833433/6661NFCSG.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-fsstat-endraw-to-check-your-file-details" class="anchor"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;fs.stat&lt;/code&gt; to Check Your File Details
&lt;/h3&gt;

&lt;p&gt;Last but not least, let's have a little peek in at our file to see what its details/stats are. Here's a fun little method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/textInfo.txt`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This brings us back the following information:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Stats {
  dev: 647735127,
  mode: 33206,
  nlink: 1,
  uid: 0,
  gid: 0,
  rdev: 0,
  blksize: 4096,
  ino: 44754521297123880,
  size: 0,
  blocks: 0,
  atimeMs: 1609859928899.2424,
  mtimeMs: 1609859928899.2424,
  ctimeMs: 1609859928899.2424,
  birthtimeMs: 1609859583171.8276,
  atime: 2021-01-05T15:18:48.899Z,
  mtime: 2021-01-05T15:18:48.899Z,
  ctime: 2021-01-05T15:18:48.899Z,
  birthtime: 2021-01-05T15:13:03.172Z
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Wonderful! Now we have a whole heap of details about our text file. I'm sure one day we'll be able to understand and use this information somehow!&lt;/p&gt;

</description>
      <category>node</category>
    </item>
    <item>
      <title>Understanding Hooks : what and why?</title>
      <author>Olena Drugalya</author>
      <pubDate>Wed, 06 Jan 2021 12:53:14 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/understanding-hooks-what-and-why-2kb0</link>
      <guid>https://dev.to/olenadrugalya/understanding-hooks-what-and-why-2kb0</guid>
      <description>&lt;p&gt;This blog post is the first in series about &lt;a href="https://reactjs.org/docs/hooks-reference.html"&gt;React Hooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those who just start to learn React or those who are switching from using class-based components to functional components - this topic is a must-to-learn.&lt;/p&gt;

&lt;p&gt;React Hooks  were first introduced in React v.16.8 and became very popular since then. From what I have read from React developers, they even plan to leave classes for good and use functional components only. At least they intend to develop hooks further and advise devs to use them often. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hook" class="anchor"&gt;
  &lt;/a&gt;
  What is Hook?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Hook&lt;/strong&gt; is a fancy name for a simple JavaScript function which is called from React library. &lt;/p&gt;

&lt;p&gt;Before hooks, the most useful building block was &lt;em&gt;class-based component&lt;/em&gt;, because it was using local state management and  lifecycle methods for side-effects.&lt;/p&gt;

&lt;p&gt;With hooks, we  can use React lifecycle features and other built-in features directly from &lt;em&gt;functional component&lt;/em&gt; without the need to create &lt;em&gt;class&lt;/em&gt;.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-hook" class="anchor"&gt;
  &lt;/a&gt;
  How to use Hook?
&lt;/h2&gt;

&lt;p&gt;To use hooks, you need first to import the necessary Hook from React library. To distinguish Hooks from other JS functions, it's a convention to start their name from word &lt;code&gt;use&lt;/code&gt; (it is possible also to create your own Hooks, but this is for later topic). &lt;/p&gt;

&lt;p&gt;We import for example &lt;code&gt;useState&lt;/code&gt; hook from React like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Than we can use it in our code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Before the release of React Hooks, this example would have used more lines of code, as we‚Äôd have had to make use of a &lt;em&gt;class component&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rules-for-using-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Rules for using Hooks
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Call Hooks at the Top Level&lt;/li&gt;
&lt;li&gt;Only call Hooks from React Components&lt;/li&gt;
&lt;li&gt;Use the key word &lt;code&gt;use&lt;/code&gt; for creating customs Hooks&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#call-hooks-at-the-top-level" class="anchor"&gt;
  &lt;/a&gt;
  Call Hooks at the Top Level
&lt;/h4&gt;

&lt;p&gt;Always use Hooks at the top level of your React component. &lt;br&gt;
Don't call Hooks inside loops, conditions or nested functions. &lt;br&gt;
By following this rule, you ensure that Hooks are called in the same order each time a component renders. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#only-call-hooks-from-react-components" class="anchor"&gt;
  &lt;/a&gt;
  Only call Hooks from React Components
&lt;/h4&gt;

&lt;p&gt;Only call Hooks from React components and never from regular JavaScript functions as it will simply not work there. &lt;br&gt;
If you happened to import your preferred Hook without importing React, you will not be able to make use of the Hook you‚Äôve imported.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#use-the-key-word-raw-use-endraw-for-creating-customs-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Use the key word &lt;code&gt;use&lt;/code&gt; for creating customs Hooks
&lt;/h4&gt;

&lt;p&gt;You can create your own custom Hook simply by starting your function name from keyword &lt;code&gt;use&lt;/code&gt; - for example &lt;code&gt;useUserName&lt;/code&gt;.&lt;br&gt;
Inside the custom Hook it's possible to use other hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUserName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoggedIn&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MockedApi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setIsLoggedIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#builtin-react-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Built-In React Hooks
&lt;/h3&gt;

&lt;p&gt;There are many built-in hooks in React library, which we explore in my other posts. Here is a list of them:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#basic-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Basic Hooks:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;useState&lt;/li&gt;
&lt;li&gt;useEffect&lt;/li&gt;
&lt;li&gt;useContext&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#additional-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Additional Hooks:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;useReducer&lt;/li&gt;
&lt;li&gt;useCallback&lt;/li&gt;
&lt;li&gt;useMemo&lt;/li&gt;
&lt;li&gt;useRef&lt;/li&gt;
&lt;li&gt;useImperativeHandle&lt;/li&gt;
&lt;li&gt;useLayoutEffect&lt;/li&gt;
&lt;li&gt;useDebugValue&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-to-use-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Why to use Hooks?
&lt;/h3&gt;

&lt;p&gt;Hooks let us organise the logic inside a component into reusable isolated units, hence they help to solve such problems as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Huge components that are hard to refactor and test.&lt;/li&gt;
&lt;li&gt;Duplicated logic between different components and lifecycle methods.&lt;/li&gt;
&lt;li&gt;Complex patterns like render props and higher-order components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each Hook may contain some local state and side effects. You can pass data between multiple Hooks just like you normally do between functions. They can take arguments and return values. They give us so much more flexibility!&lt;/p&gt;

&lt;p&gt;They are much easier to read and test because they are plain JavaScript functions and you end up with less code.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this brief intro and in my next blog post we are going to look at specific Hooks more closely.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Rebuilding the most popular spellchecker. Part 1</title>
      <author>Victor Shepelev</author>
      <pubDate>Wed, 06 Jan 2021 12:25:19 +0000</pubDate>
      <link>https://dev.to/zverok/rebuilding-the-most-popular-spellchecker-part-1-25e4</link>
      <guid>https://dev.to/zverok/rebuilding-the-most-popular-spellchecker-part-1-25e4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-i-decided-to-write-a-spellchecker-and-almost-died-trying" class="anchor"&gt;
  &lt;/a&gt;
  How I decided to write a spellchecker and almost died trying
&lt;/h2&gt;

&lt;p&gt;A few years ago I had a fun idea for a "weekend project": pure-Ruby spellchecker. Ruby is my language of choice, and no-dependencies spellchecker seemed a small useful tool for the CI environment: for example, to check comments/docs spelling without installing any third-party software. I actually &lt;em&gt;could've&lt;/em&gt; pulled out the project in its limited scope (only English, only spot misspelled words without fixing, limited dictionary) with just a flat list of known words, but that's not what happened.&lt;/p&gt;

&lt;p&gt;Back then, I decided to make a moderately generic tool, at least able to work with multiple languages. Fortunately (or so I believed!), there were many already existing and freely available spellchecking dictionaries distributed as LibreOffice and Firefox extensions. All of those dictionaries are in the format defined by the &lt;strong&gt;&lt;a href="http://hunspell.github.io/"&gt;Hunspell&lt;/a&gt;&lt;/strong&gt; tool/library‚Äîwhich is an open-source library that is used for spellchecking in Libre/OpenOffice, Mozilla products (Firefox, Thunderbird), but also Google Chrome/Chromium, macOS, several Adobe products, and so on.&lt;/p&gt;

&lt;p&gt;The dictionaries looked like easy to reuse text files with some ("insignificant" as it seemed) metadata, and the whole "use Hunspell dictionaries from pure Ruby spellchecker" project &lt;em&gt;still&lt;/em&gt; felt like a "weekend-long" one, for the first few weekends. Only gradually the underwater complexity of the multilanguage word-by-word spellchecking uncovered. Eventually, I was distracted from the project and abandoned it, but I still had the fascination with the seemingly-simple, actually-mind-blowingly-complicated Hunspell, the software everybody used daily and hardly ever notice.&lt;/p&gt;

&lt;p&gt;The idea to dig deeper into it, to &lt;em&gt;understand&lt;/em&gt; it and &lt;em&gt;explain&lt;/em&gt;, grew on me and bothered me for quite some time. And what is a better way to understand something, if not to retell it in your own words? After several lazy and not very far-progressed attempts to write something Hunspell-alike (twice in Ruby, once in Rust, once in Python), eventually, in February 2020, the task I settled down to solve is: "explanatory rewrite" of the Hunspell into high-level language with a lot of comments. I achieved this goal by December 2020, with the first release of the &lt;a href="https://github.com/zverok/spylls"&gt;Spylls&lt;/a&gt; project: &lt;strong&gt;the port of Hunspell's core algorithms into modern, well-documented, well-structured Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And now I want to share some insights of what I uncovered on the road: about spellchecking in general and Hunspell in particular.&lt;/p&gt;

&lt;p&gt;In the ongoing article series, I'll cover these topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Hunspell, why is it significant, and why try to "explain" it (current article)&lt;/li&gt;
&lt;li&gt;Base spellchecking concepts: lookup and suggest, as seen by Hunspell&lt;/li&gt;
&lt;li&gt;How lookup (checking if the word is correct) works, and why it could be much more complicated than "just look in the list of the known words"&lt;/li&gt;
&lt;li&gt;How suggest (proposed fix for the incorrect word) works, and how hard it is to estimate its quality&lt;/li&gt;
&lt;li&gt;A closer look into Hunspell's dictionary format. It is the most widespread open dictionary format in the world, and we'll see what linguistic and algorithmic information it &lt;em&gt;potentially&lt;/em&gt; can carry, and what part of it is actually used in existing dictionaries&lt;/li&gt;
&lt;li&gt;Some details on Spylls implementation process and results&lt;/li&gt;
&lt;li&gt;Closing thoughts on the big picture of word-by-word spellchecker problem, and Hunspell's approach to it&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-hunspell" class="anchor"&gt;
  &lt;/a&gt;
  What is Hunspell?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The information on Hunspell's origins and history is mostly my guesses, following partial and incomplete sources everywhere.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hunspell (&lt;small&gt;&lt;a href="https://en.wikipedia.org/wiki/Hunspell"&gt;Wikpedia article&lt;/a&gt;&lt;/small&gt;), initially &lt;strong&gt;Hun&lt;/strong&gt;garian spellchecker, emerged as an alternative for previously existing aspell/ispell/myspell somewhere in 2002 (I guess?). It was created by L√°szl√≥ N√©meth, in a need of supporting languages with complicated suffixing/prefixing rules and word compounding (such as Hungarian). Hunspell's design seemingly proved itself to be flexible enough to support most of the world's languages, and in a few years, it became the most used spellchecker in the world. You have most probably used it even if you've never heard the name before today: Hunspell is the default spellchecking engine in Chrome and Firefox, Libre/OpenOffice, Adobe products, and macOS (not an exhaustive list). Dictionaries in Hunspell format exist for almost all actively used languages for which the concept of word-by-word spellchecking makes sense&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Currently, Hunspell is maintained &lt;a href="https://github.com/hunspell/hunspell"&gt;on GitHub&lt;/a&gt; (repo has only around 1k stars, will you believe it?). It seems that maintenance is not that easy if you'll weight the number of open issues and PRs, and the latest commits timeline: at the time of writing it (Jan 2021), the last commit to master was of May 2020, and the last release was 1.7 on Dec 2018. Hunspell's codebase is mostly "old-school" C++. It is being slowly modernized and it has very few comments; there are thousands of two-branch &lt;code&gt;if&lt;/code&gt;s to handle non-Unicode and Unicode text separately. There is also an attempt to rewrite Hunspell from scratch in a modern C++, which at some point was developed under the &lt;code&gt;hunspell&lt;/code&gt; GitHub organization. Now it is independent and called &lt;a href="https://github.com/nuspell/nuspell"&gt;nuspell&lt;/a&gt; (and, while not yet supporting all of the Hunspell features, already "achieved" version 4.2.0).&lt;/p&gt;

&lt;p&gt;Obviously, there are open-source spellcheckers other than Hunspell. GNU aspell (that at one point was superseded by Hunspell, but still holds its ground in English suggestion quality), to name one of the older ones; but also there are novel approaches, like &lt;a href="https://github.com/wolfgarbe/SymSpell"&gt;SymSpell&lt;/a&gt;, claiming to be "1 million times faster" or ML-based &lt;a href="https://github.com/bakwc/JamSpell"&gt;JamSpell&lt;/a&gt;, claiming to be much more accurate.&lt;/p&gt;

&lt;p&gt;And yet, what makes Hunspell stand out is its coverage of the world's languages. It is not ideal, but the amount of dictionaries ready to use immediately, and amount of &lt;em&gt;experience&lt;/em&gt; of dealing with typical problems and corner cases, coded into the codebase, is hard to beat.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-rewrite-it" class="anchor"&gt;
  &lt;/a&gt;
  Why rewrite it?
&lt;/h3&gt;

&lt;p&gt;As I've already stated above, the goal of the Spylls project was to create an &lt;em&gt;explanatory&lt;/em&gt; rewrite: E.g., the "retelling" of how Hunspell works in a way that is easy to follow and to play with.&lt;/p&gt;

&lt;p&gt;The necessity of this approach came to me from three facts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hunspell is used almost everywhere and is taken for granted;&lt;/li&gt;
&lt;li&gt;It is much more complicated than one might naively expect;&lt;/li&gt;
&lt;li&gt;This complexity‚Äîand years of human work that was spent growing the project‚Äîis notoriously hard to follow through the Hunspell's codebase and grasp in full.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In other words, I wanted to &lt;strong&gt;make the knowledge behind Hunspell more open&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The way I have chosen was not, of course, the only one possible. I could've just read through the original code and write a series of articles (or, rather, a book?) on how it works. I could've thoroughly commented and republished the original source code. But I felt that &lt;em&gt;reimplementing&lt;/em&gt; is the only way of understanding what's and why's of the algorithms (at least for somebody not being a Hunspell's core developer); and that implementation in a high-level language will allow focusing on words and language-related algorithms, not memory management or fighting with Unicode.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that there are also a few "pragmatic" ports of Hunspell into other languages (in order to use it in environments where C++ dependency is undesireable), namely &lt;a href="https://github.com/aarondandy/WeCantSpell.Hunspell"&gt;WeCantSpell.Hunspell&lt;/a&gt; in C# and &lt;a href="https://github.com/wooorm/nspell"&gt;nspell&lt;/a&gt; in JS (very incomplete); and aforementioned &lt;a href="https://github.com/nuspell/nuspell"&gt;nuspell&lt;/a&gt; can also be considered a "port" (from legacy C++ to a modern one).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#why-python" class="anchor"&gt;
  &lt;/a&gt;
  Why Python?
&lt;/h3&gt;

&lt;p&gt;My language of choice is Ruby. It was also the first language that I've tried to port Hunspell into. I'd be happy to proceed with Ruby if my goal has been just a "pragmatic" library. And yet, when I decided that my goal is to make the knowledge of Hunspell's algorithms accessible to a wide audience, I understood that Ruby is not the best choice: language reputation (slightly esoteric and mostly-for-web) would make my project lest noticeable; and my preferred coding style (mix of OO and functional, with lots of small immutable domain objects and fluent chains of iterators), while allowing me to be very effective, would make the code less accessible to other languages users.&lt;/p&gt;

&lt;p&gt;What I needed was a high-level language, with as low boilerplate as possible; as mainstream as possible; as easy to experiment with and prototype as possible. Without diving into too much argument here, Python and modern JavaScript seemed to be the most suitable options, and, to be honest, Python was just closer to my soul. So, here we are!&lt;/p&gt;

&lt;p&gt;The code style is mostly imperative (as it corresponds to how Hunspell is structured), with large-ish, but clearly structured methods, and a small number of classes/objects (mostly they are either "whole algorithm as a class" or almost-passive "structs" -- or, in Python, dataclasses). I tried to limit myself in the usage of complex Python-specific features (like functools or itertools), but have a decent use of "list comprehensions" (as they are quite readable and Pythonic) and generators (lazy lists). Overall, I wanted the code to be good Python, but not too smart. Whether I succeeded, is up to you to decide.&lt;/p&gt;

&lt;p&gt;Currently, &lt;a href="https://github.com/zverok/spylls"&gt;Spylls&lt;/a&gt; has &lt;strong&gt;‚âà1.5k lines of library code&lt;/strong&gt; in 14 files. It conforms (with &lt;a href="https://spylls.readthedocs.io/en/latest/#completeness"&gt;some reservations&lt;/a&gt;) to all Hunspell's integrational tests. Those tests look like a set of files each, consisting of "test dictionary + what words should be considered good, what words should be considered bad, what should be suggested instead of the bad words", and there are &lt;strong&gt;127 of such sets to pass&lt;/strong&gt;. There are &lt;strong&gt;2 thousand comment lines&lt;/strong&gt; in the code, explaining thoroughly every detail of the algorithm and rendered at the &lt;a href="https://spylls.readthedocs.io/en/latest/hunspell.html"&gt;Spylls documentation site&lt;/a&gt;; note that besides docstrings at the beginning of each class and method, there are also inline comments in code‚Äîthat's why the documentation site uses custom theme with inline "Show code" feature.&lt;/p&gt;




&lt;p&gt;With this being said, I am wrapping up the introductory post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the next series: An introduction to Hunspell's "lookup" and "suggest" concepts; and deeper dive into the lookup.&lt;/strong&gt;&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;Word-by-word spellchecking makes less sense for hieroghliphic languages like Chinese and Japanese; it is also problematic for languages where words aren't separated by whitespaces, like Lao or Thai.¬†&lt;a href="#fnref1"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>spellcheck</category>
      <category>python</category>
      <category>news</category>
      <category>textprocessing</category>
    </item>
    <item>
      <title>Build a REST API with Node, Express and MongoDB</title>
      <author>Kumar Shubham</author>
      <pubDate>Wed, 06 Jan 2021 10:14:36 +0000</pubDate>
      <link>https://dev.to/shubham1710/build-a-rest-api-with-node-express-and-mongodb-4o82</link>
      <guid>https://dev.to/shubham1710/build-a-rest-api-with-node-express-and-mongodb-4o82</guid>
      <description>&lt;p&gt;APIs are a very common thing nowadays. They are used literally everywhere on the website. APIs serve as the connection between the database which stores all the data and the frontend with which the user interacts with to get access to the data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API&lt;/strong&gt; mean Application Programming Interface which is a set of clearly defined methods of communication between the frontend and the database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REST&lt;/strong&gt; which stands for Representational State Transfer is an architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other.&lt;/p&gt;

&lt;p&gt;REST APIs mostly use JSON as the preferred choice for transferring data as they are easy to understand and is readable.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will be using Node, Express and MongoDB to create a REST API which would support the four operations ‚Äî GET, POST, PUT and DELETE.&lt;/p&gt;

&lt;p&gt;So, let‚Äôs first discuss these four operations and try to understand what they actually mean in the context of API development.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;GET&lt;/strong&gt; ‚Äî GET means to read the data. The function of this operation is to retrieve the data from the database and present it to the user.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt; ‚Äî POST, as the name suggests, is used to post/add new data to the database. It allows users to add new data to the database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PUT&lt;/strong&gt; ‚Äî PUT means to update the data already present in the database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DELETE&lt;/strong&gt; ‚Äî It is used to delete any existing data from the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, our REST API will perform all these four operations. We will use the Express package to make our work easier. We will use MongoDB as the NoSQL database to store all our data. MongoDB stores data in JSON format.&lt;/p&gt;

&lt;p&gt;So, we will do it step by step. First, we would build the API endpoints and then we would connect to the database to perform actual operations. We would use Postman software for API testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-the-project" class="anchor"&gt;
  &lt;/a&gt;
  Setting up the Project
&lt;/h3&gt;

&lt;p&gt;First of all, we need to download Node on our system. Then we can start creating our project.&lt;/p&gt;

&lt;p&gt;So, first of all, we need to create a folder in our system where we would love to build our project. I kept the name of the folder as rest-api.&lt;/p&gt;

&lt;p&gt;Then we need to move into the rest-api folder we created just now. Now to start a new project, we would run the following command within the folder:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It will ask us various questions regarding the project like name, description and other things. We would like to keep everything in the default mode except the name and description which we can add as per our convenience.&lt;/p&gt;

&lt;p&gt;After completion, we will see a package.json file in the folder. It contains all the data we just gave to create this file. You can see the entry point is index.js file.&lt;/p&gt;

&lt;p&gt;After creating the package.json file, we need to download Express on our machine. To install Express, we can:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express --save
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will download and save express in our system and also will add express as a dependency in our package.json file.&lt;/p&gt;

&lt;p&gt;We will also like to download a development dependency named nodemon which will allow us to develop faster. It will help us to avoid restarting the server each time we make a change and will automatically refresh which would save us a lot of time.&lt;/p&gt;

&lt;p&gt;So, to install nodemon we would do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev nodemon
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice that we have used save-dev to install and add it in package.json file as a dev dependency as we using it speed up our development process.&lt;/p&gt;

&lt;p&gt;Now, we need to download MongoDB in our system and then create the cluster and connect it with your local computer.&lt;/p&gt;

&lt;p&gt;Next, we need to download mongoose to interact with the MongoDB database from our express application.&lt;/p&gt;

&lt;p&gt;To install mongoose, do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install mongoose --save
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we are ready to start building our REST API. Before starting, I would like to show my package.json file so that you can verify everything is going perfect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "rest-api",
  "version": "1.0.0",
  "description": "Test Rest API",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"
  },
  "author": "Shubham",
  "license": "ISC",
  "dependencies": {
    "express": "^4.17.1",
    "mongoose": "^5.11.9"
  },
  "devDependencies": {
    "nodemon": "^2.0.6"
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, let‚Äôs start building our REST API. First of all, we need to create a file named index.js as we can see it is the entry point to our application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-index-file" class="anchor"&gt;
  &lt;/a&gt;
  The index file
&lt;/h3&gt;

&lt;p&gt;We would start with the index.js file. We would start with requiring express into our system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will then set up our express app by writing the following line of code:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = express();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, then we would set up a GET function to test it out using the browser. We pass a message as the response when we have a GET request to localhost:4000/api.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/api', (req, res) =&amp;gt; res.send('Its working!'));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will then set up our application to start listening to the requests. We will use 4000 as the port number. We have used the OR operator there so that if there is any port number defined via environment variables, it could use that otherwise it will use 4000. You can choose the port number as per your choice. We will console.log a message to check if it is working properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.listen(process.env.port || 4000, function(){
   console.log('now listening for requests');
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, when we would start the server now using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nodemon index
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When we go to localhost:4000/api we would see the message as ‚ÄòIt‚Äôs working!‚Äô. Also, in console, we would get the message we set for the console.&lt;/p&gt;

&lt;p&gt;So, here we are, with the express server set up properly and we sent our first GET request successfully.&lt;/p&gt;

&lt;p&gt;Now, we would like to have all our four operations in a separate file called api.js under routes folder as we do not want to push everything into index.js file.&lt;/p&gt;

&lt;p&gt;So, we would remove the app.get part in this index.js file. We would like to add the mongoose as a requirement in our file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, below the set up of our express app, we would like to connect to MongoDB. We would do so with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongoose.connect('mongodb://localhost/ourdata');
mongoose.Promise = global.Promise;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, ourdata is the name of the model we will be creating in MongoDb later on in this tutorial.&lt;/p&gt;

&lt;p&gt;We also update the promises of the mongoose as the global promise since mongoose.promise is depreciated now.&lt;/p&gt;

&lt;p&gt;Next, we would add a few more middlewares in the file. We would first add support to serve static files. Though we won't be serving static files in this tutorial but having it is nice since we would need to add a frontend anyway later on to use the APIs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(express.static('public'));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We would then add Express parser to parse the data sent or received from the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(express.json());
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We then set up the app to use the new api.js file we would create to hold our all four operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use('/api',require('./routes/api'));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We have added ‚Äò/api‚Äô in the starting to avoid adding it to all four of the operations.&lt;/p&gt;

&lt;p&gt;Finally, we add a middleware to handle the errors that occurred during the operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(function(err,req,res,next){
   res.status(422).send({error: err.message});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here is the finalized code for the index.js file:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const mongoose = require('mongoose');

// set up our express app
const app = express();

// connect to mongodb
mongoose.connect('mongodb://localhost/ourdata');
mongoose.Promise = global.Promise;

app.use(express.static('public'));

app.use(express.json());
// initialize routes
app.use('/api',require('./routes/api'));

// error handling middleware
app.use(function(err,req,res,next){
    //console.log(err);
    res.status(422).send({error: err.message});
});

// listen for requests
app.listen(process.env.port || 4000, function(){
    console.log('Ready to Go!');
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-layout-of-the-four-crud-operations" class="anchor"&gt;
  &lt;/a&gt;
  The layout of the four CRUD operations
&lt;/h3&gt;

&lt;p&gt;Next up, we create a folder named router and create a new file named api.js inside the folder. This would hold all the four CRUD operations we want to do with the REST API we are building.&lt;/p&gt;

&lt;p&gt;We first start by requiring express in our file. Then we would create a router using the express router.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const router = express.Router();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, let‚Äôs start building the four operations one by one. Now, we would not be saving anything to the database since we have not created one yet, but we would be testing them more simply.&lt;br&gt;
So, we would start with the GET operator. We will write the code for the GET request in this way:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get('/students',function(req,res){
    res.send({type: 'GET'});
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we are giving the endpoint and a function which gives a response which tells the type of the request sent.&lt;/p&gt;

&lt;p&gt;Next up is POST request. It will be in a similar way though we would like to return the data which we received from the request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/students', function(req, res){
    res.send({
        type: 'POST',
        name: req.body.name,
        roll: req.body.roll
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next up is PUT and DELETE request. For now, we would simply return the type of request for both the operations. It accepts the endpoint with an id which denotes the unique id which MongoDB provides when we save data to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.put('/students/:id', function(req, res){
    res.send({type: 'PUT'});
});

router.delete('/students/:id', function(req, res){
    res.send({type: 'DELETE'});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we would export the module to be used within the index.js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = router;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To test out these operations, we would use a software called Postman. It is amazing and helps to test out APIs really fast.&lt;br&gt;
Download the Postman desktop agent or install its Chrome extension to start using Postman. A Postman new Workspace looks like the following:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oK4N3Xdv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2oho1k9stnd0y3crn8t1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oK4N3Xdv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2oho1k9stnd0y3crn8t1.png" alt="Postman Workspace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we can choose the type of operation and the target URL for sending requests. For POST requests, we need to send some JSON data while sending request which we can be done by adding the JSON in the Body section.&lt;/p&gt;

&lt;p&gt;You need to select Raw data type and then chose JSON as the format such as shown below:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9dANELWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zzb5gunatxfmem9a2lxd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9dANELWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zzb5gunatxfmem9a2lxd.png" alt="Adding Body in Post request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we can test all these operations via Postman very easily. We also need to provide the data while PUT request as we are updating the data. We only pass the data we need to update.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#building-the-database-schema-and-model" class="anchor"&gt;
  &lt;/a&gt;
  Building the Database Schema and Model
&lt;/h3&gt;

&lt;p&gt;Next, we would create a folder named models and then create a student.js file within that folder.&lt;/p&gt;

&lt;p&gt;We would require mongoose in that folder and would build a Schema and then a model based on that Schema. A Schema tells the model how the data is to be structured.&lt;/p&gt;

&lt;p&gt;We are building a model which would contain data of students ‚Äî name, their roll number and whether they are present or not.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Name ‚Äî This is of String data type and is not a required field in the Schema.&lt;/li&gt;
&lt;li&gt;Roll ‚Äî This is also of String data type and is a required field. It cannot be left empty.&lt;/li&gt;
&lt;li&gt;Present ‚Äî This is a Boolean field which defaults to true.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We then create the model named Student with the help of the StudentSchema that we created. We then export the model to use it in the API file.&lt;/p&gt;

&lt;p&gt;So, let‚Äôs have a look at the student.js file:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// create student schema &amp;amp; model
const StudentSchema = new Schema({
    name: {
        type: String,
    },
    roll: {
        type: String,
        required: [true, 'Roll field is required']
    },
    present: {
        type: Boolean,
        deafult: true
    }
});

const Student = mongoose.model('student',StudentSchema);
module.exports = Student;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finalizing-the-apijs-file" class="anchor"&gt;
  &lt;/a&gt;
  Finalizing the api.js file
&lt;/h3&gt;

&lt;p&gt;Now, we would make all four API endpoints usable by saving and retrieving data from the database model we created.&lt;/p&gt;

&lt;p&gt;So, we need to require that database model in the API file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Student = require('../models/student');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We then start with the GET request. We would get all the students in our database and would send them all as a response. You can add any sort of filtering for the students but we are leaving the find function empty to access every student from the database. We then use .catch(next) function to help catch any errors and pass it to the next middleware ‚Äî error handling middleware in our case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get('/students',function(req,res,next){
    Student.find({}).then(function(students){
        res.send(students);
    }).catch(next);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we go for the POST request. We create a new student in the database and then return the created student as a response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/students',function(req,res,next){
    Student.create(req.body).then(function(student){
        res.send(student);
    }).catch(next);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we have the PUT request. We would use the findOneAndUpdate function to find the corresponding entry in the database using the id we passed in the URL endpoint. We then find the same student with the help of its Id and return the updated student as a response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.put('/students/:id',function(req,res,next){
    Student.findOneAndUpdate({_id: req.params.id},req.body).then(function(student){
        Student.findOne({_id: req.params.id}).then(function(student){
            res.send(student);
        });
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lastly, we have the DELETE request. We use the function findOneAndDelete to find the corresponding student in the database via the id provided and delete that student from the database. It also returns the deleted student as a response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.delete('/students/:id',function(req,res,next){
    Student.findOneAndDelete({_id: req.params.id}).then(function(student){
        res.send(student);
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can test all these using the Postman software very easily. Everything should work fine on testing and we have done everything nicely and cleanly.&lt;/p&gt;

&lt;p&gt;Here is the final code for the api.js file:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const router = express.Router();
const Student = require('../models/student');

// get a list of students from the database
router.get('/students',function(req,res,next){
    Student.find({}).then(function(students){
        res.send(students);
    }).catch(next);
});

// add a new student to database
router.post('/students',function(req,res,next){
    Student.create(req.body).then(function(student){
        res.send(student);
    }).catch(next);
});

// update a student in the database
router.put('/students/:id',function(req,res,next){
    Student.findOneAndUpdate({_id: req.params.id},req.body).then(function(student){
        Student.findOne({_id: req.params.id}).then(function(student){
            res.send(student);
        });
    });
});

// delete a student in the database
router.delete('/students/:id',function(req,res,next){
    Student.findOneAndDelete({_id: req.params.id}).then(function(student){
        res.send(student);
    });
});

module.exports = router;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, finally, we have created our REST API which performs all the four CRUD operations. So, as you see, it was very easy building a REST API with the help of Node, Express and MongoDB.&lt;/p&gt;

</description>
      <category>node</category>
      <category>mongodb</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Promises vs Observables</title>
      <author>nouman shah</author>
      <pubDate>Wed, 06 Jan 2021 07:51:01 +0000</pubDate>
      <link>https://dev.to/nomishah/javascript-promises-vs-observables-fpn</link>
      <guid>https://dev.to/nomishah/javascript-promises-vs-observables-fpn</guid>
      <description>&lt;p&gt;&lt;strong&gt;Asynchronous Programming in JavaScript&lt;/strong&gt;&lt;br&gt;
 There are different ways in JavaScript to create asynchronous code. The most important ones are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Callbacks&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Promises&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Async/Await&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RxJS Observables&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Callbacks&lt;/strong&gt;&lt;br&gt;
This is the old-fashioned classical approach to asynchronous programming. You provide a function as an argument to another function that executes an asynchronous task. When the asynchronous task completes, the executing function calls your callback function.&lt;br&gt;
The main disadvantage of this approach occurs when you have multiple chained asynchronous tasks, which requires you to define callback functions within callback functions within callback functions‚Ä¶ This is called &lt;strong&gt;callback hell&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function greeting(name) {
  console.log(`Hello ${name}!`);
}

function introduction(firstName, lastName, callback) {
  const fullName = `${firstName} ${lastName}`;

  callback(fullName);
}

introduction('Nouman','shah', greeting); 
//"Hello Nouman shah!"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Promises&lt;/strong&gt;&lt;br&gt;
Promises have been introduced in ES6 (2015) to allow for more readable asynchronous code than is possible with callbacks.&lt;br&gt;
The main difference between callbacks and promises is that with callbacks you tell the executing function what to do when the asynchronous task completes, whereas with promises the executing function returns a special object to you (the promise) and then you tell the promise what to do when the asynchronous task completes.&lt;br&gt;
Promises have three states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pending:&lt;/strong&gt; This is the initial state of the Promise before an
       operation begins&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fulfilled:&lt;/strong&gt; This means the specified operation was completed&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rejected:&lt;/strong&gt; The operation did not complete; an error value is usually thrown
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getUsers(onSuccess) {
  return new Promise((resolve, reject) =&amp;gt; {
    setTimeout(() =&amp;gt; {
      // Handle resolve and reject in the asynchronous API
      if (onSuccess) {
        resolve([
          {id: 1, name: 'Jerry'},
          {id: 2, name: 'Elaine'},
          {id: 3, name: 'George'},
        ])
      } else {
         reject('Failed to fetch data!')
      }
    }, 1000)
  })
}

// Run the getUsers function with the false flag to trigger an error
getUsers(false)
  .then((response) =&amp;gt; {
    console.log(response)
  })
  .catch((error) =&amp;gt; {
    console.log(error)
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Async/Await&lt;/strong&gt;&lt;br&gt;
There‚Äôs a special syntax to work with promises in a more comfortable fashion, called ‚Äúasync/await‚Äù. It‚Äôs surprisingly easy to understand and use.&lt;/p&gt;

&lt;p&gt;Basically, you can declare a function to be async, which allows you to use the await keyword in the body of this function. The await keyword can be put in front of an expression that evaluates to a promise. The await keyword pauses the execution of the async function until the promise is resolved. When this happens, the entire await expression evaluates to the result value of the promise, and then the execution of the async function resumes.&lt;br&gt;
Furthermore, the async function itself returns a promise as well that is resolved when the execution of the function body completes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function asyncTask(i) {
    return new Promise(resolve =&amp;gt; resolve(i + 1));
}
async function runAsyncTasks() {
    const res1 = await asyncTask(0);
    const res2 = await asyncTask(res1);
    const res3 = await asyncTask(res2);
    return "Everything done"
}
runAsyncTasks().then(result =&amp;gt; console.log(result));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;RxJS Observables&lt;/strong&gt;&lt;br&gt;
Observables are also like callbacks and promises that are responsible for handling async requests. Observables are a part of the RXJS library that makes use of Observables, making it really easy to write asynchronous code. &lt;/p&gt;

&lt;p&gt;There are four stages through which observables pass. They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Creation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subscription&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execution&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Destruction&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Creation&lt;/strong&gt; of an observable is done using a create function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var observable = Rx.Observable.create((observer: any) =&amp;gt;{
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To make an observable work, we have to &lt;strong&gt;subscribe&lt;/strong&gt; it. This can be done using the subscribe method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;observable.subscribe((data)=&amp;gt;{
   console.log(data);    
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Execution&lt;/strong&gt; of observables is what is inside of the create block.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Destruction&lt;/strong&gt; after an error or a complete notification, the observable is automatically unsubscribed. But there are cases where we have to manually unsubscribe it. To manually do this task, just use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var subscription = observable.subscribe(x =&amp;gt; console.log(x)); // Later: subscription.unsubscribe();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#promises-vs-observables" class="anchor"&gt;
  &lt;/a&gt;
  Promises vs observables
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Observables are lazy whereas promises are not&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Promises are eager: the executor function is called as soon as the promise is created.&lt;/li&gt;
&lt;li&gt;Observables are lazy: the subscriber function is only called when a client subscribes to the observable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Observables handle multiple values unlike promises&lt;/strong&gt;&lt;br&gt;
Promises can only provide a single value whereas observables can give you multiple values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observables are cancelable&lt;/strong&gt;&lt;br&gt;
You can cancel observables by unsubscribing it using the unsubscribe method whereas promises don‚Äôt have such a feature.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>node</category>
    </item>
    <item>
      <title>A letter to my future self üíå</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 06 Jan 2021 06:56:02 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/a-letter-to-my-future-self-4i66</link>
      <guid>https://dev.to/dailydevtips1/a-letter-to-my-future-self-4i66</guid>
      <description>&lt;p&gt;This is going to be an experiment, a letter to my future self!&lt;/p&gt;

&lt;p&gt;Why? you might ask?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thinking ahead how your life will look like in a years time&lt;/li&gt;
&lt;li&gt;Nostalgia, imagine you reading this letter a year from now and reliving the past&lt;/li&gt;
&lt;li&gt;A gift! The smile on your face when reading the letter&lt;/li&gt;
&lt;li&gt;You might learn you suck at predicting the future ü§∑‚Äç‚ôÇÔ∏è&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you like this idea, give it a try.&lt;br&gt;
Write a letter to yourself one year from now üíå&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j3j397sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609505176645/lOZx2YxYD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j3j397sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609505176645/lOZx2YxYD.jpeg" alt="Writing a letter to myself"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dear future me,&lt;/p&gt;

&lt;p&gt;I'm writing this letter to you to remind you what's truly important.&lt;/p&gt;

&lt;p&gt;Do you remember the first time you realized it's not about working 60 hours a week but taking the time to enjoy nature?&lt;/p&gt;

&lt;p&gt;You remember when you were sitting on a bench in a park and forced yourself to sit there for more than 10 minutes. You ended up sitting there for 5 hours inhaling nature and the beauty we called earth.&lt;/p&gt;

&lt;p&gt;That's what's important, reflecting and taking the time to enjoy life.&lt;/p&gt;

&lt;p&gt;I just had such a crazy but rewarding year, I got engaged, started blogging, and even got blessed with a new job during a pandemic.&lt;/p&gt;

&lt;p&gt;I almost felt bad for being so rewarded during this crazy year, but it made me realize we define our own luck. It was me making these things happen, not faith, not a pandemic, but me! (and you).&lt;/p&gt;

&lt;p&gt;I planned to finally switch to full-time remote work, with a bit more travel. The travel didn't happen I'll leave that up to you! But the full-time remote is checked!&lt;/p&gt;

&lt;p&gt;Anyhow, just wanted you to know how life in 2020 was, let's talk about you!&lt;/p&gt;

&lt;p&gt;By now you're happily married for half a year, and it must be such a blast. I hope you enjoyed the wedding and took some time to truly enjoy it, being there and setting your mind to it.&lt;/p&gt;

&lt;p&gt;Knowing you, there was also a bit of blogging involved, but that's ok. Everyone knows it's what you love, and I do hope you still love it whilst reading this letter.&lt;/p&gt;

&lt;p&gt;And wow you look amazing in those wedding pics, I can see all the exercising and healthy eating is paying off. You even love doing it and feel more energetic. Double-wins!&lt;/p&gt;

&lt;p&gt;I do hope you got around to thinking about what you exactly want, I knew a year ago it was a question you couldn't truly answer, but who knows what a year might have changed.&lt;/p&gt;

&lt;p&gt;Your initial goal was to travel more, see places, experience unique things, enjoy life. the year I was having didn't allow it, but you did better, I'm sure of it.&lt;/p&gt;

&lt;p&gt;As for the blog, you're doing an amazing job, it's 584 articles ago you started this crazy thing, and I can't believe you made it!&lt;/p&gt;

&lt;p&gt;Oh, correction you missed 3 days because of the wedding? That's fine buddy nobody expected you to even do this every single day for this long.&lt;/p&gt;

&lt;p&gt;Anyway, I know you loved to read this, and know that you in return will write a letter to future Chris, tell him I said hi!&lt;/p&gt;

&lt;p&gt;Cheers buddy, keep strong üç∫&lt;/p&gt;

&lt;p&gt;Your past self,&lt;/p&gt;

&lt;p&gt;Chris&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rSWj0jIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609505787908/Br5ZrHPI-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rSWj0jIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609505787908/Br5ZrHPI-.png" alt="Receiving the letter from myself"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>gratitude</category>
    </item>
    <item>
      <title>My 2021 Learning Plan</title>
      <author>Henry Boisdequin</author>
      <pubDate>Wed, 06 Jan 2021 05:01:39 +0000</pubDate>
      <link>https://dev.to/hb/my-2021-learning-plan-76f</link>
      <guid>https://dev.to/hb/my-2021-learning-plan-76f</guid>
      <description>&lt;p&gt;2021, is here already?! Seems like only yesterday when I started learning how to code in April of 2020. This year, I want to take things to another level: programming real projects and learning new things. I wanted to hold myself accountable, hence why I'm publishing my 2021 learning plan here on DEV and will give weekly updates every week to let you know how I'm doing. In this post, I will be sharing my main focuses for 2021 and the different frameworks, tools, and languages I will be learning along the way. Let's dive right in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basicsrefreshers" class="anchor"&gt;
  &lt;/a&gt;
  Basics/Refreshers
&lt;/h2&gt;

&lt;p&gt;Since I've only been programming for about half a year and I like to move quickly, I need to review the basics. Oftentimes, I find myself not remembering how to do certain things like setting up a GraphQL server or setting some Typescript types. Also, I would like to revisit algorithms and data structures as I haven't mastered them 100%. Here are the basics that I'm going to review in 2021:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up a Node.js Typescript backend &lt;/li&gt;
&lt;li&gt;Algorithms and data structures&lt;/li&gt;
&lt;li&gt;Big O Notation&lt;/li&gt;
&lt;li&gt;Server-side rendering&lt;/li&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;Authentication with JWTs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#new-things-im-going-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  New things I'm going to learn
&lt;/h2&gt;

&lt;p&gt;This year, I want to step outside of my comfort zone. I've always loved full-stack web development in Javascript/Typescript. In 2021, the big things I would like to do are: to create some useful full-stack web apps with a Rust backend and learn about ethical hacking and cryptocurrencies. Here is the list of things I'm going to "hopefully" learn:&lt;/p&gt;

&lt;p&gt;Javascript/Typescript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication with Passport.js (GitHub, Twitter, Google)&lt;/li&gt;
&lt;li&gt;REST APIs&lt;/li&gt;
&lt;li&gt;PostgreSQL with Typeorm&lt;/li&gt;
&lt;li&gt;PWAs&lt;/li&gt;
&lt;li&gt;React Testing Libary/Cypress&lt;/li&gt;
&lt;li&gt;Mocha and Chai Testing&lt;/li&gt;
&lt;li&gt;React Query&lt;/li&gt;
&lt;li&gt;Tailwind CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ethical Hacking with Python&lt;/li&gt;
&lt;li&gt;CNNs, RNNs, and ANNs with Tensorflow&lt;/li&gt;
&lt;li&gt;Machine learning algorithms in Tensorflow&lt;/li&gt;
&lt;li&gt;Matplotlib&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rust: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rust basics&lt;/li&gt;
&lt;li&gt;Tokio&lt;/li&gt;
&lt;li&gt;Diesel (ORM)&lt;/li&gt;
&lt;li&gt;Setting up a REST API in Rust with Rocket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS: S3, Lambda, Lightsail&lt;/li&gt;
&lt;li&gt;Vercel hosting + analytics&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#courses-im-going-to-take" class="anchor"&gt;
  &lt;/a&gt;
  Courses I'm going to take
&lt;/h2&gt;

&lt;p&gt;Since I'm learning a lot of new things, I need some courses to learn from! I'll be sharing 5 courses which I plan to take in 2021:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/complete-ethical-hacking-bootcamp-zero-to-mastery/"&gt;Ethical Hacking with Python&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/master-the-coding-interview-data-structures-algorithms/"&gt;Data Structures and Algorithms&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/rust-fundamentals/"&gt;Rust Fundematals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/x1rQ61otgtU?list=PL4cUxeGkcC9jpi7Ptjl5b50p9gLjOFani"&gt;React Query Tutorial&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=UBOj6rqRUME"&gt;Tailwind CSS Crash Course&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I have a very busy year ahead. I'll try my best to complete all the things on this list and if I don't: that's ok! &lt;/p&gt;

&lt;p&gt;Let's start 2021 on a high note, let's get coding! Thanks for reading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Henry&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>webdev</category>
      <category>bash</category>
    </item>
    <item>
      <title>Scraping Wikipedia for data using Puppeteer and Node</title>
      <author>Tyler Reicks</author>
      <pubDate>Wed, 06 Jan 2021 04:41:23 +0000</pubDate>
      <link>https://dev.to/tyry327/scraping-wikipedia-for-data-using-puppeteer-and-node-1f0l</link>
      <guid>https://dev.to/tyry327/scraping-wikipedia-for-data-using-puppeteer-and-node-1f0l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;In this article, we'll go through scraping a Wikipedia table with COVID-19 data using Puppeteer and Node. The original article that I used for this project is located &lt;a href="https://analyticsindiamag.com/puppeteer-web-scraping/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have never scraped a website before. I've always seen it as a hacky thing to do. But, after going through this little project, I can see the value of something like this. Data is hard to find and if you can scrape a website for it, in my opinion, by all means, do it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Setting up this project was extremely easy. All you have to do is install Puppeteer with the command &lt;code&gt;npm install puppeteer&lt;/code&gt;. There was one confusing issue I had during setup, however. The puppeteer package was not unzipped correctly when I initially installed it. I found this out while running the initial example in the article. If you get an error that states &lt;code&gt;Failed to launch browser process&lt;/code&gt; or something similar follow these steps: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Unzip &lt;code&gt;chrome-win&lt;/code&gt; from &lt;code&gt;node_modules/puppeteer/.local-chromium/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then add that folder to the &lt;code&gt;win64&lt;/code&gt; folder in that same &lt;code&gt;.local-chromium&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Make sure the &lt;code&gt;chrome.exe&lt;/code&gt; is in this path &lt;code&gt;node_modules/puppeteer/.local-chromium/win64-818858/chrome-win/chrome.exe&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;This is for windows specifically. Mac might be similar, but not sure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the &lt;a href="https://github.com/puppeteer/puppeteer/issues/5662#issuecomment-625788716"&gt;link&lt;/a&gt; that lead me to the answer. It might be a good idea to do this no matter what to make sure everything is functioning properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code" class="anchor"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;I had to make a couple of small changes to the existing code. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-example" class="anchor"&gt;
  &lt;/a&gt;
  First example
&lt;/h4&gt;

&lt;p&gt;The first example didn't work for me. To fix the problem I assigned the async function to a variable then invoked that variable after the function. I'm not sure this is the best way to handle the issue but hey, it works. Here is the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer');

const takeScreenShot = async () =&amp;gt; {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto('https://www.stem-effect.com/');
    await page.screenshot({path: 'output.png'});

    await browser.close();
};

takeScreenShot();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#wikipedia-scraper" class="anchor"&gt;
  &lt;/a&gt;
  Wikipedia scraper
&lt;/h4&gt;

&lt;p&gt;I also had an issue with the Wikipedia scraper code. For some reason, I was getting null values for the country names. This screwed up all of my data in the JSON file I was creating. &lt;/p&gt;

&lt;p&gt;Also, the scraper was 'scraping' every table on the Wikipedia page. I didn't want that. I only wanted the first table with the total number of cases and deaths caused by COVID-19. Here is the modified code I used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer');
const fs = require('fs')

const scrape = async () =&amp;gt;{
    const browser = await puppeteer.launch({headless : false}); //browser initiate
    const page = await browser.newPage();  // opening a new blank page
    await page.goto('https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic_by_country_and_territory', {waitUntil : 'domcontentloaded'}) // navigate to url and wait until page loads completely

    // Selected table by aria-label instead of div id
    const recordList = await page.$$eval('[aria-label="COVID-19 pandemic by country and territory table"] table#thetable tbody tr',(trows)=&amp;gt;{
        let rowList = []    
        trows.forEach(row =&amp;gt; {
                let record = {'country' : '','cases' :'', 'death' : '', 'recovered':''}
                record.country = row.querySelector('a').innerText; // (tr &amp;lt; th &amp;lt; a) anchor tag text contains country name
                const tdList = Array.from(row.querySelectorAll('td'), column =&amp;gt; column.innerText); // getting textvalue of each column of a row and adding them to a list.
                record.cases = tdList[0];        
                record.death = tdList[1];       
                record.recovered = tdList[2];   
                if(tdList.length &amp;gt;= 3){         
                    rowList.push(record)
                }
            });
        return rowList;
    })
    console.log(recordList)
    // Commented out screen shot here
    // await page.screenshot({ path: 'screenshots/wikipedia.png' }); //screenshot 
    browser.close();

    // Store output
    fs.writeFile('covid-19.json',JSON.stringify(recordList, null, 2),(err)=&amp;gt;{
        if(err){console.log(err)}
        else{console.log('Saved Successfully!')}
    })
};
scrape();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I wrote comments on the subtle changes I made, but I'll also explain them here. &lt;/p&gt;

&lt;p&gt;First, instead of identifying the table I wanted to use by the &lt;code&gt;div#covid19-container&lt;/code&gt;, I pinpointed the table with the aria-label. This was a little more precise. Originally, the reason the code was scraping over all of the tables on the page was because the IDs were the same (I know, not a good practice. That's what classes are for, right?). Identifying the table via aria-label helped ensure that I only scraped the exact table I wanted, at least in this scenario.&lt;/p&gt;

&lt;p&gt;Second, I commented out the screenshot command. It broke the code for some reason and I didn't see the need for it if we were just trying to create a JSON object from table data.&lt;/p&gt;

&lt;p&gt;Lastly, after I obtained the data from the correct table I wanted to actually use it in a chart. I created an HTML file and displayed the data using Google charts. You can see the full project on my &lt;a href="https://github.com/tyry327/scraper"&gt;Github&lt;/a&gt; if you are curious. Fair warning, I got down and dirty (very hacky) putting this part together, but at the end of the day, I just wanted an easier way to consume the data that I had just mined for. There could be a whole separate article on the amount of refactoring that can be done on my HTML page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This project was really fun. Thank you to the author, Mohit Maithani, for putting it together. It opened my eyes to the world of web scraping and a whole new realm of possibilities! At a high level, web scraping enables you to grab data from anywhere you want. &lt;/p&gt;

&lt;p&gt;Like one of my favorite Youtubers, Ben Sullins likes to say, "When you free the data, your mind will follow". &lt;/p&gt;

&lt;p&gt;Love y'all. Happy coding!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>node</category>
      <category>puppeteer</category>
    </item>
    <item>
      <title>How to manage background processes in Linux</title>
      <author>Javed Shaikh</author>
      <pubDate>Wed, 06 Jan 2021 03:36:51 +0000</pubDate>
      <link>https://dev.to/shaikh/how-to-manage-background-processes-in-linux-1d2m</link>
      <guid>https://dev.to/shaikh/how-to-manage-background-processes-in-linux-1d2m</guid>
      <description>&lt;p&gt;If you are new to Linux operating system and you start a command or process using terminal/session, you must have noticed that you need to wait till a process or command get finished before starting another command. This is because when you run a command using session or terminal, the process starts in the foreground by default. What should you do to run another command without opening a new terminal?&lt;br&gt;
In this post I am going to show how you can manage background and foreground process in Linux. &lt;/p&gt;

&lt;p&gt;But before that lets understand what is foreground process and what is background process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Foreground process&lt;/strong&gt; is the process or job that is currently running on the terminal. So there will be only one foreground process per terminal.You need to wait till the current foreground process finishes before starting a new foreground process.&lt;br&gt;
**Example: **Any command or process you start in the current session&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Background process&lt;/strong&gt; is the process or job running on the background and doesn't require interaction from the user. There can be more than one background process obviously.&lt;br&gt;
&lt;strong&gt;Example:&lt;/strong&gt; most common example is your web server.&lt;/p&gt;

&lt;p&gt;For this example I am going to start command VMSTAT 1&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;vmstat 5
procs &lt;span class="nt"&gt;-----------memory----------&lt;/span&gt; &lt;span class="nt"&gt;---swap--&lt;/span&gt; &lt;span class="nt"&gt;-----io----&lt;/span&gt; &lt;span class="nt"&gt;-system--&lt;/span&gt; &lt;span class="nt"&gt;------cpu-----&lt;/span&gt;
 r  b   swpd   free   buff  cache   si   so    bi    bo   &lt;span class="k"&gt;in   &lt;/span&gt;cs us sy &lt;span class="nb"&gt;id &lt;/span&gt;wa st
 0  0      0 3045156 167484 2449380    0    0    80    56  469 1138 19  5 76  0  0
 1  0      0 3044644 167492 2450152    0    0     0    92  299  604  2  1 98  0  0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;vmstat&lt;/strong&gt; is command that displays real time memory usage and cpu utillization. If you want to know more about it visit my previous post  &lt;a href="https://shaikhu.com/how-to-monitor-cpu-utilization-in-linux-ckgcp9gex07g8pas1ees0hz7t"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In the above command &lt;br&gt;
Things to note here is that above command will print CPU stats every five second on the terminal until you interrupt it. If you want to terminate it just press &lt;strong&gt;CTL + C&lt;/strong&gt; or if you want to pause or stop, press &lt;strong&gt;CTL + Z&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bg-move-a-job-to-background" class="anchor"&gt;
  &lt;/a&gt;
  bg: Move a job to background
&lt;/h3&gt;

&lt;p&gt;If you want to move a job that is already started to background so that you can access the terminal press &lt;strong&gt;CTL + Z ** and then **bg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;lets start a job in the foreground using below command. Here we are writing CPU stats on a text file. As you can see , we cannot start a new command as this is running on the foreground.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets do &lt;strong&gt;CTL + Z&lt;/strong&gt; to pause this job and then do &lt;strong&gt;bg&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt
^Z
&lt;span class="o"&gt;[&lt;/span&gt;1]+  Stopped                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt
shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;bg&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]+ vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now the job running in the background and we got the terminal&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-start-command-and-run-it-in-the-background" class="anchor"&gt;
  &lt;/a&gt;
  How to start command and run it in the background
&lt;/h3&gt;

&lt;p&gt;To start a command and run it in the background use &lt;strong&gt;&amp;amp;&lt;/strong&gt; as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2] 11122
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#jobs-command-to-check-the-job-status" class="anchor"&gt;
  &lt;/a&gt;
  jobs : command to check the job status
&lt;/h3&gt;

&lt;p&gt;This command displays all the jobs running in the current terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]-  Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2]+  Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here number withing bracket is [n] is job id or job number and &lt;strong&gt;+&lt;/strong&gt; indicates most recent command or job whereas &lt;strong&gt;-&lt;/strong&gt; indicates previous job. If you want to see the process id use &lt;strong&gt;-l&lt;/strong&gt; option&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]- 10216 Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2]+ 11122 Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The number 10216 and 11122 are process id&lt;/p&gt;

&lt;p&gt;Different options for &lt;strong&gt;jobs&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#l-lists-process-ids-in-addition-to-the-normal-information" class="anchor"&gt;
  &lt;/a&gt;
  -l :    lists process IDs in addition to the normal information
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#n-lists-only-processes-that-have-changed-status-since-the-last" class="anchor"&gt;
  &lt;/a&gt;
  -n :    lists only processes that have changed status since the last
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#notification" class="anchor"&gt;
  &lt;/a&gt;
  notification
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#p-lists-process-ids-only" class="anchor"&gt;
  &lt;/a&gt;
  -p :    lists process IDs only
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#r-restrict-output-to-running-jobs" class="anchor"&gt;
  &lt;/a&gt;
  -r :    restrict output to running jobs
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#s-restrict-output-to-stopped-jobs" class="anchor"&gt;
  &lt;/a&gt;
  -s :    restrict output to stopped jobs
&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#kill-n-to-kill-a-job-with-job-id-n" class="anchor"&gt;
  &lt;/a&gt;
  kill %n: to kill a job with job id n
&lt;/h3&gt;

&lt;p&gt;Kill command is used to kill a job. Note that &lt;strong&gt;%&lt;/strong&gt; will be used to indicate job id or job number&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;haikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]-  Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2]+  Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt; %2
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]+  Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see now we have only one job running in the background and notice the &lt;strong&gt;+&lt;/strong&gt; sign which indicates the job id 1 becomes the most recent job üôÇ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fg-command-to-move-a-job-to-foreground" class="anchor"&gt;
  &lt;/a&gt;
  fg : command to move a job to foreground
&lt;/h3&gt;

&lt;p&gt;Use **fg **command to move a job to foreground. By default it will bring most recent background job to foreground&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1]   Running                 vmstat 5 &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; vmstat.txt &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;2]-  Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;400 &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;3]+  Running                 &lt;span class="nb"&gt;sleep &lt;/span&gt;500 &amp;amp;
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;fg
sleep &lt;/span&gt;500
&lt;span class="o"&gt;[&lt;/span&gt;2]   Done                    &lt;span class="nb"&gt;sleep &lt;/span&gt;400
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have more than one jobs running in the background then use &lt;strong&gt;%n&lt;/strong&gt; to move a specific job to the foreground&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;fg&lt;/span&gt; %2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ps-command-to-see-all-the-processes" class="anchor"&gt;
  &lt;/a&gt;
  ps command to see all the processes
&lt;/h3&gt;

&lt;p&gt;Use &lt;strong&gt;ps&lt;/strong&gt; command to see active processes.&lt;br&gt;
Use below options&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#ps-ax-to-see-all-the-process-currently-active-in-the-system-use-my-previous-post-to-check-the-commands-for-real-time-process-it-will-be-a-very-long-list-so-use-lessmore-parameters" class="anchor"&gt;
  &lt;/a&gt;
  ps ax : to see all the process currently active in the system (Use my previous post to check the commands for real time process). It will be a very long list, so use less/more parameters
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#ps-t-list-all-processes-running-on-current-terminal" class="anchor"&gt;
  &lt;/a&gt;
  ps T: list all processes running on current terminal
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;ps T
    PID TTY      STAT   TIME COMMAND
   5786 pts/0    Ss     0:00 bash
  10216 pts/0    S      0:00 vmstat 5
  12983 pts/0    R+     0:00 ps T
shaikh@shaikhucom:~&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So in this post we learned different commands to manage background and foreground process. We learned&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-bg-and-fg-to-move-a-job-to-the-background-and-foreground-respectively" class="anchor"&gt;
  &lt;/a&gt;
  - &lt;strong&gt;bg&lt;/strong&gt; and &lt;strong&gt;fg&lt;/strong&gt; to move a job to the background and foreground ##### respectively.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#-jobs-command-to-list-all-the-jobs-active-in-the-current-terminal" class="anchor"&gt;
  &lt;/a&gt;
  - &lt;strong&gt;jobs&lt;/strong&gt; command to list all the jobs active in the current terminal.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#-kill-command-to-kill-a-job" class="anchor"&gt;
  &lt;/a&gt;
  - &lt;strong&gt;kill&lt;/strong&gt; command to kill a job
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#-ps-command-to-see-list-of-all-the-active-and-running-processes" class="anchor"&gt;
  &lt;/a&gt;
  - &lt;strong&gt;ps&lt;/strong&gt; command to see list of all the active and running processes
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#we-also-learned-how-to-start-a-job-in-the-background-using-amp-if-you-want-to-know-real-time-memory-and-cpu-usage-and-control-all-the-processes-running-on-your-system-please-check-my-last-post-httpsshaikhucomhowtomonitorcpuutilizationinlinuxckgcp9gex07g8pas1ees0hz7t" class="anchor"&gt;
  &lt;/a&gt;
  We also learned how to start a job in the background using &lt;strong&gt;&amp;amp;&lt;/strong&gt;. If you want to know real time memory and cpu usage and control all the processes running on your system please check my last post  &lt;a href="https://shaikhu.com/how-to-monitor-cpu-utilization-in-linux-ckgcp9gex07g8pas1ees0hz7t"&gt;https://shaikhu.com/how-to-monitor-cpu-utilization-in-linux-ckgcp9gex07g8pas1ees0hz7t&lt;/a&gt;
&lt;/h5&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Why Axios Is Awesome (and how to get started with it)</title>
      <author>Nathan Sheets</author>
      <pubDate>Wed, 06 Jan 2021 03:32:07 +0000</pubDate>
      <link>https://dev.to/programmingnate/why-axios-is-awesome-and-how-to-get-started-with-it-2ncj</link>
      <guid>https://dev.to/programmingnate/why-axios-is-awesome-and-how-to-get-started-with-it-2ncj</guid>
      <description>&lt;p&gt;Making HTTP requests can easily get bloated and unnecessarily complex. Sure, you can use jQuery's ajax methods or even jquery.get, but that has its limitations and doesn't fit well with a code base that's heavily based on promises.&lt;/p&gt;

&lt;p&gt;Enter: Axios. Axios is a promise-based HTTP handler that makes your life a thousand times easier. It's very simple to use. For example, an ajax request through jQuery could take up a dozen lines or more, and the more lines of code that aren't abstracted away from you, the more room for error and bugs.&lt;/p&gt;

&lt;p&gt;An axios request can take two primary forms for most uses. The simplest one, for example, a GET request, looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const axios = require('axios');
axios.get('YourURLorEndpointHere');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's a simple get request. The fun part is that that statement on the second line actually returns a promise, so you could handle the response extremely easily. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const axios = require('axios');
axios.get('YourURLorEndpointHere')
  .then(response =&amp;gt; {
    //do something
  })
  .catch(err =&amp;gt; {
    //do something else 
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And you're done. That's it. That's the whole get request, handled and caught.&lt;/p&gt;

&lt;p&gt;Let's say you wanted to make a post request instead, and you wanted to add some options in there. You can also use Axios as a function and give it an object with what ever parameters you want. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;axios({
  method: 'post',
  url: 'yourURLorEndpointHere',
  data: {
    //Your info to send here
  }
})
.then(response =&amp;gt; {
  //do something with the response
})
.catch(err =&amp;gt; {
  //handle any errors
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it. That's what you'd use in 90% of any situations you'll run across, at least for simpler websites. Axios can help you make simpler, easier, and cleaner HTTP requests. &lt;/p&gt;

&lt;p&gt;Bonus: If you don't already use it, Express is a great tool for receiving all those super clean requests you just made!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
    </item>
  </channel>
</rss>
