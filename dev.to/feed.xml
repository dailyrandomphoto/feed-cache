<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Spiral lifecycle model Part 2</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 18 Oct 2021 07:54:22 +0000</pubDate>
      <link>https://dev.to/aatmaj/spiral-lifecycle-model-part-2-1ci9</link>
      <guid>https://dev.to/aatmaj/spiral-lifecycle-model-part-2-1ci9</guid>
      <description>&lt;p&gt;&lt;strong&gt;In the last post, we studied about the spiral lifecycle model. Let us now continue discussing about the model in this part. Just in case you missed it, you can check it out &lt;a href="https://dev.to/aatmaj/spiral-lifecycle-model-part-1-4cjh"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#advantages-of-the-model"&gt;
  &lt;/a&gt;
  Advantages of the model
&lt;/h3&gt;

&lt;p&gt;The spiral lifecycle model helps you analyze risks and eliminate them before they get too big. One of the moist important advantages of the spiral model is that as the cost increases, the risk decreases. The more time and money you spend, the lesser risk you are actually taking, which is exactly what we all want in any lifecycle model.&lt;/p&gt;

&lt;p&gt;The spiral model provides at least as much management control as the traditional waterfall model, you have the checkpoints ready just from the start of every iteration. Because the model is risk oriented, it provides you with the early indications of any risks possible. If in the worst case, the project cant be done for technical or any other reasons, you will find that out early on. Moreover the users can see the system easily from the start due to &lt;strong&gt;effective prototyping&lt;/strong&gt;. This results in &lt;strong&gt;Early user engagement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The spiral lifecycle model can be coupled with other lifecycle models in a couple of different ways. This is why this model is very adaptable. And yes, the transition from building a project to maintaining it is so smooth that this boosts the overall maintainability of the project &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h3&gt;

&lt;p&gt;The only disadvantage of the spiral model is that it's a lot complicated.  It requires conscientious, attentive and knowledgeable management. It can be difficult to define objective, verifiable milestones that indicate weather you're ready to add the next layer to the model or not. In some cases, the product development is straight forward enough and project risks are modest enough that you don't need the flexibility and risk management provided by the spiral model. Not suitable for small or low risk projects and could be expensive for small projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-this-model"&gt;
  &lt;/a&gt;
  When to use this model
&lt;/h3&gt;

&lt;p&gt;Use this model when you have an experienced management staff. Use in projects where user involvement is to be preferred over expected time to complete.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use For&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#for-medium-to-highrisk-projects"&gt;
  &lt;/a&gt;
  For medium to high-risk projects.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#when-there-is-adequate-to-fair-time"&gt;
  &lt;/a&gt;
  When there is adequate to fair time.
&lt;/h5&gt;
&lt;/blockquote&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>15 Must-Have Browser Extensions for Web Developers</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 07:48:04 +0000</pubDate>
      <link>https://dev.to/codingmania/15-must-have-browser-extensions-for-web-developers-23ni</link>
      <guid>https://dev.to/codingmania/15-must-have-browser-extensions-for-web-developers-23ni</guid>
      <description>&lt;h2&gt;Browsers are increasingly incorporating more &lt;span&gt;&lt;a href="#"&gt;extensions, plugins and add-ons&lt;/a&gt;&lt;/span&gt;, which are often developed by their users, making the browser more powerful, and helping us increase our productivity. Here at Awwwards, our mission is to share with you the best resources and tools on the web, so we're writing a series of blog articles on &lt;span&gt;the best extensions and plugins for major browsers&lt;/span&gt;. To kick-off, we're focusing on extensions that are offered in the Chrome Web Store, available for free and easy to install.&lt;/h2&gt;
&lt;p&gt;Among the tools, we'll highlight those that are&lt;span&gt; most useful for web designers and developers&lt;/span&gt;. We hope you find them useful and get you better results. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/chrome-extensions-for-web-developers/&amp;amp;ved=2ahUKEwjNobWsr-fyAhX_yzgGHYoACLUQFnoECAMQBQ&amp;amp;usg=AOvVaw3LrSRSp_yMsQU7StlCW8qG"&gt;15 Must-Have Browser Extensions for Web Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>7 Best Tools For Developers - They Can't Live Without It</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 07:29:25 +0000</pubDate>
      <link>https://dev.to/codingmania/7-best-tools-for-developers-they-cant-live-without-it-4d7b</link>
      <guid>https://dev.to/codingmania/7-best-tools-for-developers-they-cant-live-without-it-4d7b</guid>
      <description>&lt;p&gt; &lt;span&gt;The&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;best tools for developers &lt;/b&gt;&lt;span&gt;are a priority for them to work. As a developer, he always works with code editors, browsers, terminals, etc. to improve his productivity. VS Code is one of the best editors, every developer would like to work with it. I've also listed the&lt;/span&gt;&lt;span&gt; &lt;/span&gt;VS Code extensions for JS &lt;span&gt;that are useful for a developer. And browser extensions are also a great way to improve productivity and I've also listed&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;Chrome extensions for a developer&lt;/b&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;If you are a junior programmer, this will give you an idea the improve your coding skills, and if you are a senior developer, you are still learn something new from it. Extensions are one the &lt;b&gt;best tools for developers.&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;Let's see the best tools for developers.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/7-best-tools-for-developers-they-cant-live-without-it/"&gt;7 Best Tools For Developers - They Can't Live Without It&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>7 Amazing Tips While Redesigning Your Website</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 07:28:48 +0000</pubDate>
      <link>https://dev.to/codingmania/7-amazing-tips-while-redesigning-your-website-3kdk</link>
      <guid>https://dev.to/codingmania/7-amazing-tips-while-redesigning-your-website-3kdk</guid>
      <description>&lt;p&gt;Redesigning a website may be a stressful, time-consuming, and complex task. It’s natural if the amount of information you need to know in order to build a new, fresh design repulses you. However, if you take the time to educate yourself and gain hands-on experience, you can avoid making mistakes and achieve your goals. Here are seven golden pointers for redesigning your website to get you started:&lt;/p&gt;
&lt;p&gt;When you consider rebuilding your website, you most likely imagine something huge and powerful. It’s the ideal opportunity to give your website a bold and dramatic new appearance. However, the world is not what you might assume. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;READ More&lt;/b&gt;: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/7-amazing-tips-while-redesigning-your-website/&amp;amp;ved=2ahUKEwjCx8Gc_JjzAhXawzgGHeQLBh4QFnoECAQQBQ&amp;amp;usg=AOvVaw1MCPezHaMcqtc9wW14T5Lx"&gt;7 Amazing Tips While Redesigning Your Website&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 JS tricks you *probably* didn't know</title>
      <author>Shuvo</author>
      <pubDate>Mon, 18 Oct 2021 06:51:33 +0000</pubDate>
      <link>https://dev.to/0shuvo0/10-js-tricks-you-probably-didnt-know-3adf</link>
      <guid>https://dev.to/0shuvo0/10-js-tricks-you-probably-didnt-know-3adf</guid>
      <description>&lt;ol&gt;
&lt;li&gt;You can use &lt;strong&gt;+&lt;/strong&gt; in front of a string to convert it into a number. &lt;code&gt;console.log(typeof +"5") //number&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;+&lt;/strong&gt; in front of date object will convert in into number of milliseconds. &lt;code&gt;console.log(+new Date()) //1634538267248&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;| 0&lt;/strong&gt; after a floating point number will convert in into a integer. &lt;code&gt;console.log(35.354 | 0) //35&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If an array only contains one number you can use &lt;strong&gt;+&lt;/strong&gt; in front of array to convert it into a number. &lt;code&gt;console.log(typeof +[6]) //number&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Use es6 to remove duplicates from array. &lt;code&gt;console.log([...new Set([1,2,2,3,4,4,5])]) //[1, 2, 3, 4, 5]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Converting Numbers array to Strings array &lt;code&gt;console.log([1,2,2,3,4,4,5].map(String)) //['1', '2', '2', '3', '4', '4', '5']&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Converting String array to Numbers array &lt;code&gt;console.log(['1', '2', '2', '3', '4', '4', '5'].map(Number)) //[1, 2, 2, 3, 4, 4, 5]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTML comment is valid in JavaScript WTF 🤣&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="nx"&gt;Don&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t mind me I am just a comment--&amp;gt;
console.log("Hello")
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compare three values without using &lt;strong&gt;&amp;amp;&amp;amp;&lt;/strong&gt;. &lt;code&gt;console.log(3 &amp;gt; 2 &amp;lt; 5) //false&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deep copy object using &lt;strong&gt;JSON.stringify&lt;/strong&gt; and &lt;strong&gt;JSON.parse&lt;/strong&gt; &lt;code&gt;console.log(obj == JSON.parse(JSON.stringify(obj))) // false&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>10 Awesome Github Repos Every Web Developer Should Know</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 06:27:28 +0000</pubDate>
      <link>https://dev.to/codingmania/10-awesome-github-repos-every-web-developer-should-know-34kd</link>
      <guid>https://dev.to/codingmania/10-awesome-github-repos-every-web-developer-should-know-34kd</guid>
      <description>&lt;p&gt;&lt;span&gt;Here I list 10 excellent JavaScript based GitHub resources that will help you to understand the language better and help you to write clean code. This list is based on my personal preference. &lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ReadUI&amp;amp;quot More: &lt;b&gt;&lt;a href="https://news.google.com/articles/CAIiEHRNZDbK-6L3wLhhd1mvgX8qGQgEKhAIACoHCAow7-ynCzDc978DMKOIlgc?hl=en-US&amp;amp;gl=US&amp;amp;ceid=US%3Aen"&gt;10 Awesome Github Repos Every Web Developer Should Know&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>Ethical Hacking Roadmap - A Beginners Tutorial</title>
      <author>Coders</author>
      <pubDate>Mon, 18 Oct 2021 06:26:56 +0000</pubDate>
      <link>https://dev.to/codingmania/ethical-hacking-roadmap-a-beginners-tutorial-1god</link>
      <guid>https://dev.to/codingmania/ethical-hacking-roadmap-a-beginners-tutorial-1god</guid>
      <description>&lt;h2&gt;&lt;strong&gt;Who is an Ethical Hacker?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;An ethical hacker is a computer network specialist who deals with the security posture of an organization. His job involves eliciting security flaws in the organization he is working for by testing all aspects of the system and its services for any sort of vulnerabilities. The key point to notice is that all this is done with the permission of the owners of the organization and without any malicious intent. An ethical hacker is also known as a white hat hacker and is the stark opposite of a black hat hacker, a.k.a crackers who hack with the sole purpose of bringing about some sort of disruption, or chaos from the vulnerabilities they find. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/ethical-hacking-roadmap-a-beginners-guide/&amp;amp;ved=2ahUKEwjSy6-98ZvzAhXQxTgGHSS8Bu84ChAWegQIGxAB&amp;amp;usg=AOvVaw3-vFooaWUJypOS-FfvXpjK"&gt;Ethical Hacking Roadmap - A Beginners Guide&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Flutter: Interesting widgets, part 2.</title>
      <author>Samuel Wahome</author>
      <pubDate>Mon, 18 Oct 2021 06:21:48 +0000</pubDate>
      <link>https://dev.to/samueldotcloud/flutter-interesting-widgets-part-2-1o35</link>
      <guid>https://dev.to/samueldotcloud/flutter-interesting-widgets-part-2-1o35</guid>
      <description>&lt;p&gt;Welcome one and all to yet another edition of this blog series, that revolves around interesting yet useful &lt;a href="https://flutter.dev/?gclid=CjwKCAjwk6-LBhBZEiwAOUUDpyiFfJ5G96xWuWr-lzfw7y7EseI5e8gpd9qbPai9Zu78jZWSPJxViRoC8Y4QAvD_BwE&amp;amp;gclsrc=aw.ds"&gt;Flutter&lt;/a&gt; widgets that I've encountered in my exploits with the framework. The first part of this series can be found right &lt;a href="https://medium.com/@samuelwahome/flutter-interesting-widgets-part-1-c166c07f3b60"&gt;here&lt;/a&gt;. Enough of the pleasantries, and let's cut straight to the chase.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l4Epj0XzZbQ4go3Qs/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l4Epj0XzZbQ4go3Qs/giphy.gif" alt="GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#icon"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/Icon-class.html"&gt;Icon&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Ever need to render icons in your app? Well, look no further as this widget definitely has your back. Simply put, the &lt;code&gt;Icon&lt;/code&gt; widget is a graphical icon widget, that is able to draw icons as described in its &lt;a href="https://api.flutter.dev/flutter/widgets/Icon/icon.html"&gt;icon&lt;/a&gt; property, that accepts an &lt;a href="https://api.flutter.dev/flutter/widgets/IconData-class.html"&gt;IconData&lt;/a&gt; class, which is a description of an icon fulfilled by a font glyph.&lt;br&gt;
This widget has other properties that can be modified, such as &lt;a href="https://api.flutter.dev/flutter/widgets/Icon/size.html"&gt;size&lt;/a&gt; and &lt;a href="https://api.flutter.dev/flutter/widgets/Icon/color.html"&gt;color&lt;/a&gt;, all in order to make the UI even more appealing. It is important to note that Icons are not interactive, hence would need to be wrapped with other interactive widgets, or one may also consider material's &lt;a href="https://api.flutter.dev/flutter/material/IconButton-class.html"&gt;IconButton&lt;/a&gt;, which does that work just as efficiently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/Text-class.html"&gt;Text&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;This widget is responsible for displaying a string of text, but with a single style. This widget has various properties such as &lt;a href="https://api.flutter.dev/flutter/widgets/Text/data.html"&gt;data&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Text/maxLines.html"&gt;maxLines&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Text/overflow.html"&gt;overflow&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Text/style.html"&gt;style&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Text/textAlign.html"&gt;textAlign&lt;/a&gt;, and &lt;a href="https://api.flutter.dev/flutter/widgets/Text-class.html"&gt;others&lt;/a&gt; that are used to customize how a &lt;code&gt;Text&lt;/code&gt; widget is rendered on the screen.&lt;br&gt;
It is important to note that the &lt;code&gt;Text&lt;/code&gt; widget is not interactive, hence to make &lt;a href="https://api.flutter.dev/flutter/widgets/Text-class.html"&gt;Text&lt;/a&gt; react to touch events, wrap it in a &lt;a href="https://api.flutter.dev/flutter/widgets/GestureDetector-class.html"&gt;GestureDetector&lt;/a&gt; widget with a &lt;a href="https://api.flutter.dev/flutter/widgets/GestureDetector/onTap.html"&gt;GestureDetector.onTap&lt;/a&gt; handler. In a material design application, consider using a &lt;a href="https://api.flutter.dev/flutter/material/TextButton-class.html"&gt;TextButton&lt;/a&gt; instead, or if that isn't appropriate, at least using an &lt;a href="https://api.flutter.dev/flutter/material/InkWell-class.html"&gt;InkWell&lt;/a&gt; instead of &lt;a href="https://api.flutter.dev/flutter/widgets/GestureDetector-class.html"&gt;GestureDetector&lt;/a&gt;. To make sections of the text interactive, use &lt;a href="https://api.flutter.dev/flutter/widgets/RichText-class.html"&gt;RichText&lt;/a&gt; and specify a &lt;a href="https://api.flutter.dev/flutter/gestures/TapGestureRecognizer-class.html"&gt;TapGestureRecognizer&lt;/a&gt; as the &lt;a href="https://api.flutter.dev/flutter/painting/TextSpan/recognizer.html"&gt;TextSpan.recognizer&lt;/a&gt; of the relevant part of the text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#richtext"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/RichText-class.html"&gt;RichText&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;This widget is also responsible for displaying text. However, the &lt;code&gt;RichText&lt;/code&gt; widget displays text that uses multiple different styles. The text to display is described using a tree of &lt;a href="https://api.flutter.dev/flutter/painting/TextSpan-class.html"&gt;TextSpan&lt;/a&gt; objects, each of which has an associated style that is used for that subtree.&lt;br&gt;
This widget also has various useful properties such as &lt;a href="https://api.flutter.dev/flutter/widgets/MultiChildRenderObjectWidget/children.html"&gt;children&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/RichText/maxLines.html"&gt;maxLines&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/RichText/overflow.html"&gt;overflow&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/RichText/text.html"&gt;text&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/RichText/textAlign.html"&gt;textAlign&lt;/a&gt;, etc, that can be used to customize how the &lt;code&gt;RichText&lt;/code&gt; widget is rendered on the screen. For more information, this &lt;a href="https://www.youtube.com/watch?v=rykDVh-QFfw"&gt;video&lt;/a&gt; will definitely be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#streambuilder"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/StreamBuilder-class.html"&gt;Streambuilder&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;According to the official documentation, the &lt;code&gt;Streambuilder&lt;/code&gt; widget is simply a widget that builds itself based on the latest snapshot of interaction with a &lt;a href="https://api.flutter.dev/flutter/dart-async/Stream-class.html"&gt;Stream&lt;/a&gt;. This widget is especially useful when retrieving data asynchronously from a source, and displaying that data via the use of other widgets.&lt;br&gt;
This widget has various properties such as &lt;a href="https://api.flutter.dev/flutter/widgets/StreamBuilder/builder.html"&gt;builder&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/StreamBuilder/initialData.html"&gt;initialData&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/StreamBuilderBase/stream.html"&gt;stream&lt;/a&gt;, etc, that define how a new &lt;code&gt;Streambuilder&lt;/code&gt; widget is built. &lt;br&gt;
For more information on this widget and streams in general, then &lt;a href="https://youtu.be/MkKEWHfy99Y"&gt;this&lt;/a&gt; and &lt;a href="https://api.flutter.dev/flutter/widgets/StreamBuilderBase/stream.html"&gt;that&lt;/a&gt; video should be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#listtile"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/material/ListTile-class.html"&gt;ListTile&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Ever wanted your app's list display to follow material design guidelines, or you just couldn't find the right combination of widgets to create a whole other widget to be displayed in a list? Well, here comes the &lt;code&gt;ListTile&lt;/code&gt; widget that solves just that predicament. &lt;br&gt;
A &lt;code&gt;ListTile&lt;/code&gt; widget contains one to three lines of text optionally flanked by icons or other widgets, such as &lt;a href="https://api.flutter.dev/flutter/material/Checkbox-class.html"&gt;check boxes&lt;/a&gt;. The icons (or other widgets) for the tile are defined with the &lt;a href="https://api.flutter.dev/flutter/material/ListTile/leading.html"&gt;leading&lt;/a&gt; and &lt;a href="https://api.flutter.dev/flutter/material/ListTile/trailing.html"&gt;trailing&lt;/a&gt; parameters. The first line of text is not optional and is specified with &lt;a href="https://api.flutter.dev/flutter/material/ListTile/title.html"&gt;title&lt;/a&gt;. The value of &lt;a href="https://api.flutter.dev/flutter/material/ListTile/subtitle.html"&gt;subtitle&lt;/a&gt;, which is optional, will occupy the space allocated for an additional line of text, or two lines if &lt;a href="https://api.flutter.dev/flutter/material/ListTile/isThreeLine.html"&gt;isThreeLine&lt;/a&gt; is true. Note that &lt;a href="https://api.flutter.dev/flutter/material/ListTile/leading.html"&gt;leading&lt;/a&gt; and &lt;a href="https://api.flutter.dev/flutter/material/ListTile/trailing.html"&gt;trailing&lt;/a&gt; widgets can expand as far as they wish horizontally, so ensure that they are properly constrained. List tiles are typically used in &lt;a href="https://api.flutter.dev/flutter/widgets/ListView-class.html"&gt;ListViews&lt;/a&gt;, or arranged in &lt;a href="https://api.flutter.dev/flutter/widgets/Column-class.html"&gt;Columns&lt;/a&gt; in &lt;a href="https://api.flutter.dev/flutter/material/Drawer-class.html"&gt;Drawers&lt;/a&gt; and &lt;a href="https://api.flutter.dev/flutter/material/Card-class.html"&gt;Cards&lt;/a&gt;.&lt;br&gt;
This widget has various properties such as &lt;a href="https://api.flutter.dev/flutter/material/ListTile/contentPadding.html"&gt;contentPadding&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/enabled.html"&gt;enabled&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/hoverColor.html"&gt;hoverColor&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/leading.html"&gt;leading&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/onTap.html"&gt;onTap&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/selected.html"&gt;selected&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/shape.html"&gt;shape&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/ListTile/subtitle.html"&gt;subtitle&lt;/a&gt;, etc, that define how the &lt;code&gt;ListTile&lt;/code&gt; widget is rendered on the screen. &lt;br&gt;
In case of any further queries, then this &lt;a href="https://www.youtube.com/watch?v=l8dj0yPBvgQ"&gt;video&lt;/a&gt; should be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#refreshindicator"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator-class.html"&gt;RefreshIndicator&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Ever needed to create the 'swipe to refresh feature'? Well, look no further as this has been the widget that you've definitely been searching for. A &lt;code&gt;RefreshIndicator&lt;/code&gt; in simple terms, is a widget that supports the Material "swipe to refresh" idiom.&lt;br&gt;
When the child's &lt;a href="https://api.flutter.dev/flutter/widgets/Scrollable-class.html"&gt;Scrollable&lt;/a&gt; descendant over scrolls, an animated circular progress indicator is faded into view. When the scroll ends, if the indicator has been dragged far enough for it to become completely opaque, the &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator/onRefresh.html"&gt;onRefresh&lt;/a&gt; callback is called. The callback is expected to update the scrollable's contents and then complete the &lt;a href="https://api.flutter.dev/flutter/dart-async/Future-class.html"&gt;Future&lt;/a&gt; it returns. The refresh indicator disappears after the callback's &lt;a href="https://api.flutter.dev/flutter/dart-async/Future-class.html"&gt;Future&lt;/a&gt; has completed.&lt;br&gt;
It is also important to note that a &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator-class.html"&gt;RefreshIndicator&lt;/a&gt; can only be used with a vertical scroll view.&lt;br&gt;
This widget has various properties such as &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator/backgroundColor.html"&gt;backgroundColor&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator/color.html"&gt;color&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator/displacement.html"&gt;displacement&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator/onRefresh.html"&gt;onRefresh&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/material/RefreshIndicator/child.html"&gt;child&lt;/a&gt;, etc, that define where and how the &lt;code&gt;RefreshIndicator&lt;/code&gt; widget shall be rendered on the screen.&lt;br&gt;
In case of further queries, then this &lt;a href="https://www.youtube.com/watch?v=ORApMlzwMdM"&gt;video&lt;/a&gt; should be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cliprrect"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/ClipRRect-class.html"&gt;ClipRRect&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Need a rounded rectangle shape on a widget? Well, look no further as the &lt;code&gt;ClipRRect&lt;/code&gt; widget is definitely what you've been searching for. In simple terms, this widget works by clipping its child using a rounded rectangle.&lt;br&gt;
With properties such as &lt;a href="https://api.flutter.dev/flutter/widgets/ClipRRect/borderRadius.html"&gt;borderRadius&lt;/a&gt;, etc, one can customize how this widget is rendered on the screen.&lt;br&gt;
In case of any further queries, then this &lt;a href="https://www.youtube.com/watch?v=eI43jkQkrvs"&gt;video&lt;/a&gt; should be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expanded"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/Expanded-class.html"&gt;Expanded&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Ever needed a child widget in a &lt;a href="https://api.flutter.dev/flutter/widgets/Row-class.html"&gt;Row&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Column-class.html"&gt;Column&lt;/a&gt;, or &lt;a href="https://api.flutter.dev/flutter/widgets/Flex-class.html"&gt;Flex&lt;/a&gt; to fill and occupy any extra space? Then the &lt;code&gt;Expanded&lt;/code&gt; widget is definitely what you've been searching for. If multiple children are expanded, the available space is divided among them according to the &lt;a href="https://api.flutter.dev/flutter/widgets/Flexible/flex.html"&gt;flex&lt;/a&gt; factor.&lt;br&gt;
With properties such as &lt;a href="https://api.flutter.dev/flutter/widgets/ProxyWidget/child.html"&gt;child&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Flexible/flex.html"&gt;flex&lt;/a&gt;, etc, one can define how this widget is rendered on the screen.&lt;br&gt;
In case of any further queries, then this &lt;a href="https://www.youtube.com/watch?v=_rnZaagadyo"&gt;video&lt;/a&gt; should be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#padding"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/Padding-class.html"&gt;Padding&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Need to add some extra space around a widget? Well, look no further as the &lt;code&gt;Padding&lt;/code&gt; widget may be just what you need. The &lt;code&gt;Padding&lt;/code&gt; widget works by insetting its child by the given padding.&lt;br&gt;
With its properties such as &lt;a href="https://api.flutter.dev/flutter/widgets/SingleChildRenderObjectWidget/child.html"&gt;child&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/Padding/padding.html"&gt;padding&lt;/a&gt;, etc, one can customize how the widget is rendered on a screen.&lt;br&gt;
In case of any further queries, then this &lt;a href="https://www.youtube.com/watch?v=oD5RtLhhubg"&gt;video&lt;/a&gt; should be of much help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gridview"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.flutter.dev/flutter/widgets/GridView-class.html"&gt;GridView&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Ever needed to display items in a grid format? Well, look no further as the &lt;code&gt;GridView&lt;/code&gt; widget may be just what you are looking for. A grid view is simply a scrollable, 2D array of widgets. With its various &lt;a href="https://api.flutter.dev/flutter/widgets/GridView-class.html"&gt;constructors&lt;/a&gt; such as &lt;a href="https://api.flutter.dev/flutter/widgets/GridView/GridView.builder.html"&gt;builder&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/GridView/GridView.count.html"&gt;count&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/GridView/GridView.custom.html"&gt;custom&lt;/a&gt;, &lt;a href="https://api.flutter.dev/flutter/widgets/GridView/GridView.extent.html"&gt;extent&lt;/a&gt;, etc, one is able to customize the functionality of the resulting grid.&lt;br&gt;
In case of any further queries, then this &lt;a href="https://www.youtube.com/watch?v=bLOtZDTm4H8"&gt;video&lt;/a&gt; should be of much help.&lt;/p&gt;




&lt;p&gt;That was all that I had to share for now✌. To all readers, cheers to code🥂, and have a blessed day.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>ios</category>
      <category>android</category>
    </item>
    <item>
      <title>Introduction to Currying in JavaScript</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 18 Oct 2021 06:08:32 +0000</pubDate>
      <link>https://dev.to/alexdevero/introduction-to-currying-in-javascript-59kh</link>
      <guid>https://dev.to/alexdevero/introduction-to-currying-in-javascript-59kh</guid>
      <description>&lt;p&gt;Currying is one of the more advanced techniques of working with functions. What it does is it allows you to transform functions, and the way your work with them. This tutorial will help you understand what currying in JavaScript is, how it works and how to use it in your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-currying"&gt;
  &lt;/a&gt;
  What is currying
&lt;/h2&gt;

&lt;p&gt;First of all, currying exists in multiple languages, not just JavaScript. There are probably multiple ways to explain what currying is. Some simple? Let's start with this. Currying is a process. It is a process of transforming functions with specific number of arguments into a sequence of nested functions.&lt;/p&gt;

&lt;p&gt;Each of these functions in the sequence is being returned and each is passed only one of the arguments. Only the last function in the sequence takes all arguments spread through the sequence, does some operation, and returns a value, or values. This is the first transformation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Curried function example:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;curriedFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Normal function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second transformation is how you call, or invoke, curried function. Usually, you would pass all required arguments inside the one set of parentheses. Not with curried functions. When you work with curried functions, you pass each argument into a separate set of parentheses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Calling curried function declared above:&lt;/span&gt;
&lt;span class="nx"&gt;curriedFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 66&lt;/span&gt;

&lt;span class="c1"&gt;// Calling normal function:&lt;/span&gt;
&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-currying-works"&gt;
  &lt;/a&gt;
  How currying works
&lt;/h2&gt;

&lt;p&gt;Currying can look as something unusual especially for beginners. Let's take a look at how currying in JavaScript works, and why it can even work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-thing-about-values-arguments-and-closures"&gt;
  &lt;/a&gt;
  The thing about values, arguments, and closures
&lt;/h3&gt;

&lt;p&gt;How easy or difficult it is to understand currying in JavaScript might well depend on how familiar are you with the concept of &lt;a href="https://blog.alexdevero.com/javascript-scope-explained/#closures-8211-a-brief-introduction"&gt;closures&lt;/a&gt;. It is thanks to closures currying works. Here is how these two work together. As you can see on the example, Each function in the sequence works only with a single argument.&lt;/p&gt;

&lt;p&gt;It would make sense that when each function is called, the value passed into it as an argument is lost as well. This is not the case. The value still exists in the scope of the function that was called. What's more important is that any function inside this scope can access this &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Scope"&gt;scoped&lt;/a&gt; value as well.&lt;/p&gt;

&lt;p&gt;All these values exist, and are accessible, as long as the execution of the sequence is going. When it terminates with the last function and the value it returns, these existing values are gone as well. This is also why the last, innermost, function can operate with all previously seen arguments.&lt;/p&gt;

&lt;p&gt;In case of this last function in the sequence, the innermost, all these values still exist. This is also why it can work with them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;curriedFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Argument "a" exists here&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Argument "a" and "b" exist here&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Argument "a", "b" and "c" exist here&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-thing-about-parentheses"&gt;
  &lt;/a&gt;
  The thing about parentheses
&lt;/h3&gt;

&lt;p&gt;So, the innermost function can return all previously seen values because they are kept alive thanks to closure. What about those additional parentheses? These parentheses serve two main purposes. First, they allow to pass specific argument to specific function.&lt;/p&gt;

&lt;p&gt;This is determined by the order in which arguments are defined in the curried function. The second thing is more important and interesting. Each of these additional parentheses is actually a new function call. This means that when you see curried function with three pairs of parentheses, you are looking at three function calls.&lt;/p&gt;

&lt;p&gt;Each of these calls invokes one of the functions in the sequence, while also providing required argument for that function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create curried function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;curriedFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Calling curried function:&lt;/span&gt;
&lt;span class="nx"&gt;curriedFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// can be visualized as:&lt;/span&gt;
&lt;span class="nx"&gt;outermostFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// curriedFn(a) { ... }&lt;/span&gt;
&lt;span class="nx"&gt;middleFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// function(b) { ... }&lt;/span&gt;
&lt;span class="nx"&gt;innermostFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// function(c) { ... }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is also why currying allows you to call each function "manually". Each call returns a function. What you can do is to take each function call and sequentially assign its returned value to a variable. Each of these steps will result in variable assigned a function, except the last one.&lt;/p&gt;

&lt;p&gt;The last variable will be assigned the value returned by the last function. This last value is what you get when you call curried function with all required argument, and pair of parentheses. The only difference are those extra lines and assigned variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create curried function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;curriedFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This:&lt;/span&gt;
&lt;span class="nx"&gt;curriedFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// is the same as (except those extra lines):&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curriedFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;secondCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstCall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// ƒ ()&lt;/span&gt;
&lt;span class="c1"&gt;// That is:&lt;/span&gt;
&lt;span class="c1"&gt;// function(b) {&lt;/span&gt;
&lt;span class="c1"&gt;//   return function(c) {&lt;/span&gt;
&lt;span class="c1"&gt;//     return a + b + c&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondCall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// ƒ ()&lt;/span&gt;
&lt;span class="c1"&gt;// That is:&lt;/span&gt;
&lt;span class="c1"&gt;// function(c) {&lt;/span&gt;
&lt;span class="c1"&gt;//   return a + b + c&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastCall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 66&lt;/span&gt;
&lt;span class="c1"&gt;// That is:&lt;/span&gt;
&lt;span class="c1"&gt;// a + b + c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#curried-functions-without-arguments"&gt;
  &lt;/a&gt;
  Curried functions without arguments
&lt;/h2&gt;

&lt;p&gt;Currying is usually used for functions that are defined with some parameters. However, this is not a rule. You can just as well create curried function that doesn't take any arguments. In this case, you still have to provide correct number of parentheses, just empty.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create curried function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;curriedFn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;??&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Call curriedFn():&lt;/span&gt;
&lt;span class="nx"&gt;curriedFn&lt;/span&gt;&lt;span class="p"&gt;()()()()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// '??'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#currying-arrow-functions"&gt;
  &lt;/a&gt;
  Currying arrow functions
&lt;/h2&gt;

&lt;p&gt;Just as you can curry regular functions, you can also curry &lt;a href="https://blog.alexdevero.com/javascript-arrow-functions/"&gt;arrow functions&lt;/a&gt;. This can help you reduce the amount of code you would otherwise have to use. The principles and way to use it is still the same. Only the syntax is different, due to the nature of arrow functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Regular curried function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;curriedFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function alternative:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;curriedFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;

&lt;span class="c1"&gt;// Calling the curried function:&lt;/span&gt;
&lt;span class="nx"&gt;curriedFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#partial-application-functions"&gt;
  &lt;/a&gt;
  Partial application functions
&lt;/h2&gt;

&lt;p&gt;When we talk about currying in JavaScript, it is also useful to mention technique called partial application. The reason is that these two are very similar, so similar that it can be confusing. However, there is one key difference that will help you distinguish between them.&lt;/p&gt;

&lt;p&gt;This difference is in the number of parameters. When you curry a function, each function in the sequence accepts only one parameter. This is not the case with partial application. In case of partial application, the rule is that the newly returned functions must accept fewer parameters.&lt;/p&gt;

&lt;p&gt;This means that there might still be arguments spread across multiple pairs of parentheses. However, some of these pairs of parentheses will contain more than just one argument. When you see something like this, you are looking at partial application function, not curried function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Curried function example:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myCurriedFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;myCurriedFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 486&lt;/span&gt;


&lt;span class="c1"&gt;// Partial application function example:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myPartApplicationFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;// Passing two arguments instead of one&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;myPartApplicationFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 486&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-introduction-to-currying-in-javascript"&gt;
  &lt;/a&gt;
  Conclusion: Introduction to currying in JavaScript
&lt;/h2&gt;

&lt;p&gt;The concept of currying can be confusing and difficult to grasp. Just the word itself can sound weird. The syntax also isn't much helpful. I hope that this tutorial was helpful in shading some light on this topic, helping you understand how, and why, currying in JavaScript and how to use it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Hacktoberfest 101: Everything You Need To Know About It</title>
      <author>Muthu Annamalai Venkatachalam</author>
      <pubDate>Mon, 18 Oct 2021 06:02:44 +0000</pubDate>
      <link>https://dev.to/muthuannamalai12/hacktoberfest-101-everything-you-need-to-know-about-it-104i</link>
      <guid>https://dev.to/muthuannamalai12/hacktoberfest-101-everything-you-need-to-know-about-it-104i</guid>
      <description>&lt;p&gt;Hacktoberfest is no stranger to you. Every October, DigitalOcean hosts Hacktoberfest. It is a month-long, community-wide event celebrating open source projects. Participants receive prizes and shout-outs. There might still be some questions you have about Hacktoberfest. In this post, I've compiled some resources for getting started with Hacktoberfest&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hacktoberfest"&gt;
  &lt;/a&gt;
  What is Hacktoberfest
&lt;/h2&gt;

&lt;p&gt;Open-source software is the focus of Hacktoberfest, a community-wide month-long celebration. It is operated by DigitalOcean alongside partners like GitHub and Twilio.&lt;br&gt;
The requirements to participate are four valid pull requests submitted to public GitHub repositories. As a bonus, participants receive prize packages like stickers, T-shirts, or a new alternative to planting trees.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-should-contribute-to-opensource"&gt;
  &lt;/a&gt;
  Why You Should Contribute To Open-Source
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-encourages-writing-clean-code"&gt;
  &lt;/a&gt;
  1) Encourages writing clean code:
&lt;/h3&gt;

&lt;p&gt;To begin with, there are many enthusiasts who simply believe that code should be open source. They contribute code because they are idealists who want to make the world a better place. The wish to share can be motivating.&lt;/p&gt;

&lt;p&gt;You can help developers write readable or maintainable code even by fixing minor issues like a bug in a library or writing documentation. Generally, they are able to suggest ideas independently and adhere to the rules of writing easy-to-understand code. Due to the fact that the code will be exposed to the public, developers are driven to write readable code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-be-recognized"&gt;
  &lt;/a&gt;
  2) Be recognized:
&lt;/h3&gt;

&lt;p&gt;The open nature of the code appeals to some people as they want to sincerely make the community better by contributing to it. Additionally, it allows coders to gain recognition among the community, and it allows them to sharpen their programming skills. Contributing to open source is also a way to gain recognition. That recognition can also lead to opportunities from potential employers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-developing-a-deeper-understanding-of-technology"&gt;
  &lt;/a&gt;
  3) Developing a deeper understanding of technology:
&lt;/h3&gt;

&lt;p&gt;Participating in an open-source project allows companies and individuals to gain a deeper understanding of the technology. It strengthens their understanding of the project. It also encourages the internal use of technology within the organization.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-assists-in-preparation-for-the-project"&gt;
  &lt;/a&gt;
  4) Assists in preparation for the project:
&lt;/h3&gt;

&lt;p&gt;Through participation in open-source projects relevant to the company's domain, the company can better understand its customers. Because of this, they have a better understanding of what their customers expect. This can be achieved through participation in the open-source community and participation in its code. By doing so, the company will be able to see into the future and plan accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-register-for-hacktoberfest"&gt;
  &lt;/a&gt;
  How To Register For Hacktoberfest
&lt;/h2&gt;

&lt;p&gt;It's possible to sign up anytime between October 1 and October 31. By signing up sooner, you will have more time to make pull requests!&lt;/p&gt;

&lt;p&gt;It's quick and easy to participate. All you have to do is sign up with &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt;. To sign up, you'll need a GitHub account. By the deadline, you must submit at least four valid pull requests to open source projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-a-pull-request"&gt;
  &lt;/a&gt;
  How to Create a Pull Request:
&lt;/h2&gt;

&lt;p&gt;1) On GitHub.com, navigate to the repository's main page.&lt;/p&gt;

&lt;p&gt;2) The "Branch" menu lets you select the branch that contains your commits.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgcszVoN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634530794148/KxMSp7Uu_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgcszVoN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634530794148/KxMSp7Uu_.png" alt="branch-dropdown.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Click on the Pull request above the list of files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AdpTdq5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634530829239/aAlFTj3Wx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AdpTdq5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634530829239/aAlFTj3Wx.png" alt="pull-request-start-review-button.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) In the base branch dropdown menu, select the branch into which you wish to merge your changes, then choose the topic branch in the compare branch dropdown menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XFHhbS8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634530849748/Vcx7dckky.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XFHhbS8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634530849748/Vcx7dckky.png" alt="choose-base-and-compare-branches.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) Type your pull request's title and description.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6P8wHH4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634530867681/NyQ03evzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6P8wHH4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634530867681/NyQ03evzw.png" alt="pullrequest-description.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6) Create a pull request that is ready for review by clicking Create Pull Request. To create a draft pull request, select Create Draft Pull Request from the drop-down menu, and click Draft Pull Request&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0G9a35WG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634530915116/6FBEtl2uw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0G9a35WG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634530915116/6FBEtl2uw.png" alt="pullrequest-send.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#donts-of-hactoberfest"&gt;
  &lt;/a&gt;
  Don'ts of Hactoberfest:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don't create spam PRs as participants. It's great that you're eager to reach your Hacktoberfest goals, but what you truly see is a real person doing their best to maintain a project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be nice to the maintainer and don't force them to merge your PR. A gentle reminder is better than dozens of comments and emails.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Please do not fix grammatical and spelling errors unless the contribution guide explicitly requests it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't burn yourself out trying to answer every PR and interaction as a maintainer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not admonish people for bad PRs. Assume that they are doing so out of goodwill. Several of these developers might be participating in open source for the first time, so you are their open-source ambassador.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sign in to DigitalOcean's Hacktoberfest page with your GitHub account to check your progress or the status of your pull requests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every pull request has a one-week review period. During that time, a PR that is not marked invalid will contribute to your goal. When a pull request is marked as invalid, you will have to submit another eligible PR or fix the issue in the current PR.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-check-your-progress"&gt;
  &lt;/a&gt;
  How To Check Your Progress
&lt;/h2&gt;

&lt;p&gt;Sign in to DigitalOcean's Hacktoberfest page with your GitHub account to check your progress or the status of your pull requests.&lt;/p&gt;

&lt;p&gt;Every pull request has a one-week review period. During that time, a PR that is not marked invalid will contribute to your goal. When a pull request is marked as invalid, you will have to submit another eligible PR or fix the issue in the current PR.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;To get started with your Hacktoberfest project, there are a variety of resources available. For your preparation, I've put together a short list of official resources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://hacktoberfest.digitalocean.com/faq"&gt;Hacktoberfest FAQs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/topics/hacktoberfest"&gt;Github Hacktoberfest Topic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://muthuannamalai.tech/top-10-git-commands-every-developer-should-know"&gt;Top 10 Git Commands Every Developer Should Know&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://muthuannamalai.tech/how-to-contribute-to-open-source-projects-as-a-beginner"&gt;How To Contribute To Open-Source Projects As A Beginner&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not least, have fun with it. It's probably the biggest developer festival of the year. Yes, it has caused us problems, but I still think it is primarily a force for good.&lt;/p&gt;

&lt;p&gt;Happy learning, and happy Hacktoberfest!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/muthuannamalai"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want to contact me you can do it here:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for Reading 😊&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is the Python priority queue?</title>
      <author>221910304004</author>
      <pubDate>Mon, 18 Oct 2021 05:53:24 +0000</pubDate>
      <link>https://dev.to/221910304004/what-is-the-python-priority-queue-4jdd</link>
      <guid>https://dev.to/221910304004/what-is-the-python-priority-queue-4jdd</guid>
      <description>&lt;p&gt;The priority queue is an advanced type of the queue data structure. Instead of dequeuing the oldest element, a priority queue sorts and dequeues elements based on their priorities.&lt;/p&gt;

&lt;p&gt;Priority queues are used to handle scheduling problems where some tasks are prioritized over others.&lt;/p&gt;

&lt;p&gt;The queue.PriorityQueue Class&lt;br&gt;
Python provides a built-in implementation of the priority queue data structure.&lt;/p&gt;

&lt;p&gt;Since the queue.PriorityQueue class needs to maintain the order of its elements, a sorting mechanism is required every time a new element is enqueued.&lt;/p&gt;

&lt;p&gt;Python solves this by using a binary heap to implement the priority queue.&lt;/p&gt;

&lt;p&gt;The Python priority queue is built on the heapq module, which is basically a binary heap.&lt;/p&gt;

&lt;p&gt;For insertion, the priority queue uses the put function in the following way:&lt;br&gt;
  pQueue.put(value)&lt;/p&gt;

&lt;p&gt;The get command dequeues the highest priority elements from the queue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAOJE1WY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzcbe0ikrtlrz285apl0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAOJE1WY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzcbe0ikrtlrz285apl0.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Priority-object pairs can also be inserted into the queue. This way every task can be associated with a priority.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gh2Y2n_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3ro0yllm6u47ji1dkbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gh2Y2n_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3ro0yllm6u47ji1dkbn.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time Complexity&lt;/p&gt;

&lt;p&gt;Operation:                        Work-case Time complexity:&lt;br&gt;
Insertion                         O(logn)&lt;br&gt;
Deletion                          O(logn)&lt;/p&gt;

</description>
      <category>python</category>
      <category>priorityqueue</category>
      <category>datastructure</category>
      <category>heap</category>
    </item>
    <item>
      <title>solana Based NFT Market place development </title>
      <author>NFT SOLANA </author>
      <pubDate>Mon, 18 Oct 2021 05:25:14 +0000</pubDate>
      <link>https://dev.to/nftsolana/solana-based-nft-market-place-development-57c2</link>
      <guid>https://dev.to/nftsolana/solana-based-nft-market-place-development-57c2</guid>
      <description>&lt;p&gt;SOLANA Based NFT Development: The Benefits of This New Technology&lt;/p&gt;

&lt;p&gt;If you want to create your own Solana-Based NFT Development, we align our services with your needs to build a Solana-Based NFT as per your requirements. Additionally, we can guide you on how much does it cost to create an NFT.&lt;/p&gt;

&lt;p&gt;Section 1: Solana-Based NFT Development&lt;/p&gt;

&lt;p&gt;If you want to develop an NFT (Non-Technical Requirements Definition) that is Solana-Based NFT, we will help you do it. The benefits of creating an NFT is that it eliminates the need of both, the Test Environment and the Application Configuration. The reason why an NFT is not needed when developing an actual Product is that the NFT will be used for testing. The environment is automatically created by the software development tool. As it is the most suitable environment for testing, and we have used this experience to create such a tool. Solana-Based NFT Development tool is the perfect solution for testing non-technical specifications.&lt;/p&gt;

&lt;p&gt;The Benefits of This New Technology&lt;/p&gt;

&lt;p&gt;You can build an impressive NFT for your organisation. When you take the services of a Solana-Based NFT development firm, you are assured of the best technologies and development solutions that can be availed by all businesses. This would be possible with our experts who have years of experience in developing a Solana-Based NFT that meets the needs of every organisation. We also offer training and various other services to help you achieve your development goals.&lt;/p&gt;

&lt;p&gt;For the perfect Solana-Based NFT, we take your ideas and help you transform them into a real NFT that can help your organisation in achieving its goals. We also take the responsibility of providing you with the services of a good lawyer if you get into legal issues.&lt;/p&gt;

&lt;p&gt;Why is this New Technology So Important?&lt;/p&gt;

&lt;p&gt;NFT are considered to be very important in manufacturing as they deliver significantly more innovation than FBA (First-Batch Aerosol Jetting) technology. The main reason for this is because NFT need much less maintenance compared to FBA and they can be produced very efficiently. Additionally, they are also capable of producing high resolution 3D images. The high resolution allows them to create excellent 3D prints and it provides accurate object recognition and verification. NFT can be designed and manufactured using low-cost 3D printers and they are more cost-effective than FBA.&lt;/p&gt;

&lt;p&gt;How Does 3D NFT Development Work?&lt;/p&gt;

&lt;p&gt;We design and develop solutions for all 3D printing needs. We offer 3D design services for both private and commercial projects.&lt;/p&gt;

&lt;p&gt;What are the Advantages of This New Technology? &lt;/p&gt;

&lt;p&gt;Many people do not know that the Wireless Front End is also known as a Solana-Based NFT. The wireless technology allows your user to log into an online program, store the data, share it, and also access it even when they are offline. The security and communication aspects of this technology makes it a great option.&lt;/p&gt;

&lt;p&gt;Read the full article here.&lt;/p&gt;

&lt;p&gt;ABOUT THE AUTHOR:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.artichoke-tech.com/nft-dns-provider.html"&gt;https://www.artichoke-tech.com/nft-dns-provider.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– All the DNS servers and providers are upto date with latest configuration for providing optimum results&lt;/p&gt;

&lt;p&gt;– Sophisticated, customized service to meet your specific needs.&lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;If you want to start or expand the business, or if you want to design and develop the machines, then you should call us. We have many machines and advanced software to make the process easier. Our experienced team of professionals will solve your problems related to the business and will give you the guidance you want.&lt;/p&gt;

&lt;p&gt;We are a full-fledged Industrial manufacturing company, which produces cutting-edge cutting technologies for different industries. The unit specialized in cutting tools with wide range of applications and different components. The company works for more than 25 years in Asia. We are engaged in manufacturing and exporting of EDM Tools. The customers choose us because we provide our solutions at the most competitive price in the market.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>postgres</category>
    </item>
  </channel>
</rss>
