<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>1NF and 2NF</title>
      <author>hebaShakeel</author>
      <pubDate>Mon, 14 Jun 2021 18:17:24 +0000</pubDate>
      <link>https://dev.to/hebashakeel/1nf-and-2nf-2dbj</link>
      <guid>https://dev.to/hebashakeel/1nf-and-2nf-2dbj</guid>
      <description>&lt;p&gt;&lt;strong&gt;Normalization&lt;/strong&gt;: It is a way to reduce/minimize data redundancy (repetition of data). It can be achieved by splitting the table into many tables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First Normal Form (1NF)&lt;/strong&gt;:&lt;br&gt;
-&amp;gt; It is the property of converting ER Diagram into the Relational Database.&lt;br&gt;
-&amp;gt; The Relational Database is implicitly in 1NF.&lt;br&gt;
-&amp;gt; All attributes should be atomic [ only one value in a tuple is allowed].&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DgBXOiJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xriheeqs7h5usyss8c0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DgBXOiJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xriheeqs7h5usyss8c0i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Here, SMobile has multiple values which are not allowed. They have to be taken individually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Approach-1&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yS10TTE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0eun6yu9pt54uu5aibg2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yS10TTE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0eun6yu9pt54uu5aibg2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This approach creates a lot of redundancy in the table. Therefore it is not a suitable approach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Approach-2&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C33VblB7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkmeqihmwlef8n1ktpq7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C33VblB7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkmeqihmwlef8n1ktpq7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This approach also has redundancy but less when compared to the previous Approach. This is because the tables have now been split into two.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prime Attributes(Key):&lt;/strong&gt;&lt;br&gt;
Those attributes which participate in the Candidate key.&lt;br&gt;
&lt;strong&gt;Example 1&lt;/strong&gt;&lt;br&gt;
R(ABCD), CKs: {A, BD}&lt;br&gt;
Therefore PA = {A,B,D}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;br&gt;
R(ABCDEFG), CKs: {AB, BC, CD, F}&lt;br&gt;
Therefore PA = {A,B,C,D,F}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-Prime Attributes(Non-Key):&lt;/strong&gt;&lt;br&gt;
Those attributes which do not participate in Candidate Key.&lt;br&gt;
&lt;strong&gt;Example 1&lt;/strong&gt;&lt;br&gt;
R(ABCD), CKs: {A, BD}&lt;br&gt;
Therefore NPA = {C}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;br&gt;
R(ABCDEFG), CKs: {AB, BC, CD, F}&lt;br&gt;
Therefore NPA = {E,G}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Partial Dependency:&lt;/strong&gt;&lt;br&gt;
If subset of any Candidate Key derives a non-key attribute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
R(ABCD) FDs : {AB-&amp;gt;CD, B-&amp;gt;D}&lt;br&gt;
CK =&amp;gt; {AB}&lt;br&gt;
B-&amp;gt;D, B is a subset of AB and it derives non-key, therefore it is a partial dependency.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Normal Form (2NF):&lt;/strong&gt;&lt;br&gt;
=&amp;gt; If a relation 'R' is in &lt;strong&gt;1NF&lt;/strong&gt; (and)&lt;br&gt;
=&amp;gt; If every &lt;strong&gt;non-prime attribute&lt;/strong&gt; is fully dependent on any complete CK (or) No &lt;strong&gt;Partial Dependency&lt;/strong&gt; exists.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Allowed in 2NF:&lt;/strong&gt;&lt;br&gt;
=&amp;gt; Non-Prime determines Non-Prime&lt;br&gt;
=&amp;gt; Non-Prime determines Prime&lt;br&gt;
=&amp;gt; Prime determines Prime&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not-Allowed in 2NF:&lt;/strong&gt;&lt;br&gt;
=&amp;gt; Prime determines Non-Prime&lt;/p&gt;

</description>
      <category>database</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Why I'm dropping WordPress  for Strapi hopefully forever</title>
      <author>Antonio Djigo</author>
      <pubDate>Mon, 14 Jun 2021 17:56:43 +0000</pubDate>
      <link>https://dev.to/brownio/why-i-m-dropping-wordpress-for-strapi-hopefully-forever-1knh</link>
      <guid>https://dev.to/brownio/why-i-m-dropping-wordpress-for-strapi-hopefully-forever-1knh</guid>
      <description>&lt;p&gt;Well, it's been a long time since I haven't made any posts, and I just felt like I should speak a bit about this CMS I just had to face at work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ASd0Ukj0y3qMM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ASd0Ukj0y3qMM/giphy.gif" alt="A gif saying hi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, you may already know what a CMS and WordPress is. If not, here you go:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A content management system, often abbreviated as CMS, is software that helps users create, manage, and modify content on a website without the need for specialised technical knowledge.&lt;/p&gt;

&lt;p&gt;In simpler language, a content management system is a tool that helps you build a website without needing to write all the code from scratch (or even know how to code at all).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;source: https://kinsta.com/knowledgebase/content-management-system/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then there's WordPress, which basically is &lt;em&gt;THE&lt;/em&gt; CMS of the internet. &lt;a href="https://kinsta.com/wordpress-market-share/"&gt;About 40% of the web is built as a WordPress site.&lt;/a&gt; It is free, really well maintained, and has a lot of features.&lt;/p&gt;

&lt;p&gt;So... why would I be keen to drop it? It sounds great, right?&lt;/p&gt;

&lt;p&gt;I'll order them from 0 (Not a big deal) to 6 (Made me run away):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0ErD3ZBW6vQgYCgE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0ErD3ZBW6vQgYCgE/giphy.gif" alt="A gif whipping WordPress"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#0-its-written-in-php"&gt;
  &lt;/a&gt;
  0 - It's written in PHP
&lt;/h2&gt;

&lt;p&gt;As I said, not a big deal. With the years of practice I've kind of liked PHP a lot, but, it's far away from becoming my favourite language, as for probably many of you(Right know they are Ruby &amp;amp; Golang).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-it-could-be-faster"&gt;
  &lt;/a&gt;
  1 - It could be faster
&lt;/h2&gt;

&lt;p&gt;WordPress is not deadly slow or anything. Not IF you properly know how to manage it, how it should work, and how to keep it clean. Sadly, 95% of the projects I've worked with that uses WordPress are already beaten to death. Hitting 100 LCP scores so Google Core Vitals boosts your page is kinda hard. It should not be like that. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/HdcimOKferlkI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/HdcimOKferlkI/giphy.gif" alt="A gif of a lizzard trying to run fast"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A fresh one its great, but, once you start adding plugins and functionalities, you really need to know how to handle assets and stuff so it works decently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-its-hard-to-use-the-tools-i-want-in-the-frontend"&gt;
  &lt;/a&gt;
  2 - It's hard to use the tools I want in the front-end
&lt;/h2&gt;

&lt;p&gt;If you've worked with WordPress, you may know how is it to integrate for example React, enqueue scripts, use other front-end frameworks (not that cool). It can be made, for sure, but it is far away from being one of the most pleasant tools to integrate something into. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-constant-updates-and-high-vulnerability"&gt;
  &lt;/a&gt;
  3 - Constant updates and high vulnerability
&lt;/h2&gt;

&lt;p&gt;WordPress is also known for being kind of susceptible to having security issues. One of the reasons is that it is so open (it's an open source project actually), so highly customizable, and there are sooooo many unmantained or flaky plugins around, that it is hard to mantain your site fully secure. Specially when you also have to deal with clients touching around your WordPress guts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Uy4kl92CgVcm4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Uy4kl92CgVcm4/giphy.gif" alt="Guy breaking a door easily gif"&gt;&lt;/a&gt;&lt;/p&gt;
 Your Wordpress security door without WordFence 



&lt;h2&gt;
  &lt;a href="#4-dev-community-treats-wp-devs-like-kids"&gt;
  &lt;/a&gt;
  4 - Dev community treats WP devs like kids
&lt;/h2&gt;

&lt;p&gt;This is probably one of the biggest reasons not many speak about. You've probably heard some dev around saying comments like ("Ugh, WordPress? Never", "Everyone can use that", "That's not programming"... etc etc). WordPress it's way underrated, both inside the community, and in the business field. Probably it's one of the worst-paying jobs you can get as a Developer. And all of this, is because people are not well informed about it. &lt;/p&gt;

&lt;p&gt;The point of WordPress is that it's a tool made so everyone can make its business, website, blog, real. Easily, happily, and without expending too much, and it's exceptional at it, but it also made people think it's kind of worthless when you want "something else", which is a lie, but it's already at the bottom of the well and no one wants to look if it's still worthy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xT5LMtZ06eAXSmftYs/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT5LMtZ06eAXSmftYs/giphy.gif" alt="Kids laughing at Nelson gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-tired-of-always-doing-the-same-thing"&gt;
  &lt;/a&gt;
  5 - Tired of always doing the same thing
&lt;/h2&gt;

&lt;p&gt;Probably, the most disappointing thing of WordPress is that you may feel that you are working in a factory, always doing the same thing. Wax on, Wax off. SEO, Cookies, Add new stuff to the theme, performance, repeat. Always the same thing for every project.&lt;/p&gt;

&lt;p&gt;Also, as WordPress being underrated + not the most loved tool in the Dev Community, big companies and projects decide not to include this tool to its stack. After all, a big percent of the WordPress around are blogs, news, and similar. It's hard to find a project that I'd love if it's made in WP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Kbpi0z9HgyRXrmi791/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Kbpi0z9HgyRXrmi791/giphy.gif" alt="Wax on wax off gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I'll stop here, so I can speak you about the new alternative I found, Strapi.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQ-OvBOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://softwareengineeringdaily.com/wp-content/uploads/2021/02/strapi-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQ-OvBOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://softwareengineeringdaily.com/wp-content/uploads/2021/02/strapi-logo.png" alt="Strapi logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strapi is a headless CMS, which means that it has the power of a CMS, but without depending on a front-end of its own. It will basically work as a REST API.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a traditional or monolithic CMS like WordPress, everything is packaged together: the backend is rigidly and intricately linked to the design frontend part of your application. A headless CMS like Strapi focuses on its primary mission: managing content. It does so by storing content in a database, providing an interface to manage content, and exposing it with an API, to make it available to any frontend.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hRCrMqXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2zv2ciw0ln4h1.cloudfront.net/uploads/Headless_vs_Decoupled_vs_Monolithic_34f1115181.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hRCrMqXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2zv2ciw0ln4h1.cloudfront.net/uploads/Headless_vs_Decoupled_vs_Monolithic_34f1115181.png" alt="Example of different type of CMS image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WordPress can do this too, yes, but not by default. This is not the reason to flee though.&lt;/p&gt;

&lt;p&gt;It's also really flexible. If you had to deal with WordPress, you may know how tedious it is to work on the structure of the content. First you have to depend on Advance custom fields plugin to create custom contents, registering custom post types, creating relations between them... (ew.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HmPbg-Sv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2zv2ciw0ln4h1.cloudfront.net/uploads/CTB_interface_1e57bad46e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HmPbg-Sv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2zv2ciw0ln4h1.cloudfront.net/uploads/CTB_interface_1e57bad46e.png" alt="An image of Strapi creating fields"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you can do with the Advanced Custom Fields plugin for WordPress, you can do it natively in Strapi. It is customisable without twisting the code. You decide on your API and data structure. You can customise anything through the API or editing the files inside your code.&lt;/p&gt;

&lt;p&gt;Also, it is faster. It's made on Node.js, which basically gives you dynamic refresh of pages, and well, &lt;a href="https://www.simform.com/nodejs-vs-php/#speed"&gt;Node.JS is way faster than PHP because it is asynchronous&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my humble opinion, it's prettier than WordPress. For many this would not matter at all, but, for me, it does. It is a personal opinion.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UGKMfv-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd2k81pu8r8ikvext93h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UGKMfv-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd2k81pu8r8ikvext93h.png" alt="An image of the Strapi interface"&gt;&lt;/a&gt;&lt;/p&gt;
 An image of the Strapi interface 



&lt;p&gt;The final point that made me decide was that is really easy to integrate with modern tools, like Next.JS, Gatsby, Nuxt, Flutter, Hugo... using GraphQL. See more integrations &lt;a href="https://strapi.io/integrations"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has nothing to envy WordPress. Plugins, highly customizable, free, and open source.&lt;/p&gt;

&lt;p&gt;Check it out at &lt;a href="https://strapi.io/"&gt;https://strapi.io/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>beginners</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Advanced Kotlin Collection Functionality</title>
      <author>Sebastian Aigner</author>
      <pubDate>Mon, 14 Jun 2021 17:49:10 +0000</pubDate>
      <link>https://dev.to/kotlin/advanced-kotlin-collection-functionality-5e90</link>
      <guid>https://dev.to/kotlin/advanced-kotlin-collection-functionality-5e90</guid>
      <description>&lt;p&gt;This blog post accompanies a video from our &lt;strong&gt;YouTube series&lt;/strong&gt; which you can find on our &lt;a href="https://kotl.in/video"&gt;Kotlin YouTube channel&lt;/a&gt;, or &lt;strong&gt;watch here&lt;/strong&gt; directly!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N4CpLxGJlq0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Today, we are learning about advanced functions that we can use to work with and manipulate all kinds of Kotlin collections!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-predicates-raw-any-endraw-raw-none-endraw-and-raw-all-endraw-"&gt;
  &lt;/a&gt;
  Checking predicates: &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Let’s warm up by having a look at a selection of functions that allow us to check conditions for our collection elements.&lt;/p&gt;

&lt;p&gt;They’re called &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/any.html"&gt;&lt;code&gt;any&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/none.html"&gt;&lt;code&gt;none&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/all.html"&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt;. Each of them takes a &lt;em&gt;predicate&lt;/em&gt; – so a function that returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; – and checks whether the collection fits this predicate.&lt;/p&gt;

&lt;p&gt;Let’s say we have a group of friends (which is really just a &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt;, each featuring a &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, and maybe a &lt;code&gt;driversLicense&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;driversLicense&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;friendGroup&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Jo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hay"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we want to check if the group can travel by car, we want to check if &lt;em&gt;any&lt;/em&gt; of them have a driver's license – so we use the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/any.html"&gt;&lt;code&gt;any&lt;/code&gt;&lt;/a&gt; function. It returns &lt;code&gt;true&lt;/code&gt; if there is &lt;em&gt;at least one element&lt;/em&gt; in our collection for which the predicate returns &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;groupCanTravel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;friendGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driversLicense&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As another example, let’s say we want to check if this group of friends is allowed to enter a club – for this, we would need to make sure that &lt;em&gt;none&lt;/em&gt; of the folks in the group are underage!&lt;/p&gt;

&lt;p&gt;Here, we can use the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/none.html"&gt;&lt;code&gt;none&lt;/code&gt;&lt;/a&gt; function, which only returns &lt;code&gt;true&lt;/code&gt; when there is &lt;em&gt;not a single element in our collection&lt;/em&gt; that holds true for our predicate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;groupGetsInClub&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;friendGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;none&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The third function in the bunch is the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/all.html"&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt; function. At this point, you can probably spot the pattern – &lt;code&gt;all&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, if each and every element in our collection matches our predicate. We could use it to check whether all names in our friend group are short:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;groupHasShortNames&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;friendGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#predicates-for-empty-collections"&gt;
  &lt;/a&gt;
  Predicates for empty collections
&lt;/h3&gt;

&lt;p&gt;While on the topic, let's have a little brain teaser: How do &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt; behave for &lt;em&gt;empty collections&lt;/em&gt;?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nobody&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;emptyList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// what happens here?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s look at &lt;code&gt;any&lt;/code&gt; first. There is no element that can satisfy the predicate, so it returns &lt;code&gt;false&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;nobody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driversLicense&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same goes for &lt;code&gt;none&lt;/code&gt; – there is no function that can violate our predicate, so it returns true:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;nobody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;none&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;all&lt;/code&gt; function, however, returns &lt;code&gt;true&lt;/code&gt; with an empty collection. This may surprise you in the first moment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;nobody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But this is quite intentional and sound: You can't name an element that &lt;em&gt;violates&lt;/em&gt; the predicate. Therefore, the predicate has to be true for &lt;em&gt;all elements in the collection&lt;/em&gt; – even if there are &lt;em&gt;none&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;This might feel a bit mind-bending to think about at first, but you’ll find that this concept, which is called the &lt;a href="https://en.wikipedia.org/wiki/Vacuous_truth"&gt;vacuous truth&lt;/a&gt;, actually plays very well with checking conditions, and expressing logic in program code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L5zdjSFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thg07e0ao215ck2lwm1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L5zdjSFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thg07e0ao215ck2lwm1z.png" alt='"Vacuous truth" on Wikipedia'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collection-parts-raw-chunked-endraw-and-raw-windowed-endraw-"&gt;
  &lt;/a&gt;
  Collection parts: &lt;code&gt;chunked&lt;/code&gt; and &lt;code&gt;windowed&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;With our brain freshly teased, let’s move on to the next topic, and learn about how to break collections into parts!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-chunked-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;chunked&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;If we have a collection that just contains a bunch of items, we can cut up the list into individual chunks of a certain size by using the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/chunked.html"&gt;&lt;code&gt;chunked&lt;/code&gt;&lt;/a&gt; function. What we get back is a list of lists, where each element is a _chunk _of our original list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;objects&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"🌱"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"🚀"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"💡"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"🐧"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"⚙️"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"🤖"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"📚"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chunked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// [[🌱, 🚀, 💡], [🐧, ⚙️, 🤖], [📚]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, we break our list of random objects (represented with emojis) apart, using a chunk size of 3.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first &lt;em&gt;element&lt;/em&gt; in our result is in itself a &lt;em&gt;list&lt;/em&gt; which contains our first three objects – &lt;code&gt;[🌱, 🚀, 💡]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second element is once again a chunk, and contains the three elements that follow after that – &lt;code&gt;[🐧, ⚙️, 🤖]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The last element is also a chunk – but since we ran out of elements to fill it with three items, it only contains the book stack - &lt;code&gt;[📚]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In typical standard library fashion, the &lt;code&gt;chunked&lt;/code&gt; function also provides a little bit of extra power. To immediately transform the chunks we just created, we can apply a &lt;em&gt;transformation function&lt;/em&gt;. For example, we can reverse the order of elements in the resulting lists, without having to do another &lt;code&gt;map&lt;/code&gt; call separately:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chunked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// [[💡, 🚀, 🌱], [🤖, ⚙️, 🐧], [📚]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To summarize: the &lt;code&gt;chunked&lt;/code&gt; function cuts our original collection into lists of lists, where each list has the specified size.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-windowed-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;windowed&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;Closely related is the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/windowed.html"&gt;&lt;code&gt;windowed&lt;/code&gt;&lt;/a&gt; function. It also returns a list of lists from our collection. Instead of cutting it up into pieces, however, this function generates a “sliding window” of our collection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;windowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// [[🌱, 🚀, 💡], [🚀, 💡, 🐧], [💡, 🐧, ⚙️], [🐧, ⚙️, 🤖], [⚙️, 🤖, 📚]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The first window is once again the first three elements – &lt;code&gt;[🌱, 🚀, 💡]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The next window is &lt;code&gt;[🚀, 💡, 🐧]&lt;/code&gt; – we simply “moved” our window of size 3 over by one, which includes some overlap.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;windowed&lt;/code&gt; function can also be customized. We can change both &lt;em&gt;window&lt;/em&gt; and &lt;em&gt;step&lt;/em&gt; size, the latter being the number of elements that the window should “slide along” for each step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;windowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partialWindows&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// [[🌱, 🚀, 💡, 🐧], [💡, 🐧, ⚙️, 🤖], [⚙️, 🤖, 📚], [📚]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the example above, we can also control whether our result should contain &lt;em&gt;partial windows&lt;/em&gt;. This changes the behavior when we’ve reached the end of our input collection, and we’re running out of elements.&lt;/p&gt;

&lt;p&gt;With partial windows enabled, we just &lt;em&gt;keep sliding&lt;/em&gt;, and we get the last elements trickling in, in the form of smaller windows, until we get a window which once again only contains the last element from our input collection – &lt;code&gt;[⚙️, 🤖, 📚], [📚]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;windowed&lt;/code&gt; also allows us to perform an additional transformation at the end, which can modify the individual windows directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;windowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// [[🐧, 💡, 🚀, 🌱], [🤖, ⚙️, 🐧, 💡], [📚, 🤖, ⚙️], [📚]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#unnesting-collections-flatten-and-flatmap"&gt;
  &lt;/a&gt;
  Un-nesting Collections: Flatten and Flatmap
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;chunked&lt;/code&gt; and &lt;code&gt;windowed&lt;/code&gt; functions, along with some others all return nested collections – lists of lists. What if we want to &lt;em&gt;un-nest&lt;/em&gt; these, turning them back into flat lists of elements? As usual, we do not need to fear, because the standard library has got us covered.&lt;/p&gt;

&lt;p&gt;We can call the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/flatten.html"&gt;&lt;code&gt;flatten&lt;/code&gt;&lt;/a&gt; function on a collection of collections. As you may suspect, the result is a single list of all the elements that were originally contained inside of our nested collections:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;objects&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"🌱"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"🚀"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"💡"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"🐧"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"⚙️"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"🤖"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"📚"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;windowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// [🐧, 💡, 🚀, 🌱, 🤖, ⚙️, 🐧, 💡, 📚, 🤖, ⚙️, 📚]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is also a good point to talk about the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/flat-map.html"&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/a&gt; function. &lt;code&gt;flatMap&lt;/code&gt; is like a combination of first using &lt;code&gt;map&lt;/code&gt;, and then using &lt;code&gt;flatten&lt;/code&gt; – It takes a lambda which generates a &lt;em&gt;collection&lt;/em&gt; from each of the elements in our input collection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;lettersInNames&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Lou"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Mel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Cyn"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;flatMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lettersInNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [L, o, u, M, e, l, C, y, n]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, the function that we provide creates a &lt;em&gt;list&lt;/em&gt; for each element in our input collection, containing the letters of the original string. Next, that collection of collections gets flattened. As desired, we end up with a plain list of elements – the list of characters from the names of the original collection.&lt;/p&gt;

&lt;p&gt;If you are doing an operation on a list, which in turn generates a collection for each one of the input elements, consider if &lt;code&gt;flatMap&lt;/code&gt; can help you simplify your code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#combining-collections-raw-zip-endraw-and-raw-unzip-endraw-"&gt;
  &lt;/a&gt;
  Combining collections: &lt;code&gt;zip&lt;/code&gt; and &lt;code&gt;unzip&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;So far, we have always looked at a single collection, and what we can do with it. Let's learn about a way to combine two collections, and create a new one from them – it's time to &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/zip.html"&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-zip-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;zip&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;Assume we have two collections, where the elements at each index are somehow related. For example, this could be a list of cities in Germany, and we have another list of German license plates that correspond to those cities:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;germanCities&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"Aachen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Bielefeld"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"München"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;germanLicensePlates&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"AC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"BI"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"M"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;germanCities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;germanLicensePlates&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// [(Aachen, AC), (Bielefeld, BI), (München, M)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, by zipping these two collections, we get a &lt;em&gt;list of pairs&lt;/em&gt;, where each pair contains the elements with the same index from the original two collections.&lt;/p&gt;

&lt;p&gt;Metaphorically, this is similar to a zipper on a jacket, where the teeth match up one by one. We zip together the elements of our collection, and we get pairs of each city and its corresponding license plate.&lt;/p&gt;

&lt;p&gt;For an extra bit of flair, we can also call the &lt;code&gt;zip&lt;/code&gt; function using infix notation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;germanCities&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;germanLicensePlates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [(Aachen, AC), (Bielefeld, BI), (München, M)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;zip&lt;/code&gt; can also take a transformation function. We can pass a lambda that receives the values of the individual zipped pairs, and we can apply a transformation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;germanCities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;germanLicensePlates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plate&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;plate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// [(AACHEN, ac), (BIELEFELD, bi), (MÜNCHEN, m)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-unzip-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;unzip&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;The standard library also contains the inverse function, called &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/unzip.html"&gt;&lt;code&gt;unzip&lt;/code&gt;&lt;/a&gt;, which takes a list of pairs, and splits them back into a pair of two separate lists:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;citiesToPlates&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;germanCities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;germanLicensePlates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plate&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;plate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="py"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;plates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;citiesToPlates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unzip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [AACHEN, BIELEFELD, MÜNCHEN]&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [ac, bi, m]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example above uses a destructuring declaration to easily access both of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-zipwithnext-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;zipWithNext&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;In a way, &lt;code&gt;zipWithNext&lt;/code&gt; is really a specialized case of the &lt;code&gt;windowed&lt;/code&gt; function we got to know today: Instead instead of zipping together two separate lists element by element, this function takes one collection, and zips each of its items with the one that follows it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;random&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zipWithNext&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// [(3, 1), (1, 4), (4, 1), (1, 5), (5, 9), (9, 2), (2, 6), (6, 5), (5, 4)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, we're zipping together a list of numbers. If we want to check the “change” – how much the value increments or decrements each step – we can express this quite elegantly using &lt;code&gt;zipWithNext&lt;/code&gt;. We provide a lambda that receives a pair of one number and the one that follows immediately after:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;random&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;changes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zipWithNext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [-2, 3, -3, 4, 4, -7, 4, -1, -1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#custom-aggregations-raw-reduce-endraw-and-raw-fold-endraw-"&gt;
  &lt;/a&gt;
  Custom aggregations: &lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;fold&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;We have finally arrived at the &lt;em&gt;grand finale&lt;/em&gt; for this post – functions that help us build custom aggregations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-reduce-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;reduce&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;Let’s set the scene with a small callback – in the &lt;a href="https://dev.to/kotlin/diving-into-kotlin-collections-587o"&gt;previous post&lt;/a&gt;, we learned about functions like &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;average&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, and functions to receive the minimum and maximum elements inside a collection. All of these &lt;em&gt;reduce&lt;/em&gt; our collection to a single value.&lt;/p&gt;

&lt;p&gt;It's possible that we find ourselves in a situation where there’s no out-of-the-box function for how we want to generate a single value for our collection. For example, we may want to multiply all numbers in a list, instead of summing them.&lt;/p&gt;

&lt;p&gt;In this case, we can rely on the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce.html"&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt; function as a more generic version for aggregating a collection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;random&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;multiplicativeAggregate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplicativeAggregate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 129600&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen in the example above, we call the reduce function with a lambda block which receives two parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An accumulator, which has the same type as our collection, and&lt;/li&gt;
&lt;li&gt;An individual item from our collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The task of the lambda function is to &lt;em&gt;return a new accumulator&lt;/em&gt;. Each invocation, one after the other, receives not only the &lt;em&gt;current element&lt;/em&gt;, but also the &lt;em&gt;result of the previous calculation&lt;/em&gt;, inside the accumulator.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The function starts with the first element of our collection in the accumulator.&lt;/li&gt;
&lt;li&gt;Then it runs our operation – in this example, we multiply the accumulator (which right now is the first number) with the current element (which is the second number).&lt;/li&gt;
&lt;li&gt;We’ve calculated a new value, which will be stored in the accumulator, and used when our function is called once more with the third element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This cycle repeats, and we continue to gradually build up the final result in our accumulator. One might even say we’re &lt;em&gt;accumulating&lt;/em&gt; that result!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M9mpIw42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ri4o64h51mzhg2cwe4g2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M9mpIw42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ri4o64h51mzhg2cwe4g2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we’ve gone through all the elements in our collection, &lt;code&gt;reduce&lt;/code&gt; returns the final value that’s inside the accumulator.&lt;/p&gt;

&lt;p&gt;As you can see, with &lt;code&gt;reduce&lt;/code&gt;, we can hide a lot of mechanics for aggregating our collection behind one function call, and stay true to Kotlin’s concise nature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-fold-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;fold&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;But we can actually go beyond this, and can take this versatility one step further – with the &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fold.html"&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; operation. Remember – when we used &lt;code&gt;reduce&lt;/code&gt;, the iteration starts with the first element of our input collection in the accumulator. &lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;fold&lt;/code&gt; function, we get to specify our own accumulator – and in fact, it can even have a different type than the items in our input collection! As an example, we can take a list of words, and multiply the number of their characters together using &lt;code&gt;fold&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fruits&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cherry"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"banana"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;multiplied&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiplied&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The underlying mechanism is the same – the lambda passed to the &lt;code&gt;fold&lt;/code&gt; function gets called with an accumulator and a value, and calculates a new accumulator. The difference is that we specify the initial value of the accumulator ourselves.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Note that we pass &lt;code&gt;1&lt;/code&gt; as an initial value for our accumulator, and not &lt;code&gt;0&lt;/code&gt;. That’s because for multiplication, 1 is the &lt;a href="https://en.wikipedia.org/wiki/Identity_element"&gt;neutral element&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; come in a number of other flavors, as well:&lt;/p&gt;

&lt;p&gt;– the sibling functions &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-right.html"&gt;&lt;code&gt;reduceRight&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fold-right.html"&gt;&lt;code&gt;foldRight&lt;/code&gt;&lt;/a&gt; change the order of iteration&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-or-null.html"&gt;&lt;code&gt;reduceOrNull&lt;/code&gt;&lt;/a&gt; allows you to work with empty collections without throwing exceptions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/running-fold.html"&gt;&lt;code&gt;runningFold&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/running-reduce.html"&gt;&lt;code&gt;runningReduce&lt;/code&gt;&lt;/a&gt; don’t just return a single value representing the final state of the accumulator, but instead return a list of all the intermediate accumulator values as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;This concludes my overview of some advanced collection operations in Kotlin – I hope you found this post useful, and have learned something new!&lt;/p&gt;

&lt;p&gt;Maybe you can find a point in your code where a predicate, some zipping, chunking or windowing could come in handy! Or maybe you want to explore by defining your own aggregations functions based on the &lt;code&gt;reduce&lt;/code&gt; or &lt;code&gt;fold&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;To get reminded when new Kotlin content is released, follow us here on &lt;a href="https://dev.to/kotlin"&gt;dev.to/kotlin&lt;/a&gt;, and make sure to follow me on Twitter &lt;a href="https://twitter.com/sebi_io"&gt;@sebi_io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, use this opportunity sure to find the subscribe button and notification bell on our &lt;a href="https://kotl.in/video"&gt;YouTube channel&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Take care!&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>programming</category>
      <category>android</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Summer Deals - A Curated List</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 14 Jun 2021 16:51:06 +0000</pubDate>
      <link>https://dev.to/sm0ke/summer-deals-a-curated-list-4cej</link>
      <guid>https://dev.to/sm0ke/summer-deals-a-curated-list-4cej</guid>
      <description>&lt;p&gt;Hello coders, &lt;/p&gt;

&lt;p&gt;During this period web agencies drop the pricing and many good (and pricey) products become more accessible to developers. Here is my list for the summer of 2021. This open-list will be updated with more deals suggested in the comments. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: &lt;strong&gt;The list might contain affiliate links&lt;/strong&gt;. &lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;Creative-Tim: &lt;a href="https://bit.ly/3xeNykL"&gt;Full-stack Bundle&lt;/a&gt; 90%OFF&lt;/li&gt;
&lt;li&gt;Themesberg: &lt;a href="https://themesberg.com/summer-sale"&gt;Summer Sale 90% Off&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;CodedThemes: &lt;a href="https://bit.ly/3cDJwtw"&gt;Bootstrap Premium Bundle&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;WrapPixel: &lt;a href="https://bit.ly/3xeNykL"&gt;Big Bundle 95%OFF&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;BootstrapDash: &lt;a href="https://bit.ly/3gyXfTK"&gt;50+ Premium products 85%OFF&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#creativetim-fullstack-bundle"&gt;
  &lt;/a&gt;
  Creative-Tim - &lt;a href="https://bit.ly/3xeNykL"&gt;Full-Stack Bundle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Summer Full Stack is a collection of 66 Front-end and Back-end Premium products that will help you develop faster and easier 🔥&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;66 Premium Products, Designer Files, 6mo Support&lt;/li&gt;
&lt;li&gt;Technologies: Bootstrap, Vue, React, Angular, Next&lt;/li&gt;
&lt;li&gt;Discount: 90% OFF&lt;/li&gt;
&lt;li&gt;Link: &lt;a href="https://bit.ly/3xeNykL"&gt;Full-Stack Bundle&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZmojuFH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n5sesoi02jqs7xsf7bk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZmojuFH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n5sesoi02jqs7xsf7bk.jpg" alt="Creative-Tim - Full-Stack Bundle."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#themesberg-summer-sale-90-off"&gt;
  &lt;/a&gt;
  Themesberg - &lt;a href="https://themesberg.com/summer-sale"&gt;Summer Sale 90% Off&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;7 Premium Themes Powered by Bootstrap CSS: Pixel PRO, Volt Bootstrap PRO, Neumorphism UI PRO and other best-sellers from Themesberg. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Technologies: Bootstrap 4 and Bootstrap 5&lt;/li&gt;
&lt;li&gt;Discount: 90% OFF&lt;/li&gt;
&lt;li&gt;Link: &lt;a href="https://themesberg.com/summer-sale"&gt;Full-Stack Bundle&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4cHytJYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vg72c17t6sdvgsawc3np.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4cHytJYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vg72c17t6sdvgsawc3np.jpg" alt="Themesberg - Summer Sale 90% Off."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#codedthemes-bootstrap-mega-bundle"&gt;
  &lt;/a&gt;
  CodedThemes - &lt;a href="https://bit.ly/3cDJwtw"&gt;Bootstrap Mega Bundle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Get 5+ Premium Admin Templates + 140 PSD Templates (PSD Bundle – Free). All admin templates are highly creatively developed and designed, fully responsive and tested in all retina devices, compatible with major browsers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5 Premium products for ONLY $99&lt;/li&gt;
&lt;li&gt;Technologies: Bootstrap&lt;/li&gt;
&lt;li&gt;Link: &lt;a href="https://bit.ly/3cDJwtw"&gt;Bootstrap Mega Bundle&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M_7R2bhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xync1y11kdu6n7ekmtg2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M_7R2bhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xync1y11kdu6n7ekmtg2.jpg" alt="CodedThemes - Bootstrap Mega Bundle."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrappixel-big-bundle-95-off"&gt;
  &lt;/a&gt;
  WrapPixel - &lt;a href="https://bit.ly/2Tx8fsH"&gt;Big Bundle 95% OFF&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This deal comes with 24 premium products plus an really nice UI Kit. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Technologies: Bootstrap, React, Vue, Angular&lt;/li&gt;
&lt;li&gt;Discount: 95% OFF &lt;/li&gt;
&lt;li&gt;Link: &lt;a href="https://bit.ly/2Tx8fsH"&gt;Big Bundle 95%OFF&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--denlmYFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1pomyehbstruhn0j6kma.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--denlmYFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1pomyehbstruhn0j6kma.jpg" alt="WrapPixel - Big Bundle 95% OFF."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bootstrapdash-50-premium-bundle"&gt;
  &lt;/a&gt;
  BootstrapDash - &lt;a href="https://bit.ly/3gyXfTK"&gt;50+ Premium Bundle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Get the best value for your money with this bundle of 50+ premium templates with 100+ dashboard layouts, UI kits. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Technologies: Bootstrap, Vue&lt;/li&gt;
&lt;li&gt;Discount: 85% OFF&lt;/li&gt;
&lt;li&gt;Link: &lt;a href="https://bit.ly/3gyXfTK"&gt;50+ Premium Bundle&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcYs41ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjc7xc4bv2raqgi5c8o1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcYs41ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjc7xc4bv2raqgi5c8o1.jpg" alt="BootstrapDash - 50+ Premium Bundle."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; Feel free to suggest more sweet deals in the comments section. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://bit.ly/3wd5D25"&gt;Free Templates&lt;/a&gt; - provided by Creative-Tim&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated List | Dev.to &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>deals</category>
      <category>promo</category>
    </item>
    <item>
      <title>JavaScript-30-Day-14</title>
      <author>KUMAR HARSH</author>
      <pubDate>Mon, 14 Jun 2021 16:45:48 +0000</pubDate>
      <link>https://dev.to/cenacr007_harsh/javascript-30-day-14-3p0i</link>
      <guid>https://dev.to/cenacr007_harsh/javascript-30-day-14-3p0i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#javascript-references-vs-copying"&gt;
  &lt;/a&gt;
  &lt;center&gt;JavaScript References VS Copying&lt;/center&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  &lt;a href="https://cenacrharsh.github.io/JS-30-DAY-14/"&gt;demo&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HqV73xtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uaz3vgb0yt0a6jqbv0i3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HqV73xtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uaz3vgb0yt0a6jqbv0i3.png" alt="ss"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Day-14 of JavaScript-30 we discussed a very important concept of JavaScript or any programming language for that matter, the difference between and a reference and copy.&lt;/p&gt;

&lt;p&gt;We'll start with:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strings-numbers-and-booleans"&gt;
  &lt;/a&gt;
  Strings, Numbers and Booleans
&lt;/h2&gt;

&lt;p&gt;let's say we have a variable &lt;code&gt;age=100&lt;/code&gt;, now we create another variable &lt;code&gt;age2=age&lt;/code&gt;, now if we &lt;code&gt;console.log()&lt;/code&gt; them we'll see they have the same values in them.&lt;/p&gt;

&lt;p&gt;Now what happens if we do &lt;code&gt;age=200&lt;/code&gt;, now if we try &lt;code&gt;console.log()&lt;/code&gt; them we'll see value of &lt;code&gt;age&lt;/code&gt; is changed but but the value of &lt;code&gt;age2&lt;/code&gt; is unchanged.&lt;/p&gt;

&lt;p&gt;I have provided the output in comments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 100 100&lt;/span&gt;
      &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 200 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This tells us when we created &lt;code&gt;age2&lt;/code&gt; using the &lt;code&gt;age&lt;/code&gt; then a separate copy was made for &lt;code&gt;age2&lt;/code&gt;, hence when &lt;code&gt;age&lt;/code&gt; was changed we do not see the effects of those changes on &lt;code&gt;age2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The same happens with Strings:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;harsh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// harsh harsh&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kumar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// kumar harsh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So in the case of Strings, Numbers and Booleans, while creating new copies of them a separate copy is created and we can make changes in one without affecting the other one.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h2&gt;

&lt;p&gt;Let's say we have an array&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Wes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sarah&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ryan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Poppy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and we want to make a copy of it.&lt;/p&gt;

&lt;p&gt;You might think we can just do something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We print them and see:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ["Wes", "Sarah", "Ryan", "Poppy"]&lt;/span&gt;
&lt;span class="c1"&gt;// ["Wes", "Sarah", "Ryan", "Poppy"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can see that both arrays contain same elements.&lt;/p&gt;

&lt;p&gt;However what happens when we update that array?&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;team[3] = "Lux";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now here is the problem! When we print them we see:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ["Wes", "Sarah", "Ryan", "Lux"]&lt;/span&gt;
&lt;span class="c1"&gt;// ["Wes", "Sarah", "Ryan", "Lux"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We see that we have edited the original array too!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt; It's because &lt;code&gt;team&lt;/code&gt; isn't another array, it is just a reference to the original Array.&lt;/p&gt;

&lt;p&gt;So we see when we try to copy arrays we get what is an array reference, not an array copy.In reality they both point to the same array!&lt;/p&gt;

&lt;p&gt;So if we try to make changes in one of the arrays that change will be reflected in the other one.&lt;/p&gt;

&lt;p&gt;So, how do we fix this? We take a &lt;strong&gt;copy&lt;/strong&gt; instead!&lt;/p&gt;

&lt;p&gt;And how do we do that? Well there are multiple ways to do that and we'll see a bunch of them.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-slice-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;slice&lt;/code&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;team2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you pass nothing to &lt;code&gt;splice&lt;/code&gt; it will simply return a copy of the original array.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-concat-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;concat&lt;/code&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;team3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[].&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What we are doing here is take an empty array and concatenate the old one with it thus getting the same elements as the original array.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-arrayfrom-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.from&lt;/code&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;team5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#es6-raw-spread-endraw-"&gt;
  &lt;/a&gt;
  ES6 &lt;code&gt;spread&lt;/code&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;teams4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the latest and the easiest method of creating copies of array.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;spread&lt;/code&gt; takes every item out of a iterable and puts it into the container, here an array.&lt;/p&gt;

&lt;p&gt;You can read more about spread operator on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using any of the above methods we can create copies of arrays and now when we update it, the original one isn't changed.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h2&gt;

&lt;p&gt;The same thing goes for objects, let's say we have a person object&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Wes Bos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and think we make a copy, but instead we get a reference and making changes would affect both.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;captain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//captian is just a reference&lt;/span&gt;
&lt;span class="nx"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// changes person as well&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Again what we do is we take a copy instead using &lt;code&gt;Object.assign()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const cap2 = Object.assign({}, person, { number: 99 });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Object.assign()&lt;/code&gt; takes 3 arguments, first one is an empty object, second we pass it the object we wish to copy all the properties from and an optional third argument where we pass our own properties we would like to add to the object or existing properties whose value we would like to update, and this won't affect the original object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q_TKq48c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o98c305u89gkzavovbo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q_TKq48c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o98c305u89gkzavovbo.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also use the &lt;code&gt;spread&lt;/code&gt; operator like arrays.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cap3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Things to note - this is only 1 level deep - both for Arrays and Objects. lodash has a cloneDeep method, but you should think twice before using it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what do I mean by 1 level deep, we saw when we changed the &lt;code&gt;name&lt;/code&gt; property the original object was unchanged, but what if try to change &lt;code&gt;social&lt;/code&gt; property which itself is an object.&lt;/p&gt;

&lt;p&gt;Take a loot at this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;harsh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;harsh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;social&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@harsh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;fb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;harsh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;harsh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8fY6fSCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zsxpbu1xqtj40hujzi7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8fY6fSCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zsxpbu1xqtj40hujzi7.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we see that a change in the &lt;code&gt;fb&lt;/code&gt; property inside &lt;code&gt;social&lt;/code&gt; affected the original object as well. And this is why we say that all this techniques of copying are shallow copy as they work only up to one level, beyond that we need a deep copy which is a bit complicated.&lt;/p&gt;

&lt;p&gt;We can use a shortcut though but it isn't recommended as behaviour can be unexpected.&lt;/p&gt;

&lt;p&gt;What we can do is use:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObject2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;harsh&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and you can see the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5_NTYe97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwdw3zbtb25xyaowlia0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5_NTYe97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwdw3zbtb25xyaowlia0.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that the change is the &lt;code&gt;social&lt;/code&gt; property will not affect the original object now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt; you may think&lt;/p&gt;

&lt;p&gt;Because if we pass an object to &lt;code&gt;JSON.stringify&lt;/code&gt; like &lt;code&gt;JSON.stringify(harsh)&lt;/code&gt; then it simply converts it into a string, it is no longer an object, but then we immediately &lt;code&gt;JSON.parse&lt;/code&gt; it  like &lt;code&gt;JSON.parse(JSON.stringify(harsh))&lt;/code&gt; which turns it back into an Object and thus we get a full copy of the original object without any issue of references.&lt;/p&gt;

&lt;p&gt;and with this our project for the day was completed.&lt;/p&gt;

&lt;p&gt;GitHub repo:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cenacrharsh"&gt;
        cenacrharsh
      &lt;/a&gt; / &lt;a href="https://github.com/cenacrharsh/JS-30-DAY-14"&gt;
        JS-30-DAY-14
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#blog-on-day13-of-javascript30"&gt;
  &lt;/a&gt;
  Blog on Day-13 of javascript30
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/cenacr007_harsh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOSLbihe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---UOoV_Rg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/db02e77a-1c1c-423b-8d31-85eca73347ae.jpg" alt="cenacr007_harsh image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/cenacr007_harsh/javascript-30-day-13-337i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JavaScript-30-Day-13&lt;/h2&gt;
      &lt;h3&gt;KUMAR HARSH ・ Jun 13 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#blog-on-day12-of-javascript30"&gt;
  &lt;/a&gt;
  Blog on Day-12 of javascript30
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/cenacr007_harsh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOSLbihe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---UOoV_Rg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/db02e77a-1c1c-423b-8d31-85eca73347ae.jpg" alt="cenacr007_harsh image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/cenacr007_harsh/javascript-30-day-12-2k45" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JavaScript-30-Day-12&lt;/h2&gt;
      &lt;h3&gt;KUMAR HARSH ・ Jun 12 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#blog-on-day11-of-javascript30"&gt;
  &lt;/a&gt;
  Blog on Day-11 of javascript30
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/cenacr007_harsh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOSLbihe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---UOoV_Rg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/db02e77a-1c1c-423b-8d31-85eca73347ae.jpg" alt="cenacr007_harsh image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/cenacr007_harsh/javascript-30-day-11-1icc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JavaScript-30-Day-11&lt;/h2&gt;
      &lt;h3&gt;KUMAR HARSH ・ Jun 11 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://twitter.com/cenacr007_harsh"&gt;Follow me on Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/kumarharsh22/"&gt;Follow me on Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DEV Profile&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__641726"&gt;
  
    .ltag__user__id__641726 .follow-action-button {
      background-color: #000000 !important;
      color: #000000 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/cenacr007_harsh" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOSLbihe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---UOoV_Rg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/db02e77a-1c1c-423b-8d31-85eca73347ae.jpg" alt="cenacr007_harsh image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cenacr007_harsh"&gt;KUMAR HARSH&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cenacr007_harsh"&gt;B.Tech (CSE) | Competitive Programming Enthusiast | Front End Web Developer | Cloud Computing (GCP) | Blogger&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;You can also do the challenge at &lt;a href="https://javascript30.com/"&gt;javascript30&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks &lt;a class="mentioned-user" href="https://dev.to/wesbos"&gt;@wesbos&lt;/a&gt;
 , &lt;a href="https://github.com/wesbos"&gt;WesBos&lt;/a&gt; to share this with us! 😊💖&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please comment and let me know your views&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You!
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>github</category>
      <category>programming</category>
    </item>
    <item>
      <title>S.O.L.I.D Principle - Open Closed Principle (OCP)</title>
      <author>Alfian Akmal Hanantio</author>
      <pubDate>Mon, 14 Jun 2021 16:36:40 +0000</pubDate>
      <link>https://dev.to/amalhanaja/s-o-l-i-d-principle-open-closed-principle-ocp-4a7k</link>
      <guid>https://dev.to/amalhanaja/s-o-l-i-d-principle-open-closed-principle-ocp-4a7k</guid>
      <description>&lt;p&gt;Open Closed Principle ini dapat didefinisikan sebagai berikut:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;yang berarti setiap entitas perangkat lunak (class, module, fungsi, dsb.) sebaiknya terbuka untuk dilakukan ekstensi, dan tertutup untuk modifikasi. Kita seharusnya dapat menambahkan behavior baru tanpa perlu merubah implementasinya.&lt;/p&gt;

&lt;p&gt;Tujuan dari prinsip ini untuk menghindari kemungkinan terjadinya bug-bug baru ketika kita merubah implementasi code yang sudah uda.&lt;/p&gt;

&lt;p&gt;Ilustrasi Open Closed Principle:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FTGVm4Vq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sjwoomtqkrzzirch3lpe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FTGVm4Vq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sjwoomtqkrzzirch3lpe.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://cosmos.id/product/cosmos-blenz-cb-802-blender-1-2-l/"&gt;Image Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seperti gambar Illustrasi di atas, Terdapat 1 Mesin Blender, dan beberapa wadah untuk blender yang digunakan untuk kasus-kasus yang berbeda, dimana ada yang untuk memblender daging, memblender buah, memblender bumbu dapur. Jadi wadah tersebut memiliki fungsi yang berbeda-beda tanpa harus merubah fungsi utama dari mesin blender.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contoh-kasus"&gt;
  &lt;/a&gt;
  Contoh Kasus
&lt;/h2&gt;

&lt;p&gt;Kita ambil contoh Blender di atas. Misal anda memiliki class Blender yang memiliki fungsi untuk memblender buah buahan&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blender&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;blend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mulai memblender"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;lalu ada kebutuhan dari Produk yang membuat class Blender anda dapat daging, dan bumbu dapur / rempah-rempah.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jika anda tidak mengikuti prinsip Open Closed Principle&lt;/strong&gt; mungkin saja anda akan melakukan hal seperti ini:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blender&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;blend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tipe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tipe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"BUAH"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;blendFruit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="s"&gt;"DAGING"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;blendMeat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="s"&gt;"REMPAH"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;blendSpices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;blendFruit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mulai memblender Buah"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;blendMeat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mulai memblender Daging"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;blendSpices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mulai memblender rempah-rempah"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Jika anda melakukan hal tersebut sangat memungkinkan terciptanya bug baru karena anda telah mengubah code yang sebelumnya telah berjalan normal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-improvement"&gt;
  &lt;/a&gt;
  Code Improvement
&lt;/h3&gt;

&lt;p&gt;Sekarang kita akan coba melakukan improvement agar sesuai dengan prinsip OCP.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Processor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;kita siapkan antarmuka / abstraksi yang akan kita gunakan sebagai cetakan processor-processor yang akan kita buat nanti.&lt;/p&gt;

&lt;p&gt;Lalu kita mulai buat masing-masing processor menggunakan cetakan yang sudah ada.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FruitProcessor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Processor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mulai memblender Buah"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MeatProcessor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Processor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mulai memblender Daging"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SpicesProcessor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Processor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mulai memblender rempah-rempah"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;setelah kita buat masing-masing processor nya untuk memproses masing-masing bahan olahan.&lt;/p&gt;

&lt;p&gt;kita menambahkan parameter di fungsi blend dengan object Processor yang akan kita gunakan untuk memproses bahan olahan.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blender&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;blend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Processor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Lantas apa yang terjadi ketika produk ingin menambahkan kebutuhan untuk memblender batu es (ice cube) ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kita tinggal membuat class baru yang mengimplementasikan interface Processor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IceCubeProcessor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Processor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mulai memblender batu es"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;sehingga kita tidak perlu mengubah class Blender yang sebelumnya sudah berjalan.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manfaat"&gt;
  &lt;/a&gt;
  Manfaat
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;fungsionalitas dari class 'X' dapat dengan mudah diperluas dengan fungsionalitas yang baru dengan dikemas dalam kelas yang terpisah dari class 'X' tanpa perlu mengubah implementasi di class 'X' (tidak ada perubahan di class 'X')&lt;/li&gt;
&lt;li&gt;code anda menjadi loosely coupled&lt;/li&gt;
&lt;li&gt;class 'Y' yang di pakai di dalam class 'X' dapat dengan mudah dimock (dipalsukan), sehingga membuat class 'X' lebih mudah untuk di test.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#akhir-kata"&gt;
  &lt;/a&gt;
  Akhir Kata
&lt;/h2&gt;

&lt;p&gt;Sekian dan terimakasih, Saya harap anda bisa menerapkan prinsip ini sehingga code yang anda tulis akan mencadi lebih bersih, mudah untuk test, lebih mudah untuk dikembangkan lagi,   dan dapat menunjang produktivitas anda.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>kotlin</category>
      <category>oop</category>
      <category>architecutre</category>
    </item>
    <item>
      <title>How !to make a calling app in Flutter for Android devices</title>
      <author>Chinmay Kabi</author>
      <pubDate>Mon, 14 Jun 2021 16:29:17 +0000</pubDate>
      <link>https://dev.to/chinmaykb/how-to-make-a-calling-app-in-flutter-for-android-devices-3hpg</link>
      <guid>https://dev.to/chinmaykb/how-to-make-a-calling-app-in-flutter-for-android-devices-3hpg</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclaimer- That &lt;code&gt;!&lt;/code&gt; in the title is not a typo, read it as &lt;code&gt;not&lt;/code&gt;. This article is not a tutorial about how to make a whatsapp or skype type calling app, rather it is an article about how I fell short of making such an app using flutter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have been trying to make a voice calling app using Flutter. You will find many articles and videos about how easy peasy it is to integrate Twilio or Agora into a flutter app, but I could not find one resource which dived deep into making a true calling app in Flutter. What do I mean by &lt;strong&gt;&lt;em&gt;true calling app&lt;/em&gt;&lt;/strong&gt; ?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-a-true-calling-app-should-have"&gt;
  &lt;/a&gt;
  What a true calling app should have
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--czA1jaAG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/jVwkGQk/mermaid-diagram-20210614214920.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--czA1jaAG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/jVwkGQk/mermaid-diagram-20210614214920.png" alt="On receiving data notification for call"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; On receiving data notification for call &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The app should work even when it is in background, or terminated even.&lt;/li&gt;
&lt;li&gt;The app should work over a keyguard(i.e- the lockscreen)&lt;/li&gt;
&lt;li&gt;If the user is using the phone, a &lt;a href="https://developer.android.com/training/notify-user/time-sensitive"&gt;time sensitive notification&lt;/a&gt; should pop up.&lt;/li&gt;
&lt;li&gt;When accepted, this should launch into its own UI, where you see the call details like caller id, duration etc.&lt;/li&gt;
&lt;li&gt;This notification should be a full screen notificaion so that we can see the call interface when the device is locked and not in use.&lt;/li&gt;
&lt;li&gt;During a call, when the user presses the back button, there should be a notification of a foreground service, which shows the info about ongoing call, and has options for disconnecting.&lt;/li&gt;
&lt;li&gt;We can use either the inbuilt calling app, or we can implement our own screen for incoming/outgoing calls and for call in progress.&lt;/li&gt;
&lt;li&gt;I wanted to build it without writing any platform specific code, or just the least amount of code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-the-app"&gt;
  &lt;/a&gt;
  Building the app
&lt;/h2&gt;

&lt;p&gt;I am using the &lt;a href="https://pub.dev/packages/agora_rtc_engine"&gt;agora_rtc_engine&lt;/a&gt; plugin for making voice calls. You can find a tutorial on their &lt;a href="https://docs.agora.io/en/Voice/start_call_audio_flutter?platform=Flutter"&gt;official docs here&lt;/a&gt;. If we implement just what the tutorial says, we will be joining a voice channel as soon as we launch the app, and anyone having the same app can speak into and listen to this voice call.&lt;/p&gt;

&lt;p&gt;So the voice call part is taken care of pretty easily. Now for how to get the behaviour of getting an actual phone call(getting a Caller ID screen, an accept/reject screen).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-1"&gt;
  &lt;/a&gt;
  Take #1
&lt;/h3&gt;

&lt;p&gt;I set up a FCM in flutter to receive data messages. You can read about difference between notification messages and data messages in my &lt;a href="https://stackoverflow.com/a/67968481/14371894"&gt;stackoverflow answer here&lt;/a&gt;. I went with data messages because I wanted to be in control of the notification I generate.&lt;/p&gt;

&lt;p&gt;My next plan was to use &lt;a href="https://pub.dev/packages/flutter_local_notifications#custom-notification-icons-and-sounds"&gt;flutter_local_notifications&lt;/a&gt; plugin and generate a notification. This plugin also has a full screen intent option, which when set to true can show your app when when phone is locked. But there are certain properties the notification should have.So I would listen to a data message, in both foreground and background/terminated state. Upon receiving one, I will generate a notification with full screen intent as true.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#properties-of-the-notification"&gt;
  &lt;/a&gt;
  Properties of the notification
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;They should be non dismissable by swipe action. Only way it is dismissed if the ring is over or the user rejects the call.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The notification should have accept and reject buttons. Depending on the response, we should open either the ongoing call UI or reject the call.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There should be a non dismissable notification during the call, which will show some options like mute, disconnect, etc, along with caller id, duration etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-fault-in-our-notifications"&gt;
  &lt;/a&gt;
  The fault in our notifications
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;flutter_local_notifications&lt;/code&gt; does not have any solution for time sensitive notifications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also does not have any solution for having action buttons in the notification&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;awesome_notifications&lt;/code&gt; has a solution for action button, but no solution for time sensitive notification.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also does not support full screen notifications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j6CvHU5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/5d8f0n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6CvHU5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/5d8f0n.jpg" alt="Always has been eh"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Always has been eh? &lt;/p&gt;

&lt;p&gt;Navigating to a particular screen upon tapping the notification is rather easy, as there are callbacks available for times when the app has been opened due to a notification. For this though you need to use a notificaication message, in which the notification will be handled directly by the plugin. If you want to implement it in data messages, you will have to write some platform dependent code as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-2"&gt;
  &lt;/a&gt;
  Take #2
&lt;/h3&gt;

&lt;p&gt;I tried handling the incoming calls like a gentleman!&lt;br&gt;
Upon further digging I found out that apps like Whatsapp, Skype, Insta, Zoom etc handle incoming calls and outgoing calls using something called &lt;a href="https://developer.apple.com/documentation/callkit"&gt;callkit in iOS&lt;/a&gt; and &lt;a href="https://developer.android.com/reference/android/telecom/ConnectionService"&gt;ConnectionService in Android&lt;/a&gt;. Plugins already exist for this in flutter, namely &lt;a href="https://pub.dev/packages/callkeep"&gt;callkeep&lt;/a&gt; and &lt;a href="https://pub.dev/packages/callkeep"&gt;flutter_callkeep&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;These plugins, when asked to show a call, mimic the exact behavior as a normal telecom call would, using the same notifications, showing the same UI. Each interaction, like accepting a call, rejecting a call, toggling loudspeaker, holding a call etc all have their callbacks. Seems pretty straightforward, right?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#callkeep-couldnt-keep-up"&gt;
  &lt;/a&gt;
  Callkeep couldn't keep up
&lt;/h4&gt;

&lt;p&gt;There is a bug in both the packages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When you start a call, and reject a call then everything works fine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you accept the call though, the Call UI hangs all of a sudden. Fron the logs it seems like it is starting a lot of calls internally, and they all clash with each other.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The plugins are still a bit usable in Android Pie, but completely unusable in Android 10.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h0yl8u5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/5d8fkt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h0yl8u5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/5d8fkt.jpg" alt="Why are we here, just to suffer?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Why are we here, just to suffer? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-3"&gt;
  &lt;/a&gt;
  Take #3
&lt;/h3&gt;

&lt;p&gt;A hacky solution (platform side code included).&lt;/p&gt;

&lt;p&gt;Our pain problem with notification is that we can't have action buttons + time sensitive + full screen notifications together. We can all compensate for this by generating our own notification using &lt;a href="https://flutter.dev/docs/development/platform-integration/platform-channels"&gt;platform channel&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-plan"&gt;
  &lt;/a&gt;
  The plan
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Write a function that can generate a notification of our requirements, a good example is &lt;a href="https://developer.android.com/training/notify-user/time-sensitive"&gt;time sensitive notification&lt;/a&gt; example here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can assign a pending intent to this intent for full screen notification. Flutter apps have only one activity. To get the reference to this activity, you can follow this snippet.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="c1"&gt;/// This code snippet is taken from flutter_local_notification plugin&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt; &lt;span class="nf"&gt;getLaunchIntent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;packageName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPackageName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;PackageManager&lt;/span&gt; &lt;span class="n"&gt;packageManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPackageManager&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;packageManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLaunchIntentForPackage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packageName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;MainActivity&lt;/code&gt; as soon as the user either taps on the notification or accepts the call.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check whether the app was called because of a notification tap by invoking some MethodChannel right as the app starts. Depending on the result, you can either navigate to the app as usual or to the Call UI screen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you find it difficult to determine if the app was started from a notification or not, using something like Shared Preferences. Store a key-value pair signifying that app was started in notification inside the BroadcastListener. Once the app has launched and a MethodChannel is involed asking whether app was launched from notification, reset it. P.S- This is a hacky solution, better solutions exist.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As soon as the app is launched, spawn another service, this time a &lt;a href="https://developer.android.com/guide/components/foreground-services"&gt;foreground service&lt;/a&gt;. Every foreground service &lt;strong&gt;MUST&lt;/strong&gt; have a notification associated with it. We can use this notification to signify an ongoing call, regardless of whether is in the app or outside it. This service runs until the user has disconnected the call.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C8L23nZL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/5d8aqg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C8L23nZL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/5d8aqg.jpg" alt="Same energy as our solution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Same energy as our solution&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-4"&gt;
  &lt;/a&gt;
  Take #4
&lt;/h3&gt;

&lt;p&gt;What I feel is the legit solution!&lt;/p&gt;

&lt;p&gt;Previously in the article I mentioned something about &lt;a href="https://developer.android.com/reference/android/telecom/ConnectionService"&gt;ConnectionService&lt;/a&gt;. This is the recommended way for any app that either&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Can make phone calls (VoIP or otherwise) and want those calls to be integrated into the built-in phone app. Referred to as a &lt;em&gt;system managed&lt;/em&gt; ConnectionService.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Are a standalone calling app and don't want their calls to be integrated into the built-in phone app. Referred to as a &lt;em&gt;self managed&lt;/em&gt; ConnectionService.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What both &lt;code&gt;callkeep&lt;/code&gt; and &lt;code&gt;flutter_callkeep&lt;/code&gt; plugins offered is system managed ConnectionService. What we need is self managed. The main issue here is resources, or lack thereof. The only resource I could find is &lt;a href="https://developer.android.com/guide/topics/connectivity/telecom/selfManaged#no-active"&gt;this guide&lt;/a&gt;. There are not any tutorials/blogs about how to implement this. We can learn how to implement this by looking at some existing projects though, a good point is &lt;a href="https://github.com/AgoraIO-Usecase/Video-Calling"&gt;AgoraIO-Usercase/Video-Calling&lt;/a&gt; repository.&lt;/p&gt;

&lt;p&gt;Getting this functionality all wrapped in a flutter plugin is the best solution we can manage with flutter in my opinion. What I believe personally though is that implementing it in native is the easiest way out. That way we do not have to worry about handling communication between native android and flutter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Flutter is a cross-platform UI **toolkit&lt;/em&gt;* that is designed to allow code &amp;gt; reuse across operating systems such as iOS and Android, while also &lt;br&gt;
allowing applications to interface directly with underlying platform &lt;br&gt;
services*. - &lt;a href="https://flutter.dev/docs/resources/architectural-overview"&gt;Flutter architectural overview&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Google considers Flutter as a UI toolkit, and personally so do I. Sometimes we may have to implement some framework level functionalities(like handling telephony in this case) just so that we can show a call accept/reject screen in flutter. This can be pretty straightforward in native android. So the question lies with the developer, &lt;em&gt;is it worth the effort?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MYpRPKd3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/5d8e1w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MYpRPKd3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/5d8e1w.jpg" alt="'tis complicated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;P.S - This article is everything I could find and make sense of while researching about this for 3 days straight. I decided to write this article because there are a lot of people on StackOverflow and Github Issues who do not have an answer to this question. While I have not been able to provide an answer, yet, I hope to make the question clearer.&lt;/p&gt;

&lt;p&gt;I am not a pro developer, so if you find any discrepancies, feel free to comment, the whole point of this article to bring whatever little exists about this on the internet at a single place! Also, I'll be working on the plugin myself, I'll be updating the article with a link to the repo in some days.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>android</category>
      <category>plugin</category>
      <category>hack</category>
    </item>
    <item>
      <title>Show Dev.to: 16 Year Old Builds ₿itcoinForecast To Celebrate Currency Adoption</title>
      <author>Josh Ternyak</author>
      <pubDate>Mon, 14 Jun 2021 16:27:36 +0000</pubDate>
      <link>https://dev.to/joshternyak/show-dev-to-16-year-old-builds-itcoinforecast-to-celebrate-currency-adoption-hf5</link>
      <guid>https://dev.to/joshternyak/show-dev-to-16-year-old-builds-itcoinforecast-to-celebrate-currency-adoption-hf5</guid>
      <description>&lt;p&gt;Hey Devs!&lt;/p&gt;

&lt;p&gt;To celebrate countries beginning to adopt Bitcoin as an official currency, I built &lt;a href="https://bitcoinforecast.io"&gt;bitcoinforecast.io&lt;/a&gt;, a website where you can see Bitcoin's price forecast, real-time.&lt;/p&gt;

&lt;p&gt;I built the website using React, Next JS, and CSS in JS.&lt;/p&gt;

&lt;p&gt;Any feedback is appreciated!&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Basics of Callbacks and Promises in Javascript</title>
      <author>Patricia Nicole</author>
      <pubDate>Mon, 14 Jun 2021 16:09:20 +0000</pubDate>
      <link>https://dev.to/pat_the99/basics-of-callbacks-and-promises-in-javascript-4cj7</link>
      <guid>https://dev.to/pat_the99/basics-of-callbacks-and-promises-in-javascript-4cj7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#js3-wil-thinking-post"&gt;
  &lt;/a&gt;
  [JS#3 WIL 🤔 Post]
&lt;/h2&gt;

&lt;p&gt;Most websites and applications written would, at some point request data from a server, wait for user input or in general do other processes that would take a good amount of time to finish. Because of this, Javascript supports asynchronous functions, simply, functions that can run in the background while other parts of the program execute. These functions are executed in its entirety when called, but might finish on some future time.&lt;/p&gt;

&lt;p&gt;One, and the simplest way of achieving asynchrony is by using &lt;strong&gt;callbacks&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pushpin-callbacks"&gt;
  &lt;/a&gt;
  📌 Callbacks
&lt;/h3&gt;

&lt;p&gt;A callback is a function passed as an argument to a different function. They are executed asynchronously or at a later time. Practically, programs are read from top to bottom, but this is not always the case as async code may run different functions at different times. For instance, when handling click events for buttons in an HTML form, we typically do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;submitBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="c1"&gt;//this function is a callback&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;printSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, Dev Community!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet above, the &lt;code&gt;addEventListener&lt;/code&gt; function takes a callback, in this case the function invoking the &lt;code&gt;printSomething&lt;/code&gt; method. It will then be invoked when the &lt;code&gt;submitBtn&lt;/code&gt; is clicked. &lt;/p&gt;

&lt;p&gt;Using callbacks are pretty easy and convenient when dealing with simple processes. However, it may quickly get out of hand if they are chained or nested deeply together, famously known as &lt;a href="http://callbackhell.com/"&gt;Callback Hell&lt;/a&gt; or pyramid of doom 😟. &lt;/p&gt;

&lt;p&gt;So, callbacks are very fundamental in JS asynchrony. However, as the language grows and with program logic getting a little too complex, they are not enough. The future of JS requires a more sophisticated way of async patterns, one such mechanism is a &lt;strong&gt;promise&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pushpin-promises"&gt;
  &lt;/a&gt;
  📌 Promises
&lt;/h3&gt;

&lt;p&gt;A promise is an object that &lt;strong&gt;MIGHT&lt;/strong&gt; produce a value at some future time. For example, let us say that the function &lt;code&gt;fetchDatabaseData&lt;/code&gt; gets data from a server and returns it as an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchDatabaseData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//fetches data via some API&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fetching the data from the server may take time, so unless we tell the code that, it will always assume that the data is ready. The &lt;code&gt;api.getData()&lt;/code&gt; is probably not yet finished, so, executing the below snippet may have an unwanted result, e.g. &lt;code&gt;undefined&lt;/code&gt; 😣.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchDatabaseData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstEntry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first];
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, to fix this problem, we need a mechanism to tell our program to wait for &lt;code&gt;fetchDatabaseData&lt;/code&gt; to finish. Promises solve this issue for us. &lt;/p&gt;

&lt;p&gt;To fix the above code, we can do something like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchDatabaseData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//fetches data via some API&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ooops, we've got an error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchDatabaseData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// handle fulfilled operation&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstEntry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;apiData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstEntry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;//handle rejection error&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the example above, a promise behaves as a &lt;code&gt;'future'&lt;/code&gt; value. Since the time-dependent process is encapsulated inside the promise, the promise itself can be treated as time-independent. Meaning, it can be combined with any other promise regardless of how long the encapsulated process might take, without any problem.&lt;/p&gt;

&lt;p&gt;When the result from the api is &lt;code&gt;undefined&lt;/code&gt;, the returned Promise will have a rejected state. Thus, the &lt;code&gt;then&lt;/code&gt; method would print &lt;code&gt;"Oops, we've got an error"&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;On the other hand, if the api results to a defined object, the Promise would be fulfilled and the &lt;code&gt;then&lt;/code&gt; method would print the api results.&lt;/p&gt;

&lt;p&gt;In addition, immutability is one of the most essential aspect of promises. Once a promise has been resolved, it stays that way &lt;strong&gt;FOREVER&lt;/strong&gt;. It becomes immutable. You can then pass the promise around and know that it cannot be modified maliciously or accidentally. &lt;/p&gt;

&lt;p&gt;I created a very simple weather application using the fetch function which returns a promise. The &lt;a href="https://fatrixienicolieopetina.github.io/weather-app/"&gt;live preview&lt;/a&gt; and the &lt;a href="https://github.com/fatrixienicolieopetina/weather-app"&gt;code&lt;/a&gt; can be found in &lt;a href="https://github.com/fatrixienicolieopetina"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also recommend reading these chapters of &lt;code&gt;You Don't Know JS&lt;/code&gt; :  &lt;a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch2.md"&gt;Callbacks in Chapter 2&lt;/a&gt; and &lt;a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch3.md"&gt;Promises in Chapter 3&lt;/a&gt;&lt;br&gt;
for a more in-depth discussion of these concepts.&lt;/p&gt;

&lt;p&gt;In conclusion, there are a lot of ways to handle asynchrony in Javascript, two of them via callbacks or promise. Callbacks can be used in handling simple logic but might get out of hand if chained, i.e. callback hell. Promises do not get rid of callbacks, they try to address callback chains by expressing the asynchronous program flow in a sequential way. It helps in writing maintainable JS code. It also makes the code more readable as the program-flow is sequential, which is similar on how our brain plans and executes actions.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cheers-to-continuous-learning-wineglass"&gt;
  &lt;/a&gt;
  Cheers to continuous learning! 🍷
&lt;/h3&gt;

&lt;p&gt;[REFERENCES]&lt;br&gt;
[1] &lt;a href="https://github.com/maxogden/art-of-node#callbacks"&gt;Art of Node&lt;/a&gt;&lt;br&gt;
[2] &lt;a href="https://www.theodinproject.com/paths/full-stack-javascript/courses/javascript/lessons/async"&gt;The Odin Project: Async&lt;/a&gt;&lt;br&gt;
[3] &lt;a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch2.md"&gt;You Don't Know JS&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to build a GraphQL Gateway with Spring Boot and Kotlin</title>
      <author>Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴</author>
      <pubDate>Mon, 14 Jun 2021 16:04:55 +0000</pubDate>
      <link>https://dev.to/jmfayard/how-to-build-a-graphql-gateway-with-spring-boot-and-kotlin-h30</link>
      <guid>https://dev.to/jmfayard/how-to-build-a-graphql-gateway-with-spring-boot-and-kotlin-h30</guid>
      <description>&lt;p&gt;With Spring Boot + Kotlin + Coroutines + GraphQL-java-kickstart, you can build a GraphQL Gateway with a minimum of boilerplate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#up-and-running"&gt;
  &lt;/a&gt;
  Up and Running
&lt;/h2&gt;

&lt;p&gt;The code is available at &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jmfayard"&gt;
        jmfayard
      &lt;/a&gt; / &lt;a href="https://github.com/jmfayard/spring-playground"&gt;
        spring-playground
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A playground of Spring projects
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
spring-playground&lt;/h1&gt;
&lt;p&gt;Projects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/jmfayard/spring-playground/main/graphql-gateway"&gt;graphql-gateway&lt;/a&gt; based on kotlin + spring-webflux + graphql-java-kickstart&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/jmfayard/spring-playground/main/spring-fu"&gt;spring-fu&lt;/a&gt; based on coroutines + spring-kafu&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jmfayard/spring-playground"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;Run the server like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/jmfayard/spring-playground
cd spring-playground/graphql-gateway
./gradlew bootRun
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Open GraphiQL at &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#animal-facts"&gt;
  &lt;/a&gt;
  Animal facts
&lt;/h2&gt;

&lt;p&gt;With this project up and running, you can fetch animal facts using a GraphQL Query.&lt;/p&gt;

&lt;p&gt;Enter this query:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;latency&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;latency&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Run the query, and you will see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1DcrxXNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/121910922-914f9180-cd2f-11eb-9b96-e9b627328981.png" class="article-body-image-wrapper"&gt;&lt;img alt="Mozilla_Firefox" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1DcrxXNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/121910922-914f9180-cd2f-11eb-9b96-e9b627328981.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are new to GraphQL, read this introduction from @methodcoder, I will wait &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hexrcs" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2WCO1u1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uooa1hzs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/62575/891801d5-0dc3-4279-b346-fd0dd1fd1653.jpeg" alt="hexrcs image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/methodcoder/graphql-crash-course-in-10-pics-3b04" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🔥 GraphQL Crash Course (in 10 pics!)&lt;/h2&gt;
      &lt;h3&gt;Xiaoru Li 🇨🇳🇩🇪 ・ Nov 3 '19 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cat-facts-and-dog-facts"&gt;
  &lt;/a&gt;
  Cat facts and dog facts
&lt;/h2&gt;

&lt;p&gt;Where do the animal facts come from?&lt;/p&gt;

&lt;p&gt;The server knows about two REST APIs.&lt;/p&gt;

&lt;p&gt;The first is about cat facts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http get https://catfact.ninja/fact
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"fact"&lt;/span&gt;: &lt;span class="s2"&gt;"Isaac Newton invented the cat flap. Newton was experimenting in a pitch-black room. Spithead, one of his cats, kept opening the door and wrecking his experiment. The cat flap kept both Newton and Spithead happy."&lt;/span&gt;,
    &lt;span class="s2"&gt;"length"&lt;/span&gt;: 211
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And the second about dog facts:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http get https://some-random-api.ml/facts/dog
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"fact"&lt;/span&gt;: &lt;span class="s2"&gt;"A large breed dog's resting heart beats between 60 and 100 times per minute, and a small dog breed's heart beats between 100-140. Comparatively, a resting human heart beats 60-100 times per minute."&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By building a simple gateway, we take on complexity so that the front-end developers have one less thing to worry about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we take care of calling the multiple endpoints and combining them, becoming a &lt;a href="https://samnewman.io/patterns/architectural/bff/"&gt;backend-for-frontend&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;we offer a nice GraphQL schema to the front-end(s).&lt;/li&gt;
&lt;li&gt;we normalize the response format - dog facts have no length attribute, but we can compute it!&lt;/li&gt;
&lt;li&gt;we can potentially reduce the &lt;strong&gt;total response time&lt;/strong&gt;. Without the gateway, the front-end would do two round-trips of let say 300 ms, so 600ms. With the gateway, there is one round-trip of 300 ms and two round-trips between the gateway and the facts server. If those are located on the same network, those could be done in 10 ms each, for a total of 320 ms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how do we build that gateway?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;p&gt;If you start a new project from scratch via &lt;a href="https://start.spring.io/"&gt;https://start.spring.io/&lt;/a&gt;, you will need to add those dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring webflux&lt;/li&gt;
&lt;li&gt;GraphQL-java&lt;/li&gt;
&lt;li&gt;GraphQL-java-kickstart libraries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/jmfayard/spring-playground/blob/e2c74e6efe93674c0e382bef940d36a190145d80/graphql-gateway/build.gradle.kts#L23-L27"&gt;Use the source Luke&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that I'm using &lt;a href="https://jmfayard.github.io/refreshVersions/"&gt;gradle refreshVersions&lt;/a&gt; to make it easy to keep the project up-to-date. Therefore, the versions are not defined in the &lt;code&gt;build.gradle&lt;/code&gt; files, they are centralized in the &lt;a href="https://github.com/jmfayard/spring-playground/blob/19b06ec2ffa4a0084a3f0799e891ecbe784132c6/graphql-gateway/versions.properties"&gt;&lt;code&gt;versions.properties&lt;/code&gt;&lt;/a&gt; file. RefreshVersions is bootstrapped like this in &lt;code&gt;settings.gradle.kts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;plugins&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// See https://jmfayard.github.io/refreshVersions&lt;/span&gt;
    &lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"de.fayard.refreshVersions"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="s"&gt;"0.10.1"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#graphqlschema-first"&gt;
  &lt;/a&gt;
  GraphQL-schema first
&lt;/h2&gt;

&lt;p&gt;GraphQL-java-kickstart uses a schema-first approach.&lt;/p&gt;

&lt;p&gt;We first define our schema in &lt;code&gt;resources/graphql/schema.grqphqls&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We then tell Spring where our &lt;code&gt;GraphQLSchema&lt;/code&gt; comes from:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GraphQLConfig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Bean&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;graphQLSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animalsQueryResolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AnimalsQueryResolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;GraphQLSchema&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;SchemaParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;newParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"graphql/schema.graphqls"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolvers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animalsQueryResolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeExecutableSchema&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Spring wants at least a GraphQLQueryResolver, the class responsible for implementing GraphQL queries.&lt;/p&gt;

&lt;p&gt;We will define one, but keep it empty for now:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Component
class AnimalsQueryResolver() : GraphQLQueryResolver {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#graphqlqueryresolver"&gt;
  &lt;/a&gt;
  GraphQLQueryResolver
&lt;/h2&gt;

&lt;p&gt;If we start our application with &lt;code&gt;./gradlew bootRun&lt;/code&gt;, we will see it fail fast with this error message:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;FieldResolverError: No method or field found as defined &lt;span class="k"&gt;in &lt;/span&gt;schema graphql/schema.graphqls:2 
with any of the following signatures 
&lt;span class="o"&gt;(&lt;/span&gt;with or without one of &lt;span class="o"&gt;[&lt;/span&gt;interface graphql.schema.DataFetchingEnvironment] as the last argument&lt;span class="o"&gt;)&lt;/span&gt;, 
&lt;span class="k"&gt;in &lt;/span&gt;priority order:

  dev.jmfayard.factsdemo.AnimalsQueryResolver.cat&lt;span class="o"&gt;()&lt;/span&gt;
  dev.jmfayard.factsdemo.AnimalsQueryResolver.getCat&lt;span class="o"&gt;()&lt;/span&gt;
  dev.jmfayard.factsdemo.AnimalsQueryResolver.cat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The schema, which is the single source of truth, requires something to implement a &lt;code&gt;cat&lt;/code&gt; query, but we didn't have that in the code.&lt;/p&gt;

&lt;p&gt;To make Spring happy, we make sure our Query Resolver has the same &lt;strong&gt;shape&lt;/strong&gt; as the GraphQL schema:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimalsQueryResolver&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;GraphQLQueryResolver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice that you can directly define a suspending function, without any additional boilerplate, to implement the query.&lt;/p&gt;

&lt;p&gt;Run again &lt;code&gt;./gradlew bootRun&lt;/code&gt; and now Spring starts!&lt;/p&gt;

&lt;p&gt;We go one step further by forwarding the calls to an &lt;code&gt;AnimalsRepository&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimalsQueryResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;animalsRepository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AnimalsRepository&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;GraphQLQueryResolver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animalsRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;animalsRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;How do we implement this repository? We need an HTTP client.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#suspending-http-calls-with-ktorclient"&gt;
  &lt;/a&gt;
  Suspending HTTP calls with  ktor-client
&lt;/h2&gt;

&lt;p&gt;We could have used the built-in reactive &lt;code&gt;WebClient&lt;/code&gt; that Spring provides, but I wanted to use ktor-client to keep things as simple as possible.&lt;/p&gt;

&lt;p&gt;First we have to add the dependencies for ktor, http and kotlinx-serialization, then configure our client.&lt;/p&gt;

&lt;p&gt;See the commit &lt;a href="https://github.com/jmfayard/spring-playground/commit/c3445289143b321fc0fa1e4264e65b8989f78e31"&gt;Configure ktor-client, okhttp &amp;amp; kotlinx.serialization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most interesting part is here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimalsRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;ktorClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;HttpClient&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dogFact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ktorClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DogFact&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;DOG_FACT_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dogFact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dogFact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;catFact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ktorClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CatFact&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;CAT_FACT_URLS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;catFact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;catFact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#simple-or-nonblocking-why-not-both"&gt;
  &lt;/a&gt;
  Simple or non-blocking: why not both?
&lt;/h2&gt;

&lt;p&gt;When I see the code above, I am reminded that I love coroutines.&lt;/p&gt;

&lt;p&gt;We get to write code in a simple, direct style like in the old days when we were writing blocking code in a one-thread-per-request model. &lt;/p&gt;

&lt;p&gt;Here it's essential to write non-blocking code: the gateway spends most of its time waiting for the two other servers to answer.&lt;/p&gt;

&lt;p&gt;Code written using some kind of promise or reactive streams is therefore clearly more efficient than blocking code.&lt;/p&gt;

&lt;p&gt;But those require you to "think in reactive streams" and make your code looks different indeed.&lt;/p&gt;

&lt;p&gt;With coroutines, we get the efficiency and our code is as simple as it gets.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#resilience-via-a-circuit-breaker"&gt;
  &lt;/a&gt;
  Resilience via a Circuit Breaker
&lt;/h2&gt;

&lt;p&gt;We have a gateway, but it's a bad gateway.&lt;/p&gt;

&lt;p&gt;More precisely, it's as bad as the worst of the servers it depends on to do its job.&lt;/p&gt;

&lt;p&gt;If one server throws an error systematically or gets v e r y s l o w, our gateway follows blindly.&lt;/p&gt;

&lt;p&gt;We don't want the same error to reoccur constantly, and we want to handle the error quickly without waiting for the TCP timeout.&lt;/p&gt;

&lt;p&gt;We can make our gateway more &lt;strong&gt;resilient&lt;/strong&gt; by using a &lt;a href="https://en.wikipedia.org/wiki/Circuit_breaker_design_pattern"&gt;circuit breaker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resilience4j&lt;/strong&gt; provides such a circuit breaker implementation.&lt;/p&gt;

&lt;p&gt;We first add and configure the library.&lt;/p&gt;

&lt;p&gt;See the commit: &lt;a href="https://github.com/jmfayard/spring-playground/commit/60d88ac2c434728b07409bd90d381cb21791f7ce"&gt;add a circuit breaker powered by resilience4j&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The usage is at simple as it gets:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;@Component&lt;/span&gt;
class AnimalsRepository(
    val ktorClient: HttpClient,
&lt;span class="gi"&gt;+    val dogCircuitBreaker: CircuitBreaker,
+    val catCircuitBreaker: CircuitBreaker
&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; {
    suspend fun dog(): Fact {
&lt;span class="gi"&gt;+        val dogFact = dogCircuitBreaker.executeSuspendFunction {
&lt;/span&gt;            ktorClient.get&amp;lt;DogFact&amp;gt;(DOG_FACT_URL)
&lt;span class="gi"&gt;+        }
&lt;/span&gt;        return Fact(
            fact = dogFact.fact,
            length = dogFact.fact.length,
        )
    }

    suspend fun cat(): Fact {
&lt;span class="gi"&gt;+        val catFact = catCircuitBreaker.executeSuspendFunction  {
&lt;/span&gt;            ktorClient.get&amp;lt;CatFact&amp;gt;(CAT_FACT_URLS)
&lt;span class="gi"&gt;+        }
&lt;/span&gt;        return Fact(
            fact = catFact.fact,
            length = catFact.length,
        )
    }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#i-want-to-learn-more"&gt;
  &lt;/a&gt;
  I want to learn more
&lt;/h2&gt;

&lt;p&gt;See &lt;a href="https://github.com/jmfayard/spring-playground/tree/main/graphql-gateway"&gt;spring-playground/graphql-gateway&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jmfayard"&gt;
        jmfayard
      &lt;/a&gt; / &lt;a href="https://github.com/jmfayard/spring-playground"&gt;
        spring-playground
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A playground of Spring projects
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
spring-playground&lt;/h1&gt;
&lt;p&gt;Projects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/jmfayard/spring-playground/main/graphql-gateway"&gt;graphql-gateway&lt;/a&gt; based on kotlin + spring-webflux + graphql-java-kickstart&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/jmfayard/spring-playground/main/spring-fu"&gt;spring-fu&lt;/a&gt; based on coroutines + spring-kafu&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jmfayard/spring-playground"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The talk that inspired this article: &lt;a href="https://www.youtube.com/watch?v=4GkoB4hZUnw"&gt;KotlinFest2019「Future of Jira Software powered by Kotlin」 #kotlinfest - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4GkoB4hZUnw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Documentation of the libraries used in this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ktor.io/docs/getting-started-ktor-client.html"&gt;Getting started with a Ktor client | Ktor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.graphql-java-kickstart.com/spring-boot/"&gt;About GraphQL Spring Boot - GraphQL Java Kickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.graphql-java-kickstart.com/tools/"&gt;About GraphQL Java Tools - GraphQL Java Kickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/graphql-java/graphql-java"&gt;graphql-java/graphql-java: GraphQL Java implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://resilience4j.readme.io/docs"&gt;Resilience4j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another approach: &lt;a href="https://medium.com/expedia-group-tech/creating-a-reactive-graphql-server-with-spring-boot-and-kotlin-54aca7316470"&gt;Creating a Reactive GraphQL Server with Spring Boot and Kotlin&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to contact me, there is a standing invitation at &lt;a href="https://jmfayard.dev/contact/"&gt;https://jmfayard.dev/contact/&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>kotlin</category>
      <category>graphql</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Building a blog with Gatsby from scratch</title>
      <author>Sunny Golovine</author>
      <pubDate>Mon, 14 Jun 2021 15:59:52 +0000</pubDate>
      <link>https://dev.to/sgolovine/building-a-blog-with-gatsby-from-scratch-52c3</link>
      <guid>https://dev.to/sgolovine/building-a-blog-with-gatsby-from-scratch-52c3</guid>
      <description>&lt;p&gt;Gatsby is a static site generator and is one of the most popular JS frameworks out there, running on top of React. Most guides you will read here will point you to building a Gatsby site by starting with &lt;code&gt;gatsby new ...&lt;/code&gt;, while I think that this is a great starting point, In this post I want to explain how to build a Gatsby blog completely from scratch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-everything-up"&gt;
  &lt;/a&gt;
  Setting Everything Up
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;Before we get going make sure that you have NodeJS and Yarn both installed on your system. I suggest using &lt;a href="https://github.com/nvm-sh/nvm"&gt;NVM&lt;/a&gt; to install Node.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initializing-the-project"&gt;
  &lt;/a&gt;
  Initializing the Project
&lt;/h3&gt;

&lt;p&gt;To start create a new folder for your project. Inside the folder, run &lt;code&gt;yarn init -y&lt;/code&gt; to initialize it as a Javascript project. Then run &lt;code&gt;yarn&lt;/code&gt; to generate a &lt;code&gt;yarn.lock&lt;/code&gt; file and a &lt;code&gt;node_modules&lt;/code&gt; folder. The next step is to add the dependencies that we will need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt; &lt;span class="nx"&gt;gatsby&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly you will want to create our Gatsby configurations, to start create a file called &lt;code&gt;gatsby-config.js&lt;/code&gt; and populate it with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup-the-scripts"&gt;
  &lt;/a&gt;
  Setup the Scripts
&lt;/h3&gt;

&lt;p&gt;Once we have out dependencies installed, the next step is to create a few scripts for us to control Gatsby. Add the following items to the "scripts" section of your &lt;code&gt;package.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gatsby develop"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gatsby build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup-the-files"&gt;
  &lt;/a&gt;
  Setup the Files
&lt;/h3&gt;

&lt;p&gt;The last little bit we will need before we can run the site is to generate a page for Gatsby to render. To do this, create a &lt;code&gt;src&lt;/code&gt; folder with a &lt;code&gt;pages&lt;/code&gt; folder inside, then create a file inside called &lt;code&gt;index.js&lt;/code&gt; and populate it with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have everything setup, run &lt;code&gt;yarn&lt;/code&gt; and then &lt;code&gt;yarn start&lt;/code&gt; and then to go &lt;code&gt;http://localhost:8000&lt;/code&gt; to see your site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HPjuKO0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rff58tlxnm7xc4gnv44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPjuKO0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rff58tlxnm7xc4gnv44.png" alt="hello world"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-blog"&gt;
  &lt;/a&gt;
  Setting up the Blog
&lt;/h2&gt;

&lt;p&gt;Now that we have the basic site up and running, it's time to setup the blog. To start, create a folder in the root of your project called &lt;code&gt;static&lt;/code&gt; and create another folder inside called &lt;code&gt;posts&lt;/code&gt;. Create several markdown files inside, the filenames do not matter however they should be formatted using &lt;a href="https://jekyllrb.com/docs/front-matter/"&gt;frontmatter&lt;/a&gt;. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------
title: My First Post
slug: first-post
date: June 14, 2021
--------

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam a ex suscipit, tincidunt nisi dapibus, porta augue. Nam quam quam, consectetur in iaculis sit amet, fermentum a tortor. Duis eget ex nisi. Quisque ac nunc in ipsum luctus cursus vitae eget nisl. Quisque et faucibus leo. Suspendisse potenti. Quisque sed arcu nulla.

Vivamus vestibulum aliquet mi. In consectetur euismod risus molestie viverra. Nulla aliquam molestie quam a mattis. Cras nec purus sollicitudin, fringilla odio ut, eleifend ipsum. Morbi imperdiet velit vel ligula euismod accumsan. Vivamus at lorem ac nulla porttitor euismod. Proin molestie, neque ut molestie elementum, nisi sapien tincidunt nisi, at ullamcorper justo mi eu nunc. Aenean in dolor volutpat, pulvinar magna eget, consequat urna.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing Dependencies
&lt;/h3&gt;

&lt;p&gt;When we run &lt;code&gt;gatsby develop&lt;/code&gt;, we want Gatsby to look in our static folder, find any blog posts, and create a page for each post. There are two ways to fetch markdown data in Gatsby, we can either use Gatsby Remark or we can use MDX. In this guide we will use MDX. To start, install the following packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @mdx-js/react @mdx-js/mdx gatsby-plugin-mdx gatsby-source-filesystem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configure-gatsby-to-get-our-data"&gt;
  &lt;/a&gt;
  Configure Gatsby to get our Data
&lt;/h3&gt;

&lt;p&gt;By default, Gatsby is not aware of the existence of our &lt;code&gt;static&lt;/code&gt; folder, we need to expose this folder to Gatsby so we can query the contents using GraphQL. To expose this folder, add an instance of &lt;code&gt;gatsby-source-filesystem&lt;/code&gt; to &lt;code&gt;gatsby-config.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-config.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;// This tells gatsby about the directory&lt;/span&gt;
    &lt;span class="c1"&gt;// And to source files from the directory&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-source-filesystem`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`posts`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;static&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// This plugin will help gatsby handle markdown files that it finds in `static/posts`&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-plugin-mdx`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.md&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you start the dev server and go to &lt;code&gt;https://localhost:8000/__graphql&lt;/code&gt;, and then execute this query, you will see that it returns the markdown file you have created&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyQuery&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;allMdx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;frontmatter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"allMdx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"nodes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"frontmatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"slug"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"first-post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"My First Post"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"June 14, 2021"&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fantastic, we have the data being fed to Gatsby now, at this point we now need to create a template to store this data, and then tell Gatsby to fetch the data when we build the site and display it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-the-template"&gt;
  &lt;/a&gt;
  Building the Template
&lt;/h3&gt;

&lt;p&gt;Once we get the data from the filesystem, we need to tell Gatsby how to render it. For this we will need to create a template page for our posts. Start off by creating a file called &lt;code&gt;template.js&lt;/code&gt; in your &lt;code&gt;src&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MDXRenderer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gatsby-plugin-mdx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PostTemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Here pageContext is passed in at build time by gatsby-node.js&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageContext&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/** Header to our post */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/** Post Body */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MDXRenderer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MDXRenderer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostTemplate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that in this template, &lt;code&gt;frontmatter&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; are both props we are passing to this template from out &lt;code&gt;gatsby-node.js&lt;/code&gt; script, which we will setup in the next section. Also &lt;code&gt;&amp;lt;MDXRenderer&amp;gt;&lt;/code&gt; is handling everything related to our rendering. You can control the rendering very granularly if you dig into the configuration, but this is the most basic version that we will need.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-gatsby-node-api"&gt;
  &lt;/a&gt;
  Setting up Gatsby Node API
&lt;/h3&gt;

&lt;p&gt;The next step in setting up a blog is to route our data from GraphQL and render it onto the page. We do this inside &lt;code&gt;gatsby-node.js&lt;/code&gt;. To start create a file in the root of your project called &lt;code&gt;gatsby-node.js&lt;/code&gt; and populate it with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This is the query we will use to fetch data from GraphQL&lt;/span&gt;
  &lt;span class="c1"&gt;// This query will look for markdown files that have `/posts/` in&lt;/span&gt;
  &lt;span class="c1"&gt;// Their absolute path. If you keep your posts in another place you will&lt;/span&gt;
  &lt;span class="c1"&gt;// Need to change this&lt;/span&gt;
  &lt;span class="c1"&gt;// Inside each file we need the title, date, slug and the posts body&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
    query Posts {
      allMdx(filter: { fileAbsolutePath: { regex: "/posts/" } }) {
        edges {
          node {
            id
            frontmatter {
              date
              title
              slug
            }
            body
          }
        }
      }
    }
  `&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


  &lt;span class="c1"&gt;// Check for any errors in the query&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Get the posts and put them into a nice object&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allMdx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;edges&lt;/span&gt;

  &lt;span class="c1"&gt;// Fetch the post template we created in teh previous step&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;template.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Iterate over every post we queried, then for every post call&lt;/span&gt;
  &lt;span class="c1"&gt;// actions.createPage() to build a page with the data and template&lt;/span&gt;
  &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;

    &lt;span class="c1"&gt;// This is the post path. We use a combo of the slug in a string&lt;/span&gt;
    &lt;span class="c1"&gt;// Template prefixed with /post. You can change this to be anything you want&lt;/span&gt;
    &lt;span class="c1"&gt;// So long as the path does not collide with another path&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`/post/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;


    &lt;span class="c1"&gt;// Now we finally create the page&lt;/span&gt;
    &lt;span class="c1"&gt;// We assign every page the path we just created and build it&lt;/span&gt;
    &lt;span class="c1"&gt;// Using our postTemplate component. We also pass in some context about the post&lt;/span&gt;
    &lt;span class="c1"&gt;// Which will be used by the template via pageProps&lt;/span&gt;
    &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postTemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;body&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's quite a lot to unpack in this script, I suggest reading over the comments to try and understand everything that is going on. But this is pretty much it. Now if you run your development server and go to &lt;code&gt;http://localhost:8000/post/first-post&lt;/code&gt;, you should see your post being rendered.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KKFaABkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ifaff6zmhe8v2wi43wq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KKFaABkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ifaff6zmhe8v2wi43wq.png" alt="post rendered"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-post-list"&gt;
  &lt;/a&gt;
  Setting up a Post List
&lt;/h2&gt;

&lt;p&gt;The last step is to setup your home page to display your posts. To do this we will reuse the query we created for our &lt;code&gt;gatsby-node.js&lt;/code&gt; script. Except this time we will be putting it in our &lt;code&gt;index.js&lt;/code&gt; page as a static query. In &lt;code&gt;src/index.js&lt;/code&gt;, add the following code static query&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStaticQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// This query will get all of your posts&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStaticQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="s2"&gt;`
    query {
      allMdx(filter: {fileAbsolutePath: {regex: "/posts/"}}) {
        edges {
          node {
            frontmatter {
              date
              title
              slug
            }
          }
        }
      }
    }
  `&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/** This will render each title out on the page. And lets you click on the link to view the post*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allMdx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`/post/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GsiFLer0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7hn2hhiz111l17zrqec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GsiFLer0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7hn2hhiz111l17zrqec.png" alt="Final Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With that you should now have a functioning Gatsby blog. From here you can now go on to add image support, styling the blog and adding tags. This post was meant to show how you can get a minimum viable blog going in Gatsby.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, check out some of my other posts &lt;a href="https://sunny.gg/post"&gt;on my blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gatsby</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Hello, World ?</title>
      <author>Phu Minh</author>
      <pubDate>Mon, 14 Jun 2021 15:53:29 +0000</pubDate>
      <link>https://dev.to/freakcdev297/hello-world-40op</link>
      <guid>https://dev.to/freakcdev297/hello-world-40op</guid>
      <description>&lt;h2&gt;
  &lt;a href="#first-note"&gt;
  &lt;/a&gt;
  First note
&lt;/h2&gt;

&lt;p&gt;Hello World is probably the most iconic, and foundation to many developers' career. It's easy to implement, and most programmers would often get started with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The project
&lt;/h2&gt;

&lt;p&gt;I want to bring Hello World to next level, by creating a project consists of dozens of Hello World programs written in different languages :)&lt;/p&gt;

&lt;p&gt;It's currently on &lt;a href="https://github.com/nguyenphuminh/HelloWorld"&gt;Github&lt;/a&gt;. By this time, there have already been close to 200 programs. If you like to add a language to the repo, we would LOVE to include it in the list whether it's an esolang, a joke language, a personal toy language, or any others. &lt;/p&gt;

&lt;p&gt;Thanks for your time, hope you'd consider checking it out. Feel free to ask, explore and contribute.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>opensource</category>
      <category>code</category>
    </item>
  </channel>
</rss>
