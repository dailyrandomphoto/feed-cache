<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Game Baking: A One-Game-A-Month Extravaganza!</title>
      <author>Andrew-David J.</author>
      <pubDate>Mon, 19 Apr 2021 01:15:32 +0000</pubDate>
      <link>https://dev.to/andrewdavid/game-baking-a-one-game-a-month-extravaganza-2pno</link>
      <guid>https://dev.to/andrewdavid/game-baking-a-one-game-a-month-extravaganza-2pno</guid>
      <description>&lt;p&gt;Hey all!&lt;/p&gt;

&lt;p&gt;For 2021, I've decided to take on the one-game-a-month challenge.&lt;/p&gt;

&lt;p&gt;"1GAM" is a self-imposed challenge where I have to develop a brand new game every month. And in order to help me achieve that goal each month, I've decided to use random game jams as catalysts. These game jams offer different themes, restrictions, and timelines each month, which motivate me and help me come up with creative new ideas.&lt;/p&gt;

&lt;p&gt;And, in order to keep myself accountable, I've decided to also document each month's game in the form of a video devlog on &lt;a href="https://youtube.com/andrewdavidj"&gt;my YouTube channel&lt;/a&gt;. I've branded the devlog series "&lt;strong&gt;Game Baking with Andrew-David&lt;/strong&gt;"!&lt;/p&gt;

&lt;p&gt;I've produced three videos so far. The first is an introductory episode:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KkmlUwPAww4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And the other two are the first two months' episodes:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aOxiuZ5ea6k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xe4mCrZ8wbo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The three games I've created so far are available to play for free on itch.io and consist of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://andrewdavidj.itch.io/calamixty"&gt;Calamixty&lt;/a&gt;: A chaotic potion-mixing puzzle game!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://andrewdavidj.itch.io/scourge"&gt;An ExSCOURGEon Through Space &amp;amp; Time&lt;/a&gt;: A puzzle adventure game where you control rats by playing tunes on your flute.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://andrewdavidj.itch.io/cans"&gt;You CANS Do It&lt;/a&gt;: A turn-based, tile-based CCG where cans and bottle must do battle!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to participate in the 1GAM challenge as well, you're welcome to do so alongside me &lt;a href="https://andrewdavid.club"&gt;on Discord&lt;/a&gt;! The next game jam I'm participating in is &lt;a href="https://ldjam.com/events/ludum-dare/48"&gt;Ludum Dare 48&lt;/a&gt; on April 23rd, 2021. &lt;/p&gt;

&lt;p&gt;And finally, if you like the series and would like to follow along, subscribe to the channel and feel free to support me &lt;a href="https://patreon.com/andrewdavidj"&gt;on Patreon!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stay tuned for more!&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>unity3d</category>
      <category>challenge</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Unboxing the Qualcomm RB5 Robotics Kit</title>
      <author>Jameson</author>
      <pubDate>Mon, 19 Apr 2021 00:49:49 +0000</pubDate>
      <link>https://dev.to/jameson/unboxing-the-qualcomm-rb5-robotics-kit-4a0l</link>
      <guid>https://dev.to/jameson/unboxing-the-qualcomm-rb5-robotics-kit-4a0l</guid>
      <description>&lt;p&gt;Today I'll be showing some of my very first interactions with a &lt;a href="https://developer.qualcomm.com/qualcomm-robotics-rb5-kit"&gt;Qualcomm RB5 Robotics Kit&lt;/a&gt;. In their words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Qualcomm Robotics RB5 development kit combines the promise of 5G with the computing power for AI, deep learning, computer vision, 7-camera concurrency, rich multimedia and security&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Inside the box, we get three parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The board itself,&lt;/li&gt;
&lt;li&gt;A USB-C cable,&lt;/li&gt;
&lt;li&gt;A power brick.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fVY3dNs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/380130wyh4vl598jy2xw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fVY3dNs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/380130wyh4vl598jy2xw.jpeg" alt="Inside the box, there's the RB5 main board, a USB-C cable, and a power brick"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sBxcoUDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1dpr0bhrt6qb9ru2ae4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBxcoUDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1dpr0bhrt6qb9ru2ae4.jpeg" alt="RB5 main board, USB-C cable, and a power brick"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://developer.qualcomm.com/qualcomm-robotics-rb5-kit/quick-start-guide/qualcomm_robotics_rb5_development_kit_bring_up"&gt;bringup guide&lt;/a&gt; tells us we'll need a Linux workstation, and a few utilities from the &lt;em&gt;Android&lt;/em&gt; SDK: &lt;code&gt;adb&lt;/code&gt; &amp;amp; &lt;code&gt;fastboot&lt;/code&gt;. In short, it looks like a familiar programming model:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build device images on your local machine;&lt;/li&gt;
&lt;li&gt;Deploy and run those images on the device.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'm on a Mac right now, so I won't have access to the full toolset needed to prepare the images. However, I've got a working &lt;code&gt;adb&lt;/code&gt; and &lt;code&gt;fastboot&lt;/code&gt;, so can easily interact with the device. This will likely &lt;em&gt;continue&lt;/em&gt; to be my workflow, even after I get a Linux build host going in EC2.&lt;/p&gt;

&lt;p&gt;Let's get the kit running. I connect the power brick, and then I connect the USB-C cable into my MacBook. After a bit, a green LED indicator lights up on the device:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3X43uOI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfzdq9nqtaah2jzapc6y.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3X43uOI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfzdq9nqtaah2jzapc6y.jpeg" alt="RB5 kit plugged in and powered up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, I'm able to see the device via &lt;code&gt;adb&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;adb devices
&lt;span class="go"&gt;List of devices attached
ZTR10S1600CS    device
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I can even login and probe for some details:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;adb shell
&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The device is running Ubuntu 18.04.05:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;lsb_release &lt;span class="nt"&gt;-a&lt;/span&gt; 
&lt;span class="go"&gt;No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 18.04.5 LTS
Release:    18.04
Codename:   bionic
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The processor has 8 cores:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;nproc&lt;/span&gt; 
&lt;span class="go"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's an &lt;a href="https://en.wikipedia.org/wiki/AArch64"&gt;&lt;code&gt;AArch64&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /proc/cpuinfo | &lt;span class="nb"&gt;grep&lt;/span&gt; ^Processor 
&lt;span class="go"&gt;Processor   : AArch64 Processor rev 14 (aarch64)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; 
&lt;span class="gp"&gt;Linux qrb5165-rb5 4.19.125 #&lt;/span&gt;1 SMP PREEMPT Sat Mar 20 11:48:10 CST 2021 aarch64 aarch64 aarch64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The board has 7650MB of memory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;free &lt;span class="nt"&gt;-m&lt;/span&gt;
&lt;span class="go"&gt;              total        used        free      shared  buff/cache   available
Mem:           7650        1112        6058          12         478        6848
Swap:          3825           0        3825
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few USB devices on the board, an &lt;a href="https://www.digchip.com/datasheets/3291810-ax88179-usb-3-0-to-10-100-1000m.html"&gt;AX88179&lt;/a&gt; ethernet controller, and a couple of USB hubs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;lsusb 
&lt;span class="go"&gt;Bus 002 Device 003: ID 0b95:1790 ASIX Electronics Corp. AX88179 Gigabit Ethernet
Bus 002 Device 002: ID 05e3:0625 Genesys Logic, Inc. 
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 002: ID 05e3:0610 Genesys Logic, Inc. 4-port hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not much on the PCI bus:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;lspci 
&lt;span class="go"&gt;00:00.0 PCI bridge: Qualcomm Device 010b (rev ff)
01:00.0 Unassigned class [ff00]: Qualcomm Device 1101 (rev ff)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lots and lots of partitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mount 
&lt;span class="go"&gt;/dev/sda7 on / type ext4 (rw,relatime)
devtmpfs on /dev type devtmpfs (rw,relatime,size=2671320k,nr_inodes=667830,mode=755)
sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
securityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)
tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev)
devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)
tmpfs on /run type tmpfs (rw,nosuid,nodev,mode=755)
tmpfs on /run/lock type tmpfs (rw,nosuid,nodev,noexec,relatime,size=5120k)
tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,mode=755)
cgroup on /sys/fs/cgroup/unified type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate)
cgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,name=systemd)
cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
cgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls,net_prio)
cgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpu,cpuacct)
cgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)
cgroup on /sys/fs/cgroup/schedtune type cgroup (rw,nosuid,nodev,noexec,relatime,schedtune)
cgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
cgroup on /sys/fs/cgroup/debug type cgroup (rw,nosuid,nodev,noexec,relatime,debug)
mqueue on /dev/mqueue type mqueue (rw,relatime)
debugfs on /sys/kernel/debug type debugfs (rw,relatime)
tmpfs on /var/volatile type tmpfs (rw,relatime)
configfs on /sys/kernel/config type configfs (rw,relatime)
fusectl on /sys/fs/fuse/connections type fusectl (rw,relatime)
/dev/sde9 on /dsp type ext4 (ro,nosuid,nodev,noexec,noatime,discard,noauto_da_alloc,data=ordered)
/dev/sde4 on /firmware type vfat (ro,nodev,noexec,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro)
/dev/sde5 on /bt_firmware type vfat (ro,nodev,noexec,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro)
adb on /dev/usb-ffs/adb type functionfs (rw,relatime)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks like a 128GB storage chip, split apart into different partitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;sh-4.4#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;df&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt;
&lt;span class="go"&gt;Filesystem      Size  Used Avail Use% Mounted on
/dev/root        99G  6.0G   93G   7% /
devtmpfs        2.6G     0  2.6G   0% /dev
tmpfs           3.8G     0  3.8G   0% /dev/shm
tmpfs           3.8G   12M  3.8G   1% /run
tmpfs           5.0M  4.0K  5.0M   1% /run/lock
tmpfs           3.8G     0  3.8G   0% /sys/fs/cgroup
tmpfs           3.8G     0  3.8G   0% /var/volatile
/dev/sde9        59M   24M   34M  42% /dsp
/dev/sde4       395M   61M  335M  16% /firmware
/dev/sde5        64M  368K   64M   1% /bt_firmware
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've found &lt;em&gt;some&lt;/em&gt; of the components in the &lt;a href="https://developer.qualcomm.com/qualcomm-robotics-rb5-kit/hardware-reference-guide"&gt;hardware spec sheet&lt;/a&gt; so far, but just a few. Of particular interest, I'd like to locate some of the coprocessors (the "heterogeneous computing" bit):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Qualcomm Adreno 650 GPU&lt;/li&gt;
&lt;li&gt;Qualcomm Hexagon DSP&lt;/li&gt;
&lt;li&gt;Qualcomm Spectra 480 image processing&lt;/li&gt;
&lt;li&gt;Adreno 665 VPU video encode/decode&lt;/li&gt;
&lt;li&gt;Qualcomm Secure Processing Unit SPU240&lt;/li&gt;
&lt;li&gt;Qualcomm Neural Processing unit NPU230&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In an upcoming article, we'll start trying to exercise some of these components!&lt;/p&gt;

</description>
      <category>qualcomm</category>
      <category>robotics</category>
      <category>hardware</category>
    </item>
    <item>
      <title>Why you should learn Custom CSS?</title>
      <author>Coder Champ</author>
      <pubDate>Mon, 19 Apr 2021 00:29:36 +0000</pubDate>
      <link>https://dev.to/coderchamp/why-you-should-learn-custom-css-3mcb</link>
      <guid>https://dev.to/coderchamp/why-you-should-learn-custom-css-3mcb</guid>
      <description>&lt;p&gt;&lt;strong&gt;Custom CSS&lt;/strong&gt; is not new at all, thousands of web developers are using CSS to style their websites, and when you do not have a designer to create a custom design for your site, you will have to roll up your sleeves and take over the whole design process including writing custom CSS.  &lt;/p&gt;

&lt;p&gt;Some &lt;strong&gt;developers feel writing CSS is a challenging task&lt;/strong&gt;, but they are wrong, with a little practice you can handle CSS with perfection, and when you do it more than once, you will feel comfortable with CSS.&lt;/p&gt;

&lt;p&gt;There are numerous benefits of using custom CSS in blogs or for websites, but many people are not aware of them. This post will help you understand the benefits of custom CSS and how they can help you. &lt;/p&gt;

&lt;p&gt;Custom CSS helps you make improvements to the look and feel of your site without having to rely on third party plugins. It also allows you to make changes to the look and feel of your site quickly, without having to wait for anyone else to make the change for you.&lt;/p&gt;

&lt;p&gt;Before moving forward:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-just-launched-a-brand-new-course-at-udemy-limited-promo-codes"&gt;
  &lt;/a&gt;
  We just launched a brand new course at Udemy (Limited Promo Codes):
&lt;/h2&gt;

&lt;p&gt;It's a practical course. Below are the concepts which you will find in this course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Structure and Project Organizing &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Responsive Website with Media Queries&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better approach to make your CSS flexbox grid&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flexibility, reusability and components &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Utilization of CSS utility classes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Color Management with CSS Variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5 Golden tips to master CSS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS Flexbox button over form technique&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#css-cardio-by-building-a-complete-responsive-website"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/css-cardio-by-building-a-responsive-website-css-flexbox/?couponCode=38E053BFE615CBDE0792"&gt;CSS Cardio by Building a Complete Responsive Website&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Lets continue:&lt;/p&gt;

&lt;p&gt;Frameworks have their own place (They help you to quickly prototype any project) but Custom CSS makes difference.&lt;/p&gt;

&lt;p&gt;Without depending on any framework/library you will be able to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Minimize code files and better speed&lt;/li&gt;
&lt;li&gt;Build your own website with your desired layout&lt;/li&gt;
&lt;li&gt;Create beautiful layouts using CSS&lt;/li&gt;
&lt;li&gt;Create animations by defining your desired values on the fly&lt;/li&gt;
&lt;li&gt;Create responsive layouts with flexbox or grids&lt;/li&gt;
&lt;li&gt;Create powerful navigation menus (Get inspirations from other websites and start implementing)&lt;/li&gt;
&lt;li&gt;Create a custom blog layout (Think out of the box)&lt;/li&gt;
&lt;li&gt;Create a portfolio layout (Will make you shine)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yes, you can learn Web Development From basic to advance level from our brand new YouTube Channel: &lt;a href="https://www.youtube.com/c/CoderChamp/"&gt;Coder Champ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to subscribe channel, Like and share this post.&lt;/p&gt;

&lt;p&gt;Don't forget to follow us back. So, you will never miss any update.&lt;/p&gt;

&lt;p&gt;Good Luck &lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Bake A Python Package Cake🐍+📦=🎂</title>
      <author>sirfuzzalot</author>
      <pubDate>Mon, 19 Apr 2021 00:12:34 +0000</pubDate>
      <link>https://dev.to/sirfuzzalot/how-to-bake-a-python-package-cake-46l5</link>
      <guid>https://dev.to/sirfuzzalot/how-to-bake-a-python-package-cake-46l5</guid>
      <description>&lt;p&gt;Let's bake a package cake 🎂! You will need...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ingredients"&gt;
  &lt;/a&gt;
  Ingredients
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;library or application&lt;/td&gt;
&lt;td&gt;&lt;code&gt;./src/[name of library or application]/[your code]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Your code that does something useful or fun&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pyproject.toml&lt;/td&gt;
&lt;td&gt;&lt;code&gt;./pyproject.toml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Build configuration information&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setup.cfg&lt;/td&gt;
&lt;td&gt;&lt;code&gt;./setup.cfg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Package metadata for PyPI (name of your project, etc.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;README.md or README.rst&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;./README.md&lt;/code&gt; or &lt;code&gt;./README.rst&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Brief docs for your package to display on PyPI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.gitignore&lt;/td&gt;
&lt;td&gt;&lt;code&gt;./.gitignore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Things you don't want in Git, including some build artifacts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LICENSE or LICENSE.txt&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;./LICENSE&lt;/code&gt; or &lt;code&gt;./LICENSE.txt&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Project's license telling others how they can use your work&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setup.py&lt;/td&gt;
&lt;td&gt;&lt;code&gt;./setup.py&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Technically optional, you'll want this so you can better develop locally&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#package-cake-recipe"&gt;
  &lt;/a&gt;
  Package Cake Recipe 📋
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Add one &lt;code&gt;LICENSE&lt;/code&gt; or &lt;code&gt;LICENSE.txt&lt;/code&gt; file. Picking a license can be tough, but there are tools to help like &lt;a href="https://choosealicense.com/"&gt;Choose A License&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MIT License

Copyright (c) 2021 Cake Packaging Foundation.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add one &lt;code&gt;pyproject.toml&lt;/code&gt; file. Unless you're building native code or using an alternative build system (i.e. poetry), you can copy and paste this.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[build-system]&lt;/span&gt;
&lt;span class="py"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"setuptools&amp;gt;=42"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"wheel"&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="py"&gt;build-backend&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"setuptools.build_meta"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add one &lt;code&gt;setup.cfg&lt;/code&gt;. This is where you will specify the information that appears on PyPI and what is essential for your package to work.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# This is essentially a static version of setuptools.setup() and is the
# preferred method of indicating package metadata.
# https://packaging.python.org/guides/distributing-packages-using-setuptools/#setup-args
&lt;/span&gt;
&lt;span class="nn"&gt;[metadata]&lt;/span&gt;
&lt;span class="c"&gt;# A unique name for your package. Search through PyPI for duplicates.
&lt;/span&gt;&lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;packagecake&lt;/span&gt;

&lt;span class="c"&gt;# Here you use SemVer for versioning - https://semver.org/
# You can also get fancy and pull this value from a file
# like so attr: packagecake.__version__
&lt;/span&gt;&lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1.0.0&lt;/span&gt;

&lt;span class="c"&gt;# Your name or the organization's name. You can actually leave out the
# email and PyPI will still accept your package.
&lt;/span&gt;&lt;span class="py"&gt;author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Example Author&lt;/span&gt;
&lt;span class="py"&gt;author_email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;author@example.com&lt;/span&gt;

&lt;span class="c"&gt;# This is your sales pitch, your one-liner, your logline. Make it count
&lt;/span&gt;&lt;span class="py"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Turn your package into a delicious cake in less than 100ms&lt;/span&gt;

&lt;span class="c"&gt;# Set this to the file you want displayed on PyPI.
# content-type can also be text/x-rst, or text/plain
&lt;/span&gt;&lt;span class="py"&gt;long_description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;file: README.md&lt;/span&gt;
&lt;span class="py"&gt;long_description_content_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;text/markdown&lt;/span&gt;

&lt;span class="c"&gt;# This will show in PyPI as your package's Homepage link
&lt;/span&gt;&lt;span class="py"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://github.com/pypa/sampleproject&lt;/span&gt;

&lt;span class="c"&gt;# These links will show up in PyPI under the Homepage link.
# Include at least Tracker.
&lt;/span&gt;&lt;span class="py"&gt;project_urls&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="py"&gt;Tracker&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://github.com/pypa/sampleproject/issues&lt;/span&gt;
    &lt;span class="py"&gt;Documentation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://example.com/docs&lt;/span&gt;
    &lt;span class="py"&gt;Source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://github.com/pypa/sampleproject/&lt;/span&gt;
    &lt;span class="py"&gt;Funding&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://example.com/funding&lt;/span&gt;
    &lt;span class="err"&gt;Custom&lt;/span&gt; &lt;span class="py"&gt;URL&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://example.com/&lt;/span&gt;

&lt;span class="c"&gt;# Classifiers - https://pypi.org/classifiers/
# Make sure to include your license
&lt;/span&gt;&lt;span class="py"&gt;classifiers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="err"&gt;Development&lt;/span&gt; &lt;span class="err"&gt;Status&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;Alpha&lt;/span&gt;
    &lt;span class="err"&gt;Intended&lt;/span&gt; &lt;span class="err"&gt;Audience&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Developers&lt;/span&gt;
    &lt;span class="err"&gt;License&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;OSI&lt;/span&gt; &lt;span class="err"&gt;Approved&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;GNU&lt;/span&gt; &lt;span class="err"&gt;General&lt;/span&gt; &lt;span class="err"&gt;Public&lt;/span&gt; &lt;span class="err"&gt;License&lt;/span&gt; &lt;span class="err"&gt;v3&lt;/span&gt; &lt;span class="err"&gt;(GPLv3)&lt;/span&gt;
    &lt;span class="err"&gt;Programming&lt;/span&gt; &lt;span class="err"&gt;Language&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Python&lt;/span&gt;
    &lt;span class="err"&gt;Programming&lt;/span&gt; &lt;span class="err"&gt;Language&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;
    &lt;span class="err"&gt;Programming&lt;/span&gt; &lt;span class="err"&gt;Language&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Only&lt;/span&gt;
    &lt;span class="err"&gt;Programming&lt;/span&gt; &lt;span class="err"&gt;Language&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;3.8&lt;/span&gt;
    &lt;span class="err"&gt;Programming&lt;/span&gt; &lt;span class="err"&gt;Language&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Python&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;3.9&lt;/span&gt;
    &lt;span class="err"&gt;Operating&lt;/span&gt; &lt;span class="err"&gt;System&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;OS&lt;/span&gt; &lt;span class="err"&gt;Independent&lt;/span&gt;
    &lt;span class="err"&gt;Topic&lt;/span&gt; &lt;span class="err"&gt;::&lt;/span&gt; &lt;span class="err"&gt;Utilities&lt;/span&gt;

&lt;span class="nn"&gt;[options]&lt;/span&gt;
&lt;span class="c"&gt;# Path to our libary/application
&lt;/span&gt;&lt;span class="py"&gt;package_dir&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;src&lt;/span&gt;
&lt;span class="py"&gt;packages&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;find:&lt;/span&gt;

&lt;span class="c"&gt;# Version of Python needed to use the package
&lt;/span&gt;&lt;span class="py"&gt;python_requires&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;gt;=3.8&lt;/span&gt;

&lt;span class="c"&gt;# Our package depends on these other external packages
&lt;/span&gt;&lt;span class="py"&gt;install_requires&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="py"&gt;requests&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;= 2.25.1&lt;/span&gt;

&lt;span class="nn"&gt;[options.packages.find]&lt;/span&gt;
&lt;span class="py"&gt;where&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;src&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add one &lt;code&gt;README.md&lt;/code&gt; or &lt;code&gt;README.rst&lt;/code&gt;. Briefly document your tool, giving users a taste of what they can do with it. Then point to your full length docs with a link. You'll want to save full length docs for another site as PyPI does have some limitations particularly with links to section headers. Alternatively, you can make a file just for PyPI and leave your README nice and detailed for your GitHub repo.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# Package Cake 🎂&lt;/span&gt;

&lt;span class="gs"&gt;**Package Cake**&lt;/span&gt; is a simple utility that takes your package and turns it
into a cake 🍰.

Checkout the &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;documentation&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://example.com/docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.

-&amp;gt; Add installation example here &amp;lt;-

-&amp;gt; Usage example here &amp;lt;-
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add one &lt;code&gt;.gitignore&lt;/code&gt;. You'll want to update your &lt;code&gt;.gitignore&lt;/code&gt; file to exclude some of the build artifacts.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Packaging
dist
build
*.egg-info/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add one &lt;code&gt;setup.py&lt;/code&gt;. While &lt;code&gt;setup.cfg&lt;/code&gt; handles static values, &lt;code&gt;setup.py&lt;/code&gt; is for dynamic metadata. Favor &lt;code&gt;setup.cfg&lt;/code&gt; whenever possible. You will however, want to use &lt;code&gt;setup.py&lt;/code&gt; to help you
test your package locally. Read on to see how you can test.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Python 3.8.0+ Required"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add one library or application. This is why you're publishing and you'll want to put this in a specific spot.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./src/[python package name]
    /__init__.py &amp;lt;- control your package's namespace
    /__main__.py &amp;lt;- optionally allow your package to be invoked from the command line
    /[your modules]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#bake-until-built"&gt;
  &lt;/a&gt;
  Bake Until Built 🔥
&lt;/h2&gt;

&lt;p&gt;Next you're going to build the package into a &lt;strong&gt;wheel&lt;/strong&gt; and a &lt;strong&gt;source archive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;wheel&lt;/strong&gt; is a built distribution. If you have any binaries there will be pre-compiled copies in the wheel. This makes it a much faster process for users to get up and running with your package.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;source archive&lt;/strong&gt; contains the raw source code of the package and let's pip or the user do any compilation locally instead. Wheels are generally preferred in most use cases.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a virtual environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unix/MacOS&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;your project]
python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv venv
&lt;span class="nb"&gt;source &lt;/span&gt;venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Windows&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;venv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;venv&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;\venv\Scripts\activate&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Install and run &lt;strong&gt;build&lt;/strong&gt;. This will generate a &lt;code&gt;./build&lt;/code&gt; and &lt;code&gt;./dist&lt;/code&gt; directory in your project's root, along with creating a &lt;code&gt;.whl&lt;/code&gt; and &lt;code&gt;.tar.gz&lt;/code&gt; distribution package. Finally, you will also see a &lt;code&gt;.egg-info&lt;/code&gt; directory in your &lt;code&gt;./src/[my project]&lt;/code&gt; directory.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;build
python &lt;span class="nt"&gt;-m&lt;/span&gt; build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./build
./dist
    /packagecake-1.0.0-py3-none-any.whl
    /packagecake-1.0.0.tar.gz
./src/[python package name]
    /packagecake.egg-info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#publish-your-package-cake"&gt;
  &lt;/a&gt;
  Publish Your Package Cake 🌐
&lt;/h2&gt;

&lt;p&gt;Now that our package cake is built you'll want to upload it to PyPI. I highly recommend testing your package configuration by first publishing to &lt;a href="https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives"&gt;Test PyPI&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In your virtual environment install &lt;strong&gt;twine&lt;/strong&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;twine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Ensure the version number is properly incremented. You might keep the version number in &lt;code&gt;setup.cfg&lt;/code&gt;, &lt;code&gt;setup.py&lt;/code&gt;, or as &lt;code&gt;__version__&lt;/code&gt; in one of your other files. Make sure they all get updated.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;   &lt;span class="c"&gt;# setup.cfg
&lt;/span&gt;   &lt;span class="nn"&gt;[metadata]&lt;/span&gt;
   &lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;packagecake&lt;/span&gt;
   &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1.0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a &lt;a href="https://pypi.org/account/register/"&gt;PyPI account&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an API token from PyPI. Optionally setup a credentials file to store your API token.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# [user home directory]/.pypirc
&lt;/span&gt;&lt;span class="nn"&gt;[testpypi]&lt;/span&gt;
&lt;span class="py"&gt;username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;__token__&lt;/span&gt;
&lt;span class="py"&gt;password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;my API token&amp;gt;&lt;/span&gt;

&lt;span class="nn"&gt;[pypi]&lt;/span&gt;
&lt;span class="py"&gt;username&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;__token__&lt;/span&gt;
&lt;span class="py"&gt;password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;my API token&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Publish the package
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;twine upload dist/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="c"&gt;# For Test PyPI&lt;/span&gt;
twine upload &lt;span class="nt"&gt;--repository&lt;/span&gt; testpypi dist/&lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#taste-the-package-cake"&gt;
  &lt;/a&gt;
  Taste the Package Cake 🍽️
&lt;/h2&gt;

&lt;p&gt;You'll want to download and test the package now. Let's also look at how you can test before publishing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and Verify the publish.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;packagecake

&lt;span class="c"&gt;# For Test PyPI. No deps is safer, though you can only verify package contents&lt;/span&gt;
pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--index-url&lt;/span&gt; https://test.pypi.org/simple/ &lt;span class="nt"&gt;--no-deps&lt;/span&gt; packagecake
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; import packagecake
🥮

&lt;span class="c"&gt;# or if running from command-line&lt;/span&gt;

python &lt;span class="nt"&gt;-m&lt;/span&gt; packagecake
🍰
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And now what you can do before you publish. This let's you import and run your package as though it was downloaded with &lt;strong&gt;pip&lt;/strong&gt;. It's called an &lt;strong&gt;editable&lt;/strong&gt; package. You can then perform the steps you did above to verify the package.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python &lt;span class="nt"&gt;-m&lt;/span&gt; pip &lt;span class="nb"&gt;install &lt;/span&gt;packagecake &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#my-first-python-package"&gt;
  &lt;/a&gt;
  My First Python Package 🐣
&lt;/h2&gt;

&lt;p&gt;I hope this helps you publish your package. A few quick resources I want to point out that helped me and of course a link to a package I built/baked 😊.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/"&gt;Python Packaging Authority (PyPA) Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/tutorials/packaging-projects/"&gt;PyPA Packaging Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/classifiers/"&gt;PyPI Classifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/glossary/"&gt;PyPA Glossary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://test.pypi.org/"&gt;Test PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pywhoami/"&gt;pywhoami on PyPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sirfuzzalot"&gt;
        sirfuzzalot
      &lt;/a&gt; / &lt;a href="https://github.com/sirfuzzalot/pywhoami"&gt;
        pywhoami
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Simple HTTP Request Analysis Server
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/sirfuzzalot/pywhoami/main/./images/pywhoami-logo.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VqglHWnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sirfuzzalot/pywhoami/main/./images/pywhoami-logo.jpg" width="60%" alt="pywhoami logo"&gt;&lt;/a&gt;
&lt;h1&gt;
A Simple HTTP Request Analysis Server&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/pywhoami" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3fa8c7b4c09e2f6893e0a85585916eb2d9a1b56b05a3f93099b5a48231641d5a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707977686f616d692e737667" alt="PyPI Version"&gt;&lt;/a&gt;
&lt;a href="https://github.com/sirfuzzalot/pywhoami"&gt;&lt;img src="https://camo.githubusercontent.com/ea3560b3aab8ce3e58ca883daacb713d3d137aa81a1f16d223938e5136ede5ce/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d70617373696e672d627269676874677265656e2e737667" alt="Docs"&gt;&lt;/a&gt;
&lt;a href="https://www.gnu.org/licenses/gpl-3.0" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b6758422f85bc2599288b346c7de30c6b7b217112c0a877ae4b25a7009722e4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c76332d626c75652e737667" alt="License: GPL v3"&gt;&lt;/a&gt;
&lt;a href="https://www.python.org/downloads/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/264d515bbffe159b122b3c2dd7ce8ad177a21bc600e0a75dd985aec309e4865d/68747470733a2f2f736869656c64732e696f2f707970692f707976657273696f6e732f707977686f616d69" alt="Python Versions"&gt;&lt;/a&gt;
&lt;a href="https://github.com/psf/black"&gt;&lt;img src="https://camo.githubusercontent.com/d91ed7ac7abbd5a6102cbe988dd8e9ac21bde0a73d97be7603b891ad08ce3479/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667" alt="Code style: black"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Pywhoami is inspired by the &lt;a href="https://github.com/containous/whoami"&gt;whoami&lt;/a&gt;
Go server by &lt;a href="https://traefik.io/" rel="nofollow"&gt;Traefik Labs&lt;/a&gt;. Send a request to one
of the endpoints to get back details from your HTTP request. With
&lt;strong&gt;pywhoami&lt;/strong&gt; you can help answer questions like, what headers were added
to my original request by a proxy server.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/sirfuzzalot/pywhoami/main/#using-the-pypi-package"&gt;Using the PyPI Package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/sirfuzzalot/pywhoami/main/#using-the-docker-image"&gt;Using the Docker Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/sirfuzzalot/pywhoami/main/#http-api-reference"&gt;HTTP API Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/sirfuzzalot/pywhoami/main/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Using the PyPI Package&lt;/h2&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;p&gt;bash&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;python3 -m pip install pywhoami&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;powershell&lt;/p&gt;
&lt;div class="highlight highlight-source-powershell js-code-highlight"&gt;
&lt;pre&gt;py &lt;span class="pl-k"&gt;-&lt;/span&gt;m pip install pywhoami&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Running the Server&lt;/h3&gt;
&lt;p&gt;bash&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; python3 -m pywhoami
[2021-04-17 15:00:25 -0700] [4400] [INFO] Running on http://127.0.0.1:8080 (CTRL + C to quit)&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;powershell&lt;/p&gt;
&lt;div class="highlight highlight-source-powershell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; py &lt;span class="pl-k"&gt;-&lt;/span&gt;m pywhoami
[&lt;span class="pl-c1"&gt;2021&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;04&lt;/span&gt;&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;17&lt;/span&gt; &lt;span class="pl-c1"&gt;15&lt;/span&gt;:&lt;span class="pl-c1"&gt;00&lt;/span&gt;:&lt;span class="pl-c1"&gt;25&lt;/span&gt; &lt;span class="pl-c1"&gt;-0700&lt;/span&gt;] [&lt;span class="pl-c1"&gt;4400&lt;/span&gt;] [&lt;span class="pl-k"&gt;INFO&lt;/span&gt;] Running on http:&lt;span class="pl-k"&gt;//&lt;/span&gt;&lt;span class="pl-c1"&gt;127.0&lt;/span&gt;.&lt;span class="pl-c1"&gt;0.1&lt;/span&gt;:&lt;span class="pl-c1"&gt;8080&lt;/span&gt; (CTRL &lt;span class="pl-k"&gt;+&lt;/span&gt; C to quit)&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Send it a test HTTP request.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/sirfuzzalot/pywhoami"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Cover Photo Credit: &lt;a href="https://unsplash.com/@domonique94"&gt;Domonique Davenport&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>todayilearned</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>PatchNote du 19/04/2021</title>
      <author>Zeldown</author>
      <pubDate>Sun, 18 Apr 2021 22:05:03 +0000</pubDate>
      <link>https://dev.to/paladium-pvp/patchnote-du-19-04-2021-4ddj</link>
      <guid>https://dev.to/paladium-pvp/patchnote-du-19-04-2021-4ddj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btm85JLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a8a47tabegxejc9zx8z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btm85JLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a8a47tabegxejc9zx8z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Bienvenue sur le PatchNote du &lt;strong&gt;lundi 19 avril 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ce lundi 19 avril, Paladium a effectué une mise à jour axée sur la correction des bugs survenus durant la dernière maintenance :&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--29DIgRTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghndh9i7fa3f9s0d70on.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--29DIgRTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghndh9i7fa3f9s0d70on.png" alt="Bugs_Banner_IMG"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#mini-golem-cooldown"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Mini Golem Cooldown&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Durant la précédente maintenance, nous avons ajouté un cooldown de 30 secondes sur les Mini Golems une fois posés. Cependant, après le déploiement de la mise à jour, nous nous sommes rendus compte que les Mini Golems craftés à l'aide d'une Guardian Stone datant d'avant la maintenance n'avaient pas ce temps d'attente. &lt;/p&gt;

&lt;p&gt;En effet, celles-ci ayant un NBT (&lt;em&gt;Named Binary Tag&lt;/em&gt;) plus ancien, elles n'avaient donc pas en mémoire ce temps de chargement et ne l'appliquaient pas une fois le golem apparu. Ceci est désormais corrigé.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Plus d'infos sur les NBT&lt;/em&gt; &lt;a href="https://minecraft.fandom.com/fr/wiki/Format_NBT#:~:text=Le%20format%20Named%20Binary%20Tag,arbre%22%20form%C3%A9%20de%20diff%C3%A9rent%20tags."&gt;ici&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#crash-avec-les-coordinates-jammer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Crash avec les Coordinates Jammer&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Depuis leur arrivée sur le serveur, les Coordinates Jammers pouvaient faire crash tous les joueurs dans un rayon de 100 blocs s’ils étaient posés sur des Solid Airs ou d'autres blocs ayant un rendu particulier.&lt;/p&gt;

&lt;p&gt;Ceci était dû à la tentative de ceux-ci d’adapter leur luminosité aux blocs voisins. Dorénavant, une série de conditions a été ajoutée afin que le jeu ne se ferme plus dans de telles circonstances.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#gain-dexp-avec-les-cobble-breakers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Gain d'exp avec les Cobble Breakers&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Durant la dernière mise à jour de Paladium, nous vous avons apporté la possibilité de récupérer les particules des Cobble Breakers à l'aide d'un Shift Click. &lt;br&gt;
Cependant, nous avons oublié le fait de gagner de l'exp dans le métier de Mineur lors du Shift Click, ceci est désormais chose faite.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#alchimiste-table-denchantement-gui"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Alchimiste Table d'enchantement GUI&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Durant la dernière mise à jour, nous avons apporté des modifications sur l'interface de la Table d'enchantement moddée.&lt;/p&gt;

&lt;p&gt;Cependant, il persistait des soucis de &lt;em&gt;z-index&lt;/em&gt;, c'est à dire, des éléments qui passaient les uns au-dessus des autres.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2UdAqFnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1y87yp3xm40ilejjgoz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2UdAqFnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1y87yp3xm40ilejjgoz.png" alt="Old_Enchant_IMG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ce problème est résolu.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#trade-shift-click"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Trade Shift Click&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Depuis le 15 avril, nous avons donné accès au /trade aux personnes disposant d'un grade sur le serveur. Nous avons alors pris connaissance d'un souci lors de l'utilisation du Shift Click dans le trade.&lt;/p&gt;

&lt;p&gt;En effet, si le joueur de droite durant l'échange utilisait la combinaison shift + click pour mettre un item dans le trade alors l'item essayait d'aller dans l'interface de gauche et disparaissait.&lt;/p&gt;

&lt;p&gt;Ce problème est donc résolu temporairement en ayant désactivé l'action du Shift Click (désolé à tous ceux ayant perdu des items à cause de cela).&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#trade-force-accept"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Trade Force Accept&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Il était possible de forcer l'échange d'un trade en faisant &lt;code&gt;/trade accept&lt;/code&gt; après avoir fait la demande d'échange à un joueur : cela acceptait automatiquement l'échange.&lt;/p&gt;

&lt;p&gt;Désormais, seule la personne recevant la demande d'échange pourra &lt;code&gt;/trade accept&lt;/code&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#superman-sous-la-bedrock"&gt;
  &lt;/a&gt;
  &lt;strong&gt;SuperMan sous la bedrock&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Il était possible d'utiliser l'effet Superman sous la bedrock et ainsi sethome à travers la bedrock dans une base. Cela est dorénavant corrigé.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#jetpack-sous-la-bedrock"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JetPack sous la bedrock&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Il était possible d'utiliser le JetPack sous la bedrock et ainsi sethome à travers la bedrock dans une base. Cela est dorénavant corrigé.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#trade-xp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Trade XP&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Lors d'un échange d'experience durant un Trade, le nombre de niveaux n'était pas équivalent au nombre d'exp.&lt;/p&gt;

&lt;p&gt;Si un joueur niveau 30 mettait "1 niveau", alors un joueur niveau 1 de l'autre côté du trade ne recevait qu’1 niveau, or cela correspond à bien plus d'expérience puisque les niveaux sont exponentiels.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#guardian-golem-health-bar"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Guardian Golem Health Bar&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Lors de la mort d'un Guardian Golem, la barre de vie était toujours affichée. Cela était dû à un oubli de vérification dans le code de l'affichage de la barre de vie.&lt;/p&gt;

&lt;p&gt;Cela est désormais ajouté.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BossStatusGuardian&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;guardian&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEntityAlive&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXK8skjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shu42fl8kaot32bup4yu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXK8skjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shu42fl8kaot32bup4yu.png" alt="Features_Banner_IMG"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ajout-de-chisel"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ajout de chisel&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Nous avions omis de vous l'annoncer durant la dernière maintenance mais le Chisel est de retour avec ses &lt;strong&gt;35 familles&lt;/strong&gt; !&lt;/p&gt;

&lt;p&gt;Voici donc la liste des blocs vous permettant de crafter leurs nombreuses déclinaisons, nous vous laissons la surprise de leurs rendus 😜&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu78H9yi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cju6kvsnirmfwht9o1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu78H9yi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cju6kvsnirmfwht9o1k.png" alt="Chisel_IMG"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Nous avons constaté que le dernier PatchNote vous a plu et nous espérons que vous apprécierez celui-ci tout autant.&lt;/p&gt;

&lt;p&gt;N'hésitez pas à laisser un commentaire ci-dessous, nous vous répondrons avec le plus grand plaisir. &lt;/p&gt;

</description>
      <category>paladium</category>
      <category>news</category>
      <category>minecraft</category>
      <category>french</category>
    </item>
    <item>
      <title>I learned the foundations of UX design from Google and would recommend it to every designer!</title>
      <author>kiro mo</author>
      <pubDate>Sun, 18 Apr 2021 21:36:08 +0000</pubDate>
      <link>https://dev.to/kiromo/i-learned-the-foundations-of-ux-design-from-google-and-would-recommend-it-to-every-designer-5hmd</link>
      <guid>https://dev.to/kiromo/i-learned-the-foundations-of-ux-design-from-google-and-would-recommend-it-to-every-designer-5hmd</guid>
      <description>&lt;p&gt;Two weeks ago I finished my B. A degree at the University of Arts in Berlin as an interface designer and one week ago I decided to learn the Google UX Design Professional Certificate. &lt;a href="https://100daysofux.medium.com/i-started-learning-ux-design-from-google-and-here-are-my-impressions-of-day1-daac886ea74"&gt;This&lt;/a&gt; was my first blog about my first day in the training and my impressions.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RRyMB5B---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://100daysofuxblog.files.wordpress.com/2021/04/2.png%3Fw%3D1024" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RRyMB5B---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://100daysofuxblog.files.wordpress.com/2021/04/2.png%3Fw%3D1024" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want to share with you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what I liked the most&lt;/li&gt;
&lt;li&gt;What I learned&lt;/li&gt;
&lt;li&gt;why I recommend it to others&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What I liked most:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The best part of the course for me where it was about accessibility! That's one thing that so many designers and so many developers don't pay attention to. And I think it's somehow part of the design ethic. You don't design for one group because they are the majority and not pay attention to the others because they are not!&lt;/p&gt;

&lt;p&gt;Designer should do like the bus driver in Berlin. If the driver sees that there is someone who is on chair then he opens the door for him first and then for others! that's how it should be. Let's include everyone and not design things that only affect the majority!&lt;/p&gt;

&lt;p&gt;Elise Roy Accessibility &amp;amp; Inclusive Design Lead at Google said about this, "It should be a normal part of your development process. It shouldn't be an add-on. It should be considered from the beginning."&lt;/p&gt;

&lt;p&gt;What I also really liked in the course, the part where it talks about difference between equity and equality and also the part by Catherine Courage, Vice President of User Experience at Google where it talks about overcoming impostor syndrome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;what did I learn:&lt;br&gt;&lt;/strong&gt;Here is the content, for the course, which is divided into 4 weeks. (I did it all in one week)&lt;/p&gt;

&lt;p&gt;Week 1:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify and compare the disciplines within UX.&lt;/li&gt;
&lt;li&gt;Identify the factors that contribute to a good user experience design&lt;/li&gt;
&lt;li&gt;Review the common tasks of entry-level UX designers&lt;/li&gt;
&lt;li&gt;Review teams that UX designers frequently work with&lt;/li&gt;
&lt;li&gt;Explain how UX design jobs are impacted by company size and industry&lt;/li&gt;
&lt;li&gt;Explore job opportunities after completing the program&lt;/li&gt;
&lt;li&gt;Define the field of UX and explain its importance to consumers and businesses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Week 2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define common terms used in UX design&lt;/li&gt;
&lt;li&gt;Describe user-centered design&lt;/li&gt;
&lt;li&gt;Explain common design frameworks&lt;/li&gt;
&lt;li&gt;Understand equity-focused design&lt;/li&gt;
&lt;li&gt;Describe the importance of accessibility in the design process&lt;/li&gt;
&lt;li&gt;Describe the importance of the Next Billion Users in UX design&lt;/li&gt;
&lt;li&gt;Explain the benefits of using design tools&lt;/li&gt;
&lt;li&gt;Identify common UX design tools&lt;/li&gt;
&lt;li&gt;Explain how UX designers think across platforms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WEEK 3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Describe the phases of a design sprint&lt;/li&gt;
&lt;li&gt;Explain the importance of design sprints&lt;/li&gt;
&lt;li&gt;Plan a design sprint&lt;/li&gt;
&lt;li&gt;Explain the role of an entry-level UX designer during a design sprint&lt;/li&gt;
&lt;li&gt;Describe the importance of retrospectives after design sprints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Week 4:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Describe a UX design portfolio&lt;/li&gt;
&lt;li&gt;Create an online portfolio to showcase UX design work&lt;/li&gt;
&lt;li&gt;Recognize the fundamentals of a good portfolio&lt;/li&gt;
&lt;li&gt;Apply storytelling and branding elements to a UX design portfolio&lt;/li&gt;
&lt;li&gt;Apply proven writing methods to a UX design portfolio&lt;/li&gt;
&lt;li&gt;Explain how to build a professional design presence online&lt;/li&gt;
&lt;li&gt;Create or update professional profiles on social media&lt;/li&gt;
&lt;li&gt;Join and participate in online UX communities&lt;/li&gt;
&lt;li&gt;Explain impostor syndrome and how to overcome it&lt;/li&gt;
&lt;li&gt;Explore strategies for reaching out to potential mentors&lt;/li&gt;
&lt;li&gt;Discuss best practices for building a professional network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Why I recommend it to others:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I find the course very easy to understand, and you can always expand your knowledge by reading from other resources. I'm very satisfied so far, and I'm very excited about the rest.&lt;/p&gt;

&lt;p&gt;I have always read a lot aside the course. Here are articles that I would recommend to others:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://careerfoundry.com/en/blog/ux-design/ux-portfolio-examples-inspiration/"&gt;9 Of The Best UX Design Portfolio Examples From Around The Web&lt;/a&gt;&lt;br&gt;&lt;a href="https://uxplanet.org/what-type-of-designer-are-you-ef5052b67634"&gt;Three ways to know what kind of UX designer you are&lt;/a&gt;&lt;br&gt;&lt;a href="http://How%20to%20Overcome%20Imposter%20Syndrome%20as%20a%20New%20UX%20Designer"&gt;How to Overcome Imposter Syndrome as a New UX Designer&lt;/a&gt;&lt;br&gt;&lt;a href="https://uxplanet.org/my-senior-ux-designer-explains-the-user-centered-desing-process-with-examples-471f55e2658c"&gt;My Senior UX Designer explains the User-Centered Desing Process with examples&lt;/a&gt;&lt;br&gt;&lt;a href="https://www.interaction-design.org/literature/article/8-talks-by-women-to-inspire-ux-designers"&gt;8 Talks by Women to Inspire UX Designers&lt;/a&gt;&lt;br&gt;&lt;br&gt;Here is my certificate that I got today! There are 6 more parts in the training until I finish it, and I keep trying to get it all done in 100 days!&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AU4CgVmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://100daysofuxblog.files.wordpress.com/2021/04/3.png%3Fw%3D1024" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AU4CgVmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://100daysofuxblog.files.wordpress.com/2021/04/3.png%3Fw%3D1024" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>google</category>
    </item>
    <item>
      <title>Creating a Sleek Masonry Gallery with React and WebAssembly</title>
      <author>Remi van der Laan</author>
      <pubDate>Sun, 18 Apr 2021 21:25:35 +0000</pubDate>
      <link>https://dev.to/rvanderlaan/creating-a-sleek-masonry-gallery-with-react-and-webassembly-17p2</link>
      <guid>https://dev.to/rvanderlaan/creating-a-sleek-masonry-gallery-with-react-and-webassembly-17p2</guid>
      <description>&lt;p&gt;Myself and three others have been working on a tool called &lt;a href="https://allusion-app.github.io/"&gt;Allusion&lt;/a&gt; in our spare time: A free image organization application built for artists. It runs in Electron as a ReactJS application.&lt;br&gt;
One of its key components is the image gallery. Since users may import thousands of images, we can't just render them all using pure HTML and CSS. Over the course of the development, we tried out several out-of-the-box ReactJS packages (mainly &lt;a href="https://github.com/bvaughn/react-window"&gt;react-window&lt;/a&gt; and &lt;a href="https://bvaughn.github.io/react-virtualized/#/components/Masonry"&gt;react-virtualized&lt;/a&gt;) but none really suited our needs - be it their design or performance.&lt;br&gt;
In the end, we wrote our own super slick image gallery from scratch. It turned out quite nice, so I wanted to share our findings.&lt;/p&gt;

&lt;p&gt;The requirements we set for ourselves:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep as much as possible off the main UI thread to keep everything snappy&lt;/li&gt;
&lt;li&gt;Keep computation time within a few milliseconds for up to ~10.000 images&lt;/li&gt;
&lt;li&gt;Configurable thumbnail sizes&lt;/li&gt;
&lt;li&gt;Three layout modes: A simple grid, vertical (column) masonry, horizontal (row) masonry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main caveat of our method is that it needs to know image resolutions beforehand, though it could probably be adapted to measure them on the fly too. This is what made the alternatives we tried feel clunky, so we have avoided doing that. Since we store the image dimensions in a database anyways, it's no problem for for our use-case. &lt;/p&gt;

&lt;p&gt;Our gallery is built-up out of three main sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The masonry layout algorithm itself, written in Rust&lt;/li&gt;
&lt;li&gt;The webworker and shared memory between the main thread and WASM&lt;/li&gt;
&lt;li&gt;The virtualized image renderer as a ReactJS component&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#masonry-algorithm-in-webassembly"&gt;
  &lt;/a&gt;
  Masonry algorithm in WebAssembly
&lt;/h1&gt;

&lt;p&gt;Rust was was something I wanted to get into for a while already, and it's a natural fit for WASM modules.&lt;br&gt;
The module is set-up with &lt;a href="https://github.com/rustwasm/wasm-pack"&gt;wasm-pack&lt;/a&gt; which outputs your WASM file along with TypeScript definitions as an easily importable ES6 module.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#transferring-data"&gt;
  &lt;/a&gt;
  Transferring data
&lt;/h2&gt;

&lt;p&gt;To provide the WASM package with the image dimensions it uses as input, we define a vector of &lt;code&gt;Transform&lt;/code&gt; structs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Transform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;src_width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;src_height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We chose to read the output of the layout computation from the same entry, for which we'll need some extra fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Transform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;src_width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// input dimensions (pixels)&lt;/span&gt;
    &lt;span class="n"&gt;src_height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="c"&gt;// output dimensions (pixels)&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c"&gt;// output offset in the layout (pixels)&lt;/span&gt;
    &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then define a &lt;code&gt;Layout&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;num_items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Transform&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;thumbnail_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// the desired output size&lt;/span&gt;
    &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c"&gt;// the amount of pixels in between two images&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Back in JavaScript land, we ask for a pointer to that &lt;code&gt;items&lt;/code&gt; vector in WASM memory, and put our image dimensions in there one by one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Transform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.items&lt;/span&gt;&lt;span class="nf"&gt;.as_ptr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InitOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;masonry/pkg/masonry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WASM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;masonry/pkg/masonry_bg.wasm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items_ptr&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WASM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemsPtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MAX_ITEMS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;computeLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Every item consists of 6 uint16s&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// I'll cover this method next!&lt;/span&gt;
  &lt;span class="c1"&gt;// And now we can do something with the layout!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getItemTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// same order as in Rust&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first, we allocated memory for the transforms anytime the layout is computed, but in practice, the layout is re-computed many times over. To eliminate some overhead, we just reserve a chunk of memory which we use for the lifetime of the module. With just a few megabytes we can support hundreds of thousands of images.&lt;br&gt;
One extra change was necessary: The top offset easily can grow beyond the &lt;code&gt;uint16&lt;/code&gt; of 65,536 pixels. For rows of 4 square images of 200px each, we reach that limit after only 81 rows. That's no good. Therefore, we moved the top offsets to a separate vector of unsigned &lt;code&gt;uint32&lt;/code&gt; values, which will last us over 5 million of such rows.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#layout-algorithms"&gt;
  &lt;/a&gt;
  Layout algorithms
&lt;/h2&gt;

&lt;p&gt;The vertical masonry layout is my personal favourite, so that's the one I'll be covering here. It's quite simple really: We determine the amount of columns that fit within the container width given the desired column width, and then iteratively place the images in the shortest column up to that point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTEp1psO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9po0njun3bhrq0mvfsqj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTEp1psO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9po0njun3bhrq0mvfsqj.gif" alt="Animation of the vertical masonry layout algorithm"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;compute_vertical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container_width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// First: Determine width of each column and initialize each column height at 0 pixels&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;container_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container_width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;n_columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container_width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nn"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.thumbnail_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nf"&gt;.round&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n_columns&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;col_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container_width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;n_columns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.round&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;n_columns&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;item_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col_width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.padding&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c"&gt;// Then loop over all images and place them in the shortest column&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.items&lt;/span&gt;&lt;span class="nf"&gt;.split_at_mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.num_items&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top_offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;current_items&lt;/span&gt;&lt;span class="nf"&gt;.iter_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.top_offsets&lt;/span&gt;&lt;span class="nf"&gt;.iter_mut&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// take into account aspect ratio for the height&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nn"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nn"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.src_width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.round&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;shortest_col_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;
                &lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nf"&gt;.enumerate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nf"&gt;.min_by_key&lt;/span&gt;&lt;span class="p"&gt;(|(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)|&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;.map_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;|(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)|&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shortest_col_index&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;col_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;top_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shortest_col_index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

            &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shortest_col_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nn"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="py"&gt;.height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nn"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.padding&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Return height of longest column&lt;/span&gt;
        &lt;span class="n"&gt;col_heights&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.map_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;Now, is this any good in practice? Well, I implemented the same layout computation function in TypeScript (transpiled down to JavaScript), and measured the performance of both for a gallery of 5000 images in release mode:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M4200hRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7qb6ifq6vyojdfwgqd0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M4200hRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7qb6ifq6vyojdfwgqd0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a solid 0.2ms faster! Yeah... WebAssembly might have been a little overkill for a simple O(1) calculation like this. It might be even worse than the TS equivalent, since we need to put all of the image dimensions in a buffer first. Though, it does pave the way for a more complex layout computation (I'll link to some resources at the end) for which I'm sure it would pay off.&lt;br&gt;
As for the high peaks in the WASM measurements, I'm not completely sure what causes those. I would have expected those to happen for the TS version instead, since Rust doesn't do garbage collection. I couldn't find any weird things happening in the glue code generated by &lt;code&gt;wasm-pack&lt;/code&gt; so I suspect it must be something from the WebAssembly runtime itself.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#webworker-with-shared-memory"&gt;
  &lt;/a&gt;
  WebWorker with shared memory
&lt;/h1&gt;

&lt;p&gt;Even though the computation only takes less than a millisecond on my machine, it might not on low-end devices or under heavy load.&lt;br&gt;
By computing the layout in a WebWorker, it won't interrupt the main UI thread, meaning that the application will stay responsive. &lt;br&gt;
We opted for setting up a WebWorker using &lt;a href="https://github.com/GoogleChromeLabs/comlink"&gt;com-link&lt;/a&gt;, mainly for its ease of use.&lt;br&gt;
We don't want to copy the memory buffer every time a message is sent from the worker. Figuring out how to set up shared memory between the WASM memory in the worker and the main thread was the biggest time sink of this adventure. &lt;br&gt;
At first we sent the buffer as a &lt;a href="https://github.com/GoogleChromeLabs/comlink#comlinktransfervalue-transferables-and-comlinkproxyvalue"&gt;Transferrable&lt;/a&gt; but this stopped working in a recent release of Chrome. Instead, we configure the WASM memory to become a SharedArrayBuffer, which has the same capability. This is not supported out of the box: follow &lt;a href="https://rustwasm.github.io/wasm-bindgen/examples/raytrace.html"&gt;this guide&lt;/a&gt; to learn more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// masonry.worker.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InitOutput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;masonry/pkg/masonry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;WASM&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;InitOutput&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;items&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;initializeLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WASM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./wasm/masonry/pkg/masonry_bg.wasm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemsPtr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sharedArrayBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WASM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__wbindgen_export_0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sharedArrayBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemsPtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MAX_ITEMS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MasonryWorker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// MasonryWorkerAdapter.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorkerClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./masonry.worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorkerAdapter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Remote&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MasonryWorker&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WorkerFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorker&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MasonryWorkerClass&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WorkerFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// And now here in the main thread we can access WASM memory that was initialized in the worker!&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#virtualized-gallery-renderer"&gt;
  &lt;/a&gt;
  Virtualized gallery renderer
&lt;/h1&gt;

&lt;p&gt;The last step is to actually render the images in the layout that is computed. Since this is intended for a ReactJS application, the images are rendered as DOM nodes, but the same layout could also be used to render images in a canvas. &lt;br&gt;
We could just put all images in the DOM since the browser is very good at rendering only whatever visible is in the viewport. We can make it lots faster though, by only putting images that are visible in the viewport in the DOM tree. This is called "virtualized rendering". &lt;br&gt;
Any time the viewport dimensions change, or the user scrolls, or for any similar events, we have to re-evaluate which images to render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VirtualizedRenderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;containerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;VirtualizedRendererProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;viewportRef&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containerHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recompute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;containerWidth&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;containerWidth&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// Find the top and bottom edge of the viewport in the layout (omitted for brevity: we do a binary search)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;startRenderIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endRenderIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;determineViewportRegion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;viewportRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;viewportRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// One div as the scrollable viewport&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onScroll&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleScroll&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;viewportRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* One div for the content */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;containerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;containerHeight&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startRenderIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endRenderIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileListIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;startRenderIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItemLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileListIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
              &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;im&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;im&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Putting it all together, this is what we ended up with (links to a video on Imgur):&lt;br&gt;
&lt;a href="https://i.imgur.com/CALjWCT.mp4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZchRECG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg2kho6fsodndyl9s9tv.png" alt="Demo video"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Computing the masonry layout runs great performance-wise. It's also much smoother while scrolling and more flexible compared to popular packages available on NPM we tried out.&lt;br&gt;
Making use of WebAssembly was not really worth the hassle in the end, since the computation is fairly simple. Though, it was a good scope for a problem to learn some Rust for. Running the computation in a WebWorker makes all the difference though. Use workers, people!&lt;/p&gt;

&lt;p&gt;There are certainly improvements to be made. You could for instance only compute the layout for the relevant section of the viewport you are in. &lt;br&gt;
There are much bigger bottle necks in the code surrounding the layout computation through: It may take dozens of milliseconds to fetch thousands of images from the database and to insert their image resolutions into WASM memory. This could be solved by streaming in data as it is being fetched. For both of these it would add some unnecessary complexity for our current use case, so we're calling it a day at this point!&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://allusion-app.github.io/"&gt;The Allusion homepage&lt;/a&gt; - download it for free!&lt;/li&gt;
&lt;li&gt;The final implementation: &lt;a href="https://github.com/allusion-app/Allusion/blob/master/wasm/masonry/src/lib.rs"&gt;Masonry algorithm in Rust&lt;/a&gt;, &lt;a href="https://github.com/allusion-app/Allusion/blob/master/src/frontend/containers/ContentView/Masonry/masonry.worker.ts"&gt;Webworker&lt;/a&gt;, &lt;a href="https://github.com/allusion-app/Allusion/blob/master/src/frontend/containers/ContentView/Masonry/MasonryRenderer.tsx"&gt;Masonry renderer&lt;/a&gt; which makes use of the &lt;a href="https://github.com/allusion-app/Allusion/blob/master/src/frontend/containers/ContentView/Masonry/VirtualizedRenderer.tsx"&gt;Virtualized renderer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Similar blogpost: &lt;a href="https://medium.com/@danrschlosser/building-the-image-grid-from-google-photos-6a09e193c74a"&gt;Building the Google Photos image grid&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webassembly</category>
      <category>webdev</category>
      <category>rust</category>
    </item>
    <item>
      <title>Crunch Pokemon Data with Python and Deta Base</title>
      <author>Ramki Pitchala</author>
      <pubDate>Sun, 18 Apr 2021 21:09:50 +0000</pubDate>
      <link>https://dev.to/ramko9999/crunch-pokemon-data-with-python-and-deta-base-2p</link>
      <guid>https://dev.to/ramko9999/crunch-pokemon-data-with-python-and-deta-base-2p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#crunch-pokemon-data-with-python-and-deta-base"&gt;
  &lt;/a&gt;
  Crunch Pokemon Data with Python and Deta Base
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setup-and-work-on-a-datastore-faster-than-pikachu"&gt;
  &lt;/a&gt;
  Setup and work on a datastore faster than Pikachu
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6RhuBDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ac2l5Bfc5dK9J3Tox" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6RhuBDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2Ac2l5Bfc5dK9J3Tox" alt="Photo by [Michael Rivera 🇵🇭](https://unsplash.com/@michaelrivera_ph) on [Unsplash](https://unsplash.com/photos/DypO_XgAE4Y)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://python.plainenglish.io/crunch-pokemon-data-with-deta-base-bd9c97d96ad3"&gt;Medium&lt;/a&gt;. If you prefer reading it from there, please do check it out.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Performance is a must when it comes to building software. However, in certain situations, the speed to set up and integrate new services for proof of concept evaluation or infrastructure is overlooked. Specifically, in the realm of databases, there are many options, but I find &lt;a href="https://www.deta.sh/"&gt;Deta&lt;/a&gt; to be most seamless to set up and use. Deta offers Deta Base (I will refer to it as Base), a NoSQL data store optimized for developer simplicity. In this article, I aim to show how to set up a Deta project and interact with your Base to store and manipulate Pokemon data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/139JVKQ8m6GeuQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/139JVKQ8m6GeuQ/giphy.gif" alt="Team Rocket"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s get started!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#agenda"&gt;
  &lt;/a&gt;
  Agenda
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Setup&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CRUD&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Querying&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;To begin, navigate to &lt;a href="https://web.deta.sh/"&gt;Sign Up&lt;/a&gt;, create a new account, and verify your account. Once you sign in, you should be on the following page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5N23vbyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3828/1%2ATgHKkBFeHYKwAqqRvEuaXg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5N23vbyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3828/1%2ATgHKkBFeHYKwAqqRvEuaXg.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the arrow in the top left, we will create a new project from scratch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PEgbd72E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2AO1mNYmNDwpWs8PAHjxTN1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PEgbd72E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2AO1mNYmNDwpWs8PAHjxTN1w.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter a name of your choice and hit create! A popup with your project key and project id will appear. Make sure you save the key!&lt;/p&gt;

&lt;p&gt;With the project key saved, create a new directory, walk into it and run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install flask deta&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/1.1.x/"&gt;Flask&lt;/a&gt; is a web framework that we will use to create endpoints to listen to incoming requests. Based on the requests, we will interact with our remote database using the deta package.&lt;/p&gt;

&lt;p&gt;Here is how the folder structure will look like:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.py

config.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In &lt;code&gt;config.py&lt;/code&gt;, we will store our project key&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;DETA_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR_COPIED_KEY"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our project, we will create a Base called pokemon and utilize it to store, access, and manipulate Pokemon data. Before that, let’s go over the schema for a record in pokemon :&lt;/p&gt;

&lt;p&gt;Each record in a Base must correspond to a unique identifier called key. When we insert a Pokemon record into our Base, we will provide name as our key. As a result, if we needed to get information on Charizard, we just have to ask pokemon to find the associated record with Charizard as its key.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;app.py&lt;/code&gt;, let’s set up the Flask app and our connection to our Base, pokemon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DETA_KEY&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;deta&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Deta&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;json.decoder&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONDecoder&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;deta_project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Deta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DETA_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deta_project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pokemon"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONDecoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the data access and manipulations will occur through &lt;code&gt;db&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our setup is now complete! Onto the CRUD!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crud"&gt;
  &lt;/a&gt;
  CRUD
&lt;/h2&gt;

&lt;p&gt;CRUD is an acronym for creating, reading, updating, and deleting data in a database. We will explore how to perform each of the above operations in our pokemon Base. All the work will be done in &lt;code&gt;app.py&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#insertion"&gt;
  &lt;/a&gt;
  Insertion
&lt;/h3&gt;

&lt;p&gt;Deta provides 2 ways of inserting data. The first is through the &lt;a href="https://docs.deta.sh/docs/base/sdk#put"&gt;&lt;code&gt;put&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;put&lt;/code&gt; is the faster method of insertion. If you call &lt;code&gt;put&lt;/code&gt; on a record that already exists in the base, &lt;code&gt;put&lt;/code&gt; will overwrite the record. In contrast, &lt;a href="https://docs.deta.sh/docs/base/sdk#put"&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt; is 2x slower than &lt;code&gt;put&lt;/code&gt;. In the case that you try to insert into the Base with an already existing key, it will throw an error.&lt;/p&gt;

&lt;p&gt;Let’s create an endpoint to insert a new Pokemon with &lt;code&gt;put&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is what the endpoint would look like using &lt;code&gt;insert&lt;/code&gt; :&lt;/p&gt;

&lt;p&gt;Deta also supports inserting multiple records at the same time with put_many. According to the documentation, it is possible to insert at most 25 items into the Base in a single call (&lt;a href="https://docs.deta.sh/docs/base/sdk#put-many"&gt;Deta Base SDK&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let’s test out what we have so far. Let’s insert the data for Pichu into the Base via an HTTP POST through &lt;code&gt;/pokemon&lt;/code&gt; on Postman.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lfgY7ABK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2688/1%2AjXuk1uvzHgw_Oc54okwsqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lfgY7ABK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2688/1%2AjXuk1uvzHgw_Oc54okwsqg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you hit send, navigate back to &lt;a href="https://web.deta.sh/home/Ramko9999/default"&gt;Deta&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_OK-bSmu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3822/1%2AkelCdjWliRDu4ORQ2KUJSw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_OK-bSmu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3822/1%2AkelCdjWliRDu4ORQ2KUJSw.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on your Base under the &lt;strong&gt;Bases&lt;/strong&gt; section. You will now be able to view the data in your Base.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSMpSFpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2988/1%2AsaJ77wMEGlkTT5rq2vl_fw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSMpSFpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2988/1%2AsaJ77wMEGlkTT5rq2vl_fw.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Pichu is in our pokemon Base!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#access"&gt;
  &lt;/a&gt;
  Access
&lt;/h3&gt;

&lt;p&gt;We can use the &lt;a href="https://docs.deta.sh/docs/base/sdk/#get"&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; method to access the record of a given key.&lt;/p&gt;

&lt;p&gt;Since our Pokemon name is the key, we can directly access its record by providing its name. We can test it with the following GET request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4i0s_CrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2686/1%2A97_qFgHmoKagFg7Dtknp0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4i0s_CrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2686/1%2A97_qFgHmoKagFg7Dtknp0w.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updation"&gt;
  &lt;/a&gt;
  Updation
&lt;/h3&gt;

&lt;p&gt;As stated previously in &lt;strong&gt;Insertion&lt;/strong&gt;, the &lt;code&gt;put&lt;/code&gt; function can be used for overwriting records. However, &lt;code&gt;put&lt;/code&gt; completely overwrites the record and can remove prior fields that are not part of the new updates. As result, if we want to partially update the record, we can use the &lt;a href="https://docs.deta.sh/docs/base/sdk#update"&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; function. In fact, &lt;code&gt;update&lt;/code&gt; also allows for fine-grained updations like incrementing values and appending, prepending, and removing elements in a list (&lt;a href="https://docs.deta.sh/docs/base/sdk#update"&gt;Deta Base SDK&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let’s make sure updating works with an example. First, I will insert the following data for Charizard.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"region"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Johto"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# Charizard is from Kanto region
&lt;/span&gt;        &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Charizard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"height"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"weight"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;90.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Fire"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;# Charizard also Flying type
&lt;/span&gt;        &lt;span class="s"&gt;"evolution"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;region&lt;/code&gt; should be Kanto, and Charizard is also a flying type. Let’s update Charizard with a POST request to &lt;code&gt;/pokemon/update/Charizard&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HhKG9K0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2682/1%2A2Os_Wp85latc_fOM2FQ0Lg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HhKG9K0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2682/1%2A2Os_Wp85latc_fOM2FQ0Lg.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a GET request to &lt;code&gt;/pokemon/Charizard&lt;/code&gt;, it is clear that &lt;code&gt;region&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are updated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XSFRDtMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2710/1%2Amm-besOPWb3zpVmVk2NjhA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XSFRDtMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2710/1%2Amm-besOPWb3zpVmVk2NjhA.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deletion"&gt;
  &lt;/a&gt;
  Deletion
&lt;/h3&gt;

&lt;p&gt;Deta provides &lt;a href="https://docs.deta.sh/docs/base/sdk#delete"&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;, a function that takes in a key and deletes the record associated with the key.&lt;/p&gt;

&lt;p&gt;If I wanted to delete Charizard, I would make an HTTP DELETE request to &lt;code&gt;/pokemon/delete/Charizard&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have now explored how to insert, access, update and delete from our Base. Let’s learn how to query our Base.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying"&gt;
  &lt;/a&gt;
  Querying
&lt;/h2&gt;

&lt;p&gt;Prior to querying, make sure to fill up your Base with some more Pokemon.&lt;/p&gt;

&lt;p&gt;Querying is done through the &lt;a href="https://docs.deta.sh/docs/base/sdk#fetch"&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt; method. To elaborate, fetch takes in a &lt;a href="https://docs.deta.sh/docs/base/sdk/#queries"&gt;query&lt;/a&gt; or a list of queries and accumulates a list of records whose fields match the query or queries.&lt;/p&gt;

&lt;p&gt;A query is nothing more than a dictionary where the mapping between the keys and values represents the query condition. For instance, suppose I wanted to get Blastoise’s record with a query instead of &lt;code&gt;get&lt;/code&gt;, here is how it would work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Blastoise"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;blastoise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We accumulate all the records with &lt;code&gt;name&lt;/code&gt; equal to Blastoise.&lt;/p&gt;

&lt;p&gt;It is also possible to query based on inequalities. For instance, we can query for all Pokemon that weigh greater than 100kg and are less than 1 meter tall.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"weight?gt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"height?lt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can append “?gt” and “?lt” at the end of numerical fields to query for records with respective values greater than or less than a threshold. There are a lot more suffixes that can be added to the end of a query field, so I recommend reading the documentation for your specific use case (&lt;a href="https://docs.deta.sh/docs/base/sdk/#queries"&gt;Deta Base SDK&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let’s create an endpoint that will return Pokemon which are of a parameter type.&lt;/p&gt;



&lt;p&gt;“?contains” checks if a provided query element exists in the list associated with the field. To provide an example, if I wanted all the fire-type Pokemon, I would send a GET request to &lt;code&gt;/pokemon/type/Fire&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There are 13 Pokemon returned from the above request.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a little overwhelming since this query will return all the fire-type Pokemon in our Base. Deta also provides us with the ability to limit the number of query results with &lt;a href="https://docs.deta.sh/docs/base/sdk/#example-using-buffer-pages-1"&gt;buffer&lt;/a&gt;. Let’s set the buffer arg in fetch to 2.&lt;/p&gt;

&lt;p&gt;Now, we only get two records back.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--25p6vM9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2692/1%2AZ-BgZLjSFIdWVceL8tqY-Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--25p6vM9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2692/1%2AZ-BgZLjSFIdWVceL8tqY-Q.png" alt="Photo by Author"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, by changing the &lt;code&gt;pages&lt;/code&gt; argument in &lt;code&gt;fetch&lt;/code&gt;, it is possible to spread the result data over multiple pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;My primary goal with this writing was to shed greater light on a database that you can set up and work on in the blink of an eye. It took hardly much time to create the project and based on the above examples, CRUD and Querying are as simple as they can get. For these reasons, Deta Base is perfect for proof of concepts, serverless applications, hackathons, and many more situations and projects that require simplicity and speed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.deta.sh/"&gt;&lt;strong&gt;Deta (Home):&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/1.1.x/"&gt;&lt;strong&gt;Flask:&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.deta.sh/docs/base/sdk"&gt;&lt;strong&gt;Deta SDK:&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bulbapedia.bulbagarden.net/wiki/Main_Page"&gt;&lt;strong&gt;Bulbapedia:&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>database</category>
      <category>python</category>
    </item>
    <item>
      <title>21 Popular JavaScript Libraries Every Web Developer Should Know</title>
      <author>Kingsley Ubah</author>
      <pubDate>Sun, 18 Apr 2021 21:08:57 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/21-popular-javascript-libraries-every-web-developer-should-know-5746</link>
      <guid>https://dev.to/ubahthebuilder/21-popular-javascript-libraries-every-web-developer-should-know-5746</guid>
      <description>&lt;p&gt;The JavaScript ecosystem is huge and keeps fostering. Tons of libraries, frameworks and tools are being coded up and deployed in projects to make dynamic websites. While some are fizzling in demand and use, others are growing more popular.&lt;/p&gt;

&lt;p&gt;Below are 21 libraries/frameworks all JavaScript developers consider for their project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ANGULAR JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Us5bQYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy3o67imxmhk3vhsro48.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Us5bQYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy3o67imxmhk3vhsro48.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://angularjs.org/"&gt;Angular&lt;/a&gt;  is one of the oldest JavaScript libraries till date. Wait, Angular is actually a Framework, not a Library. It allows you create single-paged, client-side web applications. Angular is written in TypeScript and backed by Google.&lt;br&gt;
Some of the popular companies who use Angular are Google (obviously), PayPal and iTunes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VUE JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wiwk51p9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6fm2640x1czbmql4uta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wiwk51p9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6fm2640x1czbmql4uta.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very similar to React,  &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;  is a front-end framework used to create single-paged applications with the popular component-based architecture. The upside with using Vue is that you write smaller amount to code compared to other UI libraries. Vue JS is growing stronger by the day, and is getting adopted at a quick rate.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UNDERSCORE JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lKQBT_-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9taytn1v7noffxrzllna.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lKQBT_-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9taytn1v7noffxrzllna.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://underscorejs.org/"&gt;Underscore&lt;/a&gt;  is a lower level JavaScript library. Lower level in that it’s very close to vanilla JavaScript. All it does is provide you with some helpers and tools to create web applications faster.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BABYLON JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUpfGGQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um4jtiiq8jhtsrt1o1y3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUpfGGQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um4jtiiq8jhtsrt1o1y3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have a confession to make; I really love the name of this particular library. &lt;br&gt;
For the game developers, this name might not be a new one.  &lt;a href="//babylonjs.com"&gt;Babylon&lt;/a&gt;  is a full fledged 3D video game engine for creating complex and web-based 3D Video games.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REACT &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvl36uAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldlmp7oaymphh0rqclf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvl36uAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldlmp7oaymphh0rqclf1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is probably the one you were all waiting for.  &lt;a href="https://facebook.github.io/react/"&gt;React&lt;/a&gt;  is one of the most popular JavaScript library in existence. You see those similar and cool looking buttons, or perhaps those nice looking navigation bars, or some cool modals you just can’t stop marvelling at?&lt;br&gt;
Chances are they were all made with React. React is a component-based UI library which allows you create reusable UI elements (components) for your website.  It is used by many companies, including Facebook, of course.&lt;/p&gt;

&lt;p&gt;For those of you looking to learn React, &lt;a href="https://gumroad.com/a/834147443"&gt;HTML to React&lt;/a&gt; is a brilliant course to go from knowing just HTML to knowing React.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EMBER&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUB3tEfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9c3jdxlf87uob13e5sm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUB3tEfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9c3jdxlf87uob13e5sm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emberjs.com/"&gt;Ember&lt;/a&gt;  is a powerful JavaScript framework which helps developer to create websites without having to worry about the nitty-gritty of the process.&lt;br&gt;
It includes everything you need to create rich UIs and combine them to form a powerful and highly scalable website.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BACKBONE JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kUFwp7Uz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxi71juwppnisfxz0tls.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kUFwp7Uz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxi71juwppnisfxz0tls.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another cool name!&lt;br&gt;
 &lt;a href="s&amp;lt;br&amp;gt;%0Ahttp://backbonejs.org/"&gt;Backbone.js&lt;/a&gt;  is a very simple and straightforward JavaScript library and framework. Its biggest distinguishing feature is the fact that it can fit within a single JavaScript file. Backbone is a great option for those looking to build simple websites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CLIPBOARD JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uztpPzun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ivkt0azu4zyzrh8qabk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uztpPzun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ivkt0azu4zyzrh8qabk.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As its name already implies,  &lt;a href="https://clipboardjs.com/"&gt;Clipboard&lt;/a&gt;  allows you copy data from your site right off the bat! No need to install any additional dependency. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BABEL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xnt3kqRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oosdzem1c08l7lwwhl4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xnt3kqRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oosdzem1c08l7lwwhl4k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of us may be already be aware of the story of the tower of Babel in the bible. Creating a language division amongst the builders to cut of communication and create discordance. &lt;br&gt;
Well this tool is the solution to that problem, in the context of JavaScript. When creating code, browser compatibility is open an issue to consider. Older web browsers tend to be dropped in favour of newer ones, but not all users update. There are still machines and devices out there that are running old versions of web browsers.&lt;br&gt;
Babel is a JavaScript compiler which compiles your JS code to ES5 compliant nature. This means your code can run on new browsers such as Edge as well as older ones, such as IE 9.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SVELTE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjMJcYfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr6ayiac91wfogkk7m8x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjMJcYfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vr6ayiac91wfogkk7m8x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Svelte is a complete new approach to building user interfaces. While traditional frameworks like React and Vue are browser based, Svelte shifts that work into a compile step that happens when you build your app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LETTERING JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k3UvFBSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9g0fjy3o4d37yjqwe2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k3UvFBSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9g0fjy3o4d37yjqwe2p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://letteringjs.com/"&gt;Lettering&lt;/a&gt;  is an interesting JavaScript library for texts. You can style and layout individual texts on your page, including implementing some cool transitions and animations. Lettering JS is a jQuery plug-in. Hence, it requires jQuery to work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CHARTIST JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IcRlh5lL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ie8xb5rifpgfr2j66z8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IcRlh5lL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ie8xb5rifpgfr2j66z8e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ah, here is something for the data analysts!&lt;/em&gt;&lt;br&gt;
 &lt;a href="http://gionkunz.github.io/chartist-js/"&gt;Chartist&lt;/a&gt;  is a nice JavaScript library for creating simple, responsive and customizable charts for your website. Chartist uses SVG to render them; hence, your charts can also obey custom CSS rules.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DROPZONE JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X8UVUQZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojvoa77etqz95jkwxacd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X8UVUQZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojvoa77etqz95jkwxacd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.dropzonejs.com/"&gt;Dropzone&lt;/a&gt;  allows you implement “drag and drop” features on your website. It is also highly customizable with custom code. It’s lightweight, doesn’t depend on any other library (like jQuery). &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;THREE JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFR01VFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs9vmy6nmj1ssxl3wupt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFR01VFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs9vmy6nmj1ssxl3wupt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Aha! Something to make some cool, eye-catching stuff.&lt;/em&gt;&lt;br&gt;
 &lt;a href="https://threejs.org/"&gt;Three js&lt;/a&gt;  is an immensely popular JavaScript 3D library for creating visual effects on your website. It is a great option for those looking to create 3D visualizations without the need for heavy-duty game engines.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jQUERY&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mV9B2xPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9m3itbrjnmn0h0smzo70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mV9B2xPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9m3itbrjnmn0h0smzo70.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jquery.com/"&gt;jQuery&lt;/a&gt;  is one of the oldest yet most popular JavaScript libraries still in existence. You’ve probably already heard of the DOM, which stands for Document Object Model. jQuery is perfect and quite reputed for manipulating the DOM. You can also dothings like  HTML events, animations and effects, CSS manipulation, and AJAX calls. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LODASH&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WZBJ4bne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kblqxhradrsamy8k4d4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WZBJ4bne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kblqxhradrsamy8k4d4x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you think of this library, you think of utilities.  &lt;a href="https://lodash.com/"&gt;Lodash&lt;/a&gt;  is an immensely useful library which contains and provides utility functions which you call into your code to perform a specific task. Saving your time you would have wasted in writing it yourself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PIXI JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHEevDu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgn4qzhnvkykzy3olr8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHEevDu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgn4qzhnvkykzy3olr8o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Named after the popular movie animation studio Pixar,  &lt;a href="https://www.pixijs.com/"&gt;Pixi&lt;/a&gt;  is an open source 2D engine used to create beautify, eye-catching animations on your website. Pixi uses WebGL, and uses HTML canvas if the former is not supported.&lt;br&gt;
PixiJS is made of multiple consumable components that can be installed in your project with NPM/Yarn&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;D3 JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQree49G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsl4q9wdjx5dt3k4nqia.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQree49G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsl4q9wdjx5dt3k4nqia.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://d3js.org/"&gt;D3.js&lt;/a&gt;  is a JavaScript library for manipulating documents based on the nature of data received.&lt;br&gt;
It stands for “Data Driven Documents”, which kind of explains its task. The library uses pre-built functions to select DOM elements, create SVG objects, style them and add transitions and other effects. These objects can also be styled using pure CSS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SOCKET.IO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-QfHo5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4w39wc2zuv9fq1pue54.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-QfHo5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4w39wc2zuv9fq1pue54.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should know that by default, the connection between the browser and web server is closed once the server responds with data. So how do you keep the connection open so data can seamlessly flow bi-directionally without having to make new requests in the process?&lt;br&gt;
Socket.io, based on web sockets, is a JavaScript libabry which enables event-based two-way communication between the browser and the web server. It utilizes a node.js server.&lt;br&gt;
&lt;a href="https://socket.io/"&gt;https://socket.io/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MATH JAX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lfyMiqoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/321zbut9fny7bt182l34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lfyMiqoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/321zbut9fny7bt182l34.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ah, good old maths.&lt;/em&gt;&lt;br&gt;
As its name suggests,  &lt;a href="https://www.mathjax.org/"&gt;MathJAX&lt;/a&gt;  simply allows you to include mathematics in your pages. This includes special math notations and symbols. MathJax automatically formats the mathematical symbols and equations that you enter in HTML and problem components using LaTeX notation into beautiful math. A MathJax equation can appear with other text in the paragraph (inline) or on its own dedicated line (block).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MODERNIZR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gwVWe92l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r7lli7bg4gxatinm82d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwVWe92l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r7lli7bg4gxatinm82d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://modernizr.com/"&gt;Modernizr&lt;/a&gt;  is a libary of tests. Features like CSS transform, web sockets, CSS transitions and animations can be tested on the browser using special properties from Modernizr. &lt;br&gt;
There are over 260 features which can be tested using this utility.&lt;/p&gt;

&lt;p&gt;Which of these are your favourite? Let me know in the comments.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P/S&lt;/em&gt;: I recently launched my Web Development Beginners Guide eBook for Absolute Beginners. Check it out here - &lt;a href="https://gumroad.com/l/WebDevBeginners"&gt;Web Development - The Beginners Guide&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My Top 5 Methods To Develop UIs Faster in ReactJS</title>
      <author>Abdul Basit</author>
      <pubDate>Sun, 18 Apr 2021 20:52:55 +0000</pubDate>
      <link>https://dev.to/abdulbasit313/my-top-5-methods-to-develop-uis-faster-in-reactjs-4blg</link>
      <guid>https://dev.to/abdulbasit313/my-top-5-methods-to-develop-uis-faster-in-reactjs-4blg</guid>
      <description>&lt;p&gt;In an IT setup when a team comes up with a product idea, the first thing they do is the paperwork. Yes, they go through some documentation like feasibility reports, use cases, offering features, market research, and other related aspects of it.&lt;/p&gt;

&lt;p&gt;After all the documentation stuff is done, they ask designers to design the application’s UI. As soon as the design is ready, frontend developers are asked to develop the UI of the app while the backend developer works on its APIs.&lt;/p&gt;

&lt;p&gt;So being a frontend developer, let me walk you through the top 5 methods that I keep in mind and personally follow them to build UIs faster in ReactJS app, it may include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Method#1 Analyze The Design&lt;/li&gt;
&lt;li&gt;Method#2 Build Site Data&lt;/li&gt;
&lt;li&gt;Method#3 Set State&lt;/li&gt;
&lt;li&gt;Method#4 Integrate ESLint&lt;/li&gt;
&lt;li&gt;Method#5 Integrate Storybook&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#method1-analyze-the-design-understand-the-designing-stuff"&gt;
  &lt;/a&gt;
  Method#1: Analyze The Design, Understand The Designing Stuff
&lt;/h2&gt;

&lt;p&gt;In this method, you have to analyze the design and think of various patterns to build the app’s UI. I spend at least 30 minutes analyzing and think of different strategies and patterns I can apply. I analyze the design based on three things, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Searching For Wrappers&lt;/strong&gt; - What do I mean by wrapper here? &lt;em&gt;Wrapper&lt;/em&gt; is something that takes &lt;code&gt;children&lt;/code&gt; as &lt;code&gt;props&lt;/code&gt;. Let's say if we have a &lt;em&gt;modal&lt;/em&gt; on 3 three different places in our app that has the same design for &lt;em&gt;title&lt;/em&gt;, &lt;em&gt;close icon&lt;/em&gt; and &lt;em&gt;margin&lt;/em&gt;, &lt;em&gt;paddings&lt;/em&gt;.
For that, I will make a &lt;code&gt;ModalWrapper&lt;/code&gt; component. Similarly, we can make a wrapper for cards.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me walk you through one more example.&lt;/p&gt;

&lt;p&gt;Let's say we have the same header and footer on each screen, so we make a layout wrapper something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../Footer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../Header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Footer&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Reusable Components&lt;/strong&gt; - My second step is, I try to note down what I can reuse in my application. For example, &lt;em&gt;buttons&lt;/em&gt;, &lt;em&gt;input&lt;/em&gt; with &lt;em&gt;labels&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt;, etc. The main idea of noting down all the reusable components is to create consistency and save time by not writing the same line of code again and again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reusable components are one that changes via &lt;code&gt;props&lt;/code&gt;. (Wrappers are also reusable components but it takes children so l call it wrapper)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Understanding The Grid System&lt;/strong&gt; - Designers build site using a grid. It will help us to make site responsive easily when it comes to smaller devices. Understanding the grid system is really
important for responsiveness.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to make site responsive, we use &lt;em&gt;flex&lt;/em&gt;, &lt;em&gt;grid&lt;/em&gt;, or &lt;em&gt;width in percentages&lt;/em&gt; for responsiveness depends on the scenario.&lt;/p&gt;

&lt;p&gt;This is the only method that is going to take much of our time among all other methods. But, there is a reason for it. It sets the roadmap throughout the app and helps us structure our code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method2-build-site-data-use-the-dummy-data"&gt;
  &lt;/a&gt;
  Method#2: Build Site Data, Use The Dummy Data
&lt;/h2&gt;

&lt;p&gt;While building &lt;code&gt;UIs&lt;/code&gt; we often come across a list of &lt;code&gt;data&lt;/code&gt;, since we don't have &lt;code&gt;APIs&lt;/code&gt; ready, so in order to keep the process smooth and fast, I create the &lt;em&gt;dummy data&lt;/em&gt; and &lt;code&gt;map&lt;/code&gt; it, where needed. And also, put it in a new folder created by the name &lt;strong&gt;site-data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When we will be integrating APIs, we will be deleting folders inside &lt;code&gt;site-data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But how you are gonna manage the &lt;strong&gt;site-data&lt;/strong&gt;, it’s totally up to your choice!&lt;/p&gt;

&lt;p&gt;Below is the snippet of how I build the &lt;em&gt;site data&lt;/em&gt; folder for an example data (on the left) that I often encounter practically when designing the UIs:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SaLwhunm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb9tmkqv5tcaqh3hfp8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SaLwhunm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb9tmkqv5tcaqh3hfp8u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create an object there something like this and export it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;employess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Phone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234567&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234567&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;....&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;employess&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This practice helps you to make your components clean and having a light version of CMS (if you like) for your app that can be easily managed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method3-set-the-state-dealing-with-overtime-data-changes"&gt;
  &lt;/a&gt;
  Method#3: Set The State, Dealing With Overtime Data Changes
&lt;/h2&gt;

&lt;p&gt;So whenever you come across a part of the design of an app that has to be interactive, especially using forms, checkboxes, dropdown, etc. Always try to set up a state for them to get the changed data from the users.&lt;/p&gt;

&lt;p&gt;In the case of &lt;code&gt;forms&lt;/code&gt;, I use &lt;code&gt;console.log&lt;/code&gt; for all the &lt;em&gt;form's values input&lt;/em&gt; on the &lt;code&gt;submit&lt;/code&gt; button. It has been really super helpful and fast when I have to integrate the APIs.&lt;/p&gt;

&lt;p&gt;Here is the example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userProfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserProfile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;oldPassword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;newPassword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;
    &lt;span class="nx"&gt;setUserProfile&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;userProfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSaveProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userProfile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userProfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userProfile&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#method4-integrate-eslint-consistency-is-the-key"&gt;
  &lt;/a&gt;
  Method#4: Integrate ESlint, Consistency Is The Key
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Eslint&lt;/em&gt; really helps us to make our code consistent. They don't let us have unused &lt;code&gt;imports&lt;/code&gt; or &lt;code&gt;variables&lt;/code&gt; and force us to follow consistency all over the app. If single quotes then we have to use single quotes all over the app for &lt;em&gt;Javascript&lt;/em&gt; and double quotes for &lt;em&gt;attributes&lt;/em&gt; like &lt;code&gt;className&lt;/code&gt; and &lt;code&gt;props&lt;/code&gt; etc. &lt;/p&gt;

&lt;p&gt;Most of the time, I use the &lt;em&gt;Airbnb ESlint&lt;/em&gt; code convention to reduce the number of errors on the spot while saving a lot of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method5-integrate-storybook-fast-visual-testings"&gt;
  &lt;/a&gt;
  Method#5: Integrate Storybook, Fast Visual Testings
&lt;/h2&gt;

&lt;p&gt;Storybook is great when we are building themes. It helps us build and test our component in isolation, by changing its props and responsiveness. It can serve other purposes as well, such as maintaining a component library, series of same designed components, sharing it within the team to get feedback, and so on.&lt;/p&gt;

&lt;p&gt;When to use Storybook?&lt;/p&gt;

&lt;p&gt;It really depends on requirements and kind of project we are working on. I don't use storybook for small apps or landing pages that consist of couple of screens.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-sum-up"&gt;
  &lt;/a&gt;
  To Sum Up…
&lt;/h3&gt;

&lt;p&gt;Each of these methods has been practically implemented by myself and has been proven useful to build the UIs faster in ReactJS.&lt;/p&gt;

&lt;p&gt;I hope this article will help you to build UIs in ReactJS. If my experience and knowledge that I’ve shared helped you in any way, please comment below.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Manage Multiple SSH Key Pairs</title>
      <author>Joseph Midura</author>
      <pubDate>Sun, 18 Apr 2021 20:49:28 +0000</pubDate>
      <link>https://dev.to/josephmidura/how-to-manage-multiple-ssh-key-pairs-1ik</link>
      <guid>https://dev.to/josephmidura/how-to-manage-multiple-ssh-key-pairs-1ik</guid>
      <description>&lt;p&gt;I recently overheard someone say that he uses the same SSH key for all of his accounts, which is a bad idea from a security perspective. Additionally, Bitbucket &lt;a href="https://support.atlassian.com/bitbucket-cloud/docs/set-up-an-ssh-key/"&gt;recommends&lt;/a&gt; users replace their SSH keys once a year for security. Following these steps will ensure that you can. &lt;/p&gt;

&lt;p&gt;When I initially started managing multiple SSH key/password combinations on my personal machine, I learned best practices from a variety of sources. I’m writing this information down in one place for the benefit of others. My current OS of choice is MacOS, but these instructions should work for any *nix system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first"&gt;
  &lt;/a&gt;
  First
&lt;/h3&gt;

&lt;p&gt;Open terminal and navigate to ~/.ssh to generate a new SSH key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-keygen -t rsa -f key_name -b 4096
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is what each flag means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-t specifies the algorithm that makes the key. &lt;/li&gt;
&lt;li&gt;-f specifies a custom name for the key (assuming you're in the ~/.ssh directory), and an alternate location if it’s in the form of a path. &lt;/li&gt;
&lt;li&gt;personal_key is the name of the key. Make this as specific as possible.&lt;/li&gt;
&lt;li&gt;-b specifies how many bits long the key will be. Bitbucket's current documentation recommends 2048 bits, but I recommend 4096 as RSA will soon be replaced by the &lt;a href="https://ianix.com/pub/ed25519-deployment.html"&gt;ed25519&lt;/a&gt; public key algorithm.
I always use a key name that is specific and makes sense to me. This makes key management easier in the long term.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should use a passphrase when prompted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second"&gt;
  &lt;/a&gt;
  Second
&lt;/h3&gt;

&lt;p&gt;When you complete the first step two files are created: key_name and key_name.pub. The first is your private key and the second (with the .pub extension) is your public key. &lt;br&gt;
Create a known_hosts file for each account you have because it makes diagnosing issues easier when you have multiple keys. Ideally the name of this file is similar enough to the key name that you aren’t confused later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch known_hosts_keyname 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#third"&gt;
  &lt;/a&gt;
  Third
&lt;/h3&gt;

&lt;p&gt;The config file sets options for each host. Create the config file if it doesn’t already exist and then open it for editing. I label each key for visual neatness and to avoid confusion as the list of keys gets longer over time. Create a comment using the # at the start of a line to label each host. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iLDrX96G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/josephmidura/markdown/main/multiple-ssh-keys/config3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iLDrX96G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/josephmidura/markdown/main/multiple-ssh-keys/config3.png" alt="config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the breakdown of what each line means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The URL on the HostName line is the base URL where the repository resides. For example, if you have a personal account on github with personal projects, the URL will be github.com. &lt;/li&gt;
&lt;li&gt;Host is a pattern matcher that is used to differentiate between these sets of configurations. Keep it the same as the HostName so it matches hosts in connections correctly without additional specification. &lt;/li&gt;
&lt;li&gt;User for git based systems will be git. The value of User will be different if you connect to something else (i.e.  ec2-user for connecting to an Amazon AWS EC2 instance)&lt;/li&gt;
&lt;li&gt;IdentityFile asks for the location of the identity key we made. Type in the respective path here.&lt;/li&gt;
&lt;li&gt;UserKnownHostsFile specifies an exact location to store all hosts you connect to when you’re using that profile. Provide the respective paths here and choose a unique known hosts file name (see step 2 above) so that troubleshooting and key maintenance over time is easier.&lt;/li&gt;
&lt;li&gt;IdentitiesOnly specifies that only the keys provided must be used to connect to a host, even if another service like the ssh-agent offers a key for use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fourth"&gt;
  &lt;/a&gt;
  Fourth
&lt;/h3&gt;

&lt;p&gt;Add keys to ssh agent if passphrase was used. Skip to the next step if you didn't use a passphrase. Start the ssh agent in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eval "$(ssh-agent -s)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add &lt;strong&gt;private&lt;/strong&gt; keys to the agent in terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-add -K path_to_private_keyname
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the -K option works only on mac for keychain access.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fifth"&gt;
  &lt;/a&gt;
  Fifth
&lt;/h3&gt;

&lt;p&gt;Add &lt;strong&gt;public&lt;/strong&gt; Keys to clipboard:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat key_name.pub | pbcopy 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, paste the public key into the appropriate account.&lt;/p&gt;

&lt;p&gt;With multiple keys, I have the option of creating new keys as needed to keep each connection secure. If I have a single compromised key, then I only worry about changing that single key. My config file makes it easy for me to use multiple keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://support.atlassian.com/bitbucket-cloud/docs/set-up-an-ssh-key/"&gt;Bitbucket documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh"&gt;Github documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>ssh</category>
    </item>
    <item>
      <title>Let's go beyond console.log statements. (There is more to console object than what meets the eye. )</title>
      <author>Rishabh Jain</author>
      <pubDate>Sun, 18 Apr 2021 20:36:38 +0000</pubDate>
      <link>https://dev.to/jrishabh55/let-s-go-beyond-console-log-statements-there-is-more-to-console-object-that-meets-the-eye-5536</link>
      <guid>https://dev.to/jrishabh55/let-s-go-beyond-console-log-statements-there-is-more-to-console-object-that-meets-the-eye-5536</guid>
      <description>&lt;p&gt;&lt;code&gt;consoel.log()&lt;/code&gt; is one of the most important and early learned debugging tool that we have when working with &lt;code&gt;javascript&lt;/code&gt;. The tool become one of the most essential part of the development. Most developers start their debugging with &lt;code&gt;console.log()&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;Today in this tutorial let's go beyond the &lt;code&gt;console.log()&lt;/code&gt; and learn what more &lt;code&gt;console&lt;/code&gt; object can do for us and increase our productivity/proficiency with console. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#different-type-of-logging"&gt;
  &lt;/a&gt;
  Different type of logging.
&lt;/h1&gt;

&lt;p&gt;With &lt;code&gt;console&lt;/code&gt; object we have more than just &lt;code&gt;log&lt;/code&gt; statements, some of them are &lt;code&gt;warn&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consolewarn"&gt;
  &lt;/a&gt;
  console.warn()
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.warn()&lt;/code&gt; is very useful when you wanna signify that something is not right with the code but its not bad enough to be classified as error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is a warning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_A9YTFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mc54ve4k3tx3cs444lre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_A9YTFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mc54ve4k3tx3cs444lre.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoleerror"&gt;
  &lt;/a&gt;
  console.error()
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.error()&lt;/code&gt; is a useful statement when we wanna signifies that something is broken in our code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is an error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C6gTZbFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t1db9y6gxjwt86fxt3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C6gTZbFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t1db9y6gxjwt86fxt3h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consoleassert"&gt;
  &lt;/a&gt;
  console.assert()
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;console.assert()&lt;/code&gt; is a conditional error printer which can be helpful in verity of situations. it accepts 2 parameters 1st of which is our condition. If &lt;code&gt;true&lt;/code&gt; the error message will not print. if &lt;code&gt;false&lt;/code&gt; error message will be logged to the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This error message will show up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This error message will not show up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ibCwoUx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/784zj23rx36jyttkst8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibCwoUx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/784zj23rx36jyttkst8f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consolecount-consolecountreset"&gt;
  &lt;/a&gt;
  console.count, console.countReset
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;console.count()&lt;/code&gt; is one of the more important functions that is provided by &lt;code&gt;console&lt;/code&gt; object. It can be used as counter that is incremented by one every time its been called and &lt;code&gt;console.countReset()&lt;/code&gt; can be used to reset the counter.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We can use it to count a number of iterations in a loop. &lt;/li&gt;
&lt;li&gt;We can use it to see how many times a function has been called.&lt;/li&gt;
&lt;li&gt;etc
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculateSomeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;calculateSomeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countReset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter x has been reset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJFgK0Yd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkxpzxpnvf2yxaks7rjr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJFgK0Yd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkxpzxpnvf2yxaks7rjr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TIe5mHjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9muh128cpcen30vvj7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TIe5mHjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9muh128cpcen30vvj7x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consoletime-consoletimeend"&gt;
  &lt;/a&gt;
  console.time(), console.timeEnd()
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;console.time()&lt;/code&gt; and &lt;code&gt;console.timeEnd()&lt;/code&gt; are very important functions provided to us by &lt;code&gt;console&lt;/code&gt; object. The two functions can be used to start and stop a timer. The timer can be helpful in performance tests and more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;forLoopTimer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;forLoop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;forLoopTimer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#consolegroup-consolegroupend"&gt;
  &lt;/a&gt;
  console.group(), console.groupEnd()
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;console.group()&lt;/code&gt; and &lt;code&gt;console.groupEnd()&lt;/code&gt; are fairly useful tools when you want to encapsulate some logs together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oqDeBn9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxetvtladbmxo7eusi02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqDeBn9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxetvtladbmxo7eusi02.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's go crazy and nest them for helping in nesting we can pass labels in each group which will act as our identifiers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Group1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Group2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is console.log 8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Group2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Group1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tiAP-iFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a8s30g3z4fqs57valq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tiAP-iFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a8s30g3z4fqs57valq2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consoletable"&gt;
  &lt;/a&gt;
  console.table()
&lt;/h1&gt;

&lt;p&gt;Since the day i found out about &lt;code&gt;console.table()&lt;/code&gt; i fell in love with it. Have an array you need to look at in a good symmetrical way?, have an object ? &lt;code&gt;console.table()&lt;/code&gt; have you covered. It expects two arguments  &lt;code&gt;tableData&lt;/code&gt; and &lt;code&gt;tableColumn&lt;/code&gt; . The first argument &lt;code&gt;tableData&lt;/code&gt; is required but 2nd argument is optional and specifies which columns do you want to display.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rishabh Jain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;designation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sen Software Engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;India&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T7aRo-lQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fbjcbv00qqocfkrmxya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T7aRo-lQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fbjcbv00qqocfkrmxya.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's say from the above example we only wanna show &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;country&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rishabh Jain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;designation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sen Software Engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;India&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BHYeZPab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/490e9s1ej7lzpk43dwkb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BHYeZPab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/490e9s1ej7lzpk43dwkb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consoletrace"&gt;
  &lt;/a&gt;
  console.trace()
&lt;/h1&gt;

&lt;p&gt;A lot of times it happens that we need to know where a specific function is called or we need to know where a function is. &lt;code&gt;console.trace()&lt;/code&gt; can be extremely useful when you wanna know when your functions are being called. You can also pass an optional label to the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myNewHOF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;myNewHOF&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXXXrCLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nqcgog9kgztib74yjzl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXXXrCLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nqcgog9kgztib74yjzl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#format-your-output"&gt;
  &lt;/a&gt;
  Format your output
&lt;/h1&gt;

&lt;p&gt;With this trick you can style your output the way you want it to.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Specifier&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;Formats the value as a string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%i or %d&lt;/td&gt;
&lt;td&gt;Formats the value as an integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%f&lt;/td&gt;
&lt;td&gt;Formats the value as a floating point&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%o&lt;/td&gt;
&lt;td&gt;Formats the value as an expandable DOM element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%O&lt;/td&gt;
&lt;td&gt;Formats the value as an expandable JS Object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;Applies CSS style rules to the output string&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%c Lets change this to cool&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;font-weight: bold; color: blue; background: cyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hFpdifrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efgz1u0apg1i9fs4aj2z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFpdifrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efgz1u0apg1i9fs4aj2z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Did i miss something?, Let me know in the comments below...&lt;/p&gt;

&lt;p&gt;Thank you for reading the article. Please let me know in comments how can i improve this and what else do you want me to write about.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
