<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fiction Writing Prompts: the way to Master Creative Thought</title>
      <author>lindabancher</author>
      <pubDate>Wed, 18 Aug 2021 12:43:25 +0000</pubDate>
      <link>https://dev.to/lindabancher/fiction-writing-prompts-the-way-to-master-creative-thought-23</link>
      <guid>https://dev.to/lindabancher/fiction-writing-prompts-the-way-to-master-creative-thought-23</guid>
      <description>&lt;p&gt;Fiction Writing Prompts: the way to Master Creative Thought&lt;br&gt;
An exercise in fiction writing will be rather more demanding than the other task that students usually face. If you have got never worked on such assignments before, you most likely need some fiction writing prompts and tips. So, take a glance at this text, because it'll provide you with many useful recommendations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fiction-writing-prompts-trying-to-find-ideas"&gt;
  &lt;/a&gt;
  Fiction Writing Prompts: trying to find Ideas
&lt;/h2&gt;

&lt;p&gt;The so-called writer’s block is familiar to several people. In many cases, people cannot find a decent subject for his or her short stories or novels. Sometimes, they can't come up with words that best describe their thoughts and feelings. So, the subsequent creative writing prompts will facilitate you're overcome the writer’s block:&lt;/p&gt;

&lt;p&gt;Think of something that seems fairly important, amusing, or interesting to you.&lt;/p&gt;

&lt;p&gt;Recall real-life examples that produced a powerful impression on you. Remember that you simply mustn't write on a topic that you don’t feel anything, because the readers will surely feel your indifference. This is often probably the foremost important fiction writing prompt to recollect.&lt;/p&gt;

&lt;p&gt;Don’t try and torture yourself into &lt;a href="https://essaywriter.nyc/"&gt;college essay writing service&lt;/a&gt;. If you think that that you just have to select a walk to relax a touch, do it.&lt;/p&gt;

&lt;p&gt;Write down every concept you've got in a notebook. Remember that a pen or a pencil should be your loyal companion. many folks believe that they'll easily remember good ideas that when occurred to them. Yet, forgetting is additionally an inherent part of our mind, and one shouldn’t rely an excessive amount only on memory.&lt;/p&gt;

&lt;p&gt;Read the books of other writers. Certainly, you shouldn’t slavishly emulate them, but you'll be able to learn from them what good writing is.&lt;/p&gt;

&lt;p&gt;If you propose indeed to jot down, then sit down and write. Internet or video games won’t help with writing a brief story or a poem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_wI-3deh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duai9auwj8e3mm9n09x8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_wI-3deh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duai9auwj8e3mm9n09x8.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fiction-writing-prompts-interacting-with-readers"&gt;
  &lt;/a&gt;
  Fiction Writing Prompts: Interacting with Readers
&lt;/h2&gt;

&lt;p&gt;Some students seek prompts for fiction writing because they require to specific their ideas in a better way. If this can be your case here are several suggestions that you just should take into account:&lt;/p&gt;

&lt;p&gt;Don’t start your text with an outline of nature. Only a few writers are ready to successfully incorporate such descriptions into their text and reader often skip them anyway.&lt;/p&gt;

&lt;p&gt;Pay attention to the length of your paragraphs. Confirm that they're not too long, because otherwise, readers may simply lose track of the story.&lt;/p&gt;

&lt;p&gt;Use punctuation marks properly and don’t attempt to emulate writers like writers who could write &lt;a href="https://essaywriter.nyc/different-types-of-intellectual-property-protection-in-the-united-states/"&gt;different types of intellectual property protection in the united states&lt;/a&gt; without employing a single period. Such experiments are seldom appreciated by people, especially readers.&lt;/p&gt;

&lt;p&gt;Read your text aloud. This can be probably the most effective thanks to identifying awkward sentences and clichés.&lt;/p&gt;

&lt;p&gt;Don’t be afraid to get rid of sentences, or maybe passages if they don’t quite fit the story.&lt;/p&gt;

&lt;p&gt;Surely, there's no universal fiction writing prompt that will help an individual write a superb story or novel. However, the information offered here will allow you to avoid many mistakes that beginners usually make.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#education-definition-a-fancy-concept-in-simplest-terms"&gt;
  &lt;/a&gt;
  Education Definition: a fancy Concept in Simplest Terms
&lt;/h2&gt;

&lt;p&gt;What is education? Most of you'll readily answer that education is defined because of the knowledge and skills received at schools, colleges, and universities. However, it's a false start. Let’s check these education definitions to grasp the various meanings of the complex concept of “education”.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#education-definition-in-a-very-broad-sense"&gt;
  &lt;/a&gt;
  Education definition in a very broad sense
&lt;/h2&gt;

&lt;p&gt;In a broad sense, education is an enlightening experience. for instance, speech to your parents, reading a book, watching a movie or perhaps wandering the net can all be considered sorts of education, because these experiences are enlightening and affect the way you think that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#education-definition-during-a-narrow-sense"&gt;
  &lt;/a&gt;
  Education definition during a narrow sense
&lt;/h2&gt;

&lt;p&gt;In a narrow sense, education is defined as:&lt;/p&gt;

&lt;p&gt;the process of giving or receiving knowledge and skills at specialized institutions (also referred to as formal education);&lt;/p&gt;

&lt;p&gt;the knowledge and skills received at specialized institutions (measured by various certificates, diplomas, and degrees);&lt;/p&gt;

&lt;p&gt;the field of study that prepares teachers for his or her work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#education-definition-within-the-digital-era"&gt;
  &lt;/a&gt;
  Education definition within the digital era
&lt;/h2&gt;

&lt;p&gt;The education definitions offered by Einstein, Wilde, and Douglas are relevant today. within the era of knowledge and internet technologies, new discoveries are made a day. College curricula cannot cover everything you wish to grasp for your professional career. Even the foremost prominent instructors cannot teach you absolutely everything like &lt;a href="https://essaywriter.nyc/how-to-study-a-chapter-efficiently/"&gt;how to study a chapter efficiently&lt;/a&gt;. the aim of education within the present is to show you the way to be told, find and evaluate the required information. Therefore, you badly have to pay more attention to self-education.&lt;/p&gt;

&lt;p&gt;So, it's not that easy to offer a definition of education. In general, education is defined because of the process, results, content, and theories of teaching-learning processes allotted at institutions or on your own.&lt;/p&gt;

</description>
      <category>writing</category>
    </item>
    <item>
      <title>✨ Best Web Development Memes | Coding Memes</title>
      <author>Stacksjar</author>
      <pubDate>Wed, 18 Aug 2021 12:28:36 +0000</pubDate>
      <link>https://dev.to/stacksjar/web-development-memes-coding-memes-4b6f</link>
      <guid>https://dev.to/stacksjar/web-development-memes-coding-memes-4b6f</guid>
      <description>&lt;p&gt;Who doesn't love memes. Get Random coding memes from the fresh new page of this website.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#webdeveloper-codingmemes-webdevelopmentmemes-programmingmemes"&gt;
  &lt;/a&gt;
  webdeveloper #codingmemes #webdevelopmentmemes #programmingmemes
&lt;/h1&gt;

&lt;p&gt;Checkout Memes : &lt;a href="https://stacksjar.com/memes"&gt;Stacksjar Memes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>memes</category>
      <category>codingmemes</category>
      <category>programmingmemes</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Page Object Model in Cypress</title>
      <author>Dilpreet Johal</author>
      <pubDate>Wed, 18 Aug 2021 11:45:16 +0000</pubDate>
      <link>https://dev.to/automationbro/page-object-model-in-cypress-h9i</link>
      <guid>https://dev.to/automationbro/page-object-model-in-cypress-h9i</guid>
      <description>&lt;p&gt;In this tutorial, we will cover how to setup Page Object Model in Cypress. We will also cover why Cypress team suggests not to use Page Object Model.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-page-object-model-pom"&gt;
  &lt;/a&gt;
  What is Page Object Model (POM)
&lt;/h3&gt;

&lt;p&gt;POM is a popular design pattern that helps in reducing code duplication and improves test maintenance. You do that by storing page related elements in a separate file which gets called by your tests.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-not-to-use-pom-per-cypress"&gt;
  &lt;/a&gt;
  Why NOT to use POM per Cypress?
&lt;/h3&gt;

&lt;p&gt;In an &lt;a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/"&gt;article&lt;/a&gt; published by Cypress team back in 2019, they pointed out that instead of using POM you should rather use App Actions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are App Actions?&lt;/strong&gt;&lt;br&gt;
Instead of interacting through the UI, App Actions lets you dispatch actions directly through the application internal logic by using the &lt;code&gt;window.Cypress&lt;/code&gt; object. This way you end up saving a lot more time by setting your app in a certain state rather than getting to that state via UI. &lt;/p&gt;

&lt;p&gt;For ex: Use App actions to set your app in a logged in state if you need a user that needs to do something after it's logged in. Traditionally, you would use UI to first login and then execute your test.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#my-opinion"&gt;
  &lt;/a&gt;
  My Opinion
&lt;/h3&gt;

&lt;p&gt;I personally feel you can use both, use Page objects to store page related details and also access Application code to speed up your tests as well (if that is an option for you). &lt;br&gt;
 &lt;br&gt;
Cypress works best if you have access to your code base and you are testing application in the pre-PROD mode (dev/qa/stage). For example, in my &lt;a href="https://practice.automationbro.com/"&gt;test app&lt;/a&gt;, it’s a Wordpress application and I don’t have access to the application code so I cant use App actions but I can still go ahead and use POM. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#how-to-setup-pom-in-cypress"&gt;
  &lt;/a&gt;
  How to setup POM in Cypress?
&lt;/h3&gt;

&lt;p&gt;Setting up POM in Cypress is pretty straightforward, you just need to setup a class that contains your web elements and page methods. Let's take a look at an example - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8UecdP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scmyszi0vsddszhzdmb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8UecdP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scmyszi0vsddszhzdmb8.png" alt="Cypress Page Class"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot above, I have created a &lt;code&gt;HomePage&lt;/code&gt; class with getter functions that are calling the web elements using &lt;code&gt;Cy.get()&lt;/code&gt;. And, it also has a page method that is going to the base url of the website. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calling Page class in the tests&lt;/strong&gt;&lt;br&gt;
Now, to access the Page related elements and methods, you can simply import it your test file and call the relevant method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HomePage.visitPage()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;HomePage.getStartedBtn.click()&lt;/code&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Setting up POM is a common design pattern in the test automation industry, so as long as you implement it correctly I personally don't see any harm in NOT using POM. At the same time, I agree with Cypress team regarding App Actions as that can significantly improve your tests speed as well as stability.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#check-out-the-video-below-to-learn-more-about-how-to-setup-pom-in-cypress%E2%80%8A%E2%80%8A"&gt;
  &lt;/a&gt;
  Check out the video below to learn more about how to setup POM in Cypress - 
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uPoyTy11lPE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this as well as free access to a Private Facebook community&lt;/p&gt;

&lt;p&gt;👍 You can follow my content here as well - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/automationbro"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/company/automation-bro"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>3 methods for testing JavaScript Lambda functions</title>
      <author>K</author>
      <pubDate>Wed, 18 Aug 2021 11:45:12 +0000</pubDate>
      <link>https://dev.to/dashbird/3-methods-for-testing-javascript-lambda-functions-19po</link>
      <guid>https://dev.to/dashbird/3-methods-for-testing-javascript-lambda-functions-19po</guid>
      <description>&lt;p&gt;&lt;em&gt;This article will discuss the different options for testing your AWS Lambda functions; the focus will be on JavaScript.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/what-is-faas-function-as-a-service/"&gt;Function as a service&lt;/a&gt; (FaaS) offerings like AWS Lambda are a blessing for software development. They &lt;strong&gt;remove many of the issues&lt;/strong&gt; that come with the setup and maintenance of backend infrastructure. With much of the upfront work taken out of the process, they also &lt;strong&gt;lower the barrier to start a new service&lt;/strong&gt; and encourage modularization and encapsulation of software systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing distributed systems&lt;/strong&gt; and &lt;strong&gt;serverless cloud infrastructures&lt;/strong&gt; specifically is always a source of long discussions. Some people prefer the &lt;strong&gt;local approach&lt;/strong&gt; of emulating everything around your own code because it gives you fast iterations. Others say it gives you a false sense of safety because you're not really testing the actual services involved later when you deploy into your production environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-needs-to-be-tested"&gt;
  &lt;/a&gt;
  What Needs to be Tested?
&lt;/h2&gt;

&lt;p&gt;First of all, &lt;strong&gt;your own code&lt;/strong&gt;, obviously.&lt;/p&gt;

&lt;p&gt;But the main part in the architecture where FaaS really shines is &lt;strong&gt;integration code&lt;/strong&gt;. Lambda can be seen as versatile glue between all the managed services AWS, and other vendors, have to offer. So, the &lt;strong&gt;main focus of tests isn't just your code&lt;/strong&gt; but also how it &lt;strong&gt;integrates with different services&lt;/strong&gt;. Having a Lambda that just reads an event and writes an output will be a rare occasion; usually, it will access one or multiple other services like S3, Step Functions, or RDS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smoke-tests"&gt;
  &lt;/a&gt;
  Smoke Tests
&lt;/h2&gt;

&lt;p&gt;Smoke tests are a &lt;strong&gt;straightforward type of test&lt;/strong&gt;. They only check that your &lt;strong&gt;code doesn't crash when you try to run it&lt;/strong&gt;. This means smoke tests &lt;strong&gt;don't check if your code works correctly&lt;/strong&gt;. It could be that you have a bug in some if-branch anywhere that isn't executed with the test. It doesn't test for logic issues either.&lt;/p&gt;

&lt;p&gt;In terms of a &lt;strong&gt;web server&lt;/strong&gt;, a smoke test would mean starting the server. No request gets sent to the server; just starting the server and see if it crashes. This is easy to do, and if it fails, you can save time running any other test.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Lambda&lt;/strong&gt;, the action of starting and handling an event is the same because Lambdas only run when they handle an event and get frozen or retired right after they did their work. This means a smoke test would mean &lt;strong&gt;sending an event to the Lambda function&lt;/strong&gt; to see if it throws an error. The simplest even you think your Lambda function should be able to handle would do. &lt;/p&gt;

&lt;p&gt;A smoke test can be done via the AWS CLI with the following command:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PXderMnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kodn3matj7kp48pup9cf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PXderMnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kodn3matj7kp48pup9cf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find the copyable code snippets, &lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For automation purposes, you can add such CLI commands to a bash script and simply execute it before every other test runs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unit-tests"&gt;
  &lt;/a&gt;
  Unit Tests
&lt;/h2&gt;

&lt;p&gt;Unit tests are a bit more &lt;strong&gt;complex&lt;/strong&gt; than smoke tests because they actually &lt;strong&gt;test the logic of your function&lt;/strong&gt;. Since most errors usually happen when integrating your code with other services, they don't bring that much value compared to integration tests.&lt;/p&gt;

&lt;p&gt;But sometimes, you have very complex logic inside a Lambda function that doesn't need to access other services. If it does access other services, the interaction with them is very basic.&lt;/p&gt;

&lt;p&gt;To get unit tests going, your first step is &lt;strong&gt;extracting the logic you want to test&lt;/strong&gt; into a JavaScript module. &lt;/p&gt;

&lt;p&gt;Let's look at the following example of a Lambda function that adds or substracts two numbers depending on an operation argument.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TPtGFcBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4gdbu7534wyt7l0nrud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TPtGFcBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4gdbu7534wyt7l0nrud.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find the copyable code snippets, &lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a contrived example, but still, the function is harder to test than it needs to be. We would have to create an event object containing the &lt;code&gt;queryStringParameters&lt;/code&gt; field, which would require an &lt;code&gt;operation&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt; fields to be present.&lt;/p&gt;

&lt;p&gt;If we encapsulate this logic in a plain JavaScript function that only requires three arguments, things would be simpler. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESgOtM9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnuyl2rdnd04vtvizdim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESgOtM9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnuyl2rdnd04vtvizdim.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find the copyable code snippets, &lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this refactored example, we can now test the logic independently from the Lambda handler function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integration-tests"&gt;
  &lt;/a&gt;
  Integration Tests
&lt;/h2&gt;

&lt;p&gt;Integration tests are the &lt;strong&gt;most important part of testing FaaS&lt;/strong&gt;. I said it before, and I will repeat it, &lt;strong&gt;AWS Lambda&lt;/strong&gt; is mostly used to &lt;strong&gt;glue together managed cloud services&lt;/strong&gt;, and the parts where your Lambda function interacts with other services are the &lt;strong&gt;most crucial test targets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, there are two main ways of integration testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Test with real infrastructure&lt;/li&gt;
&lt;li&gt;  Test by emulating that infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They both have their &lt;strong&gt;pros and cons&lt;/strong&gt;. For example, if testing with &lt;strong&gt;mocked-up&lt;/strong&gt; infrastructure is &lt;strong&gt;faster and cheaper&lt;/strong&gt;, but if your mocks are wrong, you're tests are wrong too. Testing with &lt;strong&gt;real infrastructure&lt;/strong&gt; gives you &lt;strong&gt;more confidence but costs more money&lt;/strong&gt; and can be quite &lt;strong&gt;slow&lt;/strong&gt; if you need to provide it for each test run.&lt;/p&gt;

&lt;p&gt;Also, there is "no free lunch" in writing integration tests. The time you might save when you don't have to meddle with real infrastructure will sink into keeping your mocked-up infrastructure up-to-date. &lt;strong&gt;Martin Fowler&lt;/strong&gt; wrote &lt;a href="https://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs"&gt;an awesome article&lt;/a&gt; about everything that goes into mock tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-with-real-infrastructure"&gt;
  &lt;/a&gt;
  Testing with Real Infrastructure
&lt;/h2&gt;

&lt;p&gt;Testing with real infrastructure only makes sense when you are &lt;strong&gt;using infrastructure as code&lt;/strong&gt; (IaC) tool. Otherwise, you &lt;strong&gt;waste too much time&lt;/strong&gt; provisioning your resources manually. Especially serverless applications are prone to contain many small services.&lt;/p&gt;

&lt;p&gt;AWS offers multiple IaC tools: &lt;a href="https://aws.amazon.com/cloudformation/"&gt;CloudFormation&lt;/a&gt;, &lt;a href="https://aws.amazon.com/serverless/sam/"&gt;SAM&lt;/a&gt;, and &lt;a href="https://aws.amazon.com/cdk/"&gt;the CDK&lt;/a&gt; are a few of them that are very well integrated with the AWS ecosystem. &lt;/p&gt;

&lt;p&gt;When you have your tool of choice ready, you can then use it to deploy to test and production with one IaC definition. This way, you can be sure your testing environment matches production.&lt;/p&gt;

&lt;p&gt;Now, the tests would check the inputs and outputs of your Lambda functions.&lt;/p&gt;

&lt;p&gt;For a &lt;strong&gt;synchronous invocation of Lambda&lt;/strong&gt;, which happens with API-Gateway, for example, this means the events that go into your Lambda function and the response that function returns. For &lt;strong&gt;asynchronous invocations&lt;/strong&gt;, there are no values returned.&lt;/p&gt;

&lt;p&gt;The more interesting part of these tests is &lt;strong&gt;how your function accesses other services&lt;/strong&gt;. If your function reads some data from DynamoDB for authentication, before it does its work, you need to check that that data is accessible and correct*&lt;em&gt; before running the test&lt;/em&gt;&lt;em&gt;. If you write to S3, you must access S3 to check if everything went right&lt;/em&gt;&lt;em&gt; after running the test&lt;/em&gt;*.&lt;/p&gt;

&lt;p&gt;You can use the same &lt;a href="https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/installing-jssdk.html"&gt;AWS SDK for JavaScript&lt;/a&gt; to check these services inside your tests. If you choose to run your tests on AWS Lambda, too, it will even be preinstalled.&lt;/p&gt;

&lt;p&gt;Let's look at how such an integration test could look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DVHiKGCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux6f3qap1b8gov1sorsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DVHiKGCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux6f3qap1b8gov1sorsy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find the copyable code snippets, &lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This example is a &lt;strong&gt;Lambda function&lt;/strong&gt; &lt;strong&gt;that tests another Lambda function&lt;/strong&gt;. It creates a user document in a DynamoDB table with admin permissions. Then it invokes a Lambda function with event arguments. After the function was invoked, it checks that a file in S3 was created. And finally, it cleans up all the test-related data.&lt;/p&gt;

&lt;p&gt;This is only a basic implementation, including &lt;a href="https://www.npmjs.com/package/tape"&gt;a testing framework like tape&lt;/a&gt; to make things more convenient. But it illustrates what even a simple integration test requires to work.&lt;/p&gt;

&lt;p&gt;You can test, retest applications all you want but once that baby goes Live, s*#@ will happen. It's just how it is. You'll be able to use &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;'s function view to see exactly how your application is behaving and when the app goes sideways, you'll be able to use the Incident management platform you can see exactly what broke and where.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kp5Ry-dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2021/08/errorview-2019.02.13-1-1024x492.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kp5Ry-dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2021/08/errorview-2019.02.13-1-1024x492.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This article only talked about &lt;strong&gt;three basic methods to test your functions&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  smoke tests&lt;/li&gt;
&lt;li&gt;  unit tests&lt;/li&gt;
&lt;li&gt;  integration tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are even more test types out there that have a much bigger scope, like E2E tests or test specific behavior of your functions like performance tests.&lt;/p&gt;

&lt;p&gt;To get started, you should be good to go with &lt;strong&gt;smoke and integration tests&lt;/strong&gt;. Make sure your Lambda doesn't crash right at the start of an invocation and then test that it actually accurately uses other services.&lt;/p&gt;

&lt;p&gt;If you have very complex Lambda functions used for specific logic and not just to integrate multiple services, try to encapsulate that logic and run unit tests. This way, you can iterate faster and cheaper.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Further reading:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/how-to-test-serverless-applications/"&gt;How to test serverless applications?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/log-based-monitoring-for-aws-lambda/"&gt;Log-based monitoring for AWS Lambda&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/sizing-cloud-resources-mistakes/"&gt;10 mistakes to avoid when sizing your cloud resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/why-serverless-apps-fail-and-how-to-design-resilient-architectures/"&gt;Why serverless apps fail and how to design resilient architectures?&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Diabetes Predictor App</title>
      <author>Nitesh Thapliyal</author>
      <pubDate>Wed, 18 Aug 2021 11:33:51 +0000</pubDate>
      <link>https://dev.to/niteshthapliyal/diabetes-predictor-app-1e26</link>
      <guid>https://dev.to/niteshthapliyal/diabetes-predictor-app-1e26</guid>
      <description>&lt;p&gt;Diabetes is a disease that occurs when your blood glucose, also called blood sugar, is too high. Blood glucose is your main source of energy and comes from the food you eat. Insulin, a hormone made by the pancreas, helps glucose from food get into your cells to be used for energy. Sometimes your body doesn’t make enough—or any—insulin or doesn’t use insulin well. Glucose then stays in your blood and doesn’t reach your cells.&lt;/p&gt;

&lt;p&gt;Here is a Flutter app that will help to predict that whether user has diabetes or not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z9AHAOx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxp9waszm0nywecnbgfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z9AHAOx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxp9waszm0nywecnbgfa.png" alt="about"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-prediction-is-based-on-the-value-of"&gt;
  &lt;/a&gt;
  The prediction is based on the value of:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Number of time pregnant&lt;/li&gt;
&lt;li&gt;Diastolic Blood Pressure&lt;/li&gt;
&lt;li&gt;Tricep skin fold thickness&lt;/li&gt;
&lt;li&gt;2-Hour Serum insulin&lt;/li&gt;
&lt;li&gt;Body mass index&lt;/li&gt;
&lt;li&gt;Diabetes pedigree function&lt;/li&gt;
&lt;li&gt;Age&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--as3C_L4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xukbzjbqtasagm68t0in.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--as3C_L4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xukbzjbqtasagm68t0in.png" alt="main"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack-used"&gt;
  &lt;/a&gt;
  Tech Stack used:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; Frontend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For frontend Flutter is used and the language that is used in flutter is Dart.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Backend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For backend Deep learning model is used which is made by using pima Indians diabetes dataset and for the interface between backend and frontend Python CGI is used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Backend host&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For hosting the backend AWS is used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-app"&gt;
  &lt;/a&gt;
  Creating App
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Created about and main page in flutter code you can see in &lt;a href="https://github.com/Nitesh-thapliyal/Diabetes-Predictor-App"&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Created Python CGI Script to connect server with frontend&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9eavXors--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/613eo7w8pskxux1qipw4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9eavXors--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/613eo7w8pskxux1qipw4.png" alt="CGI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Used http package in flutter for making HTTP requests, &lt;a href="https://pub.dev/packages/http"&gt;documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:http/http.dart'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://example.com/whatsit/create'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'doodle'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'color'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'blue'&lt;/span&gt;&lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Response status: &lt;/span&gt;&lt;span class="si"&gt;${response.statusCode}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Response body: &lt;/span&gt;&lt;span class="si"&gt;${response.body}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://example.com/foobar.txt'&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;created model and hosted it in AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we can enter the values so that app can predict whether user has diabetes or not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_yvjB-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyc0ddow8agskzu1qyxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_yvjB-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyc0ddow8agskzu1qyxy.png" alt="Values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now as soon as we click in search icon, behind the scene values will go to server and process the values and output will be get by flutter and displayed in app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--npHY9ajr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8wv2grvgmlrcfv6dvka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--npHY9ajr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8wv2grvgmlrcfv6dvka.png" alt="output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;here you can see the output &lt;strong&gt;"you have diabetes"&lt;/strong&gt; this output was mentioned in CGI script, flutter get the output and displayed in the app.&lt;/p&gt;

&lt;p&gt;So that's how we can use DL model and integrate it with app.&lt;/p&gt;

&lt;p&gt;Thank you!!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>python</category>
      <category>deeplearning</category>
    </item>
    <item>
      <title>😱 Make a Random Meme API With Node.js and Puppeteer</title>
      <author>Max Programming</author>
      <pubDate>Wed, 18 Aug 2021 11:27:51 +0000</pubDate>
      <link>https://dev.to/maxprogramming/make-a-random-meme-api-with-node-js-and-puppeteer-4h4b</link>
      <guid>https://dev.to/maxprogramming/make-a-random-meme-api-with-node-js-and-puppeteer-4h4b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-there"&gt;
  &lt;/a&gt;
  👋 Hello there
&lt;/h2&gt;

&lt;p&gt;Today's article is all about how you can make a &lt;strong&gt;Random Meme&lt;/strong&gt; API using Node.js and web scraping. We'll be using &lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt; for our API and we'll be using &lt;a href="https://github.com/puppeteer/puppeteer"&gt;Puppeteer&lt;/a&gt; to scrape the web and get the random meme.&lt;/p&gt;

&lt;p&gt;This random meme API was inspired by the same kind of API &lt;a href="https://github.com/techytushar/random-memer"&gt;here&lt;/a&gt;. But I wanted to build it using Node.js and Puppeteer.&lt;/p&gt;

&lt;p&gt;We'll be scraping &lt;a href="http://memedroid.com/"&gt;Memedroid&lt;/a&gt; using the  &lt;a href="http://npmjs.org/package/puppeteer"&gt;Puppeteer NPM package&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initializing-the-project"&gt;
  &lt;/a&gt;
  Initializing the project
&lt;/h2&gt;

&lt;p&gt;First of all, we'll need to create a folder with the name we want and we'll need to initialize our Node.js app in that folder. We do it using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need two dependencies to install, simply install &lt;code&gt;puppeteer&lt;/code&gt; and &lt;code&gt;fastify&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i puppeteer fastify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-fastify-for-api"&gt;
  &lt;/a&gt;
  Using Fastify for API
&lt;/h2&gt;

&lt;p&gt;After we have our project set up and our dependencies installed, we're good to go with writing the code! Create an &lt;code&gt;index.js&lt;/code&gt; file and import &lt;code&gt;fastify&lt;/code&gt; with this code to create the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt; &lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5555&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this thing is done, when we run the app using &lt;code&gt;node index&lt;/code&gt;, our app will be running on port &lt;code&gt;5555&lt;/code&gt;. But let's create the base route (&lt;code&gt;/&lt;/code&gt; )for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-the-random-meme-using-puppeteer"&gt;
  &lt;/a&gt;
  Getting the random meme using Puppeteer
&lt;/h2&gt;

&lt;p&gt;Here comes the fun part now! We'll open the web browser and get all the images from memedroid, and we'll do all of it through code. &lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;puppeteer&lt;/code&gt; package, Chromium also comes installed to scrape the web. That's why it might have taken time for you to get installed&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To skip Chromium download, you can use &lt;a href="http://npmjs.org/package/puppeteer-core"&gt;&lt;code&gt;puppeteer-core&lt;/code&gt;&lt;/a&gt; package and add the path to your Chrome file following the docs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We'll create a function to &lt;strong&gt;get all memes&lt;/strong&gt; and then we'll pick a random one in the route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAllMemes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.memedroid.com/memes/tag/programming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// launch browser&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// open a page&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// go to the page&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simply launch the browser and open the page for memedroid in this code 👆.&lt;/p&gt;

&lt;p&gt;Now let's get all the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags which are in the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the class of &lt;code&gt;item-aux-container&lt;/code&gt;. That's where all the memes live in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tJafAmOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629208607331/hMu6pVYP6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tJafAmOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629208607331/hMu6pVYP6h.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As in the above image, inside of each &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag, the div with that class exists, so we simply get it using the &lt;code&gt;$$eval&lt;/code&gt; method on the &lt;code&gt;page&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This method takes two arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Selector&lt;/li&gt;
&lt;li&gt;Callback function with the element(s)
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allImages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$$eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div.item-aux-container img[src]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will map over the images in the callback function, and we'll return only the URL of the image from getting the &lt;code&gt;src&lt;/code&gt; attribute. And this is how we do it.&lt;/p&gt;

&lt;p&gt;We check if the &lt;code&gt;src&lt;/code&gt; attribute starts with &lt;code&gt;http&lt;/code&gt; and ends with &lt;code&gt;jpeg&lt;/code&gt; and we return that if it does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allImages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$$eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div.item-aux-container img[src]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jpeg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, that also returns to us &lt;code&gt;null&lt;/code&gt; if that's not the case, so we filter out the nulls using the &lt;code&gt;.filter()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allImages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once all that work is done, we close the browser and return the array of images, this is how the whole function looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAllMemes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.memedroid.com/memes/tag/programming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allImages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$$eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div.item-aux-container img[src]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jpeg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allImages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// NEW LINES&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-fastify-to-send-the-random-meme"&gt;
  &lt;/a&gt;
  Using Fastify to send the random meme
&lt;/h2&gt;

&lt;p&gt;Finally, we will pick a random meme and send it to the user using this code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllMemes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;memeUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, whenever the user visits &lt;code&gt;localhost:5555&lt;/code&gt;, they get this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZ_fqIRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629209526927/q3deMvwlE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZ_fqIRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629209526927/q3deMvwlE.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q20LghGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/DRNHiOI54DlW3MBO30/200.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q20LghGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/DRNHiOI54DlW3MBO30/200.gif" alt="done.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have our app done! Thanks for reading! You can find all the code  &lt;a href="https://github.com/max-programming/meme-api"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you liked it! Comment down your thoughts! There is always room for improvement so let me know your suggestions on this project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect with me on my &lt;a href="https://youtube.com/MaxProgramming"&gt;YouTube channel&lt;/a&gt; and my  &lt;a href="https://twitter.com/maxprogramming1"&gt;Twitter&lt;/a&gt; 😉&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Until next time, keeping awesome ✌️&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>puppeteer</category>
      <category>api</category>
    </item>
    <item>
      <title>Writing as a developer is like going on a journey</title>
      <author>Tobias Timm</author>
      <pubDate>Wed, 18 Aug 2021 09:56:09 +0000</pubDate>
      <link>https://dev.to/s2engineers/writing-as-a-developer-is-like-going-on-a-journey-7ak</link>
      <guid>https://dev.to/s2engineers/writing-as-a-developer-is-like-going-on-a-journey-7ak</guid>
      <description>&lt;p&gt;Do you often feel the urge to write an excellent blog article, or do you not care about it at all? Your choice doesn't matter here, and it is neither good nor bad. &lt;/p&gt;

&lt;p&gt;As a developer, you need to handle a lot of reading, writing technical documentation, and explain to non-technical people how you would approach specific technical solutions. Maybe you can already read it between the line; the keyword I'm looking for is &lt;strong&gt;communication&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Communication&lt;/strong&gt; is critical in the developer's life. So how can you relate this to writing a blog article? &lt;br&gt;
Writing itself can be a joyful experience, where you can express your emotions and creativity in a completely new way. With writing, you can reflect on yourself and experience situations from the perspective of a different person.&lt;/p&gt;

&lt;p&gt;Do you want an example? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Think of the last README file you have written. Have you adequately tested it and tried it out, like a person grabbing your GitHub repository? If not, do it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sooner or later, you will experience that maybe some critical pieces of information would be helpful or even required to know for your repository, and you forgot to mention them within your README. &lt;/p&gt;

&lt;p&gt;Another example? Here we go.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A new junior developer joins your team, and you need to explain how &lt;em&gt;insert your fancy framework here&lt;/em&gt; works. To make it easier to memorize it, you should also write it down.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have you ever tried to explain your beloved framework to starters or non-technical people in an easy way or even write it down for them?&lt;/p&gt;

&lt;p&gt;Okay, so writing is an essential skill to learn as a developer, but how can I overcome myself by doing it more often?&lt;/p&gt;

&lt;p&gt;If you ask most developers why they don't write more often, the most common answers are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"I have no time for that."&lt;/li&gt;
&lt;li&gt;"I don't like it."&lt;/li&gt;
&lt;li&gt;"I don't even know what I should write about."&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#i-have-no-time-for-that"&gt;
  &lt;/a&gt;
  I have no time for that
&lt;/h2&gt;

&lt;p&gt;I can emphasize myself with that statement. Most of my days are fully packed with work stuff, and if I can finally spare some hours/minutes, they are most often blocked by other topics that I wanted to explore.&lt;br&gt;
Unfortunately, there is no easy answer to loose this situation. &lt;br&gt;
At least I can share some tips/tasks for better handling.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reprioritize your calendar and check if it is vital that you attend every meeting&lt;/li&gt;
&lt;li&gt;Create a blocker for ~30 minutes dedicated to writing &lt;/li&gt;
&lt;li&gt;Ask your colleagues for help; for example; they could participate in a meeting instead, take over a particular task, ... .&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#i-dont-like-it"&gt;
  &lt;/a&gt;
  I don't like it
&lt;/h2&gt;

&lt;p&gt;Writing like every other activity isn't for everyone, which is completely fine, but can you say that you tried it out long enough?&lt;br&gt;
To get a grasp on your emotions and motivation towards writing, set yourself a challenge. Make a week dedicated to writing. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The goal should be a small article about a topic you like. Every day try to write at least for thirty minutes; it doesn't matter if you write some words or can even phrase sentences within the 30 minutes. &lt;br&gt;
You have a ready-to-publish blog article at the end of the week, and you should post it! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It isn't good, or do you think it isn't perfect? &lt;br&gt;
Try not to be too hard on yourself. Small steps are the key to success, and feedback is more than welcome. If you don't want to publish your article, give it to a friend or colleague and talk about it.&lt;/p&gt;

&lt;p&gt;So how do you feel after the completion of this task? Happy, excited, stressed, bored? Sort your emotions and try to retake this exercise after 3-4 weeks. If your emotions and feelings haven't changed, you either found a new hobby, or writing isn't your correct fit; it should be something you enjoy, not something you feel like you need to do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-dont-even-know-what-i-should-write-about"&gt;
  &lt;/a&gt;
  I don't even know what I should write about
&lt;/h2&gt;

&lt;p&gt;There are several creative methods for brainstorming topics you can write about, but for starters, take your current technology stack and start with the simple things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to set up a server with technology xyz&lt;/li&gt;
&lt;li&gt;Creating a blog with abc&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This is covered all over the internet&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maybe it is, but does it cover your perspective? I bet not. There is at least one or two things that you would do differently than the other blog post. &lt;br&gt;
It is crucial and significant to share that with the whole world! &lt;/p&gt;

&lt;p&gt;Another great way to explore topics is to ask your colleagues or friends. Maybe there are some particular questions nobody has answered before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  tl;dr
&lt;/h2&gt;

&lt;p&gt;I have mentioned several times how vital writing is for me as a developer, and like every other activity, it can be a challenging journey. If you don't like it, try not to force writing on you, it should be something you enjoy doing. &lt;br&gt;
If you like it or haven't tried it out, try it! Don't be picky or too hard on yourself with your first result. Mistakes are allowed, and there is no perfect article/documentation.&lt;br&gt;
To make it easier to start or to get into writing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set yourself a goal to write something in a certain amount of time. For example, write a small article by the end of the week.&lt;/li&gt;
&lt;li&gt;Pick a topic covered by your daily work. Which framework are you using in your current tech stack? Try to explain how it works under the hood or set up a project with it.&lt;/li&gt;
&lt;li&gt;Reserve ~30 minutes a day in writing something. It can be a sentence or even some words.&lt;/li&gt;
&lt;li&gt;Present your work by publishing it or sharing it with your family, friend, or colleague by the end of the week. Ask them for some feedback!&lt;/li&gt;
&lt;li&gt;Did you feel stressed, happy, excited while doing this? Reflect on your emotions&lt;/li&gt;
&lt;li&gt;Redo this exercise in 3-4 weeks and compare the results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try to get as much enjoyment out of it as possible and make mistakes. There is no perfect article, and there will never be one. &lt;br&gt;
In mastering writing, you can reflect your technical perspective from different angles, improving your communication skill on several levels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#share-your-story"&gt;
  &lt;/a&gt;
  Share your story
&lt;/h2&gt;

&lt;p&gt;Do you have some tips on motivating yourself for writing, or what difficulties do you occur on your journey? Share your thoughts in the comments!&lt;/p&gt;

</description>
      <category>writing</category>
      <category>career</category>
      <category>webdev</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Tooltip using TailwindCss and AlpineJs</title>
      <author>Saurabh Mahajan</author>
      <pubDate>Wed, 18 Aug 2021 09:18:20 +0000</pubDate>
      <link>https://dev.to/100r0bh/tooltip-using-tailwindcss-and-alpinejs-47c8</link>
      <guid>https://dev.to/100r0bh/tooltip-using-tailwindcss-and-alpinejs-47c8</guid>
      <description>&lt;p&gt;In this Tutorial, we will build Tooltip using TailwindCss and AlpineJs and then encapsulate the logic into Laravel Component. At the end of the Tutorial, we will have a Tooltip like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/b3gTrRBOBjzQs2nge6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/b3gTrRBOBjzQs2nge6/giphy.gif" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before you begin further please make sure that you have a Laravel Project installed along with AlpineJs and TailwindCss. I would suggest installing Breeze in a Laravel Project as that automatically install both these dependencies.&lt;/p&gt;

&lt;p&gt;Our objective is to create a Help Icon and when user moves the mouse over the icon it would display the help text as tooltip.&lt;/p&gt;

&lt;p&gt;So first of all we would need a Help Icon. TailwindCss suggests using &lt;a href="https://heroicons.com/"&gt;HeroIcons&lt;/a&gt;, so we  would pick up an Icon, a question mark with Circle which has the following SVG.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"&amp;gt;
    &amp;lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would encapsulate it within a span tag like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="ml-2 h-5 w-5 cursor-pointer"&amp;gt;
  &amp;lt;!-- SVG Goes Here --&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have used the following Classes from TailwindCss:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ml-2: Margin Left of 0.5 rem&lt;/li&gt;
&lt;li&gt;h-5, w-5: Height &amp;amp; Width of 1.25 rem&lt;/li&gt;
&lt;li&gt;cursor-pointer: Changing the Cursor Style to Pointer on Mouseover &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can modify these classes as per you requirement.&lt;/p&gt;

&lt;p&gt;Now, let us also include the div which would display the Tooltip inside this span.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="ml-2 h-5 w-5 cursor-pointer"&amp;gt;
  &amp;lt;!-- SVG Goes Here --&amp;gt;
  &amp;lt;div&amp;gt;
     This is the Tooltip.
  &amp;lt;/div&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to hide this div initially and only display it when User moves the mouse over the SVG. We will use AlpineJs to achieve this.&lt;/p&gt;

&lt;p&gt;First of all we will define AlpineJS data which will have a property that we will initially set to false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x-data="{ tooltip: false }"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will &lt;code&gt;x-on&lt;/code&gt; directive to set this property to true on &lt;code&gt;mouseover&lt;/code&gt; as well as set this property to false on &lt;code&gt;mouseleave&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x-on:mouseover="tooltip = true" x-on:mouseleave="tooltip = false"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we will use this property to show and hide the div using &lt;code&gt;x-show&lt;/code&gt; directive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x-show="tooltip" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our Code at this stage looks like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span 
    x-data="{ tooltip: false }" 
    x-on:mouseover="tooltip = true" 
    x-on:mouseleave="tooltip = false"
    class="ml-2 h-5 w-5 cursor-pointer"&amp;gt;
  &amp;lt;!-- SVG Goes Here --&amp;gt;
  &amp;lt;div x-show="tooltip"&amp;gt;
     This is the Tooltip.
  &amp;lt;/div&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our Tooltip should now be working. However, we can further improve it by applying below TailwindCss Classes to the div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;div x-show="tooltip" 
      class="text-sm text-white absolute bg-blue-400 rounded-lg p-2
 transform -translate-y-8 translate-x-8"&amp;gt;
     This is the Tooltip.
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have applied the following TailwindCss Classes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;text-sm: Make the Tooltip text smaller&lt;/li&gt;
&lt;li&gt;text-white: Apply white Color to tooltip text&lt;/li&gt;
&lt;li&gt;absolute: To give it an absolute position so that it does not disturb the surrounding elements&lt;/li&gt;
&lt;li&gt;bg-blue-400: Background Color of Blue Shade&lt;/li&gt;
&lt;li&gt;rounded-lg: Apply Border Radius &lt;/li&gt;
&lt;li&gt;p-2: Padding of .5 rem&lt;/li&gt;
&lt;li&gt;transform: So that we can apply following translate classes&lt;/li&gt;
&lt;li&gt;-translate-y-8 translate-x-8: To shift the text on x-axis and y-axis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this stage you should have the same output as shown in the image at the start of the Tutorial. And we can also include multiple tooltips in a Blade File.&lt;/p&gt;

&lt;p&gt;However, let us move all our logic into a Component. We will create the file at &lt;code&gt;resources/views/components/tooltip.blade.php&lt;/code&gt; and move all our code into this file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span 
    x-data="{ tooltip: false }" 
    x-on:mouseover="tooltip = true" 
    x-on:mouseleave="tooltip = false"
    class="ml-2 h-5 w-5 cursor-pointer"&amp;gt;
  &amp;lt;!-- SVG Goes Here --&amp;gt;
  &amp;lt;div x-show="tooltip"
    class="text-sm text-white absolute bg-blue-400 rounded-lg 
    p-2 transform -translate-y-8 translate-x-8"
  &amp;gt;
     {{$slot}}
  &amp;lt;/div&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we have replaced the Tooltip Text with &lt;code&gt;$slot&lt;/code&gt;. So now within the Blade File we can call this Component and also pass the Tooltip Text like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;x-tooltip&amp;gt;This is the Tooltip Text&amp;lt;/x-tooltip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code shows how easy it is to use the Tooltip in our Blade File. And if we want to change the behavior of the Tooltip, we only need to do so in the Component File.&lt;/p&gt;

&lt;p&gt;Hope you have enjoyed this Article. For similar articles, you can follow me on &lt;a href="https://twitter.com/TheLaravelDev"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>alpinejs</category>
      <category>laravel</category>
    </item>
    <item>
      <title>What are your best tips for starting well in a new job?</title>
      <author>Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴</author>
      <pubDate>Wed, 18 Aug 2021 09:11:35 +0000</pubDate>
      <link>https://dev.to/jmfayard/what-are-your-best-tips-for-starting-well-in-a-new-job-fkf</link>
      <guid>https://dev.to/jmfayard/what-are-your-best-tips-for-starting-well-in-a-new-job-fkf</guid>
      <description>&lt;p&gt;Hello friends. I'm happy to start a new job soon 🎉 &lt;/p&gt;

&lt;p&gt;I'm also a bit anxious. &lt;/p&gt;

&lt;p&gt;In the past, I had been overwhelmed by all the unknown that comes with a new job: unknown people, unknown expectations, unknown tools, unknown processes, unknown codebase, unknown libraries or even programming language, unknown unknowns.&lt;/p&gt;

&lt;p&gt;What are some of your best tips to be more prepared to handle all of this?&lt;/p&gt;

</description>
      <category>career</category>
      <category>discuss</category>
      <category>help</category>
    </item>
    <item>
      <title>8 Technical Writing Tips I Learned From Writing For SitePoint, Draft.dev, and More</title>
      <author>Shahed Nasser</author>
      <pubDate>Wed, 18 Aug 2021 08:53:27 +0000</pubDate>
      <link>https://dev.to/shahednasser/8-technical-writing-tips-i-learned-from-writing-for-sitepoint-draft-dev-and-more-250k</link>
      <guid>https://dev.to/shahednasser/8-technical-writing-tips-i-learned-from-writing-for-sitepoint-draft-dev-and-more-250k</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://blog.shahednasser.com/8-technical-writing-tips-i-learned-from-writing-for-sitepoint-draft-dev-and-more/"&gt;my personal blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Late 2020, after writing articles sporadically, I finally created this blog. Through this blog, I was able to write many articles and tutorials about &lt;a href="https://blog.shahednasser.com/tag/javascript"&gt;Javascript&lt;/a&gt;, &lt;a href="https://blog.shahednasser.com/tag/browser-extensions"&gt;Browser Extensions&lt;/a&gt;, &lt;a href="https://blog.shahednasser.com/tag/magento"&gt;Magento 2&lt;/a&gt;, and more.&lt;/p&gt;

&lt;p&gt;Then, in May 2021, I branched out and applied to write for different platforms. I landed a couple of gigs and became an author for some notable websites or agencies like &lt;a href="https://www.sitepoint.com"&gt;SitePoint&lt;/a&gt;, &lt;a href="https://draft.dev"&gt;Draft.dev&lt;/a&gt;, &lt;a href="https://logrocket.com"&gt;LogRocket&lt;/a&gt;, &lt;a href="https://contentlab.io"&gt;ContentLab&lt;/a&gt;, and more. Check the &lt;a href="https://blog.shahednasser.com/my-guest-writings/"&gt;My Guest Writings&lt;/a&gt; page to see some of them.&lt;/p&gt;

&lt;p&gt;After writing for these websites or some of their clients, I learned so many things regarding different technologies. I also learned some tips that allowed me to improve my technical writing. In this article, I'll share some of them with you, and in the end, I'll add some links in case you want to apply to these platforms, as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-with-an-outline"&gt;
  &lt;/a&gt;
  Start with an Outline
&lt;/h2&gt;

&lt;p&gt;Previously, I would get an idea or a concept I'd think would be good to write about. Then, I'd start writing right away, or if it's a tutorial I'd start coding in parallel. However, when I started writing for SitePoint, I was always asked to provide an outline before I start writing an article. Similarly for Draft.dev whenever I was assigned an article, it always starts with an outline.&lt;/p&gt;

&lt;p&gt;Defining an outline for your article organizes your thoughts and ideas before getting into them. You might have a lot of useful knowledge to share, but it gets lost between the spontaneous sentences here and there. Outlining the topic's headlines first allows you to organize where each thought, idea, or tip should go.&lt;/p&gt;

&lt;p&gt;If you're not sure how you can write an outline, there are &lt;a href="https://www.sitepoint.com/writing-for-money-tips-for-planning-your-next-article-pitch/"&gt;some tutorials&lt;/a&gt; that can help you get started. However, you can also start with outlining articles in your thoughts if that's easier. Take time to plan how the article's structure will look, and once you think you're confident enough in the planned headings and ideas flow, you can start writing the article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simplify-tutorials"&gt;
  &lt;/a&gt;
  Simplify Tutorials
&lt;/h2&gt;

&lt;p&gt;When a certain section in your tutorial requires setting up something that isn't actually necessary to the topic of the tutorial, simplify that as best as possible. Here's an example: let's say you're doing a tutorial on something related to Node.js. You might need to store the data somehow, so you end up choosing MySQL as the database. So, you'll have to add setup instructions in your tutorial related to setting up the database, when it's actually not necessary to the tutorial.&lt;/p&gt;

&lt;p&gt;This can cause confusion, especially if the reader doesn't know about MySQL (in the example I'm giving) enough to keep up, or maybe they don't have a MySQL server installed on their machine anyway. Make sure your tutorials are simple and to the point. Even if something seems simple to you, it might be a hurdle to the reader and they end up leaving your tutorial trying to find a simpler one. In the example above, if you need to use something to store the data you can try using something simple like an SQLite database where there won't be any complicated configurations required. Even if the reader doesn't know anything about it, then don't really need to know to keep going with the article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-consistent"&gt;
  &lt;/a&gt;
  Stay Consistent
&lt;/h2&gt;

&lt;p&gt;When writing an article or a tutorial, it's important to stay consistent. This applies to many things. First, don't use different spellings throughout the article. For example, don't use Javascript at one point then use JavaScript at another. Second, make sure your code is consistent. Don't use &lt;code&gt;"&lt;/code&gt; at some points then use &lt;code&gt;'&lt;/code&gt; in others, or don't omit &lt;code&gt;;&lt;/code&gt; in some code blocks and leave it in others. Although these details might not seem like they're a big deal, providing consistency keeps your article organized and uniform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-assume-the-reader-knows"&gt;
  &lt;/a&gt;
  Don't Assume The Reader Knows
&lt;/h2&gt;

&lt;p&gt;A lot of times we use certain words, phrases, abbreviations, or overlook details thinking they're basics and just like we know them, the reader will know them as well. It's important to cater your articles to readers in general.&lt;/p&gt;

&lt;p&gt;When using abbreviations, you should at least use the full word or phrase once with its abbreviation, then you can use the abbreviation after that. For example, if your article mentions Create React App, you might be inclined to just use CRA. Instead, the first time you mention it you should do it as "Create React App (CRA)", then refer to it as CRA in the rest of your article.&lt;/p&gt;

&lt;p&gt;When it comes to tutorials, for example, using methods, try to link to documentation on that method even if your tutorial explains it briefly. This allows the reader to delve more into the details if they need to and see any additional details you might have overshadowed as they don't necessarily fit into the tutorial. You can link to documentation from &lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN Web Docs&lt;/a&gt; or other websites depending on the programming language you're using.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#always-link-to-sources"&gt;
  &lt;/a&gt;
  Always Link to Sources
&lt;/h2&gt;

&lt;p&gt;Similar to the previous section, you should always link to sources when possible. If you mention a survey or study results, browser limitations, quotes from other articles or books, or anything that comes from an original source, link back to it. This builds your article's credibility and maintains trust with the reader. Also, it allows the reader to check it out for themselves and see the details if needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-style-guide"&gt;
  &lt;/a&gt;
  Create a Style Guide
&lt;/h2&gt;

&lt;p&gt;When you first start writing articles, you might not care much about following a certain guideline for your articles. However, for the consistency of the blog as a whole and to maintain a certain structure for your articles, it's good to have a style guide. A style guide that an article must follow includes the type of headings it should use, certain words or formatting of the content, and other rules you can add yourself that you find are helpful through your journey in writing. You might be confused on how to start, but the more you write and start understanding the kind of blog you're creating, the clearer it comes.&lt;/p&gt;

&lt;p&gt;Try to start by creating a certain guideline for the content formatting. For example, a new line should be added before every new section or after every headline in the article. Start with simple guidelines and grow the list with time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-an-average-word-count"&gt;
  &lt;/a&gt;
  Have an Average Word Count
&lt;/h2&gt;

&lt;p&gt;A good tip I've learned by writing for all these different platforms is to keep an article between 1500~2000 words. You don't have to always keep the article in that range, but it's good to have an average range just to keep yourself in check and know when an article can be shortened or split into parts, or when it should be longer with more details.&lt;/p&gt;

&lt;p&gt;A lot of times I write a long article, then I take a second look at it and realize that I repeated myself a lot of times unnecessarily. After writing an article, if it's too long try to remove any unnecessary details or repeated statements. Make sure the article or tutorial focuses on its main purpose rather than unnecessary details. This helps the reader to get the best out of it when reading it and not get lost in irrelevant details. If it's a tutorial and can be split into parts, do that as it will be easier for the reader.&lt;/p&gt;

&lt;p&gt;On the other hand, if an article is too short take a second look at it. Are there ambiguous details? Is there room for confusion or misunderstandings? If so, take the time to re-iterate or elaborate on what you want to say or teach the reader. A lot of times we think that our point is coming across well, or what we are trying to teach is easily understood, but in reality, the article ends up missing the main point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-and-write"&gt;
  &lt;/a&gt;
  Learn and Write
&lt;/h2&gt;

&lt;p&gt;Before I started writing, I got to a point where I stopped learning new things. I just stuck to what I knew and never evolved. When I started writing, I started expanding my knowledge and learning new things to write about. Especially when I started writing for platforms like SitePoint or Draft.dev. A lot of times I was assigned an article that I had a basic knowledge of, or some I barely knew anything about. However, because I had to write about it for an article, I researched and went deep into the details of the topics. This helped me learn new things and expand my knowledge. I wasn't only writing to help others, I was learning through the process as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-be-confident-in-what-you-know"&gt;
  &lt;/a&gt;
  Bonus: Be Confident In What You Know
&lt;/h2&gt;

&lt;p&gt;A lot of people want to write but are scared that their knowledge is nothing compared to others, or that it will not benefit anyone. I felt the same way too when I started this blog. I thought that what I knew everyone knew, and that writing about these topics will not benefit anyone. However, after I started writing about all the different topics I had knowledge of, I received so many messages and emails thanking me for helping them resolve an issue they faced, learn more about a topic, or help them understand some things more. Even if you think your knowledge is limited, that does not mean others can't learn from you. None of us know everything, and someone is bound to learn from what you have to share.&lt;/p&gt;

&lt;p&gt;Additionally, even if no one reads or benefits from your article, you'll benefit yourself. Every single article or tutorial I wrote I learned something new from it. Sometimes it's minor details when I'm trying or searching for something, sometimes it's the entire topic. At the end of the day, there's at least one person learning from your writings, so be confident about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you're considering writing for these platforms, don't hesitate or think you can't do it. You can always apply and try, and hopefully, you'll learn through writing for them as well.&lt;/p&gt;

&lt;p&gt;I'll leave the links to apply to write for these websites below. Take the time to go through them if it interests you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjh8urvgLHyAhUE1hoKHfByDFEQFnoECAgQAw&amp;amp;url=https%3A%2F%2Fwww.sitepoint.com%2Fwrite-for-us%2F&amp;amp;usg=AOvVaw17PGRzWlDU3-SpPm2yZ1AB"&gt;SitePoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://draft.dev/write"&gt;Draft.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwiS1oj2gLHyAhWBzoUKHUOkAZEQFnoECAMQAQ&amp;amp;url=https%3A%2F%2Fblog.logrocket.com%2Fbecome-a-logrocket-guest-author%2F&amp;amp;usg=AOvVaw21Npb2S-nFefEDCz-Rcgng"&gt;LogRocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://contentlab.io/write-for-contentlab/"&gt;ContentLab.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>devjournal</category>
      <category>tips</category>
      <category>writing</category>
      <category>career</category>
    </item>
    <item>
      <title>JavaScript Form Validation and CSS Neumorphism (Video Tutorial)</title>
      <author>Chaoo Charles</author>
      <pubDate>Wed, 18 Aug 2021 08:25:32 +0000</pubDate>
      <link>https://dev.to/chaoocharles/javascript-form-validation-and-css-neumorphism-video-tutorial-4chb</link>
      <guid>https://dev.to/chaoocharles/javascript-form-validation-and-css-neumorphism-video-tutorial-4chb</guid>
      <description>&lt;p&gt;In the following tutorial we are going to cover JavaScript Client Side Form Validation, CSS Neumorphism and Show/Hide Password.&lt;/p&gt;

&lt;p&gt;The source code is available here: &lt;a href="https://github.com/chaoocharles/javascript-projects"&gt;https://github.com/chaoocharles/javascript-projects&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-video-tutorial"&gt;
  &lt;/a&gt;
  The Video Tutorial
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QPRTgsTkM1k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Upload multiple images simultaneously in your Django app using Dropzone Js</title>
      <author>Nick Langat</author>
      <pubDate>Wed, 18 Aug 2021 08:09:05 +0000</pubDate>
      <link>https://dev.to/nick_langat/upload-multiple-images-simultaneously-in-your-django-app-using-dropzone-js-11pi</link>
      <guid>https://dev.to/nick_langat/upload-multiple-images-simultaneously-in-your-django-app-using-dropzone-js-11pi</guid>
      <description>&lt;p&gt;Hello guys it's been a minute! I was on a small break but now am back and in this tutorial we are going to learn how we can upload multiple images to a Django back end. By default the Django behavior is that you select a single image and upload it to the server then repeat which begs the question isn't that a time consuming and tedious process, say if we have 1000 images?  It is.&lt;br&gt;
Fortunately, there is a tool that can help us go around this problem, a JavaScript library called &lt;a href="https://www.dropzonejs.com/"&gt;Dropzone&lt;/a&gt; . Let's not waste more seconds, let's get into it!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  PROJECT SETUP
&lt;/h3&gt;

&lt;p&gt;Let's quickly navigate to our desktop directory and bootstrap the back end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/Desktop

mkdir django_dropzone &amp;amp;&amp;amp; cd django_dropzone

virtualenv env

source env/bin/activate

pip install django

django-admin startproject mysite .

python manage.py startapp core 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next add &lt;code&gt;core&lt;/code&gt; to the list of installed apps in &lt;code&gt;settings.py&lt;/code&gt;. &lt;br&gt;
While there also update the templates section as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="s"&gt;'DIRS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'templates'&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then also update the static settings like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/static/'&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'media'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/media/'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#image-model"&gt;
  &lt;/a&gt;
  IMAGE MODEL
&lt;/h3&gt;

&lt;p&gt;We have set up our &lt;code&gt;settings.py&lt;/code&gt; and it's good to go. Move to &lt;code&gt;core/models.py&lt;/code&gt; and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="c1"&gt;# Create your models here.
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImageField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upload_to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'images/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ordering&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'-date'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go ahead and &lt;code&gt;makemigrations&lt;/code&gt; then &lt;code&gt;migrate&lt;/code&gt; to apply the changes to the db. &lt;br&gt;
Next we go the the &lt;code&gt;views.py&lt;/code&gt;. Write the following code to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JsonResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="c1"&gt;# Create your views here.
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'images'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;file_upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;my_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FILES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JsonResponse&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'fasle'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next create &lt;code&gt;core/urls.py&lt;/code&gt; and add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'home'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'upload/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file_upload&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To finalise the Python part, add the following code to the project's &lt;code&gt;urls.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;rom&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.static&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'admin/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'core.urls'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;document_root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dropzone-setup"&gt;
  &lt;/a&gt;
  DROPZONE SETUP
&lt;/h3&gt;

&lt;p&gt;We are done with the logic let's do the UI stuff. Create a folder called &lt;code&gt;static&lt;/code&gt; and in it create two files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch static/main.js

touch static/style.css

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following code to &lt;code&gt;main.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Dropzone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;autoDiscover&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myDropzone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Dropzone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#my-dropzone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;upload/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;maxFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;maxFilesize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;acceptedFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the following to &lt;code&gt;style.css&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;f8f8f8&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dz&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dashed&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;ccc&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;aliceblue&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next create a folder called &lt;code&gt;templates&lt;/code&gt; and in it create two files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch templates/base.html

touch templates/index.html

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following code to &lt;code&gt;base.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nx"&gt;doctype&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;Required&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;viewport&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;width=device-width, initial-scale=1, shrink-to-fit=no&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;Bootstrap&lt;/span&gt; &lt;span class="nx"&gt;CSS&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;Font&lt;/span&gt; &lt;span class="nx"&gt;awesome&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;custom&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{% static 'style.css' %}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{% static 'main.js' %}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rawgit.com/enyo/dropzone/master/dist/dropzone.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rawgit.com/enyo/dropzone/master/dist/dropzone.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;


    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Drag&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Drop&lt;/span&gt; &lt;span class="nx"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;block&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;endblock&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container mt-3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;block&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;endblock&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;Optional&lt;/span&gt; &lt;span class="nx"&gt;JavaScript&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;jQuery&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;then&lt;/span&gt; &lt;span class="nx"&gt;Popper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;then&lt;/span&gt; &lt;span class="nx"&gt;Bootstrap&lt;/span&gt; &lt;span class="nx"&gt;JS&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://code.jquery.com/jquery-3.5.1.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the following to &lt;code&gt;index.html&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;base.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h6&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;UPLOAD&lt;/span&gt; &lt;span class="nx"&gt;MULTIPLE&lt;/span&gt; &lt;span class="nx"&gt;IMAGES&lt;/span&gt; &lt;span class="nx"&gt;NOW&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h6&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;enctype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;multipart/form-data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;upload/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dropzone dz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-dropzone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;csrf_token&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fallback&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;multiple&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;endblock&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#spin-up-the-server"&gt;
  &lt;/a&gt;
  SPIN UP THE SERVER
&lt;/h3&gt;

&lt;p&gt;Now go to the terminal and:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the browser and upload images, be sure to select multiple. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwbNEvRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwv1qnrc5rp5sr9x8rq3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwbNEvRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwv1qnrc5rp5sr9x8rq3.png" alt="1"&gt;&lt;/a&gt;&lt;br&gt;
and&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQ-mo_Rx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yihpeitc8kagpd46jvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQ-mo_Rx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yihpeitc8kagpd46jvf.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mission-success"&gt;
  &lt;/a&gt;
  MISSION SUCCESS
&lt;/h3&gt;

&lt;p&gt;Yeah that should do it for this article. Thanks for keeping me company and coding along. You can grab the source code of this project &lt;a href="https://github.com/nicksonlangat/django-dropzone"&gt;here&lt;/a&gt;&lt;br&gt;
You can connect with me on &lt;a href="https://www.linkedin.com/in/langat-nickson-26081119a/"&gt;LinkedIn&lt;/a&gt; and on &lt;a href="https://twitter.com/NicksonLangat20"&gt;Twitter&lt;/a&gt;&lt;br&gt;
Cheers and see you next time!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>django</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
