<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What Is an A.I</title>
      <author>Phaneendra-Gullapalli</author>
      <pubDate>Sat, 08 May 2021 05:06:11 +0000</pubDate>
      <link>https://dev.to/phaneendragullapalli/what-is-an-a-i-3poo</link>
      <guid>https://dev.to/phaneendragullapalli/what-is-an-a-i-3poo</guid>
      <description>&lt;p&gt;What is Artificial intelligence?&lt;br&gt;
Artificial intelligence commonly referred to as "AI" is a wide-ranging branch of computer science concerned with building smart machines capable of performing tasks that typically require human intelligence. AI is an interdisciplinary science with multiple approaches, but advancements in machine learning and deep learning are creating a paradigm shift in virtually every sector of the tech industry.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fS7h1IEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uz12r00496ib7htc6f1c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fS7h1IEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uz12r00496ib7htc6f1c.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Where did AI come from ?&lt;br&gt;
Intelligent robots and artificial beings first appeared in the ancient Greek myths of Antiquity. Aristotle's development of the syllogism and its use of deductive reasoning was a key moment in mankind's quest to understand its own intelligence. While the roots are long and deep, the history of artificial intelligence as we think of it today spans less than a century. The following is a quick look at some of the most important events in AI.&lt;br&gt;
In 1950 , Alan Turing also known as "The Father of Computer Science" published the book named "Computing Machinery and Intelligence", proposing what is now known as the Turing Test, a method for determining if a machine is intelligent.&lt;br&gt;
In 1956, The phrase artificial intelligence was coined at the "Dartmouth Summer Research Project on Artificial Intelligence", which was led by John McCarthy who coined the term Artificial Intelligence, the conference, which defined the scope and goals of AI, is widely considered to be the birth of artificial intelligence as we know it today.&lt;br&gt;
In 1997 , IBM's Deep Blue beats world chess champion Gary Kasparov.&lt;br&gt;
In 2011 , IBM's Watson trounces the competition on Jeopardy!.&lt;br&gt;&lt;br&gt;
In 2014 , Google makes first self-driving car to pass a state driving test. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8836tbAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u45ajo00x4vivpg0p19j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8836tbAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u45ajo00x4vivpg0p19j.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
How is AI used ?&lt;br&gt;&lt;br&gt;
Artificial Intelligence usually falls into 2 main categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Narrow AI and &lt;/li&gt;
&lt;li&gt;Artificial General Intelligence.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Narrow AI :&lt;br&gt;
Narrow AI is all around us and is easily the most successful realization of artificial intelligence to date. With its focus on performing specific tasks, Narrow AI has experienced numerous breakthroughs in the last decade that have had "significant societal benefits and have contributed to the economic vitality of the nation," according to "Preparing for the Future of Artificial Intelligence," a 2016 report released by the Obama Administration. &lt;br&gt;
A few examples of Narrow AI include: &lt;br&gt;
• Google search&lt;br&gt;
• Image recognition software&lt;br&gt;
• Siri, Alexa and other personal assistants&lt;br&gt;
• Self-driving cars&lt;br&gt;
• IBM's Watson &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Artificial General Intelligence :&lt;br&gt;
The creation of a machine with human-level intelligence that can be applied to any task is the Holy Grail for many AI researchers, but the quest for AGI has been fraught with difficulty. &lt;br&gt;
The search for a "universal algorithm for learning and acting in any environment," (Russel and Norvig 27) isn't new, but time hasn't eased the difficulty of essentially creating a machine with a full set of cognitive abilities. &lt;br&gt;
AGI has long been the muse of dystopian science fiction, in which super-intelligent robots overrun humanity, but experts agree it's not something we need to worry about anytime soon.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>MX Linux</title>
      <author>Nitish-op</author>
      <pubDate>Sat, 08 May 2021 04:38:41 +0000</pubDate>
      <link>https://dev.to/nitish_op/mx-linux-41kn</link>
      <guid>https://dev.to/nitish_op/mx-linux-41kn</guid>
      <description>&lt;p&gt;What is MX Linux?&lt;/p&gt;

&lt;p&gt;A linux distribution or linux distro is an open source (not all) operating system(os) that is based on the linux kernel mostly used in Dedicated Media Center or Video Game Machine, severs, Streaming, Torrenting and supercomputing sectors.&lt;/p&gt;

&lt;p&gt;It is downloaded as a number of software packages and includes additional tools and applications.MX linux is a midweight linux os developed based on antiX and Debian stable (another linux distro).The name “MX” was chosen to combine the first letter of MEPIS (a set of Linux distributions) with the last of antiX, thus symbolizing their collaboration. It also adds its own software packages like KDE Plasma and Fluxbox. It is said to be a family of operating systems that are designed to combine elegant and efficient desktops with high stability and solid performance. It was first started in March 24, 2014 as ‘MX-14’ and there are 20 versions released till now and the latest version is MX-19.3 which is released on November 11,2020.&lt;/p&gt;

&lt;p&gt;MX Linux features a clean desktop&lt;/p&gt;

&lt;p&gt;The default Xfce desktop is quite appealing  with a perfect mixture of simplicity, ease of use and appeal to more seasoned users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLpIhSkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjc6yjh1vfs6ny7rl4pg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLpIhSkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjc6yjh1vfs6ny7rl4pg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although Xfce defaults to the panel being vertical on the side, the user is still instantly familiar with how the desktop works. Click the X button at the bottom to reveal a well-designed desktop menu that can be resized at will. You could even resize the Whisker menu so it fills the entire desktop&lt;/p&gt;

&lt;p&gt;What do you get when you install MX Linux? A lot. The pre-installed app highlight reel looks something like this:&lt;/p&gt;

&lt;p&gt;1.Firefox&lt;/p&gt;

&lt;p&gt;2.Thunderbird&lt;/p&gt;

&lt;p&gt;3.Catfish File Search&lt;/p&gt;

&lt;p&gt;4.Bulk Rename&lt;/p&gt;

&lt;p&gt;5.Conky&lt;/p&gt;

&lt;p&gt;6.LuckyBackup&lt;/p&gt;

&lt;p&gt;7.GIMP&lt;/p&gt;

&lt;p&gt;8.LibreOffice&lt;/p&gt;

&lt;p&gt;9.Clementine&lt;/p&gt;

&lt;p&gt;10.VLC Media Player&lt;/p&gt;

&lt;p&gt;11.PDF Arranger&lt;/p&gt;

&lt;p&gt;12.antiX Advert Blocker&lt;/p&gt;

&lt;p&gt;13.Asunder CD Ripper&lt;/p&gt;

&lt;p&gt;14.Samba&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sb_oCfFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5ha5ct8ttu840rqu8er.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sb_oCfFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5ha5ct8ttu840rqu8er.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you won't be missing out on much of anything. As for package management, MX Linux includes Synaptic Package Manager. The inclusion of Synaptic is one of the few dings on the user-friendliness scale to be found in MX Linux. Not that Synaptic is challenging to use, but it's certainly not one of the more user-friendly tools to be found in Linux. When you compare Synaptic to, say, GNOME Software, Synaptic not only looks a bit antiquated, it's not nearly as simple. Given that MX Linux seems to be centered on being a Linux distribution for everyone, the developers might want to consider including a more modern take on the app store. &lt;/p&gt;

&lt;p&gt;MX Tools&lt;/p&gt;

&lt;p&gt;MX Linux includes a few very handy tools, aptly named MX Tools. These tools cover the following tasks:&lt;/p&gt;

&lt;p&gt;Create system backup&lt;/p&gt;

&lt;p&gt;Install drivers &amp;amp; codecs&lt;/p&gt;

&lt;p&gt;Edit boot options &amp;amp; menu&lt;/p&gt;

&lt;p&gt;System cleaning&lt;/p&gt;

&lt;p&gt;Conky management&lt;/p&gt;

&lt;p&gt;Bash configuration&lt;/p&gt;

&lt;p&gt;Repository management&lt;/p&gt;

&lt;p&gt;USB format&lt;/p&gt;

&lt;p&gt;How to install MX Linux?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Go to the MX linux website through any browser and click on download MX Linux.&lt;/li&gt;
&lt;li&gt; Under how to get it, beside direct download, click on mirrors.&lt;/li&gt;
&lt;li&gt; In the Anywhere LinuxFreedom row click on X64.&lt;/li&gt;
&lt;li&gt; Create a bootable MX Linux disk such as USB,CD,DVD.
Note: whatever disk you select will have all of its contents deleted.&lt;/li&gt;
&lt;li&gt; Download Balena or Rufus(applications to convert a flash drive into bootable USB drivers).&lt;/li&gt;
&lt;li&gt; Launch BalenaEtcher then click select an image then select MX 19.3 then click on flash.&lt;/li&gt;
&lt;li&gt; Now restart the system or plug the MX Linux Bootable Flash Drive in a computer on which you wish to install MX Linux and re-start/ start the system to boot from Flash Drive and Install MX Linux.&lt;/li&gt;
&lt;li&gt; press F10 (or Del or F9 or F12 or Esc) to enter BIOS Setup. While the system would restart and initialize start pressing F9 (or Del or F10 or F12 or Esc) to display Boot Menu.&lt;/li&gt;
&lt;li&gt;  select Flash Drive as Boot Device and Hit Enter. Enter Login password and hit enter or press Log In button to Login to the MX Linux System. 
Minimum requirements are 512 MB of RAM,5 GB free hard drive space, Flash Drive, 4 GB free.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;MX Linux is an increasingly popular Linux distribution.  In addition to its impeccable stability – it comes packed with a lot of GUI tools which makes it easier for any user comfortable with Windows/Mac originally. Enjoy your experience with MX Linux. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>React Clean Code Tricks Everyone Should Know...</title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Sat, 08 May 2021 03:45:02 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/react-clean-code-tricks-everyone-should-know-3024</link>
      <guid>https://dev.to/sudarshansb143/react-clean-code-tricks-everyone-should-know-3024</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tldr-"&gt;
  &lt;/a&gt;
  🤖 TL:DR :
&lt;/h1&gt;

&lt;p&gt;React is unopinionatedly the most famous framework to write the web apps. Due to it's simplistic approach towards handling data and managing state, it is gaining more popularity day by day.&lt;/p&gt;

&lt;p&gt;Writing simple &lt;em&gt;todo&lt;/em&gt;  applications in react not required any deep understanding of the actual code base or the things which are happening under the hood. But, as soon as anyone plans to write the multipage application with react (using several third party libraries) then the individual must have to spend reasonable amount of time on the planning of several things such as :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which state managment library we are going to use &lt;/li&gt;
&lt;li&gt;Should we go with functional components or class based components &lt;/li&gt;
&lt;li&gt;How we are splitting our code ?&lt;/li&gt;
&lt;li&gt;Which bundler to use ? 
and Many more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, once this done then actual overhead begins i.e. writing code. This article will help to reduce this overhead and show you some real best practices to handle complex things such as &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Role base UI Preview &lt;/li&gt;
&lt;li&gt;Conditional rendering best practices
and many more &lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#role-based-ui-rendering-"&gt;
  &lt;/a&gt;
  🔐 Role Based UI Rendering :
&lt;/h3&gt;

&lt;p&gt;Almost all application contains basic role  based access management system.  Handeling each components UI according to the user role is  the key factor of every app. By  using object literals  we can easily manage the UI as follows&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imIHuH7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/669xagafr190v8bl9q8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imIHuH7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/669xagafr190v8bl9q8v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#use-fragments-instead-of-unnecessary-divs"&gt;
  &lt;/a&gt;
  Use 😎'Fragments' instead of unnecessary 😒"div's"
&lt;/h3&gt;

&lt;p&gt;When you are wrapping the multiple components in the single &lt;/p&gt; for following the principal of &lt;em&gt;Single Component Return&lt;/em&gt;. You are creating multiple s which will be overhead if your applications grows. Hence use fragments instead of divs&lt;br&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FirstComponentForUser&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SecondComponentForUser&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;



&lt;h3&gt;
  &lt;a href="#destructure-properties-earlier-"&gt;
  &lt;/a&gt;
  😈 Destructure properties earlier :
&lt;/h3&gt;

&lt;p&gt;If the component consumes the data of API (which returns JSON) then we must have to destructure the data earlier. This will prevent us from doing getting things like&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;
        Cannot destructure propertie &lt;span class="s1"&gt;'blah'&lt;/span&gt; of undefined

&lt;/code&gt;&lt;/pre&gt;





&lt;p&gt;For avoiding this do this &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BpjF0utp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gig0apdrieeupapgq3zz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpjF0utp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gig0apdrieeupapgq3zz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, is one another trick ! I have destructured the properties  using the default value which will help us if API return's NULL&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#strictly-follow-the-import-order"&gt;
  &lt;/a&gt;
  🤐 Strictly Follow The Import Order 🚚
&lt;/h3&gt;

&lt;p&gt;following the import order gives us the clear view about what are our custom imports and what are the built-IN/System imports. This will also helps use to identify  any third party imports like &lt;em&gt;axios, moment&lt;/em&gt; etc..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--utOli08q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra34wq23tz9irts1gmkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--utOli08q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra34wq23tz9irts1gmkr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#write-styles-in-a-performant-way-"&gt;
  &lt;/a&gt;
  Write 🎇styles🎇 in a performant way :
&lt;/h3&gt;

&lt;p&gt;If you have the common styling among the components, then it's better to extract in the styles of section of react. But, even after the applying the common styles if you need to modify something then use rest syntax &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XmnaGDqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw90ed9owaaz5gq4ximb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XmnaGDqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw90ed9owaaz5gq4ximb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#use-svgs-instead-of-png-or-jpeg-images"&gt;
  &lt;/a&gt;
  Use 👉SVG's instead of PNG or JPEG images
&lt;/h3&gt;

&lt;p&gt;Always prefer SVG's (Scaler Vector Graphics) over normal PNG or JPEG images. Reason is, scaling of the SVG is lot more superior than any other relevant image format. &lt;br&gt;
Hence, pixels of image will be rendered sharply regardless of the aspect ratio of the screen.&lt;/p&gt;




&lt;p&gt;🎇 Final Thoughts 🎇 :&lt;/p&gt;

&lt;p&gt;Best practices always looks ovewhelming when you are just getting started with any technology. But, they will save your time once you start building large scale applications.&lt;/p&gt;

&lt;p&gt;🙏Thanks For Reading !&lt;/p&gt;

&lt;p&gt;💜 See you in the next One ! 💜&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Dynamic Memory Allocation in C</title>
      <author>Tomislav Kraljic</author>
      <pubDate>Sat, 08 May 2021 02:01:05 +0000</pubDate>
      <link>https://dev.to/tomislavkraljic/dynamic-memory-allocation-in-c-36fh</link>
      <guid>https://dev.to/tomislavkraljic/dynamic-memory-allocation-in-c-36fh</guid>
      <description>&lt;p&gt;In this article, I will explain how to dynamically allocate memory in C. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;malloc()&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This function allows us to dynamically allocate memory.&lt;/li&gt;
&lt;li&gt; This function comes from the standard library. &lt;/li&gt;
&lt;li&gt; You specify the number of bytes of memory you want to allocate as the argument. &lt;/li&gt;
&lt;li&gt; It returns the address of the first byte of memory that is allocated. &lt;/li&gt;
&lt;li&gt;Because you get an address returned, you must pass in a pointer.&lt;/li&gt;
&lt;li&gt; Always call free() after done using malloc(). &lt;/li&gt;
&lt;li&gt; Syntax -&amp;gt; *ptr = (cast-type*) malloc(byte-size)* &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uCD1og0i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goabaryqaotoy3fa48ah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCD1og0i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goabaryqaotoy3fa48ah.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; You always want to check to see if you can allocate memory. If your computer is not able to, that is a major problem and you need to exit or abort from the program. &lt;/li&gt;
&lt;li&gt; In this program, we are asking the user the total amount of numbers. This will allocate that many integers. &lt;/li&gt;
&lt;li&gt; After that, we check to see if our pointer is pointing to NULL. If it is, then we abort from the program. This means that memory could not be allocated. &lt;/li&gt;
&lt;li&gt; After that, we make a for loop, asking the user to input each number. &lt;/li&gt;
&lt;li&gt; Then, we do another for loop to print each number to the console. &lt;/li&gt;
&lt;li&gt; Finally, we call free() to free up the memory. This is because we are no longer needing it. This will prevent a memory leak. &lt;/li&gt;
 When we dynamically allocate memory, it is our responsibility to manage that memory. If we don't, we will run into memory leaks. 
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;calloc()&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This function is very similar to malloc()&lt;/li&gt;
&lt;li&gt;It creates contiguous blocks of memory, where malloc() creates only one. &lt;/li&gt;
&lt;li&gt;It is slower than malloc()&lt;/li&gt;
&lt;li&gt;It initializes the allocated memory blocks to zero, where malloc() does not. &lt;/li&gt;
&lt;li&gt; It takes in two arguments : number of data items, and size of each data item. &lt;/li&gt;
&lt;li&gt; Syntax -&amp;gt; *ptr = (cast-type*)calloc(num of elements, byte-size)*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ARBuhLT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fo4agxhl8ix3afdmbmkw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ARBuhLT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fo4agxhl8ix3afdmbmkw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is very similar to the previous program, except instead of malloc(), we called calloc(). &lt;/li&gt;
&lt;li&gt; We set each data item with a initial value of zero. &lt;/li&gt;
&lt;li&gt; If we tried to access the value with malloc(), we would get a segmentation fault error. However, with calloc(), we would get 0.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;realloc()&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; This function enables you to reuse/extend memory that you previously allocated with malloc() or calloc(). &lt;/li&gt;
&lt;li&gt; Expects 2 arguments: &lt;ul&gt;
&lt;li&gt; a pointer containing an address that was previously returned by a call to malloc or calloc. &lt;/li&gt;
&lt;li&gt;Size in bytes of new memory you want allocated. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; Transfers the contents of the previously allocated memory to the new allocated memory. &lt;/li&gt;
&lt;li&gt; This function deallocates the old object and returns a pointer to a new object. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pkowKpA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhojvgbk6n1s0ygfdt7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pkowKpA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhojvgbk6n1s0ygfdt7i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt; 
&lt;li&gt;This is a simple program to demonstrate how realloc() works. &lt;/li&gt;
&lt;li&gt;We create a char pointer that holds 15 characters. Then, we copy "tommy" to that string. &lt;/li&gt;
&lt;li&gt; Then, we print the string and memory address of it. &lt;/li&gt;
&lt;li&gt; After that, we reallocate more memory. Now, instead of holding 15 characters, now we are holding 25 characters. &lt;/li&gt;
&lt;li&gt; We concatenate "kraljic" to the other string and print the contents of the string and the memory address. &lt;/li&gt;
&lt;li&gt; You will notice, that there are two different memory addresses. This is because, we initially had the string in one memory address. However, when we called realloc(), we deallocated the old memory and allocated memory in a new address. &lt;/li&gt;
&lt;li&gt; Finally, we call free to free up the memory so we don't have a memory leak. &lt;/li&gt;
&lt;/ul&gt;  




&lt;p&gt;&lt;em&gt;Guidelines&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Always, always, always call free() when you are done with the memory. We do not want memory leaks.&lt;/li&gt;
&lt;li&gt; Avoid allocating lots of small amount of memory. &lt;/li&gt;
&lt;li&gt; Only dynamically allocate memory if you need to. &lt;/li&gt;
&lt;li&gt; Allocating many small blocks of memory will much more overhead than allocating fewer larger blocks. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>computerscience</category>
      <category>cpp</category>
      <category>programming</category>
    </item>
    <item>
      <title>Should we dig deeper into the development tools we use?</title>
      <author>Janos Vajda</author>
      <pubDate>Sat, 08 May 2021 01:41:23 +0000</pubDate>
      <link>https://dev.to/janosvajda/should-we-dig-deeper-into-the-development-tools-we-use-5gne</link>
      <guid>https://dev.to/janosvajda/should-we-dig-deeper-into-the-development-tools-we-use-5gne</guid>
      <description>&lt;p&gt;If I want to answer concisely, then I can write only that: yes, we should.&lt;/p&gt;

&lt;p&gt;But, of course, this topic is much more complicated because we are usually busy and cannot check out our dev tool's source code. Furthermore, developers are humans, so we can be lazy or think digging in a big codebase is useless and tiring. &lt;/p&gt;

&lt;p&gt;I share a story that happened about 7-8 years ago, and it might be able to explain what I exactly mean. &lt;/p&gt;

&lt;p&gt;I usually start to work very early (between 2 am and 5 am), so before the Covid era, I quite often was that person who opened the office. &lt;/p&gt;

&lt;p&gt;Once, I sat in the office and watched a Linux kernel's source code as I tried to understand how its process scheduler works. I did not want to do with it anything. It just came to my mind, and I would have liked to know it a bit deeper. Also, looking at it was fun as that piece of code runs on a billion and billion different kinds of devices, which is amazing. I wanted to learn something from its code. So firstly, I investigated where it is in the kernel's code. When you try to find something in a huge codebase, this investigation is one of the useful things because, during this process, you can learn something new about the structure of the codebase, for instance. &lt;br&gt;
When I found that file which seemed to be the scheduler's code, I went through it and tried to understand what it does. Of course, I did not understand it deeply enough, but It was a good adventure. The main thing for me was the learning. Learning something about that clever code, and also learning the history of that file. Who created its first version? When was created? How was changed? Why was changed? Is it still in the kernel or deprecated? And many more questions. &lt;br&gt;
Once, after this, when one of my colleagues arrived at the office, we started to talk about totally other things, and suddenly I mentioned to him that the Linux source code is so beautiful, and I looked into it this one and that one. He smiled, but I saw on his face that he did not understand why I spent time on this weird thing. I presumed he thought it was wasting of time. He also might have thought I was crazy. Could be :) &lt;br&gt;
Anyway, I enjoyed it, and I usually still do it. Yep, I am aware that we are different, so in my ex-colleague world, he was right. In that world, developers use their tools and do not care too much about how their tools, programming languages, frameworks work. We use them. But, I am in a different galaxy, and here knowing my tools is important to me. Not just because of the learning. I also want to give respect to those fantastic developers who created my tools. The source code created by them usually is fantastic, and digging these codebases a bit more deeply can improve my knowledge. But, also, we can find funny and surprising things in their source code. Anyway, I like to pull down my tools' source codes and try to understand them. &lt;/p&gt;

&lt;p&gt;Ok, let's try to find some interesting examples. &lt;/p&gt;

&lt;p&gt;I like the language-agnostic development paradigm, so I always try to use that programming language appropriate for a particular task. One of my favourite languages is JavaScript and TypeScript. I really love TypeScript, so if I have a new project, I usually try to use it. I know there are plenty of developers who do the same as TypeScript seems to be very popular. But the question here is: do we know TypeScript? I mean, yeah, of course, we know its syntax. We can keep telling all obvious facts about it: we can use interfaces in TypeScript so our core can be more generic and SOLID, we can encapsulate our classes properly and many more things. But do we know how TypeScript works? How does its codebase look like? How does it start when you type in your console: &lt;code&gt;tsc --help&lt;/code&gt;, for example? Or what programming language is it written? Is its codebase fully tested? Do its developers follow the SOLID principle? I might be weird, but I want to know the answer to these questions, so this is why I cloned its code from GitHub, compiled it and investigated all answers I needed. It's not always easy but almost always fun. How can we do it? Honestly, there is no exact methodology for this because every single codebase is different. This is a learning mechanism and adventure. So, yep let's see TypeScript as an example. &lt;/p&gt;

&lt;p&gt;I presume you have Node and NPM installed in your machine. If you have, then please, open your console and clone TypeScript's repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/microsoft/TypeScript.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do not have Gulp, you should install it as they use Gulp for the building process. So, firstly change the directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd TypeScript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and install Gulp (I installed it with -g parameter, which installs it globally.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and after this, you can run;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, let's try to find which part of the code handles the --help parameter. This sounds very trivial, but it can be a good starting point for getting more familiar with the code.&lt;/p&gt;

&lt;p&gt;Let's open the source code in your preferred editor and try to find it. We can do it in many ways. We can search the string "--help" (we can bet it won't work :)), we can search for a "help" word without dashes (it won't work either as it would provide too many search results). How can we do it? I would recommend another way. Firstly, I would build the application and try to run it, and after this, we should be able to do debugging. TypeScript is written in TypeScript, and we can build it by Gulp. So you can run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gulp local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This builds the app into a built/local directory. So, if you run it and the building process is done, then you should be able to run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node ./built/local/tsc.js --help
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, so now we can try to add some console.log to src/tsc/tsc.ts, and we will see what is happening. Of course, It does not work. We will get an error message during the building process.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;error TS2584: Cannot find name 'console'. Do you need to change your target library? Try changing the &lt;code&gt;lib&lt;/code&gt; compiler option to include 'dom'.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did not install @types/node (&lt;code&gt;npm install @types/node&lt;/code&gt;), so I cannot find console definitions. Moreover, using console logs is not the most sophisticated way how can debug TypeScript code. &lt;em&gt;Instead of using console logs, we should use a debugger in our source code editor.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Let's have a look at this debugging process now. So how can we debug the TypeScript source code? &lt;/p&gt;

&lt;p&gt;I use VS Code for TypeScript code editing, and it has its own Run &amp;amp; Debug function. Please, open your editor, and open the TypeScript directory in it. &lt;/p&gt;

&lt;p&gt;So, we want to debug the tsc command's --help parameter. Firstly, you need to create or edit the &lt;code&gt;.vscode\launch.json file&lt;/code&gt;. I share that file I created for this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "version": "0.1.0",
    "configurations": [
      {
        "type": "node",
        "protocol": "inspector",
        "request": "launch",
        "name": "Testing of debugging",
        "program": "${workspaceFolder}/built/local/tsc.js",
        "args": [
          "--help"
        ],
        "env": {
          "NODE_ENV": "develop"
        },
        "sourceMaps": true,
        "smartStep": true
      }
    ]
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should open src\tsc\tsc.ts file and go to this line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ts.executeCommandLine(ts.sys, ts.noop, ts.sys.args);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ok, now you can add a breaking point to this line, and you can step into the next operation with the debug toolbar's "Step into" button. You can see this on the next two screenshots.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--20pOR5BC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lvzh9sj5sv7is7jw4b9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--20pOR5BC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lvzh9sj5sv7is7jw4b9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpxSNZLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77af0djsjhwoidrgv3gc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpxSNZLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77af0djsjhwoidrgv3gc.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you hover over your mouse pointer on any variable, it shows you the current value of the variable. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5dXgQgPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i9gs5capvww592po8hf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5dXgQgPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i9gs5capvww592po8hf.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can easily investigate what happens with the --help parameter or any other parameter when you run the tsc command. Is it easy and super useful, I think.&lt;/p&gt;

&lt;p&gt;Anyway, at this point in the article, we can say that we learnt something new. I reckon this is a fun learning process. We just opened the TypeScript source code and have not even looked at any real code; despite this, you have learned something new: how can you debug TypeScript code. This is why I do the same thing. I can learn new things, and also I am getting more familiar with those developer tools I use every day.&lt;/p&gt;

&lt;p&gt;Of course, &lt;strong&gt;this was just an example&lt;/strong&gt;, as you might have already know how you can do TypeScript debugging, but this does not matter as I am sure you can find other things in TypeScript source code that can be a piece of new information for you. And this is why I like browsing my tools source codes. It is a big learning journey. &lt;/p&gt;

&lt;p&gt;Let's take the other investigation. What happens in TypeScript if tsc runs a HelloWorld.ts?&lt;/p&gt;

&lt;p&gt;I created a HelloWorld.ts out of the TypeScript directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ..
touch HelloWorld.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open it in your editor, and its content should be something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let message: string = 'Hello world!';
console.log(message);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I changed the .vscode/launch.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "version": "0.1.0",
    "configurations": [
      {
        "type": "node",
        "protocol": "inspector",
        "request": "launch",
        "name": "Testing of debugging",
        "program": "${workspaceFolder}/built/local/tsc.js",
        "args": [
          "../HelloWorld.ts"
        ],
        "env": {
          "NODE_ENV": "develop"
        },
        "sourceMaps": true,
        "smartStep": true
      }
    ]
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, now you can see what is happening in TypeScript source code if you Start debugging and step into code. &lt;/p&gt;

&lt;p&gt;If you click on the Run And Debug icon on VS Code, you can see the whole call stack, all used variables, and those scripts loaded. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z8hy_OVq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3is03i31hi7yeydizdet.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z8hy_OVq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3is03i31hi7yeydizdet.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Setup of debugging can always be a starting point if we want to be more familiar with any codebase; if it works, then we can check everything: structure, coding style, name conventions - everything. The other meaningful thing is looking at the project's unit tests and running them as they can tell us a lot of new information.&lt;/p&gt;

&lt;p&gt;Browsing our tools/programming languages/frameworks source codes is useful, I think. These examples were minor things, but anyway, this is just for learning.&lt;/p&gt;

&lt;p&gt;Thanks for reading this. Have a great day. :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>learning</category>
      <category>debugging</category>
    </item>
    <item>
      <title>Vue Slots and Reusable components </title>
      <author>crisarji</author>
      <pubDate>Sat, 08 May 2021 01:00:55 +0000</pubDate>
      <link>https://dev.to/crisarji/vue-slots-and-reusable-components-5g3p</link>
      <guid>https://dev.to/crisarji/vue-slots-and-reusable-components-5g3p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#vue-slots-and-reusable-components"&gt;
  &lt;/a&gt;
  Vue Slots and Reusable components
&lt;/h2&gt;

&lt;p&gt;Hello developer pal!, glad to see you here.&lt;/p&gt;

&lt;p&gt;In this post, we will take a look at the way a simple feature as it is &lt;code&gt;slot&lt;/code&gt; in &lt;em&gt;vue&lt;/em&gt; could spare a lot of time and effort when having the same components displaying different data.&lt;/p&gt;

&lt;p&gt;Sometimes, we need to replicate the same task with different data, for instance, you have a design system which determines that every single list element throughout the site needs to be consistent, this means having the same height, width, font, etc. Sounds fair!&lt;/p&gt;

&lt;p&gt;For accomplishing this, there are 2 options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Copy + Paste&lt;/code&gt; the same listing component in multiple places; the fallback of this approach comes when, for example, the &lt;em&gt;font&lt;/em&gt; of the list item needs to be updated; if you, by chance, have in the project 1, 2 or 3 list items, you can manually make the change, all good!, but what happens when your project has a whole bunch of listing components?, it would be required go one by one and make the change; the effort on dev, qa, and the risk of letting one scenario out of the scope is high.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a &lt;code&gt;Reusable Component&lt;/code&gt;, this will allow it to make the change in one only place and affect all of them at once!, here the &lt;code&gt;slot&lt;/code&gt; concept comes handy, when using a &lt;code&gt;slot&lt;/code&gt;, you can have the same look and feel, behavior, properties and others available for all the listing components.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#show-me-the-code"&gt;
  &lt;/a&gt;
  Show Me The Code
&lt;/h2&gt;

&lt;p&gt;The steps to be focused on are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Having 1 reusable listing component&lt;/li&gt;
&lt;li&gt;Having different view components, injected with different data&lt;/li&gt;
&lt;li&gt;Having different view components, displaying different elements&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me share to you the GitHub code &lt;a href="https://github.com/crisarji/vuejs-slots"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-having-1-reusable-listing-component"&gt;
  &lt;/a&gt;
  1. Having 1 reusable listing component
&lt;/h2&gt;

&lt;p&gt;How would it look a &lt;code&gt;slot&lt;/code&gt; for the example purposes?:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(element, index) in elements"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"element.id"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"element"&lt;/span&gt; &lt;span class="na"&gt;v-bind:element=&lt;/span&gt;&lt;span class="s"&gt;"element"&lt;/span&gt; &lt;span class="na"&gt;v-bind:index=&lt;/span&gt;&lt;span class="s"&gt;"index"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet above, there is a &lt;code&gt;v-for&lt;/code&gt; directive which loops over the array in a property named &lt;code&gt;elements&lt;/code&gt;; what it is happening is that every single element, and its index, are available to be part of the template, the &lt;code&gt;slot&lt;/code&gt; has the option for &lt;em&gt;binding&lt;/em&gt; values, these are available as soon as the &lt;code&gt;slot&lt;/code&gt; is invoked.&lt;/p&gt;

&lt;p&gt;This simple is to have a reusable component with &lt;code&gt;slots&lt;/code&gt;!, the html elements can be modified as required: add css, new attributes, new binding props, everything will be ready to be used when invoked the component(check the &lt;a href="https://github.com/crisarji/vuejs-slots"&gt;GitHub&lt;/a&gt; repo for a nicer experience including &lt;code&gt;Tailwind&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-having-different-view-components-injected-with-different-data"&gt;
  &lt;/a&gt;
  2. Having different view components, injected with different data
&lt;/h2&gt;

&lt;p&gt;For the sake of the exercise, 3 different arrays are present for feeding the view components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;agents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;07531267-D&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Remedios Carmona&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;deals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;91958619&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dalal Heidema&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;deals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NNaN31539321&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Julien Legrand&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;deals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1NNaN60472038&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Karina da Cunha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;deals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;060469-1435&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Evelyn Scheerer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;deals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supervisors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;75687&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Idelso Gonçalves&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;agents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2NNaN64983816&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cassandra Leroy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;agents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;N901057Z&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Arron Johnston&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;agents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;18066349671&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Siham Reitan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;agents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;48926083&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mariam Linde&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;agents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;managers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NaNNA831undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Niilo Keranen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;department&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2NNaN40789264&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Leana Deschamps&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;department&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Operations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;283707860&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Irma Boyd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;department&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HHRR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;290471&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nicole Oehme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;department&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ACC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1NNaN44873525&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Antonin Rey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;department&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Facilities&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can notice, the &lt;code&gt;views&lt;/code&gt; will be &lt;code&gt;Agents&lt;/code&gt;, &lt;code&gt;Supervisors&lt;/code&gt; and &lt;code&gt;Managers&lt;/code&gt;; as aforementioned, this items must be listed up following a design system specifications(width, height, font, typo) for keeping the consistency.&lt;/p&gt;

&lt;p&gt;Let's suppose that the design system ask for something like these:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Agents&lt;/code&gt; view:&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W4SHSCLR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/crisarji/blogs-dev.to/master/blog-posts/vue-slots/assets/agent-list.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4SHSCLR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/crisarji/blogs-dev.to/master/blog-posts/vue-slots/assets/agent-list.png"&gt;&lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;Supervisors&lt;/code&gt; view:&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0DckMZO1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/crisarji/blogs-dev.to/master/blog-posts/vue-slots/assets/supervisor-list.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0DckMZO1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/crisarji/blogs-dev.to/master/blog-posts/vue-slots/assets/supervisor-list.png"&gt;&lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;Managers&lt;/code&gt; view:&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1kdRydfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/crisarji/blogs-dev.to/master/blog-posts/vue-slots/assets/manager-list.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1kdRydfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/crisarji/blogs-dev.to/master/blog-posts/vue-slots/assets/manager-list.png"&gt;&lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;After taking a look at the mocking data and the requirements, what is changing are the fields to display, the order, and the background, since the &lt;code&gt;Copy+Paste&lt;/code&gt; approach is discarded, the other possible way to go is the &lt;em&gt;Reusable Components&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-having-different-view-components-displaying-different-elements"&gt;
  &lt;/a&gt;
  3. Having different view components, displaying different elements
&lt;/h2&gt;

&lt;p&gt;Let's dig a bit into the implementation of the &lt;em&gt;Reusable Component&lt;/em&gt; and &lt;em&gt;slots&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The very first view is the one for &lt;code&gt;Agents&lt;/code&gt;, we need to import the &lt;em&gt;reusable component&lt;/em&gt;, register it, add an input property for feeding the list of elements and render it out(skipped steps in here, you can check the source code for more info), let focus in the &lt;code&gt;template&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Agents&lt;/code&gt; view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;custom-list&lt;/span&gt; &lt;span class="na"&gt;:listElements=&lt;/span&gt;&lt;span class="s"&gt;"listElements"&lt;/span&gt; &lt;span class="na"&gt;itemStyling=&lt;/span&gt;&lt;span class="s"&gt;"justify-between bg-gray-300"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;v-slot:element=&lt;/span&gt;&lt;span class="s"&gt;"{ element }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex w-1/5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex w-2/5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex w-2/5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/custom-list&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A couple of interesting things from above snippet:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;custom-list&lt;/code&gt;(our reusable component) is expecting for the list of elements and an item styling, also, it is accessing the &lt;code&gt;element&lt;/code&gt; binding, so the data to be display is dynamic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What about the second view?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Supervisors&lt;/code&gt; view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;custom-list&lt;/span&gt; &lt;span class="na"&gt;:listElements=&lt;/span&gt;&lt;span class="s"&gt;"listElements"&lt;/span&gt; &lt;span class="na"&gt;itemStyling=&lt;/span&gt;&lt;span class="s"&gt;"justify-between bg-blue-300"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;v-slot:element=&lt;/span&gt;&lt;span class="s"&gt;"{ element }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex w-2/5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex w-1/5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-end w-2/5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/custom-list&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is pretty similar to the previous one, the biggest difference is that a different color is send to affect the background(in case you are not familiar with Tailwind, it is this &lt;code&gt;bg-blue-300&lt;/code&gt;), and the order of the divs(the avatar from the mocks will be placed at the center)&lt;/p&gt;

&lt;p&gt;Last but not least:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Managers&lt;/code&gt; view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;custom-list&lt;/span&gt; &lt;span class="na"&gt;:listElements=&lt;/span&gt;&lt;span class="s"&gt;"listElements"&lt;/span&gt; &lt;span class="na"&gt;itemStyling=&lt;/span&gt;&lt;span class="s"&gt;"justify-between bg-green-300"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;v-slot:element=&lt;/span&gt;&lt;span class="s"&gt;"{ element, index }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex w-2/5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-center w-2/5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex w-1/5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/custom-list&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also similar to the other 2(that's the idea), but changing the background color again, the order of the elements to be displayed(avatar at the end) and also including the other binding property declared in the &lt;em&gt;reusable component&lt;/em&gt;, the &lt;code&gt;index&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After all the steps above, this is the output:&lt;/p&gt;



&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TpNM7Yuj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/crisarji/blogs-dev.to/master/blog-posts/vue-slots/assets/vue-slots-switching.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TpNM7Yuj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/crisarji/blogs-dev.to/master/blog-posts/vue-slots/assets/vue-slots-switching.gif"&gt;&lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;&lt;em&gt;Notes&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can find the repo for &lt;a href="https://github.com/crisarji/vuejs-slots"&gt;Vue2&lt;/a&gt; and &lt;a href="https://github.com/crisarji/vue3-slots"&gt;Vue3&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Feel free to fork it and/or import it in an online code editor(I tried but there seems to be a known &lt;a href="https://stackoverflow.com/questions/66112768/how-to-fix-vue-is-not-defined-in-vue-3-vue-router-4"&gt;error&lt;/a&gt; )&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Challenge&lt;/em&gt;: The &lt;code&gt;CustomList&lt;/code&gt; component could be register globally, in case you want to stop importing it throughout the site&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As shown above, the &lt;code&gt;slots&lt;/code&gt; could spare some precious development time, help with the scalability and be customized as required; maybe you could have a better way to do it, let's discuss in a thread below!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>github</category>
    </item>
    <item>
      <title>Debugging</title>
      <author>Randy Rivera</author>
      <pubDate>Sat, 08 May 2021 00:19:13 +0000</pubDate>
      <link>https://dev.to/rthefounding/debugging-4kl2</link>
      <guid>https://dev.to/rthefounding/debugging-4kl2</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Debugging is the process of going through your code, finding any issues, and fixing them.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Issues in code generally come in three forms: syntax errors that prevent your program from running, runtime errors where your code has unexpected behavior, or logical errors where your code doesn't do what you intended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In these upcoming posts, you'll learn how to use the JavaScript console to debug programs and prevent common issues before they happen.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#using-the-javascript-console-to-check-the-value-of-a-variable"&gt;
  &lt;/a&gt;
  Using the JavaScript Console to Check the Value of a Variable
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Both Chrome and Firefox have excellent JavaScript consoles, also known as DevTools, for debugging your JavaScript.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;console.log()&lt;/code&gt; method, which "prints" the output of what's within its parentheses to the console, will likely be the most helpful debugging tool. Placing it at strategic points in your code can show you the intermediate values of variables. It's good practice to have an idea of what the output should be before looking at what it is. Having check points to see the status of your calculations throughout your code will help narrow down where the problem is.&lt;/li&gt;
&lt;li&gt;Ex:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 5;
let b = 1;

let sumAB = a + b;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(sumAB); the console will display 6
console.log(a); console will display 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#use-typeof-to-check-the-type-of-a-variable"&gt;
  &lt;/a&gt;
  Use typeof to Check the Type of a Variable
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can use &lt;code&gt;typeof&lt;/code&gt; to check the data structure, or type, of a variable. This is useful in debugging when working with multiple data types. If you think you're adding two numbers, but one is actually a string, the results can be unexpected. Type errors can lurk in calculations or function calls. Be careful especially when you're accessing and working with external data in the form of a JavaScript Object Notation (JSON) object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ex:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(typeof "");
console.log(typeof 0);
console.log(typeof []);
console.log(typeof {});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In order, the console will display the strings &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, and &lt;code&gt;object&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript recognizes six primitive (immutable) data types: &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Null&lt;/code&gt;, &lt;code&gt;Undefined&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, and &lt;code&gt;Symbol&lt;/code&gt; (new with ES6) and one type for mutable items: &lt;code&gt;Object&lt;/code&gt;. Note that in JavaScript, arrays are technically a type of object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Other Ex:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let seven = 7;
let three = "3";
console.log(typeof seven); will display number
console.log(typeof three); will display string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#catch-misspelled-variable-and-function-names"&gt;
  &lt;/a&gt;
  Catch Misspelled Variable and Function Names
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;console.log()&lt;/code&gt; and &lt;code&gt;typeof&lt;/code&gt; methods are the two primary ways to check intermediate values and types of program output. One syntax-level issue that fast typers can commiserate with is the humble spelling error.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Transposed, missing, or mis-capitalized characters in a variable or function name will have the browser looking for an object that doesn't exist - and complain in the form of a reference error. Remember JavaScript variable and function names are case-sensitive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's Fix the two spelling errors in the code so the netWorkingCapital calculation works.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let receivables = 10;
let payables = 8;
let netWorkingCapital = recievables - payable;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(`Net working capital is: ${netWorkingCapital}`); will display ReferenceError: recievables is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let receivables = 10;
let payables = 8;
let netWorkingCapital = receivables - payables;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(`Net working capital is: ${netWorkingCapital}`); will display Net working capital is: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#catch-unclosed-parentheses-brackets-braces-and-quotes"&gt;
  &lt;/a&gt;
  Catch Unclosed Parentheses, Brackets, Braces and Quotes
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Another syntax error to be aware of is that all opening parentheses, brackets, curly braces, and quotes have a closing pair. Forgetting a piece tends to happen when you're editing existing code and inserting items with one of the pair types. Also, take care when nesting code blocks into others, such as adding a callback function as an argument to a method.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One way to avoid this mistake is as soon as the opening character is typed, immediately include the closing match, then move the cursor back between them and continue coding. Fortunately, most modern code editors generate the second half of the pair automatically.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's Fix the two pair errors in the code.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let myArray = [1, 2, 3;
let arraySum = myArray.reduce((previous, current =&amp;gt;  previous + current);
console.log(`Sum of array values is: ${arraySum}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Answer:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let myArray = [1, 2, 3];
let arraySum = myArray.reduce((previous, current) =&amp;gt; previous + current);
console.log(`Sum of array values is: ${arraySum}`); // will display Sum of array values is: 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-reduce-method-reduces-an-array-to-a-single-value-if-youre-not-familiar-with-it-the-following-code-shows-an-example-of-using-the-the-method"&gt;
  &lt;/a&gt;
  The reduce() method reduces an array to a single value. If you’re not familiar with it, the following code shows an example of using the the method:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array1 = [1, 2, 3, 4];
console.log(array1.reduce((accumulator, currentValue) =&amp;gt; accumulator + currentValue));  // expected output: 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You can also define the argument to the reduce method as a variable or constant and hand that in to the function.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array1 = [1, 2, 3, 4];
const reducer = (accumulator, currentValue) =&amp;gt; accumulator + currentValue;
// 1 + 2 + 3 + 4
console.log(array1.reduce(reducer)); // expected output: 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#catch-mixed-usage-of-single-and-double-quotes"&gt;
  &lt;/a&gt;
  Catch Mixed Usage of Single and Double Quotes
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript allows the use of both single (&lt;code&gt;'&lt;/code&gt;) and double (&lt;code&gt;"&lt;/code&gt;) quotes to declare a string.&lt;/li&gt;
&lt;li&gt;Having two choices is great when a string has contractions or another piece of text that's in quotes. Just be careful that you don't close the string too early, which causes a syntax error.&lt;/li&gt;
&lt;li&gt;Ex:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const quoteInString = "Randy once said 'I wanna play Rocket League.'";
const incorrectString = 'I've had a perfectly wonderful evening, but this wasn't it.';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The first one is correct, but the second is incorrect.&lt;/li&gt;
&lt;li&gt;Of course, it is okay to use only one style of quotes. You can escape the quotes inside the string by using the backslash (&lt;code&gt;\&lt;/code&gt;) escape character:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const allSameQuotes = 'I\'ve had a perfectly wonderful evening, but this wasn\'t it.';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Vos premiers pas avec Express.js</title>
      <author> </author>
      <pubDate>Fri, 07 May 2021 23:53:26 +0000</pubDate>
      <link>https://dev.to/ericcodeur/votre-premiers-pas-avec-express-js-2ba4</link>
      <guid>https://dev.to/ericcodeur/votre-premiers-pas-avec-express-js-2ba4</guid>
      <description>&lt;h1&gt;Qu'est-ce que Express?&lt;/h1&gt;

&lt;p&gt;Express est un framework Web minimaliste et rapide pour Node.js. C'est également de loin le framework Web Node.js le plus populaire.&lt;/p&gt;

&lt;h1&gt;Que pouvons-nous faire avec Espress?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Application Web: Express est un framework web Node.js minimaliste et flexible qui fournit un ensemble robuste de fonctionnalités pour les applications Web et mobiles&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API: avec une myriade de méthodes utilitaires HTTP et de middleware à votre disposition, la création d'une API robuste est simple et rapide.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Espress n'est pas un framework frontend comme React ou Vue. Express est un framework backend qui complètera un framework frontend pour créer des applications full stack&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Prérequis? &lt;/h1&gt;

&lt;p&gt;Pour utiliser Express, nous avons besoin d'une version fonctionnelle de node.js déjà installée sur notre machine.&lt;/p&gt;

&lt;p&gt;Il est également recommandé de comprendre les concepts de base de node.js. &lt;/p&gt;

&lt;h1&gt;Installer et configurer Express&lt;/h1&gt;

&lt;p&gt;Nous allons d'abord créer un nouveau dossier et démarrer une nouvelle application, puis nous installerons Espress. Dans votre terminal, exécutez&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir discover_express
$ cd discover_express
$ touch app.js
$ npm init
$ npm install express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ces commandes créeront une nouvelle installation d'application node.js avec le framework  Express.&lt;/p&gt;

&lt;h1&gt;Votre premier serveur Node.js&lt;/h1&gt;

&lt;p&gt;Nous sommes maintenant prêts pour notre première ligne de code. Ouvrez app.js et tapez:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ce code initialisera la variable app en tant que nouvel objet Express.&lt;/p&gt;

&lt;p&gt;Alors maintenant, nous pouvons démarrer le serveur:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server running on localhost:5000...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5000 est le numéro de port. Cette valeur peut être modifiée.&lt;/p&gt;

&lt;h1&gt;Comprendre les principes de base de la communication de votre navigateur Web avec Internet&lt;/h1&gt;

&lt;p&gt;Pour accéder à une page sur Internet, votre navigateur doit demander au serveur la page qu'il souhaite (requête), puis vous afficher cette page (réponse). Ce protocole de requêtes et de réponses vous permet de visualiser cette page dans votre navigateur.&lt;/p&gt;

&lt;p&gt;Par exemple, lorsque vous visitez facebook.com/about, votre navigateur demande la page 'about' du serveur Facebook.&lt;/p&gt;

&lt;p&gt;Le serveur Facebook trouvera et fera correspondre le chemin de votre demande, effectuera le traitement et enverra la réponse associée à ce chemin.&lt;/p&gt;

&lt;p&gt;Voici d'autres exemples de différents chemins d'URL.&lt;/p&gt;

&lt;p&gt;route racine: facebook.com&lt;br&gt;
profil: facebook.com/profile&lt;br&gt;
à propos de: facebook.com/about&lt;br&gt;
connexion: facebook.com/login&lt;/p&gt;

&lt;h1&gt; Requête GET et POST&lt;/h1&gt;

&lt;p&gt;Votre navigateur peut demander une page mais votre navigateur peut également envoyer des données au serveur (ex. Formulaire de login).&lt;/p&gt;

&lt;p&gt;Lorsque le navigateur demande des informations, il fait une requête GET.&lt;/p&gt;

&lt;p&gt;Lorsqu'un navigateur envoie des données au serveur il fait une requête POST&lt;/p&gt;

&lt;p&gt;Donc, demander une page facebook/about est une demande GET.&lt;/p&gt;

&lt;h1&gt;Et si ...&lt;/h1&gt;

&lt;p&gt;Que se passe t'il si la page demandée n'est pas présente sur le serveur ? Par exemple, vous demandez facebook.com/blabla&lt;/p&gt;

&lt;p&gt;Le serveur inclura un code status avec chaque réponse qu'il renverra au navigateur.&lt;/p&gt;

&lt;p&gt;Si tout fonctionne comme prévu, le code status est 200. Si la page n'est pas trouvée, le code status de retour sera 404.&lt;/p&gt;

&lt;p&gt;Pour référence ici, une liste de quelques codes status HTTP:&lt;br&gt;
200: OK (réussi)&lt;br&gt;
401: non autorisé&lt;br&gt;
403: Interdit&lt;br&gt;
404: introuvable&lt;br&gt;
500: Erreur de serveur interne&lt;/p&gt;

&lt;h1&gt;Première communication client / serveur&lt;/h1&gt;

&lt;p&gt;Dans la première partie de cet article, nous avons créé un serveur node.js avec une application express.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nous avons ensuite fait un listen pour attendre une requête:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server running on localhost:5000...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maintenant que le serveur est démarré, nous pouvons créer une route qui correspondra à un chemin d'une requête potentiel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ce serveur attend une requête sur la route '/' (chemin racine). Notez que la route attend une requête GET. (app.get)&lt;/p&gt;

&lt;p&gt;Une fois cette demande reçue, le serveur enverra «Hello World» en réponse.&lt;/p&gt;

&lt;p&gt;Testons tout cela. Lancez d'abord votre serveur. À partir du type de terminal: node app.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="nx"&gt;Server&lt;/span&gt; &lt;span class="nx"&gt;running&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensuite, ouvrez votre navigateur préféré et accédez à localhost: 5000. Hello World devrait être affiché.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hxqy7DB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pmgwb31hkbjzjc1fap1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxqy7DB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pmgwb31hkbjzjc1fap1.png" alt="Hello World"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Il est possible d'envoyer un code status HTTP avec la réponse. Cela indiquera au client que la demande / réponse est un succès ou un échec.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Status 200 signifie que la requête est un succès&lt;/p&gt;

&lt;h1&gt;Response HTML&lt;/h1&gt;

&lt;p&gt;Le serveur que nous avons créé envoie simplement une réponse en text simple (Hello World).&lt;/p&gt;

&lt;p&gt;Mais il est possible de renvoyer du HTML ou du JSON.&lt;/p&gt;

&lt;p&gt;Response HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vous pouvez maintenant redémarrer le serveur. Si votre ancien serveur est toujours en cours d'exécution dans le terminal. Appuyez sur CTRL-C pour annuler l'exécution du serveur. Vous pouvez maintenant re-démarrer l'application pour voir le changement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si vous actualisez votre navigateur sur localhost: 5000, vous verrez maintenant Hello World mais cette fois au format grand en-tête h1!&lt;/p&gt;

&lt;h1&gt;Réponse JSON&lt;/h1&gt;

&lt;p&gt;Le serveur peut également renvoyer des données au navigateur. Par exemple, après un login, le serveur peut renvoyer des informations sur utilisateur.&lt;/p&gt;

&lt;p&gt;L'un des moyens standard d'envoyer des données dans les deux sens est JSON.&lt;/p&gt;

&lt;p&gt;JSON (JavaScript Object Notation) est un format text standard pour représenter des données structurées basées sur la syntaxe d'objet JavaScript.&lt;/p&gt;

&lt;p&gt;Il est couramment utilisé pour transmettre des données dans des applications Web (par exemple, envoyer des données du serveur au client, afin qu'elles puissent être affichées sur une page Web, ou vice versa)&lt;/p&gt;

&lt;p&gt;JSON est souvent utilisé avec un API. Nous aborderons les API en détail dans la prochaine leçon.&lt;/p&gt;

&lt;p&gt;Envoyer une réponse JSON avec Express est très simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike Taylor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le .json () convertit et envoie un objet javascript {} au format JSON.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;WOW félicitations! Vous venez de créer votre premier serveur Web!&lt;/p&gt;

&lt;p&gt;C'est tout pour aujourd'hui. Demain, le voyage continue. Nous allons commencer à travailler sur l'un des cas les plus utilisés d'Express.js: la construction de notre première API... Restez à l'écoute!&lt;/p&gt;

&lt;p&gt;Suivez-moi sur Twitter: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>french</category>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Build your own React CI in 5 minutes!</title>
      <author>Gökay Okyay</author>
      <pubDate>Fri, 07 May 2021 23:11:22 +0000</pubDate>
      <link>https://dev.to/gokayokyay/build-your-own-react-ci-in-5-minutes-1aen</link>
      <guid>https://dev.to/gokayokyay/build-your-own-react-ci-in-5-minutes-1aen</guid>
      <description>&lt;p&gt;Hey everyone! This post is part of &lt;em&gt;Introduction to StewardX&lt;/em&gt; series.&lt;/p&gt;

&lt;p&gt;In this tutorial, I'll show you how can you build your own CI, super easy.&lt;/p&gt;

&lt;p&gt;All you need is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gokayokyay/stewardx"&gt;StewardX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Linux server (preferably with sudo access)&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;NodeJS - for building React of course 😊&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My server's OS is Debian flavored (Ubuntu) but you should be able to find the installation commands of the packages for your own distribution just by a quick search, if not please leave a comment so I can help you. Okay here we go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-nginx"&gt;
  &lt;/a&gt;
  Install Nginx
&lt;/h2&gt;

&lt;p&gt;Pretty straightforward. Just run the command below if Nginx is not installed on your server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should be able to access your server via http, just navigate to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://yourserverip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And you'll be presented Nginx's default welcome page. If not, you please check if your ports are not blocked and nginx is installed correctly. You can follow the &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04"&gt;amazing tutorial by DigitalOcean&lt;/a&gt; to configure ports for nginx.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm not affiliated with DO in any manners, I just like their tutorials.&lt;/p&gt;

&lt;p&gt;Once you got Nginx working proceed to the next step:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-nginx-to-serve-your-react-app"&gt;
  &lt;/a&gt;
  Configuring Nginx to serve your React app
&lt;/h2&gt;

&lt;p&gt;Now, for more detailed explanation you can follow &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-a-react-application-with-nginx-on-ubuntu-20-04"&gt;this tutorial on DigitalOcean&lt;/a&gt;. But I'll be demonstrating how you can configure it here too.&lt;/p&gt;

&lt;p&gt;To keep it simple and fast, I won't be demonstrating the server blocks but in production you should use them! For now, I'm just going to use the default one.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;/etc/nginx/sites-enabled/default&lt;/code&gt; with your favorite editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nano /etc/nginx/sites-enabled/default
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you scroll down, you'll see this specific line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;root /var/www/html&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay this line means that Nginx will serve the files it found in that specific directory. So we'll move our built files there. If you want, you can change the directory I won't be changing it for this tutorial. Moving on!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-our-react-app"&gt;
  &lt;/a&gt;
  Building our React app
&lt;/h2&gt;

&lt;p&gt;I'll be using the &lt;a href="https://github.com/gokayokyay/stewardx-docs"&gt;documentation repository of StewardX&lt;/a&gt; for demonstration purposes. It's a React app too 😊&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/gokayokyay/stewardx-docs
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;stewardx-docs
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="c"&gt;# or yarn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay now I can build my app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run build &lt;span class="c"&gt;# or yarn build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see a &lt;code&gt;build&lt;/code&gt; folder has been created. Great!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-and-running-stewardx"&gt;
  &lt;/a&gt;
  Installing and Running StewardX
&lt;/h2&gt;

&lt;p&gt;Head over to &lt;a href="https://github.com/gokayokyay/stewardx/releases/latest"&gt;releases page of StewardX&lt;/a&gt; and download the latest binary, it'll have a name like: &lt;code&gt;stewardx_${version}_${os}_${arch}&lt;/code&gt;. At the time of writing, the latest binary is named: &lt;code&gt;stewardx_v0.1.2_linux_x64&lt;/code&gt;. I suggest that you download it to a directory. I'll be creating a new one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;stewardx
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;stewardx
&lt;span class="nv"&gt;$ &lt;/span&gt;wget https://github.com/gokayokyay/stewardx/releases/download/v0.1.2/stewardx_v0.1.2_linux_x64 &lt;span class="nt"&gt;-O&lt;/span&gt; stewardx
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x stewardx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since it's not even in beta, you might have to build it from source, to do it please follow this link: &lt;a href="https://stewardx.dev/getting-started#building-it-from-source"&gt;Building it from source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, you'll need to have a PostgreSQL instance running to start StewardX. You can get a free one or start your own by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-P&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 127.0.0.1:5432:5432 &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/postgres-data:/var/lib/postgresql/data"&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1234"&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; pg postgres:alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; DON'T USE THIS COMMAND FOR PRODUCTION, PLEASE! IT'S PASSWORD IS 1234 😭&lt;/p&gt;

&lt;p&gt;You'll need your database URL. If you run the command above, then it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;postgresql://postgres:1234@localhost:5432/postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run this command while you're still at the same directory with &lt;code&gt;stewardx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;STEWARDX_DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgresql://postgres:1234@localhost:5432/postgres ./stewardx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see no output, then it means it's working! 😊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-build-script"&gt;
  &lt;/a&gt;
  Creating the build script
&lt;/h2&gt;

&lt;p&gt;I'll create a new a directory for the script&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;ci-scripts
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;ci-scripts
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;react-ci.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x react-ci.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open the script with your favorite editor and paste the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT_DIR_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;stewardx-docs
&lt;span class="nv"&gt;PROJECT_GIT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://github.com/gokayokyay/stewardx-docs
&lt;span class="nv"&gt;PROJECT_PARENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/
&lt;span class="nv"&gt;DEPLOY_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/www/html/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've just defined the variables here, moving on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$PROJECT_PARENT&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PROJECT_PARENT&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$PROJECT_DIR_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; 
&lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Directory &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_DIR_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; exists. Skipping git clone..."&lt;/span&gt; 
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$PROJECT_DIR_NAME&lt;/span&gt;
    git stash
    git pull
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Directory &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_DIR_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; doesn't exists, cloning it..."&lt;/span&gt;
    git clone &lt;span class="nv"&gt;$PROJECT_GIT_URL&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$PROJECT_DIR_NAME&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We pull the latest changes if available. Time to build it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Cleaning node_modules for a fresh start!"&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; node_modules
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing the modules..."&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Documentation repository don't have any tests, so I'm skipping test command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Now building it, this can take a while"&lt;/span&gt;
npm run build
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Cleaning old files in serve directory"&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; &lt;span class="nv"&gt;$DEPLOY_DIR&lt;/span&gt;/&lt;span class="k"&gt;*&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Okay, now moving the artifacts into the serve directory."&lt;/span&gt;
&lt;span class="nb"&gt;mv &lt;/span&gt;build/&lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$DEPLOY_DIR&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Done."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And save it.&lt;/p&gt;

&lt;p&gt;Issue this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and save it's output for the next step.&lt;/p&gt;

&lt;p&gt;Now to test our script, just run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./react-ci.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go check your website &lt;code&gt;http://yourserverip&lt;/code&gt; if it works, now it's time to&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-webhook"&gt;
  &lt;/a&gt;
  Create a webhook
&lt;/h2&gt;

&lt;p&gt;Get the output of &lt;code&gt;pwd&lt;/code&gt; command from previous step. To add a webhook to StewardX we can either use it's &lt;a href="https://stewardx.dev/panel"&gt;panel&lt;/a&gt; (needs to be built) or just send a request to it by any web client, I'll be using curl:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;--header&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json"&lt;/span&gt; &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;'{"task_name": "React app CI", "frequency": "Hook", "task_type": "CmdTask", "task_props": {"command":"/bin/bash #pwd_output#"}}'&lt;/span&gt; http://localhost:3000/tasks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change &lt;strong&gt;#pwd_output#&lt;/strong&gt; with the output you saved from previous step mine was: &lt;code&gt;/root/ci-scripts/react-ci.sh&lt;/code&gt; (yup used root, I like danger)&lt;/p&gt;

&lt;p&gt;This command will output an id, save it for the last step:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-webhook-from-github"&gt;
  &lt;/a&gt;
  Using the webhook from GitHub
&lt;/h2&gt;

&lt;p&gt;Now, it is time to add the webhook to the GitHub. Navigate to your project's repository, and click settings.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;code&gt;Webhooks&lt;/code&gt; section from the left panel. Click &lt;code&gt;Add webhook&lt;/code&gt; button found on the top of the page. When the page opens up, you'll want to fill the &lt;code&gt;Payload URL&lt;/code&gt; with &lt;code&gt;yourserversurl:STEWARDX_PORT/execute/id_of_your_task&lt;/code&gt;, so it'll look something like &lt;code&gt;http://mydomain.com:3000/execute/c99ff533-d3c2-4ee3-9b8f-a972a9db00db&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And congratulations! You've created your own CI!&lt;/p&gt;

&lt;p&gt;For more information and documentation of StewardX, please visit &lt;a href="https://stewardx.dev"&gt;https://stewardx.dev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I really appreciate if you leave a feedback 😊 Stay safe!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>devops</category>
      <category>react</category>
      <category>nginx</category>
    </item>
    <item>
      <title>My Journey as Opensource Contributor</title>
      <author>Jordan Kalebu</author>
      <pubDate>Fri, 07 May 2021 22:57:15 +0000</pubDate>
      <link>https://dev.to/kalebu/my-journey-as-opensource-contributor-2fpc</link>
      <guid>https://dev.to/kalebu/my-journey-as-opensource-contributor-2fpc</guid>
      <description>&lt;p&gt;Hi everyone, &lt;/p&gt;

&lt;p&gt;This article originally started as a &lt;a href="https://twitter.com/j_kalebu"&gt;thread&lt;/a&gt; on Twitter and then decided to make an article about it regarding my journey as an open-source contributor, Hope you will enjoy it, take your time &lt;/p&gt;

&lt;p&gt;I early 2020 started a journey as a content creator whereby I have been writing technical content on Software Development whereby mostly being focused on the Python stack.&lt;/p&gt;

&lt;p&gt;In the last 5 months, I began a new journey as an opensource contributor, and up to date I have contributed to 8 different python packages&lt;/p&gt;

&lt;p&gt;In this, I'm going to share my journey as 5 months old contributor and my thoughts on contributing to opensource.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-of-the-journey"&gt;
  &lt;/a&gt;
  Start of the Journey
&lt;/h2&gt;

&lt;p&gt;The Journey started in December 2020 when Vodacom released their public &lt;a href="https://openapiportal.m-pesa.com/sign-up"&gt;Mpesa Payment API&lt;/a&gt;, As I was looking for a way to integrate with python I came across their implementation for a python wrapper. &lt;/p&gt;

&lt;p&gt;I hardly understood it, and usage seems unpythonic to me, I then convinced myself it could be better than that and immediately started my very first opensource project (pypesa) for its re-implementation. &lt;/p&gt;

&lt;p&gt;It wasn't easy, a lot of googling and StackOverflow, but eventually, I was able to come up with something that actually worked, and I finally ported it to PyPI. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kalebu"&gt;
        Kalebu
      &lt;/a&gt; / &lt;a href="https://github.com/Kalebu/pypesa"&gt;
        pypesa
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Python wrapper on Mpesa public API for mobile Payment Integration 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="http://kalebu.github.io/pypesa" rel="nofollow"&gt;pypesa&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://kalebu.github.io/pypesa/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NcBDgwXx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kalebu/pypesa/main/pictures/pypesa-banner.png" alt="Pypesa banner"&gt;&lt;/a&gt;
&lt;a href="https://badge.fury.io/py/python-pesa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c5229979ba4ad49f0df63cdc3cddf5361864290d9eb409dffd5607b16214795d/68747470733a2f2f62616467652e667572792e696f2f70792f707974686f6e2d706573612e737667" alt="PyPI version"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Kalebu/pypesa"&gt;&lt;img src="https://camo.githubusercontent.com/cc5ab71a70dfb54fd0812e42a18666a11104388fa2f31a8f35dfeaaecf5bb954/68747470733a2f2f62616467656e2e6e65742f6769746875622f72656c65617365732f6b616c6562752f707970657361" alt="Releases"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/python-pesa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/270ec3c4c44ebfece38686e8f8180235e62005779cfc7bc5f578e7fbd4f20e64/68747470733a2f2f706570792e746563682f62616467652f707974686f6e2d70657361" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/python-pesa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9ac1e6e95d5b1820c4ffc7c8972aa6a81c5c14aa434b28f4e31c6aeef50075f4/68747470733a2f2f706570792e746563682f62616467652f707974686f6e2d706573612f6d6f6e7468" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/python-pesa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6c66fc9e0636cede8ba7cefa63e8a5094051870bfcdabe676c215965b9b1f3dc/68747470733a2f2f706570792e746563682f62616467652f707974686f6e2d706573612f7765656b" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python wrapper on &lt;strong&gt;Mpesa public API&lt;/strong&gt; for mobile Payment Integration made with care to offer easy and elegant integration made by &lt;a href="https://github.com/kalebu"&gt;kalebu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/kalebujordan" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9FwXWzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kalebu/pypesa/main/pictures/become_a_patron_button.png" alt="Become a patron"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Implemented Features&lt;/h2&gt;
&lt;p&gt;The following are the features that are supported by the &lt;strong&gt;Mpesa&lt;/strong&gt; public API and require the &lt;strong&gt;python&lt;/strong&gt; implementation.&lt;/p&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Customer to Bussiness (C2B) Single Payment&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Bussiness to Customer (B2C)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Bussiness to Bussiness (B2B)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Payment Reversal&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Query Transaction status&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Direct debit creation and Payment&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;Full documentation can be found on &lt;a href="http://kalebu.github.io/pypesa" rel="nofollow"&gt;pypesa&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Getting started&lt;/h2&gt;
&lt;p&gt;Getting started with &lt;strong&gt;pypesa&lt;/strong&gt; is pretty straight forward and can be categorized&lt;/p&gt;
&lt;p&gt;into steps shown below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sign up for Mpesa Developer portal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;a href="http://kalebu.github.io/pypesa" rel="nofollow"&gt;pypesa&lt;/a&gt; package using &lt;strong&gt;pip&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build your services with &lt;strong&gt;pypesa&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Signing up&lt;/h2&gt;
&lt;p&gt;To sign up for Mpesa public API visit &lt;a href="https://openapiportal.m-pesa.com/sign-up" rel="nofollow"&gt;Mpesa-API&lt;/a&gt; and then&lt;/p&gt;
&lt;p&gt;you can go through &lt;a href="https://dev.to/alphaolomi/getting-started-with-mpesa-developer-portal-46a4" rel="nofollow"&gt;getting started Mpesa Developer portal&lt;/a&gt;
by &lt;a href="https://github.com/alphaolomi"&gt;alphaolomi&lt;/a&gt; to see how.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;To install the &lt;strong&gt;pypesa&lt;/strong&gt; package to your machine you can either&lt;/p&gt;
&lt;p&gt;install…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kalebu/pypesa"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;It now has over 1.9K downloads&lt;/p&gt;

&lt;p&gt;It was so fulfilling to me seeing other people using something I crafted and that good feeling lead me to meditate and rethink that I might able to do more to the opensource community taking apart Mpesa package.&lt;/p&gt;

&lt;p&gt;For a long time, I have been wishing and admiring being an open-source contributor, inspired by the fact that most software we use today in some ways relies upon OSS whereby people dedicate their time, skills, and effort to build something that we can all use for free. &lt;/p&gt;

&lt;p&gt;That single contribution to the Mpesa package helped overcome the imposter syndrome of feeling unskilled enough and contributed anyway which keep me moving through the rest of the journey &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pyswahili"&gt;
  &lt;/a&gt;
  Pyswahili
&lt;/h2&gt;

&lt;p&gt;The same month I started pypesa I opened a new repository titled &lt;em&gt;pyswahili&lt;/em&gt; while procrastinating preparing a  talk for Pycon Tanzania, envisioning to be the Swahili version of python programming language. &lt;/p&gt;

&lt;p&gt;Honestly speaking, I didn't intend to begin working on this project anytime soon but it changed when I saw the repository with a 0 line code gaining stars and people are betting on it and I said to myself I need to make it real.&lt;/p&gt;

&lt;p&gt;Well after a couple of weeks I managed to come with an early implementation of pyswahili with a couple of bugs like replacing non-keyword strings, lack of an interactive repl, unstructured packaging. &lt;/p&gt;

&lt;p&gt;I then shared the early implementation with my fellow devs and they were really excited which lead the repo itself to gain a few contributors and a little bit more stars &lt;/p&gt;

&lt;p&gt;Recently I managed to port to PyPI and up to date it has  been downloaded by over 0.8K&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kalebu"&gt;
        Kalebu
      &lt;/a&gt; / &lt;a href="https://github.com/Kalebu/pyswahili"&gt;
        pyswahili
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Swahili version of programming language to allow Swahili speakers get started with programming 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
pyswahili&lt;/h1&gt;
&lt;p&gt;A programming language built over Python to easily allow swahili speakers to get started with programming without ever knowing english&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Kalebu/pyswahili"&gt;&lt;img src="https://camo.githubusercontent.com/7a275e2e3b0b2932532f77315772fc4cd65dcacaaeb22f318741a809af373567/68747470733a2f2f62616467656e2e6e65742f6769746875622f72656c65617365732f6b616c6562752f707973776168696c69" alt="Releases"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/pyswahili" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e13763ac6709a73c2d46c2256bae895b68f09ddd0e41a3ed7238aa5cd9a71677/68747470733a2f2f706570792e746563682f62616467652f707973776168696c69" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/pyswahili" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/50efb8c6a4597ff18014b53070eae3a7b960fcf2b5e1e060219960341ef6cfa2/68747470733a2f2f706570792e746563682f62616467652f707973776168696c692f6d6f6e7468" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/pyswahili" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/31afe99181b533d2c0830e6ed2226caa84b88f922b9b228fc5310c68acd5cac4/68747470733a2f2f706570792e746563682f62616467652f707973776168696c692f7765656b" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/kalebujordan" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4h_bBF6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kalebu/pyswahili/main/pictures/become_a_patron_button.png" alt="Become a patron"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pyswahili&lt;/strong&gt; is not a completely independent language but more of a swahili version of &lt;strong&gt;python language&lt;/strong&gt;, syntax and language grammar is
equivalent to python one with only change of &lt;strong&gt;keywords&lt;/strong&gt; from english to swahili.&lt;/p&gt;
&lt;h2&gt;
pyswahili Transpiler&lt;/h2&gt;
&lt;p&gt;Transpiler(Pyswahili) is for converting the swahili version of python to english version so that it can be intepreted by the python Intepreter&lt;/p&gt;
&lt;h2&gt;
extension ?&lt;/h2&gt;
&lt;p&gt;There is no official extension for pyswahili, so for now &lt;strong&gt;.py&lt;/strong&gt; is fine.&lt;/p&gt;
&lt;h2&gt;
Repl vs Script&lt;/h2&gt;
&lt;p&gt;Similar to Python, Pyswahili supports both modes; the Read-evaluate-print(&lt;strong&gt;Repl&lt;/strong&gt;) loop and Script mode
Repl enable you to interactively execute pyswahili code line by line without requiring to write a complete program while on other side &lt;strong&gt;Script mode&lt;/strong&gt; requires you
to write your Pyswahili code on a file and run it…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kalebu/pyswahili"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#mtaa"&gt;
  &lt;/a&gt;
  Mtaa
&lt;/h2&gt;

&lt;p&gt;The third package arose when I came across a Github repository consisting of data about all locations data in Tanzania grouped by region as CSV Files. &lt;/p&gt;

&lt;p&gt;I then thought how about organizing those data as a python package for easy accessibility and usage when it comes to building a real-life application with it.&lt;/p&gt;

&lt;p&gt;which leading creating mtaa, a python package just do that; &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kalebu"&gt;
        Kalebu
      &lt;/a&gt; / &lt;a href="https://github.com/Kalebu/mtaa"&gt;
        mtaa
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A package consisting of all Tanzania locations from region to streets in an easily accessible way
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="https://pypi.org/project/mtaa" rel="nofollow"&gt;mtaa&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pepy.tech/project/mtaa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8cb0877a88847f6a19d1c4e7bd22cc1265ba1c8d18f0810e5e54169e9f32257b/68747470733a2f2f706570792e746563682f62616467652f6d746161" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/mtaa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/91eeaec0ad1cdef843ca8b5324d3ddcae8e63d4da2ee6b6170d92105e84bac6c/68747470733a2f2f706570792e746563682f62616467652f6d7461612f6d6f6e7468" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/mtaa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3847ff5a1ffa5499d12dbee1cf23eccf35018c2dd5bd892a08281c2f0ca49505/68747470733a2f2f706570792e746563682f62616467652f6d7461612f7765656b" alt="Downloads"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A package consisting of all Tanzania locations from region to streets in a easy accessible way made by &lt;a href="https://github.com/kalebu"&gt;kalebu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/kalebujordan" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ac_P-Ns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kalebu/mtaa/main/pictures/become_a_patron_button.png" alt="Become a patron"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
A strory behind&lt;/h2&gt;
&lt;p&gt;Mtaa package is result of organized &lt;strong&gt;json&lt;/strong&gt; of all the locations in Tanzania, As I was looking for data about these locations data I came across repo &lt;a href="https://github.com/HackEAC/tanzania-locations-db"&gt;tanzania-location-db&lt;/a&gt;, It consists of locations data organized into &lt;em&gt;regions&lt;/em&gt;, whereby each region has its own csv file. So I wrote a script to transform all the locations from csv into a single &lt;strong&gt;Json&lt;/strong&gt; and from there package came.&lt;/p&gt;
&lt;h2&gt;
Json Transformer&lt;/h2&gt;
&lt;p&gt;If you wanna give a look at the script or interested about building your Json from a similar kind of raw data here is &lt;a href="https://github.com/Kalebu/mtaa/blob/main/json_transformer.py"&gt;Json Transformer script&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;Use pip to install it just as shown below;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;pip install mtaa&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;The library is very straight forward, at the very top of the library is country which…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kalebu/mtaa"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#pysimilar"&gt;
  &lt;/a&gt;
  Pysimilar
&lt;/h2&gt;

&lt;p&gt;Pysimilar came up after a previously published article on how to detect plagiarism in Python using cosine similarity, which stands as one of the most-read articles here on &lt;a href="https://dev.to/"&gt;dev.to&lt;/a&gt; and multiple platforms I published including my personal blog. &lt;/p&gt;

&lt;p&gt;After realizing many people were looking into building something like that, I then thought of building a light python package that will enable even complete beginners to able to build a plagiarism detector in python &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kalebu"&gt;
        Kalebu
      &lt;/a&gt; / &lt;a href="https://github.com/Kalebu/pysimilar"&gt;
        pysimilar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A python library for computing the similarity between two string(text) based on cosine similarity
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="https://pypi.org/project/pysimilar" rel="nofollow"&gt;pysimilar&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pepy.tech/project/pysimilar" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1e115e1036779b9f4099fb140779a649a9319f8c1e7598bc501e707c653e5bc6/68747470733a2f2f706570792e746563682f62616467652f707973696d696c6172" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/pysimilar" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7901653b5ba2b388551057464fa4319663cce5084fbb1ea6bef4b9c36f5fc6ca/68747470733a2f2f706570792e746563682f62616467652f707973696d696c61722f6d6f6e7468" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://pepy.tech/project/pysimilar" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/991c4faeba5afefc02a3b19b14366ed928a22c299b69dfd444a53920875d83b2/68747470733a2f2f706570792e746563682f62616467652f707973696d696c61722f7765656b" alt="Downloads"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A python library for computing the similarity between two string(text) based on cosine similarity made by &lt;a href="https://github.com/Kalebu"&gt;kalebu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/kalebujordan" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gkiTirGP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Kalebu/pysimilar/main/pictures/become_a_patron_button.png" alt="Become a patron"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
How does it work ?&lt;/h2&gt;
&lt;p&gt;It uses Tfidf Vectorizer to transform the text into vectors and then obtained vectors are converted into arrays of numbers and then finally cosine similary computation is employed resulting to output indicating how similar they are.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;You can either install it directly from &lt;em&gt;Github&lt;/em&gt; or use &lt;em&gt;pip&lt;/em&gt; to install it, here is how you to install it directly from github;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;$  git clone https://github.com/Kalebu/pysimilar
$  &lt;span class="pl-c1"&gt;cd&lt;/span&gt; pysimilar
$ pysimilar -&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; python setup.py install
&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Installation with pip&lt;/h2&gt;
&lt;div class="highlight highlight-source-python js-code-highlight"&gt;
&lt;pre&gt;$ &lt;span class="pl-s1"&gt;pip&lt;/span&gt; &lt;span class="pl-s1"&gt;install&lt;/span&gt; &lt;span class="pl-s1"&gt;pysimilar&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Example of usage&lt;/h2&gt;
&lt;p&gt;Pysimilar allows you to either specify the string you want to compare directly or specify path to files containing string you want to compare.&lt;/p&gt;
&lt;p&gt;Here an example on how to compare strings directly;&lt;/p&gt;
&lt;div class="highlight highlight-source-python js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s1"&gt;pysimilar&lt;/span&gt; &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s1"&gt;compare&lt;/span&gt;
&lt;span class="pl-c1"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;compare&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kalebu/pysimilar"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#more-python-packages"&gt;
  &lt;/a&gt;
  More python packages
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you can find it, develop and opensource it&lt;/em&gt; said opensource, So I did and began developing packages focused mostly on simplifying the integration with the APIS, &lt;/p&gt;

&lt;p&gt;These packages include; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nextsms.github.io/nextsms/"&gt;NextSMS&lt;/a&gt; a python Package to ease the integration with nextsms SMS Gateway&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kalebu.github.io/tigopesa/"&gt;Tigopesa&lt;/a&gt; Python package to ease the Tigo Pesa Payment API integration&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/beem-africa/python-client"&gt;BeemAfrica&lt;/a&gt; A python library to ease the integration with the Beem Africa (SMS, AIRTIME, OTP, 2WAY-SMS, BPAY, USSD)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kalebu.github.io/Nida/"&gt;Nida&lt;/a&gt; un-official Python library for loading user information based on National ID number(Tanzania)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-i-have-learned-and-why-you-should-contribute-too"&gt;
  &lt;/a&gt;
  What I have learned? and why you should contribute too?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Personally getting to open-source has completely transformed me in terms of perception and improvement in the way I write code than code examples ever taught me.&lt;br&gt;
Therefore I would also recommend If you're currently learning a programming language or looking to advance your skills, one of the best things you can do to achieve that is contributing to opensource &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your contribution to open-source projects can act as your portfolio with vivid evidence on how you write code and document your project which can help you land paying gigs, I recently worked with a client who reached out only after going through my GitHub so it works for sure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don't really to be an expert to contribute, you just need to have something to contribute that's all, and sometimes you don't even have that something, there are couples of websites such as &lt;a href="https://www.codetriage.com/"&gt;CodeTriage&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well, that's all for this article, I'm glad you enjoyed learning exploring my journey as an open-source contributor, to me this is just beginning and  I really think you should too. &lt;/p&gt;

&lt;p&gt;You can connect me with me on &lt;a href="https://twitter.com/j_kalebu"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also write articles on &lt;a href="https://kalebujordan.dev/"&gt;personal blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>opensource</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Earn more storage space on OneDrive for free</title>
      <author>Youssef Allali</author>
      <pubDate>Fri, 07 May 2021 22:57:10 +0000</pubDate>
      <link>https://dev.to/youssefallalix/earn-more-storage-space-on-onedrive-for-free-52ec</link>
      <guid>https://dev.to/youssefallalix/earn-more-storage-space-on-onedrive-for-free-52ec</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-onedrive"&gt;
  &lt;/a&gt;
  What is Onedrive?
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;OneDrive is a file hosting service and synchronization service offered by Microsoft for its users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#how-much-strorage-space-do-i-have"&gt;
  &lt;/a&gt;
  How much Strorage space do I have?
&lt;/h1&gt;

&lt;p&gt;Depending on the type of your subscription, Microsoft offers you different amounts of space.&lt;br&gt;
We're here to talk about the free plan which is what you get when you first create a Microsoft account (&lt;code&gt;@outlook.com&lt;/code&gt; or &lt;code&gt;@hotmail.com&lt;/code&gt;).&lt;br&gt;
With this plan, all you get is &lt;strong&gt;5GB&lt;/strong&gt;, which is, in most cases, not sufficient in case you depend a lot on cloud storage services, or you prefer to store your documents and data up there.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-can-i-increase-my-storage-space"&gt;
  &lt;/a&gt;
  How can I increase my storage space?
&lt;/h1&gt;

&lt;p&gt;Glad you asked, Microsoft itself will ask you to go premium and push you into buying more space with a Microsoft 365 subscription!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zNMbvo-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw1detq8smrfnzobc9qx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNMbvo-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw1detq8smrfnzobc9qx.png" alt="Onedrive Window"&gt;&lt;/a&gt;&lt;br&gt;
Whilst paying for a premium subscription will open your access to 100 GB, 1TB or 6TB of storage space, there's a way to get up to 10 GB of free storage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zAHb6_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teu3vtc7ebjwxk2yzi6j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zAHb6_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teu3vtc7ebjwxk2yzi6j.png" alt="Subsciption Options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open your Web based Onedrive and click on the Settings button and then to Options or simply click on this link &lt;a href="https://onedrive.live.com/?v=managestorage"&gt;"Manage Storage"&lt;/a&gt;, after that you'll find a section called Your additional storage and the refereal bonus that says (0% acheived)&lt;/p&gt;

&lt;p&gt;Next thing to do is click on Earn more that will pop up a window with different ways to share your referral link&lt;br&gt;
Share that link with your friends and family and you'll earn 500MB for each person clicking your link and registering for Onedrive for the first time. and they also get a bonus of 500 MB.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DEuWpmMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osp6xke4qdlgrocefv04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DEuWpmMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osp6xke4qdlgrocefv04.png" alt="Earn more"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#extra-out-of-charge-500-mb"&gt;
  &lt;/a&gt;
  Extra out of charge 500 MB
&lt;/h1&gt;

&lt;p&gt;If you don't have a Microsoft account yet or want to use Onedrive for the first time, use my referral link &lt;a href="https://onedrive.live.com?invref=d5aed7a761e2af6d&amp;amp;invscr=90"&gt;https://onedrive.live.com?invref=d5aed7a761e2af6d&amp;amp;invscr=90&lt;/a&gt; and you'll get extra 500, I get extra 500, everyone happy 😄 .&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h1&gt;

&lt;p&gt;Don't hesitate to leave any questions you may have for me in the comments. I'll be pleased to reply and subscribe for more interesting content like this one.&lt;/p&gt;

</description>
      <category>microsoft</category>
      <category>onedrive</category>
      <category>storage</category>
    </item>
    <item>
      <title>Why Immutability is important in JavaScript?</title>
      <author>Umid Negmatullayev</author>
      <pubDate>Fri, 07 May 2021 22:54:27 +0000</pubDate>
      <link>https://dev.to/undigitals/why-immutability-is-important-in-javascript-2l85</link>
      <guid>https://dev.to/undigitals/why-immutability-is-important-in-javascript-2l85</guid>
      <description>&lt;p&gt;In JavaScript, Primitive data types (numbers, strings, etc) are immutable but when it comes to objects and arrays they are mutable, please do not think that if you declare your objects and arrays with &lt;code&gt;const&lt;/code&gt; it will be &lt;code&gt;constant&lt;/code&gt; which is unchangeable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;
&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "banana'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see when we update &lt;code&gt;updatedObj&lt;/code&gt;'s value, it updates the original object variable &lt;code&gt;obj&lt;/code&gt; as well. The reason behind it, objects copy &lt;code&gt;by reference&lt;/code&gt;, which means when we do &lt;code&gt;const updatedObj = obj&lt;/code&gt; &lt;code&gt;updatedObj&lt;/code&gt; is referencing/pointing to &lt;code&gt;obj&lt;/code&gt;'s memory address, so if we update the &lt;code&gt;updatedObj&lt;/code&gt; we update &lt;code&gt;obj&lt;/code&gt; because they are pointing the same value. But in the case of primitive data types (numbers, strings, boolean, undefined, etc) is the opposite. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All primitives are immutable, i.e., they cannot be altered. It is important not to confuse a primitive itself with a variable assigned a primitive value. The variable may be reassigned a new value, but the existing value can not be changed in the ways that objects, arrays, and functions can be altered. ~ MDN&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we can see examples where strings and numbers are not changing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updatedNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;

&lt;span class="nx"&gt;updatedNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 39&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lion&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updatedStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;

&lt;span class="nx"&gt;updatedStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tiger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "lion"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why do we care about immutability? If JavaScript was built this way then there must be a reason. Yes, it's because JavaScript is a multiparadigm language you can use it as OOP, you can use it as FP (functional programming).&lt;br&gt;
Functional programming embraces immutability and heavily practices &lt;a href="https://en.wikipedia.org/wiki/Persistent_data_structure"&gt;persistent data structure&lt;/a&gt;. And new libraries like React and Redux take the advantages of immutability, like in Redux, &lt;code&gt;store&lt;/code&gt; is one giant, plain JS object,  immutable one and this gave the possibility for &lt;code&gt;redux time travel&lt;/code&gt; where you can see the previous states/changes or in React you can check the previous values of your local states, they all come from the object immutability.&lt;/p&gt;

&lt;p&gt;Here is a simple example of creating an immutable object in JS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "apple"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "banana"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we do not mutate our original object &lt;code&gt;obj&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We will have more practical examples on "How not to mutate your objects and arrays" in the next articles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"&gt;More about Object.assign()&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You might ask a question 🙋‍♂️ , "Wait if we do not mutate our object value? Then that must be lots of memory consumptions? " ~ You are not wrong!&lt;/p&gt;

&lt;p&gt;That's where comes &lt;code&gt;structural sharing&lt;/code&gt;,  you don't want to &lt;code&gt;deep copy&lt;/code&gt; the object but &lt;code&gt;shallow copy&lt;/code&gt; it. Just like &lt;code&gt;git&lt;/code&gt; does not copy your whole versions of your code but shares the files that are not changed with the previous commit.  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Object.assign()&lt;/code&gt; method does &lt;code&gt;shallow copying&lt;/code&gt;. But there is one downside to it, if you have nested object properties, they will not be immutable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lemon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mango&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "apple"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "banana"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;b: { c: "lemon" }&lt;/code&gt; is not immutable here as it's nested property, we will see examples of how to make objects and arrays immutable including nested (complex structures) ones as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So &lt;code&gt;shallow copying&lt;/code&gt; will not take lots of memory consumptions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#immutable-objects"&gt;
  &lt;/a&gt;
  Immutable Objects
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;Object.assign()&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updatedObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "apple"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "banana"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;Object Spread Operators&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updatedObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "apple"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "banana"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Spread Operators&lt;/code&gt; are new ES6 syntax, similar to &lt;code&gt;Object.assign()&lt;/code&gt; method, it does shallow copying.&lt;/p&gt;

&lt;p&gt;For complex data structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lemon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updatedObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peach&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "apple"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "lemon"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "banana"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "peach"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have nested object properties &lt;code&gt;let updatedObj = {...obj, b: { ...obj.b } };&lt;/code&gt; you can do nested spread with the property name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#immutable-array"&gt;
  &lt;/a&gt;
  Immutable Array
&lt;/h3&gt;

&lt;p&gt;1.&lt;code&gt;Array Spread Operators&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updatedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;updatedArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Array spread operators are the same as object spread operator, actually they are spread operators &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;learn more here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2.Using &lt;code&gt;slice()&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updatedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;updatedArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedArr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 5, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;slice()&lt;/code&gt; cuts the array from the index (first argument) until the index you want (second argument), but it won't affect the original array. There is &lt;code&gt;splice()&lt;/code&gt; array method, it's the opposite of &lt;code&gt;slice()&lt;/code&gt; it changes the content of the original array &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"&gt;learn more on slice here&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"&gt;learn more on splice&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3.Using &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updatedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;updatedArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedArr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 5, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;map()&lt;/code&gt; returns a new array, takes a callback function as an argument and calls it on every element of the original array. Callback function takes &lt;code&gt;value&lt;/code&gt;(current iterated value), &lt;code&gt;index&lt;/code&gt; (current index), &lt;code&gt;array&lt;/code&gt;(original array) arguments, all of them are optional &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;learn more here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updatedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;updatedArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedArr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 5, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; works the same way &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;learn more here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;They both return a new array. &lt;code&gt;map()&lt;/code&gt; returns a new array of elements where you have applied some function on the element so that it changes the element. &lt;code&gt;filter()&lt;/code&gt; returns a new array of the elements of the original array (with no change to the elements). &lt;code&gt;filter()&lt;/code&gt; will only return elements where the function you specify returns a value of true for each element passed to the function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is one more method for array &lt;code&gt;reduce()&lt;/code&gt;, it will not return new array, but it will do immutable operations on an original array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// 1 + 2 + 3 + 4&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;updatedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedArr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt; could be confusing at the beginning, but I will try to explain as simply as possible. Let's look at the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// 1 + 2 + 3 + 4&lt;/span&gt;
  &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It just a loop that sums all the values of an array. We are trying to do the same thing with &lt;code&gt;reduce()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt; takes &lt;code&gt;reducer&lt;/code&gt; callback which is a function takes 4 arguments, &lt;code&gt;accumulator&lt;/code&gt;, &lt;code&gt;currentValue&lt;/code&gt;, &lt;code&gt;currentIndex&lt;/code&gt;, &lt;code&gt;originalArray&lt;/code&gt;. Accumulator saves the value which is returned from last iteration, just like &lt;code&gt;sum&lt;/code&gt; variable in our loop example, current value is &lt;code&gt;arr[i]&lt;/code&gt;. That's &lt;code&gt;reduce&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"&gt;learn more here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I hope 🤞 it all makes sense.&lt;/p&gt;

&lt;p&gt;Extra Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/a/34385684/9361910"&gt;This answer here gives a great explanation on "why is immutability important?"&lt;/a&gt;, &lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/viebel/structural-sharing-with-7-lines-of-javascript-2dnh#:~:text=What%20is%20structural%20sharing%3F,the%20files%20on%20each%20commit."&gt;Structural sharing&lt;/a&gt;, &lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@joomiguelcunha/learn-map-filter-and-reduce-in-javascript-ea59009593c4"&gt;More on immutable methods of array and object&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>objects</category>
      <category>arrays</category>
    </item>
  </channel>
</rss>
