<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>3 Patterns for Cookiecutter Templates</title>
      <author>Conor Sheehan</author>
      <pubDate>Tue, 27 Jul 2021 17:03:20 +0000</pubDate>
      <link>https://dev.to/conorsheehan1/3-patterns-for-cookiecutter-templates-aha</link>
      <guid>https://dev.to/conorsheehan1/3-patterns-for-cookiecutter-templates-aha</guid>
      <description>&lt;h2&gt;
  &lt;a href="#toc"&gt;
  &lt;/a&gt;
  TOC
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#intro"&gt;Intro&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#hooks"&gt;Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#tests"&gt;Tests&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#putting-tests-inside-the-template"&gt;Inside the template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#putting-tests-outside-the-template"&gt;Outside the template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ci"&gt;CI&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-from-github"&gt;Install from GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;If you've heard of &lt;a href="https://github.com/cookiecutter/cookiecutter"&gt;cookiecutter&lt;/a&gt; you can skip this part.&lt;/p&gt;

&lt;p&gt;Cookiecutter is a command-line utility that creates projects from templates. There's a list of &lt;a href="https://github.com/cookiecutter/cookiecutter#cookiecutter-specials"&gt;templates maintained by the cookiecutter team&lt;/a&gt; and plenty of  &lt;a href="https://awesomeopensource.com/projects/cookiecutter"&gt;community awesome lists&lt;/a&gt;. It's built with &lt;a href="https://www.python.org/"&gt;python&lt;/a&gt; and uses the &lt;a href="https://github.com/pallets/jinja"&gt;jinja&lt;/a&gt; templating framework (found in python web frameworks like &lt;a href="https://flask.palletsprojects.com"&gt;flask&lt;/a&gt;). You can use it to make a template for pretty much anything! All you need to get started is &lt;code&gt;pip install cookiecutter&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h2&gt;

&lt;p&gt;Cookiecutter provides &lt;a href="https://cookiecutter.readthedocs.io/en/1.7.3/advanced/hooks.html"&gt;pre and post generate scripts&lt;/a&gt;. They are Python or Shell scripts that run before and/or after your project is generated.&lt;/p&gt;

&lt;p&gt;They can be really useful. For example, if you want to get the absolute path to the generated project, you can use a post generate script to replace a specific piece of text with the absolute path. e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# cookiecutter-$your-project/hooks/post_gen_project.py 
&lt;/span&gt;&lt;span class="n"&gt;abs_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'replace_me.base_dir'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abs_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's an &lt;a href="https://github.com/ConorSheehan1/cookiecutter-jira-project/blob/master/hooks/post_gen_project.py#L3"&gt;example in a cookiecutter I made&lt;/a&gt;. &lt;br&gt;
See &lt;a href="https://github.com/cookiecutter/cookiecutter/issues/955#issuecomment-444864537"&gt;https://github.com/cookiecutter/cookiecutter/issues/955#issuecomment-444864537&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h2&gt;

&lt;p&gt;There are a few ways to test cookiecutters.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#putting-tests-inside-the-template"&gt;
  &lt;/a&gt;
  Putting tests inside the template
&lt;/h3&gt;

&lt;p&gt;This approach has the advantage that when someone generates a project using your template, they already have tests set up. e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# {{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}.py
&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="nf"&gt;cookiecutter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repo_name&lt;/span&gt;&lt;span class="p"&gt;}}(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;__version__&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# do some cli stuff
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# {{cookiecutter.repo_name}}/tests/test_{{cookiecutter.repo_name}}.py 
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;cookiecutter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repo_name&lt;/span&gt;&lt;span class="p"&gt;}}(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;cookiecutter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repo_name&lt;/span&gt;&lt;span class="p"&gt;}}(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's an &lt;a href="https://github.com/ConorSheehan1/cookiecutter-fire-cli/blob/621b635c23407b9704bcce322390dbebbc544ca3/%7B%7Bcookiecutter.repo_name%7D%7D/tests/test_%7B%7Bcookiecutter.repo_name%7D%7D.py#L1"&gt;example in a cookiecutter I made&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#putting-tests-outside-the-template"&gt;
  &lt;/a&gt;
  Putting tests outside the template
&lt;/h3&gt;

&lt;p&gt;This approach is useful if it doesn't make sense to include tests in the generated project, but you still want to test what is generated. Note: this doesn't mean trying to test cookiecutter itself!&lt;/p&gt;

&lt;p&gt;Normally Cookiecutter opens a prompt to get user input to be injected into your template. You can bypass this with the &lt;code&gt;--no-input&lt;/code&gt; argument. It also allows you to &lt;a href="https://github.com/cookiecutter/cookiecutter/pull/666"&gt;pass values required by &lt;code&gt;cookiecutter.json&lt;/code&gt; as arguments&lt;/a&gt;. e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;cookiecutter-$your-project/cookiecutter.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"project_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"alphabet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# this will generate a project named foo instead of alphabet&lt;/span&gt;
cookiecutter &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--no-input&lt;/span&gt; &lt;span class="nv"&gt;project_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've used this approach when creating cookiecutters that contain scripts rather than full projects. To test the scripts I generate a project, import and run functions from the scripts, and test the output. e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# cookiecutter-$your-project/{{cookiecutter.project_name|lower}}/script.sh&lt;/span&gt;
&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="o"&gt;{{&lt;/span&gt;cookiecutter.project_name|lower&lt;span class="o"&gt;}}&lt;/span&gt;&lt;span class="nv"&gt;_repo_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{cookiecutter.repo_dir}}"&lt;/span&gt;

goto_&lt;span class="o"&gt;{{&lt;/span&gt;cookiecutter.project_name|lower&lt;span class="o"&gt;}}&lt;/span&gt;_repo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{cookiecutter.project_name|lower&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;}_repo_dir"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return &lt;/span&gt;1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# cookiecutter-$your-project/tests/test_helper.bash&lt;/span&gt;
setup&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;# we expect foo/script.sh to be generated&lt;/span&gt;
    load &lt;span class="s2"&gt;"foo/script.sh"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# cookiecutter-$your-project/tests/script.bats&lt;/span&gt;
&lt;span class="c"&gt;#!/usr/bin/env bats&lt;/span&gt;

load &lt;span class="s2"&gt;"test_helper"&lt;/span&gt;

&lt;span class="c"&gt;# we expect a function named goto_foo_repo in foo/script.sh&lt;/span&gt;
@test &lt;span class="s2"&gt;"goto_foo_repo"&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  goto_foo_repo
  assert_equal &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$foo_repo_dir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's an &lt;a href="https://github.com/ConorSheehan1/cookiecutter-jira-project/blob/60e341060198a4d8937095b6c2e53f545d1ff58f/tests/utils.bats#L8"&gt;example in a cookiecutter I made&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ci"&gt;
  &lt;/a&gt;
  CI
&lt;/h3&gt;

&lt;p&gt;Now that you have tests set up, you can set up continuous integration! The important bit of here is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;cookiecutter&lt;/span&gt; 
&lt;span class="s"&gt;.&lt;/span&gt; &lt;span class="c1"&gt;# create a project using the current directory as a template&lt;/span&gt;
&lt;span class="s"&gt;--overwrite-if-exists&lt;/span&gt; &lt;span class="c1"&gt;# if the destination directory exists overwrite it&lt;/span&gt;
&lt;span class="s"&gt;--no-input&lt;/span&gt; &lt;span class="c1"&gt;# don't prompt for user input. &lt;/span&gt;
&lt;span class="c1"&gt;# since there are no other args, use default values from cookiecutter.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's an example with github actions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/ci.yml&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ci&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;macos-latest&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;python&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3.6&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.7&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.8&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Python ${{ matrix.python }}&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.python }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Poetry&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;python -m pip install --upgrade pip&lt;/span&gt;
          &lt;span class="s"&gt;pip install poetry&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install python packages&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;poetry install&lt;/span&gt;
      &lt;span class="c1"&gt;# here's the important bit!&lt;/span&gt;
      &lt;span class="c1"&gt;# generate a new project using the cookiecutter template&lt;/span&gt;
      &lt;span class="c1"&gt;# use the default values in cookiecutter.json with --no-input&lt;/span&gt;
      &lt;span class="c1"&gt;# if the directory already exists, overwrite it&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate package using cookiecutter&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;poetry run cookiecutter . --overwrite-if-exists --no-input&lt;/span&gt;
      &lt;span class="c1"&gt;# now inside the generated project, install dependencies and run tests&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install python packages (in cookiecutter dir)&lt;/span&gt;
        &lt;span class="na"&gt;working-directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;example_cli&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;poetry install&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run tests (in cookiecutter dir)&lt;/span&gt;
        &lt;span class="na"&gt;working-directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;example_cli&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;poetry run task tests&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's an &lt;a href="https://github.com/ConorSheehan1/cookiecutter-fire-cli/blob/621b635c23407b9704bcce322390dbebbc544ca3/.github/workflows/ci.yml#L1"&gt;example in a cookiecutter I made&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-from-github"&gt;
  &lt;/a&gt;
  Install from GitHub
&lt;/h2&gt;

&lt;p&gt;Cookiecutter provides a &lt;a href="https://cookiecutter.readthedocs.io/en/1.7.3/usage.html#works-directly-with-git-and-hg-mercurial-repos-too"&gt;really easy way to use templates hosted on github&lt;/a&gt;. All you need is &lt;code&gt;cookiecutter gh:$username/$repo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hopefully now you should be able to create a Cookiecutter template with hooks, tests, and CI, all easily installable from GitHub!&lt;/p&gt;

</description>
      <category>cookiecutter</category>
      <category>template</category>
      <category>python</category>
      <category>firstpost</category>
    </item>
    <item>
      <title>6 Command Line Tools for Productive Programmers</title>
      <author>Adam Gordon Bell</author>
      <pubDate>Tue, 27 Jul 2021 16:52:23 +0000</pubDate>
      <link>https://dev.to/adamgordonbell/6-command-line-tools-for-productive-programmers-433l</link>
      <guid>https://dev.to/adamgordonbell/6-command-line-tools-for-productive-programmers-433l</guid>
      <description>&lt;p&gt;Lately, I've been doing a lot more things at the command line. I'm not a hard-core terminal guy -- I use VSCode more than Vim -- but I'm always surprised at the number of complex tasks that can be done using just the POSIX standard command-line tools like &lt;code&gt;grep&lt;/code&gt;,&lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tools are powerful. A good tool makes work easier and faster, and a great tool unlocks new abilities: Previously impossible things become possible and sometimes easy.&lt;/p&gt;

&lt;p&gt;As I've learned more I've been adding some new tools to my command-line toolbox, and in this article I'd like to share some I've found valuable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-broot-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;broot&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;I'm not sure how I came across &lt;code&gt;broot&lt;/code&gt;, but it's pretty handy. If you are in a small directory and want to see the lay of the land, &lt;code&gt;tree&lt;/code&gt; is excellent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;✗ tree
.
├── dartboard.png
├── header.jpg
├── opensign.png
├── quote1.png
└── trophy.png

0 directories, 5 files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if the directory has many files or sub-directories, &lt;code&gt;tree&lt;/code&gt; becomes much less helpful: you only see the last screen full of information as files scroll past you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tree 
&amp;lt; scrolling text for a long time &amp;gt;
├── banner.js
└── index.html

328 directories, 2028 files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;broot&lt;/code&gt; solves this problem by being aware of the size of your terminal window and sizing to fit it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---frK1r75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q488k9xp8uf4o0mb4hdc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---frK1r75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q488k9xp8uf4o0mb4hdc.png" alt="broot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can navigate around using the arrow keys in &lt;code&gt;broot&lt;/code&gt; and it is also helpful for tracking down disk space usage by passing in the &lt;code&gt;-w&lt;/code&gt; flag (&lt;code&gt;broot -w&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2KiFcOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4iunayuvjprrwz1opr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2KiFcOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4iunayuvjprrwz1opr8.png" alt="Broot2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can do lots of other things, so take a look at the &lt;a href="https://github.com/Canop/broot"&gt;GitHub guide&lt;/a&gt; but for me its just a better &lt;code&gt;tree&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ℹ️ Install BRoot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install on MacOS using &lt;code&gt;brew&lt;/code&gt; or follow &lt;a href="https://dystroy.org/broot/install/"&gt;installation instructions&lt;/a&gt; for other environments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;broot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#funky"&gt;
  &lt;/a&gt;
  Funky
&lt;/h2&gt;

&lt;p&gt;If you live in the terminal, and you want to &lt;a href="https://blog.sanctum.geek.nz/unix-as-ide-files/"&gt;use your terminal as an IDE&lt;/a&gt;, then it's helpful to have your terminal change based on the current directory. There are many ways to do this.  &lt;a href="https://direnv.net/"&gt;&lt;code&gt;DirEnv&lt;/code&gt;&lt;/a&gt; loads and unloads &lt;code&gt;.env&lt;/code&gt; files as you enter directories.  &lt;a href="https://github.com/cxreg/smartcd"&gt;&lt;code&gt;smartcd&lt;/code&gt;&lt;/a&gt; is similar. It lets you run a shell script whenever you change to a certain path -- you can start and stop services, change the prompt, or anything else you want.  &lt;/p&gt;

&lt;p&gt;However, my favorite of this genre is the strangely named &lt;a href="https://github.com/bbugyi200/funky"&gt;&lt;code&gt;funky&lt;/code&gt;&lt;/a&gt;, which "takes shell functions to the next level by making them easier to define, more flexible, and more interactive."&lt;/p&gt;

&lt;p&gt;The way &lt;code&gt;funky&lt;/code&gt; works is simple: as you enter a directory, &lt;code&gt;funky&lt;/code&gt; looks for a &lt;code&gt;.funky&lt;/code&gt; file which contains a list of bash functions. It loads them, and when you leave, it unloads them.&lt;/p&gt;

&lt;p&gt;This means when I'm in the directory for this Jekyll blog, I have aliases loaded for creating a new post, linting my markdown, pulling in images, and so on. I can list these by typing &lt;code&gt;funky&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;funky
lint&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; markdownlint &lt;span class="nt"&gt;--fix&lt;/span&gt; &lt;span class="s2"&gt;"./_posts/*.md"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
set-header&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;latest-image&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;image-folder&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/header.jpg"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
set-image&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;latest-image&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;image-folder&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; +%s&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;.png"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;funky&lt;/code&gt; can do more than this, though. It has features for interactively adding and editing functions, and for registering global functions and aliases. What I like, though, is just being able to quickly give a command, in a specific context, a short alias.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ℹ️ Install Funky&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install Funky using pip&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip3 &lt;span class="nb"&gt;install &lt;/span&gt;pyfunky
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add hooks to your &lt;code&gt;.zshrc&lt;/code&gt;, &lt;code&gt;bashrc&lt;/code&gt; or equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## find where funky.sh was installed by pip and source it&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/lib/python3.9/site-packages/scripts/shell/funky.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fuzzy-finder-fzf"&gt;
  &lt;/a&gt;
  Fuzzy Finder (FZF)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLl8K5Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m99eulbpc4nsz2qn7jl6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLl8K5Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m99eulbpc4nsz2qn7jl6.png" alt="FZF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;funky&lt;/code&gt; and &lt;code&gt;broot&lt;/code&gt; improved my productivity then more tools could only improve it more, right? So I headed over to &lt;a href="https://lobste.rs/s/yfgwjr/what_interesting_command_line_tools_do"&gt;Lobste.rs&lt;/a&gt; and asked what other tools people were using.  &lt;code&gt;FZF&lt;/code&gt; came up quite a bit, and I've started using it myself now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/junegunn/fzf"&gt;FZF&lt;/a&gt; is a command-line fuzzy finder. It's fast, and it interactively lets you filter options down based on a fuzzy keyword match in many places where you need to input a value at the command-line.&lt;/p&gt;

&lt;p&gt;If you install the included shortcuts (&lt;code&gt;/usr/local/opt/fzf/install&lt;/code&gt;), you can use &lt;code&gt;**&lt;/code&gt; anywhere and get an interactive fuzzy finder to narrow down to the desired path. &lt;code&gt;FZF&lt;/code&gt; also makes searching your &lt;code&gt;history&lt;/code&gt; much faster.&lt;/p&gt;

&lt;p&gt;It's a unix filter that reads in input, shows you an interactive list that you filter down and then sends the selected item out the other side but describing that way undersells its usefulness.&lt;/p&gt;

&lt;p&gt;I recommend watching this &lt;a href="https://www.youtube.com/watch?v=qgG5Jhi_Els"&gt;video&lt;/a&gt; where Alexey Samoshkin walks through many possible uses for &lt;code&gt;FZF&lt;/code&gt; with a soothing piano playing in the background.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ℹ️ Install FZF&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install Funky using your &lt;a href="https://github.com/junegunn/fzf#using-linux-package-managers"&gt;package manager of choice&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;fzf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add hooks to your &lt;code&gt;.zshrc&lt;/code&gt;, &lt;code&gt;bashrc&lt;/code&gt; or equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#ZSH&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.fzf.zsh 
&lt;span class="c"&gt;#BASH&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.fzf.bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mcfly"&gt;
  &lt;/a&gt;
  McFly
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8MvPWq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn4hmoszdmdqp8noelqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8MvPWq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn4hmoszdmdqp8noelqb.png" alt="MCFly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FZF&lt;/code&gt; is excellent for filtering file paths in a command line when you want to open a file (&lt;code&gt;vim **&lt;/code&gt;), but for command-line completion, there is more information available than the raw history file. &lt;a href="https://github.com/cantino/mcfly/"&gt;&lt;code&gt;McFly&lt;/code&gt;&lt;/a&gt; attempts to use this extra information to provide more relevant results.&lt;/p&gt;

&lt;p&gt;What extra information? To start with, McFly considers these options in its ranking heuristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The commands you typed before the command.&lt;/li&gt;
&lt;li&gt;How often you run the command.&lt;/li&gt;
&lt;li&gt;How recently you ran the command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It tracks all this in a SQLite database where it also tracks and weighs suggestions by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The commands exit status.&lt;/li&gt;
&lt;li&gt;The directory you ran the command in.&lt;/li&gt;
&lt;li&gt;If you have selected it in McFly before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Being suggested failed commands is a pet peeve of mine, but I never considered narrowing the choice based on the current directory or down-ranking items that are never selected.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;McFly&lt;/code&gt; uses a neural net to do its ranking, and one possible downside is the lag in coming up with suggestions if your SQLite database gets too large. However, &lt;code&gt;MCFLY_HISTORY_LIMIT&lt;/code&gt; is available to limit this growth.&lt;/p&gt;

&lt;p&gt;I've only been using it for a couple of days, so I can't give a fair appraisal of it, but the concept makes me pretty hopeful: using extra information to customize tools towards real-world usage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ℹ️ Install McFly&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can install McFly &lt;a href="https://github.com/cantino/mcfly/#installation"&gt;several ways&lt;/a&gt;. Here is brew: :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew tap cantino/mcfly
brew &lt;span class="nb"&gt;install &lt;/span&gt;mcfly
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add hooks to your &lt;code&gt;.zshrc&lt;/code&gt;, &lt;code&gt;bashrc&lt;/code&gt; or equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;mcfly init zsh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The fact that the binary emits the init script rather than dumping an init script into my home directory is a nice touch. &lt;code&gt;zoxide&lt;/code&gt; - the following tool - does this as well.&lt;/p&gt;

&lt;p&gt;I found that &lt;code&gt;FZF&lt;/code&gt; was interfering with the &lt;code&gt;CTRL-R&lt;/code&gt; of McFly and had to comment out &lt;a href="https://github.com/junegunn/fzf/blob/764316a53d0eb60b315f0bbcd513de58ed57a876/shell/key-bindings.zsh#L109"&gt;this line&lt;/a&gt; in the &lt;code&gt;FZF&lt;/code&gt; init script to get McFly working.&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-cd"&gt;
  &lt;/a&gt;
  Better CD
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-g3Lvgp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qd0i8j1g2x5oyrt5oml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-g3Lvgp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qd0i8j1g2x5oyrt5oml.png" alt="zoxide"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FZF&lt;/code&gt; works nicely for some path completions, but I didn't find it helpful when changing directories with &lt;code&gt;cd&lt;/code&gt;: After typing &lt;code&gt;cd **TAB&lt;/code&gt; from my home directory, it takes a while for &lt;code&gt;FZF&lt;/code&gt; to build up the full list options. It was much faster to use my existing ZSH completions of &lt;code&gt;cd TAB &amp;lt;choose a dir&amp;gt; TAB &amp;lt;choose a dir&amp;gt;&lt;/code&gt; to navigate to a folder.  &lt;/p&gt;

&lt;p&gt;However, many tools exist which attempt to improve upon &lt;code&gt;cd&lt;/code&gt;. &lt;a href="https://github.com/wting/autojump"&gt;&lt;code&gt;autojump&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/rupa/z"&gt;&lt;code&gt;z&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://github.com/clvv/fasd"&gt;&lt;code&gt;Fasd&lt;/code&gt;&lt;/a&gt; all track directory usage and give you a single key shortcut for changing to commonly accessed directories. &lt;a href="https://www.reddit.com/r/commandline/comments/4v5nlt/what_cd_tool_do_you_use_if_any_autojump_j_z_etc/"&gt;&lt;code&gt;r/commandline&lt;/code&gt;&lt;/a&gt; has an detailed discussion of these various &lt;code&gt;cd&lt;/code&gt; replacements, but the one that has the most momentum is &lt;code&gt;zoxide&lt;/code&gt;. &lt;a href="https://github.com/ajeetdsouza/zoxide"&gt;zoxide&lt;/a&gt; is a rewrite of z in Rust and promises improved speed.&lt;/p&gt;

&lt;p&gt;After you install it, you can use it just like &lt;code&gt;cd&lt;/code&gt; (&lt;code&gt;z ~/path/foo/bar&lt;/code&gt;), but you can also change directories based on ranked text matches of the path (&lt;code&gt;z bar&lt;/code&gt; ~= &lt;code&gt;cd ~/path/foo/bar&lt;/code&gt; ). Instead of needing to supply the full path to change locations, you can instead provide a unique sub-string of the path, and &lt;code&gt;zoxide&lt;/code&gt; will use its usage history to get you where you want.&lt;/p&gt;

&lt;p&gt;For ease of adoption, I've chosen to have &lt;code&gt;zoxide&lt;/code&gt; replace &lt;code&gt;cd&lt;/code&gt;, which is as simple as using the &lt;code&gt;--cmd&lt;/code&gt; flag when you add the initialization shell code (&lt;code&gt;eval "$(zoxide init zsh --cmd cd)"&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ℹ️ Install zoxide&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zoxide&lt;/code&gt; can be installed &lt;a href="https://github.com/ajeetdsouza/zoxide#step-1-install-zoxide"&gt;several ways&lt;/a&gt;. Here is brew: :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;zoxide
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add hooks to your &lt;code&gt;.zshrc&lt;/code&gt;, &lt;code&gt;bashrc&lt;/code&gt; or equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;zoxide init zsh &lt;span class="nt"&gt;--cmd&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#gitupdate"&gt;
  &lt;/a&gt;
  GitUpdate
&lt;/h2&gt;

&lt;p&gt;This tool is another find from the &lt;a href="https://lobste.rs/s/yfgwjr/what_interesting_command_line_tools_do"&gt;Lobste.rs&lt;/a&gt; thread. When working on a git branch, I like to commit my work frequently. For example, before I try to delete some large block of text in a blog post, or before I attempt to refactor some piece of code, I commit my work. Of course, I'll squash, or restructure, these commits later on, but for convenience, I have a git alias called &lt;code&gt;wip&lt;/code&gt; ('work in progress`) which gives me a low effort way to commit.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
git wip = !git add --all; git ci -m WIP&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nikitavoloboev/gitupdate"&gt;&lt;code&gt;gitupdate&lt;/code&gt;&lt;/a&gt; is a simple improvement on this idea. &lt;code&gt;gitupdate .&lt;/code&gt; commits your files but uses the file names (but not extensions) of the changed files to create a more meaningful commit message. It's great for times when the commit message doesn't matter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ℹ️ Install GitUpdate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
git clone https://github.com/nikitavoloboev/gitupdate&lt;br&gt;
go build&lt;br&gt;
sudo cp gitupdate /usr/local/bin&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-tools"&gt;
  &lt;/a&gt;
  Other Tools
&lt;/h2&gt;

&lt;p&gt;There are many other helpful command-line tools. More than can be covered well in a single article. JQ, &lt;a href="https://dev.to/blog/mitmproxy"&gt;&lt;code&gt;mitmproxy&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://pandoc.org/"&gt;Pandoc&lt;/a&gt;, and &lt;a href="https://man7.org/linux/man-pages/man1/pstree.1.html"&gt;PSTree&lt;/a&gt; are some I use frequently. There is also a whole class of Rust rewrites of common POSIX tools that warrant an article of their own.  &lt;/p&gt;

&lt;p&gt;Of course, &lt;a href="https://earthly.dev/"&gt;Earthly&lt;/a&gt; itself is a command-line tool, and one I constantly use for gluing together various development steps together. It, and the tools I use for &lt;a href="https://dev.to/blog/markdown-lint"&gt;linting prose&lt;/a&gt; have become a standard part of how I work.&lt;/p&gt;

&lt;p&gt;What less common command-line tools do you use? If you have tool suggestions, I'd love to hear them.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>linux</category>
    </item>
    <item>
      <title>Install eslint</title>
      <author>Sardorbek Imomaliev</author>
      <pubDate>Tue, 27 Jul 2021 16:47:00 +0000</pubDate>
      <link>https://dev.to/imomaliev/install-eslint-2m24</link>
      <guid>https://dev.to/imomaliev/install-eslint-2m24</guid>
      <description>&lt;h2&gt;
  &lt;a href="#install-eslint-and-setup-default-config-files"&gt;
  &lt;/a&gt;
  Install eslint and setup default config files
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install eslint with typescript&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create eslint config file &lt;code&gt;touch .eslintrc.js&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit &lt;code&gt;.eslintrc.js&lt;/code&gt; to look like this&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@typescript-eslint/parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@typescript-eslint&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;plugin:@typescript-eslint/recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create eslint ignore file &lt;code&gt;touch .eslintignore&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit &lt;code&gt;.eslintignore&lt;/code&gt; to look like this&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# don't ever lint node_modules
node_modules
# don't lint build output (make sure it's set to your correct build folder name)
dist
# don't lint nyc coverage output
coverage
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;"lint": "eslint . --ext .js,.jsx,.ts,.tsx"&lt;/code&gt; to &lt;code&gt;"scripts"&lt;/code&gt; section in package.json&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint . --ext .js,.jsx,.ts,.tsx"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;npm run lint&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm run lint
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;vite-vue-typescript-starter@0.0.0 lint
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;eslint &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--ext&lt;/span&gt; .js,.jsx,.ts,.tsx
&lt;span class="go"&gt;
/Users/batiskaf/Development/personal/vue-ts-tailwind/.eslintrc.js
  1:1  error  'module' is not defined  no-undef

✖ 1 problem (1 error, 0 warnings)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;First let's commit what we already've done &lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git commit -m 'install eslint with typescript&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#fix-raw-error-module-is-not-defined-noundef-endraw-"&gt;
  &lt;/a&gt;
  Fix &lt;code&gt;error  'module' is not defined  no-undef&lt;/code&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;From docs &lt;a href="https://eslint.org/docs/rules/no-undef#environments"&gt;https://eslint.org/docs/rules/no-undef#environments&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix previous error by editing &lt;code&gt;.eslintrc.js&lt;/code&gt; to look like this&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// https://eslint.org/docs/rules/no-undef#nodejs&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;npm run lint&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git add -u&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git commit -m "fix: error  'module' is not defined  no-undef"&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vueschool.io/articles/vuejs-tutorials/eslint-and-prettier-with-vite-and-vue-js-3/"&gt;https://vueschool.io/articles/vuejs-tutorials/eslint-and-prettier-with-vite-and-vue-js-3/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eslint.org/docs/user-guide/getting-started"&gt;https://eslint.org/docs/user-guide/getting-started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/docs/getting-started/linting/README.md"&gt;https://github.com/typescript-eslint/typescript-eslint/blob/master/docs/getting-started/linting/README.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#links-for-raw-error-module-is-not-defined-noundef-endraw-"&gt;
  &lt;/a&gt;
  Links for &lt;code&gt;error  'module' is not defined  no-undef&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://eslint.org/docs/user-guide/configuring/language-options#specifying-environments"&gt;https://eslint.org/docs/user-guide/configuring/language-options#specifying-environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eslint.org/docs/rules/no-undef#nodejs"&gt;https://eslint.org/docs/rules/no-undef#nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/62335842/3627387"&gt;https://stackoverflow.com/a/62335842/3627387&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/63512242/3627387"&gt;https://stackoverflow.com/a/63512242/3627387&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project"&gt;
  &lt;/a&gt;
  Project
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/imomaliev/vue-ts-tailwind"&gt;vue-ts-tailwind&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>prettier</category>
      <category>eslint</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Developer First Culture &amp; Collectives at Stack Overflow w/ Ben Matthews</title>
      <author>Conor Bronsdon</author>
      <pubDate>Tue, 27 Jul 2021 16:44:33 +0000</pubDate>
      <link>https://dev.to/linearb/developer-first-culture-collectives-at-stack-overflow-w-ben-matthews-haf</link>
      <guid>https://dev.to/linearb/developer-first-culture-collectives-at-stack-overflow-w-ben-matthews-haf</guid>
      <description>&lt;p&gt;If you’ve ever written code you’ve probably heard of Stack Overflow.&lt;/p&gt;

&lt;p&gt;Most of us have learned from them or shared knowledge on their site. They’ve also got one of the most inclusive and positive engineering cultures out there.&lt;/p&gt;

&lt;p&gt;On this week's episode of &lt;a href="https://open.spotify.com/episode/54GeeR80VdGjiXwenLnDzc"&gt;Dev Interrupted&lt;/a&gt; we've brought on Ben Matthews, Director of Engineering at Stack Overflow, to give us the inside scoop on Stack's operations, teams and company culture. Ben also discusses their newest product launch - &lt;strong&gt;Collectives&lt;/strong&gt; - and why he thinks they will be a game changer for dev teams.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/54GeeR80VdGjiXwenLnDzc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Stack Overflow engineering: a developer-first culture&lt;/li&gt;
&lt;li&gt;Leading with empathy and empowering developers&lt;/li&gt;
&lt;li&gt;Hiring the right devs&lt;/li&gt;
&lt;li&gt;Onboarding with purpose&lt;/li&gt;
&lt;li&gt;Team composition and organization&lt;/li&gt;
&lt;li&gt;Enabling work-life balance and maintaining team morale by actually caring: and requiring time off&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#youtube-highlights"&gt;
  &lt;/a&gt;
  &lt;strong&gt;YouTube Highlights:&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/O873vxozamw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5rRsbb75Oqg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s1WHPiQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrzc51hhz30s20dxabmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s1WHPiQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrzc51hhz30s20dxabmw.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>culture</category>
      <category>management</category>
      <category>stackoverflow</category>
    </item>
    <item>
      <title>Adding Typescript to your Existing Rails App</title>
      <author>Honeybadger Staff</author>
      <pubDate>Tue, 27 Jul 2021 16:36:35 +0000</pubDate>
      <link>https://dev.to/honeybadger/adding-typescript-to-your-existing-rails-app-5clf</link>
      <guid>https://dev.to/honeybadger/adding-typescript-to-your-existing-rails-app-5clf</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally written by &lt;a href="https://www.honeybadger.io/blog/typescript-rails/#authorDetails"&gt;Ayooluwa Isaiah&lt;/a&gt; on the &lt;a href="https://www.honeybadger.io/blog/typescript-rails/"&gt;Honeybadger Developer Blog&lt;/a&gt;.&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;TypeScript is a strongly typed superset of JavaScript developed and maintained by Microsoft. Strong typing helps you write cleaner code and detect and fix potential errors much earlier in the development process.&lt;/p&gt;

&lt;p&gt;Because TypeScript is a superset of JavaScript, any existing JavaScript program is also a valid TypeScript program. This means TypeScript can interface seamlessly with any existing JavaScript code. It also means migrating from JavaScript to TypeScript can be done incrementally.&lt;/p&gt;

&lt;p&gt;Although TypeScript and JavaScript can work well together, there are a number of important factors to consider when planning a migration. This article will give you a firm footing, so you can decide if a migration is the right fit for your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-typescript-to-your-project"&gt;
  &lt;/a&gt;
  Add TypeScript to your project
&lt;/h2&gt;

&lt;p&gt;The basic thing to keep in mind when migrating from JavaScript to TypeScript is that the latter is written in files with the &lt;code&gt;.ts&lt;/code&gt; extension instead of &lt;code&gt;.js&lt;/code&gt;. However, you can allow JavaScript files to be processed through the TypeScript compiler to avoid having to rewrite all your code in TypeScript.&lt;/p&gt;

&lt;p&gt;Before you go further, make sure your text editor or IDE is configured to work with TypeScript. A key advantage of using TypeScript is that errors can be reported within your editor before compiling the code along with intelligent code completion. &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; has built-in support for the TypeScript language, so if you use this editor, you don't need to do anything. Otherwise, it should be easy to find a third-party plugin that will add TypeScript support to your editor.&lt;/p&gt;

&lt;p&gt;Once you've set up your editor, the next step is adding the TypeScript compiler to your project. You can do so via &lt;code&gt;npm&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;typescript &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command above adds the TypeScript compiler to your project, which can be accessed using the &lt;code&gt;npx tsc&lt;/code&gt; command. You can also install the compiler globally to make the &lt;code&gt;tsc&lt;/code&gt; command accessible from anywhere, but a local installation should be preferred so that builds are reproducible across different machines.&lt;/p&gt;

&lt;p&gt;Once you have TypeScript installed, you need to create a configuration file for your project. TypeScript uses a &lt;code&gt;tsconfig.json&lt;/code&gt; file to manage the options for your project, such as the files to include and the types of checking you want to perform. Here's a minimal configuration that you can start with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"allowJs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"./src/**/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most common options to configure in the JSON file are the &lt;code&gt;compilerOptions&lt;/code&gt; and &lt;code&gt;include&lt;/code&gt; properties. The latter is used to specify an array of filenames or patterns to include in the program relative to the &lt;code&gt;tsconfig.json&lt;/code&gt; file. It supports wildcard characters to form glob patterns, which may or may not include a file extension. If the file extension is omitted (as above), only supported extensions are included: &lt;code&gt;.ts&lt;/code&gt;, &lt;code&gt;.tsx&lt;/code&gt;, &lt;code&gt;.d.ts&lt;/code&gt; by default, with &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.jsx&lt;/code&gt; if &lt;code&gt;compilerOptions.allowJs&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;compilerOptions&lt;/code&gt; property, however, allows you to determine how loose or strict the compiler should be when processing the build. This is where the bulk of your configuration will be. Here's what each option specified above does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;target&lt;/code&gt; property above allows you to transform newer JavaScript syntax to an older version, such as ECMAScript 5.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allowJs&lt;/code&gt; causes the TypeScript compiler to accept JavaScript files (including imports). This is a way to incrementally convert to TypeScript by allowing &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.tsx&lt;/code&gt; files to live alongside existing JavaScript files.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;outDir&lt;/code&gt; causes the build to be outputted to the &lt;code&gt;dist&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, you are able to run the compiler in watch mode using &lt;code&gt;npx tsc --watch&lt;/code&gt;, and it will compile the source files and emit the output to the dist folder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compiling-typescript-with-webpack"&gt;
  &lt;/a&gt;
  Compiling TypeScript with Webpack
&lt;/h2&gt;

&lt;p&gt;There are many ways to integrate TypeScript with an existing Webpack configuration. If you use the &lt;a href="https://github.com/babel/babel-loader"&gt;babel-loader&lt;/a&gt; package to transpile JavaScript files, you can add the &lt;a href="https://babeljs.io/docs/en/babel-preset-typescript.html"&gt;@babel/preset-typescript&lt;/a&gt; preset to generate JavaScript files and the &lt;a href="https://github.com/TypeStrong/fork-ts-checker-webpack-plugin"&gt;Fork TS Checker Webpack Plugin&lt;/a&gt; package to run the TypeScript type checker so that the build fails if there are type errors.&lt;/p&gt;

&lt;p&gt;First, install both packages with &lt;code&gt;npm&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;fork-ts-checker-webpack-plugin @babel/preset-typescript &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, update your Webpack configuration file to roughly mirror what is shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ForkTsCheckerWebpackPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fork-ts-checker-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;typescript&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;ts|js&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-typescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/main.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;typescript&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[name].bundle.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ForkTsCheckerWebpackPlugin&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, Webpack will take care of transpiling and type checking the files and will cause the build to fail if there are any errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aswKE-z0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/typescript-rails/1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aswKE-z0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/typescript-rails/1.png" alt="Webpack build fails on error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-typescript-to-a-rails-webpacker-project"&gt;
  &lt;/a&gt;
  Adding TypeScript to a Rails + Webpacker project
&lt;/h2&gt;

&lt;p&gt;The following instructions assume that you already have a Rails 6 project using Webpacker 5.1 or later. The first thing you need to do is add TypeScript support to your project using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails webpacker:install:typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This ensures that your TypeScript code is transpiled using Babel (through the &lt;code&gt;@babel/preset-typescript&lt;/code&gt; package). You need to install the &lt;a href="https://github.com/TypeStrong/fork-ts-checker-webpack-plugin"&gt;Fork TS Checker Webpack Plugin&lt;/a&gt; package manually if you want to enable type checking as part of the Webpack build process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; fork-ts-checker-webpack-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, update your &lt;code&gt;config/webpack/development.js&lt;/code&gt; file as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ForkTsCheckerWebpackPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fork-ts-checker-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ForkTsCheckerWebpackPlugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ForkTsCheckerWebpackPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;typescript&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;configFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../tsconfig.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#moving-to-typescript"&gt;
  &lt;/a&gt;
  Moving to TypeScript
&lt;/h2&gt;

&lt;p&gt;There are essentially two main ways to transition an existing project to TypeScript. The first approach involves rewriting the entire project in TypeScript. This is not as hard as it sounds since it only involves changing the file extension to &lt;code&gt;.ts&lt;/code&gt; or &lt;code&gt;.tsx&lt;/code&gt; and fixing any type errors that the compiler emits. The main problem with this method is that you're likely to get hundreds or even thousands of errors (depending on the size of the project and strictness of your TypeScript configuration), and you'll have to put the development of new features on hold until you complete the migration, which may take an inordinate amount of time.&lt;/p&gt;

&lt;p&gt;A second more practical approach is to support a mix of JavaScript and TypeScript files in the codebase and incrementally switch files to TypeScript. Thanks to the flexibility of the TypeScript compiler (through the &lt;code&gt;allowJs&lt;/code&gt; option), this process should be a breeze. All you need to do is add TypeScript to your build process and set up a basic configuration, such as the one presented earlier in this article. Afterwards, you need to ensure that any new features are implemented in TypeScript while existing code is moved over in an incremental manner.&lt;/p&gt;

&lt;p&gt;Once you've defined your dependency graph through the &lt;code&gt;include&lt;/code&gt; or &lt;code&gt;files&lt;/code&gt; property in your &lt;code&gt;tsconfig.json&lt;/code&gt; file, the compiler will start type checking any TypeScript files in your codebase. You can also enable &lt;a href="https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files"&gt;type checking for JavaScript files&lt;/a&gt; through the &lt;code&gt;checkJs&lt;/code&gt; compiler option. This allows you to add type annotations to your JavaScript files using &lt;a href="https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files#using-types-in-jsdoc"&gt;JSDoc&lt;/a&gt; so you can start to get a feel using types in your application but without fully committing to TypeScript.&lt;/p&gt;

&lt;p&gt;When you're ready to commit, you'll need to rename the &lt;code&gt;.js&lt;/code&gt; or &lt;code&gt;.jsx&lt;/code&gt; file to &lt;code&gt;.ts&lt;/code&gt; or &lt;code&gt;.tsx&lt;/code&gt;, respectively, and start using TypeScript syntax to define the types instead of JSDoc. For example, let's say that you have an &lt;code&gt;add.js&lt;/code&gt; file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// add.js&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, everything is implicitly typed as &lt;code&gt;any&lt;/code&gt;. This means that TypeScript won't perform any type checking for these values. You can opt into type checking the plain JavaScript file using JSDoc comments as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// add.js&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * @param {number} x
 * @param {number} y
 * @returns {number}
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The TypeScript compiler will now report errors if &lt;code&gt;add&lt;/code&gt; is used incorrectly, such as when a string is passed as an argument instead of a number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AyhnHyvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/typescript-rails/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyhnHyvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/typescript-rails/2.png" alt="TypeScript complains about incorrect string type"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, you're probably ready to move the file to TypeScript. Just change the file extension to &lt;code&gt;.ts&lt;/code&gt; and translate the JSDoc comments to the TypeScript syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// add.ts&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this strategy in place, you're able to gradually migrate to TypeScript without much friction. The main caveat with this approach is that is possible for a large amount of code to remain untyped because of the lack of incentive to do so.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-thirdparty-libraries"&gt;
  &lt;/a&gt;
  Working with third-party libraries
&lt;/h2&gt;

&lt;p&gt;Migrating to TypeScript in the manner described in the previous section works great for your application code, but it's not uncommon to depend on some third-party libraries that may require some additional configuration so that the benefits of working with TypeScript are retained.&lt;/p&gt;

&lt;p&gt;Libraries written in TypeScript should work out of the box with no fiddling required. When using a compatible editor, you'll be able to see everything the library exposes, as well as the types of function parameters and return values. The compiler will ensure that you're using the right types and will fail the build if you don't.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1jLzCzql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/typescript-rails/3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1jLzCzql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/typescript-rails/3.png" alt="Autocompletion for third-party libraries in TypeScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, for packages written in JavaScript (the majority), TypeScript cannot automatically determine what the types are, so it implicitly assigns the &lt;code&gt;any&lt;/code&gt; type to the entire library. This is problematic because you don't get any type safety with the &lt;code&gt;any&lt;/code&gt; type, so even if you use a method that does not exist, the compiler wont complain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lodash&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// lodash.sneeze() is not a function&lt;/span&gt;
&lt;span class="nx"&gt;lodash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sneeze&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have the &lt;a href="https://www.typescriptlang.org/tsconfig#noImplicitAny"&gt;noImplicitAny&lt;/a&gt; compiler flag turned on (recommended), the build will fail with an error similar to the one shown below. It essentially means that TypeScript does not know what types are valid for the &lt;a href="https://github.com/lodash/lodash"&gt;Lodash&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XAum6zhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/typescript-rails/4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XAum6zhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/typescript-rails/4.png" alt="The noImplicitAny flag causes the build to fail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two main ways to solve this problem, as you can see from the error message above. Let's talk about the &lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"&gt;declaration files&lt;/a&gt; method first. It involves creating a &lt;code&gt;.d.ts&lt;/code&gt; file in which you describe the type definitions for another file or package. For example, you can create a &lt;code&gt;main.d.ts&lt;/code&gt; file in your source folder with the following contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sneeze&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file states that the lodash module exposes a &lt;code&gt;sneeze&lt;/code&gt; function that returns a string. If you run the build again, it compiles because TypeScript trusts that the type definitions in the declaration file is correct, and it has no way of checking if they are actually accurate. Of course, the code will throw a runtime error since the &lt;code&gt;sneeze&lt;/code&gt; method does not exist.&lt;/p&gt;

&lt;p&gt;If you try to use some other method from the library, the build will fail again until its type definition is added to the declaration file. This is one of the ways to add types to third-party libraries that lack them, making it possible for the compiler to provide stronger guarantees about the code.&lt;/p&gt;

&lt;p&gt;The second way to add types to plain JavaScript packages is through the &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped"&gt;DefinitelyTyped&lt;/a&gt; package, which is a community-sourced repository of type definition files. If you're trying to use a popular JavaScript library in your project, there is a good chance the type definitions for the library have already been contributed to the repository. This means you can easily bring them into your project through &lt;code&gt;npm&lt;/code&gt; under the &lt;code&gt;@types&lt;/code&gt; scope. For example, the types for the lodash package can be added through the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; @types/lodash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like any other npm package, type declaration packages are installed in the node_modules folder. Within it, you will find a &lt;code&gt;@types&lt;/code&gt; folder which contains all typings. After running the command above, you will find a &lt;code&gt;lodash&lt;/code&gt; folder inside &lt;code&gt;@types&lt;/code&gt; which contains several files with the type information for all the lodash methods. The typescript compiler understands this convention so it will recognize the types automatically without your intervention.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wo98Y_ES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/typescript-rails/6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wo98Y_ES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/typescript-rails/6.png" alt="Compile error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, you can remove the module definition in &lt;code&gt;main.d.ts&lt;/code&gt; and build the project once again. As you can see from the image above, it correctly reports that &lt;code&gt;sneeze&lt;/code&gt; does not exist. If we use a correct method like &lt;code&gt;ceil&lt;/code&gt; with the correct arguments, it compiles just fine. Also, you'll get that sweet autocompletion goodness with type annotations in your editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uc45Pkzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/typescript-rails/5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uc45Pkzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.honeybadger.io/images/blog/posts/typescript-rails/5.png" alt="Autocompletion for the Lodash library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that type definitions in the DefinitelyTyped packaged are community-sourced and are not provided by the library authors in most cases. This means that from time to time, you might encounter missing or incorrect definitions. Let's talk about what to do if this situation arises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#merging-declarations"&gt;
  &lt;/a&gt;
  Merging declarations
&lt;/h2&gt;

&lt;p&gt;The TypeScript complier allows the &lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html#global-augmentation"&gt;merging&lt;/a&gt; of two or more types into one definition provided they have the same name. This merged definition retains the features of both of the original declarations. Here's an example that should make this concept easier to understand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, both &lt;code&gt;Person&lt;/code&gt; declarations are merged into one definition, so the &lt;code&gt;jack&lt;/code&gt; object contains the all the properties from both interfaces. One thing to note here is that subsequent property declarations of the same name must have the same type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// works fine&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// throws an error&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This might not look very useful on its own, but it will come in handy if you want to extend a type that is not defined by you. For example, let's say the &lt;code&gt;sneeze&lt;/code&gt; method really exists in lodash but is currently missing in the &lt;code&gt;@types/lodash&lt;/code&gt; package. You can add it through declaration merging in a &lt;code&gt;.d.ts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.d.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LoDashStatic&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sneeze&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To extend a module, you need to import it and use &lt;code&gt;declare module&lt;/code&gt; to get inside the module. If you look at the &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/lodash"&gt;@types/lodash&lt;/a&gt; package, you'll notice that all the methods are defined on the &lt;code&gt;LoDashStatic&lt;/code&gt; interface. To add a new method, all you need to do declare the interface again in the &lt;code&gt;lodash&lt;/code&gt; module and add the type definition for the function. At this point, if you try to use the &lt;code&gt;sneeze&lt;/code&gt; method in your code, it will compile along with all the other methods that exist on the original &lt;code&gt;LoDashStatic&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;This way, you can quickly fix a missing type error without waiting for the package to be updated. Once the relevant &lt;code&gt;@types&lt;/code&gt; package is updated and published, you can remove the custom definition in the &lt;code&gt;.d.ts&lt;/code&gt; file and update the package through &lt;code&gt;npm&lt;/code&gt;, and everything else should keep working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Using JavaScript and TypeScript together in the same codebase may take some getting used to, but the knowledge of type definitions and declaration merging should make things a lot easier. As soon as you've converted your entire codebase to TypeScript, you should ramp up the &lt;a href="https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html#getting-stricter-checks"&gt;strictness&lt;/a&gt; of the compiler for greater safety. Also, check out libraries such as &lt;a href="https://github.com/pelotom/runtypes"&gt;runtypes&lt;/a&gt; and &lt;a href="https://github.com/gcanti/io-ts#usage"&gt;io-ts&lt;/a&gt; for runtime validation of your static types.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and happy coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-honeybadger"&gt;
  &lt;/a&gt;
  About Honeybadger
&lt;/h2&gt;

&lt;p&gt;Honeybadger has your back when it counts. We're the only error tracker that combines exception monitoring, uptime monitoring, and cron monitoring into a single, simple to use platform.  &lt;/p&gt;

&lt;p&gt;Our mission: to tame production and make you a better, more productive developer. &lt;a href="https://www.honeybadger.io/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
    </item>
    <item>
      <title>How I Think About JavaScript Types (A Mental Model for Beginners)</title>
      <author>Michael Mangialardi</author>
      <pubDate>Tue, 27 Jul 2021 16:16:20 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/how-i-think-about-javascript-types-a-mental-model-for-beginners-bg1</link>
      <guid>https://dev.to/michaelmangial1/how-i-think-about-javascript-types-a-mental-model-for-beginners-bg1</guid>
      <description>&lt;p&gt;Recently, I've had several friends who are aspiring to become professional JavaScript developers, resulting in a steady supply of questions. The whole experience has had me thinking about how I can break the curse of knowledge and explain software development (JavaScript in particular) concepts in a way that amuses and sticks with early learners. In an effort to record my experience, I will begin to capture my mental model for comprehending JavaScript types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Logically, to understand types one must first understand &lt;em&gt;variables.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the realm of science, a variable is something that can change in an experiment that needs to be changed, controlled, or observed depending on the goal of the experiment. To put it in simpler terms, it is something that can change that plays a factor in the outcome of an experiment. For example, if you conducted an experiment to determine the optimal amount of water for a plant's growth, the water would be a changeable factor that would impact the outcome of the experiment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8fpqyiJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1475906089153-644d9452ce87%3Fixlib%3Drb-1.2.1%26q%3D85%26fm%3Djpg%26crop%3Dentropy%26cs%3Dsrgb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8fpqyiJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1475906089153-644d9452ce87%3Fixlib%3Drb-1.2.1%26q%3D85%26fm%3Djpg%26crop%3Dentropy%26cs%3Dsrgb" alt="https://images.unsplash.com/photo-1475906089153-644d9452ce87?ixlib=rb-1.2.1&amp;amp;q=85&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=srgb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the realm of computer science, your code is effectively an experiment. Writing code is nothing else but experimenting with various instructions for a computer to reach the desired outcome. In a coding "experiment," there are also factors that can change that impact the outcome of the experiment. That is, there are variables in a coding experiment. As computer science is a narrower discipline of science, and a coding experiment is a narrower kind of experiment, the variables in a coding experiment are more narrow/specific. In code, a variable represents &lt;em&gt;data&lt;/em&gt; that plays a factor in the outcome of your code, the outcome of your instructions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVOwRL0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1610563166150-b34df4f3bcd6%3Fixlib%3Drb-1.2.1%26q%3D85%26fm%3Djpg%26crop%3Dentropy%26cs%3Dsrgb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVOwRL0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1610563166150-b34df4f3bcd6%3Fixlib%3Drb-1.2.1%26q%3D85%26fm%3Djpg%26crop%3Dentropy%26cs%3Dsrgb" alt="https://images.unsplash.com/photo-1610563166150-b34df4f3bcd6?ixlib=rb-1.2.1&amp;amp;q=85&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=srgb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a word, variables represent/store data in a computer application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data"&gt;
  &lt;/a&gt;
  Data
&lt;/h2&gt;

&lt;p&gt;This begs a question. What is data?&lt;/p&gt;

&lt;p&gt;In code, data is simply information that can be interpreted by a programming language.&lt;/p&gt;

&lt;p&gt;Just as a human language is a method of communication accompanied by peculiar rules and styles, a programming language is a method of communicating with a computer to write instructions to achieve a desired outcome. And there are various human languages that are all means to the same end, communication, there are various programming languages which are all means to creating a computer application. Each language may have similarities and differences in the computer world as much as the human world.&lt;/p&gt;

&lt;p&gt;Each programming language is effectively an intermediate layer between the coder and the computer. The programming language has certain rules for how you communicate with the computer to write instructions. The programming language, therefore, interprets your code and knows what to do with it. It's an attempt at making things easier than the nitty-gritty of having to talk directly to the computer yourself. Think of it as a translator that offers a language that you can speak to them in, interprets your words, and speaks to the computer in its unique, complicated language.&lt;/p&gt;

&lt;p&gt;So, each programming language has different rules for how to "speak the language" with code. Now, I won't dive into the entirety of how to speak this language. We're just interested in the rules of JavaScript, a programming language, to interpret different types of information.&lt;/p&gt;

&lt;p&gt;What are the different types of information, or data, that JavaScript knows to interpret?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#basic-types"&gt;
  &lt;/a&gt;
  Basic Types
&lt;/h3&gt;

&lt;p&gt;Well, there are 5 &lt;em&gt;basic&lt;/em&gt; data (information) types that you will ordinarily come across:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's break down each one.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;string&lt;/em&gt; is for storing &lt;em&gt;text&lt;/em&gt; information. A use of strings is displaying text to a user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am text information that is being represented.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;em&gt;boolean&lt;/em&gt; is for storing whether something is &lt;em&gt;true&lt;/em&gt; or &lt;em&gt;false&lt;/em&gt;. It's like a coin. It's either heads, or it's tails. It's either true, or it's false. A use of booleans is for handling &lt;em&gt;conditional&lt;/em&gt; logic in your instructions (i.e. if this is true —&amp;gt; do that).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;em&gt;number&lt;/em&gt; is for storing &lt;em&gt;numerical&lt;/em&gt; information. A number can be a whole number (integer) or a number with a decimal place (float or floating-point number). A use of numbers is doing math in your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Undefined&lt;/em&gt; is the default type when the programming language receives a variable that was never assigned a value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;variableThatWasNeverAssignedAValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Null&lt;/em&gt; is also used to signify that a variable has no value (is not defined). However, this type is used when a &lt;em&gt;coder&lt;/em&gt;, not the programming language, wants to mark a variable as having no value. In other words, it is used when a coder wants to &lt;em&gt;intentionally&lt;/em&gt; mark a variable as having no value. Technically, a variable of type null is assigned as it has been assigned a value of null. This is useful because if a coder inspects a variable and sees that it is undefined, they will know there must be a mistake in their code. If the coder instead saw that it is null, then they will know that the variable having no value was intentional. This can help find mistakes in your coded instructions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;variableThatIsIntentionallyAssignedNoValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#structural-types"&gt;
  &lt;/a&gt;
  Structural Types
&lt;/h2&gt;

&lt;p&gt;In addition to the basic types, there are &lt;em&gt;structural&lt;/em&gt; types that you will ordinarily come across:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both arrays and objects are called &lt;em&gt;structural&lt;/em&gt; types because they &lt;em&gt;structure&lt;/em&gt; data, multiple types of data.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Arrays&lt;/em&gt; store data in a sequence. Think of it like a line, or array, of Roman soldiers lined up in a sequence.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mn92si8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-us-west-2.amazonaws.com/secure.notion-static.com/97f90576-46e7-4df1-b7af-ee08975a1874/Untitled.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mn92si8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-us-west-2.amazonaws.com/secure.notion-static.com/97f90576-46e7-4df1-b7af-ee08975a1874/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/97f90576-46e7-4df1-b7af-ee08975a1874/Untitled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of soldiers, the data in the sequence of an array are called &lt;em&gt;elements&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An element can be any type, including the basic types we just discussed and the structural types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arrays are helpful for grouping variables together, establishing an association. Arrays are also &lt;em&gt;iterable.&lt;/em&gt; Meaning, you can write instructions to "loop" through an array, accessing each element, and then doing something with that element. Think of a commander going through the line of Roman soldiers one-by-one and doing something (like checking the soldier's helmet). Each programming language, including JavaScript, have built in ways that you can "iterate," or "loop" through an array, have access to an element, and do something with that element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Objects&lt;/em&gt; are used to associate data, or a &lt;em&gt;value&lt;/em&gt;, with a &lt;em&gt;key&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;someKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;anotherKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Objects also group variables together establishing an association. This can be cleaner, more organized than writing out a bunch of variables. Unlike arrays, they are useful when you want to "lookup" a value by a key. For arrays, you have to "loop" through each element to access value. With objects, you can "lookup" a value by referencing the key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;someKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;anotherKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someKey&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; 123&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;someKey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; 123&lt;/span&gt;

&lt;span class="c1"&gt;// also&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;anotherKey&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; 456&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;anotherKey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; 456&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key-value pairs on an object are called &lt;em&gt;properties&lt;/em&gt;. The value of a property is accessed by a key, either by &lt;em&gt;dot notation&lt;/em&gt; (&lt;code&gt;obj.anotherKey&lt;/code&gt;) or &lt;em&gt;bracket notation&lt;/em&gt; (&lt;code&gt;obj['anotherKey']&lt;/code&gt;). These are just two different means to the same end according to the rules of JavaScript.&lt;/p&gt;

&lt;p&gt;Objects have sometimes been called "dictionaries," as you can look up a definition (the value) by looking up a phrase (the key).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#action-types"&gt;
  &lt;/a&gt;
  Action Types
&lt;/h3&gt;

&lt;p&gt;Finally, there are &lt;em&gt;functions&lt;/em&gt; which I like to call an &lt;em&gt;action&lt;/em&gt; type.&lt;/p&gt;

&lt;p&gt;A function is a chunk of code that only runs when it is triggered/called. This is important for not running all your code at once, but to have code run according to a timeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;putMeInCoachImReadyToPlay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Batter Up!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, the function has some code ready to be executed. The code will execute when the function is "called." Functions are called by typing out the function name plus &lt;code&gt;()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;putMeInCoachImReadyToPlay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; alerts "Batter Up!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can think of &lt;code&gt;()&lt;/code&gt; as pressing the play button on a remote.&lt;/p&gt;

&lt;p&gt;You can also "supply" data needed for a function to work as you expect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;putMeInCoachImReadyToPlay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, Batter Up!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;putMeInCoachImReadyToPlay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// --&amp;gt; alerts "Nick, Batter Up!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;In conclusion, it would be very hard to play a sport without knowing its rules. Similarly, it is very hard to learn a programming language without knowing its rules. In order to understand rules, we need mental models to make it stick.&lt;/p&gt;

&lt;p&gt;Hopefully, this article helps paint a mental model for variables and data types in JavaScript. However, the best mental model is the one that makes most sense to you, and that can vary from person to person. The important thing is to be intentional to form mental models so that the load of learning new information is comprehendible and not overwhelming.&lt;/p&gt;

&lt;p&gt;So, if you are new to JavaScript, write down the mental model you are forming as an aid to your learning. If you are familiar with JavaScript, write down the mental model you have accumulated. As writing this article as proven to me, even a veteran could benefit from thinking through JavaScript mental models.&lt;/p&gt;

&lt;p&gt;If you want some more help on forming a JavaScript mental model, I recommend Dan Abramov's course &lt;em&gt;&lt;a href="https://justjavascript.com/"&gt;Just JavaScript&lt;/a&gt;&lt;/em&gt;. His mental models are different than mine but the intent and usefulness is the same.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Terraform Full Course for Beginners | Hashicorp Terraform Associate Certification Exam Prep course</title>
      <author>Sandip Das</author>
      <pubDate>Tue, 27 Jul 2021 16:10:40 +0000</pubDate>
      <link>https://dev.to/aws-heroes/terraform-full-course-for-beginners-hashicorp-terraform-associate-certification-exam-prep-course-5eg7</link>
      <guid>https://dev.to/aws-heroes/terraform-full-course-for-beginners-hashicorp-terraform-associate-certification-exam-prep-course-5eg7</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EJ3N-hhiWv0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform Full Course for Beginners | Hashicorp Terraform Associate &lt;br&gt;
Certification Exam Prep course  | Terraform course With AWS Example | Terraform explained for Beginners&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Infrastructure as Code (IaC)&lt;/li&gt;
&lt;li&gt;What is Infrastructure as Code&lt;/li&gt;
&lt;li&gt;IaC and its benefits&lt;/li&gt;
&lt;li&gt;What is Terraform? &lt;/li&gt;
&lt;li&gt;Terraform Features&lt;/li&gt;
&lt;li&gt;Terraform Basic Commands &lt;/li&gt;
&lt;li&gt;Terraform Main Commands In-depth explanation
(Terraform get, init, validate, plan, apply, state, workspaces, destroy, import, taint, graph)&lt;/li&gt;
&lt;li&gt;Terraform Coding
(Structure, resources, data sources, variable, providers, functions, modules, 
provisioners, Lifecycle Policy, Remote State backend)&lt;/li&gt;
&lt;li&gt;Terraform Cloud &amp;amp; Enterprise&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Terraform is our tool of choice to manage the entire lifecycle of infrastructure using infrastructure as code. That means declaring infrastructure components in configuration files that are then used by Terraform to provision, adjust and tear down infrastructure in various cloud providers&lt;/p&gt;

&lt;p&gt;In this tutorial, you will learn in-depth about what is Terraform, the important commands we use daily, how we can code with Terraform, and how to work with teams while coding infra as code with Terraform. &lt;/p&gt;

&lt;p&gt;▬▬▬▬▬▬ T I M E S T A M P S ⏰ ▬▬▬▬▬▬ &lt;br&gt;
0:00 - Intro&lt;br&gt;
0:33 - What is Infrastructure as Code (IaC)?&lt;br&gt;
01:48 - IaC benefits&lt;br&gt;
04:40 - What is Terraform?&lt;br&gt;
05:33 - Terraform Features&lt;br&gt;
7:28 - Terraform CLI overview&lt;br&gt;
7:54 - Terraform Installation Instructions &lt;br&gt;
8:26 - Terraform Init&lt;br&gt;
10:26 - Terraform Validate&lt;br&gt;
12:10 - Terraform Plan&lt;br&gt;
14:49 - Terraform Apply&lt;br&gt;
19:42 - Terraform State&lt;br&gt;
22:56 - Terraform Workspaces&lt;br&gt;
26:54 - Terraform Destroy&lt;br&gt;
28:12 - Terraform Import&lt;br&gt;
29:12 - Terraform Taint&lt;br&gt;
31:22 - Terraform Coding Intro&lt;br&gt;
32:38 - Terraform Resource Referencing&lt;br&gt;
35:12 - Terraform Example Code Explanation&lt;br&gt;
42:40 - Supply AWS Credentials to Terraform&lt;br&gt;
43:54 - Terraform Data Sources&lt;br&gt;
45:10 - Terraform Variables Overview&lt;br&gt;
45:56 - Input Variable In-depth explanation&lt;br&gt;
48:12 - Different Ways to Pass Input variables in Terraform&lt;br&gt;
49:56 - Input validation&lt;br&gt;
52:46 - Input Variable Order&lt;br&gt;
52:46 - Output Values&lt;br&gt;
55:12 - Local Values&lt;br&gt;
56:14 - Terraform Providers&lt;br&gt;
58:32 - Terraform Functions&lt;br&gt;
1:00:00 - Terraform Modules&lt;br&gt;
1:01:54 - How to Use Terraform Modules&lt;br&gt;
1:04:45 - Terraform Provisioners&lt;br&gt;
1:07:28 - Lifecycle Management In Terraform&lt;br&gt;
1:09:18 - Remote State Backends in Terraform (Very Important)&lt;br&gt;
1:15:00 - Terraform Cloud&lt;br&gt;
1:22:11 - Terraform Enterprise&lt;br&gt;
1:23:34 -  Closing Notes&lt;/p&gt;

&lt;p&gt;▬▬▬▬▬▬ Useful Links 🔗 ▬▬▬▬▬▬ &lt;br&gt;
Terraform Example AWS Code/Projects: ► &lt;a href="https://github.com/hashicorp/terraform-provider-aws/tree/master/examples"&gt;https://github.com/hashicorp/terraform-provider-aws/tree/master/examples&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Terraform Providers: ► &lt;a href="https://registry.terraform.io/browse/providers"&gt;https://registry.terraform.io/browse/providers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Terraform Functions:  ► &lt;a href="https://www.terraform.io/docs/language/functions/index.html"&gt;https://www.terraform.io/docs/language/functions/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Terraform Commands: ► &lt;a href="https://www.terraform.io/docs/cli/commands/index.html"&gt;https://www.terraform.io/docs/cli/commands/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;▬▬▬▬▬▬ Course Ebook 🚀      ▬▬▬▬▬▬ &lt;br&gt;
Terraform Full Course Ebook: ► &lt;a href="https://drive.google.com/file/d/1lTzVx7LbwB6618MIwnCU_p4maA4m_4Fs/view?usp=sharing"&gt;https://drive.google.com/file/d/1lTzVx7LbwB6618MIwnCU_p4maA4m_4Fs/view?usp=sharing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;▬▬▬▬▬▬ Connect with me 👋   ▬▬▬▬▬▬ &lt;br&gt;
My Site   ►  &lt;a href="https://bit.ly/3rz82SQ"&gt;https://bit.ly/3rz82SQ&lt;/a&gt;&lt;br&gt;
INSTAGRAM ►  &lt;a href="https://bit.ly/3iFWfy8"&gt;https://bit.ly/3iFWfy8&lt;/a&gt;&lt;br&gt;
TWITTER   ►  &lt;a href="https://bit.ly/3i6lkDs"&gt;https://bit.ly/3i6lkDs&lt;/a&gt;&lt;br&gt;
LINKEDIN  ►  &lt;a href="https://bit.ly/3rAeCsm"&gt;https://bit.ly/3rAeCsm&lt;/a&gt;&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>devops</category>
      <category>infrastructureascode</category>
      <category>aws</category>
    </item>
    <item>
      <title>Mastering Enums in TypeScript</title>
      <author>Arnaud Leymet</author>
      <pubDate>Tue, 27 Jul 2021 16:06:10 +0000</pubDate>
      <link>https://dev.to/prod/mastering-enums-in-typescript-1c1j</link>
      <guid>https://dev.to/prod/mastering-enums-in-typescript-1c1j</guid>
      <description>&lt;p&gt;Let's assume we have the following enum:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;Fruit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;APPLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;BANANA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;CHERRY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cherry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-the-keys-of-an-enum-dynamically"&gt;
  &lt;/a&gt;
  Get the keys of an enum dynamically
&lt;/h3&gt;

&lt;p&gt;This one needs the use of two type operators: &lt;a href="https://www.typescriptlang.org/docs/handbook/2/keyof-types.html#the-keyof-type-operator"&gt;&lt;code&gt;keyof&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#the-typeof-type-operator"&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;FruitValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;Fruit&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; type FruitValue = "APPLE" | "BANANA" | "CHERRY"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-the-keys-of-an-enum-dynamically"&gt;
  &lt;/a&gt;
  Get the keys of an enum dynamically
&lt;/h3&gt;

&lt;p&gt;This snippet leverages the &lt;a href="https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html"&gt;Template Literal&lt;/a&gt; type operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;FruitValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; type FruitValue = "apple" | "banana" | "cherry"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterate-over-an-enum-keys"&gt;
  &lt;/a&gt;
  Iterate over an enum keys
&lt;/h3&gt;

&lt;p&gt;Looping through the enum keys is as simple as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; APPLE&lt;/span&gt;
&lt;span class="c1"&gt;//    BANANA&lt;/span&gt;
&lt;span class="c1"&gt;//    CHERRY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterate-over-an-enum-values"&gt;
  &lt;/a&gt;
  Iterate over an enum values
&lt;/h3&gt;

&lt;p&gt;In the same spirit, looping through the enum values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Fruit&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; apple&lt;/span&gt;
&lt;span class="c1"&gt;//    banana&lt;/span&gt;
&lt;span class="c1"&gt;//    cherry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>typescript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build a Facebook Chatbot For Beginners</title>
      <author>Tousif</author>
      <pubDate>Tue, 27 Jul 2021 16:03:29 +0000</pubDate>
      <link>https://dev.to/project_beginners/build-a-facebook-chatbot-for-beginners-4chf</link>
      <guid>https://dev.to/project_beginners/build-a-facebook-chatbot-for-beginners-4chf</guid>
      <description>&lt;p&gt; &lt;span&gt;While some digital marketers are still discovering the power of social media, those who are on the cutting edge of technological progress are raising awareness about chatbots and how to build a bot.&lt;/span&gt;&lt;/p&gt;
&lt;p id="f646"&gt;The rapid rise of chatbots has been made possible thanks to the recent advances in artificial intelligence and machine learning. Younger generations of consumers, who have grown up with at least one chat window permanently opened, find it natural to communicate with their favorite brands and companies through interactive messenger chatbots that mimic real conversations with people.&lt;/p&gt;
&lt;p id="28af"&gt;By integrating chatbots with e-commerce platforms, it’s possible to monetize existing social media accounts by helping consumers find products or offering personalized recommendations based on their instant messaging profiles and personal preferences.&lt;/p&gt;

&lt;p id="28af"&gt;Originally Published: &lt;b&gt;&lt;a href="https://bit.ly/3fl4dvV"&gt;How to make a Facebook Chatbot for beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Kool Way to Run Hugo Static Sites on Docker</title>
      <author>Daniel Polito</author>
      <pubDate>Tue, 27 Jul 2021 16:02:53 +0000</pubDate>
      <link>https://dev.to/kooldev/the-kool-way-to-run-hugo-static-sites-on-docker-3k04</link>
      <guid>https://dev.to/kooldev/the-kool-way-to-run-hugo-static-sites-on-docker-3k04</guid>
      <description>&lt;p&gt;In just 2 simple steps, you can use &lt;a href="https://github.com/kool-dev/kool"&gt;&lt;strong&gt;Kool&lt;/strong&gt;&lt;/a&gt; to start a new &lt;strong&gt;Hugo&lt;/strong&gt; application running in a local Docker development environment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Kool&lt;/strong&gt; is a free, open source CLI tool that makes local development with Docker super easy. Kool CLI will level up your development workflow, and help you and your team improve the way you develop and deploy cloud native applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;If you haven't done so already, you first need to &lt;a href="https://kool.dev/docs/getting-started/installation"&gt;install Docker and the Kool CLI&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you already have &lt;code&gt;kool&lt;/code&gt; installed, make sure you're running the latest version with &lt;code&gt;kool self-update&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-a-new-hugo-application"&gt;
  &lt;/a&gt;
  Step 1 – Create a New Hugo Application
&lt;/h2&gt;

&lt;p&gt;Use the &lt;a href="https://kool.dev/docs/commands/kool-create"&gt;&lt;code&gt;kool create&lt;/code&gt; command&lt;/a&gt; to create your new Hugo project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool create hugo my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;IMPORTANT: if you're on &lt;strong&gt;Windows WSL&lt;/strong&gt; or &lt;strong&gt;Linux&lt;/strong&gt;, you should run &lt;code&gt;sudo kool create hugo my-project&lt;/code&gt; as the superuser (via &lt;code&gt;sudo&lt;/code&gt;) to avoid permissions issues when creating the project directory and files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Under the hood, this command will run &lt;code&gt;kool docker klakegg/hugo:ext-alpine new site my-project&lt;/code&gt; using the &lt;a href="https://hub.docker.com/r/klakegg/hugo/"&gt;klakegg/hugo&lt;/a&gt; Docker image.&lt;/p&gt;

&lt;p&gt;Now, move into your new Hugo project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After installing Hugo, &lt;code&gt;kool create&lt;/code&gt; automatically runs the &lt;a href="https://kool.dev/docs/commands/kool-preset"&gt;&lt;code&gt;kool preset hugo&lt;/code&gt; command&lt;/a&gt;, which auto-generates the following configuration files and adds them to your project. As your project evolves, you can easily modify and extend these files to suit your needs.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+docker-compose.yml
+kool.yml
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#step-2-start-your-local-environment"&gt;
  &lt;/a&gt;
  Step 2 – Start Your Local Environment
&lt;/h2&gt;

&lt;p&gt;As mentioned above, the &lt;a href="https://kool.dev/docs/commands/kool-preset"&gt;&lt;code&gt;kool preset&lt;/code&gt; command&lt;/a&gt; added a &lt;strong&gt;kool.yml&lt;/strong&gt; file to your project. To help get you started, &lt;strong&gt;kool.yml&lt;/strong&gt; comes prebuilt with an initial set of scripts based on your chosen framework and stack. Since Hugo requires a few extra steps to create a Hello World site, &lt;strong&gt;kool.yml&lt;/strong&gt; includes a special &lt;code&gt;quickstart&lt;/code&gt; script to make it super easy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Think of &lt;strong&gt;kool.yml&lt;/strong&gt; as an easy-to-use task &lt;em&gt;helper&lt;/em&gt;. Instead of writing custom shell scripts, add your own scripts to &lt;strong&gt;kool.yml&lt;/strong&gt; (under the &lt;code&gt;scripts&lt;/code&gt; key), and run them with &lt;code&gt;kool run SCRIPT&lt;/code&gt; (e.g. &lt;code&gt;kool run hugo&lt;/code&gt;). You can add your own single line commands (see &lt;code&gt;hugo&lt;/code&gt; below), or add a list of commands that will be executed in sequence (see &lt;code&gt;quickstart&lt;/code&gt; below).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;scripts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;hugo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kool docker -p 1313:1313 klakegg/hugo:ext-alpine&lt;/span&gt;
    &lt;span class="na"&gt;dev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kool run hugo server -D&lt;/span&gt;

    &lt;span class="c1"&gt;# remove or modify to suit the needs of your project&lt;/span&gt;
    &lt;span class="na"&gt;quickstart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool start&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;git init&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;echo theme = \"ananke\" &amp;gt;&amp;gt; config.toml&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool run hugo new posts/my-first-post.md&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool run dev&lt;/span&gt;

    &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool start&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kool run dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Go ahead and run &lt;code&gt;kool run quickstart&lt;/code&gt; to start your Docker environment and initialize your Hugo site.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool run quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;As you can see in &lt;strong&gt;kool.yml&lt;/strong&gt;, the &lt;code&gt;quickstart&lt;/code&gt; script does the following in sequence: runs the &lt;code&gt;kool start&lt;/code&gt; command to spin up your Docker environment; calls &lt;code&gt;git init&lt;/code&gt; to create a Git repository; downloads the Ananke theme; uses an &lt;code&gt;echo&lt;/code&gt; command to add the theme to your Hugo config file; adds your first post; and then calls &lt;code&gt;kool run dev&lt;/code&gt; to build your Hugo site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;Once &lt;code&gt;kool run quickstart&lt;/code&gt; finishes, you should be able to access your new site at &lt;a href="http://localhost/"&gt;http://localhost&lt;/a&gt; and see the "My New Hugo Site" page. Hooray!&lt;/p&gt;



&lt;p&gt;Verify your Docker service containers are running using the &lt;a href="https://dev.to/docs/commands/kool-status"&gt;&lt;code&gt;kool status&lt;/code&gt; command&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool status
+---------+---------+------------------------------+--------------+
| SERVICE | RUNNING | PORTS                        | STATE        |
+---------+---------+------------------------------+--------------+
| app     | Running | 0.0.0.0:80-&amp;gt;80/tcp, 1313/tcp | Up 2 minutes |
| static  | Running | 80/tcp                       | Up 2 minutes |
+---------+---------+------------------------------+--------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Run &lt;code&gt;kool logs app&lt;/code&gt; to see the logs from your running &lt;code&gt;app&lt;/code&gt; container.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use &lt;code&gt;kool logs&lt;/code&gt; to see the logs from all running containers. Add the &lt;code&gt;-f&lt;/code&gt; option after &lt;code&gt;kool logs&lt;/code&gt; to follow the logs (i.e. &lt;code&gt;kool logs -f app&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool logs app
Attaching to my-project_app_1
app_1     |   Non-page files   |  0
app_1     |   Static files     |  0
app_1     |   Processed images |  0
app_1     |   Aliases          |  0
app_1     |   Sitemaps         |  1
app_1     |   Cleaned          |  0
app_1     |
app_1     | Built &lt;span class="k"&gt;in &lt;/span&gt;1 ms
app_1     | Watching &lt;span class="k"&gt;for &lt;/span&gt;changes &lt;span class="k"&gt;in&lt;/span&gt; /app/&lt;span class="o"&gt;{&lt;/span&gt;archetypes,content,data,layouts,static&lt;span class="o"&gt;}&lt;/span&gt;
app_1     | Watching &lt;span class="k"&gt;for &lt;/span&gt;config changes &lt;span class="k"&gt;in&lt;/span&gt; /app/config.toml
app_1     | Environment: &lt;span class="s2"&gt;"DEV"&lt;/span&gt;
app_1     | Serving pages from memory
app_1     | Running &lt;span class="k"&gt;in &lt;/span&gt;Fast Render Mode. For full rebuilds on change: hugo server &lt;span class="nt"&gt;--disableFastRender&lt;/span&gt;
app_1     | Web Server is available at http://localhost:80/ &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bind &lt;/span&gt;address 0.0.0.0&lt;span class="o"&gt;)&lt;/span&gt;
app_1     | Press Ctrl+C to stop
app_1     |
app_1     | Change of config file detected, rebuilding site.
app_1     | 2021-05-01 20:34:06.306 +0000
app_1     | Rebuilt &lt;span class="k"&gt;in &lt;/span&gt;136 ms
app_1     | adding created directory to watchlist /app/content/posts
app_1     |
app_1     | Change detected, rebuilding site.
app_1     | 2021-05-01 20:34:07.305 +0000
app_1     | Source changed &lt;span class="s2"&gt;"/app/content/posts/my-first-post.md"&lt;/span&gt;: CREATE
app_1     | Total &lt;span class="k"&gt;in &lt;/span&gt;26 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When it's time to stop working on the project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool stop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When you're ready to start coding again:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kool start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;If you like what we're doing, show your support for this new open source project by &lt;a href="https://github.com/kool-dev/kool"&gt;&lt;strong&gt;starring us on GitHub&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#level-up-your-development-workflow"&gt;
  &lt;/a&gt;
  Level Up Your Development Workflow
&lt;/h2&gt;

&lt;p&gt;Once you're up and running with your new Hugo project, you can use the &lt;code&gt;kool&lt;/code&gt; CLI to level up your development workflow. &lt;a href="https://kool.dev/docs/getting-started/how-it-works#better-development-workflow"&gt;Learn more in "How It Works"&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#support-the-kool-open-source-project"&gt;
  &lt;/a&gt;
  Support the Kool Open Source Project
&lt;/h2&gt;

&lt;p&gt;Kool is open source and totally free to use. If you're interested in learning more about the project, please check out &lt;a href="https://kool.dev"&gt;kool.dev&lt;/a&gt;. If you have questions, need support, or want to get involved, please &lt;a href="https://kool.dev/slack"&gt;join our Slack channel&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kool-dev"&gt;
        kool-dev
      &lt;/a&gt; / &lt;a href="https://github.com/kool-dev/kool"&gt;
        kool
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      From local development to the cloud: development workflow made easy.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://kool.dev" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/264349f4dfe091a4e3a224429ff033d9a68031905905816be9a847aac7167904/68747470733a2f2f6b6f6f6c2e6465762f696d672f6c6f676f2e706e67" width="400" alt="kool - cloud native dev tool"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href="https://goreportcard.com/report/github.com/kool-dev/kool" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2838d0fd3358d49e216af5ec0cab74eaaca5565ca82ee3b53637a34a3af64d15/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f6b6f6f6c2d6465762f6b6f6f6c" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/kool-dev/kool" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a2add92a4e91eebea7bea5f9f2c4af90d7d3da733934d4b6b7560b93b8463ba2/68747470733a2f2f636f6465636f762e696f2f67682f6b6f6f6c2d6465762f6b6f6f6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://github.com/kool-dev/kool/workflows/docker"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zv88EOKd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/kool-dev/kool/workflows/docker/badge.svg" alt="Docker Hub"&gt;&lt;/a&gt;
&lt;a href="https://github.com/kool-dev/kool/workflows/golangci-lint"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZY5yv7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/kool-dev/kool/workflows/golangci-lint/badge.svg" alt="Golang CI Lint"&gt;&lt;/a&gt;
&lt;a href="https://codeclimate.com/github/kool-dev/kool/maintainability" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/251105110de0dadd5bd3976a8b5ba78cc0a420c3180456982d420ea25630dc68/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f31353131663832366465393264326162333963632f6d61696e7461696e6162696c697479" alt="Maintainability"&gt;&lt;/a&gt;
&lt;a href="https://kool.dev/slack" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1be987074d33367933f31ae02d66b36abbbdf76dc54ee7522670ba4a7f794452/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230536c61636b2d6b6f6f6c2d2d6465762d6f72616e67653f6c6f676f3d736c61636b" alt="Join Slack Kool community"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
About &lt;code&gt;kool&lt;/code&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Kool&lt;/strong&gt; is a CLI tool that brings the complexities of modern software development environments down to earth - making these environments lightweight, fast and reproducible. It reduces the complexity and learning curve of &lt;em&gt;Docker&lt;/em&gt; and &lt;em&gt;Docker Compose&lt;/em&gt; for local environments, and offers a simplified interface for using &lt;em&gt;Kubernetes&lt;/em&gt; to deploy staging and production environments to the cloud.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kool&lt;/strong&gt; gets your local development environment up and running easily and quickly, so you have more time to build a great application. When the time is right, you can then use Kool Cloud to deploy and share your work with the world!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kool&lt;/strong&gt; is suitable for solo developers and teams of all sizes. It provides a hassle-free way to handle the Docker basics and immediately start using containers for development, while simultaneously guaranteeing no loss of control over more specialized Docker environments.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kool.dev" rel="nofollow"&gt;Learn more at kool.dev&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;Requirements: Kool is…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/kool-dev/kool"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>hugo</category>
      <category>docker</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Pure CSS checkboxes with one element</title>
      <author>Posandu Mapa</author>
      <pubDate>Tue, 27 Jul 2021 15:58:34 +0000</pubDate>
      <link>https://dev.to/posandu/pure-css-checkboxes-with-one-element-1pne</link>
      <guid>https://dev.to/posandu/pure-css-checkboxes-with-one-element-1pne</guid>
      <description>&lt;p&gt;Here is a Pure CSS checkbox with only one element. It’s also accessibility friendly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"Item 3"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-css"&gt;
  &lt;/a&gt;
  The CSS
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&amp;amp;display=swap")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;circle&lt;/span&gt; &lt;span class="n"&gt;farthest-corner&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;145&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0.1%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;99.8%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;360%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data-name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Inter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3f3f3f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-0.55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1.55&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e9e9e9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:hover:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:focus-visible:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cacaca&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;-6px&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox&lt;/span&gt;&lt;span class="nd"&gt;:focus-visible&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#480f5d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the result on &lt;a href="https://www.tronic247.com/pure-css-checkboxes-with-one-element/"&gt;My Website&lt;/a&gt;. (I do this because I can't embed iframes).&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>css</category>
      <category>checkboxes</category>
    </item>
    <item>
      <title>14 VS Code Shortcuts to Supercharge Your Productivity </title>
      <author>Domagoj Vidovic</author>
      <pubDate>Tue, 27 Jul 2021 15:28:48 +0000</pubDate>
      <link>https://dev.to/domagojvidovic/14-vs-code-shortcuts-to-supercharge-your-productivity-4khn</link>
      <guid>https://dev.to/domagojvidovic/14-vs-code-shortcuts-to-supercharge-your-productivity-4khn</guid>
      <description>&lt;p&gt;We, software engineers, tend to be extremely efficient beings.&lt;/p&gt;

&lt;p&gt;Our goal is to optimize everything, not just the code.&lt;/p&gt;

&lt;p&gt;That's why we don't want to spend 10 seconds looking for something on the GUI. We don't want to spend even 2 seconds.&lt;/p&gt;

&lt;p&gt;Why would we, when we can do it in 0,1s by using the powerful keyboard shortcuts?&lt;/p&gt;

&lt;p&gt;If I repeatedly do the same actions, I always Google for its shortcut. Usually, I find it.&lt;/p&gt;

&lt;p&gt;Let me share with you the shortcuts I use every day. I bet you don't know many of them!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-search-files-by%C2%A0name"&gt;
  &lt;/a&gt;
  1. Search files by name
&lt;/h3&gt;

&lt;p&gt;Ok, we'll start by listing the most common and simples shortcuts.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd + P&lt;/code&gt; (Mac) / &lt;code&gt;crtl + P&lt;/code&gt; (Windows) will open a search field with an incredibly powerful fuzzy search. I probably use this 100+ times a day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-search%C2%A0settings"&gt;
  &lt;/a&gt;
  2. Search settings
&lt;/h3&gt;

&lt;p&gt;This one is similar; after clicking &lt;code&gt;cmd + P&lt;/code&gt; (Mac) / &lt;code&gt;crtl + P&lt;/code&gt; (Windows), just type &lt;code&gt;&amp;gt;&lt;/code&gt;. You can now type in any search term, and only settings will be affected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-multiple%C2%A0cursors"&gt;
  &lt;/a&gt;
  3. Multiple cursors
&lt;/h3&gt;

&lt;p&gt;This feature is so cool, I wish I could use it everywhere else!&lt;/p&gt;

&lt;p&gt;Just press &lt;code&gt;alt&lt;/code&gt; and start clicking around the editor. Multiple cursors will appear!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-multiple-cursors%C2%A0v2"&gt;
  &lt;/a&gt;
  4. Multiple cursors v2
&lt;/h3&gt;

&lt;p&gt;You can do something similar without clicking around. &lt;code&gt;cmd option + arrow down&lt;/code&gt; (Mac) / &lt;code&gt;shift alt + arrow down&lt;/code&gt; (Windows) will insert an extra cursor below.&lt;/p&gt;

&lt;p&gt;Obviously, you can use &lt;code&gt;arrow up&lt;/code&gt; to insert a cursor above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-select-all-occurrences"&gt;
  &lt;/a&gt;
  5. Select all occurrences
&lt;/h3&gt;

&lt;p&gt;This one is quite uncommon, but it's extremely powerful! First, you need to select some text.&lt;/p&gt;

&lt;p&gt;Then,&lt;code&gt;cmd shift + L&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + L&lt;/code&gt; (Windows) select all occurrences of that text. It's so useful for situations like renaming a variable across the file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--621ivIVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1npwkhc4wih2nlfxzosb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--621ivIVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1npwkhc4wih2nlfxzosb.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine manually renaming a variable repeated 30 times in the file. Nightmare.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-delete-a%C2%A0line"&gt;
  &lt;/a&gt;
  6. Delete a line
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cmd shift + K&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + K&lt;/code&gt; (Windows) does the trick here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-duplicate-a%C2%A0line"&gt;
  &lt;/a&gt;
  7. Duplicate a line
&lt;/h3&gt;

&lt;p&gt;Put your cursor in the line you want to duplicate.&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;cmd + C&lt;/code&gt;, then &lt;code&gt;cmd + V&lt;/code&gt; (Mac) / &lt;code&gt;crtl + C&lt;/code&gt;, then &lt;code&gt;crtl + V&lt;/code&gt; (Windows). Voila!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-search-in-a%C2%A0file"&gt;
  &lt;/a&gt;
  8. Search in a file
&lt;/h3&gt;

&lt;p&gt;This one is quite familiar across all the common apps (like browsers): &lt;code&gt;cmd + F&lt;/code&gt; (Mac) / &lt;code&gt;crtl + F&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd + G&lt;/code&gt; (Mac) / &lt;code&gt;crtl + G&lt;/code&gt; (Windows) search for the next occurrence, while cmd &lt;code&gt;shift + G&lt;/code&gt; (Mac) / &lt;code&gt;crtl + shift + G&lt;/code&gt; (Windows) search for the previous one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-replace-in-a%C2%A0file"&gt;
  &lt;/a&gt;
  9. Replace in a file
&lt;/h3&gt;

&lt;p&gt;If you want to replace the term you searched for, fire &lt;code&gt;cmd option + G&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + G&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;p&gt;Then, click enter to replace the current occurrence.&lt;/p&gt;

&lt;p&gt;If you want to replace them all, click &lt;code&gt;cmd + enter&lt;/code&gt; (Mac) / &lt;code&gt;crtl + enter&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-search-in-all%C2%A0files"&gt;
  &lt;/a&gt;
  10. Search in all files
&lt;/h3&gt;

&lt;p&gt;Nothing can exist without a good old search in all files.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd shift + F&lt;/code&gt; (Mac) / &lt;code&gt;ctrl shift + F&lt;/code&gt; (Windows) does the trick.&lt;/p&gt;

&lt;p&gt;If you want to match text by case, press &lt;code&gt;cmd option + C&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + C&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;p&gt;You can also match the whole word by pressing &lt;code&gt;cmd option + W&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + W&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-replace-in-all%C2%A0files"&gt;
  &lt;/a&gt;
  11. Replace in all files
&lt;/h3&gt;

&lt;p&gt;Do you want to replace all occurrences in all files across the project, i.e. search/replace?&lt;/p&gt;

&lt;p&gt;Amazing, &lt;code&gt;cmd option + H&lt;/code&gt; (Mac) / &lt;code&gt;crtl shift + H&lt;/code&gt; (Windows) does the trick.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cmd option + enter&lt;/code&gt; (Mac) / &lt;code&gt;crtl alt + enter&lt;/code&gt; (Windows) triggers the replacement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-split%C2%A0editor"&gt;
  &lt;/a&gt;
  12. Split editor
&lt;/h3&gt;

&lt;p&gt;One tab is not enough, you need many of them! Great, just press &lt;code&gt;cmd + \&lt;/code&gt; (Mac) / &lt;code&gt;alt shift + 0&lt;/code&gt; (Windows). Repeat until you're satisfied.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-close%C2%A0tab"&gt;
  &lt;/a&gt;
  13. Close tab
&lt;/h3&gt;

&lt;p&gt;This one is the same as in Chrome - &lt;code&gt;cmd + W&lt;/code&gt; (Mac) / &lt;code&gt;crtl + W&lt;/code&gt; (Windows).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-switching-between-opened%C2%A0tabs"&gt;
  &lt;/a&gt;
  14. Switching between opened tabs
&lt;/h3&gt;

&lt;p&gt;Do you want to open the previous tab? &lt;code&gt;crtl + tab&lt;/code&gt; does the trick.&lt;/p&gt;

&lt;p&gt;Do you want to go to a tab on a known position? &lt;code&gt;crtl + [index]&lt;/code&gt; does that.&lt;/p&gt;

&lt;p&gt;Finally, you can pick the tab on left/right by pressing &lt;code&gt;cmd option + arrow left/right&lt;/code&gt; (Mac) / &lt;code&gt;crtl page down/up&lt;/code&gt; (Windows).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I wouldn't suggest learning all of them by heart immediately - try with one or two of them, and slowly adapt them to your work.&lt;/p&gt;

&lt;p&gt;Save this article in case you want to revisit it later.&lt;/p&gt;

&lt;p&gt;Using more keyboard shortcuts will increase your productivity.&lt;/p&gt;

&lt;p&gt;And oh, it does feel so good.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>javascript</category>
      <category>tooling</category>
    </item>
  </channel>
</rss>
