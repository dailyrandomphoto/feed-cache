<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Subscribe to Newsletter Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Mon, 17 May 2021 14:30:14 +0000</pubDate>
      <link>https://dev.to/nikhil27b/subscribe-to-newsletter-using-html-css-13p2</link>
      <guid>https://dev.to/nikhil27b/subscribe-to-newsletter-using-html-css-13p2</guid>
      <description>&lt;p&gt;Hello, today I created a Subscribe to the newsletter using CSS. Not great work but I hope you like this also comments about your thoughts. For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/RwpGrQe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What is if __name__ == "__main___", and how do I use it.</title>
      <author>Waylon Walker</author>
      <pubDate>Mon, 17 May 2021 14:22:08 +0000</pubDate>
      <link>https://dev.to/waylonwalker/what-is-if-name-main-and-how-do-i-use-it-1a44</link>
      <guid>https://dev.to/waylonwalker/what-is-if-name-main-and-how-do-i-use-it-1a44</guid>
      <description>&lt;p&gt;When a python module is called it is assigned the &lt;code&gt;__name__&lt;/code&gt; of &lt;code&gt;__main__&lt;/code&gt; otherwise if it's imported it will be assigned the &lt;code&gt;__name__&lt;/code&gt; of the module.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concrete-example"&gt;
  &lt;/a&gt;
  Concrete example
&lt;/h2&gt;

&lt;p&gt;Let's create a module to play with &lt;code&gt;__name__&lt;/code&gt; a bit.  We will call this module &lt;code&gt;nodes.py&lt;/code&gt;.  It is a module that we may want to run by itself or import and use in other modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!python
# nodes.py
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"nodes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__main__&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"you have imported me &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; from sys.modules['__main__'].__file__}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"you are running me as main"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have set this module up to execute one of two if statements based on whether the module itself is being run or if the module is being imported.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note it is not common to have a &lt;code&gt;if __name__ == "nodes":&lt;/code&gt; block, this is just for demnonstration purposes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#running-python-nodespy"&gt;
  &lt;/a&gt;
  running python nodes.py
&lt;/h2&gt;

&lt;p&gt;Running a python script with the command &lt;code&gt;python &amp;lt;filename.py&amp;gt;&lt;/code&gt; will execute your script top to bottom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python nodes.py 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This will print out &lt;code&gt;you are running me as main&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

   Sorry, your browser doesn't support embedded videos.  

&lt;p&gt;&lt;a href="https://waylonwalker.com/install-miniconda/"&gt;https://waylonwalker.com/install-miniconda/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don't already have python installed try using miniconda or replit.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#running-nodespy"&gt;
  &lt;/a&gt;
  running ./nodes.py
&lt;/h2&gt;

&lt;p&gt;You can also simply execute the script from bash if you first set the module to be executable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x nodes.py ./nodes.py 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



   Sorry, your browser doesn't support embedded videos.  

&lt;blockquote&gt;
&lt;p&gt;Note once you have set the file to be executable, it will remain executable &lt;code&gt;chmod +x nodes.py&lt;/code&gt; is only needed one time, even if you edit the file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#pipelinepy"&gt;
  &lt;/a&gt;
  pipeline.py
&lt;/h2&gt;

&lt;p&gt;Let's create a second module &lt;code&gt;pipeline.py&lt;/code&gt; and import the first module &lt;code&gt;nodes&lt;/code&gt; and see what happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!python
# pipeline.py
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nodes&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like nodes, we can run pipeline either way if it's executable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python pipeline.py
&lt;span class="c"&gt;# must run chmod +x pipeline.py first.&lt;/span&gt;
./pipeline.py 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Either way it will print out &lt;code&gt;you have imported me nodes from ./pipeline.py&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

   Sorry, your browser doesn't support embedded videos.  

&lt;h2&gt;
  &lt;a href="#repl"&gt;
  &lt;/a&gt;
  REPL
&lt;/h2&gt;

&lt;p&gt;If we were to &lt;code&gt;import nodes&lt;/code&gt; from the repl we would see an error in this case, due to the fact that there is no &lt;code&gt;__main__&lt;/code&gt; file since it's a repl session.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h2&gt;

&lt;p&gt;The main use case for &lt;code&gt;if __name__ == "__main__":&lt;/code&gt; is flexibility.  Simply importing a module should not execute any code, print anything to the screen, change your filesystem, or generally have any side effects in most cases. It is something that most python users would not expect.  We can use this block to make it such that the module can be both imported and executed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rich"&gt;
  &lt;/a&gt;
  rich
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/willmcgugan/rich"&gt;rich&lt;/a&gt; library uses it to make examples of each module print to the screen if its executed.  I personally think this is a fantastic idea.&lt;/p&gt;

   Sorry, your browser doesn't support embedded videos.  

&lt;h3&gt;
  &lt;a href="#etl"&gt;
  &lt;/a&gt;
  etl
&lt;/h3&gt;

&lt;p&gt;In my world of data analysis, we often set up a script of functions that will behave as an ETL pipeline of sorts.  Since we may want to reuse some of these functions in other scripts its common to hide the actual execution of these functions in an &lt;code&gt;if __name__ == "__main__":&lt;/code&gt; block so that we don't start making changes to the data simply by importing the module.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cli"&gt;
  &lt;/a&gt;
  cli
&lt;/h3&gt;

&lt;p&gt;Most cli applications will leverage &lt;code&gt;if __name__ == "__main__":&lt;/code&gt; to run something when called as a script instead of being imported. This allows us to do things such as testing much easier.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out the example on the first page of the &lt;a href="https://click.palletsprojects.com/en/7.x/"&gt;click&lt;/a&gt; framework's docs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;if __name__ == "__main__":&lt;/code&gt; is not so cryptic or scary, it's just looking to see if this module was called as a script or imported from somewhere else, and executing some different behavior based on how it was called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"you are running me as main"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#related-links"&gt;
  &lt;/a&gt;
  Related Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;example from &lt;a href="https://github.com/willmcgugan/rich/blob/master/rich/live.py#L271"&gt;rich.live&lt;/a&gt; &lt;a href="https://click.palletsprojects.com/en/7.x/"&gt;click&lt;/a&gt; framework's docs try it yourself in your browser with &lt;a href="https://replit.com"&gt;replit.com&lt;/a&gt; StackOverflow: &lt;a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"&gt;What does if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”: do?&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#check-out-these-related-posts"&gt;
  &lt;/a&gt;
  Check Out These Related Posts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/install-micromamba/"&gt;https://waylonwalker.com/install-micromamba/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/kedro172_replit/"&gt;https://waylonwalker.com/kedro172_replit/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/pytest-capsys/"&gt;https://waylonwalker.com/pytest-capsys/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title> 🐧Installing Ubuntu - A Step by Step guide 🐧</title>
      <author>Kaiwalya Koparkar</author>
      <pubDate>Mon, 17 May 2021 13:44:59 +0000</pubDate>
      <link>https://dev.to/kaiwalyakoparkar/installing-ubuntu-a-step-by-step-guide-2b29</link>
      <guid>https://dev.to/kaiwalyakoparkar/installing-ubuntu-a-step-by-step-guide-2b29</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-this-tutorial-about-"&gt;
  &lt;/a&gt;
  📌 What is this tutorial about :
&lt;/h2&gt;

&lt;p&gt;In this tutorial we will be seeing how can we install Ubuntu on any computer with few easy steps. I am going to tell you the steps if you want to make Ubuntu your primary OS and wipe off everything available on your computer.&lt;br&gt;
If you are looking for dual boot, or live OS (in a USB stick) then that will be coming in the future blogs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-go-"&gt;
  &lt;/a&gt;
  📌 Let's Go :
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#0-requirements-"&gt;
  &lt;/a&gt;
  0. Requirements :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ensure you have at least 25 GB of free storage space or 5 GB for a minimal installation.&lt;/li&gt;
&lt;li&gt;Connect your laptop to a power.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-backup-"&gt;
  &lt;/a&gt;
  🚩 1. Backup :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Taking backup is extremely essential.&lt;/li&gt;
&lt;li&gt;Take the backup of your images, videos, documents, etc.&lt;/li&gt;
&lt;li&gt;This is important because while installing ubuntu it will delete the entire thing that is available on the particular hard disk.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-installing-iso-file"&gt;
  &lt;/a&gt;
  🚩 2. Installing ISO file
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now you need to download the latest stable version (LTS) of ubuntu.&lt;/li&gt;
&lt;li&gt;You can download it &lt;a href="https://ubuntu.com/download/desktop"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;It usually takes time to download depending on your internet speed and space in the disk.&lt;/li&gt;
&lt;li&gt;Make sure you have a stable internet connection&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-making-a-bootable-device"&gt;
  &lt;/a&gt;
  🚩 3. Making a bootable device.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You will need a DVD or USB stick for it (In this tutorial we will be done using a USB stick)&lt;/li&gt;
&lt;li&gt;You will need to download &lt;a href="https://rufus.ie/en_US/"&gt;Rufus&lt;/a&gt;. It is open-source software for making the drives bootable with almost any OS.&lt;/li&gt;
&lt;li&gt;After downloading and installing it. Open the software. It would look something like this.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rJ81dwHK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/581nkmld0ud9fbe827vo.jpg" alt="Rufus Starting"&gt;
&lt;/li&gt;
&lt;li&gt;Then perform the following steps

&lt;ul&gt;
&lt;li&gt;Plugin your USB stick. The software will automatically detect the USB drive. If not then select it from the &lt;strong&gt;Device&lt;/strong&gt; section.&lt;/li&gt;
&lt;li&gt;Then click on "&lt;strong&gt;Select&lt;/strong&gt;" in the &lt;strong&gt;Boot Section&lt;/strong&gt; and select your downloaded ISO file.&lt;/li&gt;
&lt;li&gt;Don't touch any other thing and click on &lt;strong&gt;Start&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;This will start the process and you will see the progress bar there.&lt;/li&gt;
&lt;li&gt;When it will show Ready in Green color (Like in the image below) then click &lt;strong&gt;Close to complete the process&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXCkw2K_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0jmnx3w6vui11xy6vpx.png" alt="Rufus Completed"&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-booting-the-computer"&gt;
  &lt;/a&gt;
  🚩 4. Booting the Computer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You have to restart the computer and look for the initial message which tells how to enter the bios settings generally it appears by pressing &lt;code&gt;F10&lt;/code&gt; or &lt;code&gt;F12&lt;/code&gt; (This depends from computer to computer)&lt;/li&gt;
&lt;li&gt;Once you enter the bios settings. Your computer will automatically detect the plugged USB. If not the changing the booting sequence of the Hard disk with the USB.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#declaring-the-software-specs"&gt;
  &lt;/a&gt;
  🚩 Declaring the software specs
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Now after the Ubuntu Loader you will see a screen like this :
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V4mFU9sO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euxl211ub480t198t45p.png" alt="1st screen image"&gt;
&lt;/li&gt;
&lt;li&gt;Now you can select &lt;strong&gt;Normal Installation&lt;/strong&gt; or &lt;strong&gt;Minimal Installation&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;If you want to make this process less time consuming then select &lt;strong&gt;Minimal Installation&lt;/strong&gt; (You can download the software afterward)&lt;/li&gt;
&lt;li&gt;After that checkmark, both &lt;strong&gt;Download Updates while installing Ubuntu&lt;/strong&gt; &amp;amp; &lt;strong&gt;Install third-party software for graphics and Wi-Fi hardware and additional media formats&lt;/strong&gt; trust me they are very important&lt;/li&gt;
&lt;li&gt;And then click on &lt;strong&gt;Continue&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#erasing-the-old-stuff"&gt;
  &lt;/a&gt;
  🚩 Erasing the old stuff
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;After clicking &lt;strong&gt;Continue&lt;/strong&gt; from the last window. you will come to this 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QwXx94D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8huw6u36p9qhej62hgp.png" alt="Screen 2 Ubuntu"&gt;
&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Erase disk and install Ubuntu&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;And click &lt;strong&gt;Install Now&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;You will get a confirmation pop-up like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQW82pcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g0smidub0hmk2m54h5t.png" alt="Screen 3 Ubuntu"&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Continue&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#selecting-the-time-zone"&gt;
  &lt;/a&gt;
  🚩 Selecting the time zone
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;After some time you will be shown a window like this\
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVWgupfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wtlxvam40aapacuag8k.png" alt="Screen 4 Ubuntu"&gt;
&lt;/li&gt;
&lt;li&gt;Select your timezone and click on &lt;strong&gt;Continue&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#login-and-authentication"&gt;
  &lt;/a&gt;
  🚩 Login and Authentication
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Now you will come to the window like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W7Zr6XGn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zf4c4e922jr2cdohiub.png" alt="Screen 5 Ubuntu"&gt;
&lt;/li&gt;
&lt;li&gt;Add your Name, Computer's name, Nickname (username), Password.&lt;/li&gt;
&lt;li&gt;And click on &lt;strong&gt;Continue&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  🚩 Installation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;After this, you will find a screen like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zi8JEm7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dr5j59pyws4dun9d4iyy.png" alt="Screen 6 Ubuntu"&gt;
&lt;/li&gt;
&lt;li&gt;Now you are at the last stage of the installation. &lt;/li&gt;
&lt;li&gt;Grab a drink and hang around because there is nothing you can do here.&lt;/li&gt;
&lt;li&gt;It takes a bit longer depending on your computer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#done-"&gt;
  &lt;/a&gt;
  🚩 Done !!
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Now you will find the screen like this :
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwRUfSIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50k0sg6pqgdwmn50bq7r.jpg" alt="Screen 7 Ubuntu"&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Restart Now&lt;/strong&gt; and wait for some time to get your system restart. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📌 Now Enjoy your newly installed Operating system.!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  ❤️ Thank you for reading ❤️
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;🌏 Like | Follow | Share 🌏&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>#30DaysofAppwrite : Create User Profiles</title>
      <author>Torsten Dittmann</author>
      <pubDate>Mon, 17 May 2021 13:26:27 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-create-user-profiles-1c3m</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-create-user-profiles-1c3m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month long event focused at giving developers a walk through of all of Appwrite's features, starting from the basics to more advanced features like Cloud Functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how theseconcepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-user-profiles"&gt;
  &lt;/a&gt;
  Create User Profiles
&lt;/h2&gt;

&lt;p&gt;Welcome back to another session on the Appwrite Database 👋 . We hope you have gone through the &lt;a href="https://dev.to/appwrite/30daysofappwrite-database-design-140a"&gt;Day 16&lt;/a&gt; article. It is important as we build upon the knowledge gained in Day 16 and plan and work with the database for our demo application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-profile"&gt;
  &lt;/a&gt;
  Create A Profile
&lt;/h2&gt;

&lt;p&gt;We will use the &lt;strong&gt;Profile&lt;/strong&gt; Collection to give the users on our app a profile with public name so that we can display the author's information in each post. &lt;/p&gt;

&lt;p&gt;For this we need to add two methods to our &lt;code&gt;appwrite.js&lt;/code&gt; file: one to fetch a profile and another to create one. Let's limit the user to create only one profile for an account. For this, we need to first check if he already has a profile. Therefore we going to add a &lt;code&gt;fetchUser()&lt;/code&gt; function that is going to list all documents in the &lt;strong&gt;Profiles&lt;/strong&gt; Collection, with the &lt;em&gt;user&lt;/em&gt; field equal to the ID of our account and limiting the amount of documents to 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="na"&gt;fetchUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listDocuments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;profilesCollection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`user=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Not found&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most important here is the part with &lt;em&gt;[user=${id}]&lt;/em&gt; which will filter the requested documents by the &lt;strong&gt;user&lt;/strong&gt; field that equals the passed &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you might have noticed, we are using an unknown variable called &lt;code&gt;profilesCollection&lt;/code&gt; in the &lt;code&gt;listDocuments&lt;/code&gt; call. For this to work we need to create 2 variables that represent the unique ID of our collections. Simply prepend following before the &lt;code&gt;const api&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profilesCollection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[INSERT YOUR ID HERE]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postsCollection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[INSERT YOUR ID HERE]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you use the IDs found in your dashboard and replace the one found in &lt;strong&gt;Profile&lt;/strong&gt; with &lt;code&gt;profilesCollection&lt;/code&gt; and the one found in the &lt;strong&gt;Post&lt;/strong&gt; Collection with &lt;code&gt;postsCollection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we can check if a profile exists, the user needs to be able to create their profile if it doesn't exist. For this we are going to introduce the &lt;code&gt;createUser&lt;/code&gt; method to &lt;code&gt;appwrite.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="na"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;profilesCollection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`user:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a document in the &lt;strong&gt;Profile&lt;/strong&gt; collection when called. As you can see, the second argument is an object that adheres to the collection rules we created on Day 16. &lt;/p&gt;

&lt;p&gt;After this, the &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; permissions are passed. Since we want everyone to be able to view this profile, but only the user themselves to edit it - the read permissions will be &lt;code&gt;*&lt;/code&gt; and the write permissions will be the user itself.&lt;/p&gt;

&lt;p&gt;Now that we have all the Appwrite communication logic ready, we now need to add Routes and Components for it. For this, we create the &lt;code&gt;src/routes/Profile.svelte&lt;/code&gt; file which will display profiles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;// src/routes/Profile.svelte
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../lib/Loading.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    {#await fetchUser}
        &lt;span class="nt"&gt;&amp;lt;Loading&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    {:then author}
        &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;{author.name}&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
        {#if $state.user.$id == params.id}
            &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;My Posts&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                TBD
            &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
        {:else}
            &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Latest Posts&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"latest"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                TBD
            &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
        {/if}
    {:catch error}
        {error}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            Public profile not found
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#/profile/create"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Create Public Profile&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {/await}
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="nc"&gt;.author&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="nc"&gt;.latest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;align-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="nc"&gt;.my-post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;align-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we catch the error, we are prompting the user to create their profile and navigate them to &lt;code&gt;#/profile/create&lt;/code&gt;. Since this route is not created yet, create a new file called &lt;code&gt;src/routes/CreateProfile.svelte&lt;/code&gt;. As done before, we are going to introduce that component to the router in &lt;code&gt;src/App.svelte&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/App.svelte&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CreateProfile&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./routes/CreateProfile.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="c1"&gt;// First import the svelte component&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/profile/create&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CreateProfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Add this component&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to take care of the &lt;code&gt;CreateProfile.svelte&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;replace&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte-spa-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/profile/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;on:submit&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;preventDefault=&lt;/span&gt;&lt;span class="s"&gt;{submit}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {#if $state.user}
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Display Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{name}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Create&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    {/if}
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a simple form, where the user can input his Profile name and create it!&lt;/p&gt;

&lt;p&gt;We have now added user profiles to our application using the Database and Collections we created before. On Day 18 we will add posts to the main page and also let the users create them! So stay tuned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;We hope you liked this write up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns 🦄. Stay tuned for tomorrow's article! Until then 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>flutter</category>
      <category>30daysofappwrite</category>
    </item>
    <item>
      <title>What is the best IDE for JavaScript development in 2021?</title>
      <author>themeselection</author>
      <pubDate>Mon, 17 May 2021 13:21:36 +0000</pubDate>
      <link>https://dev.to/theme_selection/what-is-the-best-ide-for-javascript-development-in-2021-1pmn</link>
      <guid>https://dev.to/theme_selection/what-is-the-best-ide-for-javascript-development-in-2021-1pmn</guid>
      <description>&lt;p&gt;Ever wonder what is the best IDE for JavaScript development? Then here you are going to know about what is the best IDE for JavaScript Development 2021? Before we start the collection let's have a look at JavaScript and IDE.&lt;/p&gt;

&lt;p&gt;Well, as we all know JavaScript is the most popular programming language on the web. It works exceptionally well with CSS and HTML to develop powerful front-end applications. With the introduction of NodeJS, the high-level, interpreted programming languages expanded their reaches to backend development.&lt;/p&gt;

&lt;p&gt;Thus, It led to a surge in the development of a diverse range of &lt;a href="https://themeselection.com/which-is-the-best-javascript-framework/"&gt;best JavaScript frameworks&lt;/a&gt;, IDEs, and source code editors. An IDE is preferred over code editors due to the ability to debug code as well as providing support for ALM (Application Lifecycle Management) systems. Nonetheless, the difference between source code editors and IDEs has blurred in modern times.&lt;/p&gt;

&lt;p&gt;You can also check &lt;a href="https://themeselection.com/best-javascript-build-tools/"&gt;JavaScript build tools&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-javascript"&gt;
  &lt;/a&gt;
  Why use JavaScript?
&lt;/h3&gt;

&lt;p&gt;Here are the reasons for using JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It can enhance the interaction of a user with the webpage.&lt;/li&gt;
&lt;li&gt;  Easy to learn.&lt;/li&gt;
&lt;li&gt;  You can debug the application with ease.&lt;/li&gt;
&lt;li&gt;  JavaScript is a platform-independent language.&lt;/li&gt;
&lt;li&gt;  There is no need for compilation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-ide"&gt;
  &lt;/a&gt;
  What is IDE?
&lt;/h3&gt;

&lt;p&gt;An IDE, or Integrated Development Environment, enables programmers to consolidate the different aspects of writing a computer program. IDEs increase programmer productivity by combining common activities of writing software into a single application: editing source code, building executables, and debugging.&lt;/p&gt;

&lt;p&gt;Here are the features of the best IDE for JavaScript development:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It highlights the syntax.&lt;/li&gt;
&lt;li&gt;  You can quickly go to the definition of class or method.&lt;/li&gt;
&lt;li&gt;  Supports shortcuts for ease of access.&lt;/li&gt;
&lt;li&gt;  It provides easy to use user interface.&lt;/li&gt;
&lt;li&gt;  JavaScript IDE offers a real-time output of the program.&lt;/li&gt;
&lt;li&gt;  It provides many libraries for writing JavaScript code.&lt;/li&gt;
&lt;li&gt;  These applications can automatically complete the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, in this collection, we’re gonna take a look at the top 10 IDEs for JavaScript. Well, this is a highly subjective list. Thus, by no means we claim it to be a complete list. So, If you think we’ve missed something, let us know in the comments below!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t16L8Brz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ooymghrswho126195m5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t16L8Brz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ooymghrswho126195m5.png" alt="Visual studio code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vs code (aka VS Code) is a product of Microsoft. It’s important to not mix this up with Visual Studio that is mainly aimed at .NET development.&lt;/p&gt;

&lt;p&gt;This is one of the best IDEs for javascript development. It is very powerful and rich in features and most of all, it is free to use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Support for multiple languages (JavaScript, TypeScript, etc.). Custom extensions can be installed on this to support ecosystems of C#, C++, Python, etc.&lt;/li&gt;
&lt;li&gt;  Syntax highlighting&lt;/li&gt;
&lt;li&gt;  Auto-complete with IntelliSense&lt;/li&gt;
&lt;li&gt;  Capabilities to debug code by attaching running apps and including breakpoints&lt;/li&gt;
&lt;li&gt;  Shortcuts to make coding efficient&lt;/li&gt;
&lt;li&gt;  A marketplace with extensions to support many extra functionalities (E.g.- Docker extensions)&lt;/li&gt;
&lt;li&gt;  Integration capabilities with Visual Studio Code Online&lt;/li&gt;
&lt;li&gt;  Version controlling via extensions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Powerful multilanguage IDE&lt;/li&gt;
&lt;li&gt; Nice built-in features like auto-highlighting repeating variables&lt;/li&gt;
&lt;li&gt; It's lightweight&lt;/li&gt;
&lt;li&gt; Helpful for quick script modification&lt;/li&gt;
&lt;li&gt;Better UI, easy plugins, and nice git integration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  More advanced debugging features would be helpful&lt;/li&gt;
&lt;li&gt;  Including a built-in screen for package management&lt;/li&gt;
&lt;li&gt;  Its user interface is really intimidating to new and beginner users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We at &lt;a href="//themeselection.com"&gt;Themeselection&lt;/a&gt;, Uses visual studio code to make our products. You can check &lt;a href="//themeselection.com"&gt;Free bootstrap admin template&lt;/a&gt;, UI kits, and HTML themes which are made using visual studio code. &lt;/p&gt;

&lt;p&gt;You can check &lt;a href="https://pixinvent.com/demo/vuexy-html-bootstrap-admin-template/landing/"&gt;Vuexy Vuejs Admin Template&lt;/a&gt; for example. Vuexy Vuejs admin template is made using visual studio code. It is one of the most developer-friendly admin templates. It is multipurpose, highly customizable, and responsive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wKaNybTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnukshwi8a0xij920b0a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wKaNybTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnukshwi8a0xij920b0a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use Vuexy - Vuejs, React, Angular, HTML &amp;amp; Laravel Admin Template for any kind of web applications such as eCommerce, educational, fitness, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#atom"&gt;
  &lt;/a&gt;
  &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9pbWJyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1djxspy4a1rimwcpobs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9pbWJyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1djxspy4a1rimwcpobs.png" alt="Atom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atom is an open-source IDE that gained a lot of traction before the introduction of Visual Studio Code. It is backed by GitHub which was another reason for it to become very popular. Atom is an Electron application.&lt;/p&gt;

&lt;p&gt;Atom is similar to VS Code in many ways. It supports Windows, Mac, and Linux. It is free to use and is under the MIT license. It also has auto code completion, supports multiple projects and multiple section editing, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It has an integrated package manager.&lt;/li&gt;
&lt;li&gt;  You can find, preview, and replace text typed in a file or across the entire project.&lt;/li&gt;
&lt;li&gt;  IDE supports the command palette to run available commands.&lt;/li&gt;
&lt;li&gt;  You can easily browse and open a file or project.&lt;/li&gt;
&lt;li&gt;  Quickly find and replace text as you type in the file.&lt;/li&gt;
&lt;li&gt;  This application can be used on Windows, OS X, and Linux.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Git Integration&lt;/li&gt;
&lt;li&gt;  Cross-Platform Support&lt;/li&gt;
&lt;li&gt;  Multi cursor support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Sometimes unstable&lt;/li&gt;
&lt;li&gt;  Lack of Code Execution&lt;/li&gt;
&lt;li&gt;  Slower than other top editors&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#webstrom"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.jetbrains.com/webstorm/"&gt;Webstrom&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T10Rzukv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eivpzigwnlmryg6gojf0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T10Rzukv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eivpzigwnlmryg6gojf0.png" alt="webstrom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have been in the software industry for a while, there is no doubt you’ve heard of the IDE development company JetBrains. &lt;a href="https://www.jetbrains.com/webstorm/"&gt;WebStorm&lt;/a&gt; is also a product of JetBrains which is focused on JavaScript development.&lt;/p&gt;

&lt;p&gt;It supports many technologies and languages such as JavaScript, HTML, CSS, Angular JS, TypeScript, Node.js, Meteor, ECMAScript, React, Vue.js, Cordova, etc. WebStorm is compatible with Windows, Mac, and Linux.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  You can test your code with ease using tools like Mocha, Karma test runner, Jest, and more.&lt;/li&gt;
&lt;li&gt;  Trace (the process of verifying code manually) your JavaScript code with ease.&lt;/li&gt;
&lt;li&gt;  This IDE offers a wide range of plugins and templates.&lt;/li&gt;
&lt;li&gt;  It quickly rolls back to previous versions.&lt;/li&gt;
&lt;li&gt;  Coding style, fonts, themes, and shortcuts can be customized.&lt;/li&gt;
&lt;li&gt;  It offers a built-in terminal.&lt;/li&gt;
&lt;li&gt;  Integration with VCS (Veritas Cluster Server)&lt;/li&gt;
&lt;li&gt;  Parameter hints&lt;/li&gt;
&lt;li&gt;  Git integration&lt;/li&gt;
&lt;li&gt;  Intelligent Code Completion&lt;/li&gt;
&lt;li&gt;  Multi-line todos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Like the product of the JetBean, the UI is very familiar as the famous IntelliJ&lt;/li&gt;
&lt;li&gt; The JS static code scanning out of the box is very handy&lt;/li&gt;
&lt;li&gt; Auto fix is also a very productive feature to mention&lt;/li&gt;
&lt;li&gt; It by default has well integration with Angular, TypeScript, Vue, React&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#intellij-idea"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ IDEA&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VxG58Ux5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fo3wthw4zskr2pa5rhev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VxG58Ux5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fo3wthw4zskr2pa5rhev.png" alt="IntelliJ IDEA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IntelliJ IDEA is another IDE by JetBrains. This has two editions; Community and Ultimate. The Community edition is free to use whereas the Ultimate editions require purchasing a license.&lt;/p&gt;

&lt;p&gt;With a primary focus on maximizing developer productivity, IntelliJ IDEA is one of the most beloved IDEs. In addition to providing support for a number of programming languages other than Java and JS, the ergonomic design supported by the IDE offers ease of use.&lt;/p&gt;

&lt;p&gt;One of the most amazing features of IntelliJ IDEA is its ability to automatically add tools that are relevant to the context. The integrated development environment offers a number of smart code assistance features for JavaScript development.&lt;/p&gt;

&lt;p&gt;IntelliJ IDEA is capable to automate repetitive programming tasks to cut development time. The IDE offers advanced code completion, a built-in static code analyzer, and integrated version control.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Advanced code completion&lt;/li&gt;
&lt;li&gt;  Built-in static code analyzers&lt;/li&gt;
&lt;li&gt;  Deployment and debugging tools for most application servers&lt;/li&gt;
&lt;li&gt;  Test runner UI&lt;/li&gt;
&lt;li&gt;  Code coverage&lt;/li&gt;
&lt;li&gt;  Git integration&lt;/li&gt;
&lt;li&gt;  Supports multiple build systems&lt;/li&gt;
&lt;li&gt;  Extensive database editor and UML designer&lt;/li&gt;
&lt;li&gt;  Supports Google App Engine, Grails, GWT&lt;/li&gt;
&lt;li&gt;  Intelligent text editors for HTML, CSS, and Java&lt;/li&gt;
&lt;li&gt;  Integrated version control&lt;/li&gt;
&lt;li&gt;  Automates repetitive programming tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Auto-completion &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It has built-in support for version control, so whenever you feel like you need to backtrack to a previous state or version of a website you saved, you can easily do it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugin support is really great. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The console that comes with the IDE is somewhat laggy. &lt;/li&gt;
&lt;li&gt;  There are some minor bugs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sublime-text"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5jiCQrbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skk54tq76cdx1zofn5iw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5jiCQrbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skk54tq76cdx1zofn5iw.png" alt="Sublime Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The latest version of &lt;strong&gt;Sublime Text&lt;/strong&gt; is SBT3, which transforms the tool from being a source code editor into a pseudo-IDE. Sublime Text is cross-platform and offers a high degree of customization.&lt;/p&gt;

&lt;p&gt;Sublime Text flaunts a clutter-free interface and significant speed boost. Enhanced pane-management, Go to definition, and Go to Symbol are some of the out-of-the-box features. For enabling syntax highlight for ES6 and ReactJS code, the Babel plugin is available.&lt;/p&gt;

&lt;p&gt;Some important plugins that anyone using Sublime Text for JS development must use are DocBlockr, JSFormat, SideBar Enhancements, and SublimeLinter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It offers a command palette for changing the syntax.&lt;/li&gt;
&lt;li&gt; You can quickly go to the definition of class or method.&lt;/li&gt;
&lt;li&gt;  Sublime Text provides API to extend the features.&lt;/li&gt;
&lt;li&gt;  This tool supports shortcuts for ease of access.&lt;/li&gt;
&lt;li&gt;  Sublime Text provides a command palette to hold frequently utilized functionality.&lt;/li&gt;
&lt;li&gt; It highlights the syntax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Sublime Text is powerful where you need it to be, but simple and out of your way at the same time.
&lt;/li&gt;
&lt;li&gt;  Great keyboard shortcuts and multi-selection options
&lt;/li&gt;
&lt;li&gt;  Great package manager installation process for easily extending functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#brackets"&gt;
  &lt;/a&gt;
  &lt;a href="http://brackets.io/"&gt;Brackets&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z3D_FKkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wka5iodbr3ah9u87l3xc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z3D_FKkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wka5iodbr3ah9u87l3xc.png" alt="Brackets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brackets&lt;/strong&gt; is created by Adobe. This lightweight and fast JS editor offer built-in support for JavaScript. Brackets are available for Mac, Windows, and Linux. Function finding and quick project switching are some notable features it offers. With the help of these features, the users can search for different project files while typing in real-time. The Extract feature converts details from PSD into CSS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: On September 1, 2021, Adobe will end support for Brackets. If you would like to continue using, maintaining, and improving Brackets, you may fork the project on &lt;a href="https://github.com/adobe/brackets"&gt;GitHub&lt;/a&gt;. Through Adobe’s partnership with Microsoft, we encourage users to migrate to &lt;a href="https://aka.ms/brackets-to-vscode"&gt;Visual Studio Code&lt;/a&gt;, Microsoft’s free code editor built on open source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Inline editors.&lt;/li&gt;
&lt;li&gt;  Live Preview — allows you to get a real-time connection to your browser; whenever you make a change, you immediately see the changes on the screen.&lt;/li&gt;
&lt;li&gt;  Preprocessor Support — This allows you to use Quick Edit and Live Highlight LESS and SCSS files.&lt;/li&gt;
&lt;li&gt;  A set of visual tools.&lt;/li&gt;
&lt;li&gt;  Preprocessor support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Simple User-Interface&lt;/li&gt;
&lt;li&gt;  Code Minification&lt;/li&gt;
&lt;li&gt;  Live Browser Preview&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  High Launch Time&lt;/li&gt;
&lt;li&gt;  Difficult Project Management&lt;/li&gt;
&lt;li&gt;  Low Performance while working with large files&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#activestate-komodo-ide"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.activestate.com/products/komodo-ide/"&gt;ActiveState Komodo IDE&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w6TOOUqV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/po38lemtfo7z78vjdcf0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w6TOOUqV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/po38lemtfo7z78vjdcf0.png" alt="ActiveState Komodo IDE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Komodo IDE&lt;/strong&gt; provides advanced JavaScript editing, syntax highlighting, navigation, and debugging, but it doesn’t include JavaScript code checking. For that, you can always run JSHint in a shell.&lt;/p&gt;

&lt;p&gt;Besides, Komodo supports dozens of programming and markup languages. With its wide range of programming and markup language support, including refactoring, debugging, and profiling, Komodo IDE is a very good choice for end-to-end development in open source languages.&lt;/p&gt;

&lt;p&gt;Komodo has a code refactoring module for all of the languages for which it provides code intelligence: PHP, Perl, Python, Ruby, Tcl, JavaScript, and Node.js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-netbeans"&gt;
  &lt;/a&gt;
  &lt;a href="https://netbeans.apache.org/"&gt;Apache NetBeans&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5edZc1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egvxbp9yym2mvk9e983h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5edZc1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egvxbp9yym2mvk9e983h.jpg" alt="Apache NetBeans"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NetBeans&lt;/strong&gt; has very good support for JavaScript, HTML5, and CSS3 in web projects, and it supports the Cordova/PhoneGap framework for building JavaScript-based mobile applications. NetBeans is available free under an open-source license.&lt;/p&gt;

&lt;p&gt;The NetBeans JavaScript editor provides syntax highlighting, autocompletion, and code folding, pretty much as you’d expect. The JavaScript editing features also work for JavaScript code embedded in PHP, JSP, and HTML files. jQuery support is baked into the editor. NetBeans 8.2 has new or improved support for Node.js and Express, Gulp, Grunt, AngularJS, Knockout.js, Jade, Mocha, and Selenium.&lt;/p&gt;

&lt;p&gt;Code analysis runs in the background as you edit, providing warnings and hints. Debugging works in the embedded WebKit browser and in Chrome with the NetBeans Connector installed. The debugger can set DOM, line, event, and XMLHttpRequest breakpoints, and it will display variables, watches, and the call stack. An integrated browser log window displays browser exceptions, errors, and warnings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  NetBeans integrates issue tracking with Jira and Bugzilla.&lt;/li&gt;
&lt;li&gt;  In the NetBeans task window, you can search for tasks, save searches, update tasks, and resolve tasks in your registered task repository.&lt;/li&gt;
&lt;li&gt;  NetBeans also has team server integration for sites that use the Kenai infrastructure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Powerful for Automation&lt;/li&gt;
&lt;li&gt; Good Service Management&lt;/li&gt;
&lt;li&gt; Impressive Refactoring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Poor Integration Support&lt;/li&gt;
&lt;li&gt;  Consumes more system resource&lt;/li&gt;
&lt;li&gt;  Irritating Pop-ups&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#eclipse"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.eclipse.org/"&gt;Eclipse&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev4b6HQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btv7ho60almn2zfe147r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev4b6HQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btv7ho60almn2zfe147r.png" alt="Eclipse"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Eclipse&lt;/strong&gt; is one of the best IDE for javascript development. Basically, full-stack developers use Eclipse for JavaScript coding. Although, for JS, you need to install some specific plugins. &lt;/p&gt;

&lt;p&gt;The accurate performance of JavaScript Development Tools is the highlight of Eclipse. A brand-new Docker UI helps to build Docker images as well as containers with the Docker CLI. Another striking feature is automated error reporting. With this feature, the IDE can send the bugs found in the IDE to &lt;a href="//eclipse.org"&gt;eclipse.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Powerful Project Management&lt;/li&gt;
&lt;li&gt;  Almost all packages support Git integration.&lt;/li&gt;
&lt;li&gt;  Advanced Debugging&lt;/li&gt;
&lt;li&gt;  Good Auto-Complete&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Most changes require a reboot to take effect&lt;/li&gt;
&lt;li&gt;  Complex for beginners&lt;/li&gt;
&lt;li&gt;  Poor Customer Support&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#textmate-for-mac-os"&gt;
  &lt;/a&gt;
  &lt;a href="https://macromates.com/"&gt;TextMate (for Mac OS)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5JkAqbi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6tvcvx3smzg27kd8ye7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5JkAqbi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6tvcvx3smzg27kd8ye7.png" alt="TextMate (for Mac OS)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Powerful and customizable text editor with support for a huge list of programming languages and developed as open source. TextMate is a versatile plain text editor with a unique and innovative feature set. A rapidly growing community have created bundles for more than a hundred different "modes," including support for all major programming languages, writing prose in structured formats such as LaTeX, Markdown, Textile, etc., blogging, running SQL queries, writing screenplays, doing your budget, and much much more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple Carets&lt;/li&gt;
&lt;li&gt; Scoped Settings&lt;/li&gt;
&lt;li&gt; Version Control&lt;/li&gt;
&lt;li&gt; Bundles&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;So, here was the collection of the best IDE for javascript development in 2021. In this collection, we have gathered some of the best JavaScript IDE that can help you boost up your workflow with ease.&lt;/p&gt;

&lt;p&gt;Well, there is no single JS source code editor or IDE that is a one-stop solution for everything. Thus, calling any single IDE best will be unfair as each one of them has its own strengths and weaknesses. Hence, before opting for one, you need to precisely underline all your requirements. &lt;/p&gt;

&lt;p&gt;We hope the listing above will help you make a favorable decision. Also, do tell us your favorite IDEs in the comment section below.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learn How TO Utilize  Closures In JavaScript</title>
      <author>punya2004</author>
      <pubDate>Mon, 17 May 2021 13:19:59 +0000</pubDate>
      <link>https://dev.to/punya2004/learn-how-to-utilize-closures-in-javascript-oo4</link>
      <guid>https://dev.to/punya2004/learn-how-to-utilize-closures-in-javascript-oo4</guid>
      <description>&lt;p&gt;Closures are a very powerful mechanism in the JavaScript&lt;br&gt;
programming language. In this, we will learn about closures and the benefits of using them in your JavaScript code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-closure"&gt;
  &lt;/a&gt;
  What is Closure?
&lt;/h2&gt;

&lt;p&gt;A closure is a function along with its lexical environment bundled together. That means the function has access to its outer&lt;br&gt;
function scope even after the outer function has returned.&lt;/p&gt;

&lt;p&gt;A closure can remember and access variables and arguments of its&lt;br&gt;
outer function even after the function has finished.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-see-what-is-a-lexical-scope"&gt;
  &lt;/a&gt;
  Let's see what is a Lexical Scope?
&lt;/h2&gt;

&lt;p&gt;A lexical scope or static scope in JavaScript refers to the accessibility of the variables, functions, and objects based on their physical location in the source code.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#for-example"&gt;
  &lt;/a&gt;
  For example:
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   function display() {
        var name = 'punya'; 
        function displayName() { 
            console.log(name); 
        }
        displayName();
    }
    display();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7306cZen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fr7swposa3nq776st64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7306cZen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fr7swposa3nq776st64.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;display()&lt;/code&gt; creates a local variable called name and a function called &lt;code&gt;displayName()&lt;/code&gt;. The &lt;code&gt;displayName()&lt;/code&gt; function is an inner function that is defined inside &lt;code&gt;display()&lt;/code&gt; and is available only within the body of the &lt;code&gt;display()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;displayName()&lt;/code&gt; function has no local variables of its own. However, since inner functions have access to the variables of outer functions, &lt;code&gt;displayName()&lt;/code&gt; can access the variable name declared in the parent function, &lt;code&gt;display()&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-look-at-some-practical-examples-of-closures-"&gt;
  &lt;/a&gt;
  Let’s look at some practical examples of closures :
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#example-1"&gt;
  &lt;/a&gt;
  Example 1:
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Counter() {
            var counter = 0;

            function IncreaseCounter() {
                return counter += 1;
            };

            return IncreaseCounter;
        }

        var counter = Counter();
        console.log("Value of Counter is:",counter()); 
        console.log("Value of Counter is:",counter());
        console.log("Value of Counter is:",counter()); 
        console.log("Value of Counter is:",counter());

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ah_Zld_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz5aykpve8697wf8fbe0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ah_Zld_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz5aykpve8697wf8fbe0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, outer function Counter returns the reference of inner function &lt;code&gt;IncreaseCounter()&lt;/code&gt;. &lt;code&gt;IncreaseCounter&lt;/code&gt; increases the outer variable counter to one. So calling inner function multiple time will increase the counter to one each time. So the behaviour of closure is that the inner function is returned from the outer function before being&lt;br&gt;
executed. &lt;/p&gt;

&lt;p&gt;####Example 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   function Counter() {

        var counter = 0;

        setTimeout(function () {
            var innerCounter = 0;
            counter += 1;
            console.log("counter value is = " + counter);

            setTimeout(function () {
                counter += 1;
                innerCounter += 1;
                console.log("counter value is = " + counter + ", innerCounter value is = " + innerCounter)
            }, 500);

        }, 1000);
    };

    Counter();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KSbssUz6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5udxux0ac6vchlxf9j6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KSbssUz6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5udxux0ac6vchlxf9j6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As per the closure definition, when counter() called it will first execute the 1st &lt;code&gt;setTimeout()&lt;/code&gt; after 500ms and 2nd&lt;br&gt;
&lt;code&gt;setTimeout()&lt;/code&gt; is called after 1000ms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-using-closures"&gt;
  &lt;/a&gt;
  Advantages of using closures:
&lt;/h2&gt;

&lt;p&gt;It can useful for Data Encapsulation which means it is useful in&lt;br&gt;
hiding implementation detail in JavaScript.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var counter = (function () {
        var privateCounter = 0;
        function changeBy(val) {
            privateCounter += val;
        }
        return {
            increment: function () {
                changeBy(1);
            },
            decrement: function () {
                changeBy(-1);
            },
            value: function () {
                return privateCounter;
            }
        };
    })();

    console.log("Counter value is: ",counter.value()); 
    counter.increment();
    counter.increment();
    console.log("Counter value is: ",counter.value()); 
    counter.decrement();
    console.log("Counter value is: ",counter.value()); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--caF6NRfO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kf8w2on7ghy2qcd6pgx9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--caF6NRfO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kf8w2on7ghy2qcd6pgx9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-closures"&gt;
  &lt;/a&gt;
  Disadvantages of closures:
&lt;/h2&gt;

&lt;p&gt;1: Till the time its active, the memory can’t be garbage collected.&lt;/p&gt;

&lt;p&gt;2: It slows down the performance, because function within other &lt;br&gt;
function creates duplicate in memory.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codereview</category>
    </item>
    <item>
      <title>Login form animation that you have never seen before</title>
      <author>Techy Programmers</author>
      <pubDate>Mon, 17 May 2021 13:17:46 +0000</pubDate>
      <link>https://dev.to/kunaal438/awesome-login-form-sliding-effect-you-have-never-seen-it-before-4njo</link>
      <guid>https://dev.to/kunaal438/awesome-login-form-sliding-effect-you-have-never-seen-it-before-4njo</guid>
      <description>&lt;p&gt;Hello, glad you are here. I am kunaal and today we will make an awesome login and register form with great transition. You can see demo below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kunaal_kumar/embed/MWpjwor?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is responsive login form. To see desktop effect click on 0.5 scale for mobile view click on 1 scale.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial-"&gt;
  &lt;/a&gt;
  Video Tutorial -
&lt;/h1&gt;

&lt;p&gt;If you find this article hard or for better explanation. You can watch video tutorial. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/R_MutcGu_xE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like the video tutorial. Please consider subscribing my youtube channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;p&gt;Create 3 files &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;style.css&lt;/code&gt;, and &lt;code&gt;app.js&lt;/code&gt;.&lt;br&gt;
After that in &lt;code&gt;index.html&lt;/code&gt; inside body tag type this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sign-up-img"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sign-in-img"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These &lt;code&gt;.sign-in-img&lt;/code&gt; and &lt;code&gt;.sign-up-img&lt;/code&gt; will be our images for forms.&lt;br&gt;
Now add some style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'roboto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.form-parent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;850px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#171717&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.sign-up-img&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.sign-in-img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(img/sign-up.jpeg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.sign-in-img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(img/sign-in.jpeg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is easy to understand CSS. If you have any doubt ask me in comment.&lt;br&gt;
Now in &lt;code&gt;index.html&lt;/code&gt; inside &lt;code&gt;.form-parent&lt;/code&gt; element type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"sign-in-form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;sign in&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fields"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"submit-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;sign in&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"switchForm('register')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;new here ? sign up here&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"sign-up-form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;sign up&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fields"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"submit-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;sign up&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"switchForm('login')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;already have an account ? sign in here&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our form structure. You can see that we are calling a &lt;code&gt;switchForm&lt;/code&gt; function on click that we will create later.&lt;/p&gt;

&lt;p&gt;Now style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.form-container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#171717&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;850px&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.title&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.fields&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.submit-container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0d0d0d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;::placeholder&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3f3f3f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0d0d0d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3f3f3f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3f3f3f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#sign-up-form&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#sign-up-form&lt;/span&gt; &lt;span class="nc"&gt;.title&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nc"&gt;.form-parent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.form-container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.sign-up-img&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nc"&gt;.sign-in-img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our style are done and we also added media query here for the responsiveness.&lt;/p&gt;

&lt;p&gt;Now it's time for JS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.form-container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#sign-in-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;registerFrom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#sign-up-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;switchForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;formContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`50%`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;loginForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marginLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`-150%`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;registerFrom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marginLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`-100%`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;formContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`0%`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;loginForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marginLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`0%`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;registerFrom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marginLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`50%`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there we go our, form is ready.&lt;/p&gt;

&lt;p&gt;I hope you understood everything. If you have any doubt or you find any mistake that I made or you have any suggestion feel free to ask me in comment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are interested in programming and want to know how I a 15yr old teen do coding make these design. You can follow me on my Instagram. I am also planning to post my game development stuff on Instagram.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/kunaal438/login-register-form-ux"&gt;Souce Code&lt;/a&gt;, &lt;a href="https://www.youtube.com/c/TechyProgrammers/"&gt;My youtube Channel&lt;/a&gt;, &lt;a href="https://www.instagram.com/techy_programmers/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>uiweekly</category>
      <category>css</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>Automate Backup database SQL Server in docker container.</title>
      <author>Pobx</author>
      <pubDate>Mon, 17 May 2021 13:17:41 +0000</pubDate>
      <link>https://dev.to/pobx/automate-backup-database-sql-server-in-docker-container-oea</link>
      <guid>https://dev.to/pobx/automate-backup-database-sql-server-in-docker-container-oea</guid>
      <description>&lt;p&gt;Hi, everyone. This is first my post in dev.to and my first time for write article in second language. today I want to share some trick for backup your database from docker container. let's begin... :)&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt; I assume your already running container. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-write-tsql-for-backup-your-database"&gt;
  &lt;/a&gt;
  1. Write T-SQL for backup your database.
&lt;/h3&gt;

&lt;p&gt;For example I use TutorialDB database for demonstrate purpose. Your can create same database click &lt;a href="https://docs.microsoft.com/en-us/sql/azure-data-studio/quickstart-sql-server?view=sql-server-ver15#create-a-database"&gt;Create a database&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PRINT "Start Backup process...";
DECLARE @MyFileName varchar(200)
SELECT @MyFileName=N'/tmp/Backup_' + convert(nvarchar(20),GetDate(),112)+'_'+convert(nvarchar(20),GetDate(),108)+ '.bak'
BACKUP DATABASE [TutorialDB] TO DISK=@MyFileName
PRINT "Finished backup process...";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then save above T-SQL to backup-database.sql&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-copy-backupdatabasesql-file-to-your-container"&gt;
  &lt;/a&gt;
  2. Copy backup-database.sql file to your container.
&lt;/h3&gt;

&lt;p&gt;For example I just copy it to tmp directory. You can copy it to any your directory.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qdvzy8y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwiuc0jggck83goacj1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qdvzy8y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwiuc0jggck83goacj1u.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Then go inside container and see in tmp directory as below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NG-mzfLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw5e3z8anxenfrs62tzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NG-mzfLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw5e3z8anxenfrs62tzw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-update-packages-list-to-new-version"&gt;
  &lt;/a&gt;
  3. Update packages list to new version.
&lt;/h3&gt;

&lt;p&gt;Go inside your container by docker exec cli as below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3E1UCZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27l83eru4ept5gmu5cfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3E1UCZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27l83eru4ept5gmu5cfl.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt; You need to use --user root (option) for update package list.&lt;br&gt;
Now, update package list by apt-get update -y as below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wgcjEiBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5zisiqcobmgvzat2y41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wgcjEiBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5zisiqcobmgvzat2y41.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Then you will installing 2 package such as vim and cron as below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OdNrJESv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u67zj8nurlnvl0hnrjku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OdNrJESv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u67zj8nurlnvl0hnrjku.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EMIR8Rse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2mmleibq9yok9i8a8gl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EMIR8Rse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2mmleibq9yok9i8a8gl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-add-sqlcmd-cli-to-crontab-by-cron-e-cli-as-below"&gt;
  &lt;/a&gt;
  4. Add sqlcmd cli to crontab by cron -e cli as below
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g7iGvuvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/leod92unp5vtvhi0k8zz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g7iGvuvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/leod92unp5vtvhi0k8zz.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
For example above configuration is running backup-database.sql every 1 minute. Keep in mind it's just example for show how it work. Next you want to restart crontab for start your schedule job like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lMyry2LT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtuk50cojg5apimviz7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lMyry2LT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtuk50cojg5apimviz7c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-see-log-by-tail-f-tmpdailybackuplog-amp-bak-files"&gt;
  &lt;/a&gt;
  5. see log by tail -f /tmp/daily-backup.log &amp;amp; .bak files.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_oKNobc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sgtut8xpcfvvh3101gu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_oKNobc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sgtut8xpcfvvh3101gu.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WS8MB7eH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbagw2p288kyzsbsf50e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WS8MB7eH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbagw2p288kyzsbsf50e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Until we meet again. Thank you&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>sql</category>
      <category>linux</category>
      <category>docker</category>
    </item>
    <item>
      <title>Animatly.io the platform for animated Icons and Illustrations</title>
      <author>Animatly.io</author>
      <pubDate>Mon, 17 May 2021 13:00:04 +0000</pubDate>
      <link>https://dev.to/animatlio/animatly-io-the-platform-for-animated-icons-and-illustrations-2jo0</link>
      <guid>https://dev.to/animatlio/animatly-io-the-platform-for-animated-icons-and-illustrations-2jo0</guid>
      <description>&lt;p&gt;Animatly is a platform for designers and developers where you can download and customize animated icons and illustrations. If you now wonder why to use animated icons and illustrations, I suggest you to read this article: &lt;a href="https://dev.to/animatlio/how-lottie-animations-can-improve-your-design-5cga"&gt;https://dev.to/animatlio/how-lottie-animations-can-improve-your-design-5cga&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Animatly is based on Lottie animations. Animatly stands for the easy way to customize and download animations in the fastest way possible. Compared to other platforms, you can change the color of the whole icon library with only one click. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--khgE6pOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8tlugs8nrdm9sw9cg08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--khgE6pOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8tlugs8nrdm9sw9cg08.png" alt="Animatly Screen"&gt;&lt;/a&gt;&lt;br&gt;
According to the color, you can also change the stroke size of each icon. To make this possible you need to add some parameters already in After Effects. That's why it only works for Animatly icons. For the best workflow, you download the SVG, for your design program and at the same time download the JSON file to hand it to your developer. Make sure you hand him the JSON and not the HTML file. The HTML is only for previewing the animation. You also have the option to convert the Lottie to a GIF but it will take quite some time. When you click on Edit you will get more options to perfect the animation for your needs. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MNX6HX8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx6fjjqxxbzpu17jamra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MNX6HX8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx6fjjqxxbzpu17jamra.png" alt="Animatly Editor"&gt;&lt;/a&gt;&lt;br&gt;
To save an animation you can hit the like button and it will be stored in your account. &lt;/p&gt;

&lt;p&gt;Animatly is specialized in perfectly looped animations. Compared to other platforms Animatly is mainly made for animations that should fit your normal screen behavior. That means that you can use them instead of your normal static icons and illustrations. The animation style is very slow and made to not interrupt the user in his experience. They are just perfect for feature sections.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W31S15uY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmr2quzwvq2r54a1dsu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W31S15uY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmr2quzwvq2r54a1dsu1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Many big Agnecys have gone from static icons to animated ones in the past few years. It became more than just a trend. Even Stripe (one of the biggest payment providers in the world) is using animated icons naturally in their screen design. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hXXrk0q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ivo9nrpc193mkvoxvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXXrk0q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ivo9nrpc193mkvoxvq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
If you still think animated icons are not necessary, then any help comes too late. &lt;/p&gt;

&lt;p&gt;No wait.. maybe there is something else I can impress you with. We haven't talked about animated illustrations yet. Animated illustrations are even rarer than animated icons. Animatly belongs to the biggest consistent libraries in the world for animated illustrations. They are even more satisfying than animated icons. Animatly has an illustration for every situation. And if there are missing some they will be created very soon. The Editor of the illustrations is even more iconic.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a5OIt2ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j5fzivvv6v7p750pgyk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a5OIt2ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j5fzivvv6v7p750pgyk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You can change every color of the animation in a very easy way. If you hover over a color field the color on the illustration will start to blink in black and white. You are able to match the colors of the animation to your CI/CD within a few seconds. You will get all of that for an insane price of just 15$. With buying a license you definitely can't go wrong. &lt;a href="https://animatly.io/"&gt;https://animatly.io/&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ux</category>
      <category>javascript</category>
      <category>libraries</category>
    </item>
    <item>
      <title>UML diagram for GoF design pattern examples in TypeScript</title>
      <author>Takaaki Teshima</author>
      <pubDate>Mon, 17 May 2021 12:44:33 +0000</pubDate>
      <link>https://dev.to/takaakit/uml-diagram-for-gof-design-pattern-examples-in-typescript-46d5</link>
      <guid>https://dev.to/takaakit/uml-diagram-for-gof-design-pattern-examples-in-typescript-46d5</guid>
      <description>&lt;p&gt;This post lists UML diagrams of GoF design pattern examples written in TypeScript.  The UML diagrams are displayed using &lt;em&gt;Diagram Map&lt;/em&gt;. If you want to know about &lt;em&gt;Diagram Map&lt;/em&gt;, see &lt;a href="https://dev.to/takaakit/diagram-map-tracing-uml-sysml-elements-across-diagrams-49i7"&gt;this post&lt;/a&gt;. Also, you can get UML model data and TypeScript code of the examples from &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript"&gt;here&lt;/a&gt;.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavioral Patterns

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chain-of-responsibility"&gt;Chain of Responsibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#command"&gt;Command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#interpreter"&gt;Interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#iterator"&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mediator"&gt;Mediator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#memento"&gt;Memento&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#observer"&gt;Observer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#state"&gt;State&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strategy"&gt;Strategy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#template-method"&gt;Template Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#visitor"&gt;Visitor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Creational Patterns

&lt;ul&gt;
&lt;li&gt;&lt;a href="#abstract-factory"&gt;Abstract Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#builder"&gt;Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#factory-method"&gt;Factory Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prototype"&gt;Prototype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#singleton"&gt;Singleton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Structural Patterns

&lt;ul&gt;
&lt;li&gt;&lt;a href="#adapter"&gt;Adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bridge"&gt;Bridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#composite"&gt;Composite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#decorator"&gt;Decorator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#facade"&gt;Facade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flyweight"&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#proxy"&gt;Proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#chain-of-responsibility"&gt;
  &lt;/a&gt;
  Chain of Responsibility &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
A trouble is turned around among supporters, and the trouble will be handled by the supporter who can handle it. There are four types of supporters below:

&lt;ul&gt;
&lt;li&gt;LazySupporter doesn't handle any trouble&lt;/li&gt;
&lt;li&gt;MoodySupporter handles odd ID troubles&lt;/li&gt;
&lt;li&gt;SpecialSupporter handles a trouble of the target ID.&lt;/li&gt;
&lt;li&gt;LimitedSupporter handles troubles below the limit ID.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NDncbtSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/chain-of-responsibility/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NDncbtSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/chain-of-responsibility/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/chain-of-responsibility"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/9zk4faog/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/chain-of-responsibility/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Encapsulate a request as an object, thereby letting you parametrize clients with different requests, queue or log requests, and support undoable operations (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Simple drawing application:

&lt;ul&gt;
&lt;li&gt;Draw a path with points by dragging the mouse.&lt;/li&gt;
&lt;li&gt;Revert to one previous drawing by pressing the Undo button.&lt;/li&gt;
&lt;li&gt;Erase all drawing by pressing the Clear button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60vAkUgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/command/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60vAkUgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/command/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/command"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/6b4nvscm/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/command/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#interpreter"&gt;
  &lt;/a&gt;
  Interpreter &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
An interpreter for mini language to operate radio controlled car. It parses the following syntax composed of "forward", "left", "right", and "repeat" commands:&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;program&amp;gt;      ::= program &amp;lt;command list&amp;gt;
&amp;lt;command list&amp;gt; ::= &amp;lt;command&amp;gt;* end
&amp;lt;command&amp;gt;      ::= &amp;lt;repeat&amp;gt; | &amp;lt;action&amp;gt;
&amp;lt;repeat&amp;gt;       ::= repeat &amp;lt;number&amp;gt; &amp;lt;command list&amp;gt;
&amp;lt;action&amp;gt;       ::= forward | right | left
&amp;lt;number&amp;gt;       ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--joHF-5OQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/interpreter/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--joHF-5OQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/interpreter/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/interpreter"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/5f9u1Lmy/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/interpreter/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#iterator"&gt;
  &lt;/a&gt;
  Iterator &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Add books in a bookshelf and display the names of the book in turn.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EHfkmpDn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/iterator/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHfkmpDn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/iterator/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/iterator"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/r20hcqzg/5//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/iterator/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#mediator"&gt;
  &lt;/a&gt;
  Mediator &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Show a login dialog for entering a username and password. The dialog has the following elements:

&lt;ul&gt;
&lt;li&gt;"Guest" and "Login" radio buttons&lt;/li&gt;
&lt;li&gt;"Username" and "Password" text fields&lt;/li&gt;
&lt;li&gt;"OK" and "Cancel" buttons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And change the editable properties of the elements depending on the state of the radio buttons and text fields.&lt;/p&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y4Jj7rj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/mediator/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y4Jj7rj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/mediator/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/mediator"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/kdgw0var/5//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/mediator/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#memento"&gt;
  &lt;/a&gt;
  Memento &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Without violating encapsulation, capture and externalize an object's internal state so that the object can be returned to this state later (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
A dice game in which money increases and decreases:

&lt;ul&gt;
&lt;li&gt;A gamer shakes a dice and the number determine the next state.&lt;/li&gt;
&lt;li&gt;If the number of dice is even, gamer's money doubles, and if it is odd, gamer's money is halved.&lt;/li&gt;
&lt;li&gt;If the gamer's money is less than half of the highest amount, it returns to the highest amount.&lt;/li&gt;
&lt;li&gt;The game is repeated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HDjOTrtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/memento/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HDjOTrtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/memento/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/memento"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/udwzpn2a/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/memento/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#observer"&gt;
  &lt;/a&gt;
  Observer &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Observers observe a Subject object holding a numerical value and display the value. The display formats are digits and bar charts.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fgj3IpCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/observer/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fgj3IpCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/observer/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/observer"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/a5md90gz/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/observer/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#state"&gt;
  &lt;/a&gt;
  State &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Allow an object to alter its behavior when its internal state changes. The object will appear to change its class (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Safe security system that the security status changes with time. When you press a button in a dialog, the message displayed will change depending on whether the time is day or night. The internal time of the dialog advances one hour for every second of real time.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVUgzdqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/state/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVUgzdqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/state/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/state"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/L3yhe8of/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/state/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#strategy"&gt;
  &lt;/a&gt;
  Strategy &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from the clients that use it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
A game of rock-scissors-paper. Two strategies are available:

&lt;ul&gt;
&lt;li&gt;Random Strategy: showing a random hand signal.&lt;/li&gt;
&lt;li&gt;Mirror Strategy: showing a hand signal from the previous opponent's hand signal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g_43RJh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/strategy/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g_43RJh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/strategy/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/strategy"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/kyLve8go/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/strategy/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#template-method"&gt;
  &lt;/a&gt;
  Template Method &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define the skeleton of an algorithm in an operation, deferring some steps to client subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a character or string repeatedly 5 times.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJR_DVRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/template-method/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJR_DVRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/template-method/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/template-method"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/bcnt8qra/6//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/template-method/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#visitor"&gt;
  &lt;/a&gt;
  Visitor &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Visitor visits the file system composed of files and directories, and displays a list of files/directories.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VoHMtSPw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/visitor/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoHMtSPw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/visitor/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/visitor"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/c24b3rda/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/visitor/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#abstract-factory"&gt;
  &lt;/a&gt;
  Abstract Factory &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide an interface for creating families of related or dependent objects without specifying their concrete classes (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Create a hierarchical link collection as an HTML file. It can be created in either tabular or list format.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_38lZ1Pm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/abstract-factory/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_38lZ1Pm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/abstract-factory/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/creational-patterns/abstract-factory"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/ews91mcL/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/abstract-factory/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#builder"&gt;
  &lt;/a&gt;
  Builder &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Separate the construction of a complex object from its representation so that the same construction process can create different representations (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Create documents in HTML format and text format. It is possible to create different documents in the same construction process.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D5_8zQEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/builder/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5_8zQEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/builder/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/creational-patterns/builder"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/fra9yu5m/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/builder/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#factory-method"&gt;
  &lt;/a&gt;
  Factory Method &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
The subject is a factory to make credit cards. The Factory defines how to create an credit card, but the actual credit card is created by the CreditCardFactory. The "createProduct()" is called a Factory Method, and it is responsible for manufacturing an object.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d7wfkC-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/factory-method/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d7wfkC-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/factory-method/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/creational-patterns/factory-method"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/rfg8t4dx/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/factory-method/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#prototype"&gt;
  &lt;/a&gt;
  Prototype &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a string enclosed with a frame line, or drawn with an underline. The Client (Main) registers instances of the Display subclass in the Manager class. When necessary, the Manager class asks those registered instances to return a clone. The Client (Main) requires the returned clones to display.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oA_fDy7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/prototype/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oA_fDy7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/prototype/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/creational-patterns/prototype"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/p8z5dasv/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/prototype/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#singleton"&gt;
  &lt;/a&gt;
  Singleton &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Ensure a class has only one instance, and provide a global point of access to it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Check whether the same instance is obtained.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EXH0S7nE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/singleton/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXH0S7nE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/singleton/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/creational-patterns/singleton"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/3o9xz8mh/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/singleton/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#adapter"&gt;
  &lt;/a&gt;
  Adapter &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display the given string as follows&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-- Nice to meet you --
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or display it as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[ Nice to meet you ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aBBVtKUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/adapter/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aBBVtKUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/adapter/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/adapter"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/huscqp84/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/adapter/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#bridge"&gt;
  &lt;/a&gt;
  Bridge &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Decouple an abstraction from its implementation so that the two can vary independently (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display only one line or display the specified number of lines.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OhH2F7xc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/bridge/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OhH2F7xc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/bridge/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/bridge"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/3t7uy2av/5//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/bridge/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#composite"&gt;
  &lt;/a&gt;
  Composite &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Compose objects into tree structures to represent whole-part hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Represents a file system composed of files and directories. FileSystemElement makes it possible to treat File and Directory uniformly.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J820_Fxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/composite/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J820_Fxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/composite/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/composite"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/9wsxz4Lb/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/composite/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#decorator"&gt;
  &lt;/a&gt;
  Decorator &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a string with decorative frames. The frames can be combined arbitrarily.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y1a9MPHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/decorator/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y1a9MPHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/decorator/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/decorator"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/qu769pxy/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/decorator/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#facade"&gt;
  &lt;/a&gt;
  Facade &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Create a simple homepage through a Facade (PageCreator). The Facade gets info from the DataLibrary and uses the info to create an HTML file.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BMWGbYm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/facade/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BMWGbYm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/facade/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/facade"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/gzp6c89d/5//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/facade/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#flyweight"&gt;
  &lt;/a&gt;
  Flyweight &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Use sharing to support large numbers of fine-grained objects efficiently (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a string consisting of large characters (0-9 digits only). Large character objects are not created until they are needed. And the created objects are reused.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9sSpY3Lc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/flyweight/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9sSpY3Lc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/flyweight/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/flyweight"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/5su60q8b/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/flyweight/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#proxy"&gt;
  &lt;/a&gt;
  Proxy &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide a surrogate or placeholder for another object to control access to it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Print on a named printer. Setting and changing the printer name is done by Proxy (ProxyPrinter). At the time of printing, create an instance of the RealSubject (RealPrinter) for the first time.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_0k8tYtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/proxy/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_0k8tYtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/proxy/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/proxy"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/sfvo96k3/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/proxy/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Gamma, E. et al. Design Patterns: Elements of Reusable Object-Oriented Software, Addison-Wesley, 1994&lt;/li&gt;
&lt;li&gt;Hiroshi Yuki. Learning Design Patterns in Java [In Japanese Language], Softbank publishing, 2004&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/takaakit/diagram-map-tracing-uml-sysml-elements-across-diagrams-49i7"&gt;Diagram Map: tracing UML/SysML elements across diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript"&gt;Design Pattern Examples in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>uml</category>
      <category>gof</category>
      <category>designpatterns</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Call Screen Glass UI Using HTML &amp; CSS</title>
      <author>Innocent Coder</author>
      <pubDate>Mon, 17 May 2021 12:44:26 +0000</pubDate>
      <link>https://dev.to/innocentcoder/call-screen-glass-ui-using-html-css-1ifl</link>
      <guid>https://dev.to/innocentcoder/call-screen-glass-ui-using-html-css-1ifl</guid>
      <description>&lt;p&gt;If you're hearing the term "Glassmorpism" for the first time, well... It only just got my attention a few hours before this post so, What is glassmorphism?&lt;/p&gt;

&lt;p&gt;Glassmorphism is a new trend which is getting more traction on websites like Dribble, Behance etc and I've seen a couple of awesome designs made using this trendy UI.&lt;/p&gt;

&lt;p&gt;Here We Have Call Screen Design Using HTML And CSS.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5TQtM2rn67E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code:-&lt;/strong&gt; &lt;a href="https://www.websitemakers.xyz/2021/05/call-phone-glass-ui-using-html-css.html"&gt;https://www.websitemakers.xyz/2021/05/call-phone-glass-ui-using-html-css.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section&amp;gt;
        &amp;lt;div class="card"&amp;gt;
            &amp;lt;div class="face"&amp;gt;
                &amp;lt;h3&amp;gt;Innocent Coder&amp;lt;/h3&amp;gt;
                &amp;lt;h6&amp;gt;mobile&amp;lt;/h6&amp;gt;
                &amp;lt;div class="icon-content"&amp;gt;
                    &amp;lt;div style="text-align: center;"&amp;gt;
                        &amp;lt;i class="far fa-clock"&amp;gt;&amp;lt;/i&amp;gt;
                        &amp;lt;h5&amp;gt;Remind me&amp;lt;/h5&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div style="text-align: center;"&amp;gt;
                        &amp;lt;i class="fas fa-comment"&amp;gt;&amp;lt;/i&amp;gt;
                        &amp;lt;h5&amp;gt;Message&amp;lt;/h5&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="slide-content"&amp;gt;
                    &amp;lt;h5&amp;gt;Slide to answer &amp;gt;&amp;lt;/h5&amp;gt;
                &amp;lt;/div&amp;gt;        
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CSS Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600&amp;amp;display=swap');
*{
    margin: 0;
    padding: 0;
    font-family: 'Poppins', sans-serif;
}
body{
    overflow: hidden;
    color: #fff;
}
section{
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #1c1c25;
    height: 100vh;
}
section::before,
.card::before{
    content: '';
    position: absolute;
    width: 170px;
    height: 170px;
    background: linear-gradient(#f00, #f0f);
    border-radius: 50%;
}
section::before{
    top: 3%;
    left: 55%;
}
.card::before{
    bottom: 2%;
    left: 31%;
    background: linear-gradient(#0098f0, #0457d3);
}

.face{
    width: 250px;
    height: 485px;
    border-radius: 20px;
    box-shadow: 0 15px 35px rgba(0,0,0,0.5);
    background-color: rgba(255,255,255,0.05);
    filter: blur(0.2px);
    border-width: 0.1px;
    border-style: solid;
    border-color: rgba(255, 255, 255, 0.425);
}
.slide-content{
    width: 120px;
    height: 15px;
    padding: 12px 20px;
    border-radius: 20px;
    box-shadow: 0 15px 35px rgba(0,0,0,0.5);
    background-color: rgba(255,255,255,0.05);
    text-align: center;
    margin: 30px auto;
    cursor: pointer;
}
.face h3{

    font-weight: 300;
    font-size: 20px;
    text-align: center;
    margin-top: 100px;
}
.face h6{
    font-weight: 300;
    font-size: 12px;
    text-align: center;
    letter-spacing: 1px;
}
.icon-content{
    margin-top: 180px;
    padding: 0 30px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}
.icon-content i{
    font-size: 14px;

}
h5{
    font-weight: 400;
    font-size: 11px;
    letter-spacing: 0.5px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/innocentcoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGJ5NE5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ICZsIDfS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620705/764eb964-ecd2-4875-90c2-142dfc2f639c.jpg" alt="innocentcoder image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/innocentcoder/7-rare-website-with-awesome-free-fonts-3dfg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 rare website with awesome free fonts&lt;/h2&gt;
      &lt;h3&gt;Innocent Coder ・ May 15 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What exactly are SYMBOLS in Javascript ? </title>
      <author>Sumanth</author>
      <pubDate>Mon, 17 May 2021 12:43:06 +0000</pubDate>
      <link>https://dev.to/movingmelody/what-exactly-are-symbols-in-javascript-5a13</link>
      <guid>https://dev.to/movingmelody/what-exactly-are-symbols-in-javascript-5a13</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-what-is-a-symbol-in-javascript-js-symbols-grand-tour"&gt;
  &lt;/a&gt;
  1. What is a &lt;strong&gt;Symbol&lt;/strong&gt; in Javascript ? JS Symbols Grand Tour
&lt;/h3&gt;

&lt;p&gt;A primitive data of Javascript, along with String, Number (Integers, Floats, Infinity, NaN), Boolean, null, and undefined. And it represents a "unique" Identifier. Introduced in ECMAScript 2015, ES6.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-how-raw-symbols-endraw-can-be-used-"&gt;
  &lt;/a&gt;
  2. How &lt;code&gt;symbols&lt;/code&gt; can be used ?
&lt;/h2&gt;

&lt;p&gt;They bring a few benefits to the language and are particularly useful when used as object &lt;strong&gt;properties&lt;/strong&gt;. But, what can they do for us that strings cannot? Usually, we use &lt;strong&gt;strings&lt;/strong&gt; as object properties.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#birds-eye-view"&gt;
  &lt;/a&gt;
  Bird's Eye View
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Once you create a symbol, its value is kept private and for internal use.&lt;/li&gt;
&lt;li&gt;You create a symbol by calling the &lt;code&gt;Symbol()&lt;/code&gt; global factory function.&lt;/li&gt;
&lt;li&gt;Every time you invoke &lt;code&gt;Symbol()&lt;/code&gt; we get a new and unique symbol, guaranteed to be different from all other symbols
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Symbols are used to identify Object Properties.&lt;/li&gt;
&lt;li&gt;And to avoid name clashing btw properties, since no symbol is equal to another.&lt;/li&gt;
&lt;li&gt;Symbols are not enumerated, which means that they do not get included in a for..of or for..in loop ran upon an object.&lt;/li&gt;
&lt;li&gt;Symbols are not part of the &lt;code&gt;Object.keys()&lt;/code&gt; or &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; result.&lt;/li&gt;
&lt;li&gt;You can access all the symbols assigned to an object using the &lt;code&gt;Object.getOwnPropertySymbols()&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;Or to add properties that the user cannot overwrite, intentionally or without realizing.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Flavio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;//'Sumanth'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RUN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;RUN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Person is running&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;RUN&lt;/span&gt;&lt;span class="p"&gt;]())&lt;/span&gt; &lt;span class="c1"&gt;//'Person is running'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#creating-symbols"&gt;
  &lt;/a&gt;
  Creating Symbols
&lt;/h3&gt;

&lt;p&gt;A value of this type can be created using &lt;code&gt;Symbol()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// here id is the new symbol&lt;/span&gt;
&lt;span class="nx"&gt;consolo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Symbol()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since a &lt;code&gt;symbol&lt;/code&gt; is a primitive value, if you attempt to create a symbol using the new operator, you will get an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// TypeError&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Totally acceptable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also give symbol a description in string format as a first argument while instantiating a Symbol and it is optional and it doesn't affect the symbol itself.&lt;/p&gt;

&lt;p&gt;This description is mostly useful for debugging purpose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// without description&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// symbol with desc "firstname"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Symbol("firstname")&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "firstname"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Symbol()&lt;/code&gt; function creates a new unique value each time you call it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even if we give the same &lt;strong&gt;description&lt;/strong&gt; to different symbols they are totally different and that's why Symbol is a unique Identifier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;debug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;debug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;debug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;id2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sumanth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// primitive type string&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sumanth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#why-symbols-are-introduced"&gt;
  &lt;/a&gt;
  Why Symbols are Introduced
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Basically, primitive values are &lt;strong&gt;Immutable&lt;/strong&gt;. They can't be changed. Of course, a variable with a primitive assigned can be reassigned. For example, when you write the code let x = 1; x++; you've &lt;strong&gt;reassigned&lt;/strong&gt; the variable x. But, you haven't mutated the primitive numeric value of 1.&lt;/li&gt;
&lt;li&gt;However, if you modify a non-primitive value, the modified value will also be modified where it has been called from.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;primitiveMutator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;primitiveMutator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1 (value not changed)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;objectMutator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;objectMutator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Primitive values are equal to another primitive with an equivalent value.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;def&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ef&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;But, equivalent non-primitive values will not result in values which are exactly equal.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Intrinsic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Intrinsic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="c1"&gt;// Though, their .name properties ARE primitives:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Objects play an elemental role in the JavaScript language. They’re often used as collections of key/value pairs. However, this is a big limitation of using them in this manner: Until &lt;strong&gt;symbols existed&lt;/strong&gt;, object keys could only be strings. If we ever attempt to use a non-string value as a key for an object, the value will be coerced to a string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;Map&lt;/code&gt; data structure was created in part to allow for key/value storage in situations where a key is not a string. Whereas in Objects we can use only strings as keys&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#where-can-we-use-raw-symbols-endraw-symbols-actual-usecase"&gt;
  &lt;/a&gt;
  Where can we use &lt;code&gt;Symbols&lt;/code&gt; (Symbols actual Use-case)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There are the ways to add new &lt;code&gt;properties&lt;/code&gt; to an Object:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sumanth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// using square brackets&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// "Mars"&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;96584&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// using dot operator&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 96584&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {name: "sumanth", Native: "Mars", phno: 96584}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And the another way using Symbols as object Properties:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// new object&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sym&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// new symbol&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// adding new property to obj&lt;/span&gt;

 &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foobar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// another way of using symbols // not as "sym": 123&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// directly creating symbols here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What’s the benefit of using Symbol("name") as property name or key over a string "name"?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Properties with a symbol key don't appear in the JSON representation of your object. Not even the for-in loop or Object.keys can enumerate them:&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// new symbol&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="mi"&gt;369&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// symbol property&lt;/span&gt;
  &lt;span class="na"&gt;okay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// {"okay":"A text"}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// A text&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// ['okay']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you can observe in the above examples symbol properties are not appeared when we try to access them. In this way they allow us to create some "&lt;strong&gt;HIDDEN&lt;/strong&gt;" properties of an object.&lt;/p&gt;

&lt;p&gt;But these properties are not fully private in a strict sense. We can access them using &lt;code&gt;Object.getOwnPropertySymbols()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOwnPropertySymbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// Symbol(name)&lt;/span&gt;
&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOwnPropertySymbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt; &lt;span class="c1"&gt;// 369 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Let's say we imported one user &lt;code&gt;object&lt;/code&gt; from another code&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// belongs to another code or imported code&lt;/span&gt;

&lt;span class="c1"&gt;// Our script wants to create "id" property or identifier&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Our id value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...Another script also wants "id" for its purposes...&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Their id value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// Boom! overwritten by another script!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, to overcome this conflict we can use Symbols as property names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// belongs to another code&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, imagine that another script wants to have its own identifier inside &lt;code&gt;user&lt;/code&gt;, for its own purposes. That may be another JavaScript library, so that the scripts are completely unaware of each other.&lt;/p&gt;

&lt;p&gt;Then that script can create its own &lt;code&gt;Symbol("id")&lt;/code&gt;, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Their id value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There will be no conflict between our and their identifiers, because symbols are always different, even if they have the same name.&lt;/p&gt;

&lt;p&gt;…But if we used a string &lt;code&gt;"id"&lt;/code&gt; instead of a symbol for the same purpose, then there &lt;em&gt;would&lt;/em&gt; be a conflict as we seen above.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;To avoid conflicts in identifier names we can use Symbols. If one imported object has a property as "name" and if we accidentally create our property with same "name" then the previous property will be overridden.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
