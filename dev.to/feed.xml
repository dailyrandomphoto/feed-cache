<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Deliver Deeper Digital Product Insights With RudderStack and Amplitude</title>
      <author>RudderStack</author>
      <pubDate>Wed, 10 Nov 2021 12:25:23 +0000</pubDate>
      <link>https://dev.to/rudderstack/deliver-deeper-digital-product-insights-with-rudderstack-and-amplitude-3147</link>
      <guid>https://dev.to/rudderstack/deliver-deeper-digital-product-insights-with-rudderstack-and-amplitude-3147</guid>
      <description>&lt;p&gt;Now it's easier to make decisions based on insights from every customer touchpoint on every site and application. Amplitude's Digital Optimization System helps businesses close the loop between data, insight, and action. With RudderStack integrated with the system, it becomes even more powerful. Our plug-and-play data pipelines make it easy to stream real-time behavioral data directly to Amplitude from all sites and applications while handling identity resolution along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understand-how-digital-products-drive-business-with-amplitude"&gt;
  &lt;/a&gt;
  Understand how digital products drive business with Amplitude
&lt;/h2&gt;

&lt;p&gt;Amplitude helps companies get more value out of their digital products. The &lt;a href="https://amplitude.com/digital-optimization-system"&gt;Digital Optimization System&lt;/a&gt; combines a robust product analytics solution with digital personalization tools, creating a powerful feedback loop. This two-fold approach gives companies everything they need to understand customer behavior, predict valuable outcomes, and optimize their digital product experiences for maximum impact. Additionally, the easily accessible insights democratize data across teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-power-of-eventdriven-data-infrastructure-with-rudderstack"&gt;
  &lt;/a&gt;
  The power of event-driven data infrastructure with RudderStack
&lt;/h2&gt;

&lt;p&gt;Digital disruptors know success requires a deep understanding of the customer and the ability to quickly adapt digital products based on customer insights. Behavioral, or event, data is the key that unlocks this granular understanding, and when it comes to behavioral data, the right tooling makes all the difference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amplitude-and-rudderstack-are-better-together"&gt;
  &lt;/a&gt;
  Amplitude and RudderStack are better together
&lt;/h2&gt;

&lt;p&gt;Leveraging behavioral data starts with &lt;a href="https://rudderstack.com/blog/the-complete-customer-data-stack-data-collection-part-1"&gt;data collection&lt;/a&gt;. RudderStack's &lt;a href="https://rudderstack.com/product/event-stream/"&gt;Event Stream&lt;/a&gt; provides a reliable and scalable method to capture and deliver data in real-time to every downstream application. So, you can build your event-driven infrastructure with behavioral analytics from Amplitude in mind. Our robust Amplitude &lt;a href="https://docs.rudderstack.com/destinations/analytics/amplitude"&gt;integration&lt;/a&gt; makes it easy to supercharge the Digital Optimization System with event data from every web and mobile source.&lt;/p&gt;

&lt;p&gt;With high-performance data plumbing from RudderStack in place, Amplitude users unlock the system's full value and focus on leveraging every feature to start understanding their customers better. With easy access to insights, every team can make better decisions, faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ljQLrhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/97bpcflt/production/2fd7b4dc68ddfdc4df0edb7e1300ee4520cb04d0-648x477.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ljQLrhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/97bpcflt/production/2fd7b4dc68ddfdc4df0edb7e1300ee4520cb04d0-648x477.png" alt="RudderStack Data Stack" width="648" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started-with-rudderstack-and-amplitude"&gt;
  &lt;/a&gt;
  Get started with RudderStack and Amplitude
&lt;/h2&gt;

&lt;p&gt;Ready to start making decisions faster with a deeper understanding of your customers? &lt;a href="https://app.rudderlabs.com/signup?type=freetrial"&gt;Sign up for free&lt;/a&gt;, check out our &lt;a href="https://docs.rudderstack.com/destinations/analytics/amplitude"&gt;documentation&lt;/a&gt; to set up Amplitude as a destination, and start streaming your behavioral data to Amplitude today.&lt;/p&gt;

</description>
      <category>productanalytics</category>
      <category>rudderstack</category>
      <category>amplitude</category>
      <category>dataanalytics</category>
    </item>
    <item>
      <title>AI in Software Testing: Is AI Capable of taking over software testing?</title>
      <author>Kat Holder</author>
      <pubDate>Wed, 10 Nov 2021 12:07:14 +0000</pubDate>
      <link>https://dev.to/katholder/ai-in-software-testing-is-ai-capable-of-taking-over-software-testing-1ell</link>
      <guid>https://dev.to/katholder/ai-in-software-testing-is-ai-capable-of-taking-over-software-testing-1ell</guid>
      <description>&lt;p&gt;The use of AI to enhance existing tools and frameworks that identify particular testing challenges is among the trends that began this decade and is predicted to continue.&lt;/p&gt;

&lt;p&gt;Functional testing of web and mobile applications, visual testing of user interfaces, and UI element location, and auto-correcting element selectors are all examples at the moment. Beyond that, we can see &lt;a href="https://codersera.com/blog/ai-in-software-testing-a-detailed-explantion/"&gt;AI replacing entire technological stacks for automated testing.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AI will take over automation jobs that need judgments that a human might make in less than a second at all stages of testing. Higher-order testing tasks may require human input or involvement at first. Test generation, usability testing, security testing, and edge cases are examples of jobs that demand a little extra thought.&lt;/p&gt;

&lt;p&gt;Nevertheless, as technology advances and computers get more schooled on the behaviours of these higher-order tasks, AI is expected to take over those tasks as well, tackling challenges that require more context.&lt;/p&gt;

&lt;p&gt;In order to make the application more secure, we are increasingly relying on Artificial Intelligence (AI). As testing becomes more automated, we may be able to delegate the majority of it to AI. &lt;/p&gt;

&lt;p&gt;This means that, rather of humans performing manual testing, we are gradually moving toward a scenario in which machines execute test scripts. However, only minimum human input will be necessary to assist robots in 'learning’ and improving themselves.&lt;/p&gt;

&lt;h2&gt;Benefits of AI in Software Testing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Improved accuracy&lt;/li&gt;
&lt;li&gt;Going beyond the limitations of Manual Testing&lt;/li&gt;
&lt;li&gt;Helps both Developers and Testers&lt;/li&gt;
&lt;li&gt;Increase in overall Test Coverage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;In A Nutshell…&lt;/h2&gt;

&lt;p&gt;Fortunately, there are currently a plethora of AI-powered platforms on the market, making the use of AI in testing a reality rather than a pipe dream. Artificial Intelligence (AI) opens up a slew of new possibilities for optimizing automated testing. Testers won't have to watch over their automated tests as much because they'll self-heal and run faster. &lt;/p&gt;

&lt;p&gt;Furthermore, Artificial Intelligence can assist in automating more delicate testing areas such as user interface testing and visual validation. Furthermore, AI can analyze enormous amounts of data and develop extensive test cases that assess the system's interface and operation down to the finest aspects.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Ways To Level Up Your Testing with Python</title>
      <author>Alex Strick van Linschoten</author>
      <pubDate>Wed, 10 Nov 2021 12:01:59 +0000</pubDate>
      <link>https://dev.to/alexzenml/10-ways-to-level-up-your-testing-with-python-25ni</link>
      <guid>https://dev.to/alexzenml/10-ways-to-level-up-your-testing-with-python-25ni</guid>
      <description>&lt;p&gt;There's nothing like working on testing to get you familiar with a codebase. I've been &lt;a href="https://github.com/zenml-io/zenml/pull/118"&gt;working&lt;/a&gt; on &lt;a href="https://github.com/zenml-io/zenml/pull/149"&gt;adding back&lt;/a&gt; in &lt;a href="https://github.com/zenml-io/zenml/pull/130"&gt;some testing&lt;/a&gt; to &lt;a href="https://github.com/zenml-io/zenml"&gt;the ZenML codebase&lt;/a&gt; this past couple of weeks and as a relatively new employee here, it has been a really useful way to dive into how things work under the hood.&lt;/p&gt;

&lt;p&gt;This being my first time working seriously with Python, there were a few things that I had to learn along the way. What follows is an initial set of lessons I took away from the experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-onesizefitsall-wont-cut-it"&gt;
  &lt;/a&gt;
  1. One-size-fits-all won't cut it
&lt;/h2&gt;

&lt;p&gt;Looking at things from a higher level, it's important to realise that there are lots of different approaches that you could take to testing. It's a truism that you should 'test intent, not implementation', but I imagine that in some scenarios like for software being deployed on a space shuttle you'd want to maybe also test the implementation as well.&lt;/p&gt;

&lt;p&gt;Similarly, different companies and projects have different needs for testing. If you're a huge company, testing is a way of ensuring reliability and preventing catastrophic failures along the way. If you're a small company, where speed of creation and the pace of development is frantic, having too rigid a set of tests may actually end up hurting you by stifling your ability to iterate through ideas and changes quickly.&lt;/p&gt;

&lt;p&gt;I found it helped to take a step back early on in my testing to really think through what I was doing, why I was doing it, and  what larger goal it was there to support.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dont-be-that-person-testing-to-crush-the-spirits-of-your-team"&gt;
  &lt;/a&gt;
  2. 'Don't be that person': testing to crush the spirits of your team
&lt;/h2&gt;

&lt;p&gt;It's worth reiterating the previous remark about testing intent and not implementation.&lt;/p&gt;

&lt;p&gt;If you test every last conditional statement, checking that the code is built in exactly that specific way, changing anything in the original codebase is going to become incredibly tiresome. Moreover, your testing library will start to resemble a kind of byzantine twin replica of your original code.&lt;/p&gt;

&lt;p&gt;For preventing this, it helps if everyone in the team is testing as much as they are writing new code. This way it is just part of the development process and not a separate add-on from a QA-like team. At ZenML, we're small enough that the expectation is that if you work on a new feature, you should also be responsible for writing the tests that go alongside.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-pytest-o-pytest"&gt;
  &lt;/a&gt;
  3. Pytest, O Pytest!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.pytest.org/en/latest/"&gt;Pytest&lt;/a&gt; is amazing. It has everything you need to write your tests, is easy to understand, and has great documentation of even the slightly more niche features. Can you tell I really enjoyed getting to know this open-source library?&lt;/p&gt;

&lt;p&gt;For now, I'll mention some of the really useful combinations of CLI commands that I found useful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# make the test output verbose&lt;/span&gt;
pytest tests/ &lt;span class="nt"&gt;-v&lt;/span&gt;

&lt;span class="c"&gt;# stop testing whenever you get to a test that fails&lt;/span&gt;
pytest tests/ &lt;span class="nt"&gt;-x&lt;/span&gt;

&lt;span class="c"&gt;# run only a single test&lt;/span&gt;
pytest tests/test_base.py::test_initialization

&lt;span class="c"&gt;# run only tests tagged with a particular word&lt;/span&gt;
pytest tests/ &lt;span class="nt"&gt;-m&lt;/span&gt; specialword

&lt;span class="c"&gt;# print out all the output of tests to the console&lt;/span&gt;
pytest tests/ &lt;span class="nt"&gt;-s&lt;/span&gt;

&lt;span class="c"&gt;# run all the tests, but run the last failures first&lt;/span&gt;
pytest tests/ &lt;span class="nt"&gt;--ff&lt;/span&gt;

&lt;span class="c"&gt;# see which tests will be run with the given options and config&lt;/span&gt;
pytest tests/ —collect-only

&lt;span class="c"&gt;# show local variables in tracebacks&lt;/span&gt;
pytest tests/ —showlocals
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there are so many more! The flexibility of the CLI tool allows you to be really nimble and ensures you don't have to hang around for already-passing tests to run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-temp-files-amp-temp-directory-choice-paralysis"&gt;
  &lt;/a&gt;
  4. Temp Files &amp;amp; Temp Directory Choice Paralysis
&lt;/h2&gt;

&lt;p&gt;At a certain point I needed to test that certain functions were having side effects out in the real world of a filesystem. I didn't want to pollute my hard drive or that of whatever random CI server was running the tests, so then I started looking around for options for the creation of temporary files and directories.&lt;/p&gt;

&lt;p&gt;It turns out that between the Python standard library, Pytest and some library-specific features, we're spoiled for choice when it comes for convenience helpers to create temporary files and directories. Python has &lt;a href="https://docs.python.org/3/library/tempfile.html"&gt;&lt;code&gt;tempfile&lt;/code&gt;&lt;/a&gt; which is a platform-agnostic way of creating temporary files and directories. Pytest has &lt;code&gt;tmp_path&lt;/code&gt; which you can insert as an argument into your test function and have a convenience location which you can use to your heart's content. (There are also &lt;a href="https://docs.pytest.org/en/latest/how-to/tmp_path.html#tmp-path"&gt;several other options&lt;/a&gt; with Pytest). Then other libraries you're using may have specific testing capabilities. We use &lt;a href="https://click.palletsprojects.com/en/8.0.x/"&gt;&lt;code&gt;click&lt;/code&gt;&lt;/a&gt; for our CLI functionality and there's a &lt;a href="https://click.palletsprojects.com/en/8.0.x/testing/#file-system-isolation"&gt;useful convenience pattern&lt;/a&gt; for running commands from a temporary directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_something&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="n"&gt;runner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CliRunner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isolated_filesystem&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
      &lt;span class="c1"&gt;# do something here in your new temporary directory
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-decorate-your-way-to-clearer-test-code"&gt;
  &lt;/a&gt;
  5. Decorate your way to clearer test code
&lt;/h2&gt;

&lt;p&gt;Pytest has a bunch of helper functions which enhance the test code you already have. For instance, if you want to wanted to iterate over a series of values and pass them in as arguments to a function, you can just use the &lt;code&gt;parametrize&lt;/code&gt; functionality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test_input,expected"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;"3+5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"2+4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"6*9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that this would fail because 6x9 does not equal to 42.&lt;/p&gt;

&lt;p&gt;If you have a test that you know is failing right now, but you want to put it to the side for the moment, you can mark it down as being expected to fail with &lt;code&gt;xfail&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xfail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# whatever code you have here doesn't work
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I find it's more useful in this way to get a full sense of which tests aren't working rather than just commenting them out.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;mark&lt;/code&gt; method in general is a great way of creating some custom ways to run your tests. You could — using a &lt;code&gt;@pytest.mark.no_async_call_required&lt;/code&gt; decorator — distinguish between tests that take a bit longer to run and tests that are more or less instantaneous, for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-use-raw-hypothesis-endraw-for-random-arguments"&gt;
  &lt;/a&gt;
  6. Use &lt;code&gt;hypothesis&lt;/code&gt; for random arguments
&lt;/h2&gt;

&lt;p&gt;Hypothesis is a Python library to check that functions work the way you think they do. It works by setting up certain conditions under which the function should work.&lt;/p&gt;

&lt;p&gt;For example, you can say that this function should be able to accept any &lt;code&gt;datetime&lt;/code&gt; value without any problem. Instead of trying to come up with a list of different possible edge cases, hypothesis instead will run (in parallel) a whole series of values to check that this is actually the case. As the docs state:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"It works by generating arbitrary data matching your specification and checking that your guarantee still holds in that case. If it finds an example where it doesn’t, it takes that example and cuts it down to size, simplifying it until it finds a much smaller example that still causes the problem. It then saves that example for later, so that once it has found a problem with your code it will not forget it in the future." (&lt;a href="https://hypothesis.readthedocs.io/en/latest/"&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These custom ways of testing certain kinds of inputs are called 'strategies', and it has &lt;a href="https://hypothesis.readthedocs.io/en/latest/data.html#core-strategies"&gt;a whole bunch&lt;/a&gt; of these to choose from. The ones I most often use are text, integers, decimals and &lt;code&gt;datetime&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-use-raw-tox-endraw-to-test-multiple-versions-of-python"&gt;
  &lt;/a&gt;
  7. Use &lt;code&gt;tox&lt;/code&gt; to test multiple versions of Python
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://tox.wiki/en/latest/"&gt;&lt;code&gt;tox&lt;/code&gt;&lt;/a&gt; allows you to automate running your test suite through multiple versions of Python. It's likely that your CI process does this as well, so in order to test that these are passing locally as well, you can use &lt;code&gt;tox&lt;/code&gt;. It creates new virtual environments using the versions you specify and runs your test suite through each of them.&lt;/p&gt;

&lt;p&gt;Note that if you're using &lt;code&gt;pyenv&lt;/code&gt; as your overall Python version manager, you may have to use something like the following command to make sure that all the various Python versions are available to &lt;code&gt;tox&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pyenv &lt;span class="nb"&gt;local &lt;/span&gt;zenml-dev-3.8.6 3.6.9 3.7.11 3.8.11 3.9.6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first argument passed in is my development environment in which I usually work, but the other Python versions / environments are to make those versions available to &lt;code&gt;tox&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-debug-your-failing-tests-with-raw-pdb-endraw-"&gt;
  &lt;/a&gt;
  8. Debug your failing tests with &lt;code&gt;pdb&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Pytest has a bunch of handy ways of inspecting exactly what's going on at the point where a test fails. I showed some of those above, where you can show, for example, whatever local variables were initialized alongside the stacktrace.&lt;/p&gt;

&lt;p&gt;Another really useful feature is the &lt;code&gt;--pdb&lt;/code&gt; flag which you can pass in along with your CLI command. This will deposit you inside a &lt;code&gt;pdb&lt;/code&gt; debugging environment at exactly the moment your test fails. Super useful that we get all this convenience functionality out of the box with Pytest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-linting-before-and-beyond-testing"&gt;
  &lt;/a&gt;
  9. Linting: before and beyond testing
&lt;/h2&gt;

&lt;p&gt;At ZenML we use &lt;a href="https://pre-commit.com/"&gt;&lt;code&gt;pre-commit&lt;/code&gt;&lt;/a&gt; hooks that kick into action whenever you try to commit code. (Check out &lt;a href="https://github.com/zenml-io/zenml/blob/main/pyproject.toml"&gt;our &lt;code&gt;pyproject.toml&lt;/code&gt; configuration&lt;/a&gt; and &lt;a href="https://github.com/zenml-io/zenml/tree/main/scripts"&gt;our &lt;code&gt;scripts/&lt;/code&gt; directory&lt;/a&gt; to see how we handle this!) It ensures a level of consistency throughout our codebase, ensuring that all &lt;a href="https://interrogate.readthedocs.io/en/latest/index.html"&gt;our functions have docstrings&lt;/a&gt;, for example, or implementing a standard order for &lt;code&gt;import&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;Some of this — the &lt;a href="https://mypy.readthedocs.io/en/stable/index.html"&gt;&lt;code&gt;mypy&lt;/code&gt;&lt;/a&gt; hook, for example — starts to verge into what feels like testing territory. By ensuring that functions all have type annotations you sometimes are doing more than just enforcing a particular coding style. When you add &lt;code&gt;mypy&lt;/code&gt; into your development workflow, you get up close and personal with exactly how different types are passed around in your codebase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-and-remember-coverage-is-just-a-number"&gt;
  &lt;/a&gt;
  10. …and remember, coverage is just a number!
&lt;/h2&gt;

&lt;p&gt;It's always good to have a number to chase. It gives you something to work towards and a feeling of progress. Tools like &lt;a href="https://codecov.io"&gt;Codecov&lt;/a&gt; offer fancy visualizations of just which parts of your codebase still need some attention. Automating all this as part of the CI process can highlight when you've just added a series of features but no accompanying tests.&lt;/p&gt;

&lt;p&gt;Bearing all these positives in mind, you should still always remember that your tests are there to serve your broader goals. If your goal is to rapidly iterate and create new features, maybe having a goal of 100% test coverage at all times is an unrealistic expectation. A 100% test coverage does not necessarily mean your code is bug-free and robust. It just means that you invoked it during the testing process.&lt;/p&gt;

&lt;p&gt;Similarly, different kinds of codebase will have different kinds of test weightings. We didn't really talk much about the different types of tests (from unit to integration to usability), but some systems or types of designs will require more focus on different pieces of this bigger picture.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Alex Strick van Linschoten is a Machine Learning Engineer at ZenML.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>testing</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>A Quick Primer on Everything You Need to Know About Blockchain</title>
      <author>IderaDevTools</author>
      <pubDate>Wed, 10 Nov 2021 11:43:59 +0000</pubDate>
      <link>https://dev.to/ideradevtools/a-quick-primer-on-everything-you-need-to-know-about-blockchain-3ha</link>
      <guid>https://dev.to/ideradevtools/a-quick-primer-on-everything-you-need-to-know-about-blockchain-3ha</guid>
      <description>&lt;p&gt;Blockchain is a term utilized to represent distributed ledger technology.&lt;/p&gt;

&lt;p&gt;Blockchain is used to build a storage system for data in a distributed and immutable mode.&lt;/p&gt;

&lt;p&gt;So there are key features we need to mention.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Immutability  —&lt;/strong&gt;  this means that once data is written to a blockchain data storage or ledger, it cannot be changed — so it’s there forever. For instance, in a relational database, no matter how much security you have, the data can be accessed and modified on the system.&lt;/p&gt;

&lt;p&gt;A blockchain system guarantees that if one bit of data is altered, it says it is in an invalid state, and since the data is distributed on various systems, the verified data with a justified state can be retrieved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distribution  — &lt;/strong&gt; is the key to trust. As long as the data you see is in the blockchain and it’s in a valid state, you can trust the data to be accurate. This trust is the key, and this trust is achieved in a blockchain system by replicating the datastore on several hosts on the internet. For instance, as long as the peers accept that bit of data is valid, so you can completely trust that data that is stored on that system.&lt;/p&gt;

&lt;p&gt;In blockchain the trust is requisite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Immutability  — &lt;/strong&gt; Trust&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distribution  —&lt;/strong&gt;  valid/invalid&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-trust-issues-be-resolved-using-blockchain"&gt;
  &lt;/a&gt;
  How can Trust Issues be Resolved Using Blockchain?
&lt;/h2&gt;

&lt;p&gt;For many industries, trust is a problem. The automobile industry is one of those where trust, or lack of it, causes problems.&lt;/p&gt;

&lt;p&gt;People order used cars from other countries which do not easily share tracking information, and this can mean that faking data about the car’s provenance and history is easier.&lt;/p&gt;

&lt;p&gt;For instance, odometer fraud is one of the problems that can seriously impact the value of a vehicle. Representing a vehicle as having been used 5,000 miles instead of 50,000 miles can mean a huge difference in perceived value and potentially usable life span of the car or truck.&lt;/p&gt;

&lt;p&gt;In many countries, car service records are largely kept on paper which can, of course, be very easy to be fake.&lt;/p&gt;

&lt;p&gt;So, let’s imagine that pushing all service providers to a blockchain and all the readings kept on the Blockchain. The integrity and immutability of the blockchain data mean that a modification of the records would be detectable.&lt;/p&gt;

&lt;p&gt;Moreover, agencies such as insurance companies can also contribute by appending accident details of a car, giving a much more complete picture of the vehicle’s history in a way, which is very difficult or even impossible for dishonest vendors to fake.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-the-financial-industry-have-trust-issues-with-blockchain"&gt;
  &lt;/a&gt;
  Why Does the Financial Industry have Trust Issues with Blockchain?
&lt;/h2&gt;

&lt;p&gt;Transferring money from one country to another takes your time and can be expensive because of the need to comply with multiple different regulations and policies, but eventually, another person receives the money.&lt;/p&gt;

&lt;p&gt;Your bank updates its records and sends them to the main clearing bank in your country, where they are passed through a number of systems where it analyzes them to prevent money laundering and to comply with various trade embargoes. Assuming your transaction passes the checks, the funds are then sent to another country’s clearing bank.&lt;/p&gt;

&lt;p&gt;They again update the record and send it to the receiver’s bank account. Even in these highly automated times, it can take several days for the money to arrive in the destination account.&lt;/p&gt;

&lt;p&gt;This is where Bitcoin can offer an alternative to the traditional brick-and-mortar financial industry. All you need to do is to give recipients’ Bitcoin wallet addresses and use your computer system to send funds. There are no middle parties or long waiting times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-summarize-blockchain"&gt;
  &lt;/a&gt;
  To summarize Blockchain:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
The data store that keeps all blockchain data is called a &lt;strong&gt;ledger&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
Each record in the ledger is called a &lt;strong&gt;transaction&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
These transactions are timestamped and saved in &lt;strong&gt;groups of blocks&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
You &lt;strong&gt;can not&lt;/strong&gt; update or delete anything. It’s written once and then read-only.&lt;/li&gt;
&lt;li&gt;
The ledger is built to be &lt;strong&gt;immutable&lt;/strong&gt; using cryptographic algorithms.&lt;/li&gt;
&lt;li&gt;
And the main part is ledger is replicated by multiple nodes, which is why it is called &lt;strong&gt;Distributed Ledger Technology&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-does-blockchain-achieve-and-maintain-integrity"&gt;
  &lt;/a&gt;
  How Does Blockchain Achieve and Maintain Integrity?
&lt;/h2&gt;

&lt;p&gt;The system takes a huge data file and computes its unique “digest” using a hash function. Your system then sends that huge data file to your friend/receiving party along with its hashed value.&lt;/p&gt;

&lt;p&gt;The receiver recomputes the hash to ensure that the content of that file is not altered while in the transmission.&lt;/p&gt;

&lt;p&gt;Multiple standardized hash function implementations are utilized, such as SHA256, which produces a 256-bit hash value. It gives 2²⁵⁶ combinations.&lt;/p&gt;

&lt;p&gt;Furthermore, Blockchain utilizes Public Key cryptography which is a cryptographic system used for the encryption and decryption of data.&lt;/p&gt;

&lt;p&gt;You start by generating a special, related pair of keys — called a “public” and “private” key — based on a mathematical equation that uses two large prime numbers. Once encrypted, that can be decrypted if you have the required keys.&lt;/p&gt;

&lt;p&gt;The public key of both ends of the transmission is used to encrypt the data. At your end, your private key (which is not ever sent or made available to anyone else) is used in conjunction with the receiving party’s public key to encrypt the data.&lt;/p&gt;

&lt;p&gt;The receiving end uses your &lt;em&gt;public&lt;/em&gt; key and their &lt;em&gt;private&lt;/em&gt; key to decrypt the data. Combined with the hash value, transactions like this are incredibly secure.&lt;/p&gt;

&lt;p&gt;Public Key Cryptography is also utilized in communication to create a secure connection between hosts and for things like &lt;a href="https://blogs.embarcadero.com/do-all-your-windows-applications-look-like-a-computer-virus/?utm_source=Devto&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=EverythingYouNeedToKnowAboutBlockchain11082021&amp;amp;utm_campaign=EverythingYouNeedToKnowAboutBlockchain1108202"&gt;code signing&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-blockchains-data-structure"&gt;
  &lt;/a&gt;
  What is Blockchain’s Data Structure?
&lt;/h2&gt;

&lt;p&gt;In a blockchain system, data is stored in blocks of transactions. In effect is a huge timestamped log of transactions, which is replicated on multiple peers.&lt;/p&gt;

&lt;p&gt;For a blockchain network to be trusted and valid, most of the nodes have to be uncompromised. If 51 percent of the nodes are compromised, the network is hacked and has lost integrity. Note that the Blockchain expects things to go wrong on nodes, and yet it still remains reliable!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each block in a blockchain represents transactions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a user tries to add a block containing an incorrect hash value, the block will be rejected by multiple peers and hence will not be made part of the blockchain.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#where-can-i-learn-more-about-blockchain"&gt;
  &lt;/a&gt;
  Where Can I Learn More About Blockchain?
&lt;/h2&gt;

&lt;p&gt;You can find many interesting and useful articles related to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Blockchain API&lt;/li&gt;
&lt;li&gt;
Cryptography&lt;/li&gt;
&lt;li&gt;
Bitcoin&lt;/li&gt;
&lt;li&gt;
Delphi and Ethereum&lt;/li&gt;
&lt;li&gt;
Working with smart contracts&lt;/li&gt;
&lt;li&gt;
and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more articles about Blockchain and cryptocurrency, click on this dynamic search link: &lt;a href="https://blogs.embarcadero.com/do-all-your-windows-applications-look-like-a-computer-virus/?utm_source=Devto&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=EverythingYouNeedToKnowAboutBlockchain11082021&amp;amp;utm_campaign=EverythingYouNeedToKnowAboutBlockchain1108202"&gt;https://blogs.embarcadero.com/?s=blockchain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@fakurian?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Fakurian Design&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/blockchain?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Things to Consider before Choosing a CMS for your E-commerce Store</title>
      <author>Shada </author>
      <pubDate>Wed, 10 Nov 2021 11:42:06 +0000</pubDate>
      <link>https://dev.to/strapi/10-things-to-consider-before-choosing-a-cms-for-your-e-commerce-store-24na</link>
      <guid>https://dev.to/strapi/10-things-to-consider-before-choosing-a-cms-for-your-e-commerce-store-24na</guid>
      <description>&lt;p&gt;E-commerce stores have evolved in so many ways over the years and have indeed changed the way we shop and do business. Businesses now adopt e-commerce stores to reach more audiences and also automate their business and this has improved sales and customers. Setting up an online store, tracking sales, orders, and managing products can be challenging to handle. But, a Content Management System helps us to do all this.&lt;/p&gt;

&lt;p&gt;This article is to show you the factors to consider before choosing a particular CMS for your e-commerce store and why headless CMS is the best choice for your e-commerce store.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A Content Management System is a computer application that allows users to create, and change web content without the need for specialized technical knowledge.&lt;/p&gt;

&lt;p&gt;CMS thus in a layman's understanding is software that allows you to build a website without having to code the website from scratch. Also, you don’t even need to know how to code at all before you can use a CMS. CMS allows users to customize the design and functionality of their website by downloading or purchasing templates and plugins. Many users can also contribute and work together in the same CMS back-end at the same time. &lt;/p&gt;

&lt;p&gt;Over the last decade, CMS market growth has increased and according to Artem Minaev in his blog post-CMS market for First guide statistics, as of January 2021, more than &lt;a href="https://trends.builtwith.com/cms/traffic/Entire-Internet"&gt;64.9 million live websites&lt;/a&gt; are built with CMS. &lt;/p&gt;

&lt;p&gt;The challenging decision among users is picking or choosing the right CMS for their e-commerce store. To choose a particular CMS, it is thus pertinent to check off certain considerations before making that decision.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ecommerce-store-requirements"&gt;
  &lt;/a&gt;
  E-commerce store requirements
&lt;/h2&gt;

&lt;p&gt;Before setting out to build your e-commerce online store, there are certain requirements that one should note. Remember, not all businesses will need a Content Management System (CMS) to manage their website. Deciding to use a CMS for your e-commerce online store or not depends on some requirements or factors which include;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is your budget like?&lt;/li&gt;
&lt;li&gt;What is the time frame to build the e-commerce website?&lt;/li&gt;
&lt;li&gt;What features and plugins do you want in your e-commerce website?&lt;/li&gt;
&lt;li&gt;How will you be updating your website?&lt;/li&gt;
&lt;li&gt;Will you need a real-time update?&lt;/li&gt;
&lt;li&gt;What technical skills or knowledge do you have?&lt;/li&gt;
&lt;li&gt;Will your e-commerce store have a blog section for regular product releases?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#types-of-cms-available-for-your-ecommerce-store"&gt;
  &lt;/a&gt;
  Types of CMS available for your E-commerce Store
&lt;/h2&gt;

&lt;p&gt;The types of CMS available for your e-commerce store includes;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open-source CMS - This content management system is not owned or developed by a single company but maintained by its community of developers.&lt;/li&gt;
&lt;li&gt;Proprietary CMS - Proprietary Content Management System is owned, built, and managed by a single company. Using this CMS means you buy a license fee to use the software and also pay a monthly or annual charge for support and updates.&lt;/li&gt;
&lt;li&gt;Software as a Service( SaaS ) CMS - This is a Content Management System that is hosted in the cloud. The software vendor handles all maintenance and upgrades tasks for both the software and hardware and also clients don’t have to worry about scalability.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, CMS types can be classified into;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Headless CMS - Headless CMS makes content accessible via an API for display on any device, without a built-in front-end or presentation layer. Examples include Strapi, Sanity, Cockpit, Netlify CMS, etc.&lt;/li&gt;
&lt;li&gt;Monolithic/Traditional CMS - This CMS connects the front-end and the back-end of a website in a neat and easy application codebase. Examples include WordPress, Drupal, Wix, etc.&lt;/li&gt;
&lt;li&gt;Decoupled CMS - This CMS separates the back-end functionality of a website from the front-end HTML content. The back-end and front-end management are decoupled into two different systems: one for storage and content creation, and another system for consuming data and presenting it to the user through some interface.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This means that the different CMS types can either be headless, monolithic or decoupled. For instance, &lt;a href="https://strapi.io/"&gt;Strapi&lt;/a&gt; is an open-source headless CMS, WordPress is an open-source monolithic CMS, and Contentful is a proprietary headless CMS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-things-to-consider-before-choosing-a-cms-for-your-ecommerce-store"&gt;
  &lt;/a&gt;
  10 things to consider before choosing a CMS for your E-commerce store
&lt;/h2&gt;

&lt;p&gt;Using a CMS system is vital for numerous reasons and there are things to consider before deciding to choose a particular CMS. Before choosing a CMS, it is wise to check off certain criteria like;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt; -Security should be a top priority when choosing a CMS because if your website is hacked, you will lose your customers' trust. This means go for CMS that follows global security standards, and make your site secure by showing your secure HTTPS badge/SSL cert. Nobody will visit any site that is flagged to be insecure, not to talk of purchasing from the site. SSL(Secure  Socket Layers) helps to encrypt your website data and protect the data from hackers or intruders.&lt;br&gt;
You can also check if the CMS supports other security measure like firewall, a two-factor authentication, etc. These integrations will make your customers and visitors feel comfortable when they are purchasing from your store. &lt;br&gt;
Also, very important, make sure the CMS you are going for facilitates a secure and smooth checkout experience. This is because customers will only buy from your website when they are certain their debit card details are safe and secured and not exposed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt; - This is an important factor to consider before choosing a CMS. It is advisable to base your decision on your budget, requirements, and scale of the business. Also, check for hidden prices like maintenance, security update, etc. that would incur more money as you scale.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Email Marketing tools&lt;/strong&gt; - This is one of the most important and effective ways for a business to connect with customers. Sending individual promotion emails with an item related to their order history will maximize the chances of them buying that product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mobile-First ( Responsive Design )&lt;/strong&gt; - Most traffic comes from mobile devices as most people have a mobile device with which they access the internet. Your e-commerce store must be mobile friendly. So go for a CMS that offers this compatibility. This is a must rule because great user experience retains customers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Guest Checkout&lt;/strong&gt; - The checkout section is important for optimizing conversions and reducing cart abandonment. So you need to design a secure shopping page that will allow your customers to buy items. Customers value the option of having to buy items without having to register first. So your CMS should allow them to do this.&lt;br&gt;
Also, cross-selling should be in mind too. This is simply featuring related products of products in your cart on the same page. It helps to convince customers to add more items to their carts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Search Engine Optimization(SEO)&lt;/strong&gt; - Anna Fitzgerald stated in her blog post “&lt;a href="https://blog.hubspot.com/website/best-cms-for-seo"&gt;The Best Content Management Systems for SEO &amp;amp; Why&lt;/a&gt;”, that “64% of marketers actively invest in SEO, indicating that improving SEO and growing organic presence is important to their marketing strategy”. Even though you may not have enough technical knowledge or expertise, you still want your website to hit Google’s top 10 rankings. The wise move to achieve this is to research and choose a CMS with the best SEO. SEO is the science and art of getting websites or pieces of content to rank higher in search engines like Google and Bing. Search is almost the main way that people use to discover content online. So ranking higher in search engines can lead to an increase in traffic to your website. Thus, your CMS must be able to offer SEO to your website. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ease of Use&lt;/strong&gt; - Look for a CMS that is easy to use and has an intuitive interface. You should sign up, build, deploy, and manage your website without unnecessary stress. It should take little time to create and publish content on these platforms and should also take less time for your visitors to load pages and navigate through your website.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Popularity&lt;/strong&gt; - Popularity should be a significant factor when choosing a CMS. The popularity of a particular CMS means that many people have tried it, loved it, and are sticking their trust in it. It also means the CMS will have a large available community. A large community will definitely come in handy especially when you’re facing problems or what you’re trying to implement isn’t working out as you thought it would. The community assures you of a cloud of witnesses who have come across that same situation and will help you with a solution. Popularity also means the brand will ensure that its CMS is easy to use and has good customer satisfaction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customer Service Support&lt;/strong&gt; - These are the CMS representatives and staff that you can call in time of help. Some CMS offers 24/7 support and such services play a huge role when choosing a CMS. Always remember, you will run into problems along the way and so, having experts who you can call when it happens is very necessary. You will definitely lose customers, reputation, and money if you’re having an issue with your store and the customer service support is not answering you when you reach out to them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Core Functionality&lt;/strong&gt; - Always look for CMS that offer the core functionalities required for an e-commerce store. Remember, e-commerce websites are built to accommodate the needs and demands of your customers. &lt;br&gt;
Core functionalities here imply content tagging for indexing, product category organization, adding images and videos, adding and managing inventories, integrating communication between you and your customers, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Remember to always go for a CMS that meets your current needs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-headless-cms-is-the-best-cms-for-your-ecommerce-store"&gt;
  &lt;/a&gt;
  Why Headless CMS is the best CMS for your E-commerce store
&lt;/h2&gt;

&lt;p&gt;While traditional CMS has always been the standard or go-to, companies, however, are now looking for increased flexibility, customization, and scalability that headless CMS provides. Traditional CMSs put all content such as images, videos, text, etc. into a single system and its contents cannot be reused across different platforms. Headless CMSs solve this limitation.&lt;/p&gt;

&lt;p&gt;A Headless CMS or Headless Content Management System is a back-end-only CMS that means it separates the back-end from the front-end and only handles the back-end functionalities. It does not manage the front-end presentation layer and its contents are delivered through an API for seamless display across different platforms. &lt;/p&gt;

&lt;p&gt;Headless CMS makes content available and accessible through an API( REST or GraphQL API ) for display on any device, without a built-in presentation layer. Headless CMS makes it able to update content in your e-commerce store in one centralized location and then push the update to all platforms and channels involved, unlike in Traditional CMS where a copy of that content is managed across many channels. Strapi is a very good example of a headless CMS.&lt;/p&gt;

&lt;p&gt;Headless CMS works thus; it gives editors an interface for managing content and then provides that content via an API for developers to query and build applications with.&lt;/p&gt;

&lt;p&gt;Below are some reasons why Headless CMS is the best CMS to choose for your e-commerce store;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Enhanced Security - In Headless, users are not concerned about the presentation layer affecting the database since they are not connected. Headless eliminates direct interaction between the front-end and the back-end and only communicates through APIs. It also does not render the content they deliver. Instead, the contents are rendered by the client side JavaScript.&lt;br&gt;
Headless CMS allows for secure third-party integrations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scalability - Headless CMS makes it possible to upgrade and optimize your applications, customize your e-commerce store and even scale it across many channels quickly without any downtime during maintenance or compromising performance.&lt;br&gt;
Headless allows you to manage your content from a single source of truth and you can change developer tools at any time too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cheaper - Maintenance, repair cost and management is cheaper with a headless CMS. Although Headless CMS is more expensive to develop initially, it is cost-effective in the long run. This means that as you scale up, you can add more services, products, features, etc. to your site without having to rebuild from scratch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Performance - Headless CMS is much much more faster because it allows the back-end and front-end to function independently which means editors can edit the CMS contents without waiting for the developers to be done with the front-end.&lt;br&gt;
Also, any update or change made on the CMS will reflect on all channels of  front-ends that consume its data making it faster in performance speed unlike the traditional CMS where you have to copy an instance of the content to all channels.&lt;br&gt;
In traditional CMS like WordPress, every plugin runs through its code every time the user views a page. So the more the plugins, the less the performance. Unlike in Headless, where your website only has the code to run the front-end site and can easily be optimized for speed.&lt;br&gt;
&lt;a href="https://strapi.io/"&gt;Strapi&lt;/a&gt; is a good example. It is built with Node.js and installation is complete in less than two minutes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Omnichannel Content Delivery - This is an approach that seeks to provide customers with a seamless shopping experience, whether they’re shopping in your store from a desktop or mobile device. Headless CMS allows for this seamless experience across channels or devices. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Future Proof - Headless is compatible with the changing demands of the digital experience of e-commerce. In Headless, you can make changes in the future without compromising the functionality of your e-commerce store. Also, if there is any need for rebranding in the future, Headless will adapt making it future-proof.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More Flexible - Since the front-end is separated from the back-end, you’re not limited to a tech stack for your front-end. You choose whichever programming language you want to use for the front-end. &lt;br&gt;
Also, a single piece of content can be used across all channels making project build and completion faster. Headless CMS sets you free from limitations and legacy software thereby giving designers, developers space for creativity. Strapi is the most flexible open-source headless CMS and its relations feature makes it easy to create many relations using only the admin panel.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Choosing a CMS for your e-commerce store has its advantages and disadvantages, especially for non-developers seeking to build an online store for their business. A small budget, time frame, and technical knowledge might make you choose a CMS over building from scratch.&lt;br&gt;
However, if you’re choosing a CMS, headless should be at the back of your mind because it provides more advantages like scalability, future proof, security and so much more over the traditional CMS. You can visit &lt;a href="https://strapi.io/"&gt;Strapi&lt;/a&gt; to begin your headless CMS journey. They have a good documentation too.&lt;br&gt;
I hope this article helps to guide you when making your decision over what, when and how to choose a CMS.&lt;/p&gt;

</description>
      <category>ecommerce</category>
      <category>cms</category>
      <category>headlesscms</category>
    </item>
    <item>
      <title>Day 33 of 100 Days of Code &amp; Scrum: Skeleton Layout for My Hero Banner</title>
      <author>Rammina</author>
      <pubDate>Wed, 10 Nov 2021 11:17:22 +0000</pubDate>
      <link>https://dev.to/rammina/day-33-of-100-days-of-code-scrum-skeleton-layout-for-my-hero-banner-34pj</link>
      <guid>https://dev.to/rammina/day-33-of-100-days-of-code-scrum-skeleton-layout-for-my-hero-banner-34pj</guid>
      <description>&lt;p&gt;Greetings, everyone!&lt;/p&gt;

&lt;p&gt;Today, I got to spend a lot of time working on my website as well as learning Next.js. I was also deciding on the layout and using other web development agencies as a reference. Either way, it was just a relatively smooth day for me.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I just reviewed some Next.js and Scrum concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I coded the hero banner skeleton layout for my homepage.&lt;/li&gt;
&lt;li&gt;added a temporary hero banner message (most likely will replace later).&lt;/li&gt;
&lt;li&gt;still contemplating on what kind of design the hero banner will have (color scheme, image, CTAs).&lt;/li&gt;
&lt;li&gt;I decided I would just go for a single page MVP first, with everything on the homepage and then make other pages afterwards.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I did some practice flashcards for Scrum.&lt;/li&gt;
&lt;li&gt;reviewed some of the things I've learned before.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I managed to squeeze in a little bit of Typescript by reading the handbook.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a good day, everyone!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;The Typescript Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is The Serverless Edge?</title>
      <author>The Serverless Edge</author>
      <pubDate>Wed, 10 Nov 2021 11:10:16 +0000</pubDate>
      <link>https://dev.to/serverlessedge/what-is-the-serverless-edge-1cl7</link>
      <guid>https://dev.to/serverlessedge/what-is-the-serverless-edge-1cl7</guid>
      <description>&lt;p&gt;Originally published on &lt;a href="http://www.theserverlessedge.com"&gt;www.theserverlessedge.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reading Time: 4 minutes&lt;/p&gt;

&lt;p&gt;Serverless computing has become a term for how we build software. It is more than the compute; it is a mindset. A DataDog survey in 2020 stated that 50% of AWS users had serverless components, and container users are flocking to Lambda – one of the AWS Serverless Services. &lt;/p&gt;

&lt;p&gt;Many experts and leaders are still not convinced that Serverless will lead to the Future of Work and Emerging Technology. People don’t make the connection. What part does it play in the Future of Work and the 4th Industrial Revolution? We will explore this to help you learn in our blog content and case studies.&lt;/p&gt;

&lt;p&gt;We believe serverless is a gateway into many new ways of working – a technology-led, low friction, and high-value future. &lt;/p&gt;

&lt;p&gt;Why serverless?&lt;br&gt;
It represents the cutting edge of how we build business and web applications. Every business needs software, it needs it fast, and it must be cheap. Imagine if you could combine that with the ability to create a fast feedback flow and have an unlimited selection of tech to use? This is what Serverless means for business leaders. Unfortunately, the serverless term is quite technical and low-level. &lt;/p&gt;

&lt;p&gt;We want to change that. We want to support the leading edge of software development to create business capability and performance. No immense complexity security problems or large data centers. Just give it to me straight, quickly and don’t make me spend loads of money on code.&lt;/p&gt;

&lt;p&gt;Many think of Serverless as a new method of compute, which is incorrect. It is not comparable to containers. The first Serverless service in AWS was S3 – the Simple Storage Service. The definition of Serverless gets quite opinionated, so it’s explored further in this article by Ben Kehoe.&lt;/p&gt;

&lt;p&gt;How is it linked to the Future of work?&lt;br&gt;
Software is eating the World – a famous quote from Andersson in 2011. Digital is not just a channel; it’s a new mindset and will continue to redefine our workplaces into the ’20s and the ’30s. Unthinkable new business capability can be co-created with the Serverless mindset. This leads to different ways of working, collaboration patterns, the ability to reimagine work and reinvent how we deliver value to our customers. There are new business models that are generating millions of dollars, and textbooks cannot keep up.&lt;/p&gt;

&lt;p&gt;Scale down to scale up&lt;br&gt;
Technical Change for this future has already happened. Organizational change is still behind – people move slower than technology. This is fact and not criticism. The days of having 300 people in a massive programme of work are fading out. It’s wasteful (many people are in coordination roles) and slow. Imagine you could shrink down to a single, cross-functional team that included everyone required to create the vision, discover, decide, build and deliver? Serverless gives you the ability to develop software with minimal hand-offs, so you can scale down to scale up.&lt;/p&gt;

&lt;p&gt;Technology of tomorrow&lt;br&gt;
We are living in fascinating times. Artificial Intelligence has never been more accessible and powerful. We can achieve results now that we didn’t dream of a year ago. IoT and the sensor revolution expands weekly, touching every industry. Connectivity and networks invent every few years as standards evolve. Interfaces with computers created in the 1960s are finally starting to see a revolution. It has taken us around 50 years to get voice to a state that it feels natural. Quantum compute, capable of incredible speeds, is supposedly around the corner. What does this mind-boggling list have in common? Only ten years ago, if you wanted to bring in one of these capabilities into your business, the first step was to request and write a substantial cheque and wait several months. Today a student at college can integrate any of these technologies with her Serverless application in minutes, and the cost is minimal. &lt;/p&gt;

&lt;p&gt;Yes, you can use serverless to build a webpage and process payments for your business. You can also think of software as a series of events and start introducing exciting new technology into your business. An IoT use case? Need to process lots of data? Need a Voice Assistant? Need to connect many disparate systems? Serverless can make all of this a lot easier.&lt;/p&gt;

&lt;p&gt;The Serverless Edge&lt;br&gt;
The Serverless Edge title implies that we will keep on the leading edge of business. We will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;focus on business&lt;/li&gt;
&lt;li&gt;explain how the latest technology is evolving and join the 
dots for you&lt;/li&gt;
&lt;li&gt;make predictions about the Future of Work and how new 
technology will change the game, and&lt;/li&gt;
&lt;li&gt;comment on the ever-complex challenges of running efficient 
engineering functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Serverless brings all this together as it’s a mindset, a serverless edge mindset that encourages Simplicity, Speed, Innovation, Value and the Customer. We understand the details, but we are not going to focus on Functions, Cloud Configurations or Containers – these are critical, but other sites are more comprehensive. We will retain a Serverless mindset and focus on Business Value.&lt;/p&gt;

&lt;p&gt;The Serverless Edge will stay ahead and give you insights into the Serverless Mindset, the Future of Work for business and engineers and the impact of new technology. We will look at all of this through the lens of business value and (hopefully) use plain English.&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>devops</category>
      <category>aws</category>
      <category>leadership</category>
    </item>
    <item>
      <title>Benefits of Remote Teaching in Microsoft Office 365 Education</title>
      <author>Bruce Banner</author>
      <pubDate>Wed, 10 Nov 2021 11:07:46 +0000</pubDate>
      <link>https://dev.to/bruce_banner/benefits-of-remote-teaching-in-microsoft-office-365-education-3kbe</link>
      <guid>https://dev.to/bruce_banner/benefits-of-remote-teaching-in-microsoft-office-365-education-3kbe</guid>
      <description>&lt;p&gt;Cloud-Based Access and Storage&lt;br&gt;
&lt;a href="https://www.o365cloudexperts.com/office-365-education/"&gt;Microsoft 365 Education&lt;/a&gt; is a cloud-based app, stored and supported by Microsoft, which means that teachers and educational institutes don’t own it; they only subscribe to it. This feature makes it easier for students and educators to afford and scale up the app, if necessary. Cloud-storage makes it easier for both students and teachers to access their data from remote locations. They also get unlimited space for storing data, which means that educational institutes don’t have to worry about building an in-house storage server. Under normal circumstances, teachers and students store their data on flash drives to bring it to school, and if they lose the flash drive, they lose hours of hard work. Thanks to cloud storage, teachers and students don’t have to carry a flash drive from school to home or vice versa; they can easily access the stored data from anywhere they want. In times of distance learning and remote teaching, this feature is integral and helps students and educators to stay productive while quarantining in their homes. The data stored on the cloud is protected by advanced encryption, which ensures the safety of the stored data.&lt;/p&gt;

&lt;p&gt;Auto Updates&lt;br&gt;
Updating systems and programs is a technically challenging process that consumes a lot of time and requires a substantial amount of resources. This can be a problem for both students and educators working with a limited budget, and in remote learning, it can be even more challenging to bring everyone on the same page.&lt;/p&gt;

&lt;p&gt;Office 365 for education is looked after by Microsoft and is stored on the cloud, which means that it gets automatically updated for everyone. Both students and teachers can enjoy the latest technology without depending on the IT team for continuously updating the systems and solutions, which is a great aspect of using Office 365 Education for distance learning and remote teaching.&lt;/p&gt;

&lt;p&gt;Career Skills&lt;br&gt;
One of the main goals of education is to prepare students to smoothly transition from the classroom to the workforce, which requires baseline technology skills. Using Office 365 for education enables students to use training tools to learn these baseline technology skills, such as learning how to use teams for meetings, create powerful presentations using PowerPoint, etc. All these baseline technology skills help students to become attractive prospects in today’s competitive job market.&lt;/p&gt;

&lt;p&gt;Global Collaboration&lt;br&gt;
With Office 365 Education, teachers, and students get the opportunity to collaborate and comminute with their peers around the world. Using PowerPoint, Word, or Excel, teachers can share information with a school in a different country; for instance, they can create a guide based on their remote teaching experience and share it with teachers that are just beginning to teach remotely. Using SharePoint or Teams, they can enable real-time collaboration and distance learning.&lt;/p&gt;

&lt;p&gt;Free Services&lt;br&gt;
As mentioned earlier, the A1 plan of Office 365 Education is free for students and educators; this plan allows teachers and students to continue classes during the coronavirus lockdowns. Basic apps and services are part of the Office 365 Education; teachers and students also get unlimited storage after five subscribers, and they can scale the platform whenever they can if the A1 plan doesn’t meet their needs.&lt;/p&gt;

&lt;p&gt;Security and Data Control&lt;br&gt;
Another benefit of using Office 365 for education is that it has built-in security and data control, which helps teachers and students to keep their data safe. Microsoft monitors their server 24/7 for threats and uses anti-malware and anti-spam protection so people can be sure that their data won’t be compromised.&lt;/p&gt;

&lt;p&gt;Office 365 Education also enables teachers to organize educational material and set up data control features for the material. For instance, teachers are creating a test for the students using SharePoint, they can set up data control, or privacy features for the file, assigning read and write privileges to only the teachers responsible for creating the test.&lt;/p&gt;

&lt;p&gt;To know more about &lt;a href="https://www.o365cloudexperts.com/o365-education-a1-a3-a5-comparison/"&gt;Office 365 Education Plans&lt;/a&gt; or &lt;a href="https://www.o365cloudexperts.com/blog/how-to-migrate-from-godaddy-email-to-office-365"&gt;GoDaddy Office 365 Email&lt;/a&gt; visit O365CloudExperts.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Code owners and review in GitHub</title>
      <author>Vesin Dusko</author>
      <pubDate>Wed, 10 Nov 2021 11:07:11 +0000</pubDate>
      <link>https://dev.to/vesindusko/code-owners-and-review-in-github-31lk</link>
      <guid>https://dev.to/vesindusko/code-owners-and-review-in-github-31lk</guid>
      <description>&lt;p&gt;Code review is one of the standards for good code quality and knowledge sharing inside teams. During my carrier, I have seen a lot of different setups, and some of them are better than others.&lt;/p&gt;

&lt;p&gt;We are using GithHub PRs as a moment for quality control. It allows us to establish rules when a code from a working branch can be merged with the development branch. &lt;/p&gt;

&lt;p&gt;One of the basic rules is code review. All PRs have this type of protection. At least one member of the architect team should give its approval and at least two other developers. &lt;/p&gt;

&lt;p&gt;The other gate is that at least one of the code owners of changed files should also do a code review. The concept of code owners is not a well-known functionality of GitHub, but we found it very powerful and valuable. &lt;/p&gt;

&lt;p&gt;Details about this functionality you can find on &lt;a href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners"&gt;GitHub&lt;/a&gt; and examples you can see at &lt;a href="https://github.com/alchemycloud/todo/blob/master/CODEOWNERS"&gt;todo example&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Y3R34nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnagfauhb3gvrema7r11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Y3R34nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnagfauhb3gvrema7r11.png" alt="Example" width="704" height="288"&gt;&lt;/a&gt;&lt;br&gt;
No alt text provided for this image&lt;br&gt;
The good thing about code owners is that any file or folder in the code can have different owners or GitHub groups, and by it, you can make sure that the right people have done code reviews.&lt;/p&gt;

&lt;p&gt;Also, in the case of the larger PRs, the reviewer can adjust the filter to see only files you are responsible for, speeding up the review process.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fbtDm8FE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x7n4z1m9x9lve0ybauq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fbtDm8FE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x7n4z1m9x9lve0ybauq.png" alt="Filter" width="616" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>codereview</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Select HTML Elements in CSS using attributes</title>
      <author>Elijah Trillionz</author>
      <pubDate>Wed, 10 Nov 2021 11:06:36 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/select-html-elements-in-css-using-attributes-jhb</link>
      <guid>https://dev.to/elijahtrillionz/select-html-elements-in-css-using-attributes-jhb</guid>
      <description>&lt;p&gt;Hey friends. Let's take a look at an awesome feature in CSS.&lt;/p&gt;

&lt;p&gt;In this article, we will select HTML elements in CSS using the element's attributes. For example&lt;/p&gt;

&lt;p&gt;You can select and style all &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags with a secured URL (https), you can select and style all &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tags that are passwords only, and so much more.&lt;/p&gt;

&lt;p&gt;The syntax is simple to learn and easy to master. Follow along.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h2&gt;

&lt;p&gt;Let's say I have a list of links, and in this list, I want to specify a different color for links that are not secured.&lt;/p&gt;

&lt;p&gt;Traditionally assigning classes to each unsecured list will come to mind.&lt;/p&gt;

&lt;p&gt;But this can be full of bugs especially if it's a long list. Worst case scenario it is a WordPress site and styling unsecured links will have to be done dynamically.&lt;/p&gt;

&lt;p&gt;So instead of classes, this is what will help&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s2"&gt;'http://'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, I have selected all &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements that have their URLs starting with http://. Now we can apply any style.&lt;/p&gt;

&lt;p&gt;Cool right?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The square brackets are the &lt;strong&gt;syntax of selecting attributes in CSS&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The "href" represents the attribute you want to select.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The caret (^) is the operator, there are others (I will list them below); the caret simply means "starts with"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And of course the value ("http://")&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the syntax &lt;code&gt;element[attr operator="value"]&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-more-examples"&gt;
  &lt;/a&gt;
  Some more examples
&lt;/h3&gt;

&lt;p&gt;Selecting all elements with titles that begin with "sam"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;"sam"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means&lt;br&gt;
&lt;code&gt;&amp;lt;p title="samandsong"&amp;gt;Hello sam&amp;lt;/p&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;h2 title="samama"&amp;gt;Hey Sam&amp;lt;/h2&amp;gt;&lt;/code&gt; will be blue.&lt;/p&gt;

&lt;p&gt;The example above can be rewritten as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;"sam"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you know the syntax let's see the most used of the operators&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#operators"&gt;
  &lt;/a&gt;
  Operators
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#no-operator"&gt;
  &lt;/a&gt;
  no operator
&lt;/h3&gt;

&lt;p&gt;When no operator is specified it selects all elements with matching attributes and values. For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;input[type="password"]&lt;/code&gt; means select only input elements with a type (attribute) of password&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asterisk-"&gt;
  &lt;/a&gt;
  asterisk (*)
&lt;/h3&gt;

&lt;p&gt;We use this operator to select all elements whose attributes contain at least one occurrence of the specified value. For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;input[type*="e"]&lt;/code&gt; will select &lt;strong&gt;all&lt;/strong&gt; input elements with a value of "e" as its type.&lt;/p&gt;

&lt;p&gt;This means email, text but not password will be selected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caret-"&gt;
  &lt;/a&gt;
  caret (^)
&lt;/h3&gt;

&lt;p&gt;With this operator, we can select all elements whose attributes' values begin with the specified value. For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a[href^="http://"]&lt;/code&gt; will select &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements that has its "href" attribute start with "http://"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dollar-"&gt;
  &lt;/a&gt;
  dollar ($)
&lt;/h3&gt;

&lt;p&gt;We use this operator to select all elements whose attributes` values end with the specified value. For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a[href^=".org"]&lt;/code&gt; will select &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements that has its "href" attribute end with ".org"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tilde-"&gt;
  &lt;/a&gt;
  tilde (~)
&lt;/h3&gt;

&lt;p&gt;With this operator, we can select all elements whose white-space separated attributes' values contain the specified value. For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[title~="mark"]&lt;/code&gt; will select all elements that have a "title" of "mark".&lt;/p&gt;

&lt;p&gt;For this operator to work, the values of the attributes should be white-space separated.&lt;/p&gt;

&lt;p&gt;If "mark" is joined with another value or word, it will not be selected for example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;p title="mark-clean-sheet"&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt; will not be selected, rather &lt;code&gt;&amp;lt;p title="mark clean-sheet"&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt; will be selected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caseinsensitive"&gt;
  &lt;/a&gt;
  Case-insensitive
&lt;/h3&gt;

&lt;p&gt;Sometimes attribute values casing can vary. And these selectors in CSS are case-sensitive.&lt;/p&gt;

&lt;p&gt;To make it case-insensitive add an "i" before the closing bracket i.e &lt;code&gt;[title*="mark" i]&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There is one more operator that is used for matching language subcode. It is rarely used, but you should check it out on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors"&gt;MDN&lt;/a&gt;. It can come in handy anytime.&lt;/p&gt;

&lt;p&gt;This article is from one of my threads on Twitter. You can &lt;a href="https://twitter.com/elijahtrillionz"&gt;follow me&lt;/a&gt; there to get a daily digest on web development.&lt;/p&gt;

&lt;p&gt;Hope you learned something, if you did, shoot me a comment to let me know. If you think I did something wrong, please also let me know in the comments.&lt;/p&gt;

&lt;p&gt;Happy styling.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>CSS Flexbox: A Complete Guide with Examples</title>
      <author>Creative Tim</author>
      <pubDate>Wed, 10 Nov 2021 11:06:23 +0000</pubDate>
      <link>https://dev.to/creativetim_official/css-flexbox-a-complete-guide-with-examples-3m17</link>
      <guid>https://dev.to/creativetim_official/css-flexbox-a-complete-guide-with-examples-3m17</guid>
      <description>&lt;p&gt;In this article, we will cover what Flexbox is, a few applications where flexbox is used, how to get started with flexbox, and what properties are available to use.  In case that you don't know exactly how the content in your webpage is going to look at the end, but you want to have a clean project where all the items are fitted perfectly, learn that flexbox is the ideal layout system that you would want to use. We hope that this article will come in handy to realize beautiful projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-is-flexbox"&gt;
  &lt;/a&gt;
  1. What is Flexbox?
&lt;/h2&gt;

&lt;p&gt;The Flexible Box Module, generally referred to as Flexbox, was introduced in 2009 as a new way to organize elements easily and to design responsive web pages. In the following years, it gained so much popularity that today is used as the main layout system for most web pages. In order to have this module applied to your project, you will have to create a main container and use the &lt;code&gt;display: flex&lt;/code&gt; property on it.&lt;/p&gt;

&lt;p&gt;Flexbox layout is appreciated because it allows building designs based on two axes: the main axis and the cross axis. This feature gives the container the power to dynamically set the width/height of its items in order to fill all the available space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Flexbox 'works'&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZphTxGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/How-flexbox--works-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZphTxGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/How-flexbox--works-.png" alt="how flexbox works" width="691" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;main axis – This axis is the primary one. The flex items are displayed along the main axis.&lt;/li&gt;
&lt;li&gt;main-start | main-end – The flex items will be displayed from the 'main-start' to the 'main-end'.&lt;/li&gt;
&lt;li&gt;cross axis – This axis is perpendicular to the main axis.&lt;/li&gt;
&lt;li&gt;cross-start | cross-end – The flex items inside a container will fill the flex lines starting from the 'cross-start' and heading to the 'cross-end'.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#supported-browsers"&gt;
  &lt;/a&gt;
  Supported browsers
&lt;/h3&gt;

&lt;p&gt;If you want to check on which browsers and versions Flexbox is supported, you can have a look at &lt;a href="https://caniuse.com/?search=flexbox"&gt;&lt;/a&gt;&lt;a href="https://caniuse.com/?search=flexbox"&gt;https://caniuse.com/?search=flexbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BhULwuzQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/supported_browsers_flexbox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BhULwuzQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/supported_browsers_flexbox.png" alt="supported browers for flexbox" width="880" height="204"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-flexbox-applications"&gt;
  &lt;/a&gt;
  2. Flexbox Applications
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#bootstrap"&gt;
  &lt;/a&gt;
  Bootstrap
&lt;/h3&gt;

&lt;p&gt;This open-source front-end toolkit helps you design and customize responsive web pages using Sass variables and mixings, a responsive grid system, and more. The pre-build full suite of responsive flexbox utilities gives you the power to manage the layout, alignment, sizing of grid columns, and many others, making Bootstrap one of the most popular CSS frameworks.&lt;/p&gt;

&lt;p&gt;If you want to create complex and innovative designs, check our latest Premium Bootstrap 5 UI Kit: &lt;a href="https://www.creative-tim.com/product/soft-ui-design-system-pro"&gt;https://www.creative-tim.com/product/soft-ui-design-system-pro&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tailwindcss"&gt;
  &lt;/a&gt;
  Tailwindcss
&lt;/h3&gt;

&lt;p&gt;This utility-first CSS framework based on Flexbox helps you to build any design directly in your markup. Its biggest advantage is that you can rapidly create modern websites without leaving your HTML code. It’s also easy to customize and adapt to any design.&lt;/p&gt;

&lt;p&gt;If you need a components library for tailwind css, you can check the below product: &lt;a href="https://www.creative-tim.com/product/notus-pro-react"&gt;https://www.creative-tim.com/product/notus-pro-react&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bulma"&gt;
  &lt;/a&gt;
  Bulma
&lt;/h3&gt;

&lt;p&gt;This open-source CSS framework is built with Sass, and it’s based on Flexbox. Among its advantages is that it’s available for free and be used to build 100% responsive web pages. It’s also fully modular, which allows you to import only what you need from the 29 SASS files that you can import individually.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-get-started-with-flexbox"&gt;
  &lt;/a&gt;
  3. Get started with Flexbox
&lt;/h2&gt;

&lt;p&gt;In the next section, we will show you how to use Flexbox by presenting its properties and the most commonly used values for them, structured into categories. Firstly, we will cover the properties that apply to the parent (container), and then we will move on to the ones applying to the children (items).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#31-parent-properties-container"&gt;
  &lt;/a&gt;
  3.1. Parent properties (container)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;display&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to get started with Flexbox, first, you will need to set the container's display property to flex.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;display: flex;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSPyTffD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/display_flex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSPyTffD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/display_flex.png" alt="set container’s display property to flex" width="880" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    display: flex;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    display: inline-flex;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;flex-direction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property allows you to decide on the main axis direction in your container. By default, the main axis is from left to right.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-direction: row-reverse;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OS-pV5nV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/flex-direction_row-reverse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OS-pV5nV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/flex-direction_row-reverse.png" alt="flex-direction" width="880" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    flex-direction: row | row-reverse | column | column-reverse;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;row (default): left to right&lt;/li&gt;
&lt;li&gt;row-reverse: right to left&lt;/li&gt;
&lt;li&gt;column: top to bottom&lt;/li&gt;
&lt;li&gt;column-reverse: bottom to top&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;justify-content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Determines how the actual element (content) is distributed across the main axis.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: flex-end;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6aWV_o9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/justify-content_flex-end.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6aWV_o9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/justify-content_flex-end.png" alt="justify-content" width="880" height="165"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;flex-start (default): items are moved toward the start of the main axis&lt;/li&gt;
&lt;li&gt;flex-end: items are moved toward the end of the main axis&lt;/li&gt;
&lt;li&gt;center: items are centered along the main axis&lt;/li&gt;
&lt;li&gt;space-between: items are evenly distributed along the main axis, with the mention that the first and the last items are pushed to the extremities of the main axis&lt;/li&gt;
&lt;li&gt;space-around: items are evenly distributed along the main axis, with the mention that all the items have equal space on both sides, which will visually create unequal space between the items&lt;/li&gt;
&lt;li&gt;space-evenly: items are evenly distributed along the main axis, with the mention that all the spaces will be equal (including the spaces from the extremities to the item)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;flex-wrap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It determines whether your items are going to wrap along the main axis onto a new line if it's horizontal or a new column if it's a vertical main axis.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-wrap: nowrap;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eu27a6NC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/flex-wrap_default.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eu27a6NC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/flex-wrap_default.png" alt="flex-wrap" width="880" height="180"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-wrap: wrap;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NkxAunkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/flex-wrap_wrap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NkxAunkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/flex-wrap_wrap.png" alt="flex-wrap property example" width="880" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    flex-wrap: nowrap | wrap | wrap-reverse; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;nowrap (default): all items will be on one line&lt;/li&gt;
&lt;li&gt;wrap: items will wrap onto multiple lines, from top to bottom&lt;/li&gt;
&lt;li&gt;wrap-reverse: items will wrap onto multiple lines from bottom to top&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;align-items&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property is going to distribute the items along the cross axis.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-items: flex-start;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUrdcFBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/align-items_flex-start.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUrdcFBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/align-items_flex-start.png" alt="align-items" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-items: flex-end;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tBQyLJ7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/align-items_flex-end.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tBQyLJ7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/align-items_flex-end.png" alt="align-items property example" width="880" height="233"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    align-items: stretch | flex-start | flex-end | center | baseline;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;stretch (default): items are stretched to fill the container&lt;/li&gt;
&lt;li&gt;flex-start: items are placed at the start of the cross axis&lt;/li&gt;
&lt;li&gt;flex-end: items are placed at the end of the cross axis&lt;/li&gt;
&lt;li&gt;center: items are centered in the cross-axis&lt;/li&gt;
&lt;li&gt;baseline: items are aligned such as their baselines align&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;align-content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Used to control or distribute space along the cross axis, but only when you have multiple rows or columns.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-content: center;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FjzlV0rD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/align-content_center.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjzlV0rD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/align-content_center.png" alt="align-content center" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    align-content: flex-start | flex-end | center | space-between | space-around | space-evenly;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;flex-start: items are pushed to the start of the container&lt;/li&gt;
&lt;li&gt;flex-end: items are pushed to the end of the container&lt;/li&gt;
&lt;li&gt;center: items are centered in the container&lt;/li&gt;
&lt;li&gt;space-between: items are evenly distributed; the first line is at the start of the container while the last one is at the end&lt;/li&gt;
&lt;li&gt;space-around: items are evenly distributed with equal space around each line&lt;/li&gt;
&lt;li&gt;space-evenly: elements are evenly distributed with equal space around them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;gap, row-gap, column-gap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property allows you to control the space between flex items. Please note that it applies only to the space &lt;strong&gt;between items&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gap: 25px;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rsDKobXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/control-the-space-between-flex-items.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rsDKobXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/control-the-space-between-flex-items.png" alt="property example" width="880" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    gap: 25px; /* both row-gap and column-gap */
    gap: 25px 50px; /* both row-gap and column-gap */
    row-gap: 25px;
    column-gap: 50x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#32-children-properties-items-inside-a-container"&gt;
  &lt;/a&gt;
  3.2. Children Properties (items inside a container)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;order&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property allows you to change the order of the items displayed inside a container. The default value for each item is '0'.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.item {
    order: 5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;flex-grow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As the name suggests, this property will make the item grow to fill the container's free space. The default value for each item is '0'.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.item {
    flex-grow: 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;flex-shrink&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is similar to the previous property with the difference that the item will shrink, not grow, in order to fit the container's space. The default value for each item is '1'.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.item {
    flex-shrink: 3;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;flex-basis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property will allow you to set the initial size of an item. The default value is 'auto'.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.item { 
    flex-basis: content;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;flex&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is actually a shorthand property for: flex-grow, flex-shrink and flex-basis. The default value is '0 1 auto'.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.item {
    flex: 0 1 100px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;align-self&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property allows you to override the alignment of an item even if the 'align-items' property is used.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.item {
    align-self: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We know that creating responsive designs and accomodating UI in different screen sizes can be a real struggle, so we hope you will find this article useful for your future projects. Flexbox can ease up your work for creating beautiful designs by manipulating the elements' width, height, and order. The process of creating the layouts for your websites will be a ‘piece of cake’ if you learn to take advantage of all the benefits that Flexbox can offer.&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>NgRx Tips I Needed in the Beginning</title>
      <author>Marko Stanimirović</author>
      <pubDate>Wed, 10 Nov 2021 10:51:06 +0000</pubDate>
      <link>https://dev.to/this-is-angular/ngrx-tips-i-needed-in-the-beginning-4hno</link>
      <guid>https://dev.to/this-is-angular/ngrx-tips-i-needed-in-the-beginning-4hno</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/photos/c1Jp-fo53U8"&gt;Léonard Cotte&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article contains a list of tips and best practices for using the &lt;code&gt;@ngrx/store&lt;/code&gt; and &lt;code&gt;@ngrx/effects&lt;/code&gt; libraries. The list is based on the usual NgRx mistakes I've seen many times (some of which I've made myself) and on the great talks and articles that you can find in the &lt;a href="#resources"&gt;resources&lt;/a&gt; section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#store-tips"&gt;Store Tips&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#put-global-state-in-a-single-place"&gt;Put global state in a single place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-put-the-local-state-in-the-global-store"&gt;Don't put the local state in the global store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-selectors-for-the-derived-state"&gt;Use selectors for the derived state&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-view-model-selectors"&gt;Use view model selectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#treat-actions-as-unique-events"&gt;Treat actions as unique events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#group-actions-by-source"&gt;Group actions by source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-dispatch-actions-conditionally"&gt;Don't dispatch actions conditionally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-reusable-reducers"&gt;Create reusable reducers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#be-careful-with-facades"&gt;Be careful with facades&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#effects-tips"&gt;Effects Tips&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#name-effects-like-functions"&gt;Name effects like functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keep-effects-simple"&gt;Keep effects simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-create-boiler-effects"&gt;Don't create "boiler" effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#apply-single-responsibility-principle"&gt;Apply single responsibility principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#apply-good-action-hygiene"&gt;Apply good action hygiene&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#peer-reviewers"&gt;Peer Reviewers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#store-tips"&gt;
  &lt;/a&gt;
  Store Tips
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#put-global-state-in-a-single-place"&gt;
  &lt;/a&gt;
  Put global state in a single place
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Try to keep a global state of your application in a single place - NgRx store.&lt;/strong&gt; Having state spread across multiple stateful services makes an application harder to maintain. It also frequently leads to these services "re-storing" a derived state, which makes it harder to understand where the actual source of truth for a specific data lives.&lt;/p&gt;

&lt;p&gt;However, if you are in the process of migrating your application to NgRx, then it's fine to keep legacy stateful services as a temporary solution.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dont-put-the-local-state-in-the-global-store"&gt;
  &lt;/a&gt;
  Don't put the local state in the global store
&lt;/h3&gt;

&lt;p&gt;The local state is tied to the lifecycle of a particular component. It is initialized and managed during the component lifetime and cleaned up when the component is destroyed.&lt;/p&gt;

&lt;p&gt;It's completely fine to store the local state in the component and manage it imperatively. However, if you're already using a reactive global state management solution such as NgRx store, then consider using a reactive solution for the local state management such as &lt;code&gt;@ngrx/component-store&lt;/code&gt;. It has many powerful features and fits perfectly with the global NgRx store.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#use-selectors-for-derived-state"&gt;
  &lt;/a&gt;
  Use selectors for derived state
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Don't put the derived state in the store, use selectors instead.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's first see the reducer that manages the state with the derived value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;musiciansReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// `filteredMusicians` is derived from `musicians` and `query`&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredMusicians&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;filteredMusicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of &lt;code&gt;filteredMusicians&lt;/code&gt; is derived from the &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;musicians&lt;/code&gt; array. If you decide to keep the derived value in the store, then you should update it every time one of the values from which it is derived changes. The state will be larger, the reducer will contain additional logic, and you can easily forget to add filtering logic in another reducer that updates &lt;code&gt;query&lt;/code&gt; or &lt;code&gt;musicians&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The right way to handle the derived state is via selectors.&lt;/strong&gt; The selector that returns filtered musicians will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectFilteredMusicians&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;selectAllMusicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;selectMusicianQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;musiciansReducer&lt;/code&gt; will now be much simpler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;musiciansReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#use-view-model-selectors"&gt;
  &lt;/a&gt;
  Use view model selectors
&lt;/h3&gt;

&lt;p&gt;View model selector combines other selectors to return all state chunks required for a particular view. It's a great way to make a container component cleaner by having a single selector per container. Besides that, view model selectors provide additional benefits.&lt;/p&gt;

&lt;p&gt;Let's first see what the container component will look like without the view model selector:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// the value of each Observable is unwrapped via `async` pipe&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;musician-search [query]="query$ | async"&amp;gt;&amp;lt;/musician-search&amp;gt;

    &amp;lt;musician-list
      [musicians]="musicians$ | async"
      [activeMusician]="activeMusician$ | async"
    &amp;gt;&amp;lt;/musician-list&amp;gt;

    &amp;lt;musician-details
      [musician]="activeMusician$ | async"
    &amp;gt;&amp;lt;/musician-details&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MusiciansComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// select all state chunks required for the musicians container&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;musicians$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectFilteredMusicians&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;query$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusiciansQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;activeMusician$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectActiveMusician&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are several drawbacks of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The size of the container component increases with the number of required state chunks.&lt;/li&gt;
&lt;li&gt;Testing is harder - there can be many selectors to mock.&lt;/li&gt;
&lt;li&gt;There are multiple subscriptions in the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's now create a view model selector for this container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectMusiciansPageViewModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;selectFilteredMusicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;selectMusiciansQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;selectActiveMusician&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;activeMusician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;activeMusician&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the container now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// single subscription in the template via `async` pipe&lt;/span&gt;
  &lt;span class="c1"&gt;// access to the view model properties via `vm` alias&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;ng-container *ngIf="vm$ | async as vm"&amp;gt;
      &amp;lt;musician-search [query]="vm.query"&amp;gt;&amp;lt;/musician-search&amp;gt;

      &amp;lt;musician-list
        [musicians]="vm.musicians"
        [activeMusician]="vm.activeMusician"
      &amp;gt;&amp;lt;/musician-list&amp;gt;

      &amp;lt;musician-details
        [musician]="vm.activeMusician"
      &amp;gt;&amp;lt;/musician-details&amp;gt;
    &amp;lt;/ng-container&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MusiciansComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// select the view model&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;vm$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusiciansPageViewModel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The component is now smaller and easier for testing. Also, there is a single subscription in the template.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#treat-actions-as-unique-events"&gt;
  &lt;/a&gt;
  Treat actions as unique events
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Treat NgRx actions as unique events, not as commands, and don't reuse them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Commands can be fine for simple and isolated features. However, they can lead to dirty code and imply performance issues for complex functionalities that consume multiple feature states. Let's now walk through the example, to understand the importance of treating actions as unique events (a.k.a. good action hygiene).&lt;/p&gt;

&lt;p&gt;There is a straightforward NgRx flow for pages that display a list of entities:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dispatch the action to load the entity collection on component initialization.&lt;/li&gt;
&lt;li&gt;Listen to this action in effect, load entities from the API, and return new action with loaded entities as a payload.&lt;/li&gt;
&lt;li&gt;Create a case reducer that will listen to the action returned from the effect and add loaded entities to the state.&lt;/li&gt;
&lt;li&gt;Finally, select entities from the store and display them in the template:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SongsComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// select songs from the store&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;songs$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectSongs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// dispatch the `loadSongs` action on component initialization&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs] Load Songs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this works fine. There is no need to change anything at first. However, what if we want to load another collection that is needed for a particular container component. In this example, imagine that we want to show the composer for each loaded song. If we treat actions as commands, then the &lt;code&gt;ngOnInit&lt;/code&gt; method of &lt;code&gt;SongsComponent&lt;/code&gt; will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs] Load Songs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Composers] Load Composers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we come to another very important rule: &lt;strong&gt;Don't dispatch multiple actions sequentially.&lt;/strong&gt; Sequentially dispatched actions can lead to unexpected intermediate states and cause unnecessary event loop cycles.&lt;/p&gt;

&lt;p&gt;It would be much better to dispatch single action indicating that the user has opened the songs page, and listen to that action in both &lt;code&gt;loadSongs$&lt;/code&gt; and &lt;code&gt;loadComposers$&lt;/code&gt; effects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs Page] Opened&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"Songs Page" is the source of this action (it's dispatched from the songs page) and "Opened" is the name of the event (the songs page is opened).&lt;/p&gt;

&lt;p&gt;This brings us to a new rule: &lt;strong&gt;Be consistent in naming actions, use "[Source] Event" pattern.&lt;/strong&gt; Also, be descriptive in naming actions. It could help a lot in application maintenance, especially for catching bugs.&lt;/p&gt;

&lt;p&gt;If we check the Redux DevTools for this example when actions are treated as unique events, we'll see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Login Page] Login Form Submitted
[Auth API] User Logged in Successfully
[Songs Page] Opened
[Songs API] Songs Loaded Successfully
[Composers API] Composers Loaded Successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we see a list of well-described actions, we can easily conclude what happened in our application:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The user submitted a login form.&lt;/li&gt;
&lt;li&gt;Auth API responded that the login was successful.&lt;/li&gt;
&lt;li&gt;The user opened the songs page.&lt;/li&gt;
&lt;li&gt;Songs successfully loaded from the Song API.&lt;/li&gt;
&lt;li&gt;Composers successfully loaded from the Composers API.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unfortunately, this is not the case with commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Auth] Login
[Auth] Login Success
[Songs] Load Songs
[Composers] Load Composers
[Songs] Load Songs Success
[Composers] Load Composers Success
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commands can be dispatched from multiple places, so we can't figure out what their source is.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#group-actions-by-source"&gt;
  &lt;/a&gt;
  Group actions by source
&lt;/h3&gt;

&lt;p&gt;We saw in the previous example that one action can cause changes in multiple feature states. Therefore, do not group actions by feature state, but group them by source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create action file per source.&lt;/strong&gt; Here are some examples of action files grouped by source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// songs-page.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opened&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs Page] Opened&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchSongs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs Page] Search Songs Button Clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addComposer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs Page] Add Composer Form Submitted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;composer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Composer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// songs-api.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songsLoadedSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs API] Songs Loaded Successfully&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Song&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songsLoadedFailure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs API] Failed to Load Songs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// composers-api.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composerAddedSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Composers API] Composer Added Successfully&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;composer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Composer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composerAddedFailure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Composers API] Failed to Add Composer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// composer-exists-guard.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canActivate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Composer Exists Guard] Can Activate Entered&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;composerId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#dont-dispatch-actions-conditionally"&gt;
  &lt;/a&gt;
  Don't dispatch actions conditionally
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Don't dispatch actions conditionally based on the state value.&lt;/strong&gt; Move the condition to the effect or reducer instead. This tip also relates to good action hygiene.&lt;/p&gt;

&lt;p&gt;Let's first look at the case when an action is dispatched based on the state value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SongsComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectSongs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// if the songs are not loaded&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// then dispatch the `loadSongs` action&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadSongs&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, the &lt;code&gt;loadSongs&lt;/code&gt; action is dispatched if the songs have not already been loaded. However, there is a better way to achieve the same result but to keep the component clean. We can move this condition to the effect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadSongsIfNotLoaded$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// when the songs page is opened&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// then select songs from the store&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectSongs&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="c1"&gt;// and check if the songs are loaded&lt;/span&gt;
    &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// if not, load songs from the API&lt;/span&gt;
    &lt;span class="nx"&gt;exhaustMap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSongs&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsLoadedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, the component will look much cleaner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SongsComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#create-reusable-reducers"&gt;
  &lt;/a&gt;
  Create reusable reducers
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Use a single case reducer when multiple actions trigger the same state change:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composersReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// case reducer can listen to multiple actions&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;composerExistsGuardActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;composersPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if any of these actions require a different state change, don't add additional logic to the existing case reducer as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composersReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;composerExistsGuardActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;composersPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// `composerExistsGuardActions.canActivate` action requires&lt;/span&gt;
      &lt;span class="c1"&gt;// different state change&lt;/span&gt;
      &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;composerExistsGuardActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composerId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, create a new case reducer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composersReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;composersPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="c1"&gt;// `composerExistsGuardActions.canActivate` action is moved&lt;/span&gt;
  &lt;span class="c1"&gt;// to a new case reducer&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;composerExistsGuardActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;composerId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;composerId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#be-careful-with-facades"&gt;
  &lt;/a&gt;
  Be careful with facades
&lt;/h3&gt;

&lt;p&gt;I used facades as NgRx store wrappers before, but I stopped, and here are several reasons why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the Redux pattern is not your cup of tea and you have a need to wrap it in services, then you should take a look at service-based state management solutions such as Akita or NGXS (or use &lt;code&gt;@ngrx/component-store&lt;/code&gt; for the global state as well).&lt;/li&gt;
&lt;li&gt;Using facades doesn't make much sense when view model selectors are used and when good action hygiene is applied. You will have an extra layer for testing and maintenance, without any benefit.&lt;/li&gt;
&lt;li&gt;Without strict rules in the coding guide, facades leave plenty of space for abuse (e.g. performing side effects).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, if a container component has a local state but also uses a global state, then consider using the ComponentStore as a dedicated facade for that container. In that case, ComponentStore will manage the local state, but will also select global state slices and/or dispatch actions to the global store.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#effects-tips"&gt;
  &lt;/a&gt;
  Effects Tips
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#name-effects-like-functions"&gt;
  &lt;/a&gt;
  Name effects like functions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Name the effects based on what they are doing, not based on the action they are listening to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we name the effect based on the action it listens to, it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the name of the effect is the same as the action it listens to&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;addComposerSuccess$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;composersApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composerAddedSuccess&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Composer saved successfully!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are at least two drawbacks of this approach. The first is that we cannot conclude what this effect does based on its name. The second is that it is not in accordance with open-closed principle - if we want to trigger the same effect for another action, we should change its name. However, if we name this effect as a function (&lt;code&gt;showSaveComposerSuccessAlert&lt;/code&gt;), the previously mentioned drawbacks will be solved.&lt;/p&gt;

&lt;p&gt;For example, if we want to display the same success alert when the composer is successfully updated, we only need to pass the &lt;code&gt;composerUpdatedSuccess&lt;/code&gt; action to the &lt;code&gt;ofType&lt;/code&gt; operator, without having to change the effect name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the effect name describes what the effect does&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;showSaveComposerSuccessAlert$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;composersApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composerAddedSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// new action is added here&lt;/span&gt;
        &lt;span class="c1"&gt;// the rest of the effect remains the same&lt;/span&gt;
        &lt;span class="nx"&gt;composersApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composerUpdatedSuccess&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Composer saved successfully!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#keep-effects-simple"&gt;
  &lt;/a&gt;
  Keep effects simple
&lt;/h3&gt;

&lt;p&gt;There are cases when we need to invoke multiple API calls to perform a side effect, or when the format of API response is not appropriate, so we need to restructure it. However, putting all that logic into the NgRx effect can lead to very unreadable code.&lt;/p&gt;

&lt;p&gt;Here is an example of an effect that requires two API calls to get all the necessary data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadMusician$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// when the musician details page is opened&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianDetailsPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// then select musician id from the route&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusicianIdFromRoute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// and load musician from the API&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansResource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// wait for musician to load&lt;/span&gt;
        &lt;span class="nx"&gt;mergeMap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// then load band from the API&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bandsResource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bandId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="c1"&gt;// append band name to the musician&lt;/span&gt;
            &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;band&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bandName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;band&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="c1"&gt;// if the musician is successfully loaded&lt;/span&gt;
        &lt;span class="c1"&gt;// then return success action and pass musician as a payload&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;musiciansApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicianLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;musician&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="c1"&gt;// if an error occurs, then return error action&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicianLoadedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is large and unreadable effect, even with comments. However, we can move API calls to the service and make the effect more readable. The service method for getting the musician will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MusiciansService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getMusician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Musician&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansResource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;mergeMap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bandsResource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bandId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;band&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bandName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;band&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be used from the &lt;code&gt;loadMusician$&lt;/code&gt; effect, but also from other parts of the application. The &lt;code&gt;loadMusician$&lt;/code&gt; effect now looks much more readable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadMusician$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianDetailsPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusicianIdFromRoute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// API calls are moved to the `getMusician` method&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;musiciansApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicianLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;musician&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicianLoadedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're working with legacy APIs, you're probably having trouble with an API that doesn't return responses in the format your application needs, so you need to convert them. Apply the same principle described above: move the API call along with the mapping logic to the service method and use it from the effect.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dont-create-boiler-effects"&gt;
  &lt;/a&gt;
  Don't create "boiler" effects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Don't create effects that map multiple related actions into a single action:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this effect returns the `loadMusicians` action&lt;/span&gt;
&lt;span class="c1"&gt;// when current page or page size is changed&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;invokeLoadMusicians$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeCurrentPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changePageSize&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;musiciansActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadMusicians&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// this effect loads musicians from the API&lt;/span&gt;
&lt;span class="c1"&gt;// when the `loadMusicians` action is dispatched&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadMusicians$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansAction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadMusicians&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusiciansPagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusicians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt; 
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because the &lt;code&gt;ofType&lt;/code&gt; operator can accept a sequence of actions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadMusicians$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// `ofType` accepts a sequence of actions&lt;/span&gt;
    &lt;span class="c1"&gt;// and there is no need for "boiler" effects (and actions)&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeCurrentPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changePageSize&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusiciansPagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusicians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt; 
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#apply-single-responsibility-principle"&gt;
  &lt;/a&gt;
  Apply single responsibility principle
&lt;/h3&gt;

&lt;p&gt;In other words, &lt;strong&gt;don't perform multiple side effects within a single NgRx effect.&lt;/strong&gt; Effects with single responsibility are more readable and easier to maintain.&lt;/p&gt;

&lt;p&gt;Let's first see the NgRx effect that preforms two side effects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;deleteSong$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSong&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;songId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// side effect 1: delete the song&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songDeletedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songId&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// side effect 2: display an error alert in case of failure&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songDeletedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we apply the single responsibility principle, we'll have two NgRx effects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// effect 1: delete the song&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;deleteSong$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSong&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;songId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songDeletedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songId&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songDeletedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// effect 2: show an error alert&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;showErrorAlert$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSongFailure&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is another advantage: &lt;strong&gt;Effects with single responsibility are reusable.&lt;/strong&gt; We can use the &lt;code&gt;showErrorAlert$&lt;/code&gt; effect for any action that requires an error alert to be shown.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#apply-good-action-hygiene"&gt;
  &lt;/a&gt;
  Apply good action hygiene
&lt;/h3&gt;

&lt;p&gt;The same principles described for actions that are dispatched via store should be applied to the effects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't return an array of actions (commands) from the effect.&lt;/li&gt;
&lt;li&gt;Return an unique action that can be handled by multiple reducers and/or effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's first see an example where multiple actions are returned from the effect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadAlbum$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumsActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadCurrentAlbum&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectAlbumIdFromRoute&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;albumId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAlbum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// an array of actions is returned on successful load&lt;/span&gt;
        &lt;span class="c1"&gt;// then, `loadSongsSuccess` is handled by `songsReducer`&lt;/span&gt;
        &lt;span class="c1"&gt;// and `loadComposersSuccess` is handled by `composersReducer`&lt;/span&gt;
        &lt;span class="nx"&gt;mergeMap&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="nx"&gt;songsActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadSongsSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
          &lt;span class="nx"&gt;composersActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadComposersSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have seen similar effects many times. This happens when actions are treated as commands. You can see the drawbacks of this approach in the &lt;a href="#treat-actions-as-unique-events"&gt;Treat actions as unique events&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;However, if we apply good action hygiene, the &lt;code&gt;loadAlbum$&lt;/code&gt; effect will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadAlbum$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// when the album details page is opened&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumDetailsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// then select album id from the route&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectAlbumIdFromRoute&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;albumId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// and load current album from the API&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAlbum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// return unique action when album is loaded successfully&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;albumsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, the &lt;code&gt;albumLoadedSuccess&lt;/code&gt; action can be handled by the reducer(s) and/or other effects. In this example, it will be handled by &lt;code&gt;songsReducer&lt;/code&gt; and &lt;code&gt;composersReducer&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// songs.reducer.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songsReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// composers.reducer.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composersReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;composers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;NgRx provides the ability to implement the same functionality in many different ways. However, some of the ways have emerged over time as best practices and you should consider applying them in your project to increase code quality, performance, and maintainability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/JmnsEvoy-gY"&gt;Good Action Hygiene with NgRx&lt;/a&gt; by Mike Ryan&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/v5WSUE1_YHM?t=129"&gt;Rethinking State in Angular Applications&lt;/a&gt; by Alex Okrushko&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/RXuSDiLmcN0"&gt;Building Sub States with NgRx Selectors&lt;/a&gt; by Brandon Roberts&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://brandonroberts.dev/blog/posts/2020-12-14-maximizing-simplifying-component-views-ngrx-selectors"&gt;Maximizing and Simplifying Component Views with NgRx Selectors&lt;/a&gt; by Brandon Roberts&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://timdeschryver.dev/blog/solving-angular-slow-renders-with-ngrx-selectors"&gt;Solving Angular Slow Renders with NgRx Selectors&lt;/a&gt; by Tim Deschryver&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://timdeschryver.dev/blog/start-using-ngrx-effects-for-this"&gt;Start Using NgRx Effects for This&lt;/a&gt; by Tim Deschryver&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#peer-reviewers"&gt;
  &lt;/a&gt;
  Peer Reviewers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AlexOkrushko"&gt;Alex Okrushko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tim_deschryver"&gt;Tim Deschryver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/brandontroberts"&gt;Brandon Roberts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Big thanks to my teammates Brandon, Tim, and Alex for giving me helpful suggestions on this article!&lt;/p&gt;

</description>
      <category>angular</category>
      <category>ngrx</category>
      <category>rxjs</category>
      <category>redux</category>
    </item>
  </channel>
</rss>
