<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learning Svelte Part #4</title>
      <author>Alessandro</author>
      <pubDate>Sun, 14 Nov 2021 18:44:14 +0000</pubDate>
      <link>https://dev.to/alessandrogiuzio/learning-svelte-part-4-155m</link>
      <guid>https://dev.to/alessandrogiuzio/learning-svelte-part-4-155m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#props-and-components"&gt;
  &lt;/a&gt;
  Props and Components
&lt;/h2&gt;

&lt;p&gt;Hello developers, welcome back to my series of articles about my journey to learn Svelte, this is my 4th post about it, and so far it’s very helpful for my learning, writing down my steps make it public make a good contribution to my knowledge.&lt;/p&gt;

&lt;p&gt;Today I am writing about Props and Components.&lt;/p&gt;

&lt;p&gt;Normally, a Svelte website is made with of many different components: App.svelte, Header.svelte, Content.svelte, Footer.svelte and so on. &lt;br&gt;
All this components will be structured to make up the full page, the root component it’s the App.svelte, this component will be directly deployed in the Dom by the main.JS file.&lt;/p&gt;

&lt;p&gt;We will nest all the others components with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SEmQ9LYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikujhpxpf5hked6f6dnm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEmQ9LYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikujhpxpf5hked6f6dnm.png" alt="Svelte components structure" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The question is: why we need to split our webapp in so many different pieces and not write all the code in the App.svelte root component?&lt;br&gt;
The main reason is to keep your code easy to read, tidy and modular.&lt;br&gt;
 Imagine we put everything in one module, the chances that our code will be disorganized are very high.&lt;/p&gt;

&lt;p&gt;Another reason to split in different modules is that with this method we can easily reuse it, we can create components to use whenever we need.&lt;/p&gt;

&lt;p&gt;We can easily import our components in the App.svelte  using the syntax import&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--73Q98L25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5je3lsnog2qy3xmc0cmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--73Q98L25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5je3lsnog2qy3xmc0cmf.png" alt="Script hero" width="595" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And then we will display it in our  HTML like in the follow example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPWzi8Iq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyzubw0y8283hlo6bq6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPWzi8Iq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyzubw0y8283hlo6bq6n.png" alt="hero" width="634" height="101"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to change any data in the reused component, we can do that, using props.&lt;/p&gt;

&lt;p&gt;How can we pass props to a component?&lt;/p&gt;

&lt;p&gt;We need to declare the props we want to pass in, in the component itself, we can call it how we like it and we need to set it to a value that ca be: a string, an object, could be an integer. When the components it’s created it will read the props and the value&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4pSxXvJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5mxcy99yy3w8iu77c2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pSxXvJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5mxcy99yy3w8iu77c2r.png" alt="properties " width="632" height="102"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To access the prop inside the Footer component we need to declare that we are going to use that variable called “prop” (you can name it how you like most) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kM1MnkAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsbtde7r3rf66x2xwp4y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kM1MnkAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsbtde7r3rf66x2xwp4y.png" alt="Image description" width="633" height="255"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We declare the variable “prop”,  and set to “export” , so now this way we can access the value outside the component.&lt;/p&gt;

&lt;p&gt;That’s it for my contribution today, it’s difficult for me write in English but I will keep going, please feel free to leave a comment and roast my explanation.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>LeetCode - Symmetric tree</title>
      <author>Alkesh Ghorpade</author>
      <pubDate>Sun, 14 Nov 2021 18:28:30 +0000</pubDate>
      <link>https://dev.to/_alkesh26/leetcode-symmetric-tree-35kf</link>
      <guid>https://dev.to/_alkesh26/leetcode-symmetric-tree-35kf</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem statement
&lt;/h3&gt;

&lt;p&gt;Given the &lt;em&gt;root&lt;/em&gt; of a binary tree, &lt;em&gt;check whether it is a mirror of itself&lt;/em&gt; (i.e., symmetric around its center).&lt;/p&gt;

&lt;p&gt;Problem statement taken from: &lt;a href="https://leetcode.com/problems/symmetric-tree"&gt;&lt;/a&gt;&lt;a href="https://leetcode.com/problems/symmetric-tree"&gt;https://leetcode.com/problems/symmetric-tree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BUMplDQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alkeshghorpade.me/symmetric-tree1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BUMplDQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alkeshghorpade.me/symmetric-tree1.png" alt="Container" width="354" height="291"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = [1, 2, 2, 3, 4, 4, 3]
Output: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rgE4OcW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alkeshghorpade.me/symmetric-tree2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgE4OcW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alkeshghorpade.me/symmetric-tree2.png" alt="Container" width="308" height="258"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = [1, 2, 2, null, 3, null, 3]
Output: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Constraints&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- The number of nodes in the tree is in the range [1, 1000].
- -100 &amp;lt;= Node.val &amp;lt;= 100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#recursive-function"&gt;
  &lt;/a&gt;
  Recursive function
&lt;/h4&gt;

&lt;p&gt;When it comes to solving problems related to trees, recursion is the best choice. If not recursion, the iterative approach will use queues.&lt;/p&gt;

&lt;p&gt;Let's explore a simple recursive approach in this blog. The approach is to use two pointers as arguments that points&lt;br&gt;
to the root of the tree. The first pointer will move left and second will move right and verify if the nodes are same or not.&lt;/p&gt;

&lt;p&gt;Let's check the algorithm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// main function
- call recursive function areSymmetric(root, root)

// areSymmetric function(root1, root2)
- if !root1 &amp;amp;&amp;amp; !root2
  - return true
- else
  - if root1 &amp;amp;&amp;amp; root2
    - if root1-&amp;gt;val == root2-&amp;gt;val
      - return areSymmetric(root1-&amp;gt;left, root2-&amp;gt;right) &amp;amp;&amp;amp; areSymmetric(root1-&amp;gt;right, root2-&amp;gt;left)

- return false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#c-solution"&gt;
  &lt;/a&gt;
  C++ solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#golang-solution"&gt;
  &lt;/a&gt;
  Golang solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Val&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;isSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#javascript-solution"&gt;
  &lt;/a&gt;
  Javascript solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;areSymmetric&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isSymmetric&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dry-run our algorithm to see how the solution works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = [1, 2, 2, 3, 4, 4, 3]

// in main function
Step 1: return areSymmetric(root, root)

// in areSymmetric function
Step 2: if !root1 &amp;amp;&amp;amp; !root2
          - root1 != nil
            1 != nil
            true

          - root2 != nil
            1 != nil
            true

          - !true &amp;amp;&amp;amp; !true
          - false

        else
          if root1 &amp;amp;&amp;amp; root2
            - 1 &amp;amp;&amp;amp; 1
            - true

            if root1-&amp;gt;val == root2-&amp;gt;val
               - 1 == 1
               - true

               return areSymmetric(root1-&amp;gt;left, root2-&amp;gt;right) &amp;amp;&amp;amp; areSymmetric(root1-&amp;gt;right &amp;amp;&amp;amp; root2-&amp;gt;left)
               return areSymmetric(2, 2) &amp;amp;&amp;amp; areSymmetric(2, 2)

               // we will ignore the 2nd condition here, since both are same.
               // In actual recursive call it will be evaluated.

Step 3: if !root1 &amp;amp;&amp;amp; !root2
          - root1 != nil
            2 != nil
            true

          - root2 != nil
            2 != nil
            true

          - !true &amp;amp;&amp;amp; !true
          - false

        else
          if root1 &amp;amp;&amp;amp; root2
            - 2 &amp;amp;&amp;amp; 2
            - true

            if root1-&amp;gt;val == root2-&amp;gt;val
               - 2 == 2
               - true

            return areSymmetric(root1-&amp;gt;left, root2-&amp;gt;right) &amp;amp;&amp;amp; areSymmetric(root1-&amp;gt;right &amp;amp;&amp;amp; root2-&amp;gt;left)
            return areSymmetric(3, 3) &amp;amp;&amp;amp; areSymmetric(4, 4)

// areSymmetric(3, 3)
Step 4: if !root1 &amp;amp;&amp;amp; !root2
          - root1 != nil
            3 != nil
            true

          - root2 != nil
            3 != nil
            true

          - !true &amp;amp;&amp;amp; !true
          - false

        else
          if root1 &amp;amp;&amp;amp; root2
            - 3 &amp;amp;&amp;amp; 3
            - true

            if root1-&amp;gt;val == root2-&amp;gt;val
               - 3 == 3
               - true

            return areSymmetric(root1-&amp;gt;left, root2-&amp;gt;right) &amp;amp;&amp;amp; areSymmetric(root1-&amp;gt;right &amp;amp;&amp;amp; root2-&amp;gt;left)
            return areSymmetric(nil, nil) &amp;amp;&amp;amp; areSymmetric(nil, nil)

// areSymmetric(nil, nil)
Step 5: if !root1 &amp;amp;&amp;amp; !root2
          - root1 != nil
            nil != nil
            false

          - root2 != nil
            nil != nil
            false

          - !false &amp;amp;&amp;amp; !false
          - true

// areSymmetric(4, 4)
Step 6: if !root1 &amp;amp;&amp;amp; !root2
          - root1 != nil
            4 != nil
            true

          - root2 != nil
            4 != nil
            true

          - !true &amp;amp;&amp;amp; !true
          - false

        else
          if root1 &amp;amp;&amp;amp; root2
            - 4 &amp;amp;&amp;amp; 4
            - true

            if root1-&amp;gt;val == root2-&amp;gt;val
               - 4 == 4
               - true

            return areSymmetric(root1-&amp;gt;left, root2-&amp;gt;right) &amp;amp;&amp;amp; areSymmetric(root1-&amp;gt;right &amp;amp;&amp;amp; root2-&amp;gt;left)
            return areSymmetric(nil, nil) &amp;amp;&amp;amp; areSymmetric(nil, nil)

            // areSymmetric(nil, nil) returns true
            // so we move back from step 6 to step 5 till step 2 and evaluate

            return areSymmetric(root1-&amp;gt;left, root2-&amp;gt;right) &amp;amp;&amp;amp; areSymmetric(root1-&amp;gt;right &amp;amp;&amp;amp; root2-&amp;gt;left)

            // which is true

So the answer we return is true.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>leetcode</category>
      <category>cpp</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Writing tests for CLI tool</title>
      <author>Emily</author>
      <pubDate>Sun, 14 Nov 2021 18:27:00 +0000</pubDate>
      <link>https://dev.to/hphan9/writing-tests-for-cli-tool-3p6b</link>
      <guid>https://dev.to/hphan9/writing-tests-for-cli-tool-3p6b</guid>
      <description>&lt;p&gt;This week, I was working on writing tests for my Shinny-SSG project. It was the most challenging lab in the OSD600 course since I had to modify both my code and my project's folder structure to implement the tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Set-up
&lt;/h2&gt;

&lt;p&gt;The testing framework that I chose is &lt;a href="https://xunit.net/"&gt;XUnit&lt;/a&gt;. The first reason is that it is trendy compared to another test framework such as NUnits. I created test method stubs from the existing code by &lt;a href="https://docs.microsoft.com/en-us/visualstudio/test/create-unit-tests-menu?view=vs-2022"&gt;Create Unit Tests&lt;/a&gt; command. To use it with Xunit, I have to implement the XUnit.net.TestGenerator extension to my project. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PVfbgY50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hx3nbipf2axkmrpzmeh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVfbgY50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hx3nbipf2axkmrpzmeh4.png" alt="Image description" width="880" height="365"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges
&lt;/h2&gt;

&lt;p&gt;I want to test how my tools generated files and folders in the destination with different arguments passed to the program. However, in my old code, I put all the logic of working with arguments in the &lt;code&gt;static int main( string[] args)&lt;/code&gt; function. I could not use Interface and Dependency injection to mock the CommandLineApplication because CommandLineUtils does not have an interface for this class. Luckily, I found this &lt;a href="https://github.com/natemcmaster/CommandLineUtils/issues/279"&gt;guidance&lt;/a&gt; from the owner of CommandLineUtils, and he advised that "Split the command-line argument parser and application execution into separate class structures" to test various options programmatically. It is a great suggestion, and I rewrote my program by adding class &lt;a href="https://github.com/hphan9/shinny-ssg/blob/main/shinny-ssg/src/CommandLineOptions.cs"&gt;CommandLineOptions&lt;/a&gt; and adding logic to the constructor of class Generator. I can kill two birds with one stone by this change: code refactoring and writing better tests.&lt;br&gt;&lt;br&gt;
Another problem I had was my folder structure. Before, I put the project's sln file, .git file , and src files in the root of the folder. However, when I added a new test project for Shinny-SSG, I had it outside my git folder, and it would be impossible to commit the change and put it in my remote repository. To resolve that, I had to change my folder structure to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;C:.
├───shinny-ssg
│   ├───bin
│   │   ├───Debug
│   │   │   └───netcoreapp3.1
│   │   │       ├───dist
│   │   │       └───publish
│   │   ├───Destination
│   │   └───Release
│   │       └───netcoreapp3.1
│   ├───obj
│   │   ├───Debug
│   │   │   └───netcoreapp3.1
│   │   └───Release
│   │       └───netcoreapp3.1
│   ├───Properties
│   └───src
└───shinny-ssgTests
    ├───bin
    │   └───Debug
    │       ├───.netcoreapp,version&lt;span class="o"&gt;=&lt;/span&gt;v3.1  
    │       └───netcoreapp3.1
    ├───obj
    │   └───Debug
    │       ├───.netcoreapp,version&lt;span class="o"&gt;=&lt;/span&gt;v3.1
    │       └───netcoreapp3.1
    └───src
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;I wrote 3 test for Generator class &lt;code&gt;run()&lt;/code&gt; function that cover 3 different cases: config file option, input path option and invalid input path option. My tests help uncovering a huge bug in my application. Before, I thought that &lt;code&gt;default&lt;/code&gt; keyword was used to specified the default value of a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt; &lt;span class="n"&gt;cssUrl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cssOption&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HasValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;cssOption&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, the &lt;code&gt;default&lt;/code&gt; literal is for producing the default value of a type that is null in this case ( CssUrl is the &lt;code&gt;string&lt;/code&gt; type).&lt;br&gt;
I also wrote a test that testes the core feature of my application: Given a text and checked if the generated HTML value matched the expected output.&lt;br&gt;
&lt;a href="https://github.com/hphan9/shinny-ssg/commit/23c766a759bc52f1889d78c578da2b29cbb0a248#diff-765ec9ae5392385dc6cb44e7fb9af38ebf78e87a463546cfd86d7d42590341e3"&gt;Pull request&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Throughout this experience, I learn a lot about software testing and why it is essential for software development. In the future, I will implement more tests for my project and explore other test frameworks. &lt;/p&gt;

</description>
      <category>cshap</category>
      <category>testing</category>
      <category>opensource</category>
    </item>
    <item>
      <title>.Net Core vs NodeJS (Resumen)</title>
      <author>Ariel Calix</author>
      <pubDate>Sun, 14 Nov 2021 18:19:01 +0000</pubDate>
      <link>https://dev.to/arielcalix/net-core-vs-nodejs-resumen-275h</link>
      <guid>https://dev.to/arielcalix/net-core-vs-nodejs-resumen-275h</guid>
      <description>&lt;p&gt;Hola Amigos y bienvenidos a este vs entre dos tecnologías, en esta ocasion haremos un resumen de los que hemos venido Hablando.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-o-net-core"&gt;
  &lt;/a&gt;
  ¿NodeJS o .Net Core?
&lt;/h2&gt;

&lt;p&gt;Como lo hemos dicho anteriormente, hablar de cada una y confrontarlas no es que queramos hacerte usar una o la otra, por el contrario, que tengas un panorama más amplio sobre cada una y los proyectos que pueden realizar en cada uno para que así completes el proyecto sin problemas, cada una tiene sus bondades para un proyecto en específico que la otra no posea y viceversa, queda a tu elección cual usar. Solamente ten en cuenta que para el lado web, tanto a nivel de cliente como servidor NodeJS es bastante rapido lo que lo hace un gran candidato y ganador es ese ambito, mientras que en proyectos transaccionales .Net Core se lleva el premio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ventajas"&gt;
  &lt;/a&gt;
  Ventajas
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;.Net Core&lt;/th&gt;
&lt;th&gt;NodeJS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Es Multiplataforma&lt;/td&gt;
&lt;td&gt;Es multiplataforma&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sistema de almacenamiento en cache confiable&lt;/td&gt;
&lt;td&gt;Base de Código única y potente&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Implementacion y mantenimiento flexible y sencillo&lt;/td&gt;
&lt;td&gt;Escalabilidad e implementación seguras&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#desventajas"&gt;
  &lt;/a&gt;
  Desventajas
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;.Net Core&lt;/th&gt;
&lt;th&gt;NodeJS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Soporte relacional de objetos limitado&lt;/td&gt;
&lt;td&gt;Bloqueo de E/S&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;La brecha entre el lanzamiento y la estabilidad&lt;/td&gt;
&lt;td&gt;Estandarización de librerias.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#tipos-de-proyectos"&gt;
  &lt;/a&gt;
  Tipos de Proyectos
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;.Net Core&lt;/th&gt;
&lt;th&gt;NodeJS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Web, mismas que pueden ser desplegadas en Windows, Linux o Mac OS&lt;/td&gt;
&lt;td&gt;Aplicaciones de chat en tiempo real&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Aplicaciones con Docker, en cualquiera de las nubes ya sea (Azure, AWS o GCP)&lt;/td&gt;
&lt;td&gt;Aplicaciones web&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Aplicaciones de Escritorio UWP lo que permite que tus apps sean ejecutadas en Windows 10, XBOX y HoloLens&lt;/td&gt;
&lt;td&gt;Servicios de API Rest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IoT&lt;/td&gt;
&lt;td&gt;IoT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IA&lt;/td&gt;
&lt;td&gt;Streaming de datos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Desarrollo de juegos&lt;/td&gt;
&lt;td&gt;Aplicaciones complejas de una sola Página&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;En resumen, cada una de ellas está en continuo desarrollo para el soporte de distintos proyectos y arquitecturas, queda de tí implementarlos de la mejor forma.&lt;/p&gt;

&lt;p&gt;Me despedido, y espero les agrade este vs, espero sus comentarios.&lt;/p&gt;

&lt;p&gt;Imagen por &lt;a href="https://unsplash.com/@m4r1vs?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Marius Niveri&lt;/a&gt; en &lt;a href="https://unsplash.com/@m4r1vs?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>netcore</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to deploy any Python Web Application?</title>
      <author>Abhijith Ganesh</author>
      <pubDate>Sun, 14 Nov 2021 18:17:01 +0000</pubDate>
      <link>https://dev.to/abhijithganesh/how-to-deploy-any-python-web-application-1707</link>
      <guid>https://dev.to/abhijithganesh/how-to-deploy-any-python-web-application-1707</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey everyone👨‍💻&lt;/em&gt;&lt;br&gt;
In this blog post I will explain how you can deploy any &lt;em&gt;ASGI/WSGI compliant Python Web App.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Only ASGI Compliant Frameworks can be deployed using this method, other frameworks can't be deployed.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#list-of-tools-i-will-be-using"&gt;
  &lt;/a&gt;
  List of Tools I will be using:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NGINX&lt;/li&gt;
&lt;li&gt;Hypercorn&lt;/li&gt;
&lt;li&gt;FastAPI&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#now-here-there-are-alternatives-to-hypercorn-and-fastapi"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Now here, there are alternatives to Hypercorn and FastAPI&lt;/strong&gt;
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#alternatives-to-hypercorn"&gt;
  &lt;/a&gt;
  Alternatives to Hypercorn:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Gunicorn&lt;/li&gt;
&lt;li&gt;Uvicorn&lt;/li&gt;
&lt;li&gt;Daphne&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#other-frameworks-that-can-be-deployed"&gt;
  &lt;/a&gt;
  Other Frameworks that can be deployed:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Starlette&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Any ASGI/WSGI compliant framework&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-one"&gt;
  &lt;/a&gt;
  Step One:
&lt;/h3&gt;

&lt;p&gt;Setup your framework using the docs mentioned.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//docs.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I'll be using FastAPI, my &lt;code&gt;main.py&lt;/code&gt; looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🚀 We now have a FastAPI app ready, we now have to deploy it using &lt;em&gt;NGINX&lt;/em&gt;. ⚙️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-two"&gt;
  &lt;/a&gt;
  Step Two:
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Depending upon your framework and choice of ASGI/WSGI Server, this process will be slightly different.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;For Django Devs:&lt;/u&gt; &lt;/p&gt;

&lt;p&gt;Your wsgi/asgi application would be called as &lt;code&gt;&amp;lt;application_name&amp;gt;.&amp;lt;a/w&amp;gt;sgi:application&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Choose ASGI or WSGI clearly and stay with that option throughout&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt; For Flask Devs:&lt;/u&gt; &lt;/p&gt;

&lt;p&gt;If your app is in main.py, it would be called as &lt;code&gt;main:app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this step we'll be binding the web-server to UNIX socket. Learn more about UNIX Sockets. &lt;a href="https://www.ibm.com/docs/en/ztpf/1.1.0.15?topic=considerations-unix-domain-sockets"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am attaching the docs of Daphne, Uvicorn and Gunicorn down which use different flags to bind the application to a port.&lt;/p&gt;

&lt;p&gt;Run this command to bind it to the socket&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;hypercorn &lt;span class="nt"&gt;-b&lt;/span&gt; &lt;span class="s1"&gt;'unix:/var/tmp/hypercorn.sock'&lt;/span&gt; &lt;span class="nt"&gt;-w&lt;/span&gt; 4 main:app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this &lt;code&gt;-w&lt;/code&gt; defines the number of workers.&lt;br&gt;
Change &lt;code&gt;hypercorn.sock&lt;/code&gt; to the server which you choose to use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change the socket name according to your web server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;🎇 Now we have our app listening on the &lt;code&gt;hypercorn.sock&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-three"&gt;
  &lt;/a&gt;
  Step Three:
&lt;/h3&gt;

&lt;p&gt;We've to proxy this socket to &lt;em&gt;NGINX&lt;/em&gt; and route &lt;em&gt;NGINX&lt;/em&gt; to listen to the &lt;code&gt;hypercorn&lt;/code&gt; socket.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;worker_processes&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;worker_connections&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="n"&gt;/var/log/nginx/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;error_log&lt;/span&gt; &lt;span class="n"&gt;/var/log/error.log&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://unix:/var/tmp/hypercorn.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll briefly explain this config file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Worker_processes =&amp;gt; 1 worker process has been assigned for this specific task/process&lt;/li&gt;
&lt;li&gt;Worker connections =&amp;gt; Number of connections that can be handled by 1 process&lt;/li&gt;
&lt;li&gt;Listen =&amp;gt; Listens at the mentioned port&lt;/li&gt;
&lt;li&gt;Server Name =&amp;gt; Listens at this domain&lt;/li&gt;
&lt;li&gt;Access_log =&amp;gt; The file location at which access log is stored, access log stores requests made&lt;/li&gt;
&lt;li&gt;Error_log =&amp;gt; The file location at which error log is stored.&lt;/li&gt;
&lt;li&gt;Proxy Pass =&amp;gt; The socket/port which needs to be proxied.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;This file should change based on your socket but the other configuration can be the same.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;🚅 Save this file as nginx.conf&lt;/p&gt;

&lt;p&gt;Feel free to read about &lt;em&gt;NGINX&lt;/em&gt; &lt;a href="https://nginx.org/en/docs/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this file is made, save it at &lt;code&gt;/etc/nginx/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Either you can use docker to run a Linux server or shell into an instance.&lt;/p&gt;

&lt;p&gt;If you want to copy it to docker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; nginx.conf /etc/nginx/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💣 You are ready to launch except one last step&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-four"&gt;
  &lt;/a&gt;
  Step four
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You have now wonderfully setup your web-server and the NGINX proxy 🙌&lt;/li&gt;
&lt;li&gt;You are just one-step away from accessing the port, and perhaps this is the ✅ or ❌ step&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, NGINX can't read or write from the socket, so we need to &lt;code&gt;change access mode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To do this, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chmod &lt;/span&gt;777 /var/tmp/&amp;lt;socket&amp;gt; 
&lt;span class="nb"&gt;sudo &lt;/span&gt;service nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🌟Now you can listen from the port 8080, &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you are using systemctl, please use this command instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Play around with NGINX config as you wish based on your application's requirements.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading🧑‍🚀&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#docs"&gt;
  &lt;/a&gt;
  Docs:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.uvicorn.org/deployment/#running-behind-nginx"&gt;Uvicorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.gunicorn.org/en/stable/deploy.html"&gt;Gunicorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/django/daphne"&gt;Daphne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>nginx</category>
      <category>hypercorn</category>
    </item>
    <item>
      <title>Generate your own favourite TV episode using python</title>
      <author>Yash Makan</author>
      <pubDate>Sun, 14 Nov 2021 17:47:07 +0000</pubDate>
      <link>https://dev.to/yash_makan/generate-your-own-favourite-tv-episode-using-python-1pb3</link>
      <guid>https://dev.to/yash_makan/generate-your-own-favourite-tv-episode-using-python-1pb3</guid>
      <description>&lt;p&gt;I started watching "Friends" during lunch. I was not able to find any new episodes that I don't remember as I have already watched all the episodes once. I am sure that this situation must have happened with you guys too when you started scrolling like what to watch. Don't worry at all...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RjWBKNAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxjpbibfnmqi300bgm0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RjWBKNAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxjpbibfnmqi300bgm0j.png" alt="don't worry at all" width="580" height="566"&gt;&lt;/a&gt;&lt;br&gt;
In today's blog we are going to develop our own screenwriter bot which will write scripts for any TV show you like. So without any further due let's dive in.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HU_l0f7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1djms656xkc6jpvw9ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HU_l0f7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1djms656xkc6jpvw9ui.png" alt="dive in" width="580" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;We are going to use one of the most popular python libraries for machine learning that is transformers. Here we will provide a beginning of the episode and the program will complete the program with the maximum length provided below is an image representing the same procedure.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oi-HtFpi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e3cljs3luoo1fzm3pzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oi-HtFpi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e3cljs3luoo1fzm3pzu.png" alt="how it works" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#procedure"&gt;
  &lt;/a&gt;
  Procedure
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a python file named &lt;code&gt;utils.py&lt;/code&gt; and start writing code. Let's first import the needed dependencies for the project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jgFi96O7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxu7t3guvo3y612vcnd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jgFi96O7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxu7t3guvo3y612vcnd9.png" alt="imports" width="880" height="124"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;here we are importing transformers to load the model and the tokenizer from hugging face and also we are importing os to check if the model and tokenizer are already installed in the directory or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then make a function named &lt;code&gt;load_model&lt;/code&gt; which will load the model and tokenizer. Both model and tokenizer are required to generate results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46UoEQZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnf6ol5ec6vbmhm5dno7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46UoEQZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnf6ol5ec6vbmhm5dno7.png" alt="Load model and tokenizer" width="880" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here the program will check if the tokenizer and model are installed in the system or not. When you run the program for the first time then it will download the model and tokenizer from humming face i.e &lt;code&gt;cpierse/gpt2_film_scripts&lt;/code&gt; and store them locally in the system so that next time you don't have to install it again. After that, it's simply returning the tokenizer and model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After this, we will be making a function for generating the script.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OXnUtUJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6edb7uefkgph3g3pp5zj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OXnUtUJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6edb7uefkgph3g3pp5zj.png" alt="generate model" width="880" height="705"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this function, we trained the model and now using &lt;code&gt;model.generate()&lt;/code&gt; we are getting the script. As you can see the model.generate() function takes &lt;code&gt;max_length&lt;/code&gt; and &lt;code&gt;input_ids&lt;/code&gt; which is nothing but the context of the initial script provided.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After this, create another python file and name it as main.py. Here add the following code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3SXxW1G1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hffz5awevr2njlv6iify.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SXxW1G1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hffz5awevr2njlv6iify.png" alt="main.py" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;main.py&lt;/code&gt; file, we are importing the load_model and generating functions from &lt;code&gt;utils.py&lt;/code&gt; and simply calling the functions to get the result.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;The results below are generated in 93 seconds on my pc with 500 as max length. The left side is the input initial script and the right side is the generated script.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCk29nmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kl52vh6m5qh9otqy11ed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCk29nmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kl52vh6m5qh9otqy11ed.png" alt="Results" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Now obviously the results are not that amazing but still, it's a great program which can write screenplays like humans. This project is just made for a fun time and I thought will be worth sharing with the community. &lt;/p&gt;

&lt;p&gt;Also if you are angry with me to adding the images instead of the code then don't worry. Below, you will find the github repo in the references. Also I would love to thank you guys for reading this blog. will surely return again with other exciting content. Till then b-bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TEhHb-Db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmplklrqb9kxplf4byk3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TEhHb-Db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmplklrqb9kxplf4byk3.gif" alt="bye bye" width="498" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/YashMakan/blog-1"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Yash_Makan"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>transformers</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>O que é micro front end?</title>
      <author>João Pedro Resende</author>
      <pubDate>Sun, 14 Nov 2021 17:43:29 +0000</pubDate>
      <link>https://dev.to/jpbrab0/o-que-e-micro-front-end-4kci</link>
      <guid>https://dev.to/jpbrab0/o-que-e-micro-front-end-4kci</guid>
      <description>&lt;p&gt;Olá pessoal, neste artigo vou explicar um pouco sobre o micro &lt;em&gt;front-end&lt;/em&gt; e as vantagens que ele proporciona.&lt;/p&gt;

&lt;p&gt;Antes de realmente explicar o que é micro front-end, vamos entender alguns outros conceitos como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monolitos&lt;/li&gt;
&lt;li&gt;Separação do &lt;em&gt;front-end&lt;/em&gt; e &lt;em&gt;back-end&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Conceito de microsserviços&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#monolitos"&gt;
  &lt;/a&gt;
  Monolitos
&lt;/h2&gt;

&lt;p&gt;Uma aplicação monolítica consiste em um &lt;em&gt;codebase&lt;/em&gt; centralizado em uma única unidade, ou seja, &lt;em&gt;back-end&lt;/em&gt; e &lt;em&gt;front-end&lt;/em&gt; em um único repositório. Não há distinção estrutural de &lt;em&gt;front-end&lt;/em&gt; pra &lt;em&gt;back-end&lt;/em&gt; tudo está dentro do mesmo código fonte.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U2tb0Fkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlt2gfnf558nxikix702.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U2tb0Fkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlt2gfnf558nxikix702.jpg" alt="Exemplo de monolito" width="880" height="614"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problemas-comuns-em-uma-aplica%C3%A7%C3%A3o-monol%C3%ADtica"&gt;
  &lt;/a&gt;
  Problemas comuns em uma aplicação monolítica
&lt;/h3&gt;

&lt;p&gt;Alguns problemas comuns de uma aplicação monolítica.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alta complexidade para corrigir &lt;em&gt;bugs&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Dificuldades para implementar novas features&lt;/li&gt;
&lt;li&gt;Alto nível de interdependências no acoplamento de módulos&lt;/li&gt;
&lt;li&gt;Dificuldades na coordenação entre times&lt;/li&gt;
&lt;li&gt;Alto esforço para integração de novos desenvolvedores&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#separa%C3%A7%C3%A3o-do-frontend-e-backend"&gt;
  &lt;/a&gt;
  Separação do &lt;em&gt;front-end&lt;/em&gt; e &lt;em&gt;back-end&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Com o passar do tempo, o desenvolvimento passou a diferenciar as bases de códigos do &lt;em&gt;back&lt;/em&gt; e &lt;em&gt;front&lt;/em&gt;. Isso ajudou a melhorar o cenário caótico de código que aplicações monolíticas traziam. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FXA2TdGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwteh4eowqoi8kfresdo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FXA2TdGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwteh4eowqoi8kfresdo.jpg" alt="Separação do front-end e back-end" width="880" height="636"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Isso permitiu que times conseguissem fazer &lt;em&gt;deploys&lt;/em&gt; sem depender do outro.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microsservi%C3%A7os"&gt;
  &lt;/a&gt;
  Microsserviços
&lt;/h2&gt;

&lt;p&gt;Ainda neste contexto, surgiu o conceito de arquitetura de microsserviços. Quando falamos em microsserviços nos referindo a uma funcionalidade que pode ser dividida em partes menores. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k4HRU5d2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i13msy43uxnlu0psswy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k4HRU5d2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i13msy43uxnlu0psswy.jpg" alt="Microsserviços" width="880" height="545"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Depois de entender esses conceitos podemos, finalmente, falar sobre micro &lt;em&gt;front-ends&lt;/em&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#micro-frontends"&gt;
  &lt;/a&gt;
  Micro &lt;em&gt;front-ends&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Micro &lt;em&gt;Front-end&lt;/em&gt; é um estilo arquitetônico que separa uma aplicação de front em várias camadas menores, cada uma sendo responsável por um módulo específico da aplicação, normalmente separadas por domínios ou contextos de uso, permitindo assim, que diferentes times cuidem dessas funcionalidades de forma independente.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4EV-aVId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3p2phiwxtfaanw9lldx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4EV-aVId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3p2phiwxtfaanw9lldx.png" alt="Exemplo micro front ends" width="880" height="635"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na prática, negócios podem separar produtos web em micro &lt;em&gt;front-ends&lt;/em&gt; dividindo seus times de acordo com as funcionalidades dos seus sistemas. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUeLecm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwwwgr5u09pitwhj1lq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUeLecm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwwwgr5u09pitwhj1lq1.png" alt="Exemplo micro front ends" width="851" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por fim algumas vantagens de uma arquitetura &lt;em&gt;micro front-end&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mais facilidade na correção de bugs&lt;/li&gt;
&lt;li&gt;Facilidade na integração de novas pessoas no projeto&lt;/li&gt;
&lt;li&gt;Mais facilidade de implementação de novas &lt;em&gt;features&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Facilidade na coordenação entre times&lt;/li&gt;
&lt;li&gt;Times mais independentes&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Obrigado por ler esse artigo até aqui!&lt;/p&gt;

&lt;p&gt;Este artigo foi escrito com a ajuda do &lt;strong&gt;Vinicius Morellato&lt;/strong&gt;, siga ele no &lt;a href="https://www.linkedin.com/in/viniciusmorellato/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Me siga nas redes sociais! &lt;a href="https://links.jpres.dev"&gt;https://links.jpres.dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Até o próximo artigo!&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Role of JAVA in Future</title>
      <author>abdulaleemq</author>
      <pubDate>Sun, 14 Nov 2021 17:29:42 +0000</pubDate>
      <link>https://dev.to/abdulaleemq/role-of-java-in-future-pc9</link>
      <guid>https://dev.to/abdulaleemq/role-of-java-in-future-pc9</guid>
      <description>&lt;p&gt;Download the power of JAVA in your Pocket PC or Personal Computer.&lt;/p&gt;

&lt;p&gt;Java is an object-oriented programming language which was designed to be platform independent. The idea behind Java was to not require any additional emulation layer on top of it to make it work on different operating systems.&lt;/p&gt;

&lt;p&gt;Java has become one of the most popular programming languages used today. With the rise of cell phones, Java has found a new purpose. It began as a toy language for programmers to play with and now it is being used in the programming languages of Android, iPhone and other mobile devices.&lt;/p&gt;

&lt;p&gt;Why Java?&lt;br&gt;
Java is a very powerful language which is useful for many types of software development especially those dealing with the Internet, Mobile Devices and Internet of Things. Also, it can be used as a backend system for databases such as MySQL or PostgreSQL which are widely used in today's world.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss how to install JAVA on your Pocket PC or Mobile Device. We will also disclose how to develop Android Applications using JAVA programming language.&lt;/p&gt;

&lt;p&gt;For More Information: &lt;a href="https://tinyurl.com/4z5scw6v/"&gt;https://tinyurl.com/4z5scw6v/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Track App Interactions with TraceContext</title>
      <author>David Thompson</author>
      <pubDate>Sun, 14 Nov 2021 17:16:43 +0000</pubDate>
      <link>https://dev.to/capndave/track-app-interactions-with-tracecontext-5da9</link>
      <guid>https://dev.to/capndave/track-app-interactions-with-tracecontext-5da9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#this-is-a-placeholder"&gt;
  &lt;/a&gt;
  This is a placeholder
&lt;/h2&gt;

&lt;p&gt;testing 123&lt;/p&gt;

</description>
      <category>programming</category>
      <category>node</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting started with GraphQL in .NET 6 - Part 2 (Query + Mutation to Database)</title>
      <author>Bervianto Leo Pratama</author>
      <pubDate>Sun, 14 Nov 2021 17:11:16 +0000</pubDate>
      <link>https://dev.to/berviantoleo/getting-started-with-graphql-in-net-6-part-2-query-mutation-to-database-1co6</link>
      <guid>https://dev.to/berviantoleo/getting-started-with-graphql-in-net-6-part-2-query-mutation-to-database-1co6</guid>
      <description>&lt;p&gt;Welcome to our second part to learn more about GraphQL! I'm so excited about GraphQL. Since, I just learn this maybe about last 1-3 months. I hope you can give me some advises or some suggestions about my articles. Let's go, we learn more the GraphQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prepare-your-tools"&gt;
  &lt;/a&gt;
  Prepare your tools
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Since .NET 6 finally released and VS 2022 released too. I use VS 2022 to help me more about Database. But, don't worry, if you use Visual Studio Code, you still can follow step by step, I will bring you some extra steps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install SQL Server. From &lt;a href="https://www.microsoft.com/en-us/sql-server/sql-server-downloads"&gt;here&lt;/a&gt; - if you more familiar with Docker, I suggest you to use the docker, they support in the Linux, check &lt;a href="https://hub.docker.com/_/microsoft-mssql-server"&gt;here&lt;/a&gt;. That is why I suggest you to use Docker instead, for Linux user. &lt;strong&gt;Note&lt;/strong&gt;: If you want to try another databases, feel free to choose your favorite database. You will need to update some code, like dependencies and when settings the DbContext.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  Install Dependencies
&lt;/h2&gt;

&lt;p&gt;Your final code (GraphQLNetExample.csproj) will be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk.Web"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net6.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Nullable&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/Nullable&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ImplicitUsings&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/ImplicitUsings&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"GraphQL"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.6.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"GraphQL.MicrosoftDI"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.6.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"GraphQL.Server.Authorization.AspNetCore"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.2"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"GraphQL.Server.Transports.AspNetCore.SystemTextJson"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.2"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"GraphQL.Server.Ui.Altair"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.2"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"GraphQL.SystemTextJson"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.6.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore.Design"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;PrivateAssets&amp;gt;&lt;/span&gt;all&lt;span class="nt"&gt;&amp;lt;/PrivateAssets&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;IncludeAssets&amp;gt;&lt;/span&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;span class="nt"&gt;&amp;lt;/IncludeAssets&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/PackageReference&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore.SqlServer"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.EntityFrameworkCore.Tools"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.0.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;PrivateAssets&amp;gt;&lt;/span&gt;all&lt;span class="nt"&gt;&amp;lt;/PrivateAssets&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;IncludeAssets&amp;gt;&lt;/span&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;span class="nt"&gt;&amp;lt;/IncludeAssets&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/PackageReference&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Swashbuckle.AspNetCore"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"6.2.3"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are installing some dependencies about EntityFrameworkCore. The manual step is like this (if you use dotnet cli):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dotnet add GraphQLNetExample package Microsoft.EntityFrameworkCore.Design&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dotnet add GraphQLNetExample package Microsoft.EntityFrameworkCore.SqlServer&lt;/code&gt; - feel free to change with your favorite database.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet add GraphQLNetExample package Microsoft.EntityFrameworkCore.Design&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#prepare-our-databases"&gt;
  &lt;/a&gt;
  Prepare our databases
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create DbContext. My side, write at &lt;code&gt;EntityFramework/NotesContext.cs&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;GraphQLNetExample.Notes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.EntityFrameworkCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;GraphQLNetExample.EntityFramework&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotesContext&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DbSet&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Note&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Notes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;NotesContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DbContextOptions&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;Notes/Note.cs&lt;/code&gt;, in this case, I add &lt;code&gt;Required&lt;/code&gt; annotation.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.ComponentModel.DataAnnotations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;GraphQLNetExample.Notes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Note&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Required&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;Program.cs&lt;/code&gt;, we register the DbContext. Again, feel free to setup with your favorite database.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... another existing code&lt;/span&gt;

&lt;span class="c1"&gt;// Add services to the container.&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NotesContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseSqlServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConnectionString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Default"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddSingleton&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ISchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NotesSchema&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NotesSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SelfActivatingServiceProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;span class="c1"&gt;// ... another existing code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;appsettings.json&lt;/code&gt;, to add the Connection String. Please update the database, User, and Password section with your server configuration.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Logging"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"LogLevel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Information"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Microsoft.AspNetCore"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Warning"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"AllowedHosts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"ConnectionStrings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Server=localhost;Database=graphqltutorial;User Id=sa;Password=;"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don't forget to create your database in SQL Server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add Migration. Because I use Visual Studio 2022, so I can use &lt;code&gt;Add-Migration BaseNoteModel&lt;/code&gt;, run this command at Package Manager Console. How to navigate? &lt;code&gt;Tools &amp;gt; NuGet Package Manager &amp;gt; Package Manager Console&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AphEBULk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lapfepeqbvh9925fnzo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AphEBULk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lapfepeqbvh9925fnzo6.png" alt="Add Migration" width="880" height="81"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: If you use dotnet ef &amp;amp; dotnet cli, please refer to &lt;a href="https://dev.to/berviantoleo/odata-with-net-6-5e1p"&gt;this&lt;/a&gt;. In that post, I provide you some steps to use the dotnet cli &amp;amp; dotnet ef with dotnet tools.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update database. When use Visual Studio, run this: &lt;code&gt;Updata-Database&lt;/code&gt;, to make our database sync with the current migration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jkAGWwTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2sme5au17780ygypebeh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jkAGWwTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2sme5au17780ygypebeh.png" alt="Update Database" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yey, your database is ready!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#update-query-amp-add-a-mutation"&gt;
  &lt;/a&gt;
  Update Query &amp;amp; Add a Mutation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create a Mutation file, &lt;code&gt;Notes/NotesMutation.cs&lt;/code&gt;. We use string type because we only have 1 field only, but if we have larger columns, I suggest to write our input type.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;GraphQL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;GraphQL.Types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;GraphQLNetExample.EntityFramework&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;GraphQLNetExample.Notes&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotesMutation&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectGraphType&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;NotesMutation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NoteType&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
                &lt;span class="s"&gt;"createNote"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;QueryArguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;QueryArgument&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NonNullGraphType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;StringGraphType&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetArgument&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;notesContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestServices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRequiredService&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NotesContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
                    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;note&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Note&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;};&lt;/span&gt;
                    &lt;span class="n"&gt;notesContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;notesContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveChanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Update our query: &lt;code&gt;Notes/NotesQuery.cs&lt;/code&gt;. Our final query will looks like this:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;GraphQL.Types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;GraphQLNetExample.EntityFramework&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;GraphQLNetExample.Notes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotesQuery&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectGraphType&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;NotesQuery&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ListGraphType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NoteType&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"notes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Note&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Note&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NewGuid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World!"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Note&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NewGuid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World! How are you?"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ListGraphType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NoteType&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"notesFromEF"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;notesContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestServices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRequiredService&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NotesContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;notesContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Register our Mutation to Schema. Update &lt;code&gt;Notes/NotesSchema.cs&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;GraphQL.Types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;GraphQLNetExample.Notes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotesSchema&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Schema&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;NotesSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceProvider&lt;/span&gt; &lt;span class="n"&gt;serviceProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serviceProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serviceProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRequiredService&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NotesQuery&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Mutation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serviceProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRequiredService&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NotesMutation&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Yes, your GraphQL is ready!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#test-our-graphql"&gt;
  &lt;/a&gt;
  Test our GraphQL
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I will test from mutation part first.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;createNote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_zEW0Coy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3t6g9c0wt53vf1f5ytu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_zEW0Coy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3t6g9c0wt53vf1f5ytu3.png" alt="Test Mutation" width="880" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now, we try to test our query. I add original (in memory), to check the different.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;notesFromEF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hGaDzx-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1bxrqodh3xbclmrjwxd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGaDzx-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1bxrqodh3xbclmrjwxd.png" alt="Test Query" width="880" height="399"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you
&lt;/h2&gt;

&lt;p&gt;For the repository, you can visit here:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bervProject"&gt;
        bervProject
      &lt;/a&gt; / &lt;a href="https://github.com/bervProject/GraphQLNETExample"&gt;
        GraphQLNETExample
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
GraphQL .NET Example&lt;/h1&gt;
&lt;p&gt;GraphQL example implementation in .NET 6.&lt;/p&gt;
&lt;h2&gt;
LICENSE&lt;/h2&gt;
&lt;p&gt;MIT&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bervProject/GraphQLNETExample"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I suggest you to learn more about data access layer. You can learn from &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-implementation-entity-framework-core"&gt;here&lt;/a&gt;. So, hopefully you don't touch DbContext directly. I touch DbContext directly because this is still simple application and small project, if the project more larger, you will need the data access layer.&lt;/p&gt;

&lt;p&gt;I'm not sure yet for the third part. Yes, we will have other parts, but not sure yet. Either I will add Authentication/Authorization parts, or just move to how we call the GraphQL in FrontEnd side, I will use the React.js for this. If you have a suggestion, feel free to comment here.&lt;/p&gt;

&lt;p&gt;Finally, thank you for your attention and read until this section. Have great days!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/W7DHaxkSE4Lpm/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/W7DHaxkSE4Lpm/giphy.gif" alt="Thank you" width="450" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>graphql</category>
      <category>query</category>
      <category>mutation</category>
    </item>
    <item>
      <title>Testing yassgy</title>
      <author>Gerardo Enrique Arriaga Rendon</author>
      <pubDate>Sun, 14 Nov 2021 17:01:51 +0000</pubDate>
      <link>https://dev.to/jerryhue/testing-yassgy-5em6</link>
      <guid>https://dev.to/jerryhue/testing-yassgy-5em6</guid>
      <description>&lt;p&gt;For this post, I would like to talk about testing yassgy (and how difficult it is...).&lt;/p&gt;

&lt;p&gt;I have implement very small test cases on a very small part of &lt;code&gt;yassgy&lt;/code&gt;. Since &lt;code&gt;yassgy&lt;/code&gt; currently is untestable, and I noticed that refactoring it would a major task, I decided to focus on a really small function of &lt;code&gt;yassgy&lt;/code&gt;, testing whether a file path refers to a text file.&lt;/p&gt;

&lt;p&gt;I used the built-in testing features included in &lt;a href="https://github.com/rust-lang/cargo"&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/a&gt;, by using the &lt;code&gt;cfg&lt;/code&gt; attribute and prefixing my test functions with the &lt;code&gt;test&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;For example, let us say we have a file called &lt;code&gt;complex.rs&lt;/code&gt;, that defines a structure for a complex number:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(Debug,&lt;/span&gt; &lt;span class="nd"&gt;Eq)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;imaginary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;f64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Complex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.real&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="py"&gt;.real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;imaginary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.imaginary&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="py"&gt;.imaginary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nb"&gt;Add&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If I wanted to test this structure, I can simply write the following in the same file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="c"&gt;// snip&lt;/span&gt;

&lt;span class="nd"&gt;#[cfg(test)]&lt;/span&gt;
&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;#[test]&lt;/span&gt;
  &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;add_two_complex_numbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imaginary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imaginary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imaginary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.3&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And thus, we have implemented the first test case!&lt;br&gt;
This test case can be easily run in the command line with &lt;code&gt;cargo test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can also implement a second test case, where we test the subtraction of two complex numbers, and, because we are not supporting a &lt;code&gt;Sub&lt;/code&gt; operation, the test case would fail!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-cases-for-raw-yassgy-endraw-"&gt;
  &lt;/a&gt;
  Test cases for &lt;code&gt;yassgy&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The test cases for &lt;code&gt;yassgy&lt;/code&gt; were pretty simple, focused on the function that tests whether a file path refers to a text file.&lt;/p&gt;

&lt;p&gt;Writing a few test cases helped me to realize test cases define a specification of your program, and they count in some way as documentation of your program. Thus, testing provide several benefits that outweigh the maintenance costs of the code.&lt;/p&gt;

</description>
      <category>osd600</category>
    </item>
    <item>
      <title>Gideros Project Template for your Indie Games</title>
      <author>JDBC</author>
      <pubDate>Sun, 14 Nov 2021 17:01:03 +0000</pubDate>
      <link>https://dev.to/jdbcdev/gideros-project-template-for-your-indie-games-2ih4</link>
      <guid>https://dev.to/jdbcdev/gideros-project-template-for-your-indie-games-2ih4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SPAwVMco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvo9vexkvk8l1vdugwmg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SPAwVMco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvo9vexkvk8l1vdugwmg.jpg" alt="Main image" width="880" height="377"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#gideros-project-template-for-your-indie-games"&gt;
  &lt;/a&gt;
  Gideros Project Template for your Indie games
&lt;/h1&gt;

&lt;p&gt;This article will explain how to create a common &lt;strong&gt;&lt;a href="https://github.com/jdbcdev/gideros_template"&gt;Gideros Project Template&lt;/a&gt;&lt;/strong&gt; for all your Indie games developed using the amazing &lt;a href="https://wiki.giderosmobile.com/index.php/Gideros_Studio"&gt;Gideros Studio&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#game-configuration"&gt;
  &lt;/a&gt;
  Game configuration
&lt;/h2&gt;

&lt;p&gt;The first step is to configure the game in the Gideros Studio editor.&lt;/p&gt;

&lt;p&gt;Click on the right button on the mouse to open Gideros project properties window where you will choose your game name:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2KC8n-xG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3j7o0jimkufjlrwrj5y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2KC8n-xG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3j7o0jimkufjlrwrj5y.png" alt="Gideros Project Properties" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally the following properties can be set from this window:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Settings tab&lt;/em&gt;: current version of the game, build version, retina display and autorotation.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Window tab&lt;/em&gt;: scale mode (recommended letterbox), logical dimensions, window size, orientation (Portrait or Landscape) and FPS (30 or 60).&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Input tab&lt;/em&gt;: behaviour of mouse and touch events.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#starting-point%C2%A0file"&gt;
  &lt;/a&gt;
  Starting point file
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;main.lua&lt;/em&gt; file is the entry point for your game. The following lines have been added to the beginning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;setKeepAwake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;setOrientation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PORTRAIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;setBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xffffff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Why these lines was added?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You will check from Gideros documentation for &lt;a href="https://wiki.gideros.rocks/index.php/Application"&gt;Application Class&lt;/a&gt; to answer to the previous question:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://wiki.giderosmobile.com/index.php/Application:setKeepAwake"&gt;Application:setKeepAwake&lt;/a&gt;&lt;/em&gt; keeps runnning your game when there is no touches for some period of time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://wiki.giderosmobile.com/index.php/Application:setOrientation"&gt;Application:setOrientation&lt;/a&gt;&lt;/em&gt; sets the orientation of your game: PORTRAIT or LANDSCAPE.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://wiki.gideros.rocks/index.php/Application:setBackgroundColor"&gt;Application:setBackgroundColor&lt;/a&gt;&lt;/em&gt; sets the background color of your game in hexadecimal, by default &lt;em&gt;0xffffff&lt;/em&gt; is the white color. You could change it for another you want.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ISqgoUCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h3np1i633fi7qnw73w0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ISqgoUCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h3np1i633fi7qnw73w0.png" alt="Gideros Main File" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#game-assets"&gt;
  &lt;/a&gt;
  Game assets
&lt;/h3&gt;

&lt;p&gt;In this point you will need to store your game assets (images, music, sounds, fonts) in some specific folder.&lt;/p&gt;

&lt;p&gt;For this purpose the following folders within &lt;em&gt;Files&lt;/em&gt; are created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;images&lt;/strong&gt; folder where all your game graphics are placed.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;sounds&lt;/strong&gt; folder where music and sounds of your game are set.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;fonts&lt;/strong&gt; folder where all your game fonts are localized.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gideros Studio supports Bitmap and TrueType Fonts, I recommend to use TrueType Fonts (TTFonts).&lt;/p&gt;

&lt;p&gt;For example download the &lt;a href="https://fontesk.com/first-fun-font/"&gt;First Fun Font&lt;/a&gt; which is Free for commercial use and put into &lt;em&gt;fonts&lt;/em&gt; folder.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loading-game"&gt;
  &lt;/a&gt;
  Loading game
&lt;/h3&gt;

&lt;p&gt;Define one &lt;em&gt;draw_loading&lt;/em&gt; local function in the &lt;em&gt;main.lua&lt;/em&gt; file which will show the &lt;em&gt;Loading&lt;/em&gt; text message when your game begins.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Loading function&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;draw_loading&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sprite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;TTFont&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"fonts/firstfun.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Loading"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;posX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getLogicalWidth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getWidth&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;setPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;280&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;setTextColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x00ff11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="n"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;addChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;addChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Gideros Studio uses a &lt;em&gt;nodes hierarchy graph&lt;/em&gt; to draw something in the game screen and the &lt;em&gt;stage&lt;/em&gt; variable is the root node in the graph.&lt;/p&gt;

&lt;p&gt;This local function will use the &lt;em&gt;Sprite&lt;/em&gt; and &lt;em&gt;TTFont&lt;/em&gt; Gideros classes to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creates a &lt;em&gt;loading&lt;/em&gt; Sprite object which must contain the &lt;em&gt;Loading&lt;/em&gt; text message.&lt;/li&gt;
&lt;li&gt;Defines a local &lt;em&gt;font&lt;/em&gt; variable which uses the &lt;em&gt;TTFont&lt;/em&gt; Gideros class to load &lt;em&gt;firstfun&lt;/em&gt; TrueType font with size 50.&lt;/li&gt;
&lt;li&gt;Creates a local &lt;em&gt;text&lt;/em&gt; variable which is a &lt;em&gt;TextField&lt;/em&gt; object with &lt;em&gt;Loading&lt;/em&gt; string text.&lt;/li&gt;
&lt;li&gt;Sets the X position and the text color of the &lt;em&gt;text&lt;/em&gt; variable.&lt;/li&gt;
&lt;li&gt;Adds the &lt;em&gt;text&lt;/em&gt; variable to the &lt;em&gt;loading&lt;/em&gt; Sprite object&lt;/li&gt;
&lt;li&gt;We wish to render &lt;em&gt;loading&lt;/em&gt; text in screen, so adds the &lt;em&gt;loading&lt;/em&gt; Sprite object to &lt;em&gt;stage&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#detecting-platform"&gt;
  &lt;/a&gt;
  Detecting Platform
&lt;/h2&gt;

&lt;p&gt;Define two variables &lt;em&gt;iOS&lt;/em&gt; and &lt;em&gt;android&lt;/em&gt; local variables in the &lt;em&gt;main.lua&lt;/em&gt; file to know which is the native platform when game is running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getDeviceInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"iOS"&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getDeviceInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Android"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both variables gives you the value &lt;em&gt;true&lt;/em&gt; when your game is running on iOS or Android device, so you can use them to write custom Lua code depending on the target device.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scene-manager-plugin"&gt;
  &lt;/a&gt;
  Scene Manager plugin
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;SceneManager&lt;/em&gt; plugin allows you to manage all your game scenes.&lt;/p&gt;

&lt;p&gt;Go to &lt;em&gt;Plugins folder&lt;/em&gt;, click on right button to &lt;em&gt;Add Plugin&lt;/em&gt; and the list with all plugins will be shown:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hRj3KW_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cs5hmd310f9qky3bmq1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hRj3KW_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cs5hmd310f9qky3bmq1r.png" alt="Gideros Scene Manager" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;em&gt;Scene Manager&lt;/em&gt; and &lt;em&gt;Easing&lt;/em&gt; plugins and click on &lt;em&gt;OK&lt;/em&gt; button to add both to your Gideros project.&lt;/p&gt;

&lt;p&gt;Go back to the beginning of the &lt;em&gt;main.lua&lt;/em&gt; file and use &lt;em&gt;require&lt;/em&gt; sentence to use these plugins:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"scenemanager"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"easing"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#game-scenes"&gt;
  &lt;/a&gt;
  Game scenes
&lt;/h2&gt;

&lt;p&gt;Once you have added &lt;em&gt;Scene Manager&lt;/em&gt; and &lt;em&gt;Easing&lt;/em&gt; plugins, then &lt;strong&gt;Menu&lt;/strong&gt; and &lt;strong&gt;Game&lt;/strong&gt; scenes will be created in the Gideros project template.&lt;/p&gt;

&lt;p&gt;Gideros provides the &lt;a href="https://wiki.giderosmobile.com/index.php/Sprite"&gt;Sprite Class&lt;/a&gt; as the base class for your game scenes. A sprite object describes &lt;a href="https://archive.gamedev.net/archive/reference/programming/features/scenegraph/index.html"&gt;Scene Graph&lt;/a&gt; containing child nodes.&lt;/p&gt;

&lt;p&gt;Every game scene will extends &lt;em&gt;Sprite class&lt;/em&gt; following the oriented object programming approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#menu-scene"&gt;
  &lt;/a&gt;
  Menu Scene
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Menu scene&lt;/em&gt; should be the first scene shown in your game, this is where you show the different options of your game.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First a &lt;strong&gt;scenes&lt;/strong&gt; folder is created within &lt;em&gt;Files&lt;/em&gt;, this folder is where all game scenes are placed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Second the &lt;em&gt;menu.lua&lt;/em&gt; file is created within &lt;em&gt;scenes&lt;/em&gt; folder with the following Lua code:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;MenuScene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sprite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- Static setup&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;MenuScene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;-- Constructor&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;MenuScene&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The static &lt;em&gt;setup()&lt;/em&gt; function allows to load all &lt;em&gt;MenuScene&lt;/em&gt; assets (images, music, sounds, fonts,...).&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;init&lt;/em&gt; function is the constructor for &lt;em&gt;MenuScene&lt;/em&gt; Sprite which is called for &lt;em&gt;sceneManager&lt;/em&gt; for creating the Menu scene. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#game-scene"&gt;
  &lt;/a&gt;
  Game Scene
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Game scene&lt;/em&gt; is the core game loop of your game, where the magic happens.&lt;/p&gt;

&lt;p&gt;Just create a &lt;em&gt;game&lt;/em&gt; file within &lt;em&gt;scenes&lt;/em&gt; folder with the following Lua code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;GameScene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sprite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- Static setup&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;GameScene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;-- Constructor&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;GameScene&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The static &lt;em&gt;setup()&lt;/em&gt; function allows to load all &lt;em&gt;GameScene&lt;/em&gt; assets.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;init&lt;/em&gt; function is the constructor for &lt;em&gt;GameScene&lt;/em&gt; Sprite which is called for &lt;em&gt;sceneManager&lt;/em&gt; to create the Game scene. &lt;/p&gt;

&lt;p&gt;For instance this is how it looks &lt;strong&gt;menu&lt;/strong&gt; scene in Gideros Studio editor:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2m0lSTkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t5qxncchk7q0w3qo7mk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2m0lSTkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t5qxncchk7q0w3qo7mk.png" alt="Gideros Menu Scene" width="880" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-scenes"&gt;
  &lt;/a&gt;
  Using scenes
&lt;/h2&gt;

&lt;p&gt;Go back to &lt;em&gt;main.lua&lt;/em&gt; file and write some Lua code at the end of this file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;draw_loading&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ENTER_FRAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;preloader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above Lua code will do the following two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Invoke the local &lt;em&gt;draw_loading&lt;/em&gt; function.&lt;/li&gt;
&lt;li&gt;Add &lt;em&gt;ENTER_FRAME&lt;/em&gt; event listener to call the &lt;em&gt;preloader&lt;/em&gt; function the first time screen must be rendered. Click on &lt;a href="https://wiki.giderosmobile.com/index.php/Event.ENTER_FRAME"&gt;ENTER_FRAME event&lt;/a&gt; for specific info about this event.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we need to create the local &lt;em&gt;preloader&lt;/em&gt; function with the following Lua code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;preloader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ENTER_FRAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;preloader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;-- Load all your assets here&lt;/span&gt;
    &lt;span class="n"&gt;MenuScene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;GameScene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;-- List of scenes&lt;/span&gt;
    &lt;span class="n"&gt;scenes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"menu"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"game"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;sceneManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SceneManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"menu"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MenuScene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"game"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GameScene&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;addChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sceneManager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;-- MenuScene is the first scene to show&lt;/span&gt;
    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;currentScene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scenes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TIMER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="c1"&gt;-- Remove loading scene&lt;/span&gt;
                    &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
                    &lt;span class="n"&gt;sceneManager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;changeScene&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentScene&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;preloader&lt;/em&gt; function must do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove the &lt;em&gt;ENTER_FRAME&lt;/em&gt; event listener. We only need to call the &lt;em&gt;preloader&lt;/em&gt; function once.&lt;/li&gt;
&lt;li&gt;Invoke &lt;em&gt;MenuScene.setup&lt;/em&gt; and &lt;em&gt;GameScene.setup&lt;/em&gt; functions to load the scenes assets.&lt;/li&gt;
&lt;li&gt;Define the game scene list that will be used by &lt;em&gt;sceneManager&lt;/em&gt; variable.&lt;/li&gt;
&lt;li&gt;The variable &lt;em&gt;currentScene&lt;/em&gt; defines the &lt;em&gt;MenuScene&lt;/em&gt; as the default game scene. &lt;/li&gt;
&lt;li&gt;Use Gideros &lt;a href="https://wiki.giderosmobile.com/index.php/Timer"&gt;Timer&lt;/a&gt; class to wait 2000 miliseconds until the &lt;em&gt;Menu&lt;/em&gt; scene is shown by &lt;em&gt;sceneManager&lt;/em&gt; variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally this &lt;strong&gt;&lt;a href="https://github.com/jdbcdev/gideros_template"&gt;Gideros Template Project&lt;/a&gt;&lt;/strong&gt; should be used as starting point to develop your upcoming hit Indie game. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://play.google.com/store/apps/developer?id=JDBC+Games"&gt;All my Android games published to Google Store&lt;/a&gt; has been developed using these template.&lt;/p&gt;

&lt;p&gt;Enjoy it and do not hesitate to leave some comment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TyNyJywh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur06ove0sdlvqwdprlhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TyNyJywh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur06ove0sdlvqwdprlhf.png" alt="JDBC Games" width="480" height="170"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>programming</category>
      <category>tooling</category>
      <category>android</category>
    </item>
  </channel>
</rss>
