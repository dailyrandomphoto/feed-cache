<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Uploading Docker Images to AWS ECR</title>
      <author>DH Kim</author>
      <pubDate>Sun, 14 Nov 2021 19:38:55 +0000</pubDate>
      <link>https://dev.to/icncsx/uploading-docker-images-to-aws-ecr-dgp</link>
      <guid>https://dev.to/icncsx/uploading-docker-images-to-aws-ecr-dgp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#aws"&gt;
  &lt;/a&gt;
  AWS
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#-raw-create-an-ecr-repo-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Create an ECR Repo&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ecr create-repository &lt;span class="nt"&gt;--repository-name&lt;/span&gt; &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-login-to-ecr-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Log-in to ECR&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ecr get-login-password &lt;span class="nt"&gt;--region&lt;/span&gt; region | docker login &lt;span class="nt"&gt;--username&lt;/span&gt; AWS &lt;span class="nt"&gt;--password-stdin&lt;/span&gt; &amp;lt;registry_id&amp;gt;.dkr.ecr.&amp;lt;region&amp;gt;.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-tag-your-image-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Tag your image&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Tag your image with the Amazon ECR registry, repository, and optional image tag name combination to use. This is important if we want to push to ECR and not DockerHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker tag &amp;lt;image_id&amp;gt; &amp;lt;registry_id&amp;gt;.dkr.ecr.region.amazonaws.com/&amp;lt;repo_name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-upload-image-to-ecr-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Upload image to ECR&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker push &amp;lt;registryId&amp;gt;.dkr.ecr.&amp;lt;region&amp;gt;.amazonaws.com/&amp;lt;repo&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>programming</category>
    </item>
    <item>
      <title>Spring Boot Architecture</title>
      <author>Maddy</author>
      <pubDate>Sun, 14 Nov 2021 19:38:35 +0000</pubDate>
      <link>https://dev.to/maddy/spring-boot-architecture-547i</link>
      <guid>https://dev.to/maddy/spring-boot-architecture-547i</guid>
      <description>&lt;p&gt;Spring Boot is a more user-friendly version of the Spring Framework. With Spring Boot, you can create autonomous and easy to run applications. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHAT IS THE DIFFERENCE BETWEEN  SPRING AND SPRING BOOT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you've ever tried to write a Java application time ago, you would have noticed how much work you had to do to perform database operations. It's a tiring process! &lt;/p&gt;

&lt;p&gt;The Spring Framework simplifies these operations, thanks to the Spring JDBC module. &lt;/p&gt;

&lt;p&gt;Spring is the combination of multiple sub-frameworks. It has many modules, for example, Spring MVC, Spring  JDBC, Spring  AOP, Spring  ORM, and Spring Test. The core feature of the Spring Framework is &lt;em&gt;Dependency Injection&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;Even though Spring has made the development of Java applications easier, I think that it is vast and complicated to master.  In the past, I tried to learn the Spring Framework from scratch, and I found it a long experience. This is where &lt;strong&gt;Spring Boot&lt;/strong&gt; comes in handy, though. üòÅ &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WHAT IS SPRING BOOT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot is built on top of the Spring Framework. It's a more automated and simplified version of Spring. Spring Boot makes it easy to create an up and running application in a few minutes. You go to  &lt;a href="https://start.spring.io/"&gt;Spring Initializr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X6W8b1ro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636841347347/XD_UTMM8P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X6W8b1ro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636841347347/XD_UTMM8P.png" alt="springInitializr.png" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the website will generate the application for you in an instant. &lt;/p&gt;

&lt;p&gt;If you're undecided on whether to learn Spring or Spring Boot, I'd say to at least know the basics of the Spring Framework and then jump onto Spring Boot. &lt;/p&gt;

&lt;p&gt;Now let's talk about Spring Boot Architecture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPRING BOOT ARCHITECTURE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot Architecture has four layers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Presentation Layer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Business Layer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Persistence Layer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database Layer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DcbiyJo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636840785484/hxIUT9R03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcbiyJo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636840785484/hxIUT9R03.png" alt="Spring Boot Architecture.png" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PRESENTATION LAYER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This layer is at the top of the architecture. This tier is responsible for:&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Performing authentication.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Converting JSON data into an object (and vice versa).&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Handling HTTP requests.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Transfering authentication to the business layer.&lt;/p&gt;

&lt;p&gt;The presentation layer is the equivalent of the Controller class. The Controller class handles all the incoming REST API requests (GET, POST, PUT, DELETE, PATCH) from the Client. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BUSINESS LAYER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The business layer is responsible for:&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Performing validation.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Performing authorization.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Handling the business logic and rules.&lt;/p&gt;

&lt;p&gt;This layer is the equivalent to the Service class. It's where we handle the business logic. If you're wondering what do we mean by "business logic", I found an interesting discussion on &lt;a href="https://softwareengineering.stackexchange.com/questions/234251/what-really-is-the-business-logic"&gt;StackExchange&lt;/a&gt;. In short, the business logic in software engineering is where we decide what the software needs to do. An example of this is validation. If you are ever requested to validate something, this needs to happen inside the Service class. &lt;/p&gt;

&lt;p&gt;The Business layer communicates with both the Presentation layer and the Persistence Layer. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PERSISTENCE LAYER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This layer is responsible for:&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Containing storage logic.&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Fetching objects and translating them into database rows (and vice versa).&lt;/p&gt;

&lt;p&gt;This layer is the equivalent of the Repository interface. We write database queries inside this interface. &lt;/p&gt;

&lt;p&gt;The Persistence layer is the only layer that communicates with the Business layer and the Database layer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DATABASE LAYER&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This layer is responsible for:&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è Performing database operations (mainly CRUD operations).&lt;/p&gt;

&lt;p&gt;This layer is simply the actual database that you decide to use to build your application. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPRING BOOT WORKFLOW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2CoP1Cid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636842342576/7ShwFxJxx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CoP1Cid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636842342576/7ShwFxJxx.png" alt="Spring Boot workflow.png" width="880" height="619"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot workflow acts like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Client makes an HTTP request.&lt;/li&gt;
&lt;li&gt;The Controller class receives the HTTP request.&lt;/li&gt;
&lt;li&gt;The Controller understands what type of request will process, and then it deals with it.&lt;/li&gt;
&lt;li&gt;If it is needed, it calls the service class.&lt;/li&gt;
&lt;li&gt;The Service Class is going to handle the business logic. It does this on the data from the database.&lt;/li&gt;
&lt;li&gt;If everything goes well, we return a JSP page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Originally published on my &lt;a href="https://techwithmaddy.com/spring-boot-architecture"&gt;blog&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Thanks for reading my article. Until next time! üëãüèæ&lt;/p&gt;

</description>
      <category>java</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Lambda container approach in AWS</title>
      <author>DH Kim</author>
      <pubDate>Sun, 14 Nov 2021 19:28:24 +0000</pubDate>
      <link>https://dev.to/icncsx/lambda-container-approach-in-aws-23p4</link>
      <guid>https://dev.to/icncsx/lambda-container-approach-in-aws-23p4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-zip-vs-container-approach-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Zip vs Container Approach&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;There are two ways to use Lambda functions in AWS. One is to provide the deployable artifact in the form of a zip file. You then have a variety of runtimes you can choose from: &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html"&gt;https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The other approach is the Lambda container approach. IMO, the container approach to Lambda management has two main advantages over the zip approach. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-runtime-selection-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Runtime selection&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;With the zip approach, you have to rely on Amazon supporting the desired runtime. For example, if your code depends on Python3.10, you better hope that Amazon supports that. In a container approach however, the runtime is something you have full control over. Just make sure either your base image supports the runtime or you install the runtime as part of one of your RUN statements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-building-dependencies-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Building dependencies&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Non-native packages such as pandas, lxml, etc have to be built in the target environment for the compiled binaries to work. For example, if you build pandas on Mac, then the compiled binaries will work on Mac - not on Amazon Linux 2 which is what Lambda runs on.&lt;/p&gt;

&lt;p&gt;With containers, you no longer have to worry about building for a target OS, as you're able to encapsulate OS details in an image. Put simply, the image you build locally will just work in Lambda. How easy is that!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>Getting started with SNS and SQS</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 14 Nov 2021 18:58:52 +0000</pubDate>
      <link>https://dev.to/aws-builders/getting-started-with-sns-and-sqs-3m4i</link>
      <guid>https://dev.to/aws-builders/getting-started-with-sns-and-sqs-3m4i</guid>
      <description>&lt;p&gt;&lt;a href="#sns"&gt;Amazon Simple Notification Service (SNS)&lt;/a&gt; and &lt;a href="#sqs"&gt;Amazon Simple Queue Service (SQS)&lt;/a&gt; are the famous services which is leveraged to architect applications which are event driven and decoupled. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#eventdriven-architecture"&gt;
  &lt;/a&gt;
  Event-driven architecture
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Event-driven architecture (EDA)&lt;/strong&gt; is one where the components of the architecture are triggered whenever an event has occurred. My first post on Dev.To explains more about EDA.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/zachjonesnoel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTCEL73H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2MTjnerN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/12ee3aca-f67e-4f08-986f-1bdfd7ca384b.jpg" alt="zachjonesnoel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/zachjonesnoel/what-why-when-event-driven-architecture-4fpa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What? Why? When? Event-driven architecture&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel „Éª Apr 16 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#eventdriven&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#azure&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#decoupled-architecture"&gt;
  &lt;/a&gt;
  Decoupled architecture
&lt;/h4&gt;

&lt;p&gt;Whenever a system is architected, it is designed with the key concept of &lt;strong&gt;decoupling&lt;/strong&gt; where the components of the architecture are not dependent on each other rather it functions as a stand-alone component and communicates whenever required. This exponential removes high dependence between components. And if something fails, it does not disturb the rest of the system. This is also the idea behind &lt;strong&gt;event-driven architecture&lt;/strong&gt; which is extensively adapted in the serverless world.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fifo"&gt;
  &lt;/a&gt;
  FIFO
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;FIFO&lt;/strong&gt; which is abbreviated as &lt;strong&gt;First In First Out&lt;/strong&gt; which preservers the order of messages such that the first message sent is the first message which is delivered. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-sns"&gt;
  &lt;/a&gt;
  What is SNS? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;Amazon Simple Notification Service (SNS)&lt;/a&gt; as the name goes it is a notification service which works on the &lt;em&gt;publisher-subscriber (Pub/Sub)&lt;/em&gt; messaging model. This is a fully managed messaging service for application integrations. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbL5_A7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpxw28l9m23gh8th20d8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbL5_A7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpxw28l9m23gh8th20d8.png" alt="Pub/Sub" width="613" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-concepts-of-pubsub-"&gt;
  &lt;/a&gt;
  The concepts of Pub/Sub -
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Topic&lt;/strong&gt; : A common medium/channel for the message delivery between a &lt;em&gt;publisher&lt;/em&gt; and &lt;em&gt;subscriber&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Message&lt;/strong&gt; : The serialized message which the publisher sends to the &lt;em&gt;topic&lt;/em&gt; without the information as to who are the &lt;em&gt;subscribers&lt;/em&gt; and what is the action done after receiving the message.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Publisher&lt;/strong&gt; : The component which &lt;em&gt;sends/publishes&lt;/em&gt; the &lt;em&gt;message&lt;/em&gt; to a specific &lt;em&gt;topic&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Subscriber&lt;/strong&gt; : The component which has &lt;em&gt;subscribed/registered&lt;/em&gt; to listen for any incoming message from a specific &lt;em&gt;topic&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SNS facilitates with &lt;em&gt;publishers&lt;/em&gt; from external or triggered from AWS Services such as &lt;a href="https://aws.amazon.com/eventbridge/"&gt;EventBridge&lt;/a&gt; or triggers from &lt;a href="https://aws.amazon.com/s3/"&gt;S3&lt;/a&gt; object events, &lt;a href="https://aws.amazon.com/lambda/"&gt;Lambda fns&lt;/a&gt; and many more or it could be involved programmatically with &lt;code&gt;sns:publish&lt;/code&gt; which publish to a designated &lt;em&gt;topic&lt;/em&gt; and all the &lt;em&gt;subscribers&lt;/em&gt; to that specific &lt;em&gt;topic&lt;/em&gt; receives the message. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#key-features-of-sns"&gt;
  &lt;/a&gt;
  Key features of SNS
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pub/Sub model&lt;/strong&gt; makes it really easy to integrate with an existing application. &lt;/li&gt;
&lt;li&gt;The types of &lt;em&gt;topics&lt;/em&gt; offered by SNS are - &lt;strong&gt;Standard Topics&lt;/strong&gt; and &lt;strong&gt;FIFO Topics&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multiple publisher&lt;/strong&gt; supported with AWS services natively such as &lt;a href="https://aws.amazon.com/s3/"&gt;S3&lt;/a&gt;, &lt;a href="https://aws.amazon.com/eventbridge/"&gt;EventBridge&lt;/a&gt;, &lt;a href="https://aws.amazon.com/sqs/"&gt;SQS&lt;/a&gt;and also for application integration and programmatic integration for publishing message to a topic.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multiple subscribers&lt;/strong&gt; are supported for a topic which could be &lt;a href="https://aws.amazon.com/lambda/"&gt;Lambda fns&lt;/a&gt;, &lt;a href="https://aws.amazon.com/sqs/"&gt;SQS&lt;/a&gt;, &lt;a href="https://aws.amazon.com/kinesis/"&gt;Kinesis&lt;/a&gt;, HTTP endpoint. The subscribers are not only limited to applications but also &lt;em&gt;email notifications&lt;/em&gt;, &lt;em&gt;push notifications&lt;/em&gt; on the mobile apps and &lt;em&gt;SMS messages&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/blogs/compute/simplify-pubsub-messaging-with-amazon-sns-message-filtering/"&gt;&lt;strong&gt;Attribute based filtering&lt;/strong&gt;&lt;/a&gt; is supported on a topic where you can filter the message based on the message's attribute where the subscribers uses a &lt;em&gt;subscription filter policy&lt;/em&gt; based on which the message is delivered to the satisfying subscriber. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Message encryption&lt;/strong&gt; is considered an important aspect for any messaging service, this is achieved with &lt;a href="https://aws.amazon.com/kms/"&gt;AWS Key Management System&lt;/a&gt; which uses the &lt;em&gt;customer master key (CMK)&lt;/em&gt; and &lt;em&gt;256-bit AES-GCM algorithm&lt;/em&gt; to encrypt the message in rest and the message is decrypted when the subscribers receive the message.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;SNS pricing is categorized with &lt;em&gt;type of topic&lt;/em&gt; and the &lt;em&gt;sms&lt;/em&gt; cost. &lt;br&gt;
SMS messages are modeled as &lt;em&gt;pay-as-you-go&lt;/em&gt; for both &lt;em&gt;transactional&lt;/em&gt; and &lt;em&gt;promotional&lt;/em&gt; messages. Due to geographic restrictions and also international SMS cost would apply. &lt;br&gt;
Based on topic cost is - &lt;br&gt;
&lt;em&gt;Standard topic&lt;/em&gt; has first 1 million requests per month free and $0.50 per 1 million requests thereafter&lt;br&gt;
&lt;em&gt;FIFO topic&lt;/em&gt; has &lt;code&gt;Publish&lt;/code&gt; API requests $0.30 per 1 million and $0.017 per GB of payload data. &lt;code&gt;Subscription&lt;/code&gt; messages are $0.01 per 1 million and $0.001 per GB of payload data.&lt;br&gt;
More details available in &lt;a href="https://aws.amazon.com/sns/pricing/"&gt;SNS Pricing&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-sqs"&gt;
  &lt;/a&gt;
  What is SQS? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sqs/"&gt;Amazon Simple Queue Service (SQS)&lt;/a&gt; is the message queuing service. This fully-managed service helps applications which leverages &lt;em&gt;serverless architectures&lt;/em&gt;, &lt;em&gt;micro-services architectures&lt;/em&gt; and &lt;em&gt;distributed services&lt;/em&gt; to design and architect a perfect decoupled application. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Amo5MGOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6701ava6rqcsjtmlftqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amo5MGOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6701ava6rqcsjtmlftqt.png" alt="SQS" width="531" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#key-features-of-sns"&gt;
  &lt;/a&gt;
  Key features of SNS
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Types of &lt;em&gt;queues&lt;/em&gt; offered by SQS - &lt;strong&gt;Standard Queue&lt;/strong&gt; and &lt;strong&gt;FIFO Queue&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dead Letter Queue (DLQ)&lt;/strong&gt; supported for the messages which are not processed. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Message encryption&lt;/strong&gt; with &lt;a href="https://aws.amazon.com/kms/"&gt;AWS Key Management System&lt;/a&gt; is supported where the message is encrypted as soon as it is pushed into the queue and encrypted until in the queue whereas it is decrypted when sent to the consumer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Long polling&lt;/strong&gt; helps reducing the cost of explicit polling. The long polling request can wait upto 20 seconds until the next message is received when the queue is empty.&lt;/li&gt;
&lt;li&gt;Recently, AWS announced SQS Queues can be trigger Lambda functions which belong to another AWS Account.
&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTCEL73H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2MTjnerN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/12ee3aca-f67e-4f08-986f-1bdfd7ca384b.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/sqs-queue-with-across-account-lambda-triggers-4job" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;SQS Queue with a cross-account Lambda triggers&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel for AWS Community Builders  „Éª Oct 10 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sqs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#lambdafunction&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#triggers&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;SQS has the free tier with 1 million SQS requests free and after which the cost is categorized with the &lt;em&gt;type of queue per million requests&lt;/em&gt;.&lt;br&gt;
More details available in &lt;a href="https://aws.amazon.com/sqs/pricing/"&gt;SQS Pricing&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sns</category>
      <category>sqs</category>
      <category>aws</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Learning Svelte Part #4</title>
      <author>Alessandro</author>
      <pubDate>Sun, 14 Nov 2021 18:44:14 +0000</pubDate>
      <link>https://dev.to/alessandrogiuzio/learning-svelte-part-4-155m</link>
      <guid>https://dev.to/alessandrogiuzio/learning-svelte-part-4-155m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#props-and-components"&gt;
  &lt;/a&gt;
  Props and Components
&lt;/h2&gt;

&lt;p&gt;Hello developers, welcome back to my series of articles about my journey to learn Svelte, this is my 4th post about it, and so far it‚Äôs very helpful for my learning, writing down my steps make it public make a good contribution to my knowledge.&lt;/p&gt;

&lt;p&gt;Today I am writing about Props and Components.&lt;/p&gt;

&lt;p&gt;Normally, a Svelte website is made with of many different components: App.svelte, Header.svelte, Content.svelte, Footer.svelte and so on. &lt;br&gt;
All this components will be structured to make up the full page, the root component it‚Äôs the App.svelte, this component will be directly deployed in the Dom by the main.JS file.&lt;/p&gt;

&lt;p&gt;We will nest all the others components with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SEmQ9LYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikujhpxpf5hked6f6dnm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEmQ9LYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikujhpxpf5hked6f6dnm.png" alt="Svelte components structure" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The question is: why we need to split our webapp in so many different pieces and not write all the code in the App.svelte root component?&lt;br&gt;
The main reason is to keep your code easy to read, tidy and modular.&lt;br&gt;
 Imagine we put everything in one module, the chances that our code will be disorganized are very high.&lt;/p&gt;

&lt;p&gt;Another reason to split in different modules is that with this method we can easily reuse it, we can create components to use whenever we need.&lt;/p&gt;

&lt;p&gt;We can easily import our components in the App.svelte  using the syntax import&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--73Q98L25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5je3lsnog2qy3xmc0cmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--73Q98L25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5je3lsnog2qy3xmc0cmf.png" alt="Script hero" width="595" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And then we will display it in our  HTML like in the follow example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPWzi8Iq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyzubw0y8283hlo6bq6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPWzi8Iq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyzubw0y8283hlo6bq6n.png" alt="hero" width="634" height="101"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to change any data in the reused component, we can do that, using props.&lt;/p&gt;

&lt;p&gt;How can we pass props to a component?&lt;/p&gt;

&lt;p&gt;We need to declare the props we want to pass in, in the component itself, we can call it how we like it and we need to set it to a value that ca be: a string, an object, could be an integer. When the components it‚Äôs created it will read the props and the value&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4pSxXvJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5mxcy99yy3w8iu77c2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pSxXvJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5mxcy99yy3w8iu77c2r.png" alt="properties " width="632" height="102"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To access the prop inside the Footer component we need to declare that we are going to use that variable called ‚Äúprop‚Äù (you can name it how you like most) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kM1MnkAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsbtde7r3rf66x2xwp4y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kM1MnkAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsbtde7r3rf66x2xwp4y.png" alt="Image description" width="633" height="255"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We declare the variable ‚Äúprop‚Äù,  and set to ‚Äúexport‚Äù , so now this way we can access the value outside the component.&lt;/p&gt;

&lt;p&gt;That‚Äôs it for my contribution today, it‚Äôs difficult for me write in English but I will keep going, please feel free to leave a comment and roast my explanation.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>LeetCode - Symmetric tree</title>
      <author>Alkesh Ghorpade</author>
      <pubDate>Sun, 14 Nov 2021 18:28:30 +0000</pubDate>
      <link>https://dev.to/_alkesh26/leetcode-symmetric-tree-35kf</link>
      <guid>https://dev.to/_alkesh26/leetcode-symmetric-tree-35kf</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem statement
&lt;/h3&gt;

&lt;p&gt;Given the &lt;em&gt;root&lt;/em&gt; of a binary tree, &lt;em&gt;check whether it is a mirror of itself&lt;/em&gt; (i.e., symmetric around its center).&lt;/p&gt;

&lt;p&gt;Problem statement taken from: &lt;a href="https://leetcode.com/problems/symmetric-tree"&gt;&lt;/a&gt;&lt;a href="https://leetcode.com/problems/symmetric-tree"&gt;https://leetcode.com/problems/symmetric-tree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BUMplDQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alkeshghorpade.me/symmetric-tree1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BUMplDQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alkeshghorpade.me/symmetric-tree1.png" alt="Container" width="354" height="291"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = [1, 2, 2, 3, 4, 4, 3]
Output: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rgE4OcW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alkeshghorpade.me/symmetric-tree2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgE4OcW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alkeshghorpade.me/symmetric-tree2.png" alt="Container" width="308" height="258"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = [1, 2, 2, null, 3, null, 3]
Output: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Constraints&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- The number of nodes in the tree is in the range [1, 1000].
- -100 &amp;lt;= Node.val &amp;lt;= 100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#recursive-function"&gt;
  &lt;/a&gt;
  Recursive function
&lt;/h4&gt;

&lt;p&gt;When it comes to solving problems related to trees, recursion is the best choice. If not recursion, the iterative approach will use queues.&lt;/p&gt;

&lt;p&gt;Let's explore a simple recursive approach in this blog. The approach is to use two pointers as arguments that points&lt;br&gt;
to the root of the tree. The first pointer will move left and second will move right and verify if the nodes are same or not.&lt;/p&gt;

&lt;p&gt;Let's check the algorithm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// main function
- call recursive function areSymmetric(root, root)

// areSymmetric function(root1, root2)
- if !root1 &amp;amp;&amp;amp; !root2
  - return true
- else
  - if root1 &amp;amp;&amp;amp; root2
    - if root1-&amp;gt;val == root2-&amp;gt;val
      - return areSymmetric(root1-&amp;gt;left, root2-&amp;gt;right) &amp;amp;&amp;amp; areSymmetric(root1-&amp;gt;right, root2-&amp;gt;left)

- return false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#c-solution"&gt;
  &lt;/a&gt;
  C++ solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#golang-solution"&gt;
  &lt;/a&gt;
  Golang solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Val&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;isSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#javascript-solution"&gt;
  &lt;/a&gt;
  Javascript solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;areSymmetric&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;root2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isSymmetric&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;areSymmetric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dry-run our algorithm to see how the solution works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = [1, 2, 2, 3, 4, 4, 3]

// in main function
Step 1: return areSymmetric(root, root)

// in areSymmetric function
Step 2: if !root1 &amp;amp;&amp;amp; !root2
          - root1 != nil
            1 != nil
            true

          - root2 != nil
            1 != nil
            true

          - !true &amp;amp;&amp;amp; !true
          - false

        else
          if root1 &amp;amp;&amp;amp; root2
            - 1 &amp;amp;&amp;amp; 1
            - true

            if root1-&amp;gt;val == root2-&amp;gt;val
               - 1 == 1
               - true

               return areSymmetric(root1-&amp;gt;left, root2-&amp;gt;right) &amp;amp;&amp;amp; areSymmetric(root1-&amp;gt;right &amp;amp;&amp;amp; root2-&amp;gt;left)
               return areSymmetric(2, 2) &amp;amp;&amp;amp; areSymmetric(2, 2)

               // we will ignore the 2nd condition here, since both are same.
               // In actual recursive call it will be evaluated.

Step 3: if !root1 &amp;amp;&amp;amp; !root2
          - root1 != nil
            2 != nil
            true

          - root2 != nil
            2 != nil
            true

          - !true &amp;amp;&amp;amp; !true
          - false

        else
          if root1 &amp;amp;&amp;amp; root2
            - 2 &amp;amp;&amp;amp; 2
            - true

            if root1-&amp;gt;val == root2-&amp;gt;val
               - 2 == 2
               - true

            return areSymmetric(root1-&amp;gt;left, root2-&amp;gt;right) &amp;amp;&amp;amp; areSymmetric(root1-&amp;gt;right &amp;amp;&amp;amp; root2-&amp;gt;left)
            return areSymmetric(3, 3) &amp;amp;&amp;amp; areSymmetric(4, 4)

// areSymmetric(3, 3)
Step 4: if !root1 &amp;amp;&amp;amp; !root2
          - root1 != nil
            3 != nil
            true

          - root2 != nil
            3 != nil
            true

          - !true &amp;amp;&amp;amp; !true
          - false

        else
          if root1 &amp;amp;&amp;amp; root2
            - 3 &amp;amp;&amp;amp; 3
            - true

            if root1-&amp;gt;val == root2-&amp;gt;val
               - 3 == 3
               - true

            return areSymmetric(root1-&amp;gt;left, root2-&amp;gt;right) &amp;amp;&amp;amp; areSymmetric(root1-&amp;gt;right &amp;amp;&amp;amp; root2-&amp;gt;left)
            return areSymmetric(nil, nil) &amp;amp;&amp;amp; areSymmetric(nil, nil)

// areSymmetric(nil, nil)
Step 5: if !root1 &amp;amp;&amp;amp; !root2
          - root1 != nil
            nil != nil
            false

          - root2 != nil
            nil != nil
            false

          - !false &amp;amp;&amp;amp; !false
          - true

// areSymmetric(4, 4)
Step 6: if !root1 &amp;amp;&amp;amp; !root2
          - root1 != nil
            4 != nil
            true

          - root2 != nil
            4 != nil
            true

          - !true &amp;amp;&amp;amp; !true
          - false

        else
          if root1 &amp;amp;&amp;amp; root2
            - 4 &amp;amp;&amp;amp; 4
            - true

            if root1-&amp;gt;val == root2-&amp;gt;val
               - 4 == 4
               - true

            return areSymmetric(root1-&amp;gt;left, root2-&amp;gt;right) &amp;amp;&amp;amp; areSymmetric(root1-&amp;gt;right &amp;amp;&amp;amp; root2-&amp;gt;left)
            return areSymmetric(nil, nil) &amp;amp;&amp;amp; areSymmetric(nil, nil)

            // areSymmetric(nil, nil) returns true
            // so we move back from step 6 to step 5 till step 2 and evaluate

            return areSymmetric(root1-&amp;gt;left, root2-&amp;gt;right) &amp;amp;&amp;amp; areSymmetric(root1-&amp;gt;right &amp;amp;&amp;amp; root2-&amp;gt;left)

            // which is true

So the answer we return is true.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>leetcode</category>
      <category>cpp</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Writing tests for CLI tool</title>
      <author>Emily</author>
      <pubDate>Sun, 14 Nov 2021 18:27:00 +0000</pubDate>
      <link>https://dev.to/hphan9/writing-tests-for-cli-tool-3p6b</link>
      <guid>https://dev.to/hphan9/writing-tests-for-cli-tool-3p6b</guid>
      <description>&lt;p&gt;This week, I was working on writing tests for my Shinny-SSG project. It was the most challenging lab in the OSD600 course since I had to modify both my code and my project's folder structure to implement the tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Set-up
&lt;/h2&gt;

&lt;p&gt;The testing framework that I chose is &lt;a href="https://xunit.net/"&gt;XUnit&lt;/a&gt;. The first reason is that it is trendy compared to another test framework such as NUnits. I created test method stubs from the existing code by &lt;a href="https://docs.microsoft.com/en-us/visualstudio/test/create-unit-tests-menu?view=vs-2022"&gt;Create Unit Tests&lt;/a&gt; command. To use it with Xunit, I have to implement the XUnit.net.TestGenerator extension to my project. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PVfbgY50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hx3nbipf2axkmrpzmeh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVfbgY50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hx3nbipf2axkmrpzmeh4.png" alt="Image description" width="880" height="365"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges
&lt;/h2&gt;

&lt;p&gt;I want to test how my tools generated files and folders in the destination with different arguments passed to the program. However, in my old code, I put all the logic of working with arguments in the &lt;code&gt;static int main( string[] args)&lt;/code&gt; function. I could not use Interface and Dependency injection to mock the CommandLineApplication because CommandLineUtils does not have an interface for this class. Luckily, I found this &lt;a href="https://github.com/natemcmaster/CommandLineUtils/issues/279"&gt;guidance&lt;/a&gt; from the owner of CommandLineUtils, and he advised that "Split the command-line argument parser and application execution into separate class structures" to test various options programmatically. It is a great suggestion, and I rewrote my program by adding class &lt;a href="https://github.com/hphan9/shinny-ssg/blob/main/shinny-ssg/src/CommandLineOptions.cs"&gt;CommandLineOptions&lt;/a&gt; and adding logic to the constructor of class Generator. I can kill two birds with one stone by this change: code refactoring and writing better tests.&lt;br&gt;&lt;br&gt;
Another problem I had was my folder structure. Before, I put the project's sln file, .git file , and src files in the root of the folder. However, when I added a new test project for Shinny-SSG, I had it outside my git folder, and it would be impossible to commit the change and put it in my remote repository. To resolve that, I had to change my folder structure to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;C:.
‚îú‚îÄ‚îÄ‚îÄshinny-ssg
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄbin
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄDebug
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄnetcoreapp3.1
‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ‚îÄdist
‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ‚îÄpublish
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄDestination
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄRelease
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ‚îÄnetcoreapp3.1
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄobj
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ‚îÄDebug
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄnetcoreapp3.1
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄRelease
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ‚îÄnetcoreapp3.1
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄProperties
‚îÇ   ‚îî‚îÄ‚îÄ‚îÄsrc
‚îî‚îÄ‚îÄ‚îÄshinny-ssgTests
    ‚îú‚îÄ‚îÄ‚îÄbin
    ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄDebug
    ‚îÇ       ‚îú‚îÄ‚îÄ‚îÄ.netcoreapp,version&lt;span class="o"&gt;=&lt;/span&gt;v3.1  
    ‚îÇ       ‚îî‚îÄ‚îÄ‚îÄnetcoreapp3.1
    ‚îú‚îÄ‚îÄ‚îÄobj
    ‚îÇ   ‚îî‚îÄ‚îÄ‚îÄDebug
    ‚îÇ       ‚îú‚îÄ‚îÄ‚îÄ.netcoreapp,version&lt;span class="o"&gt;=&lt;/span&gt;v3.1
    ‚îÇ       ‚îî‚îÄ‚îÄ‚îÄnetcoreapp3.1
    ‚îî‚îÄ‚îÄ‚îÄsrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;I wrote 3 test for Generator class &lt;code&gt;run()&lt;/code&gt; function that cover 3 different cases: config file option, input path option and invalid input path option. My tests help uncovering a huge bug in my application. Before, I thought that &lt;code&gt;default&lt;/code&gt; keyword was used to specified the default value of a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt; &lt;span class="n"&gt;cssUrl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cssOption&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HasValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;cssOption&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, the &lt;code&gt;default&lt;/code&gt; literal is for producing the default value of a type that is null in this case ( CssUrl is the &lt;code&gt;string&lt;/code&gt; type).&lt;br&gt;
I also wrote a test that testes the core feature of my application: Given a text and checked if the generated HTML value matched the expected output.&lt;br&gt;
&lt;a href="https://github.com/hphan9/shinny-ssg/commit/23c766a759bc52f1889d78c578da2b29cbb0a248#diff-765ec9ae5392385dc6cb44e7fb9af38ebf78e87a463546cfd86d7d42590341e3"&gt;Pull request&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Throughout this experience, I learn a lot about software testing and why it is essential for software development. In the future, I will implement more tests for my project and explore other test frameworks. &lt;/p&gt;

</description>
      <category>cshap</category>
      <category>testing</category>
      <category>opensource</category>
    </item>
    <item>
      <title>.Net Core vs NodeJS (Resumen)</title>
      <author>Ariel Calix</author>
      <pubDate>Sun, 14 Nov 2021 18:19:01 +0000</pubDate>
      <link>https://dev.to/arielcalix/net-core-vs-nodejs-resumen-275h</link>
      <guid>https://dev.to/arielcalix/net-core-vs-nodejs-resumen-275h</guid>
      <description>&lt;p&gt;Hola Amigos y bienvenidos a este vs entre dos tecnolog√≠as, en esta ocasion haremos un resumen de los que hemos venido Hablando.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-o-net-core"&gt;
  &lt;/a&gt;
  ¬øNodeJS o .Net Core?
&lt;/h2&gt;

&lt;p&gt;Como lo hemos dicho anteriormente, hablar de cada una y confrontarlas no es que queramos hacerte usar una o la otra, por el contrario, que tengas un panorama m√°s amplio sobre cada una y los proyectos que pueden realizar en cada uno para que as√≠ completes el proyecto sin problemas, cada una tiene sus bondades para un proyecto en espec√≠fico que la otra no posea y viceversa, queda a tu elecci√≥n cual usar. Solamente ten en cuenta que para el lado web, tanto a nivel de cliente como servidor NodeJS es bastante rapido lo que lo hace un gran candidato y ganador es ese ambito, mientras que en proyectos transaccionales .Net Core se lleva el premio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ventajas"&gt;
  &lt;/a&gt;
  Ventajas
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;.Net Core&lt;/th&gt;
&lt;th&gt;NodeJS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Es Multiplataforma&lt;/td&gt;
&lt;td&gt;Es multiplataforma&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sistema de almacenamiento en cache confiable&lt;/td&gt;
&lt;td&gt;Base de C√≥digo √∫nica y potente&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Implementacion y mantenimiento flexible y sencillo&lt;/td&gt;
&lt;td&gt;Escalabilidad e implementaci√≥n seguras&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#desventajas"&gt;
  &lt;/a&gt;
  Desventajas
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;.Net Core&lt;/th&gt;
&lt;th&gt;NodeJS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Soporte relacional de objetos limitado&lt;/td&gt;
&lt;td&gt;Bloqueo de E/S&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;La brecha entre el lanzamiento y la estabilidad&lt;/td&gt;
&lt;td&gt;Estandarizaci√≥n de librerias.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#tipos-de-proyectos"&gt;
  &lt;/a&gt;
  Tipos de Proyectos
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;.Net Core&lt;/th&gt;
&lt;th&gt;NodeJS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Web, mismas que pueden ser desplegadas en Windows, Linux o Mac OS&lt;/td&gt;
&lt;td&gt;Aplicaciones de chat en tiempo real&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Aplicaciones con Docker, en cualquiera de las nubes ya sea (Azure, AWS o GCP)&lt;/td&gt;
&lt;td&gt;Aplicaciones web&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Aplicaciones de Escritorio UWP lo que permite que tus apps sean ejecutadas en Windows 10, XBOX y HoloLens&lt;/td&gt;
&lt;td&gt;Servicios de API Rest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IoT&lt;/td&gt;
&lt;td&gt;IoT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IA&lt;/td&gt;
&lt;td&gt;Streaming de datos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Desarrollo de juegos&lt;/td&gt;
&lt;td&gt;Aplicaciones complejas de una sola P√°gina&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;En resumen, cada una de ellas est√° en continuo desarrollo para el soporte de distintos proyectos y arquitecturas, queda de t√≠ implementarlos de la mejor forma.&lt;/p&gt;

&lt;p&gt;Me despedido, y espero les agrade este vs, espero sus comentarios.&lt;/p&gt;

&lt;p&gt;Imagen por &lt;a href="https://unsplash.com/@m4r1vs?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Marius Niveri&lt;/a&gt; en &lt;a href="https://unsplash.com/@m4r1vs?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>netcore</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to deploy any Python Web Application?</title>
      <author>Abhijith Ganesh</author>
      <pubDate>Sun, 14 Nov 2021 18:17:01 +0000</pubDate>
      <link>https://dev.to/abhijithganesh/how-to-deploy-any-python-web-application-1707</link>
      <guid>https://dev.to/abhijithganesh/how-to-deploy-any-python-web-application-1707</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey everyoneüë®‚Äçüíª&lt;/em&gt;&lt;br&gt;
In this blog post I will explain how you can deploy any &lt;em&gt;ASGI/WSGI compliant Python Web App.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Only ASGI Compliant Frameworks can be deployed using this method, other frameworks can't be deployed.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#list-of-tools-i-will-be-using"&gt;
  &lt;/a&gt;
  List of Tools I will be using:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NGINX&lt;/li&gt;
&lt;li&gt;Hypercorn&lt;/li&gt;
&lt;li&gt;FastAPI&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#now-here-there-are-alternatives-to-hypercorn-and-fastapi"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Now here, there are alternatives to Hypercorn and FastAPI&lt;/strong&gt;
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#alternatives-to-hypercorn"&gt;
  &lt;/a&gt;
  Alternatives to Hypercorn:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Gunicorn&lt;/li&gt;
&lt;li&gt;Uvicorn&lt;/li&gt;
&lt;li&gt;Daphne&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#other-frameworks-that-can-be-deployed"&gt;
  &lt;/a&gt;
  Other Frameworks that can be deployed:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Starlette&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Any ASGI/WSGI compliant framework&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-one"&gt;
  &lt;/a&gt;
  Step One:
&lt;/h3&gt;

&lt;p&gt;Setup your framework using the docs mentioned.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//docs.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I'll be using FastAPI, my &lt;code&gt;main.py&lt;/code&gt; looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üöÄ We now have a FastAPI app ready, we now have to deploy it using &lt;em&gt;NGINX&lt;/em&gt;. ‚öôÔ∏è&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-two"&gt;
  &lt;/a&gt;
  Step Two:
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Depending upon your framework and choice of ASGI/WSGI Server, this process will be slightly different.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;For Django Devs:&lt;/u&gt; &lt;/p&gt;

&lt;p&gt;Your wsgi/asgi application would be called as &lt;code&gt;&amp;lt;application_name&amp;gt;.&amp;lt;a/w&amp;gt;sgi:application&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Choose ASGI or WSGI clearly and stay with that option throughout&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt; For Flask Devs:&lt;/u&gt; &lt;/p&gt;

&lt;p&gt;If your app is in main.py, it would be called as &lt;code&gt;main:app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this step we'll be binding the web-server to UNIX socket. Learn more about UNIX Sockets. &lt;a href="https://www.ibm.com/docs/en/ztpf/1.1.0.15?topic=considerations-unix-domain-sockets"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am attaching the docs of Daphne, Uvicorn and Gunicorn down which use different flags to bind the application to a port.&lt;/p&gt;

&lt;p&gt;Run this command to bind it to the socket&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;hypercorn &lt;span class="nt"&gt;-b&lt;/span&gt; &lt;span class="s1"&gt;'unix:/var/tmp/hypercorn.sock'&lt;/span&gt; &lt;span class="nt"&gt;-w&lt;/span&gt; 4 main:app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this &lt;code&gt;-w&lt;/code&gt; defines the number of workers.&lt;br&gt;
Change &lt;code&gt;hypercorn.sock&lt;/code&gt; to the server which you choose to use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Change the socket name according to your web server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üéá Now we have our app listening on the &lt;code&gt;hypercorn.sock&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-three"&gt;
  &lt;/a&gt;
  Step Three:
&lt;/h3&gt;

&lt;p&gt;We've to proxy this socket to &lt;em&gt;NGINX&lt;/em&gt; and route &lt;em&gt;NGINX&lt;/em&gt; to listen to the &lt;code&gt;hypercorn&lt;/code&gt; socket.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;worker_processes&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;worker_connections&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="n"&gt;/var/log/nginx/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;error_log&lt;/span&gt; &lt;span class="n"&gt;/var/log/error.log&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://unix:/var/tmp/hypercorn.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll briefly explain this config file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Worker_processes =&amp;gt; 1 worker process has been assigned for this specific task/process&lt;/li&gt;
&lt;li&gt;Worker connections =&amp;gt; Number of connections that can be handled by 1 process&lt;/li&gt;
&lt;li&gt;Listen =&amp;gt; Listens at the mentioned port&lt;/li&gt;
&lt;li&gt;Server Name =&amp;gt; Listens at this domain&lt;/li&gt;
&lt;li&gt;Access_log =&amp;gt; The file location at which access log is stored, access log stores requests made&lt;/li&gt;
&lt;li&gt;Error_log =&amp;gt; The file location at which error log is stored.&lt;/li&gt;
&lt;li&gt;Proxy Pass =&amp;gt; The socket/port which needs to be proxied.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;This file should change based on your socket but the other configuration can be the same.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üöÖ Save this file as nginx.conf&lt;/p&gt;

&lt;p&gt;Feel free to read about &lt;em&gt;NGINX&lt;/em&gt; &lt;a href="https://nginx.org/en/docs/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this file is made, save it at &lt;code&gt;/etc/nginx/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Either you can use docker to run a Linux server or shell into an instance.&lt;/p&gt;

&lt;p&gt;If you want to copy it to docker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; nginx.conf /etc/nginx/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üí£ You are ready to launch except one last step&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-four"&gt;
  &lt;/a&gt;
  Step four
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You have now wonderfully setup your web-server and the NGINX proxy üôå&lt;/li&gt;
&lt;li&gt;You are just one-step away from accessing the port, and perhaps this is the ‚úÖ or ‚ùå step&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, NGINX can't read or write from the socket, so we need to &lt;code&gt;change access mode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To do this, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chmod &lt;/span&gt;777 /var/tmp/&amp;lt;socket&amp;gt; 
&lt;span class="nb"&gt;sudo &lt;/span&gt;service nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üåüNow you can listen from the port 8080, &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you are using systemctl, please use this command instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Play around with NGINX config as you wish based on your application's requirements.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks for readingüßë‚ÄçüöÄ&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#docs"&gt;
  &lt;/a&gt;
  Docs:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.uvicorn.org/deployment/#running-behind-nginx"&gt;Uvicorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.gunicorn.org/en/stable/deploy.html"&gt;Gunicorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/django/daphne"&gt;Daphne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>nginx</category>
      <category>hypercorn</category>
    </item>
    <item>
      <title>Generate your own favourite TV episode using python</title>
      <author>Yash Makan</author>
      <pubDate>Sun, 14 Nov 2021 17:47:07 +0000</pubDate>
      <link>https://dev.to/yash_makan/generate-your-own-favourite-tv-episode-using-python-1pb3</link>
      <guid>https://dev.to/yash_makan/generate-your-own-favourite-tv-episode-using-python-1pb3</guid>
      <description>&lt;p&gt;I started watching "Friends" during lunch. I was not able to find any new episodes that I don't remember as I have already watched all the episodes once. I am sure that this situation must have happened with you guys too when you started scrolling like what to watch. Don't worry at all...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RjWBKNAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxjpbibfnmqi300bgm0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RjWBKNAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxjpbibfnmqi300bgm0j.png" alt="don't worry at all" width="580" height="566"&gt;&lt;/a&gt;&lt;br&gt;
In today's blog we are going to develop our own screenwriter bot which will write scripts for any TV show you like. So without any further due let's dive in.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HU_l0f7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1djms656xkc6jpvw9ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HU_l0f7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1djms656xkc6jpvw9ui.png" alt="dive in" width="580" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;We are going to use one of the most popular python libraries for machine learning that is transformers. Here we will provide a beginning of the episode and the program will complete the program with the maximum length provided below is an image representing the same procedure.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oi-HtFpi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e3cljs3luoo1fzm3pzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oi-HtFpi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e3cljs3luoo1fzm3pzu.png" alt="how it works" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#procedure"&gt;
  &lt;/a&gt;
  Procedure
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a python file named &lt;code&gt;utils.py&lt;/code&gt; and start writing code. Let's first import the needed dependencies for the project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jgFi96O7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxu7t3guvo3y612vcnd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jgFi96O7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxu7t3guvo3y612vcnd9.png" alt="imports" width="880" height="124"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;here we are importing transformers to load the model and the tokenizer from hugging face and also we are importing os to check if the model and tokenizer are already installed in the directory or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then make a function named &lt;code&gt;load_model&lt;/code&gt; which will load the model and tokenizer. Both model and tokenizer are required to generate results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46UoEQZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnf6ol5ec6vbmhm5dno7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46UoEQZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnf6ol5ec6vbmhm5dno7.png" alt="Load model and tokenizer" width="880" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here the program will check if the tokenizer and model are installed in the system or not. When you run the program for the first time then it will download the model and tokenizer from humming face i.e &lt;code&gt;cpierse/gpt2_film_scripts&lt;/code&gt; and store them locally in the system so that next time you don't have to install it again. After that, it's simply returning the tokenizer and model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After this, we will be making a function for generating the script.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OXnUtUJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6edb7uefkgph3g3pp5zj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OXnUtUJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6edb7uefkgph3g3pp5zj.png" alt="generate model" width="880" height="705"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this function, we trained the model and now using &lt;code&gt;model.generate()&lt;/code&gt; we are getting the script. As you can see the model.generate() function takes &lt;code&gt;max_length&lt;/code&gt; and &lt;code&gt;input_ids&lt;/code&gt; which is nothing but the context of the initial script provided.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After this, create another python file and name it as main.py. Here add the following code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3SXxW1G1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hffz5awevr2njlv6iify.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SXxW1G1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hffz5awevr2njlv6iify.png" alt="main.py" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;main.py&lt;/code&gt; file, we are importing the load_model and generating functions from &lt;code&gt;utils.py&lt;/code&gt; and simply calling the functions to get the result.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;The results below are generated in 93 seconds on my pc with 500 as max length. The left side is the input initial script and the right side is the generated script.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCk29nmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kl52vh6m5qh9otqy11ed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCk29nmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kl52vh6m5qh9otqy11ed.png" alt="Results" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Now obviously the results are not that amazing but still, it's a great program which can write screenplays like humans. This project is just made for a fun time and I thought will be worth sharing with the community. &lt;/p&gt;

&lt;p&gt;Also if you are angry with me to adding the images instead of the code then don't worry. Below, you will find the github repo in the references. Also I would love to thank you guys for reading this blog. will surely return again with other exciting content. Till then b-bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TEhHb-Db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmplklrqb9kxplf4byk3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TEhHb-Db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmplklrqb9kxplf4byk3.gif" alt="bye bye" width="498" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/YashMakan/blog-1"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Yash_Makan"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>transformers</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>O que √© micro front end?</title>
      <author>Jo√£o Pedro Resende</author>
      <pubDate>Sun, 14 Nov 2021 17:43:29 +0000</pubDate>
      <link>https://dev.to/jpbrab0/o-que-e-micro-front-end-4kci</link>
      <guid>https://dev.to/jpbrab0/o-que-e-micro-front-end-4kci</guid>
      <description>&lt;p&gt;Ol√° pessoal, neste artigo vou explicar um pouco sobre o micro &lt;em&gt;front-end&lt;/em&gt; e as vantagens que ele proporciona.&lt;/p&gt;

&lt;p&gt;Antes de realmente explicar o que √© micro front-end, vamos entender alguns outros conceitos como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monolitos&lt;/li&gt;
&lt;li&gt;Separa√ß√£o do &lt;em&gt;front-end&lt;/em&gt; e &lt;em&gt;back-end&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Conceito de microsservi√ßos&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#monolitos"&gt;
  &lt;/a&gt;
  Monolitos
&lt;/h2&gt;

&lt;p&gt;Uma aplica√ß√£o monol√≠tica consiste em um &lt;em&gt;codebase&lt;/em&gt; centralizado em uma √∫nica unidade, ou seja, &lt;em&gt;back-end&lt;/em&gt; e &lt;em&gt;front-end&lt;/em&gt; em um √∫nico reposit√≥rio. N√£o h√° distin√ß√£o estrutural de &lt;em&gt;front-end&lt;/em&gt; pra &lt;em&gt;back-end&lt;/em&gt; tudo est√° dentro do mesmo c√≥digo fonte.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U2tb0Fkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlt2gfnf558nxikix702.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U2tb0Fkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlt2gfnf558nxikix702.jpg" alt="Exemplo de monolito" width="880" height="614"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problemas-comuns-em-uma-aplica%C3%A7%C3%A3o-monol%C3%ADtica"&gt;
  &lt;/a&gt;
  Problemas comuns em uma aplica√ß√£o monol√≠tica
&lt;/h3&gt;

&lt;p&gt;Alguns problemas comuns de uma aplica√ß√£o monol√≠tica.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alta complexidade para corrigir &lt;em&gt;bugs&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Dificuldades para implementar novas features&lt;/li&gt;
&lt;li&gt;Alto n√≠vel de interdepend√™ncias no acoplamento de m√≥dulos&lt;/li&gt;
&lt;li&gt;Dificuldades na coordena√ß√£o entre times&lt;/li&gt;
&lt;li&gt;Alto esfor√ßo para integra√ß√£o de novos desenvolvedores&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#separa%C3%A7%C3%A3o-do-frontend-e-backend"&gt;
  &lt;/a&gt;
  Separa√ß√£o do &lt;em&gt;front-end&lt;/em&gt; e &lt;em&gt;back-end&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Com o passar do tempo, o desenvolvimento passou a diferenciar as bases de c√≥digos do &lt;em&gt;back&lt;/em&gt; e &lt;em&gt;front&lt;/em&gt;. Isso ajudou a melhorar o cen√°rio ca√≥tico de c√≥digo que aplica√ß√µes monol√≠ticas traziam. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FXA2TdGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwteh4eowqoi8kfresdo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FXA2TdGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwteh4eowqoi8kfresdo.jpg" alt="Separa√ß√£o do front-end e back-end" width="880" height="636"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Isso permitiu que times conseguissem fazer &lt;em&gt;deploys&lt;/em&gt; sem depender do outro.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microsservi%C3%A7os"&gt;
  &lt;/a&gt;
  Microsservi√ßos
&lt;/h2&gt;

&lt;p&gt;Ainda neste contexto, surgiu o conceito de arquitetura de microsservi√ßos. Quando falamos em microsservi√ßos nos referindo a uma funcionalidade que pode ser dividida em partes menores. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k4HRU5d2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i13msy43uxnlu0psswy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k4HRU5d2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i13msy43uxnlu0psswy.jpg" alt="Microsservi√ßos" width="880" height="545"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Depois de entender esses conceitos podemos, finalmente, falar sobre micro &lt;em&gt;front-ends&lt;/em&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#micro-frontends"&gt;
  &lt;/a&gt;
  Micro &lt;em&gt;front-ends&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Micro &lt;em&gt;Front-end&lt;/em&gt; √© um estilo arquitet√¥nico que separa uma aplica√ß√£o de front em v√°rias camadas menores, cada uma sendo respons√°vel por um m√≥dulo espec√≠fico da aplica√ß√£o, normalmente separadas por dom√≠nios ou contextos de uso, permitindo assim, que diferentes times cuidem dessas funcionalidades de forma independente.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4EV-aVId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3p2phiwxtfaanw9lldx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4EV-aVId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3p2phiwxtfaanw9lldx.png" alt="Exemplo micro front ends" width="880" height="635"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na pr√°tica, neg√≥cios podem separar produtos web em micro &lt;em&gt;front-ends&lt;/em&gt; dividindo seus times de acordo com as funcionalidades dos seus sistemas. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUeLecm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwwwgr5u09pitwhj1lq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUeLecm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwwwgr5u09pitwhj1lq1.png" alt="Exemplo micro front ends" width="851" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por fim algumas vantagens de uma arquitetura &lt;em&gt;micro front-end&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mais facilidade na corre√ß√£o de bugs&lt;/li&gt;
&lt;li&gt;Facilidade na integra√ß√£o de novas pessoas no projeto&lt;/li&gt;
&lt;li&gt;Mais facilidade de implementa√ß√£o de novas &lt;em&gt;features&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Facilidade na coordena√ß√£o entre times&lt;/li&gt;
&lt;li&gt;Times mais independentes&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Obrigado por ler esse artigo at√© aqui!&lt;/p&gt;

&lt;p&gt;Este artigo foi escrito com a ajuda do &lt;strong&gt;Vinicius Morellato&lt;/strong&gt;, siga ele no &lt;a href="https://www.linkedin.com/in/viniciusmorellato/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Me siga nas redes sociais! &lt;a href="https://links.jpres.dev"&gt;https://links.jpres.dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At√© o pr√≥ximo artigo!&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>‘∂’°’∂’£’æ’°’Æ’´÷Å ’§’∏÷Ç’∫’¨’´’Ø’°’ø’∂’•÷Ä ’∞’•’º’°÷Å’∂’•’¨’∏÷Ç ’°’¨’£’∏÷Ä’´’©’¥’∂’•÷Ä</title>
      <author>Arsen Mazmanyan</author>
      <pubDate>Sun, 14 Nov 2021 17:33:56 +0000</pubDate>
      <link>https://dev.to/arsenmazmanyan1104/zangvatsits-dowplikatner-herhatsnelow-algoritmner-1gpk</link>
      <guid>https://dev.to/arsenmazmanyan1104/zangvatsits-dowplikatner-herhatsnelow-algoritmner-1gpk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#%D5%A2%D5%A1%D6%80%D6%87-%D5%BD%D5%AB%D6%80%D5%A5%D5%AC%D5%AB-%D5%AE%D6%80%D5%A1%D5%A3%D6%80%D5%A1%D5%BE%D5%B8%D6%80%D5%B8%D5%B2-%D5%AF%D5%A1%D5%B4-%D5%A1%D5%BA%D5%A1%D5%A3%D5%A1-%D5%AE%D6%80%D5%A1%D5%A3%D6%80%D5%A1%D5%BE%D5%B8%D6%80%D5%B8%D5%B2"&gt;
  &lt;/a&gt;
  ‘≤’°÷Ä÷á ’Ω’´÷Ä’•’¨’´ ’Æ÷Ä’°’£÷Ä’°’æ’∏÷Ä’∏’≤ (’Ø’°’¥ ’°’∫’°’£’° ’Æ÷Ä’°’£÷Ä’°’æ’∏÷Ä’∏’≤)÷â
&lt;/h2&gt;

&lt;p&gt;‘±’µ’Ω÷Ö÷Ä ’Ø’∂’°’µ’•’∂÷Ñ ’∞’°÷Ä÷Å’°’¶÷Ä’∏÷Ç’µ÷Å’∂’•÷Ä’´ ’™’°’¥’°’∂’°’Ø ’°’¥’•’∂’°’ø’°÷Ä’°’Æ’æ’°’Æ ’≠’∂’§’´÷Ä’∂’•÷Ä’´÷Å ’¥’•’Ø’´’ù ’ø’°’º’•÷Ä’´ ’¶’°’∂’£’æ’°’Æ’´ ’¥’´’ª’´÷Å ’§’∏÷Ç’∫’¨’´’Ø’°’ø’∂’•÷Ä’´ ’∞’•’º’°÷Å’¥’°’∂ ’≠’∂’§’´÷Ä’® ÷á ’°’µ’§ ’≠’∂’§÷Ä’´ ’¨’∏÷Ç’Æ’¥’°’∂ ’•’≤’°’∂’°’Ø’∂’•÷Ä’´÷Å ’¥’´ ÷Ñ’°’∂’´’Ω’®÷â&lt;/p&gt;

&lt;p&gt;’ç’°’Ø’°’µ’∂ ’¥’´’∂’π÷á ’°’º’°’ª ’°’∂÷Å’∂’•’¨’® 2 ’Ø’°÷Ä÷á’∏÷Ä ’¢’°’∂&lt;br&gt;
÷ä ‘Ω’∂’§’´÷Ä’∂’•÷Ä’´ ’¨’∏÷Ç’Æ’∏÷Ç’¥’∂’•÷Ä’® ’Ø’¨’´’∂’•’∂ JavaScript ’¨’•’¶’æ’∏’æ&lt;br&gt;
÷ä ‘µ’Ω ’∂’•÷Ä’Ø’°’µ’°÷Å’∂’∏÷Ç’¥ ’•’¥ ’≠’∂’§’´÷Ä’® ’¨’∏÷Ç’Æ’•’¨’∏÷Ç ’£’°’≤’°÷É’°÷Ä’∂’•÷Ä’® ÷á ’π’•’¥ ’¢’°÷Å’°’ø÷Ä’•’¨’∏÷Ç, ’©’• ’∏÷Ä ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’∂ ’´÷Ä’•’∂’´÷Å ’´’∂’π ’ß ’∂’•÷Ä’Ø’°’µ’°÷Å’∂’∏÷Ç’¥, ’Ω’°’Ø’°’µ’∂ ’Ø’ø’•’≤’°’§÷Ä’•’¥ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ’∞’≤’∏÷Ç’¥’∂’•÷Ä’®, ’∏÷Ä’∫’•’Ω’¶’´ ’§’∏÷Ç ’´’∂÷Ñ’§ ’∏÷Ç’Ω’∏÷Ç’¥’∂’°’Ω’´÷Ä’•’Ω&lt;/p&gt;

&lt;p&gt;‘µ’©’• ’Ω’´÷Ä’∏÷Ç’¥ ’•’Ω ’≠’∂’§’´÷Ä’∂’•÷Ä ’¨’∏÷Ç’Æ’•’¨, ’∏÷Ç÷Ä’•’¥’∂ ’°÷Ä’§’•’∂ ’¨’∏÷Ç’Æ’•’¨ ’•’Ω ’°’µ’Ω’∫’´’Ω’´ ’≠’∂’§’´÷Ä÷â ‘ø’°’¥ ’∞’°÷Ä÷Å’°’¶÷Ä’∏÷Ç’µ÷Å’´ ’™’°’¥’°’∂’°’Ø ’°’º’®’∂’π’æ’•’¨ ’•’Ω ’°’µ’Ω’∫’´’Ω’´ ’≠’∂’§÷Ä’´÷â&lt;/p&gt;

&lt;p&gt;‘≤’°’µ÷Å ’¥’´’∂’π÷á ’¨’∏÷Ç’Æ’¥’°’∂ ’•’≤’°’∂’°’Ø’∂’•÷Ä’´’∂ ’°’∂÷Å’∂’•’¨’®, ’∞’°’Ω’Ø’°’∂’°’∂÷Ñ ’≠’∂’§’´÷Ä’®÷â&lt;br&gt;
’Ñ’•’∂÷Ñ ’Ω’ø’°’∂’°’¨’∏÷Ç ’•’∂÷Ñ ’Ø’°’¥’°’µ’°’Ø’°’∂ ’ø’°’º’•÷Ä’´ ’¶’°’∂’£’æ’°’Æ÷â ’à÷Ä’∏’∑ ’ø’°’º’•÷Ä ’Ø’°÷Ä’∏’≤ ’•’∂ ’Ø÷Ä’Ø’∂’æ’•’¨÷â ’Ñ’•÷Ä ’≠’∂’§’´÷Ä’∂ ’ß ’°’µ’∂’∫’•’Ω ’°’∂’•’¨, ’∏÷Ä ’°’¥’•’∂ ’ø’°’º’´÷Å ’¥’∂’° 1 ’∞’°’ø÷â&lt;br&gt;
‘±’µ’Ω’´’∂÷Ñ’∂ ’•’©’• ’Ω’ø’°÷Å’•’¨ ’•’∂÷Ñ ['a', 'a', 'b', 'c', 'd', 'a', 'b', 'a', 'y', 'y'] ’¶’°’∂’£’æ’°’Æ’®, ’∫’•’ø÷Ñ ’ß ’æ’•÷Ä’°’§’°÷Ä’±’∂’•’∂’•÷Ñ 'a', 'b', 'c',  'd', 'y' ’ø’°’º’•÷Ä’® ’∫’°÷Ä’∏÷Ç’∂’°’Ø’∏’≤ ’¶’°’∂’£’æ’°’Æ (’∞’•÷Ä’©’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’® ’ß’°’Ø’°’∂ ’π’ß)÷â&lt;/p&gt;

&lt;p&gt;‘Ω’∂’§’´÷Ä’® ’∞’°’Ω’Ø’°÷Å’°’∂÷Ñ, ’∞’´’¥’° ’°’∂÷Å’∂’•’∂÷Ñ ’¨’∏÷Ç’Æ’¥’°’∂ ’•’≤’°’∂’°’Ø’∂’•÷Ä’´’∂&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%D5%A5%D5%B2%D5%A1%D5%B6%D5%A1%D5%AF-1"&gt;
  &lt;/a&gt;
  ‘µ’≤’°’∂’°’Ø 1
&lt;/h3&gt;

&lt;p&gt;‘±’º’°’ª’´’∂ ’•’≤’°’∂’°’Ø’®, ’∏÷Ä’® ’Ø’∂’•÷Ä’Ø’°’µ’°÷Å’∂’•’¥ ’°’µ’∂ ’ß, ’∏÷Ä ’æ’•÷Ä÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’¶’°’∂’£’æ’°’Æ’´ ’°’º’°’ª’´’∂ ’ß’¨’•’¥’•’∂’ø’® ÷á ’Ω’ø’∏÷Ç’£’∏÷Ç’¥, ’°÷Ä’§’µ’∏’û÷Ñ ’¶’°’∂’£’æ’°’Æ’∏÷Ç’¥ ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’´ ’∂’∏÷Ç’µ’∂ ’ß’¨’•’¥’•’∂’ø’´÷Å ’©’• ’∏’π÷â ‘µ’©’• ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’´, ’°’∫’° ’∞’•’º’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’£’ø’°’Æ ’ß’¨’•’¥’•’∂’ø’®, ’•’©’• ’∏’π, ’°’∂÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’°’º’°’ª÷â &lt;/p&gt;

&lt;p&gt;‘ø’∏’§’® ’Ø’∏÷Ç’∂’•’∂’° ’°’µ’Ω’∫’´’Ω’´ ’ø’•’Ω÷Ñ÷â&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uk2VI1K8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0w3xbhn43pfm4gjzbtmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uk2VI1K8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0w3xbhn43pfm4gjzbtmw.png" alt="" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;’é’•÷Ä÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’°’º’°’ª’´’∂ ’ß’¨’•’¥’•’∂’ø’® ÷á ’°’µ’∂ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ’¶’°’∂’£’æ’°’Æ’∏÷Ç’¥ ’´÷Ä’•’∂’´÷Å ’∞’•’ø’∏ ’£’ø’∂’æ’∏’≤ ’¥’∂’°÷Å’°’Æ ’ß’¨’•’¥’•’∂’ø’∂’•÷Ä’´ ’∞’•’ø ÷á ’•’©’• ’∂’∏÷Ç’µ’∂ ’ø’°÷Ä÷Ä’´÷Å ’ß’¨’´ ’Ø’°, ’°’∫’° ’£’ø’°’Æ’® ’∞’•’º’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’¶’°’∂’£’æ’°’Æ’´÷Å &lt;a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"&gt;Array.splice()&lt;/a&gt; ’¥’•’©’∏’§’´ ÷Ö’£’∂’∏÷Ç’©’µ’°’¥’¢÷â ‘±’µ’Ω’ø’•’≤ ’∫’•’ø÷Ñ ’ß ’¥’•÷Ä 2÷Ä’§ ’´’∂’§’•÷Ñ’Ω’® (j-’∂) 1’∏’æ ÷É’∏÷Ñ÷Ä’•÷Å’∂’•’∂÷Ñ, ÷Ñ’°’∂’´ ’∏÷Ä ’¶’°’∂’£’æ’°’Æ’´÷Å 1 ’ß’¨’•’¥’•’∂’ø ’∞’•’º’°÷Å’∂’•’¨’∏÷Ç÷Å ’∞’•’ø’∏ ’∂’∑’æ’°’Æ ’´’∂’§’•÷Ñ’Ω’´÷Å ’∞’•’ø’∏ ’£’ø’∂’æ’∏’≤ ’ß’¨’•’¥’•’∂’ø’∂’•÷Ä’® ’æ’•÷Ä’°’§’°’Ω’°’æ’∏÷Ä’æ’∏÷Ç’¥ ’•’∂ ÷á ’¢’∏’¨’∏÷Ä’´ ’´’∂’§’•÷Ñ’Ω’∂’•÷Ä’® 1’∏’æ ÷É’∏÷Ñ÷Ä’°’∂’∏÷Ç’¥ ’•’∂÷â ‘±’µ’Ω ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’® ’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ’¶’°’∂’£’æ’°’Æ’´ ’¢’∏’¨’∏÷Ä ’ß’¨’•’¥’•’∂’ø’∂’•÷Ä’´ ’∞’•’ø÷â&lt;/p&gt;

&lt;p&gt;‘º’∏÷Ç’Æ’¥’°’∂ ’°’µ’Ω ’•’≤’°’∂’°’Ø’® ’¥’•÷Ä ’≠’∂’§÷Ä’´’∂ ’¢’°’æ’°÷Ä’°÷Ä’∏÷Ç’¥ ’ß÷â ‘±’µ’∂ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂’∏÷Ç’¥ ’ß ES5÷ä’´ ’Ω’ø’°’∂’§’°÷Ä’ø’∂’•÷Ä’´’∂÷â&lt;/p&gt;

&lt;p&gt;‘≤’°’µ÷Å ’°÷Ä’´ ’°’µ’Ω÷Ñ’°’∂’∏’æ ’π’Ω’°’∞’¥’°’∂’°÷É’°’Ø’æ’•’∂÷Ñ ÷á ’§’´’ø’°÷Ä’Ø’•’∂÷Ñ ’°’µ’¨ ’ø’°÷Ä’¢’•÷Ä’°’Ø’∂’•÷Ä÷â&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%D5%A5%D5%B2%D5%A1%D5%B6%D5%A1%D5%AF-2"&gt;
  &lt;/a&gt;
  ‘µ’≤’°’∂’°’Ø 2
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bR1kPWtt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uqpn5dzp5d5e6pu644d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bR1kPWtt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uqpn5dzp5d5e6pu644d.png" alt="" width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‘º’∏÷Ç’Æ’¥’°’∂ ’°’µ’Ω ’•’≤’°’∂’°’Ø’∏÷Ç’¥ ’Ø÷Ö’£’ø’°’£’∏÷Ä’Æ’•’∂÷Ñ &lt;a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"&gt;forEach()&lt;/a&gt; ÷á &lt;a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"&gt;indexOf()&lt;/a&gt; ’¥’•’©’∏’§’∂’•÷Ä’®, ’∏÷Ä’∫’•’Ω’¶’´ ’ø’•’Ω’∂’•’∂÷Ñ, ’°÷Ä’§’µ’∏’û÷Ñ ’∂’∏÷Ç’µ’∂ ’ß’¨’•’¥’•’∂’ø’´ ’ß’¨’´ ’ß ’∞’°’∂’§’´’∫’∏÷Ç’¥ ’¶’°’∂’£’°’æ’Æ’´ ’¥’•’ª ’©’• ’∏’π÷â ‘µ’©’• ’∏’π, ’°’µ’∂ ’°’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’¥’•÷Ä outputArr÷ä’´ ’¥’•’ª÷â&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%D5%A5%D5%B2%D5%A1%D5%B6%D5%A1%D5%AF-3"&gt;
  &lt;/a&gt;
  ‘µ’≤’°’∂’°’Ø 3
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eobRqQjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33l13dlj7t1fgd276r7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eobRqQjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33l13dlj7t1fgd276r7z.png" alt="" width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;’Ü’°’≠’∏÷Ä’§ ’•’≤’°’∂’°’Ø’® ’Ø’°÷Ä’∏’≤ ’•’∂÷Ñ ’¥’´ ÷Ñ’´’π ’°’µ’¨ ’±÷á’∏’æ ’´÷Ä’°’Ø’°’∂’°÷Å’∂’•’¨÷â ’Ñ’•’¶ ’ø÷Ä’æ’°’Æ ’¶’°’∂’£’æ’°’Æ’´ ’¥’•’ª ’§’∏÷Ç’∫’¨’´’Ø’°’ø’∂’•÷Ä ÷É’∂’ø÷Ä’•’¨’∏÷Ç ÷É’∏’≠’°÷Ä’•’∂ ’Ø’°÷Ä’∏’≤ ’•’∂÷Ñ ’Ω’ø’∏÷Ç’£’•’¨, ’°÷Ä’§’µ’∏’û÷Ñ ’¥’•÷Ä outputArr÷ä’´ ’¥’•’ª ’°÷Ä’§’•’∂ ’Ø’° ’°’µ’§ ’ß’¨’•’¥’•’∂’ø’® ’©’• ’∏’π÷â ‘µ’©’• ’π’Ø’°, ’°’∫’° ’°’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ÷â ‘±’µ’Ω ’§’•’∫÷Ñ’∏÷Ç’¥, ’•’©’• ’¶’°’∂’£’æ’°’Æ’´ ’¥’•’ª ’§’∏÷Ç’∫’¨’´’Ø’°’ø’∂’•÷Ä ’Ø’°’∂, ’°’∫’° ’°’æ’•’¨’´ ÷Ñ’´’π ÷Ñ’°’µ’¨ ’•’∂÷Ñ ’°’∂’∏÷Ç’¥, ÷Ñ’°’∂ ’∂’°’≠’∏÷Ä’§ ’§’•’∫÷Ñ’∏÷Ç’¥÷â&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%D5%A5%D5%B2%D5%A1%D5%B6%D5%A1%D5%AF-4"&gt;
  &lt;/a&gt;
  ‘µ’≤’°’∂’°’Ø 4
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sIN9C-R9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exlrcm9527bma9pzdwee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sIN9C-R9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exlrcm9527bma9pzdwee.png" alt="" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;’Ä’´’¥’° ’∂’°’µ’•’∂÷Ñ ’¥’•’Ø ’°’µ’¨ ’¨’∏÷Ç’Æ’¥’°’∂ ’•’≤’°’∂’°’Ø’´, ’∏÷Ä’ø’•’≤ ÷Ö’£’ø’°’£’∏÷Ä’Æ’æ’∏÷Ç’¥ ’ß &lt;a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"&gt;reduce&lt;/a&gt; ’¥’•’©’∏’§’®÷â ‘±’µ’Ω ’•’≤’°’∂’°’Ø’∏÷Ç’¥ ’°’¥’•’∂ ’ø’°÷Ä÷Ä’´ ’∞’°’¥’°÷Ä ’Ω’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ, ’°÷Ä’§’µ’∏’û÷Ñ ’´÷Ä’•’∂ ’∂’°’≠’∏÷Ä’§’∏’≤ ’ø’°÷Ä÷Ä’•÷Ä’´ ’•’∂’©’°’¢’°’¶’¥’∏÷Ç’©’µ’∏÷Ç’∂’∏÷Ç’¥  ’∫’°÷Ä’∏÷Ç’∂’°’Ø’æ’∏÷Ç’¥ ’ß ’´÷Ä’•’∂ ’∞’°’ª’∏÷Ä’§’∏’≤ ’ø’°÷Ä÷Ä’® ’©’• ’∏’π÷â ‘µ’©’• ’∏’π, ’°’∫’° ’°’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’Ω’ø’∏÷Ç’£’æ’°’Æ ’ß’¨’•’¥’•’∂’ø’®÷â ’ç’°’Ø’°’µ’∂ ’°’µ’Ω ’§’•’∫÷Ñ’∏÷Ç’¥ ’¥’•’∂÷Ñ ’Ω’ø’°’∂’∏÷Ç’¥ ’•’∂÷Ñ &lt;em&gt;string&lt;/em&gt; ’ø’´’∫’´’∂ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂’∏’≤ ’°÷Ä’™’•÷Ñ, ’∏÷Ä’® ’Ø’°÷Ä’∏’≤ ’•’∂÷Ñ ’¶’°’∂’£’æ’°’Æ ’§’°÷Ä’±’∂’•’¨ &lt;a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/split"&gt;split()&lt;/a&gt; ’¥’•’©’∏’§’´ ÷Ö’£’∂’∏÷Ç’©’µ’°’¥’¢÷â&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%D5%A5%D5%B2%D5%A1%D5%B6%D5%A1%D5%AF-5"&gt;
  &lt;/a&gt;
  ‘µ’≤’°’∂’°’Ø 5
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6HlsjBAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfn6n0zu0eeuqgyqfd34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6HlsjBAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfn6n0zu0eeuqgyqfd34.png" alt="" width="880" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‘ª’Ω’Ø ’∞’´’¥’° ÷Ñ’•’¶ ’∂’•÷Ä’Ø’°’µ’°÷Å’∂’•’¥ ’´’¥ ’°’¥’•’∂’°’Ω’´÷Ä’°’Æ ’ø’°÷Ä’¢’•÷Ä’°’Ø’®÷â ES6-’∏÷Ç’¥ ’¥’•’∂÷Ñ ’∏÷Ç’∂’•’∂÷Ñ Set ÷Ö’¢’µ’•’Ø’ø’®, ’∏÷Ä’® ’´÷Ä ’¥’•’ª ’∫’°’∞’∏÷Ç’¥ ’ß ’¥’´’°’µ’∂ ’π’Ø÷Ä’Ø’∂’æ’∏’≤ ’ß’¨’•’¥’•’∂’ø’∂’•÷Ä÷â ’ç’°’Ø’°’µ’∂ ’°’µ’∂ ’¶’°’∂’£’æ’°’Æ ’π’´ ’∞’°’¥’°÷Ä’æ’∏÷Ç’¥÷â ’ç’°’Ø’°’µ’∂ ’¥’•’∂÷Ñ ’Ø’°÷Ä’∏’≤ ’•’∂÷Ñ &lt;a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Set"&gt;Set÷ä’´&lt;/a&gt; ’°÷Ä’™’•÷Ñ’∂’•÷Ä’´÷Å ’¶’°’∂’£’æ’°’Æ ’Ω’ø’°’∂’°’¨ &lt;a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/from"&gt;Array.from()&lt;/a&gt; ’¥’•’©’∏’§’´ ’∑’∂’∏÷Ä’∞’´’æ÷â&lt;/p&gt;

&lt;p&gt;’Ä’∏÷Ç’µ’Ω ’∏÷Ç’∂’•’¥, ’°’µ’Ω ’∂’µ’∏÷Ç’©’® ÷Ñ’•’¶ ÷Ö’£’∂’•÷Å ’∂’∏÷Ä ’£’°’≤’°÷É’°÷Ä’∂’•÷Ä ÷á ’∂’∏÷Ä ’£’´’ø’•’¨’´÷Ñ ’Ω’ø’°’∂’°’¨’∏÷Ç ’∞’°÷Ä÷Å’∏÷Ç’¥÷â ‘ª’Ω’Ø ’•’©’• ’∏÷Ç’∂’•’Ω ’°’µ’∂’∫’´’Ω’´ ’¨’∏÷Ç’Æ’¥’°’∂ ’•’≤’°’∂’°’Ø, ’∏÷Ä’® ’°’µ’Ω’ø’•’≤ ’∂’∑’æ’°’Æ ’π’ß, &lt;a href="https://t.me/Beardman1104"&gt;’Ø’°÷Ä’∏’≤ ’•’Ω ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’´’∂’±&lt;/a&gt;, ’°’µ’§’∫’´’Ω’∏’æ ÷É’∏÷Ä’±’´ ÷É’∏’≠’°’∂’°’Ø’∏÷Ç’¥ ’Ø’°’∂’•’∂÷Ñ÷â &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
  </channel>
</rss>
