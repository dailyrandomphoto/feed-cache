<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React Conditional rendering</title>
      <author>101samovar</author>
      <pubDate>Sun, 09 Jan 2022 10:05:51 +0000</pubDate>
      <link>https://dev.to/101samovar/react-conditional-rendering-5a44</link>
      <guid>https://dev.to/101samovar/react-conditional-rendering-5a44</guid>
      <description>&lt;p&gt;In this post we render an element on condition.&lt;br&gt;
To show and to hide an element by click.&lt;/p&gt;

&lt;p&gt;Create a sample react-app. &lt;br&gt;
Open console, type ‚Äúnpx create-react-app‚Äù and application name.&lt;br&gt;
Open the application folder and type npm start to run the web-server.&lt;/p&gt;

&lt;p&gt;Open the App.js file and remove all the content.&lt;br&gt;
Import react.&lt;/p&gt;

&lt;p&gt;Add an element to render on condition. Let it be a toolbar placeholder.&lt;/p&gt;

&lt;p&gt;In the App-component set state to remember if the element has to be rendered.&lt;br&gt;
Define a method to toggle the state from visible to hidden.&lt;br&gt;
In the render method there are two elements: a button to toggle the state and a toolbar to render on condition.&lt;/p&gt;

&lt;p&gt;The toolbar is in curly braces. It‚Äôs an expression with a logical AND-operator.&lt;br&gt;&lt;br&gt;
First operand is the condition. Second operand is the element to render.&lt;br&gt;
If the condition is true the expression evaluates to the element. The element is rendered.&lt;br&gt;
When the condition is false the expression evaluates to false. The element is not rendered.&lt;/p&gt;

&lt;p&gt;Let‚Äôs check it out.&lt;br&gt;
Initially the toolbar is not visible.&lt;br&gt;
Click on the button to toggle the state.&lt;br&gt;
The element is rendered.&lt;/p&gt;

&lt;p&gt;The element is added to the document and is removed from the document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Toolbar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Toolbar&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;editMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;editMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editMode&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;To View&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;To Edit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editMode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Toolbar&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Video-tutorial: &lt;a href="https://youtu.be/MyCBexcqHZI"&gt;https://youtu.be/MyCBexcqHZI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üëã See you next time. Have a nice day!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Junior developers mistakes (Part 1)</title>
      <author>Alexander Dmitriev</author>
      <pubDate>Sun, 09 Jan 2022 09:39:26 +0000</pubDate>
      <link>https://dev.to/alex1998dmit/junior-developers-mistakes-part-1-1gad</link>
      <guid>https://dev.to/alex1998dmit/junior-developers-mistakes-part-1-1gad</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Hi, in this article I will try to consider the most common mistakes novice developers make. Some of them might apply to more experienced developers as well.&lt;br&gt;
This article is my opinion, a lot can cause controversy and discussion, I will be glad to know your opinion&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mistakes"&gt;
  &lt;/a&gt;
  Mistakes
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#i-dont-need-computer-science"&gt;
  &lt;/a&gt;
  I don't need computer science
&lt;/h2&gt;

&lt;p&gt;Probably the most controversial point. Most likely, as a novice developer or developer of simple forms and applications, you do not need it. I know many middle developers who are satisfied with their level and knowledge, for such people programming is a job that is enough for them at work. Therefore, if you decide that you are something big for programming, or you have more professional ambitions, you should not dismiss such people, you are no better and no worse than them, you are just different.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j4LtFKsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlyvtshk9tkch65yyk1j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j4LtFKsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlyvtshk9tkch65yyk1j.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you want to grow, there is nowhere without basic knowledge of computer science. Lack of this knowledge is an uncertainty that you, as a senior developer, cannot afford. And it is better to prepare for such tests in advance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-too-many-libraries"&gt;
  &lt;/a&gt;
  Using too many libraries
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use only proven and popular libraries (stars and issues on github, when was the last commit, how many downloads per week)&lt;/li&gt;
&lt;li&gt;Not every task requires a library&lt;/li&gt;
&lt;li&gt;The more untested and incomprehensible libraries there are, the higher the level of uncertainty&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#not-using-libraries-at-all-d"&gt;
  &lt;/a&gt;
  Not using libraries at all :D
&lt;/h2&gt;

&lt;p&gt;The rules are the same as in the paragraph above. As a rule, a beginner will not write a solution better than in a popular library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-know-everything"&gt;
  &lt;/a&gt;
  I know everything
&lt;/h2&gt;

&lt;p&gt;If it seems to you that you have achieved everything and are not mistaken, read about the &lt;a href="https://www.britannica.com/science/Dunning-Kruger-effect"&gt;Dunning-Kruger Effect&lt;/a&gt;.&lt;br&gt;
Try to understand your area deeper (if it's a WEB, then study the architecture of WEB applications, how the browser works, the TCP /IP protocol), for general development, try to study the most popular &lt;a href="https://refactoring.guru/design-patterns"&gt;design patterns&lt;/a&gt; and then try to adapt them to your environment. You can also upgrade well in algorithms and structures - &lt;a href="https://www.codewars.com/"&gt;https://www.codewars.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5AEF-GeU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8x5wu0jfxhb2wyfmxf8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5AEF-GeU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8x5wu0jfxhb2wyfmxf8.jpg" alt="Image description" width="600" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bad-questions"&gt;
  &lt;/a&gt;
  Bad questions
&lt;/h2&gt;

&lt;p&gt;Asking the right questions is half the solution. As a novice developer, what do you do when you can't solve a problem? As a rule, the algorithm is always the following? If you are satisfied with the current level of tasks and responsibility and your knowledge and skills are enough for this, then you can skip this point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LwFDoMS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/300zn4pjrae6mdxqg06o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LwFDoMS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/300zn4pjrae6mdxqg06o.png" alt="Image description" width="676" height="1068"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the correct algorithm is in the middle. This means that the other two approaches do not work. They work, but they create uncertainty in your decision. And uncertainty is fraught with errors and bugs that will be very difficult for you to catch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v-2WhJOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9dn9q50lneg6wg3plh1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-2WhJOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9dn9q50lneg6wg3plh1.jpg" alt="Image description" width="221" height="228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do I know if I'm asking a good question?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You ask a question for solve one problem&lt;/li&gt;
&lt;li&gt;You understand the context of the problem, most likely you are faced with a limitation or do not know a specific simple algorithm&lt;/li&gt;
&lt;li&gt;You can tell what you did and at what stage something went wrong&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, you need to find the hundredth Fibonacci number&lt;/p&gt;

&lt;p&gt;BAD QUESTION:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to find the hundredth Fibanacci number ? (very abstract question)&lt;/li&gt;
&lt;li&gt;I found a solution but don't understand it. Can you help me ? (you haven't learned the context, and you can't tell how programm works)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GOOD QUESTION:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I wrote a solution, I have a performance problem at the 100th step, maybe it's a recursive approach, can you tell me how to improve performance ? (Great question, you are in context, you have one problem that you do not know to solve yet)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#be-a-professional"&gt;
  &lt;/a&gt;
  Be a professional
&lt;/h2&gt;

&lt;p&gt;A banal point about soft skills:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not everyone around you is developers, try to explain yourself clearly to everyone&lt;/li&gt;
&lt;li&gt;Don't defend a bad decision just because it's yours&lt;/li&gt;
&lt;li&gt;Try to give a correct estimate of the timing - take twice as much as you planned&lt;/li&gt;
&lt;li&gt;Argument your position not with phrases: I like it so much, I dislike your approach, etc. Try to provide examples of patterns and approaches that confirm the correctness of your position.&lt;/li&gt;
&lt;li&gt;Don't be late for appointments&lt;/li&gt;
&lt;li&gt;Pair programming is cool, don't be afraid to write with senior developers
......&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thank you for reading this article, I hope it helps you. I have not listed all the points and of course there will be a continuation if the article will be popular.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>React JS Top 10 Important Questions in this time 2022</title>
      <author>Deepak</author>
      <pubDate>Sun, 09 Jan 2022 09:24:18 +0000</pubDate>
      <link>https://dev.to/deepakjaiswal/react-js-top-10-important-questions-in-this-time-2022-2pdn</link>
      <guid>https://dev.to/deepakjaiswal/react-js-top-10-important-questions-in-this-time-2022-2pdn</guid>
      <description>&lt;p&gt;many beginners of react developer does not know the answer of this type of Question So we try to make some &lt;br&gt;
question or answer to help someone to explore it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1what-is-react"&gt;
  &lt;/a&gt;
  1.What is React?
&lt;/h2&gt;

&lt;p&gt;React is an open-source frontend JavaScript library which is used for building user interfaces especially&lt;br&gt;
 for single page applications. It is used for handling view layer for web and mobile apps. React was created&lt;br&gt;
 by Jordan Walke, a software engineer working for Facebook. React was first deployed on Facebook's News Feed&lt;br&gt;
 in 2011 and on Instagram in 2012.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2what-are-the-major-features-of-react"&gt;
  &lt;/a&gt;
  2.What are the major features of React?
&lt;/h2&gt;

&lt;p&gt;The major features of React are:&lt;br&gt;
It uses VirtualDOM instead of RealDOM considering that RealDOM manipulations are expensive.&lt;br&gt;
Supports server-side rendering.&lt;br&gt;
Follows Unidirectional data flow or data binding.&lt;br&gt;
Uses reusable/composable UI components to develop the view.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3what-is-state-in-react"&gt;
  &lt;/a&gt;
  3.What is state in React?
&lt;/h2&gt;

&lt;p&gt;State of a component is an object that holds some information that may change over the lifetime&lt;br&gt;
 of the component. We should always try to make our state as simple as possible and minimize the number&lt;br&gt;
 of stateful components.&lt;br&gt;
Let's create a user component with message state,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class User extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      message: 'Welcome to React world'
    }
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;{this.state.message}&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4why-should-we-not-update-the-state-directly"&gt;
  &lt;/a&gt;
  4.Why should we not update the state directly?
&lt;/h2&gt;

&lt;p&gt;If you try to update the state directly then it won't re-render the component.&lt;br&gt;
//Wrong&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.state.message = 'Hello world'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead use setState() method. It schedules an update to a component's state object. When state changes,&lt;br&gt;
 the component responds by re-rendering.&lt;br&gt;
//Correct&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.setState({ message: 'Hello World' })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: You can directly assign to the state object either in constructor or&lt;br&gt;
 using latest javascript's class field declaration syntax.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5what-are-synthetic-events-in-react"&gt;
  &lt;/a&gt;
  5.What are synthetic events in React?
&lt;/h2&gt;

&lt;p&gt;SyntheticEvent is a cross-browser wrapper around the browser's native event. It's API is same as&lt;br&gt;
 the browser's native event, including stopPropagation() and preventDefault(), except the events work&lt;br&gt;
 identically across all browsers.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#6what-are-the-different-phases-of-component-lifecycle"&gt;
  &lt;/a&gt;
  6.What are the different phases of component lifecycle?
&lt;/h2&gt;

&lt;p&gt;The component lifecycle has three distinct lifecycle phases:&lt;br&gt;
i.Mounting: The component is ready to mount in the browser DOM. This phase covers initialization&lt;br&gt;
 from constructor(), getDerivedStateFromProps(), render(), and componentDidMount() lifecycle methods.&lt;br&gt;
ii.Updating: In this phase, the component gets updated in two ways, sending the new props and &lt;br&gt;
updating the state either from setState() or forceUpdate(). This phase covers getDerivedStateFromProps(), &lt;br&gt;
shouldComponentUpdate(), render(), getSnapshotBeforeUpdate() and componentDidUpdate() lifecycle methods.&lt;br&gt;
iii.Unmounting: In this last phase, the component is not needed and gets unmounted from the browser &lt;br&gt;
DOM. This phase includes componentWillUnmount() lifecycle method.&lt;br&gt;
It's worth mentioning that React internally has a concept of phases when applying changes to the DOM. They &lt;br&gt;
are separated as follows&lt;br&gt;
iv.Render The component will render without any side-effects. This applies for Pure components and&lt;br&gt;
 in this phase, React can pause, abort, or restart the render.&lt;br&gt;
v.Pre-commit Before the component actually applies the changes to the DOM, there is a moment that &lt;br&gt;
allows React to read from the DOM through the getSnapshotBeforeUpdate().&lt;br&gt;
vi.Commit React works with the DOM and executes the final lifecycles respectively componentDidMount() &lt;br&gt;
for mounting, componentDidUpdate() for updating, and componentWillUnmount() for unmounting.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7what-are-higherorder-components"&gt;
  &lt;/a&gt;
  7.What are Higher-Order Components?
&lt;/h2&gt;

&lt;p&gt;A higher-order component (HOC) is a function that takes a component and returns a new component. Basically,&lt;br&gt;
 it's a pattern that is derived from React's compositional nature.&lt;br&gt;
We call them pure components because they can accept any dynamically provided child component but they won't &lt;br&gt;
modify or copy any behavior from their input components.&lt;br&gt;
const EnhancedComponent = higherOrderComponent(WrappedComponent)&lt;br&gt;
HOC can be used for many use cases:&lt;br&gt;
i.  Code reuse, logic and bootstrap abstraction.&lt;br&gt;
ii. Render hijacking.&lt;br&gt;
iii.    State abstraction and manipulation.&lt;br&gt;
iv. Props manipulation.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#8what-is-context"&gt;
  &lt;/a&gt;
  8.What is context?
&lt;/h2&gt;

&lt;p&gt;Context provides a way to pass data through the component tree without having to pass props down manually&lt;br&gt;
 at every level.&lt;br&gt;
For example, authenticated user, locale preference, UI theme need to be accessed in the application by many &lt;br&gt;
components.&lt;br&gt;
const {Provider, Consumer} = React.createContext(defaultValue)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#9why-fragments-are-better-than-container-divs"&gt;
  &lt;/a&gt;
  9.Why fragments are better than container divs?
&lt;/h2&gt;

&lt;p&gt;Below are the list of reasons,&lt;br&gt;
i.  Fragments are a bit faster and use less memory by not creating an extra DOM node. This only has a&lt;br&gt;
 real benefit on very large and deep trees.&lt;br&gt;
ii. Some CSS mechanisms like Flexbox and CSS Grid have a special parent-child relationships, and &lt;br&gt;
adding divs in the middle makes it hard to keep the desired layout.&lt;br&gt;
iii.    The DOM Inspector is less cluttered.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#10how-to-apply-validation-on-props-in-react"&gt;
  &lt;/a&gt;
  10.How to apply validation on props in React?
&lt;/h2&gt;

&lt;p&gt;When the application is running in development mode, React will automatically check all props that we set on &lt;br&gt;
components to make sure they have correct type. If the type is incorrect, React will generate warning messages &lt;br&gt;
in the console. It's disabled in production mode due to performance impact. The mandatory props are defined with&lt;br&gt;
 isRequired.&lt;br&gt;
The set of predefined prop types:&lt;br&gt;
i.  PropTypes.number&lt;br&gt;
ii. PropTypes.string&lt;br&gt;
iii.    PropTypes.array&lt;br&gt;
iv. PropTypes.object&lt;br&gt;
v.  PropTypes.func&lt;br&gt;
vi. PropTypes.node&lt;br&gt;
vii.    PropTypes.element&lt;br&gt;
viii.   PropTypes.bool&lt;br&gt;
ix. PropTypes.symbol&lt;br&gt;
x.  PropTypes.any&lt;br&gt;
We can define propTypes for User component as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import PropTypes from 'prop-types'

class User extends React.Component {
  static propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number.isRequired
  }

  render() {
    return (
      &amp;lt;&amp;gt;
        &amp;lt;h1&amp;gt;{`Welcome, ${this.props.name}`}&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;{`Age, ${this.props.age}`}&amp;lt;/h2&amp;gt;
      &amp;lt;/&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: In React v15.5 PropTypes were moved from React.PropTypes to prop-types library.&lt;br&gt;
The Equivalent Functional Component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import PropTypes from 'prop-types'

function User({name, age}) {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;{`Welcome, ${name}`}&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;{`Age, ${age}`}&amp;lt;/h2&amp;gt;
    &amp;lt;/&amp;gt;
  )
}

User.propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number.isRequired
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>Create react components at the speed of light</title>
      <author>Ivan</author>
      <pubDate>Sun, 09 Jan 2022 09:07:35 +0000</pubDate>
      <link>https://dev.to/ivanms1/create-react-components-at-the-speed-of-light-26l4</link>
      <guid>https://dev.to/ivanms1/create-react-components-at-the-speed-of-light-26l4</guid>
      <description>&lt;p&gt;So you are working in your React app, and it comes the time to create a new component, you already have your ritual down. Go to the components folder, create an index file, create another file for styles and finally one more for testing because you are cool. After all of this, you still have to connect these files and write enough code to make them run. You do this every time... every time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Er3QVX48nt5ok/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Er3QVX48nt5ok/giphy.gif" alt="Boring task" width="426" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am assuming a lot, but if this is actually you I have good news!&lt;br&gt;
What if I told you there is way to automate this boring and tedious process?&lt;br&gt;
Trust me, these next 10 minutes are going to change your life. Let me introduce you to plop.js.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-plopjs"&gt;
  &lt;/a&gt;
  What is Plop.js?
&lt;/h2&gt;

&lt;p&gt;In their own words, it's a tool that saves you time and helps you build new files with consistency.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;It's easier than you think, otherwise I wouldn't be writing about it lol. You create file templates and configure a very simple cli.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h2&gt;

&lt;p&gt;First, let's clone this simple react app, it has nothing but just a basic react setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone git@github.com:ivanms1/parcel-template.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And navigate to it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;parcel-template
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's install plop, on the terminal type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add plop
&lt;span class="c"&gt;# or&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;plop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-generator"&gt;
  &lt;/a&gt;
  The Generator
&lt;/h2&gt;

&lt;p&gt;Next, on the root folder, create a file called &lt;code&gt;plopfile.js&lt;/code&gt; and add the following content inside.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;plop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setGenerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Create a component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;prompts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What is this component's name?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HTML element (div is default)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src/components/{{pascalCase name}}/{{pascalCase name}}.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;templateFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;templates/Component.tsx.hbs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are basically configuring a cli to generate our files. &lt;code&gt;plop.setGenerator&lt;/code&gt; creates a generator, the first argument is the name of this generator and the second one is an object with some options where we can configure what to generate. Let's analyze the ones we will be using for this guide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-description-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;description&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Pretty self explanatory, a description of your generator, for example: Generator of react components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-prompts-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;prompts&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Series of steps, questions or instructions we give to the user in order to obtain certain information. Plop stores these in variables to use later in the template files.&lt;br&gt;
In our case we are using &lt;code&gt;input&lt;/code&gt; type prompts to get&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The component's name.&lt;/li&gt;
&lt;li&gt;The component's html tag (div, button, a, etc), it defaults to div.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;message&lt;/code&gt; is text the user will see and has to interact with, generally a question or an instruction.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-actions-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;actions&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;After we've gather all the information need we then proceed to the actions, represented in an array. In our case we only have one action that creates a file.&lt;/p&gt;

&lt;p&gt;Let's go a bit into more details with the actions, since it's where things actually happen. The &lt;code&gt;add&lt;/code&gt; action type creates a file, &lt;code&gt;path&lt;/code&gt; is simply the file path where the file is going to be created. The &lt;code&gt;template&lt;/code&gt; is sort of skeleton that will be used to create the file. Plop uses &lt;a href="https://handlebarsjs.com/"&gt;handlebars&lt;/a&gt;, a templating language that generates HTML and other text formats.&lt;/p&gt;

&lt;p&gt;You might have noticed that we haven't created our template file, and yeah... we need to do that.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-our-first-template"&gt;
  &lt;/a&gt;
  Creating our first template
&lt;/h2&gt;

&lt;p&gt;On the root folder create a folder called &lt;code&gt;templates&lt;/code&gt;, and add a file named &lt;code&gt;Component.tsx.hbs&lt;/code&gt; with the following content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight handlebars"&gt;&lt;code&gt;import React from "react";

interface &lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;Props {}

const &lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt; = () =&amp;gt; {
  return &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;;
};

export default &lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you could probably tell, we are creating a react typescript file, in handlebars the variables are inside double brackets (&lt;code&gt;{{}}&lt;/code&gt;). &lt;code&gt;pascalCase&lt;/code&gt; converts the &lt;code&gt;name&lt;/code&gt; variable, that we get from the prompts, to pascal case. So anywhere you see &lt;code&gt;{{pascalCase name}}&lt;/code&gt;, it will be replaced with the component's name.&lt;/p&gt;

&lt;p&gt;So although this is cool, so far we are only creating a new file with some pre-written react code. There are snippet extensions that could do almost the same thing. Let's make this a bit more complete by also adding a style file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-style-file"&gt;
  &lt;/a&gt;
  Adding a style file
&lt;/h2&gt;

&lt;p&gt;I am gonna be using &lt;a href="https://stitches.dev/"&gt;stitches&lt;/a&gt;, a css-in-js library similar to styled components but with near-zero runtime, but feel free to use whatever you want.&lt;/p&gt;

&lt;p&gt;Let's install the library first, on the terminal run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @stitches/react
&lt;span class="c"&gt;# or&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; @stitches/react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we now want to create a style file as well, we need to add another &lt;code&gt;action&lt;/code&gt; to our generator. Update &lt;code&gt;plopfile.js&lt;/code&gt; with the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src/components/{{pascalCase name}}/{{pascalCase name}}.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;templateFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;templates/Component.tsx.hbs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="c1"&gt;// new action here&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src/components/{{pascalCase name}}/styles.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;templateFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;templates/styles.ts.hbs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty similar to the first &lt;code&gt;action&lt;/code&gt;, now we need to add a new template. Inside the &lt;code&gt;templates&lt;/code&gt; folder create a file called &lt;code&gt;styles.ts.hbs&lt;/code&gt; and add the following content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight handlebars"&gt;&lt;code&gt;import { styled } from '@stitches/react';

export const Styled&lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt; = styled('&lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;element&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;', {});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just your basic css-in-js file, we create a styled component and export it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Component.tsx.hbs&lt;/code&gt; needs to be updated, so it imports and uses the new styled component we made. Now it should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight handlebars"&gt;&lt;code&gt;import React from "react";

import { Styled&lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt; } from "./styles";

interface &lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;Props {}

const &lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt; = ({} : &lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;Props) =&amp;gt; {
  return &lt;span class="nt"&gt;&amp;lt;Styled&lt;/span&gt;&lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/Styled&lt;/span&gt;&lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;;
};

export default &lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;pascalCase&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are talking, plop is saving us some considerable time, generating not one, but two files.&lt;/p&gt;

&lt;p&gt;The final step to see this in action is to add the following script to the &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;rest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;scripts&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;end&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"generate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plop"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are finally ready, sit down, relax and enjoy the show. On the terminal type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn generate
&lt;span class="c"&gt;# or&lt;/span&gt;
npm run generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's create a &lt;code&gt;Button&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_g8BCBF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cuvvntmqk0scu5ynf7t5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_g8BCBF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cuvvntmqk0scu5ynf7t5.png" alt="Give component a name" width="704" height="138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With a &lt;code&gt;button&lt;/code&gt; tag of course.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-Kp0tVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3wlj84hh7bdgadxi2br.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-Kp0tVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3wlj84hh7bdgadxi2br.png" alt="Give component a tag" width="704" height="152"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything went well&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2_2ad7hv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w7i24jh96e4xvhl94at.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2_2ad7hv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w7i24jh96e4xvhl94at.png" alt="Success" width="704" height="228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's check the components folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyledButton&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({}&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Button&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The styles file is there as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@stitches/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/PUBxelwT57jsQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/PUBxelwT57jsQ/giphy.gif" alt="Cat surprised" width="185" height="128"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty cool eh?&lt;/p&gt;

&lt;p&gt;Ok maybe is not that cool, but hopefully by now you've realized the potential this has.&lt;/p&gt;

&lt;p&gt;I've kept this simple and only created two files but you can keep playing with it and add as many generators and actions as you want. All people/teams are different and you can tweak plop to whatever convention/style you may have. You can even update existing files if for example you like having an index file for all your components. You can create generators for hooks, pages, helpers, etc, the sky is the limit.&lt;/p&gt;

&lt;p&gt;I hope you liked this guide and let me know if you made any cool generators at &lt;a href="https://twitter.com/ivanms1"&gt;@ivanms1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for taking the time to read this article, if you enjoyed it please like to support and follow for more.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>plop</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Konohagakure Search</title>
      <author>Miku Chan</author>
      <pubDate>Sun, 09 Jan 2022 08:54:38 +0000</pubDate>
      <link>https://dev.to/dhruvacube/konohagakure-search-35b1</link>
      <guid>https://dev.to/dhruvacube/konohagakure-search-35b1</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;Konohagakure Search is a Google Like Search Engine. It is built on the technology of django, dedicated mongo db server, python, scrapy, spacy, and nltk. Whenever a search query is given it first search the database if its present then it searches up the internet then saves the data and then it presents to you in a pretty way :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-the-project"&gt;
  &lt;/a&gt;
  Overview of the project
&lt;/h3&gt;

&lt;p&gt;An efficient Search Engine with the following features:&lt;br&gt;
It has distributed crawlers to crawl the private/air-gapped networks (data sources in these networks might include websites, files, databases) and works behind sections of networks secured by firewalls&lt;/p&gt;

&lt;p&gt;It uses AI/ML/NLP/BDA for better search (queries and results) It abides by the secure coding practices (and SANS Top 25 web vulnerability mitigation techniques.) &lt;/p&gt;

&lt;p&gt;It is a type of a search engine which takes keyword/expression as an input and crawls the web (internal network or internet) to get all the relevant information. The application dosen't have any vulnerabilities, it complies with OWASP Top 10 Outcome. This application scrape data, match it with the query and give out relevant/related information. &lt;/p&gt;

&lt;p&gt;Note - Search as robust as possible (eg, it can correct misspelt query, suggest similar search terms, etc) be creative in your approach. Result obtained from search engine should displays the relevant matches as per search query/keyword along with the time taken by search engine to fetch that result.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Dhruvacube"&gt;
        Dhruvacube
      &lt;/a&gt; / &lt;a href="https://github.com/Dhruvacube/search-engine"&gt;
        search-engine
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Google Like Search Engine
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Konohagakure Search&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/ef57dabe1f0d89c8dcafbfc87a64e3a49d4e6af320824ca62a58fc5dd360f962/68747470733a2f2f692e696d6775722e636f6d2f57724e62484f542e6a706567"&gt;&lt;img src="https://camo.githubusercontent.com/ef57dabe1f0d89c8dcafbfc87a64e3a49d4e6af320824ca62a58fc5dd360f962/68747470733a2f2f692e696d6775722e636f6d2f57724e62484f542e6a706567" alt="Minato Namikaze Konohagakure Yondaime Hokage" title="Minato Namikaze"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Overview of the project:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;An efficient Search Engine with the following features
It has distributed crawlers to crawl the private/air-gapped networks (data sources in these networks might include websites, files, databases) and works behind sections of networks secured by firewalls

It uses AI/ML/NLP/BDA for better search (queries and results) It abides by the secure coding practices (and SANS Top 25 web vulnerability mitigation techniques.) 

It is a type of a search engine which takes keyword/expression as an input and crawls the web (internal network or internet) to get all the relevant information. The application dosen't have any vulnerabilities, it complies with OWASP Top 10 Outcome. This application scrape data, match it with the query and give out relevant/related information. 

Note - Search as robust as possible (eg, it can correct misspelt query, suggest similar search terms, etc) be creative in your approach. Result obtained from search engine should&lt;/code&gt;&lt;/pre&gt;‚Ä¶&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Dhruvacube/search-engine"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#packages-that-were-required-in-making-this-project"&gt;
  &lt;/a&gt;
  Packages that were required in making this project
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.djangoproject.com/"&gt;django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/dj-database-url/"&gt;dj-database-url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.celeryproject.org/"&gt;celery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jazzband/django-redis"&gt;django-redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cobrateam/django-htmlmin"&gt;django-htmlmin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gunicorn.org/"&gt;gunicorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/redis/redis-py"&gt;redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/redis/hiredis"&gt;hiredis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.djongomapper.com/"&gt;djongo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pymongo.readthedocs.io/"&gt;pymongo[srv]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/python-dotenv/"&gt;python-dotenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/requests/"&gt;requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/beautifulsoup4/"&gt;beautifulsoup4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://textblob.readthedocs.io/en/dev/"&gt;textblob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacy.io/"&gt;spacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nltk.org/"&gt;nltk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/spacy-alignments/"&gt;spacy-alignments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/spacy-legacy/"&gt;spacy-legacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/spacy-loggers/"&gt;spacy-loggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/colorama/"&gt;colorama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/huggingface/transformers"&gt;transformers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrapy.org/"&gt;Scrapy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/cdx-toolkit/"&gt;cdx-toolkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.uvicorn.org/"&gt;uvicorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://whitenoise.evans.io/"&gt;whitenoise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/colorlog/"&gt;colorlog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://uvloop.readthedocs.io/"&gt;uvloop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/spacy-transformers/"&gt;spacy-transformers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/spacy-lookups-data/"&gt;spacy-lookups-data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/celery/django-celery-beat"&gt;django-celery-beat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-cors-headers/"&gt;django-cors-headers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#a-youtube-video-explaining-all"&gt;
  &lt;/a&gt;
  A YouTube Video Explaining all
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/j1i2O2r24RM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>django</category>
      <category>mongodb</category>
      <category>searchengine</category>
    </item>
    <item>
      <title>12 Features to Maximize Efficiency on Next.js &amp; Tailwind CSS Projects</title>
      <author>Theodorus Clarence</author>
      <pubDate>Sun, 09 Jan 2022 08:19:31 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/12-features-to-maximize-efficiency-on-nextjs-tailwind-css-projects-30mb</link>
      <guid>https://dev.to/theodorusclarence/12-features-to-maximize-efficiency-on-nextjs-tailwind-css-projects-30mb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I made the &lt;a href="https://github.com/theodorusclarence/ts-nextjs-tailwind-starter"&gt;ts-nextjs-tailwind-starter&lt;/a&gt; after I got tired of setting up a new project and have to initialize Tailwind CSS every single time. After some months, this starter has grown and is filled with a lot of development automation and tools that help me when I'm developing.&lt;/p&gt;

&lt;p&gt;This is something that I use every project init, features are carefully curated, and put into this repository.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/theodorusclarence"&gt;
        theodorusclarence
      &lt;/a&gt; / &lt;a href="https://github.com/theodorusclarence/ts-nextjs-tailwind-starter"&gt;
        ts-nextjs-tailwind-starter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üîã Next.js + Tailwind CSS + TypeScript starter packed with useful development features
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;According to my list, these are all the features that I incorporate on ts-nextjs-tailwind-starter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚ö°Ô∏è Next.js 12&lt;/li&gt;
&lt;li&gt;‚öõÔ∏è React 17&lt;/li&gt;
&lt;li&gt;‚ú® TypeScript&lt;/li&gt;
&lt;li&gt;üí® Tailwind CSS 3 ‚Äî Configured with CSS Variables to extend the &lt;strong&gt;primary&lt;/strong&gt; color&lt;/li&gt;
&lt;li&gt;üíé Pre-built Components ‚Äî Components that will &lt;strong&gt;automatically adapt&lt;/strong&gt; with your brand color&lt;/li&gt;
&lt;li&gt;üÉè Jest ‚Äî Configured for unit testing&lt;/li&gt;
&lt;li&gt;üìà Absolute Import and Path Alias ‚Äî Import components using &lt;code&gt;@/&lt;/code&gt; prefix&lt;/li&gt;
&lt;li&gt;üìè ESLint ‚Äî Find and fix problems in your code, also will &lt;strong&gt;auto-sort&lt;/strong&gt; your imports&lt;/li&gt;
&lt;li&gt;üíñ Prettier ‚Äî Format your code and &lt;strong&gt;Tailwind CSS classes&lt;/strong&gt; consistently&lt;/li&gt;
&lt;li&gt;üê∂ Husky &amp;amp; Lint Staged ‚Äî Run scripts on your staged files before they are committed&lt;/li&gt;
&lt;li&gt;ü§ñ Conventional Commit Lint ‚Äî Make sure you &amp;amp; your teammates follow the conventional commit&lt;/li&gt;
&lt;li&gt;‚è∞ Standard Version Changelog ‚Äî Generate your changelog using &lt;code&gt;yarn release&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;üë∑ Github Actions ‚Äî Lint your code on PR&lt;/li&gt;
&lt;li&gt;üöò Automatic Branch and Issue Autolink ‚Äî Branch will be automatically created on issue &lt;strong&gt;assigned&lt;/strong&gt;, and auto-linked on PR&lt;/li&gt;
&lt;li&gt;üî• Snippets ‚Äî A collection of useful snippets&lt;/li&gt;
&lt;li&gt;üëÄ Default Open Graph ‚Äî Awesome open graph generated using &lt;a href="https://github.com/theodorusclarence/og"&gt;og.thcl.dev&lt;/a&gt;, fork it, and deploy!&lt;/li&gt;
&lt;li&gt;üó∫ Site Map ‚Äî Automatically generate sitemap.xml&lt;/li&gt;
&lt;li&gt;üì¶ Expansion Pack ‚Äî Easily install common libraries, additional components, and configs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quite a lot huh? I'm going to take an in-depth look at each feature and automation with this post.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#easy-initial-config"&gt;
  &lt;/a&gt;
  Easy Initial Config
&lt;/h2&gt;

&lt;p&gt;Don't you hate it when you use a starter, then you see some branding or default configs left out unchanged?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InupbyAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzsra4q233gng0yqgpuu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InupbyAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzsra4q233gng0yqgpuu.png" alt="Image description" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I prepared a unique word that you can find, with some guide of what to override. You can remove the comments after you override them, and leave them if you haven't. Treat them as a to-do comment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prebuilt-components"&gt;
  &lt;/a&gt;
  Pre-built Components
&lt;/h2&gt;

&lt;p&gt;I prepared a set of components that is neutral and can be used to help boost your speed in development. These are components that have a &lt;strong&gt;high chance of being used&lt;/strong&gt;, not just getting deleted after you finished cloning the repository.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xawHHhqIVVo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;All animations are configured to be &lt;strong&gt;motion-safe&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-like-the-theme"&gt;
  &lt;/a&gt;
  Don't like the theme?
&lt;/h3&gt;

&lt;p&gt;You can change it with CSS Variables. I prepared &lt;strong&gt;all Tailwind CSS colors&lt;/strong&gt; converted to CSS Variables in the &lt;code&gt;styles/colors.css&lt;/code&gt; file that you can copy and use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7KVGz6d3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqiyurl4atgh2rcaxtur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7KVGz6d3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqiyurl4atgh2rcaxtur.png" alt="Image description" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See more details about components on the &lt;a href="https://tsnext-tw.thcl.dev/components"&gt;demo page&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seo-enhancement"&gt;
  &lt;/a&gt;
  SEO Enhancement
&lt;/h2&gt;

&lt;p&gt;Do you want your project to be indexed to search engines? Yeah, me too. I optimized the SEO by preparing a custom Seo component and adding &lt;a href="https://www.npmjs.com/package/next-sitemap"&gt;next-sitemap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iyB6sdML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkgbd4a1u6v3dbq4l4ev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyB6sdML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkgbd4a1u6v3dbq4l4ev.png" alt="Image description" width="880" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use the default meta tag, just add &lt;code&gt;&amp;lt;Seo /&amp;gt;&lt;/code&gt; on top of your page.&lt;/p&gt;

&lt;p&gt;You can also customize it per page by overriding the title, description as props&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Seo&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Next.js Tailwind Starter'&lt;/span&gt; &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'your description'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or if you want to still keep the site title like &lt;code&gt;%s | Next.js Tailwind Starter&lt;/code&gt;, you can use &lt;code&gt;templateTitle&lt;/code&gt; props.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#minimal-dependencies"&gt;
  &lt;/a&gt;
  Minimal Dependencies
&lt;/h2&gt;

&lt;p&gt;I tried to keep the dependencies small, not the devDeps tho, you'll see why after you see a bunch of automation I create. Here are the 3 dependencies (excluding Next.js and React deps)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://bundlephobia.com/package/clsx@latest"&gt;clsx&lt;/a&gt;, a utility for constructing &lt;code&gt;className&lt;/code&gt; strings conditionally.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bundlephobia.com/package/react-icons@latest"&gt;react-icons&lt;/a&gt;, easily import popular icon packs in SVG format.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dcastil/tailwind-merge"&gt;tailwind-merge&lt;/a&gt;, override tailwind CSS classes without using !important.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The tailwind-merge can be used by importing &lt;code&gt;clsxm&lt;/code&gt; from &lt;code&gt;@/lib/clsxm&lt;/code&gt;. All of the pre-built components are using clsxm to ease the use of the reusable components.&lt;/p&gt;

&lt;p&gt;Here is a thread that I made about tailwind-merge:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18qawSgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FHquM8XVcAI4YYY.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayzqsxbW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1478045844381175814/mnGWfaPS_normal.png" alt="Theodorus Clarence profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Theodorus Clarence
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @th_clarence
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Using this, we can override reusable components &lt;a href="https://twitter.com/tailwindcss"&gt;@tailwindcss&lt;/a&gt; classes without using the !important modifier.&lt;br&gt;&lt;br&gt;The lib looks stable, and this simplifies by a lot when constructing conditional class originally with clsx. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:29 AM - 28 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1475685363003768836" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1475685363003768836" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1475685363003768836" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#absolute-import-amp-path-alias"&gt;
  &lt;/a&gt;
  Absolute Import &amp;amp; Path Alias
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../../components/Header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// simplified to&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/Header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Reduce the complexity of importing components by using absolute import, and a nice path alias to differentiate &lt;strong&gt;your&lt;/strong&gt; &lt;strong&gt;code&lt;/strong&gt; and &lt;strong&gt;external libraries.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prettier-with-tailwind-css-class-sorter"&gt;
  &lt;/a&gt;
  Prettier with Tailwind CSS Class Sorter
&lt;/h2&gt;

&lt;p&gt;In this repository, I set it up so it will automatically sort class based on the custom config file. It even works with clsx or classnames! You don't need to ask your colleague to download another VS Code extension. All of it is bound to the repository.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AJt5na1E7DE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#eslint"&gt;
  &lt;/a&gt;
  ESLint
&lt;/h2&gt;

&lt;p&gt;This repository is prepared with ESLint to reduce human errors during development. Don't worry there won't be any annoying &lt;strong&gt;styling lint&lt;/strong&gt; because all of it is taken care of with Prettier. Some cool features such as:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#auto-import-sort-amp-unused-import-removal"&gt;
  &lt;/a&gt;
  Auto Import Sort &amp;amp; Unused Import Removal
&lt;/h3&gt;

&lt;p&gt;Don't you hate it when you have to revise your code because your reviewer told you to &lt;strong&gt;reorder imports&lt;/strong&gt;? If they haven't automated it, do yourself a favor by recommending this starter.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6W6FSJ6mq6c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#husky-amp-lint-staged"&gt;
  &lt;/a&gt;
  Husky &amp;amp; Lint Staged
&lt;/h2&gt;

&lt;p&gt;There are 3 Husky hooks that will help you with the automation of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;pre-commit&lt;/strong&gt;, run &lt;strong&gt;eslint check&lt;/strong&gt; with 0 tolerance to warnings and errors and &lt;strong&gt;format the code&lt;/strong&gt; using prettier&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;commit-msg&lt;/strong&gt;, run commitlint to ensure the use of the &lt;a href="https://theodorusclarence.com/library/conventional-commit-readme"&gt;Conventional Commit&lt;/a&gt; for commit messages&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;post-merge&lt;/strong&gt;, running &lt;code&gt;yarn&lt;/code&gt; every &lt;code&gt;git pull&lt;/code&gt; or after merging to ensure all new packages are installed and ready to go&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Oh right, you also don't have to wait that long because husky only the code that you &lt;strong&gt;stage&lt;/strong&gt; (using &lt;a href="https://github.com/okonet/lint-staged"&gt;lint-staged&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;What about the type check, or if the staged code made the other fail? Don't burden your efficiency, just chuck it into Github Actions to run in the background.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  Github Actions
&lt;/h2&gt;

&lt;p&gt;I love automation and I put some useful workflows that you can use.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#type-check-whole-eslint-amp-prettier"&gt;
  &lt;/a&gt;
  Type Check, Whole ESLint &amp;amp; Prettier
&lt;/h3&gt;

&lt;p&gt;For the sake of efficiency, we don't run whole project checks on your local machine. That takes too long just to commit simple changes. We will run it on Github Actions instead, then you can continue working while waiting for it to complete.&lt;/p&gt;

&lt;p&gt;Here are the complete lists that will be checked:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;ESLint&lt;/strong&gt; - will fail if there are any warnings and errors&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Type Check&lt;/strong&gt; - will fail on &lt;code&gt;tsc&lt;/code&gt; error&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Prettier Check&lt;/strong&gt; - will fail if there are any formatting errors&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Test&lt;/strong&gt; - will fail if there are any test failures&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jTem0J3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsacxdlt6t8ogshjfmrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jTem0J3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsacxdlt6t8ogshjfmrt.png" alt="Image description" width="828" height="623"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github also provides useful inline warnings in the Files Changed tab on the PR.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#auto-create-branch"&gt;
  &lt;/a&gt;
  Auto Create Branch
&lt;/h3&gt;

&lt;p&gt;We can automatically create a branch from the latest main branch after you &lt;strong&gt;assign&lt;/strong&gt; an issue.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/b2TWOdF2kW0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This will create a &lt;strong&gt;consistent branch name&lt;/strong&gt; with the issue number in front of them, and some issue context.&lt;/p&gt;

&lt;p&gt;p.s. You have to install the app for your organization/account/repository from the &lt;a href="https://github.com/marketplace/create-issue-branch"&gt;GitHub Marketplace&lt;/a&gt; for this to work&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#auto-link-pr-to-issue"&gt;
  &lt;/a&gt;
  Auto Link PR to Issue
&lt;/h2&gt;

&lt;p&gt;We automated the branch creation, the lint &amp;amp; the test process on the PR, what's next? Yep, linking PR to issue. That is &lt;strong&gt;super annoying&lt;/strong&gt; and I always &lt;strong&gt;forgot&lt;/strong&gt; to do it. We'll automate it using our consistent branch name.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lOWtCVXq3os"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It also provides a nice description of related issues, so your reviewer can check the issue first before reviewing.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#open-graph-generator"&gt;
  &lt;/a&gt;
  Open Graph Generator
&lt;/h2&gt;

&lt;p&gt;I also provided an open graph application that you can &lt;a href="https://github.com/theodorusclarence/og"&gt;fork and deploy to vercel&lt;/a&gt; for &lt;strong&gt;free&lt;/strong&gt;. It is automatically used with the SEO component and will generate a dynamic open graph based on the page title and description.&lt;/p&gt;

&lt;p&gt;It defaults to my deployment, but please &lt;strong&gt;fork it&lt;/strong&gt; and self-host. Because I might change the API without notice and could break your app's opengraph.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v8ucitqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yaywheagpcp6ctbg8dgt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v8ucitqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yaywheagpcp6ctbg8dgt.png" alt="Image description" width="880" height="653"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can play around with the API on &lt;a href="https://og.thcl.dev/"&gt;og.thcl.dev&lt;/a&gt;. You can even customize it with your own brand based on the repo!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#snippets"&gt;
  &lt;/a&gt;
  Snippets
&lt;/h2&gt;

&lt;p&gt;Snippets are crucial if you want to make a consistent convention across the application. I prepared some snippets that can help you code faster and more effectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wVMlIo5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atuyulv88dc3er39xzdq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wVMlIo5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atuyulv88dc3er39xzdq.png" alt="Image description" width="880" height="900"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See more detail on &lt;a href="https://github.com/theodorusclarence/ts-nextjs-tailwind-starter/blob/main/.vscode/typescriptreact.code-snippets"&gt;this file&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#regions"&gt;
  &lt;/a&gt;
  Regions
&lt;/h3&gt;

&lt;p&gt;You might notice the &lt;code&gt;#region&lt;/code&gt; with green highlight comments. This is something that can be used with &lt;code&gt;reg&lt;/code&gt; snippets. You can easily separate your logic into named regions, then fold them if they are insignificant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JlglmVXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9czf0va3v0ajndrybj6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JlglmVXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9czf0va3v0ajndrybj6.png" alt="Image description" width="880" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The lesser noise the better. You can also use &lt;code&gt;‚åòK + ‚åò8&lt;/code&gt; to fold all regions.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#snippets-wrap"&gt;
  &lt;/a&gt;
  Snippets Wrap
&lt;/h3&gt;

&lt;p&gt;This is something that I recently added because it is annoying to wrap a component with React Fragment or refactoring className with clsx. So I created a snippet pattern called &lt;strong&gt;Snippets Wrap&lt;/strong&gt; that can help you with that.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/baCi6IfJzvo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#expansion-pack"&gt;
  &lt;/a&gt;
  Expansion Pack
&lt;/h2&gt;

&lt;p&gt;I have to keep this starter minimal, but there are some libraries that I often use in every project. So I created a bash script to &lt;strong&gt;install, config, and add additional components&lt;/strong&gt; to this starter.&lt;/p&gt;

&lt;p&gt;Currently, there are some packs in the &lt;a href="https://github.com/theodorusclarence/expansion-pack"&gt;expansion-pack repository&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React Hook Form + Form Input Components&lt;/li&gt;
&lt;li&gt;&lt;a href="https://theodorusclarence.com/blog/nextjs-storybook-tailwind"&gt;Storybook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cypress + workflow to run on Vercel preview on push&lt;/li&gt;
&lt;li&gt;&lt;a href="https://theodorusclarence.com/blog/react-loading-state-pattern"&gt;Toast with React Query / SWR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/theodorusclarence/dialog-manager"&gt;Dialog Manager with Zustand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NProgress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a demo for the React Hook Form one&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fna-ekaU0A4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hit the terminal then grab some coffee. You're back with complete components also a &lt;strong&gt;sandbox&lt;/strong&gt; page to see how to implement the library.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/theodorusclarence"&gt;
        theodorusclarence
      &lt;/a&gt; / &lt;a href="https://github.com/theodorusclarence/expansion-pack"&gt;
        expansion-pack
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üîã Useful stack expansion for ts-nextjs-tailwind-starter
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For more demo, check out the &lt;a href="https://github.com/theodorusclarence/expansion-pack"&gt;repository readme&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#star-the-repository"&gt;
  &lt;/a&gt;
  Star the repository
&lt;/h2&gt;

&lt;p&gt;Liking the features? This repository basically grows with me, so the features will go through changes and improvement. If you got anything in mind, leave a comment below, or &lt;a href="https://github.com/theodorusclarence/ts-nextjs-tailwind-starter/discussions"&gt;open a discussion&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/theodorusclarence"&gt;
        theodorusclarence
      &lt;/a&gt; / &lt;a href="https://github.com/theodorusclarence/ts-nextjs-tailwind-starter"&gt;
        ts-nextjs-tailwind-starter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üîã Next.js + Tailwind CSS + TypeScript starter packed with useful development features
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Finally, I would be &lt;strong&gt;thrilled&lt;/strong&gt; if you give a &lt;strong&gt;star&lt;/strong&gt; to the repository.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally posted on &lt;a href="https://theodorusclarence.com/?ref=devto"&gt;my personal site&lt;/a&gt;, find more &lt;a href="https://theodorusclarence.com/blog?ref=devto"&gt;blog posts&lt;/a&gt; and &lt;a href="https://theodorusclarence.com/library?ref=devto"&gt;code snippets library&lt;/a&gt; I put up for easy access on my site üöÄ&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like this post? &lt;a href="https://theodorusclarence.com/subscribe?ref=devto"&gt;Subscribe to my newsletter&lt;/a&gt; to get notified every time a new post is out!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>typescript</category>
      <category>react</category>
      <category>productivity</category>
    </item>
    <item>
      <title>üåû Toggle theme üåë in React with MUI v5 and Redux üöÄ</title>
      <author>Rajesh Joshi</author>
      <pubDate>Sun, 09 Jan 2022 08:03:19 +0000</pubDate>
      <link>https://dev.to/rajeshj3/toggle-theme-in-react-with-mui-v5-and-redux-4h4b</link>
      <guid>https://dev.to/rajeshj3/toggle-theme-in-react-with-mui-v5-and-redux-4h4b</guid>
      <description>&lt;p&gt;Dark and Light theme in any Web-App make it even more attractive. To build a theme enabled web-app in ReactJS with the help of Material-UI v5 and Redux follow this article.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SQegwZNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lndxxbrzh8o0zwbk5dza.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SQegwZNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lndxxbrzh8o0zwbk5dza.gif" alt="Theme Animation" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#directory-structure"&gt;
  &lt;/a&gt;
  Directory Structure
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src
‚îÇ   App.js
‚îÇ   index.css
‚îÇ   index.js
‚îÇ
‚îî‚îÄ‚îÄ‚îÄtheme
‚îÇ   ‚îÇ   theme.js
‚îÇ
‚îî‚îÄ‚îÄ‚îÄredux
‚îÇ   ‚îÇ   store.js
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ‚îÄtheme
‚îÇ       ‚îÇ   themeSlice.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-react-project"&gt;
  &lt;/a&gt;
  Create a React Project
&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;npx&lt;/code&gt; create a new react project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx create-react-app my-site
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-dependencies"&gt;
  &lt;/a&gt;
  Add dependencies
&lt;/h2&gt;

&lt;p&gt;Add the following libraries&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add @reduxjs/toolkit react-redux @mui/material @emotion/react @emotion/styled
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;your &lt;code&gt;package.json&lt;/code&gt; should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my-site"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@emotion/react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^11.7.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@emotion/styled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^11.6.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@mui/material"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.2.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@reduxjs/toolkit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.7.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/jest-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.16.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^12.1.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/user-event"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^13.5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-redux"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.2.6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"5.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"web-vitals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.1.3"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts eject"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"eslintConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"react-app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-app/jest"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"browserslist"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"production"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;0.2%"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"not dead"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"not op_mini all"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"development"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 chrome version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 firefox version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 safari version"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-write-code"&gt;
  &lt;/a&gt;
  Let's Write Code üöÄ
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Start with Writing Store / Redux&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To learn the basics of the new Redux using a simple &lt;code&gt;Counter App&lt;/code&gt;, you may have a look at my recent article &lt;a href="https://dev.to/rajeshj3/new-redux-is-just-3mle"&gt;New Redux üò± is just üî•&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;themeSlice.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;themeSlice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;toggleTheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;darkTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;themeSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;themeSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;initialState&lt;/code&gt; the default value of &lt;code&gt;darkTheme&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, i.e. by default the theme will be &lt;strong&gt;light&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Register the &lt;code&gt;themeSlice&lt;/code&gt; in store. So, your &lt;code&gt;store.js&lt;/code&gt; should look like this.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./theme/themeSlice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Don't forget to provide the store to the App in &lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// redux&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./redux/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Let's write &lt;code&gt;theme/theme.js&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Define both light and dark themes in &lt;code&gt;theme.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createTheme&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;palette&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;paper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#f2f2f2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#11111&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createTheme&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;palette&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;paper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#222&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Write &lt;code&gt;App.js&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Based on the Global state variable &lt;code&gt;darkTheme&lt;/code&gt;, provide theme to &lt;code&gt;ThemeProvider HOC&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Paper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;FormControlLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Typography&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./theme/theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./redux/theme/themeSlice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// get theme from store&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// initialize dispatch variable&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// ToggleSwitch component&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FormControlLabel&lt;/span&gt;
            &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;
                &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;darkTheme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toggleTheme&lt;/span&gt;&lt;span class="p"&gt;())}&lt;/span&gt;
              &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toggle Theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/FormGroup&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;darkTheme&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;darkTheme&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lightTheme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Paper&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;minHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100vh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ToggleSwitch&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Typography&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Typography&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Paper&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ThemeProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-the-development-server"&gt;
  &lt;/a&gt;
  Run the Development Server üöÄ
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000/"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Light Theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9-2p5iDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqo1tqjwlpq9n3kwknxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9-2p5iDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqo1tqjwlpq9n3kwknxg.png" alt="Light Theme" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dark Theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MsWaQqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1cmba2mtwt9ndhrl6yp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MsWaQqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1cmba2mtwt9ndhrl6yp.png" alt="Dark Theme" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Hurray! You just learned &lt;code&gt;üåû Toggle theme üåë in React with MUI v5 and Redux üöÄ&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;I hope, you guys liked this quick tutorial. If so, then please don't forget to drop a Like ‚ù§Ô∏è&lt;/p&gt;

&lt;p&gt;And also, help me reach &lt;strong&gt;1k Subscribers&lt;/strong&gt; ü§©, on my &lt;a href="https://www.youtube.com/channel/UCCO4jIqmQVFDmVeeaAO5obA"&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding! üòÉüíª&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Manage Dates and Times in PHP Using Carbon</title>
      <author>Prosper Yong</author>
      <pubDate>Sun, 09 Jan 2022 06:37:08 +0000</pubDate>
      <link>https://dev.to/yongdev/how-to-manage-dates-and-times-in-php-using-carbon-1jne</link>
      <guid>https://dev.to/yongdev/how-to-manage-dates-and-times-in-php-using-carbon-1jne</guid>
      <description>&lt;p&gt;Date and time manipulation is one of a few frequently-experienced challenges of developing web apps in PHP. And one of it's most prevalent issues is identifying time disparities and making them readable, such as "one hour ago". &lt;/p&gt;

&lt;p&gt;However, handling dates and times ‚Äî and issues such as this ‚Äî is greatly simplified by using &lt;a href="https://carbon.nesbot.com/docs/"&gt;Carbon&lt;/a&gt;; it's a library which reduces lengthy hours of coding and debugging to only a few lines of code. This is because Carbon, created by Brian Nesbit, extends PHP's own &lt;a href="https://www.php.net/manual/en/class.datetime.php"&gt;DateTime class&lt;/a&gt; and makes it much simpler to use. &lt;/p&gt;

&lt;p&gt;If you've not heard of it before, it is self-described as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A basic PHP API extension for DateTime&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this tutorial, you will learn Carbon's core features and capabilities, giving you the ability to far more easily manipulate date and time in PHP.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To follow this tutorial you need the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP 7.4 or higher.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://getcomposer.org/"&gt;Composer&lt;/a&gt; globally installed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;To install Carbon, first create a new project directory called &lt;em&gt;carbon&lt;/em&gt;, change into the directory, and install the package, by executing the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;carbon
&lt;span class="nb"&gt;cd &lt;/span&gt;carbon
composer require nesbot/carbon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;!!!tip&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Carbon is already included if you're using Laravel. If you are, have a look at the suggested &lt;a href="https://carbon.nesbot.com/laravel"&gt;Laravel settings and best practices&lt;/a&gt;. If you're using Symfony, have a look at the &lt;a href="https://carbon.nesbot.com/symfony"&gt;Symfony configuration and best-practices guidelines&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;!!!tip&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#format-dates-using-carbon"&gt;
  &lt;/a&gt;
  Format dates using Carbon
&lt;/h2&gt;

&lt;p&gt;With Carbon installed, in your editor or IDE, create a new PHP file, named &lt;em&gt;index.php&lt;/em&gt; in the root of your project directory. Then, add the code below to &lt;em&gt;index.php&lt;/em&gt; to include Composer's Autoloader file, &lt;em&gt;vendor/autoload.php&lt;/em&gt;, and imported Carbon's core class_._&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'vendor/autoload.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Carbon\Carbon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#print-dates"&gt;
  &lt;/a&gt;
  Print dates
&lt;/h2&gt;

&lt;p&gt;Now that Carbon's installed, let's start working through some examples, starting with the most essential: printing out some dates. To do that, we'll use &lt;code&gt;carbon::today&lt;/code&gt; to retrieve today's date via Carbon, which you can see in the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/vendor/autoload.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="n"&gt;carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add that to &lt;em&gt;index.php&lt;/em&gt; and then run it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-10-25 00:00:00
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output, which you can see an example of above, returns the current date, with the time being blank. However, if you update &lt;em&gt;index.php&lt;/em&gt; to use  &lt;code&gt;carbon:: now&lt;/code&gt; instead, which you can see in the example below, you can retrieve the time along with the date.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/vendor/autoload.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$now&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After updating &lt;em&gt;index.php&lt;/em&gt; and running it, you should see output similar to the example below, in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-01-25 22:49:56
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In contrast to &lt;code&gt;Carbon::now()&lt;/code&gt; which returns the current date &lt;strong&gt;and&lt;/strong&gt; time, and &lt;code&gt;Carbon:today()&lt;/code&gt; which only returns the current date, &lt;code&gt;Carbon::yesterday()&lt;/code&gt; and &lt;code&gt;Carbon::tomorrow()&lt;/code&gt; generate Carbon instances for yesterday and tomorrow, respectively, as in the examples below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/vendor/autoload.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$yes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;yesterday&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Yesterday: &lt;/span&gt;&lt;span class="nv"&gt;$yes&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$tomorrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;tomorrow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Tomorrow: &lt;/span&gt;&lt;span class="nv"&gt;$tomorrow&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The functions &lt;code&gt;today()&lt;/code&gt;, &lt;code&gt;yesterday()&lt;/code&gt;, &lt;code&gt;now&lt;/code&gt;, and &lt;code&gt;tomorrow()&lt;/code&gt; are examples of common static instantiation helpers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-dates-with-precision"&gt;
  &lt;/a&gt;
  Create dates with precision
&lt;/h2&gt;

&lt;p&gt;Carbon also allows us to generate dates and times based on a set of parameters. For example, to create a new &lt;code&gt;Carbon&lt;/code&gt; instance for a specific date use the &lt;code&gt;Carbon::createFromDate()&lt;/code&gt; method, passing in the year, month, day, and timezone, as in the following example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/vendor/autoload.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$timezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Europe/Berlin'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$timezone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also specify the time, by calling &lt;code&gt;Carbon::create()&lt;/code&gt;, passing in the year, month, day, timezone, hour, minute, and second, as in  the following example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/vendor/autoload.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mo"&gt;04&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$timezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Europe/Berlin'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$minute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$minute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$timezone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If any one or more of &lt;code&gt;$year&lt;/code&gt;, &lt;code&gt;$month&lt;/code&gt;, &lt;code&gt;$day&lt;/code&gt;, &lt;code&gt;$hour&lt;/code&gt;, &lt;code&gt;$minute&lt;/code&gt;, or &lt;code&gt;$second&lt;/code&gt; are set to &lt;code&gt;null&lt;/code&gt; their &lt;code&gt;now()&lt;/code&gt; equivalent values will be used. If &lt;code&gt;$hour&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, however, then the default values for &lt;code&gt;$minute&lt;/code&gt; and &lt;code&gt;$second&lt;/code&gt; will be &lt;code&gt;0&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If you pass in &lt;code&gt;null&lt;/code&gt; for any of those attributes, it will default to the current date and time.&lt;/p&gt;

&lt;p&gt;Update &lt;em&gt;index.php&lt;/em&gt;  in your editor or IDE to match the code below and run it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/vendor/autoload.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Carbon\Carbon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$date1&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Europe/Moscow'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$date2&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$date3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'America/Chicago'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$date3&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$date4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Africa/Lagos'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$date5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromTimestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1633703084&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$date5&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;create()&lt;/code&gt; function in the first variable creates a &lt;code&gt;Carbon&lt;/code&gt; instance from date and time components;  A timezone was supplied on the constructor to the second variable.&lt;/p&gt;

&lt;p&gt;A Carbon object was constructed using date components with &lt;code&gt;Carbon::createFromDate()&lt;/code&gt; when initializing the third and fourth variables. Doing so generates a &lt;code&gt;Carbon&lt;/code&gt; instance based on just on a date. &lt;/p&gt;

&lt;p&gt;It's worth pointing out that if no timezone is specified, your default timezone is used. However, if a timezone &lt;em&gt;other&lt;/em&gt; than yours is specified, the timezone's actual time is supplied. The current time is set in the time section. &lt;/p&gt;

&lt;p&gt;The final variable, initialized using &lt;code&gt;Carbon::createFromTimestamp&lt;/code&gt;, generates a date based on a timestamp.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#relative-modifiers"&gt;
  &lt;/a&gt;
  Relative Modifiers
&lt;/h2&gt;

&lt;p&gt;Another fantastic feature of Carbon is relative modifiers. These allow strings such as "&lt;em&gt;next friday&lt;/em&gt;" or "&lt;em&gt;a year ago&lt;/em&gt;" to be used when constructing &lt;code&gt;Carbon&lt;/code&gt; instances &lt;em&gt;relative&lt;/em&gt; to the current date. &lt;/p&gt;

&lt;p&gt;The following are examples of strings that are considered relative modifiers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ago&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;today&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tomorrow&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Modify the date and time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When working with dates, you'll need to do more than just get the date and time. You'll frequently need to modify the date or time as well, such as adding a day or a week or subtracting a month.&lt;/p&gt;

&lt;p&gt;A good example of needing this functionality is when building an affiliate program. In this scenario you'll want the affiliate cookie which the user receives to expire after a specified period of time, making the referral invalid. &lt;/p&gt;

&lt;p&gt;Let's assume a cookie has a 90-day lifespan. With Carbon's &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;subtract&lt;/code&gt; methods, we could compute that time quite trivially. The example below uses &lt;code&gt;addDays()&lt;/code&gt; to determine when the cookie expires.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/vendor/autoload.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Affliate_Program'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Referrer ID'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// add 90 days to the current time&lt;/span&gt;
&lt;span class="nv"&gt;$time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addDays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$expires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;strtotime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;setcookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expires&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It also uses some of the other &lt;code&gt;add()&lt;/code&gt; and &lt;code&gt;sub()&lt;/code&gt; methods &lt;a href="https://carbon.nesbot.com/docs/#api-addsub"&gt;which Carbon provides&lt;/a&gt;. If you're adding a single date, such as a day, you use &lt;code&gt;addDay()&lt;/code&gt;, but if you're adding several days, you use &lt;code&gt;addDays()&lt;/code&gt;. Using Carbon‚Äôs add and subtract methods can provide you with adjusted date and times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looking-forward-and-back"&gt;
  &lt;/a&gt;
  Looking forward and back
&lt;/h2&gt;

&lt;p&gt;Carbon also provides the &lt;code&gt;next()&lt;/code&gt; and &lt;code&gt;previous()&lt;/code&gt; functions which return the upcoming and previous occurrences of a particular weekday, which you can see an example of in the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/vendor/autoload.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Carbon\Carbon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$now&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$next_monday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$now&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MONDAY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Next monday: &lt;/span&gt;&lt;span class="nv"&gt;$next_monday&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$prev_monday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$now&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MONDAY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Previous monday: &lt;/span&gt;&lt;span class="nv"&gt;$prev_monday&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#format-the-date-and-time"&gt;
  &lt;/a&gt;
  Format the date and time
&lt;/h2&gt;

&lt;p&gt;Yet another fantastic option Carbon provides is the ability to format dates and times in whatever format that you desire. &lt;/p&gt;

&lt;p&gt;As Carbon is an expanded version of &lt;a href="https://www.php.net/manual/en/refs.calendar.php"&gt;PHP's built-in date and time functions&lt;/a&gt;, Carbon can use PHP's built-in date formats via the &lt;code&gt;format()&lt;/code&gt; function. In addition, &lt;code&gt;toXXXString()&lt;/code&gt; methods are available to display dates and times with predefined formatting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/vendor/autoload.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toDateString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//2021-10-25&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toFormattedDateString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//Oct 25, 2021&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toTimeString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//12:48:00&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toDateTimeString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//2021-10-25 12:48:00&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toDayDateTimeString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//Mon, Oct 25, 2021 12:48 PM&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d h:i:s A'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//2021-10-25 12:48:00 PM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other typical datetime formatting methods available to Carbon include the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/vendor/autoload.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toAtomString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toCookieString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toIso8601String&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toIso8601ZuluString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toRfc822String&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toRfc850String&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toRfc1036String&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toRfc1123String&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toRfc3339String&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toRfc7231String&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toRssString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toW3cString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#calculate-relative-time"&gt;
  &lt;/a&gt;
  Calculate relative time
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;diffForHumans()&lt;/code&gt; functions in Carbon also allow us to represent time in relative terms. Datetime discrepancies are frequently displayed in a so-called humanized format, such as in one year or three minutes ago.&lt;/p&gt;

&lt;p&gt;Let's assume we're developing an extension for a blog CMS and we want to display the article's publish time in "hours ago" or the comments publish time in "hours ago."&lt;/p&gt;

&lt;p&gt;First, the time and date the article was published, as well as other parameters, would be recorded in a database field. As a result, we extract the date from the database in the format &lt;code&gt;Y-m-d H:i:s&lt;/code&gt; and store it in a variable. Let's call it &lt;code&gt;$time&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nv"&gt;$time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'articledate'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the date in our database is August 4th, 2021, such as in the example below, you would use the &lt;code&gt;carbonCreateFromFormat()&lt;/code&gt; function to produce a Carbon date, and then use &lt;code&gt;diffForHumans()&lt;/code&gt; to find the difference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/vendor/autoload.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'articledate'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;diffForHumans&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the date was saved as a timestamp, you can call &lt;code&gt;Carbon::createFromTimestamp&lt;/code&gt;. Carbon also provides user translator services. So if your site makes use of a user's language preferences, call the language. If you have a user that speaks French, for example, all you have to do is call the function before the code, as seen below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/vendor/autoload.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;setLocale&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="s1"&gt;'.Carbon::setLocale('&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;diffForHumans&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output in this case would be, for example, 'il y a 2 mois'.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-the-essentials-of-managing-dates-and-times-in-php-using-carbon"&gt;
  &lt;/a&gt;
  That's the essentials of managing dates and times in PHP using Carbon
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you learned how to install Carbon and its core functionality. However, Carbon has a great deal more functionality than has been covered in this tutorial. Check out their &lt;a href="https://carbon.nesbot.com/docs/"&gt;docs&lt;/a&gt; if you're keen to learn more about the available functionality.&lt;/p&gt;

</description>
      <category>php</category>
      <category>code</category>
      <category>api</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Day 74 of 100 Days of Code &amp; Scrum: Tenth Weekly Retrospective</title>
      <author>Rammina</author>
      <pubDate>Sun, 09 Jan 2022 06:19:24 +0000</pubDate>
      <link>https://dev.to/rammina/day-74-of-100-days-of-code-scrum-tenth-weekly-retrospective-4me3</link>
      <guid>https://dev.to/rammina/day-74-of-100-days-of-code-scrum-tenth-weekly-retrospective-4me3</guid>
      <description>&lt;p&gt;Happy weekend, everyone!&lt;/p&gt;

&lt;p&gt;Today marks the end of first week of the year, and I was off to a fairly productive start! I managed to get a lot of things done with regards to my &lt;a href="https://www.rammina.com"&gt;company website&lt;/a&gt;, professional networking, job searching, and so on. Overall, it went fairly well, but there are things that could be improved upon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cfj7y8Cl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641709020279/6SJ5d_etm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cfj7y8Cl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641709020279/6SJ5d_etm.png" alt="Rammina Restofund Page" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are still so many features I can add to my company website, but they are not necessary or needed currently. I will most likely put them on the backburner for the coming weeks.&lt;/p&gt;

&lt;p&gt;Let's move on to my weekly retrospective!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#higher-priority"&gt;
  &lt;/a&gt;
  Higher Priority
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;add more details to portfolio projects, like a "View More Details" that shows on a modal the technology stack and features of a specific project.&lt;/li&gt;
&lt;li&gt;add more sections to other pages and make them more detailed:

&lt;ul&gt;
&lt;li&gt;the &lt;a href="https://www.rammina.com/services"&gt;Services page&lt;/a&gt; could include specific sections for "Website Development," such as Frontend Web Development and Backend Web Development, what kind of technology stacks are used, and so on.&lt;/li&gt;
&lt;li&gt;Digital advertising, for example, could include different types of services and techniques such as email marketing, social media marketing, and the likes.&lt;/li&gt;
&lt;li&gt;Writing also could include different types of writing services, including articles, blogs, and etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;add a small subsection on the Contact section that says something like "or you can contact us via e-mail at &lt;a href="mailto:ramminadevdesign@gmail.com"&gt;&lt;/a&gt;&lt;a href="mailto:ramminadevdesign@gmail.com"&gt;ramminadevdesign@gmail.com&lt;/a&gt; or call us on number" below the submit button for the form.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#lower-priority"&gt;
  &lt;/a&gt;
  Lower Priority
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;add tags functionality for each blog post to make it easier to categorize.&lt;/li&gt;
&lt;li&gt;add lazy loading and infinite scrolling for all blog posts page (so data that is loaded by batches to reduce build time).&lt;/li&gt;
&lt;li&gt;add pages for different users and authors.&lt;/li&gt;
&lt;li&gt;allow registered users to comment on blog posts (going to use Disqus).&lt;/li&gt;
&lt;li&gt;add quality-of-life features:

&lt;ul&gt;
&lt;li&gt;filtering by tags&lt;/li&gt;
&lt;li&gt;search functionality&lt;/li&gt;
&lt;li&gt;sort blog posts and authors&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;add share on social media button (e.g. Twitter, LinkedIn, Facebook) for each blog post.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;continue to learn more about Scrum, through reading articles and watching videos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weekly-review"&gt;
  &lt;/a&gt;
  Weekly Review
&lt;/h2&gt;

&lt;p&gt;Here are the things I've managed to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add a specific project details page for each individual portfolio project, like &lt;a href="https://www.rammina.com/resto-fund"&gt;RestoFund&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;attach alternative contact methods subsection for the &lt;a href="https://www.rammina.com/#contact"&gt;Contact section&lt;/a&gt;, such as e-mail and contact number.&lt;/li&gt;
&lt;li&gt;fix some of the bugs in my company website.&lt;/li&gt;
&lt;li&gt;learned a little bit more about Next.js.&lt;/li&gt;
&lt;li&gt;continued studying Scrum.&lt;/li&gt;
&lt;li&gt;expanded my network.&lt;/li&gt;
&lt;li&gt;I installed a Website Blocker Chrome extension to minimize distractions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weekly-retrospective"&gt;
  &lt;/a&gt;
  Weekly Retrospective
&lt;/h2&gt;

&lt;p&gt;Moving on, let's tackle what I've managed to do well, what my shortcomings are, and what I could do better next time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-went-great"&gt;
  &lt;/a&gt;
  What Went Great
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I now have a page about the details for each project.&lt;/li&gt;
&lt;li&gt;there are now ways to contact me in case the message form does not work.&lt;/li&gt;
&lt;li&gt;cleaned up my website and fixed some bugs.&lt;/li&gt;
&lt;li&gt;continued learning Next.js and Scrum.&lt;/li&gt;
&lt;li&gt;expanded my network a little bit more.&lt;/li&gt;
&lt;li&gt;finally installed that website blocker that I've been procrastinating for months.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#some-mistakes-ive-made"&gt;
  &lt;/a&gt;
  Some Mistakes I've Made
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I planned to add too many features for my website, which is impossible to fit in a week.&lt;/li&gt;
&lt;li&gt;I still had days where I didn't code much.&lt;/li&gt;
&lt;li&gt;I pretty much neglected studying Typescript.&lt;/li&gt;
&lt;li&gt;I could learn more Next.js, by going through the documentation as I work.&lt;/li&gt;
&lt;li&gt;got distracted at times and couldn't focus much.&lt;/li&gt;
&lt;li&gt;I'm currently overwhelmed by the amount of choices I have, leading to analysis paralysis and I have hours when I go in circles without doing much.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#things-i-could-improve-on"&gt;
  &lt;/a&gt;
  Things I Could Improve On
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;focus my attention on my current priorities.&lt;/li&gt;
&lt;li&gt;be more disciplined with learning new things every day.&lt;/li&gt;
&lt;li&gt;prioritize the tasks that are more likely to help me meet my weekly goals.&lt;/li&gt;
&lt;li&gt;learn a little bit even if it's not much, on bad days.&lt;/li&gt;
&lt;li&gt;make some of my chores a lot easier to do in terms of workflow.&lt;/li&gt;
&lt;li&gt;try to automate the things I don't really have to do myself.&lt;/li&gt;
&lt;li&gt;avoid doing things that make me lazy, such as laying down on bed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/resources/blog/typical-sprint-play-play"&gt;Typical Sprint: Play-by-play | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/resources/blog/2-best-scrum-masters-i-ever-worked-master-coaching-and-facilitation"&gt;The 2 Best Scrum Masters I Ever Worked With - The Master Of Coaching And Facilitation | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cl1Ch9ARdQs"&gt;How to Increase Domain Rating (Website Authority) | YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/resources/blog/myth-8-scrum-master-junior-agile-coach"&gt;Myth 8: The Scrum Master is a Junior Agile Coach | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for the support, everyone! Enjoy your weekend!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 UX Tricks You Must Know in 2022</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 09 Jan 2022 06:15:11 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/5-ux-tricks-you-must-know-in-2022-5b2l</link>
      <guid>https://dev.to/ruppysuppy/5-ux-tricks-you-must-know-in-2022-5b2l</guid>
      <description>&lt;p&gt;Do you have what it takes to be an &lt;strong&gt;outstanding UX Developer&lt;/strong&gt; in 2022? &lt;em&gt;Add these tricks to your arsenal&lt;/em&gt; and witness your &lt;strong&gt;Development skills&lt;/strong&gt; break &lt;em&gt;new grounds that you didn't know even existed&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UacM9-P---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck6sa4gk88chjl05lxui.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UacM9-P---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck6sa4gk88chjl05lxui.gif" alt="let the party begin" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#three-click-rule"&gt;
  &lt;/a&gt;
  Three Click Rule
&lt;/h1&gt;

&lt;p&gt;What is the &lt;strong&gt;Three Click Rule&lt;/strong&gt; you ask? A &lt;em&gt;quick Google Search&lt;/em&gt; will reveal:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The three-click rule or three click rule is an unofficial web design rule concerning the design of website navigation. It suggests that a user of a website should be able to find any information with no more than three mouse clicks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Er... Why is this relevant?&lt;/em&gt; The decline in &lt;em&gt;attention span&lt;/em&gt; of the people lately has led to the origin of the &lt;strong&gt;Three Click Rule&lt;/strong&gt;. A &lt;strong&gt;click&lt;/strong&gt; is an interaction that results in the &lt;em&gt;highest cognitive load&lt;/em&gt;, because the &lt;em&gt;click works only in a small surface area&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;An alternative to &lt;em&gt;reduce the taxation&lt;/em&gt; on the brain, you can use &lt;strong&gt;gesture inputs&lt;/strong&gt; like &lt;strong&gt;swipes&lt;/strong&gt;, &lt;strong&gt;pinch&lt;/strong&gt; or &lt;strong&gt;double taps&lt;/strong&gt; (eg: &lt;strong&gt;Instagram&lt;/strong&gt; &amp;amp; &lt;strong&gt;LinkedIn&lt;/strong&gt;). The &lt;em&gt;general rule of thumb&lt;/em&gt; is, for &lt;strong&gt;double taps&lt;/strong&gt;, &lt;em&gt;the surface area should be large&lt;/em&gt;, else you fall in the same trap as the &lt;strong&gt;click&lt;/strong&gt; issue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2Ac1tyr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/516lxs3n4e492hcsd26f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2Ac1tyr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/516lxs3n4e492hcsd26f.gif" alt="swipe" width="540" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#appropriate-use-of-white-space"&gt;
  &lt;/a&gt;
  Appropriate use of White Space
&lt;/h1&gt;

&lt;p&gt;This is &lt;em&gt;one of the most crucial pillars&lt;/em&gt; of &lt;strong&gt;Modern UX&lt;/strong&gt;. As you can see here, the one with &lt;strong&gt;more spaced-out content&lt;/strong&gt; &lt;em&gt;looks way professional&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eoEdEpAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwvq1i7kgzpnu8lhyd6e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eoEdEpAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwvq1i7kgzpnu8lhyd6e.png" alt="no space" width="368" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iu-bTDm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj0utgn31529kuywhymr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iu-bTDm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj0utgn31529kuywhymr.png" alt="spaced" width="441" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you gain more experience designing &lt;strong&gt;UX&lt;/strong&gt;, you slowly &lt;em&gt;develop an eye for it&lt;/em&gt; by default. It is also crucial to maintain &lt;strong&gt;consistent spacing&lt;/strong&gt; (the &lt;em&gt;padding/margin&lt;/em&gt; in the left &amp;amp; right sides should be equal, same is the case for the &lt;em&gt;padding/margin&lt;/em&gt; in the top &amp;amp; bottom)&lt;/p&gt;

&lt;p&gt;You also need to maintain &lt;em&gt;adequate spacing across sections&lt;/em&gt;, a &lt;strong&gt;highly spaced out section&lt;/strong&gt; should be followed by a &lt;strong&gt;section with low spacing&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpaTkakv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/naajbklktvk4iyel4mm7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpaTkakv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/naajbklktvk4iyel4mm7.jpg" alt="section spacing" width="749" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To avoid &lt;strong&gt;lopsided spacing&lt;/strong&gt;, one &lt;em&gt;hack&lt;/em&gt; is to use &lt;strong&gt;alternate positioning&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a8vJDhd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hfv685fj9ldfe0ugte4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a8vJDhd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hfv685fj9ldfe0ugte4.PNG" alt="alternate positioning" width="880" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#scroll-interaction"&gt;
  &lt;/a&gt;
  Scroll Interaction
&lt;/h1&gt;

&lt;p&gt;The use of &lt;strong&gt;Scroll Interactions&lt;/strong&gt; such as &lt;strong&gt;Scroll Storytelling&lt;/strong&gt;, &lt;strong&gt;Parallax&lt;/strong&gt;, and more are on a &lt;em&gt;constant rise&lt;/em&gt; and can lead to truly &lt;em&gt;immersive websites&lt;/em&gt;. Even the &lt;a href="https://www.apple.com/in/mac-pro/"&gt;Mac Pro&lt;/a&gt; uses &lt;strong&gt;Scroll Interaction&lt;/strong&gt; on the &lt;em&gt;product page&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;These &lt;strong&gt;immersive scrolling experiences&lt;/strong&gt; are generally implemented using a technique known as &lt;strong&gt;Scroll Hijacking&lt;/strong&gt;, where &lt;em&gt;the scroll behavior is altered as per the requirement of the developer&lt;/em&gt;. Even though it has &lt;em&gt;enormous upsides&lt;/em&gt;, it comes with a &lt;em&gt;major catch&lt;/em&gt;: if not implemented properly, it can lead to &lt;strong&gt;severe accessibility issues&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0kjoHHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9qv6qyzna5leufzap6k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0kjoHHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9qv6qyzna5leufzap6k.gif" alt="scroll storytelling" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#masonry-grid"&gt;
  &lt;/a&gt;
  Masonry Grid
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gXinIIUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52r7hiuehkku0xn9rdu0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gXinIIUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52r7hiuehkku0xn9rdu0.jpg" alt="masonry grid" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Masonry Grid&lt;/strong&gt; had been around for a long time but saw a &lt;em&gt;rapid increase in popularity&lt;/em&gt; after the introduction of &lt;strong&gt;Windows 8&lt;/strong&gt;. It involves a &lt;em&gt;grid of elements with different sizes&lt;/em&gt; and &lt;strong&gt;provides a fresh feel&lt;/strong&gt; over &lt;em&gt;traditional grid items&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Unlike &lt;em&gt;most other items in this list&lt;/em&gt;, this one is possibly the &lt;strong&gt;easiest to implement&lt;/strong&gt; as it only requires &lt;strong&gt;CSS&lt;/strong&gt; knowledge.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/andybarefoot/embed/QMeZda?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cursor-interactions"&gt;
  &lt;/a&gt;
  Cursor Interactions
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Cursor Interactions&lt;/strong&gt; is the perfect way to keep a &lt;em&gt;user engaged in your website&lt;/em&gt; in this age of &lt;em&gt;dwindling attention spans&lt;/em&gt;. You have a &lt;em&gt;buffet of options&lt;/em&gt; to choose from ranging from &lt;strong&gt;Custom Cursors&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXIOEuZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aq96zkwge7l9qczq84lq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXIOEuZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aq96zkwge7l9qczq84lq.gif" alt="cursor interactions" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to &lt;strong&gt;highly dynamic cursor interactions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/GRrbyXa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The target audience for the &lt;strong&gt;Cursor Interactions&lt;/strong&gt; are the &lt;strong&gt;desktop users&lt;/strong&gt;, so if your &lt;strong&gt;audience demographic&lt;/strong&gt; is mainly the &lt;strong&gt;phone users&lt;/strong&gt;, &lt;em&gt;you could opt out of using these interactions&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;In this article, we went through some &lt;strong&gt;cool UX tricks&lt;/strong&gt; that you can &lt;em&gt;use in your applications to give them a modern feel&lt;/em&gt;. Hope this helps you in your journey!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fun Fact&lt;/strong&gt;: This was my &lt;strong&gt;50th article&lt;/strong&gt;, I have been writing &lt;em&gt;consistently for the past 50 weeks&lt;/em&gt;! When I started I had &lt;em&gt;a lot of doubt about who will read the articles&lt;/em&gt;, now I have a &lt;em&gt;lot of people supporting me&lt;/em&gt;. &lt;strong&gt;Thanks a lot to everyone who had been on this journey with me!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Developing!&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Need a &lt;strong&gt;Top Rated Front-End Development Freelancer&lt;/strong&gt; to chop away your development woes? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Personal Website&lt;/a&gt; and &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to connect? Reach out to me on &lt;a href="https://www.linkedin.com/in/tapajyoti-bose/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a &lt;strong&gt;Digital Nomad&lt;/strong&gt; in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for &lt;strong&gt;Weekly new Tidbits&lt;/strong&gt; on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>ux</category>
      <category>ui</category>
      <category>webdesign</category>
    </item>
    <item>
      <title>Deep dive into React codebase [EP1: Prerequisites]</title>
      <author>Nikita Grechino</author>
      <pubDate>Sun, 09 Jan 2022 06:06:48 +0000</pubDate>
      <link>https://dev.to/fromaline/deep-dive-into-react-codebase-ep1-prerequisites-33ak</link>
      <guid>https://dev.to/fromaline/deep-dive-into-react-codebase-ep1-prerequisites-33ak</guid>
      <description>&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h2&gt;

&lt;p&gt;My last article about the obscured history behind Hyperscript was warmly received, so I decided to pursue the matter...&lt;/p&gt;

&lt;p&gt;Have you ever found yourself in this annoying position where you are not exactly sure how things work under the hood? If you are a tinkerer, chances are it is almost a habit for you. So let's break it together!&lt;/p&gt;

&lt;p&gt;As a frontend developer, I can't find better technology to examine rather than React. Its codebase is big enough, well-tested, and filled with great code to learn from. Also, it's simply a really big deal for a frontend developer to understand how React works behind the scene.&lt;br&gt;
You‚Äôve probably seen lots of articles and videos about React internals, so what‚Äôs the point in another one?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code-intense&lt;/strong&gt;&lt;br&gt;
We'll take a deep dive into the codebase, not into the React-related concepts. Of course, we will examine necessary concepts, but through their application in the source code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practice-based&lt;/strong&gt;&lt;br&gt;
I‚Äôll try to do my best to introduce as much practice-oriented content, as I possibly could to facilitate improvement in real-world coding skills. We will make our own versions of different parts of React, play around with its guts and hack them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live series&lt;/strong&gt;&lt;br&gt;
I‚Äôve planned to create a weekly series to divide and conquer the difficult task of investigating React internals. So we may take a thorough look and grasp the very nature of React source code.&lt;/p&gt;

&lt;p&gt;Enough promises, fasten your seat belts our journey begins now!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: This article turned out to be quite long. So if you had a hard time reading it, let me know in the comments section, and I will split up future articles into smaller chunks.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites-to-the-whole-series"&gt;
  &lt;/a&gt;
  Prerequisites to the whole series
&lt;/h2&gt;

&lt;p&gt;In this article, we'll sum up the needed fundamentals about React and its codebase to get our feet wet and lay the foundation for further investigations in future articles.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#where-did-react-come-from"&gt;
  &lt;/a&gt;
  Where did React come from?
&lt;/h3&gt;

&lt;p&gt;To understand the source code of React we need to understand why it was initially created. In other words, why source code was written in the first place?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Extra material: I got info for this paragraph from &lt;a href="https://youtu.be/KVZ-P-ZI6W4?t=89"&gt;this YouTube video&lt;/a&gt;, which was captured on the first React.js Conf in 2015. The video is filled with a ton of interesting details about the early days of React. If you are interested in extra info, check it out from 1:29 to 17:15.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The starting point&lt;/strong&gt;&lt;br&gt;
Back in 2011 developers at Facebook Ads Org wrote client-side JS applications following an MVC pattern and using two-way data binding along with templates. These apps were initially pretty simple, but they got more complicated over time because more features were added. &lt;br&gt;
So to maintain and extend these apps more developers were hired. Eventually, the growing number of app features and team members slowed down the whole development of these apps too much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The main problem&lt;/strong&gt;&lt;br&gt;
The main technical issue was so-called &lt;strong&gt;cascading updates&lt;/strong&gt;. When some new data would flow in the app, some small change somewhere deep in the tree would cause a full re-render of the whole app from scratch. These updates were really slow because not only do you have to figure out what needs to be mutated, but you need to go and get the views to update themselves. Such updates not only hurt performance, but they added up over time and developers couldn't get their heads around to figure out what would cause the cascading updates in the first place.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: If you want to code an app with cascading updates in place to trace the problem, that led to React creation, let me know in the comments. I'll attempt to figure things out even more and make another tutorial-like article, where we would create an MVC client-side app like it's 2011 and we are a group of engineers at Facebook Ads Org.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The solution&lt;/strong&gt;&lt;br&gt;
The 'aha' moment happened when the team realized, that they already had code that describes what the app should look like with a given data. So conceptually, when changes happened, they could just &lt;strong&gt;re-execute the logic once again with a new set of data.&lt;/strong&gt;&lt;br&gt;
The only major problems with this approach were performance and glitches. Performance was bad because a full re-render is a CPU-intense calculation and glitches were a thing before different states (e.g. selection state) were lost when re-render happened.&lt;br&gt;
To resolve these issues, Jordan Walke built a prototype, that made this whole process more efficient and provided a reasonable user experience. He didn't have a name for it yet, but that's actually when React was born.&lt;/p&gt;

&lt;p&gt;Well, this was a long story short of &lt;strong&gt;why&lt;/strong&gt; React was created and now we understand the idea behind React.js.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Extra material: If you are eager to develop an even deeper understanding of the story behind React creation, check out &lt;a href="https://blog.risingstack.com/the-history-of-react-js-on-a-timeline/"&gt;this history timeline article&lt;/a&gt; by RisingStack Engineering team. The article contains all needed links and explanations, that you can follow to fully understand why React was born.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-pick-the-version-to-examine"&gt;
  &lt;/a&gt;
  Let's pick the version to examine
&lt;/h3&gt;

&lt;p&gt;React source code lives in &lt;a href="https://github.com/facebook/react"&gt;the official repository&lt;/a&gt; on GitHub.&lt;br&gt;
If you want to examine code along with me and thus maximize benefits from this article series, you may clone this repo to your local machine by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/facebook/react.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We‚Äôll inspect the latest stable major release of React by the date of this article publication - &lt;a href="https://github.com/facebook/react/tree/v17.0.0"&gt;v17.0.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Extra material: If you don't fully understand what major release means or why there are three numbers in the version scheme, check out &lt;a href="https://www.gitkraken.com/gitkon/semantic-versioning-git-tags"&gt;this great article&lt;/a&gt; provided by GitKraken. It covers semantic versioning as a concept and how to handle it in the real codebase with git tags.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;React team uses git tags for versioning. So let's check out the commit, where Dan Abramov bumped packages' versions for the 17.0.0 release.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout v17.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are all on the same page, so let's guide our way to the actual code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-make-sense-of-the-repository-setup"&gt;
  &lt;/a&gt;
  Let's make sense of the repository setup
&lt;/h3&gt;

&lt;p&gt;React is a monorepo, which means multiple projects (or packages in the case of React), that related somehow live in the single repository. According to &lt;a href="https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html"&gt;the official React docs&lt;/a&gt;, the monorepo pattern is used to coordinate changes between different React packages and host issues in one place.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Extra material: If you are really interested in finding out more valuable info about monorepo and figuring out the advantages of this pattern, check out &lt;a href="https://danluu.com/monorepo/"&gt;this article&lt;/a&gt; by Dan Luu.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All React packages live in the &lt;code&gt;./packages&lt;/code&gt; directory and we‚Äôll go through the primary ones in this article to get a bird‚Äôs-eye view of React as a project is made up of.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: We‚Äôll take a thorough look at all major packages in future articles.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React Core&lt;/strong&gt;&lt;br&gt;
Located in &lt;code&gt;./packages/react&lt;/code&gt;.&lt;br&gt;
This package contains only the functionality necessary to define React components, so it doesn‚Äôt render anything on its own. This exact package is available on npm as a &lt;code&gt;react&lt;/code&gt; package. &lt;br&gt;
So when you do something like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You effectively refer to the React Core package, not to the whole React repo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Renderers&lt;/strong&gt;&lt;br&gt;
As we already know, React was originally created for the client-side JS applications, that run in the browser. But later it was tweaked to also support native platforms, like iOS and Android. This adaption introduced the concept of renderers to React codebase.&lt;/p&gt;

&lt;p&gt;Renderers are very important for React because they manage how the output from the &lt;strong&gt;React Core&lt;/strong&gt; package is rendered in different environments.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: We'll write our own renderer in one of the future articles!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So there are multiple renderers in the repo now.&lt;br&gt;
First of all, let's look at three renderers, that actually render React components to the &lt;strong&gt;user&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-dom&lt;/code&gt;&lt;br&gt;
Located in &lt;code&gt;./packages/react-dom&lt;/code&gt;&lt;br&gt;
It's a descendant of the original React, which was tightly coupled with the browser environment. It renders React components to the DOM and this exact package is available as &lt;code&gt;react-dom&lt;/code&gt; npm package.&lt;br&gt;
So you're probably familiar with its simplest usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;react-native-renderer&lt;/code&gt;&lt;br&gt;
Located in &lt;code&gt;./packages/react-native-renderer&lt;/code&gt;&lt;br&gt;
It interacts with React Native implementation, which renders React components to native views. So unlike &lt;code&gt;react-dom&lt;/code&gt;, it's less a renderer and more a layer between &lt;strong&gt;React Core&lt;/strong&gt; and &lt;a href="https://reactnative.dev/"&gt;React Native&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-art&lt;/code&gt;&lt;br&gt;
Located in &lt;code&gt;./packages/react-art&lt;/code&gt;&lt;br&gt;
It provides bindings to the &lt;a href="https://github.com/sebmarkbage/art/"&gt;ART library&lt;/a&gt;, which is used for drawing vector graphics. It's the third officially supported renderer, aside from renderer for DOM and native platforms.&lt;/p&gt;

&lt;p&gt;Then, let's quickly review renderers, that are used for purposes other than rendering React components to the user screen.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-test-renderer&lt;/code&gt;&lt;br&gt;
Located in &lt;code&gt;./packages/react-test-renderer&lt;/code&gt;&lt;br&gt;
This renderer was created together with &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; team.&lt;br&gt;
It renders React components to JSON tree and makes Snapshot Testing possible.&lt;br&gt;
If you've written tests before, you are already familiar with this application of &lt;code&gt;react-test-renderer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We define a component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Link.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we write a test for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-test-renderer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Link component renders correctly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://dev.to"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;DEV community&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run the test, Jest creates a snapshot file, that contains the output of the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`Link component renders correctly 1`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s2"&gt;`  
&amp;lt;a  
  className="link"  
  href="https://dev.to"  
  target="_blank"&amp;gt;  
  DEV community  
&amp;lt;/a&amp;gt;  
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the next test run, Jest will compare a new output with the previous one. If they match, the test will pass. If they don't match, the test will fail, indicating that a bug was introduced.&lt;br&gt;
The &lt;code&gt;react-test-renderer&lt;/code&gt; is very important to React ecosystem because it allows making sure that React components don't change unexpectedly.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-noop-renderer&lt;/code&gt;&lt;br&gt;
Located in &lt;code&gt;./packages/react-noop-renderer&lt;/code&gt;&lt;br&gt;
This renderer is used by React team for debugging, the so-called Fiber Reconciler, and is not intended to be used directly by design.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: If you don't know or are just not exactly sure what Fiber Reconciler is, keep reading, We'll take care of this in a snap.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reconcilers&lt;/strong&gt;&lt;br&gt;
Reconcilers are a major part of React library. &lt;br&gt;
They implement the reconciliation algorithm, that makes React fast enough for real-world apps.&lt;br&gt;
If the reconciliation algorithm wasn't a thing, either we, as developers, would have to manually update our components, or React would have to re-render the whole app on every minor change in any given component.&lt;/p&gt;

&lt;p&gt;React v17.0.0 uses Fiber Reconciler, which was introduced in React v16.0.0. Simply put, Fiber Reconciler is a package, that implements the reconciliation algorithm in a certain way.&lt;br&gt;
Its source code is located in &lt;code&gt;./packages/react-reconciler&lt;/code&gt;.&lt;br&gt;
We'll take a closer look at the Fiber Reconciler in one of the next episodes of the series.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: Why do I refer to reconcilers as a plural, nor singular noun, though only the Fiber Reconciler is out there? It's because the Fiber Reconciler is a replacement for the so-called Stack Reconciler, that powered React v15.0.0 and earlier.&lt;br&gt;
If you want to understand the difference between Fiber and Stack Reconcilers, let me know in the comments and I'll consider making a series of articles, where we would take a deep dive into both reconcilers and code their simpler versions ourselves.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#afterword"&gt;
  &lt;/a&gt;
  Afterword
&lt;/h2&gt;

&lt;p&gt;Oof, this was a long and intense reading and we learned a ton about React as a project and more specifically React codebase. &lt;br&gt;
In the next episode, we'll continue to explore the repository setup and have fun in the process!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sum-up"&gt;
  &lt;/a&gt;
  Sum up
&lt;/h3&gt;

&lt;p&gt;Let's sum up what we learned today.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React was created, because Facebook developers couldn't extend and maintain complex apps with dynamic data in MVC style.&lt;/li&gt;
&lt;li&gt;React came from a conceptually simple idea - if you have code, that describes UI with a given set of data, you may re-execute this exact code if data have changed.&lt;/li&gt;
&lt;li&gt;React is a monorepo, that contains React Core, a bunch of renderers, and a reconciler.&lt;/li&gt;
&lt;li&gt;React Core contains only the functionality necessary to define React components and is available through the &lt;code&gt;react&lt;/code&gt; npm package.&lt;/li&gt;
&lt;li&gt;Renderers manage how React components are rendered in different environments.&lt;/li&gt;
&lt;li&gt;Reconciler implements a reconciliation algorithm, that allows React to be declarative and fast.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#iam-looking-forward-to-the-next-episode-what-should-i-do"&gt;
  &lt;/a&gt;
  I'am looking forward to the next episode, what should I do?
&lt;/h3&gt;

&lt;p&gt;It's a weekly series and I am going to publish the next episode of the series on Sunday (January 15) at 6:00 am UTC+0.&lt;br&gt;
&lt;a href="https://dev.to/fromaline"&gt;Follow me on dev.to&lt;/a&gt;, if you don't want to miss it.&lt;/p&gt;

&lt;p&gt;If you have any ideas regarding this series or any other technology you want to make sense of, let me know in the comments! &lt;br&gt;
Any feedback on this episode, either positive or negative will be welcomed.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Some GitHub Terms You Should Know!
</title>
      <author>Ansub Khan</author>
      <pubDate>Sun, 09 Jan 2022 06:06:38 +0000</pubDate>
      <link>https://dev.to/ansub/some-github-terms-you-should-know-1e6k</link>
      <guid>https://dev.to/ansub/some-github-terms-you-should-know-1e6k</guid>
      <description>&lt;p&gt;GitHub is one of the most used hosting platform for version control and collaboration, we must have heard about the terms like repo and PR in your coding career what do they mean, or simply put what do they even mean to us? here are a few Github terms you must know!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#repository-repo"&gt;
  &lt;/a&gt;
  Repository (Repo)
&lt;/h3&gt;

&lt;p&gt;it is a directory that stores all of the files and folders you used to build the project and it also stores the changes made to the project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commit"&gt;
  &lt;/a&gt;
  Commit
&lt;/h3&gt;

&lt;p&gt;commit is a change that you bring to your program, it can be adding, removing, modifying code or files from your project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#local-and-remote"&gt;
  &lt;/a&gt;
  Local and Remote
&lt;/h3&gt;

&lt;p&gt;your project will have two independent repos one which is offline is called Local and one which is hosted online on platforms like GitHub or GitLab is Remote&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pull-push-or-fetch"&gt;
  &lt;/a&gt;
  Pull, Push or Fetch
&lt;/h3&gt;

&lt;p&gt;to synchronize your project between local and remote we use these three operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pull&lt;/strong&gt; - pull changes from remote to local&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Push&lt;/strong&gt; - push changes from local to remote&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fetch&lt;/strong&gt; - only downloads new data but doesn't integrate it to your working project in local&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#branch"&gt;
  &lt;/a&gt;
  Branch
&lt;/h3&gt;

&lt;p&gt;they basically divert you from the mainline of development, so that you can fix the bug or build a new feature and then merge it back without messing up the main code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pull-request"&gt;
  &lt;/a&gt;
  Pull Request
&lt;/h3&gt;

&lt;p&gt;it is simply a way of telling people that you want the changes you made in the branch to get included in Main Code.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
