<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Simple Static site/blog search in 14 Lines of JavaScript</title>
      <author>Christian</author>
      <pubDate>Sun, 11 Apr 2021 10:11:08 +0000</pubDate>
      <link>https://dev.to/christianfei/simple-static-site-blog-search-in-14-lines-of-javascript-1nhl</link>
      <guid>https://dev.to/christianfei/simple-static-site-blog-search-in-14-lines-of-javascript-1nhl</guid>
      <description>&lt;p&gt;&lt;strong&gt;Originally posted on &lt;a href="https://cri.dev/posts/2021-04-06-simple-static-site-blog-search-javascript-client/"&gt;cri.dev&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is my approach to a purely client side search feature for static blogs and sites.&lt;/p&gt;

&lt;p&gt;I am currently using this under &lt;a href="https://cri.dev/posts"&gt;/posts&lt;/a&gt; to let readers search through my blog posts.&lt;/p&gt;

&lt;p&gt;Read more below about how to integrate it in your site.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#backstory"&gt;
  &lt;/a&gt;
  Backstory
&lt;/h2&gt;

&lt;p&gt;In 2015 I did a similar thing for Jekyll sites, namely &lt;a href="https://github.com/christian-fei/Simple-Jekyll-Search"&gt;Simple-Jekyll-Search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's gotten quite a bit of attention and merged various Pull-Requests (64!) from others.&lt;/p&gt;

&lt;p&gt;I ditched Jekyll a few years ago, to use a JavaScript based static site generator:&lt;/p&gt;

&lt;p&gt;My home-made static site generator &lt;a href="https://github.com/christian-fei/devblog"&gt;devblog&lt;/a&gt;, and settled with &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;Under &lt;a href="https://cri.dev/posts"&gt;/posts&lt;/a&gt; I render the full list of blog posts.&lt;/p&gt;

&lt;p&gt;(Not with the full content but with an &lt;em&gt;excerpt/description&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;In my Nunjucks template I render the posts like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"searchable"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;autofocus&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"🔍 Search posts"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {% set postslist = collections.post | reverse %}
  {% for post in postslist %}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"searchable-item"&lt;/span&gt; &lt;span class="na"&gt;data-search=&lt;/span&gt;&lt;span class="s"&gt;"{{ post.data.title | escape }} {{ post.data.tags | json | escape }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  {% endfor %}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea is the following:&lt;/p&gt;

&lt;p&gt;Within a &lt;code&gt;.searchable&lt;/code&gt; element&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;look for a &lt;code&gt;input&lt;/code&gt; element and attach an event listener to it (&lt;code&gt;keyup&lt;/code&gt; event)&lt;/li&gt;
&lt;li&gt;when searching, parse all &lt;code&gt;.searchable-item&lt;/code&gt;s &lt;code&gt;data-search&lt;/code&gt; attribute and test a RegExp on it&lt;/li&gt;
&lt;li&gt;make items that match visible, and make others disappear&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;This is the full code for the search functionality on this blog:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;;[...&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.searchable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;makeSearchable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeSearchable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$searchable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$searchableItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;$searchable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.searchable-item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$searchable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keyup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;$searchableItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-search&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-integrate-it-on-your-site"&gt;
  &lt;/a&gt;
  How to integrate it on your site
&lt;/h2&gt;

&lt;p&gt;Grabbed the JavaScript above and put it in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Define a minimal markup to enable the search functionality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"searchable"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;autofocus&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"🔍 Search posts"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Loop through your blog posts --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"searchable-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you have the wrapper element &lt;code&gt;.searchable&lt;/code&gt;, containing an input field and your post items with the &lt;code&gt;.searchable-item&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;By default the search function will match the blog posts to filter with the element's &lt;code&gt;innerText&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Optionally, apply a &lt;code&gt;data-search&lt;/code&gt; attribute to each &lt;code&gt;.searchable-item&lt;/code&gt; and set the value of your blog post title, tags, short description etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-example"&gt;
  &lt;/a&gt;
  Full example
&lt;/h2&gt;

&lt;p&gt;Check out a &lt;a href="https://codepen.io/christian-fei/pen/abpyERy"&gt;full example on CodePen&lt;/a&gt; if you need to better understand how to structure your markup.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Originally posted on &lt;a href="https://cri.dev/posts/2021-04-06-simple-static-site-blog-search-javascript-client/"&gt;cri.dev&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>blogging</category>
      <category>search</category>
    </item>
    <item>
      <title>Steps 🏃‍♀️ To Km + Calories burned CONVERTER APP</title>
      <author>Bek Brace</author>
      <pubDate>Sun, 11 Apr 2021 09:41:54 +0000</pubDate>
      <link>https://dev.to/bekbrace/steps-to-km-calories-burned-converter-app-4lk</link>
      <guid>https://dev.to/bekbrace/steps-to-km-calories-burned-converter-app-4lk</guid>
      <description>&lt;p&gt;My girlfriend and I walk each Saturday from 11 AM till 7 PM and sometimes 8 PM; this also includes shopping and going back home arranging products then getting out again to continue our walk.&lt;/p&gt;

&lt;p&gt;By the end of the day, I ask her "How many KM have we walked, today?", so she looks to her iPhone app and answers me by stating a figure in "Steps" (22,234 steps), a measurement which I have never understood, and this was so frustrating because I wanted to know the actual number of Kilometers I have walked during the day, a proper metric measurement.&lt;/p&gt;

&lt;p&gt;So I decided to solve this problem, the first thing I did is that I  looked up the average rate of conversion between steps/KM and even calories burned per KM and decided to design a simple application with just HTML, CSS and JavaScript : &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zhfjbJv42xA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;With this simple app, I can get the proper number of KM we have walked and how much calories we've burned in that day 🙂&lt;/p&gt;

&lt;p&gt;If you would like to use the application, I've deployed it and here's the link: &lt;br&gt;
&lt;a href="https://svetka.netlify.app"&gt;https://svetka.netlify.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the source code:&lt;br&gt;
&lt;a href="https://github.com/BekBrace/steps_km_calorie_Converter"&gt;https://github.com/BekBrace/steps_km_calorie_Converter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Stay safe everyone.&lt;br&gt;
Cheers,&lt;br&gt;
Bek&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Awesome 404 Page Templates for your Websites </title>
      <author>Rithik Samanthula</author>
      <pubDate>Sun, 11 Apr 2021 08:48:42 +0000</pubDate>
      <link>https://dev.to/code2rithik/awesome-404-page-templates-for-your-websites-33jc</link>
      <guid>https://dev.to/code2rithik/awesome-404-page-templates-for-your-websites-33jc</guid>
      <description>&lt;p&gt;There are different HTTP response status codes.&lt;/p&gt;

&lt;p&gt;Especially, the 404 one.&lt;/p&gt;

&lt;p&gt;Now, we wouldn't want our 404 pages to look dull right?&lt;/p&gt;

&lt;p&gt;So, here are some cool 404-page templates for your website:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-neon-404-page"&gt;
  &lt;/a&gt;
  1. Neon 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/XWpVvYL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: None&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-flashlight-404-page"&gt;
  &lt;/a&gt;
  2. Flashlight 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/wvgpVQm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: jQuery.js&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-space-404-page"&gt;
  &lt;/a&gt;
  3. Space 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/LYxewMN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: jQuery.js&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-console-style-404-page"&gt;
  &lt;/a&gt;
  4. Console Style 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/PoWQYGa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Dependencies: None&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-sassy-404-ui-study"&gt;
  &lt;/a&gt;
  5. Sassy 404 UI Study
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/MWJQgwN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: None&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-404-makes-bear-sad"&gt;
  &lt;/a&gt;
  6. 404 Makes Bear Sad
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/BapYBoP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: React.JS, React-dom.JS&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-space-404-page-2"&gt;
  &lt;/a&gt;
  7. Space 404 Page 2
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/vYgdBLe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: bootstrap.css, gsap.js&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-404-scary-investigation"&gt;
  &lt;/a&gt;
  8. 404 Scary Investigation
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/NWdyKNE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: anime.js&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-monument-valley-inspiration-404-page"&gt;
  &lt;/a&gt;
  9. Monument Valley Inspiration 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/YzNeKWr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Dependencies: None&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-maze-404-page"&gt;
  &lt;/a&gt;
  10. Maze 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/PoWQYoR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Dependencies: jQuery.js&lt;/p&gt;

&lt;p&gt;------------------------------x----------------------------&lt;/p&gt;

&lt;p&gt;Thank You for Reading this Blog,&lt;/p&gt;

&lt;p&gt;If you liked it, do share it with your friends and remember...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall"&gt;
  &lt;/a&gt;
  Keep Coding Y'All 👨🏻‍💻
&lt;/h1&gt;

</description>
      <category>404</category>
      <category>html</category>
      <category>scss</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Recently I decided to become a freelancer</title>
      <author>Stefan Ionel</author>
      <pubDate>Sun, 11 Apr 2021 08:37:52 +0000</pubDate>
      <link>https://dev.to/istef94/recently-i-decided-to-become-a-freelancer-2bhi</link>
      <guid>https://dev.to/istef94/recently-i-decided-to-become-a-freelancer-2bhi</guid>
      <description>&lt;p&gt;I started my software developer career in 2016 as an employee in corporations. I learned a lot and I had very cool colleagues. I started working as a game developer in Unity3D.&lt;/p&gt;

&lt;p&gt;After a year and 3 months I decided to change the corporation and started working for a bank in Italy, Milan. I worked in this bank for almost 1 year and a few months. The experience was very beautiful because I was working in a foreign country and I was starting to travel.&lt;/p&gt;

&lt;p&gt;After this experience I changed the corporation again and started working in the financial field. I work with Microsoft .net technologies on the backend and API integration side. &lt;/p&gt;

&lt;p&gt;The financial project was very complex. It was a web application from which I learned a lot. I had almost 5 years of experience in the field, but I didn't seem to be fully satisfied.&lt;/p&gt;

&lt;p&gt;Something was missing, but I didn't know what. I lacked freedom and independence.&lt;/p&gt;

&lt;p&gt;In 2021 I decided to try to find clients and become a freelancer.&lt;br&gt;
I started looking for projects on linkedin, upwork, everywhere. Finding clients becomes a real challenge for me.&lt;/p&gt;

&lt;p&gt;In the end, I found my first clients with the help of closed freelancing platforms like: &lt;a href="https://www.wearehiring.top/"&gt;We are hiring&lt;/a&gt; and &lt;a href="https://www.toptal.com/"&gt;TopTal&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;At this moment I benefit from all the advantages of this lifestyle and my income has tripled.&lt;/p&gt;

&lt;p&gt;How did you manage to find your first clients as a freelancer?&lt;/p&gt;

</description>
      <category>career</category>
      <category>csharp</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to setup Vim for Go Development</title>
      <author>Preslav Mihaylov</author>
      <pubDate>Sun, 11 Apr 2021 08:35:41 +0000</pubDate>
      <link>https://dev.to/pmihaylov/how-to-setup-vim-for-go-development-14e7</link>
      <guid>https://dev.to/pmihaylov/how-to-setup-vim-for-go-development-14e7</guid>
      <description>&lt;p&gt;One of the major reasons I love programming in Go is that I can do it in any IDE or editor I want, including my favourite &lt;a href="https://pmihaylov.com/category/boost-your-vim/" rel="noreferrer noopener"&gt;Vim editor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unlike Java, for example, which is highly coupled to IntelliJ or Eclipse, Go is much more lightweight and the tools you use with it can be integrated with any editor.&lt;/p&gt;

&lt;p&gt;In this guide, I will help you setup your Vim as a fully-fledged Go IDE, including the plugins you need to install but also setting up the important options &amp;amp; mappings which you'll use daily.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;You'll need to have &lt;a href="https://golang.org/doc/install"&gt;Go installed&lt;/a&gt; &amp;amp; your Go environment setup, namely your &lt;strong&gt;$GOPATH&lt;/strong&gt; and related subdirectories - &lt;strong&gt;/bin /pkg /src&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You'll also need to use &lt;a href="https://github.com/neovim/neovim"&gt;nvim&lt;/a&gt; instead of vim or have your vim updated to version 8+.&lt;/p&gt;

&lt;h2&gt;The Main Vim plugin for Go&lt;/h2&gt;

&lt;p&gt;One of the only plugins you need for Go is called &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt;. It aggregates all the tools you need to get started with Go development.&lt;/p&gt;

&lt;p&gt;To install it via &lt;a href="https://github.com/tpope/vim-pathogen"&gt;pathogen&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/tpope/vim-pathogen ~/.vim/bundle&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://github.com/fatih/vim-go#install"&gt;Other installation options&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After you've installed it, you can customise it using these options which are highly opinionated, but work best for me:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;" disable all linters as that is taken care of by coc.nvim
let g:go_diagnostics_enabled = 0
let g:go_metalinter_enabled = []

" don't jump to errors after metalinter is invoked
let g:go_jump_to_error = 0

" run go imports on file save
let g:go_fmt_command = "goimports"

" automatically highlight variable your cursor is on
let g:go_auto_sameids = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For syntax highlighting, use these options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, install all the required go tools by opening vim and running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:GoInstallBinaries&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;coc.nvim - Autocompletion &amp;amp; linting&lt;/h2&gt;

&lt;p&gt;In the past, I've relied on &lt;a href="https://github.com/ycm-core/YouCompleteMe" rel="noreferrer noopener"&gt;YouCompleteMe&lt;/a&gt; for auto-completion or &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt;'s native integration with vim for auto-completion &amp;amp; &lt;a href="https://github.com/dense-analysis/ale" rel="noreferrer noopener"&gt;ALE&lt;/a&gt; for linting/static code analysis.&lt;/p&gt;

&lt;p&gt;Nowadays, I prefer using &lt;a href="https://github.com/neoclide/coc.nvim" rel="noreferrer noopener"&gt;coc.nvim&lt;/a&gt; and its plugins to do all that as I've found it to be more reliable than all of those tools.&lt;/p&gt;

&lt;p&gt;For installation instructions, follow the &lt;a href="https://github.com/neoclide/coc.nvim#quick-start" rel="noreferrer noopener"&gt;Quick Start&lt;/a&gt; guide.&lt;/p&gt;

&lt;p&gt;After you've installed it, run this command to install the necessary coc extension for Go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim -c 'CocInstall -sync coc-go coc-html coc-css coc-json|q'&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The html/css/json extensions are optional but who doesn't deal with those nowadays. You'd probably need them at some point.&lt;/p&gt;

&lt;p&gt;Afterwards, open vim &amp;amp; type &lt;strong&gt;:CocConfig&lt;/strong&gt; to open coc's configuration file. These are my opinionated settings, stripped from the non-go related settings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "suggest.noselect": false,
  "diagnostic.errorSign": "✘",
  "diagnostic.warningSign": "!",
  "diagnostic.infoSign": "?",
  "diagnostic.checkCurrentLine": true,
  "coc.preferences.formatOnSaveFiletypes": [
    "javascript",
    "html",
    "json",
    "css",
    "scss",
    "go"
  ],
  "coc.preferences.hoverTarget": "float",
  "languageserver": {
    "golang": {
      "command": "gopls",
      "rootPatterns": ["go.mod"],
      "filetypes": ["go"]
    }
  },
  "go.goplsOptions": {
    "staticcheck": true
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For all auxiliary coc settings, add &lt;a href="https://github.com/preslavmihaylov/dotfiles/blob/master/vim/coc.vim"&gt;these settings&lt;/a&gt; to your .vimrc.&lt;/p&gt;

&lt;h2&gt;Mappings For The Most Useful Commands&lt;/h2&gt;

&lt;p&gt;Having great tools is not enough. You need to know how to use them. Hence, it is best to customize some of the mappings which vim-go and coc provide you so that you're more effective when dealing with Go code.&lt;/p&gt;

&lt;p&gt;Here are the mappings I use most often and the way I've configured them:&lt;/p&gt;

&lt;h3&gt;Manage unit tests in the current file&lt;/h3&gt;

&lt;p&gt;I've mapped running all the tests in the current file to &amp;lt;leader&amp;gt;-t which translates to \ + t on my Mac &amp;amp; Linux.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;t  &amp;lt;Plug&amp;gt;(go-test)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've also mapped \ + tt to run the current test function only, instead of running all of them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;tt &amp;lt;Plug&amp;gt;(go-test-func)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I use \ + c to toggle the coverage profile for the current file I'm in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;c  &amp;lt;Plug&amp;gt;(go-coverage-toggle)&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Inspect a Go Codebase&lt;/h3&gt;

&lt;p&gt;Show the function signature for a given routine with \ + i:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;i  &amp;lt;Plug&amp;gt;(go-info)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show the interfaces a type implements with \ + ii:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;ii  &amp;lt;Plug&amp;gt;(go-implements)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Describe the definition of a given type with \ + ci:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;ci  &amp;lt;Plug&amp;gt;(go-describe)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the callers of a given function with \ + cc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;cc  &amp;lt;Plug&amp;gt;(go-callers)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find all references of a given type/function in the codebase with \ + cr:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap &amp;lt;leader&amp;gt;cr &amp;lt;Plug&amp;gt;(coc-references)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to definition/Go back with Ctrl+d and Ctrl+a:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap &amp;lt;C-a&amp;gt; &amp;lt;C-o&amp;gt;
nmap &amp;lt;C-d&amp;gt; &amp;lt;Plug&amp;gt;(coc-definition)&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Refactor Go Code&lt;/h3&gt;

&lt;p&gt;Not many options here, but there's renaming the symbol your cursor is on with \ + r:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap &amp;lt;leader&amp;gt;r &amp;lt;Plug&amp;gt;(coc-rename)&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Occasional Maintenance of Tooling&lt;/h2&gt;

&lt;p&gt;To update all Go tools, run this from vim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:GoUpdateBinaries&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And updating all coc plugins:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:CocUpdate&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To upgrade vim-go or coc.nvim, delete the folders from &lt;strong&gt;~/.vim/bundle&lt;/strong&gt; and git clone the repos again.&lt;/p&gt;

&lt;h2&gt;Setup The Cool gruvbox Theme (Optional)&lt;/h2&gt;

&lt;p&gt;Install &lt;a href="https://github.com/morhetz/gruvbox" rel="noreferrer noopener"&gt;gruvbox&lt;/a&gt; using pathogen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/morhetz/gruvbox ~/.vim/bundle&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable it in your &lt;strong&gt;.vimrc&lt;/strong&gt; with some opinionated extra options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;colorscheme gruvbox
autocmd ColorScheme * highlight CocErrorFloat guifg=#ffffff
autocmd ColorScheme * highlight CocInfoFloat guifg=#ffffff
autocmd ColorScheme * highlight CocWarningFloat guifg=#ffffff
autocmd ColorScheme * highlight SignColumn guibg=#adadad&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Want to see how it looks?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ifVWyHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pmihaylov.com/wp-content/uploads/2021/03/gruvbox-1024x492.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ifVWyHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pmihaylov.com/wp-content/uploads/2021/03/gruvbox-1024x492.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Setup tmux For Terminal Multiplexing (Optional)&lt;/h2&gt;

&lt;p&gt;If you want to manage multiple terminal tabs in the same window, use &lt;a href="https://github.com/tmux/tmux/wiki"&gt;tmux&lt;/a&gt; (See my &lt;a href="https://pmihaylov.com/tmux-terminal-multiplexer/"&gt;how to guide&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VDoRrGkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://pmihaylov.com/wp-content/uploads/2018/05/Selection_018-1024x576.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDoRrGkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://pmihaylov.com/wp-content/uploads/2018/05/Selection_018-1024x576.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the most useful tools I have setup because it allows me to do my code editing in vim and manage all sorts of other terminal-related tasks in separate tabs all inside the same window.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;And that's everything I use for my daily Go programming. &lt;/p&gt;

&lt;p&gt;This setup has worked extremely well for me and have in mind that I'm also dealing with &lt;a href="https://eng.uber.com/go-monorepo-bazel/"&gt;Uber's huge Go Monorepo&lt;/a&gt;, where I've been able to integrate my vim environment seamlessly (with some extra settings which you probably won't need.&lt;/p&gt;

&lt;p&gt;If you want to see my entire vim development environment, check out all my &lt;a href="https://github.com/preslavmihaylov/dotfiles" rel="noreferrer noopener"&gt;dotfiles&lt;/a&gt; and &lt;a href="https://github.com/preslavmihaylov/default-setups" rel="noreferrer noopener"&gt;default-setups&lt;/a&gt; repos, which include my full setup, including external programs, the terminal, vim, tmux, colorschemes, etc.&lt;/p&gt;

&lt;p&gt;Happy Gophing!&lt;/p&gt;

&lt;p&gt;Check out some of my other Go series:&lt;br&gt;&lt;a href="https://pmihaylov.com/series-integrating-go-with-elk/" rel="noreferrer noopener"&gt;Integrating your Go Service with ELK&lt;/a&gt;&lt;br&gt;&lt;a href="https://pmihaylov.com/grpc-with-go-crash-course/" rel="noreferrer noopener"&gt;gRPC With Go Crash Course&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>vim</category>
      <category>ide</category>
    </item>
    <item>
      <title>Conditional logic with CSS – The CSS custom property trick.</title>
      <author>Siddharth</author>
      <pubDate>Sun, 11 Apr 2021 08:31:25 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/conditional-logic-with-css-the-css-custom-property-trick-44hb</link>
      <guid>https://dev.to/siddharthshyniben/conditional-logic-with-css-the-css-custom-property-trick-44hb</guid>
      <description>&lt;p&gt;The whole world of conditional logic and bulk toggling in CSS only exists because of one tiny footnote in the CSS spec. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3.org/TR/css-variables-1/#syntax:~:text=Note%3A%20While%20%3Cdeclaration%2Dvalue%3E%20must%20represent%20at,one%20token%20may%20be%20whitespace."&gt;That line&lt;/a&gt; is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: While  must represent at least one token, that one token may be whitespace.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That means &lt;code&gt;--foo: ;&lt;/code&gt; is valid.&lt;/p&gt;

&lt;p&gt;Now, this doesn’t read as some massive revelation that unlocks huge doors, but it is! Now we have the capability to make conditional statements all in CSS!&lt;/p&gt;

&lt;p&gt;Here's a demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/QWdaevQ?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;small&gt;&lt;em&gt;(Open the pen in a new tab and resize to see the full effect)&lt;/em&gt;&lt;/small&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Let me explain: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is a breakpoint setup here at 350px. This is where the variable &lt;code&gt;--color&lt;/code&gt; changes from &lt;code&gt;initial&lt;/code&gt; to an empty space&lt;/li&gt;
&lt;li&gt;When the browser window is wider than 350px, the value of &lt;code&gt;--color&lt;/code&gt; is &lt;code&gt;initial&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;That makes the variable &lt;code&gt;--color-when-small&lt;/code&gt; contain two values: &lt;code&gt;initial&lt;/code&gt; and &lt;code&gt;red&lt;/code&gt; which is &lt;strong&gt;invalid&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;So when we actually set the color and call that variable like &lt;code&gt;background-color: var(--color-when-small, var(--color-when-big));&lt;/code&gt;, the &lt;strong&gt;second&lt;/strong&gt; value (the fallback) is used because the first is invalid.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;When the browser window is narrower than 350px, the value of &lt;code&gt;--color&lt;/code&gt; is a space.

&lt;ul&gt;
&lt;li&gt;That makes the variable &lt;code&gt;--color-when-small&lt;/code&gt; contain the value &lt;code&gt;"(space)red"&lt;/code&gt;, which is &lt;strong&gt;valid&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;So when we actually set the color and call that variable like &lt;code&gt;background-color: var(--color-when-small, var(--color-when-big));&lt;/code&gt;, the &lt;strong&gt;first&lt;/strong&gt; value is used&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, now we can flip the color between two values by changing a placeholder variable. I hope that clicks for you.&lt;/p&gt;

&lt;p&gt;When we see this as simply changing a single value, it’s almost like &lt;em&gt;ok, you’ve found a really complex way to change some padding, but you could have just changed the padding in the media query.&lt;/em&gt; But the trick is that now we have this placeholder variable that has changed and we can key into that to change unlimited other values.&lt;/p&gt;

&lt;p&gt;We could have a single media query (or set of media queries) in our CSS that only toggles these placeholder variables and we use elsewhere to toggle values. That could be nice and clean compared to sprinkling media queries all over the CSS. It’s a proper toggle in CSS, like a form of IF/THEN logic that we haven’t quite had before.&lt;/p&gt;

&lt;p&gt;For example, imagine we had a border for our earlier coloured div. Instead of changing the border directly in the media query, we can use the custom property again to change the border. &lt;/p&gt;

&lt;p&gt;Here is an example: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/yLgvBOd?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;small&gt;&lt;em&gt;(Open the pen in a new tab and resize to see the full effect)&lt;/em&gt;&lt;/small&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;If we were creating a complex card, this could come in handy.&lt;/p&gt;

&lt;p&gt;This is not just for media queries. CSS trickery master Lea Verou has &lt;a href="https://lea.verou.me/2020/10/the-var-space-hack-to-toggle-multiple-values-with-one-custom-property/?"&gt;set her sights&lt;/a&gt; on this too:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What if I told you you could use a single property value to turn multiple different values on and off across multiple different properties and even across multiple CSS rules?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s the same trick!&lt;/p&gt;

&lt;p&gt;This opens up a lot of possibilities in CSS. We could do AND, OR, XOR, NOR etc. with this trick. But I'm leaving that for you to find. &lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>css</category>
      <category>logic</category>
    </item>
    <item>
      <title>Are you procrastinating?</title>
      <author>Aahnik Daw</author>
      <pubDate>Sun, 11 Apr 2021 08:31:17 +0000</pubDate>
      <link>https://dev.to/aahnik/are-you-procrastinating-236e</link>
      <guid>https://dev.to/aahnik/are-you-procrastinating-236e</guid>
      <description>&lt;p&gt;Are you procrastinating? This playlist gives you the ultimate tools to take control of your life.&lt;/p&gt;

&lt;p&gt;Watch the videos. Rewatch. Implement. Think. Reflect. Watch again. Iterate.&lt;/p&gt;

&lt;p&gt;Be patient, and you will be able to kill the monster.&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/arj7oStGLkU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GTQ2xDNlLf8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/km4pOGd_lHw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1-VAGGCkoAM"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/irp5ghCVNAM"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yBP1VjO9RSE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cRpQOXV2cFg"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WAe-giSW3Zw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bLp9EimaEQI"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4x7MkLDGnu8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pKyHX0zqynk"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Y82KNevhkkg"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ilwork_mktE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jAS5zsi7zck"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sBfng6Jd4Cc"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/o7w5r5PfBKo"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1KDB42qGT-8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ii86yxzeDyk"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iDbdXTMnOmE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T79nFQlDXXk"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tReHWgBup40"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1xoCARmG7AM"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RLylcMjvmpE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Hu4Yvq-g7_Y"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/52lZmIafep4"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PFo9-7VX2K8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Lp7E973zozc"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pXEl0R1BX-g"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pWlOyuPPGiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jW0JtF7ZcMw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Y-iUOgQdA3Y"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ireD2dDk7_c"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ireD2dDk7_c"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uRKeeelqWxw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xguo_tvEoJs"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5J6jAC6XxAI"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HbxTkvfIOIg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLSTrsq_DvEghR5B_JwY3rUyEX1FhKXT2A"&gt;Link to the playlist&lt;/a&gt; on YouTube.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Solution: Deepest Leaves Sum</title>
      <author>seanpgallivan</author>
      <pubDate>Sun, 11 Apr 2021 08:28:44 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-deepest-leaves-sum-1936</link>
      <guid>https://dev.to/seanpgallivan/solution-deepest-leaves-sum-1936</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/deepest-leaves-sum/discuss/1152922"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1302-medium-deepest-leaves-sum"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/deepest-leaves-sum/"&gt;Leetcode Problem #1302 (&lt;em&gt;Medium&lt;/em&gt;): Deepest Leaves Sum&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; of a binary tree, &lt;em&gt;return the sum of values of its deepest leaves&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;root = [1,2,3,4,5,null,6,7,null,null,null,null,8]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxPnE6jn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.leetcode.com/uploads/2019/07/31/1483_ex1.png" alt="Example 1 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The number of nodes in the tree is in the range &lt;code&gt;[1, 104]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;When asked to find information about a particular row of a &lt;strong&gt;binary tree&lt;/strong&gt;, the normal thought is to use a &lt;strong&gt;breadth-first search&lt;/strong&gt; (&lt;strong&gt;BFS&lt;/strong&gt;) approach. A BFS approach usually involves the use of a &lt;strong&gt;queue&lt;/strong&gt; data structure (&lt;strong&gt;q&lt;/strong&gt;) so that we deal with the nodes of the tree in the proper order.&lt;/p&gt;

&lt;p&gt;The trick is to deal with a single row at a time by making note of the length of the queue (&lt;strong&gt;qlen&lt;/strong&gt;) when we start the row. Once we've processed that many nodes, we know we've just finished the current row and any remaining entries in &lt;strong&gt;q&lt;/strong&gt; are from the next row. This can be accomplished easily with a nested loop. &lt;/p&gt;

&lt;p&gt;In this case, processing a node simply means accumulating the running total (&lt;strong&gt;ans&lt;/strong&gt;) for the row and then moving any children of the node onto the end of the queue.&lt;/p&gt;

&lt;p&gt;When we start a new row, we can reset &lt;strong&gt;ans&lt;/strong&gt; back to &lt;strong&gt;0&lt;/strong&gt;, and then just keep processing rows until &lt;strong&gt;q&lt;/strong&gt; is empty. The last value of &lt;strong&gt;ans&lt;/strong&gt; should be our final answer, so we should &lt;strong&gt;return ans&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Alternately&lt;/em&gt;&lt;/strong&gt;, we can use a &lt;strong&gt;depth-first search&lt;/strong&gt; (&lt;strong&gt;DFS&lt;/strong&gt;) approach with &lt;strong&gt;recursion&lt;/strong&gt; to traverse the binary tree. If we pass the row depth (&lt;strong&gt;lvl&lt;/strong&gt;) as an argument to our recursive function (&lt;strong&gt;dfs&lt;/strong&gt;), we can use it to update the values in an array of row sums (&lt;strong&gt;sums&lt;/strong&gt;) by using &lt;strong&gt;lvl&lt;/strong&gt; as an index (&lt;strong&gt;sums[lvl]&lt;/strong&gt;). Then we can simply &lt;strong&gt;return&lt;/strong&gt; the last value of &lt;strong&gt;sums&lt;/strong&gt; as our answer.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;There are only minor differences between the four languages.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-bfs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ BFS:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;deepestLeavesSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-recursive-dfs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Recursive DFS:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;deepestLeavesSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dfs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lvl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lvl&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lvl&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lvl&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lvl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lvl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-bfs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ BFS:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deepestLeavesSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-recursive-dfs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Recursive DFS:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deepestLeavesSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lvl&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-bfs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ BFS:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;deepestLeavesSum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;LinkedList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;val&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-recursive-dfs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Recursive DFS:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;deepestLeavesSum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;dfs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lvl&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;val&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;val&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-bfs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ BFS:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;deepestLeavesSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-recursive-dfs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Recursive DFS:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;deepestLeavesSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lvl&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;sums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lvl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Web Application Penetration Test Checklist | Part - 02</title>
      <author>Rahul Mishra</author>
      <pubDate>Sun, 11 Apr 2021 08:09:09 +0000</pubDate>
      <link>https://dev.to/rahulmishra05/web-application-penetration-test-checklist-part-02-1igc</link>
      <guid>https://dev.to/rahulmishra05/web-application-penetration-test-checklist-part-02-1igc</guid>
      <description>&lt;p&gt;&lt;strong&gt;In this article I am going to share a checklist which you can use when you are doing a penetration test on a website, you can also use this list as a reference in bug bounties. This list is made for intermediates, so they can look it for reference.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before starting this list I want to make a request that this is my advice that you should complete the previous &lt;a href="https://dev.to/rahulmishra05/web-application-penetration-test-checklist-part-01-4bf"&gt;checklist&lt;/a&gt;, so in this process you will not get confused.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;You are not genius!!&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;Remember this thing, so if you don’t understand something just Google about it and so some research, I also don’t know everything and there could be things that I have missed, so don’t worry and keep learning.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-list"&gt;
  &lt;/a&gt;
  📋 The list
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Test for credentials transported over encryption.

&lt;ul&gt;
&lt;li&gt;When you submit your login/registration data try intercepting the request and changing the requests method. &lt;code&gt;POST&lt;/code&gt; to &lt;code&gt;GET&lt;/code&gt;, and &lt;code&gt;GET&lt;/code&gt; to &lt;code&gt;POST&lt;/code&gt;. If any points of time you find the data submitted by user are transported without encryption you can make this as low-level bug.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Test for default credentials on admin page/console or any sign in panel.

&lt;ul&gt;
&lt;li&gt;Try submitting default username passwords like &lt;code&gt;admin&lt;/code&gt;:&lt;code&gt;admin&lt;/code&gt;, &lt;code&gt;admin&lt;/code&gt;:&lt;code&gt;password&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bypassing the authentication. 

&lt;ul&gt;
&lt;li&gt;Forced browsing: Directly visiting the section of the website which requires authentication. For example, if you have to login at &lt;a href="https://testwebsite.com/login"&gt;https://testwebsite.com/login&lt;/a&gt; to visit &lt;a href="https://testwebsite.com/information"&gt;https://testwebsite.com/information&lt;/a&gt;, but if you can visit &lt;a href="https://testwebiste.com/information"&gt;https://testwebiste.com/information&lt;/a&gt; directly just by typing this URL in the browser without authenticating then this will be known as forced browsing.&lt;/li&gt;
&lt;li&gt;Parameter modification: Try changing response which comes from the server for example, if your server response &lt;a href="https://testwebsite.com/auth=false"&gt;https://testwebsite.com/auth=false&lt;/a&gt; then try changing the parameter &lt;code&gt;auth=false&lt;/code&gt; to &lt;code&gt;auth-true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Session ID brute forcing.&lt;/li&gt;
&lt;li&gt;SQL injection. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check for broken access control.&lt;/li&gt;
&lt;li&gt;Remember password checking.

&lt;ul&gt;
&lt;li&gt;Check that is password being stored in the cookies or being constantly transferred in every request of the website. The credentials should only be sent I login phase.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check for directory traversal includes file input.

&lt;ul&gt;
&lt;li&gt;You have to check each and every input which your website and its directories take from user.&lt;/li&gt;
&lt;li&gt;You can referrer to this &lt;a href="https://medium.com/@nerdy_researcher/directory-traversal-aka-path-traversal-c76dc7bbe61#:~:text=What%20is%20Directory%20Traversal%3F,and%20sensitive%20operating%20system%20files"&gt;article&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Checking for privilege escalation.

&lt;ul&gt;
&lt;li&gt;You can check for this at some places like if user can make payment, adding something, sending message to someone.&lt;/li&gt;
&lt;li&gt;You can intercept request of two different sets of account and try modifying parameters like grp, id, and role if they exist.&lt;/li&gt;
&lt;li&gt;You can referrer to this &lt;a href="https://shahjerry33.medium.com/privilege-escalation-hello-admin-a53ac14fd388"&gt;article&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check for IDOR &lt;em&gt;(Insecure Direct Object Reference)&lt;/em&gt;.

&lt;ul&gt;
&lt;li&gt;You can try for getting access to other user data by changing parameters in URL.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check for bypassing session management object.

&lt;ul&gt;
&lt;li&gt;Set-cookies are secure or not?&lt;/li&gt;
&lt;li&gt;Are cookies transmitted in encrypted manner?&lt;/li&gt;
&lt;li&gt;Make sure cookies are not same every time when your browse website.&lt;/li&gt;
&lt;li&gt;Sometimes website can leak their token structure/information try to find it.&lt;/li&gt;
&lt;li&gt;Session ID predictability.&lt;/li&gt;
&lt;li&gt;Brute forcing session ID.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check for CSRF.&lt;/li&gt;
&lt;li&gt;Check for XSS &lt;em&gt;(stored, reflected, blind)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Check for SQL injection &lt;em&gt;(blind, In band, Out band, Error based etc.).&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Check for XML injection.&lt;/li&gt;
&lt;li&gt;Check for file upload.&lt;/li&gt;
&lt;li&gt;Check for open redirection or client-side open redirection.

&lt;ul&gt;
&lt;li&gt;You can referrer to this &lt;a href="https://corneacristian.medium.com/top-25-open-redirect-bug-bounty-reports-5ffe11788794"&gt;article&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Checking for web sockets vulnerabilities.&lt;/li&gt;
&lt;li&gt;Check for code execution. 

&lt;ul&gt;
&lt;li&gt;You can referrer to this &lt;a href="https://medium.com/@ashishrohra/remote-code-execution-explaination-writeups-and-tools-a8e4c3362259"&gt;article&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check for SSRF &lt;em&gt;(Server Side Request Forgery)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Check fir command injection.

&lt;ul&gt;
&lt;li&gt;You can referrer to this &lt;a href="https://medium.com/ax1al/os-command-injection-beginners-guide-637e1eed1fde"&gt;article&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Checking for business logic flaws.

&lt;ul&gt;
&lt;li&gt;You can referrer to this &lt;a href="https://medium.com/armourinfosec/exploiting-business-logic-vulnerabilities-234f97d6c4c0"&gt;article&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Checking for LDAP injection.

&lt;ul&gt;
&lt;li&gt;You can referrer to this &lt;a href="https://medium.com/@hunter_55/ldap-admin-account-bypassed-2cc8b264d66e"&gt;article&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Check for HTTP request smuggling. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;So this was all about some more things to check while doing penetration test on a website or in a bug bounty program. Hope you liked it and learned something new from it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you have any doubt, question, quires related to this topic or just want to share something with me, than please feel free to contact me.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%F0%9F%96%A5-my-personal-blog"&gt;
  &lt;/a&gt;
  🖥 My personal blog
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://thehackedsite.netlify.app/"&gt;The Hacked Site&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contact-me"&gt;
  &lt;/a&gt;
  📱 Contact Me
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/r_mishra10"&gt;Twitter&lt;/a&gt;,&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/rahul-mishra-66210b185"&gt;LinkedIn&lt;/a&gt;,&lt;br&gt;
&lt;a href="https://t.me/rahul_mishra10"&gt;Telegram&lt;/a&gt;,&lt;br&gt;
&lt;a href="https://www.instagram.com/rahul_mishra10/?hl=en"&gt;Instagram&lt;/a&gt;,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-a-mail"&gt;
  &lt;/a&gt;
  📧 Write a mail
&lt;/h3&gt;

&lt;p&gt;&lt;a href="mailto:rahulmishra102000@gmail.com"&gt;rahulmishra102000@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-links"&gt;
  &lt;/a&gt;
  🚀 Other links
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/rahulMishra05"&gt;GitHub&lt;/a&gt;,&lt;br&gt;
&lt;a href="https://www.hackerrank.com/rahulmishra10201"&gt;HackerRank&lt;/a&gt;,&lt;br&gt;
&lt;a href="https://tryhackme.com/p/rahulMishra05"&gt;Tryhackme&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>linux</category>
      <category>beginners</category>
      <category>github</category>
    </item>
    <item>
      <title>How I publish articles to all developer platforms (and my private blog) in one shot</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Sun, 11 Apr 2021 07:47:06 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/how-i-publish-articles-to-all-developer-platforms-and-my-private-blog-in-one-shot-38aj</link>
      <guid>https://dev.to/pjeziorowski/how-i-publish-articles-to-all-developer-platforms-and-my-private-blog-in-one-shot-38aj</guid>
      <description>&lt;h3&gt;
  &lt;a href="#where-to-host-your-blog"&gt;
  &lt;/a&gt;
  Where to host your blog?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.qovery.com/"&gt;Qovery&lt;/a&gt; CEO, Romaric has just started &lt;a href="https://www.heapstack.sh/"&gt;his own blog on hashnode&lt;/a&gt;. I become jealous, so I started thinking about blogging again. I couldn't decide where to publish my content, though:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to"&gt;Dev.to&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cyberwritings.com"&gt;My.own.site&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com"&gt;Medium&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-answer-gt-everywhere"&gt;
  &lt;/a&gt;
  The answer &amp;gt; everywhere!
&lt;/h3&gt;

&lt;p&gt;To reach the highest number of people, I decided to publish it everywhere with automated content distribution tools. Unluckily, I couldn't find any tool that would meet my needs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;allowing me to write just once&lt;/li&gt;
&lt;li&gt;have it published automagically everywhere&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, I'll show you how I achieved what I wanted - I hope you'll find it helpful on your own blogging adventure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#markdown"&gt;
  &lt;/a&gt;
  Markdown
&lt;/h3&gt;

&lt;p&gt;My blog uses markdown to build the HTML for the articles. Markdown is quite good for it as it's very portable. All, Hashnode, Dev.to, and Medium support markdown in their APIs. This is perfect - it allows me to write a single markdown file and have it published everywhere.&lt;/p&gt;

&lt;p&gt;After the markdown file (the article) is written down, we need to use APIs. So, the tool needs to take the markdown and deliver it in the correct format to APIs of all the different platforms we target.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cli"&gt;
  &lt;/a&gt;
  CLI
&lt;/h3&gt;

&lt;p&gt;The first version of the tool is a simple CLI app. It's relatively fast to create and validates the concept quickly - we don't need backends, UIs or any other crazy stuff from the very beginning. BTW, I named the app &lt;strong&gt;Rollout&lt;/strong&gt; to refer to it in this post more easily, hah!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-rollout"&gt;
  &lt;/a&gt;
  Using Rollout
&lt;/h3&gt;

&lt;p&gt;I won't go over the details of how the CLI is implemented (as it's not the topic of this post, it's very simple, though - you can see the code &lt;a href="https://github.com/pjeziorowski/rollout"&gt;here&lt;/a&gt;).&lt;br&gt;
I'll jump straight into showing how to use the tool and how simple it is to have your posts published everywhere.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-install-the-tool"&gt;
  &lt;/a&gt;
  1 &lt;strong&gt;Install the tool&lt;/strong&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#macos"&gt;
  &lt;/a&gt;
  MacOS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew tap pjeziorowski/rollout-cli
brew &lt;span class="nb"&gt;install &lt;/span&gt;rollout-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#windowslinux"&gt;
  &lt;/a&gt;
  Windows/Linux
&lt;/h4&gt;

&lt;p&gt;If you are on Linux/Windows, for now you need to build the app &lt;a href="https://github.com/pjeziorowski/rollout"&gt;from the source&lt;/a&gt;. I'll improve it soon!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-write-the-article-this-is-definitely-the-most-challenging-part-luckily-for-you-i-wrote-one-that-you-can-use-for-the-test"&gt;
  &lt;/a&gt;
  2 &lt;strong&gt;Write the article&lt;/strong&gt; - this is definitely the most challenging part! Luckily for you, I wrote one that you can use for the test!
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"---
title: "&lt;/span&gt;Test Rollout CLI&lt;span class="s2"&gt;"
canonical_url: https://google.com/test
tags: [Blogging, Automation]
---  
## Hello Rollout!
"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ./test.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-distribute-the-article"&gt;
  &lt;/a&gt;
  3 &lt;strong&gt;Distribute the article&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rollout test.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;P.S. you also need to provide API tokens for the tool to use, it'll show you a hint you when you give it a try.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#congrats-your-post-is-now-published-everywhere"&gt;
  &lt;/a&gt;
  Congrats! Your post is now published everywhere
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey... Did you forget somethin? You only published to Dev.to, Hashnode and Medium. What about your (and mine!) private blog?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, in my workflow, I publish posts to my blog by simply pushing markdown to my Github repository, so the tool doesn't have to do anything more. It's enough for me now, but in the future, &lt;strong&gt;Rollout&lt;/strong&gt; could also be integrated with any headless CMS, for example. If I had a WordPress blog, I would simply use the WordPress API to push the article there. Luckily for me, all I have to do is store my posts on Github. If it's the same for you, welcome to the happy bloggers club!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-opensourced"&gt;
  &lt;/a&gt;
  It's open-sourced!
&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, you can see the tool's code in its &lt;a href="https://github.com/pjeziorowski/rollout"&gt;Github repository&lt;/a&gt;.&lt;br&gt;
If you like the idea or the tool works for you - please give it a star and leave a feedback comment (if they are yet implemented on this site, ha) or contact me on &lt;a href="https://twitter.com/pjeziorowski"&gt;Twitter&lt;/a&gt;/&lt;a href="https://www.linkedin.com/in/patrykjeziorowski/"&gt;Linkedin&lt;/a&gt; directly.&lt;/p&gt;

&lt;p&gt;If I see interest in the tool, I'll put more work to make it more versatile and probably create a UI (SPA) and some backend for managing the content and configuration. Contributions and suggestions are also very welcome!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#btw-this-article-was-published-with-rollout"&gt;
  &lt;/a&gt;
  BTW - this article was published with Rollout!
&lt;/h2&gt;

</description>
      <category>blogging</category>
      <category>automation</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Handling Dependency Injection in Inherited Classes</title>
      <author>Sam Walpole</author>
      <pubDate>Sun, 11 Apr 2021 07:39:49 +0000</pubDate>
      <link>https://dev.to/dr_sam_walpole/handling-dependency-injection-in-inherited-classes-4ilj</link>
      <guid>https://dev.to/dr_sam_walpole/handling-dependency-injection-in-inherited-classes-4ilj</guid>
      <description>&lt;p&gt;Dependency injection (DI) is a wonderful thing. Simply add your dependency as a parameter to the constructor (most commonly) of your class, register it with you DI container, and away you go - the DI container will manage the rest. Some of the key benefits of DI are: greater testability, greater maintainability, and greater reusability.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// without DI&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dbContent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyDbContext&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;dbContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveChanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyDbContext&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JsonResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// with DI&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;MyDbContext&lt;/span&gt; &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;OrderController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyDbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_dbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;_dbContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveChanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JsonResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, I recently came across a use case where DI can be a real pain - dependency injection in inherited classes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.co.uk/Clean-Architecture-Craftsmans-Software-Structure-ebook/dp/B075LRM681?crid=1U88IMHJQOEF1&amp;amp;dchild=1&amp;amp;keywords=clean+architecture&amp;amp;qid=1618126713&amp;amp;sprefix=clean+ar%2Caps%2C154&amp;amp;sr=8-1&amp;amp;linkCode=li2&amp;amp;tag=samwalpole-21&amp;amp;linkId=6fd09d84d79a171f16675e3ed3b17b6d&amp;amp;language=en_GB&amp;amp;ref_=as_li_ss_il"&gt;&lt;img src="//ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B075LRM681&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=GB&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=samwalpole-21&amp;amp;language=en_GB"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7-DcOFnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3DB075LRM681" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7-DcOFnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3DB075LRM681" width="1" height="1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h1&gt;

&lt;p&gt;I have recently been working a lot with the &lt;a href="https://github.com/jbogard/MediatR"&gt;Mediatr&lt;/a&gt; package, using it's request/request handler pattern to issue commands in the system (inspired by &lt;a href="https://github.com/jasontaylordev/CleanArchitecture"&gt;Jason Taylor's Clean Architecture solution&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I typically create a RequestHandler base class that contains common dependencies and functionality. Each concrete request handler can then inherit from this base class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequest&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyRequestHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MyRequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handler logic&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem comes when I want to add more dependencies to the base class. Now I have to go through to every single concrete request handler and update the constructor to take the new dependency as well. Fortunately, the code will not compile if I miss one, so there is no risk of a runtime error, but it is still incredibly tedious work to have to update every single request handler. Also, you can end up with very large constructors, which obscures the intention of the class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequest&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="n"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;CurrentUser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="n"&gt;CurrentUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyRequestHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MyRequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="n"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handler logic&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-solution-dependency-aggregates"&gt;
  &lt;/a&gt;
  The Solution - Dependency Aggregates
&lt;/h1&gt;

&lt;p&gt;The solution to this problem is really quite simple. Rather than injecting the dependencies directly, create a new class that contains the dependencies (known as an aggregate) and inject that instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IDependencyAggregate&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DependencyAggregate&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDependencyAggregate&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DependencyAggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="n"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;CurrentUser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="n"&gt;CurrentUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequest&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDependencyAggregate&lt;/span&gt; &lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;CurrentUser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="n"&gt;CurrentUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyRequestHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MyRequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDependencyAggregate&lt;/span&gt; &lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handler logic&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if I want to add a new dependency, the only places that I need to change the code are in the DependencyAggregate class and the RequestHandler base class (I don't need to make any changes to the inherited classes).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.co.uk/Clean-Architecture-Craftsmans-Software-Structure-ebook/dp/B075LRM681?crid=1U88IMHJQOEF1&amp;amp;dchild=1&amp;amp;keywords=clean+architecture&amp;amp;qid=1618126713&amp;amp;sprefix=clean+ar%2Caps%2C154&amp;amp;sr=8-1&amp;amp;linkCode=li2&amp;amp;tag=samwalpole-21&amp;amp;linkId=6fd09d84d79a171f16675e3ed3b17b6d&amp;amp;language=en_GB&amp;amp;ref_=as_li_ss_il"&gt;&lt;img src="//ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B075LRM681&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=GB&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=samwalpole-21&amp;amp;language=en_GB"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7-DcOFnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3DB075LRM681" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7-DcOFnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3DB075LRM681" width="1" height="1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this post I have described a simple method for managing dependency injection in inherited classes, by creating a dependency aggregate class to inject into the base class. This ensures that new dependencies can easily be introduced with having to make changes to every inherited class.&lt;/p&gt;

&lt;p&gt;I post mostly about full stack .NET and Vue web development. To make sure that you don't miss out on any posts, please follow this blog and &lt;a href="https://samwalpole.com"&gt;subscribe to my newsletter&lt;/a&gt;. If you found this post helpful, please like it and share it. You can also find me on &lt;a href="https://twitter.com/dr_sam_walpole"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>dependencyinjection</category>
      <category>inheritance</category>
    </item>
    <item>
      <title>Tech Communities: Definitive guides to etch a great growth curve!</title>
      <author>Bala Priya</author>
      <pubDate>Sun, 11 Apr 2021 07:29:23 +0000</pubDate>
      <link>https://dev.to/balapriya/tech-communities-definitive-guides-to-etch-a-great-growth-curve-3no</link>
      <guid>https://dev.to/balapriya/tech-communities-definitive-guides-to-etch-a-great-growth-curve-3no</guid>
      <description>&lt;p&gt;Able mentorship, networking with like-minded people, sufficient peer motivation; And an eclectic combination of all the above! Sounds exciting right? Oh, yeah! Then, It’s time to join the wonderful tech communities out there!&lt;/p&gt;

&lt;p&gt;The impact that good networking has on us as individuals is beyond what we can ever comprehend. By signing up to be a part of these tech communities, we get to network with wonderful people from across the globe, from diverse tech backgrounds, with an equally rich variety in expertise and experience. Reaching out to the members of the community for assistance is literally just a message away! Communities like Women Who Code also offer us the option to join local chapters in our country that best suit us or even request to start one.&lt;/p&gt;

&lt;p&gt;How well they bring together people from all walks of life is yet another attribute that makes tech forums a great place to be a part of. If you’re a beginner or a student looking for your breakthrough into an enticing career in tech, there’s ample scope to hone your existing skill set, learn a new skill and get to know from experts in industry on opportunities. The study groups, webinars and talks collectively facilitate a great learning path.&lt;/p&gt;

&lt;p&gt;As for accomplished professionals, who’ve already scaled heights in their career, such forums are perfect platforms to share their success stories and inspire &amp;amp; guide many aspiring individuals. A much needed mentorship could go a long way in redefining somebody’s tech career.&lt;/p&gt;

&lt;p&gt;Summing it all up, if you’re someone who believes in the synergy of collaborative work and coming together to succeed; if you’ve always supported Women in Tech, Diversity &amp;amp; Inclusion and the many ideals that hold them together, the tech communities are places where you’d see these ideals forming an integral part of the functioning; making an impact and transforming lives for the better!&lt;/p&gt;

&lt;p&gt;That being said, maybe it’s time to grab a quick bite &amp;amp; a cup of coffee and tune right into the very next event that interests you the most?&lt;/p&gt;

&lt;p&gt;Cover Image: Photo by &lt;a href="https://unsplash.com/@bamagal?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;"My Life Through A Lens"&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/community?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>inclusion</category>
      <category>womenintech</category>
      <category>shecoded</category>
    </item>
  </channel>
</rss>
