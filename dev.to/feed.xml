<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Roads quality in Asia 2006-2019</title>
      <author>ChiCongNguyen</author>
      <pubDate>Tue, 15 Jun 2021 04:16:40 +0000</pubDate>
      <link>https://dev.to/congnguyen/roads-quality-in-asia-2006-2019-24cj</link>
      <guid>https://dev.to/congnguyen/roads-quality-in-asia-2006-2019-24cj</guid>
      <description>&lt;p&gt;In south asia, we could see the top one is Singapore&amp;gt;&amp;gt;Malaysia&amp;gt;&amp;gt;Thailand&amp;gt;&amp;gt;Indonesia&amp;gt;&amp;gt;Laos&amp;gt;&amp;gt;Cambodia&amp;gt;&amp;gt;VietNam&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--icmmBf9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62sdt2c579rqt790wa9g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icmmBf9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62sdt2c579rqt790wa9g.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.theglobaleconomy.com/rankings/roads_quality/Asia/"&gt;https://www.theglobaleconomy.com/rankings/roads_quality/Asia/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>logistics</category>
    </item>
    <item>
      <title>The Advanced Challenge of Load Balancing</title>
      <author>RainrainWu</author>
      <pubDate>Tue, 15 Jun 2021 03:57:02 +0000</pubDate>
      <link>https://dev.to/rainrainwu/the-advanced-challenge-of-load-balancing-ccb</link>
      <guid>https://dev.to/rainrainwu/the-advanced-challenge-of-load-balancing-ccb</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Not all traffic can be arbitrarily routed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While taking the responsibility of a mature service, it may not be possible for a single server to handle all the workload. This is due to three main considerations: performance, availability, and economy.&lt;/p&gt;

&lt;p&gt;In order to handle the excessive traffic well, increasing the capacity of processing requests is necessary, it can be achieved by either scale-up or scale-out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J_8T_9J3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcpnwrjcfmg1blqz9era.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_8T_9J3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcpnwrjcfmg1blqz9era.jpeg" alt="Photo by Piret Ilver on Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Piret Ilver on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, machine failures happen, and the cost of using top specification machines may not be affordable. Spread the workload evenly into multiple general workers sounds like a more feasible solution in most cases.&lt;/p&gt;

&lt;p&gt;This seems pretty natural….right?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, but actually not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The architecture works for most stateless APIs, but this newly added "Spread" behavior adds some uncertainty for other stateful interactions.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#session"&gt;
  &lt;/a&gt;
  Session
&lt;/h1&gt;

&lt;p&gt;Any techniques that make the servers store "state", which results in different logical behaviors between them, may conflict with the general load balancing architecture above.&lt;/p&gt;

&lt;p&gt;Using sessions on the web service is a classic case.&lt;/p&gt;

&lt;p&gt;Limited by the stateless design of HTTP protocol, in order to allow users to have continuity in each operation, the context information was stored on the server-side within a certain period of time, such as login status and shopping cart.&lt;/p&gt;

&lt;p&gt;Just like taking out a meal in the real world. Customers can get a number plate after ordering a meal at the counter, and they can pick up the meal with the number plate when it is ready.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o473y1kt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2ADw2Irliq0pHz0KSd" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o473y1kt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2ADw2Irliq0pHz0KSd" alt="Photo by Brooke Cagle on Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Brooke Cagle on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ordering a meal and pick it up are two independent steps for customers but with continuous logic, this is because the counter already stores the data of who they are and what they have ordered, and could be retrieved by the number plate they provided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sticky-session"&gt;
  &lt;/a&gt;
  Sticky Session
&lt;/h2&gt;

&lt;p&gt;Well, most of the time, the number plate can only be used in the same shop, we can not take the plate we got at A store to ask B store for our meal.&lt;/p&gt;

&lt;p&gt;This principle is the same on web services, because the session data may not be shared. There are two main directions to solve this problem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Share session data between all web server with external storage (e.g. Redis cluster)&lt;/li&gt;
&lt;li&gt;Force all the requests from the same client dispatched to the same server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first one is a little bit more complex and out of the scope of this story, I will focus on the second solution here.&lt;/p&gt;

&lt;p&gt;Maintaining the mapping relationships between the clients and web servers can help us forward each client to the same server they connected to last time, which currently handles the session context for them.&lt;/p&gt;

&lt;p&gt;This can be achieved by various identifiers from the client-side like IP addresses and cookies. Many well-known load-balancing solutions provide this option with different approaches, such as AWS NLB/ALB, GCP Cloud Load Balancer, and Envoy from CNCF.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz9-b0a_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2A-wq4j3GYElMK5tjB" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz9-b0a_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2A-wq4j3GYElMK5tjB" alt="Photo by Benedetta Pacelli on Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Benedetta Pacelli on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, enable the sticky sessions option is equivalent to adding a hard rule the may conflict with traffic balancing. For example, while handling a vast amount of client requests with the same IP address, an IP-based sticky session may not be a good choice since it may cause part of the servers under a heavy workload.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#websocket"&gt;
  &lt;/a&gt;
  WebSocket
&lt;/h1&gt;

&lt;p&gt;In modern software services, there are many situations that require real-time updates of information, such as stock market transactions, online games, and chat rooms.&lt;/p&gt;

&lt;p&gt;Using the polling strategy which driven by the periodic requests sent by the client-side sounds not economical, we need to afford the cost of TCP connections for each request, and it is very likely that there is no information to update.&lt;/p&gt;

&lt;p&gt;WebSocket with full-duplex communication is a solution worth trying. It allows the server-side to actively push messages to the client-side, effectively avoiding meaningless requests.&lt;/p&gt;

&lt;p&gt;However, a long-live connection between the client and the server would be maintained after the first request …&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are actually balancing the connections, not the workloads.&lt;/p&gt;

&lt;p&gt;Any problem with this?&lt;br&gt;
The main risk is that the workload cannot be properly distributed among multiple machines:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Different connections have different workloads at the same time. For chat software servers, users with many friends may have a much higher connection workload than users without friends (so sad …).&lt;/li&gt;
&lt;li&gt;The same connection has different workloads at different times. An obvious example is a game server, especially large open-world RPGs. When a character browses and trades items in the market, the required data transmission may be relatively small, but the workload may increase dramatically in an instant because many characters frequently move and cast skills during guild wars.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mYF4nuEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2A9cKCUJctoB33z1mX" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mYF4nuEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2A9cKCUJctoB33z1mX" alt="Photo by Chanhee Lee on Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Chanhee Lee on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To avoid a single server carrying too much workload, there are two main directions to solve this problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lower the metrics value upper bound for cluster scale-out trigger&lt;/li&gt;
&lt;li&gt;Reshape the Traffic by Reconnecting&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lower-the-metrics-value-upper-bound-for-cluster-scaleout-trigger"&gt;
  &lt;/a&gt;
  Lower the metrics value upper bound for cluster scale-out trigger
&lt;/h2&gt;

&lt;p&gt;Assuming that after a period of observation and statistics, we found that the workload of the same group of WebSocket connections during rush hours is about twice as much as usual, then we can do some simple calculations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set 70% of resource usages as a scale-out trigger is very dangerous, common traffic fluctuations can easily overload a server.&lt;/li&gt;
&lt;li&gt;Set 50% of resource usages as a scale-out trigger can be a great choice, From past experience, each server will not run out of resources for more than 99% of the time.&lt;/li&gt;
&lt;li&gt;Set 30% of resource usages as a scale-out trigger seems not very economical, more than half of the resources are idle outside of peak hours.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just a simple case for easy explanation, this strategy highly depends on the traffic shape and business nature of your services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6kRF_pbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2ABL2USDaP_8UmquQc" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6kRF_pbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2ABL2USDaP_8UmquQc" alt="Photo by Marcus Castro on Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Marcus Castro on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the service only encounters traffic peak during holidays, we can definitely set 70% of resources usages as upper bound during weekdays, and only increase the sensitivity of the trigger before holidays.&lt;/p&gt;

&lt;p&gt;Honestly, I don't recommend this practice as a long-term solution. Although it is relatively simple and can gain effect immediately, it does not solve the issue of unbalanced workload fundamentally, but make costs of devices grow more rapidly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reshape-the-traffic-by-reconnecting"&gt;
  &lt;/a&gt;
  Reshape the Traffic by Reconnecting
&lt;/h2&gt;

&lt;p&gt;Another more solid practice is to reshape all traffic through reconnecting. To a certain extent, it overcomes the balancing failure of long-term connection, but it also brings new challenges to the user experience and service resilience.&lt;/p&gt;

&lt;p&gt;Every reconnection is not only an opportunity but a risk.&lt;br&gt;
The timing of the reconnection is a critical issue, it has a very direct impact on the effectiveness of load balancing and the user experience. Below are several commonly used strategies:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reconnect-periodically"&gt;
  &lt;/a&gt;
  Reconnect Periodically
&lt;/h3&gt;

&lt;p&gt;This is one of the most intuitive methods, it can almost ensure the effectiveness of the workload balancing with an appropriate time interval setting. Unfortunately, the brute force of this hard rule probably devastates the client's experience while using the service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2hfnUvtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AbWka-3csOuTa9wSQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2hfnUvtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AbWka-3csOuTa9wSQ" alt="Photo by JOHN TOWNER on Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by JOHN TOWNER on Unsplash&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Product managers can easily make a list of situations that should not be interrupted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users are shopping without the awareness of budget control&lt;/li&gt;
&lt;li&gt;Users are filling in the information required for the purchase order&lt;/li&gt;
&lt;li&gt;Users are playing player versus player (PVP) arena in an e-sport game&lt;/li&gt;
&lt;li&gt;Users are playing a card game with a time limit for each round, and it is currently counting down&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is no doubt that disturbing the user while they expect to have fluent operations is terrible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choose-the-right-occasion-to-reconnect"&gt;
  &lt;/a&gt;
  Choose the right occasion to reconnect
&lt;/h3&gt;

&lt;p&gt;Since we can sort out many situations that are not suitable for reconnecting, on the other hand, there may also exist some suitable. To be more precise, we can make good use of the moment that users can accept and expect to wait:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start watching a new live streaming on social APPs&lt;/li&gt;
&lt;li&gt;Request for a massive amount of data or download a file&lt;/li&gt;
&lt;li&gt;Teleport between different maps in an open-world RPG&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a user is ready to wait, he is less concerned about waiting a little longer, and they will not even notice that you are secretly reconnecting. Even if the reconnection unfortunately fails, it will not interrupt the continuous operation and have too much negative impact.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h1&gt;

&lt;p&gt;A good user experience is often regarded as a holy grail, in order to realize various product imaginations, the techniques and strategies behind them are always astonishing.&lt;/p&gt;

&lt;p&gt;I hope that my experience sharing in load balancing architectures and strategies can help you handle the challenges in software engineering well in the future :)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>cloud</category>
      <category>backend</category>
      <category>engineering</category>
    </item>
    <item>
      <title>Six Serverless Frameworks to watch in 2021</title>
      <author>Hardik Shah</author>
      <pubDate>Tue, 15 Jun 2021 03:56:11 +0000</pubDate>
      <link>https://dev.to/hsshah_/six-serverless-frameworks-to-watch-in-2021-4p2</link>
      <guid>https://dev.to/hsshah_/six-serverless-frameworks-to-watch-in-2021-4p2</guid>
      <description>&lt;p&gt;Are you planning to adopt serverless architecture to proliferate your business productivity? If your answer is yes, you’ve come to the right place. &lt;/p&gt;

&lt;p&gt;There are many platforms and frameworks available to integrate serverless in your tech stack. You might know a few frameworks and may have used some of them. But, choosing the one that can accelerate your product in terms of scalability and cost-efficiency is not easy. &lt;/p&gt;

&lt;p&gt;Many large-scale enterprises like Amazon, Netflix, Nordstrom, Mindmup, etc., use this software architecture pattern and enjoy tremendous benefits such as faster development, security, and improved productivity. &lt;/p&gt;

&lt;p&gt;Not only that, but startups are also leveraging this breakthrough technology. Using &lt;a href="https://www.simform.com/serverless-for-startups/"&gt;serverless for startups&lt;/a&gt; is a classic example of how organizations can shift their focus from infrastructure provisioning and management to building actual products. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-frameworks"&gt;
  &lt;/a&gt;
  Serverless Frameworks
&lt;/h2&gt;

&lt;p&gt;It’s challenging to decide on one framework for your business product to integrate with your cloud platform provider. If you’re delving into a dilemma of what framework can benefit your business most, then fret not. &lt;/p&gt;

&lt;p&gt;Let’s explore the following Serverless frameworks for 2021:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless"&gt;
  &lt;/a&gt;
  Serverless
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p41zHnVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/1MgTzjg/Serverless.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p41zHnVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/1MgTzjg/Serverless.png" alt="Serverless"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With more than 39.9k stars and 4.8k forks on GitHub, this is the most popular framework available for building varieties of serverless applications. In addition, this toolkit lets you package and deploy apps to multiple cloud service providers like AWS, Azure, and Google Cloud Function. &lt;/p&gt;

&lt;p&gt;Some of the features this framework offers include multi-language support, scaffolding, workflow automation, etc., and it is extensible via plugins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zappa"&gt;
  &lt;/a&gt;
  Zappa
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bq9IcGYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/z8cjqrV/Zappa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bq9IcGYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/z8cjqrV/Zappa.png" alt="Zappa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zappa is a Python framework, which allows you to build and deploy any WSGI-compatible serverless and event-driven applications hosted on AWS Lambda. Using three simple commands - install, init, and deploy, you can easily deploy applications developed in Django, Flask, and other Python frameworks on AWS Lambda and API Gateway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architect"&gt;
  &lt;/a&gt;
  Architect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--22ZuLix3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/9T6SScK/Architect.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--22ZuLix3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/9T6SScK/Architect.png" alt="Architect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Architect a.k.a. ARC is the sophisticated OpenJS foundation project that is used to define serverless architecture. Low-code, offline workflows, and well-integrated local development are a few features of this framework. And what’s more, it allows you to quickly and concisely build, deploy, and manage AWS serverless infrastructure. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sigma"&gt;
  &lt;/a&gt;
  Sigma
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--baxcqUre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Dg67TKB/Sigma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--baxcqUre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Dg67TKB/Sigma.png" alt="Sigma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sigma is a cloud-based platform to provide support for serverless development in AWS and GCP. It’s a fully-featured IDE that entirely runs on the browser and lets you write and publish the code in real-time. &lt;/p&gt;

&lt;p&gt;You need backend services for authenticating users and collecting analytical data. Other than that, it doesn’t require a backend to perform any other functions, as it is serverless itself. It is a real fast IDE with monitoring and debugging features and is worth trying for your serverless project.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#up"&gt;
  &lt;/a&gt;
  Up
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMb-HsX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/1XCdYJn/Up.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMb-HsX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/1XCdYJn/Up.png" alt="Up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This feature-rich framework allows you to deploy serverless applications, static websites, and API gateways with infinite scalability. Moreover, you don’t need to learn new languages. Instead, you can start with your choice of frameworks like Express and Django and build your web product. &lt;/p&gt;

&lt;p&gt;It supports multiple runtimes, includes Node.js 10.x, Golang, Python, and Crystal. Furthermore, you can quickly deploy applications without any difficulty using a single command. Structured logging, instant rollback, and encrypted environment are a few features of this framework. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pulumi"&gt;
  &lt;/a&gt;
  Pulumi
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpTuuKDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YNGrqHC/Pulumi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpTuuKDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YNGrqHC/Pulumi.png" alt="Pulumi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is an Infrastructure as Code (IaC) SDK that lets you create, deploy, and manage serverless infrastructure on any cloud-based platform. Fortunately, you can use your choice of language, tools, and engineering practices to build, deploy, and manage cloud-based apps. It also supports TypeScript, JavaScript, Python, Go, and .NET frameworks. &lt;/p&gt;

&lt;p&gt;Pulumi is the best option for provisioning and managing infrastructure tasks on cloud service providers like AWS, Azure, GCP, and Kubernetes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The market is flooded with lots of serverless frameworks, and most of them are designed to offer rapid development and deployment of a project. Unfortunately, though, each is meant for a defined task. Henceforth, deciding the appropriate one for your project depends solely on the project requirement. &lt;/p&gt;

&lt;p&gt;I have tried to list out a few best serverless frameworks here. I hope this will help you in deciding the one for your serverless project. Which framework are you going to choose? Please let me know in the comments, or you can contact me for any discussion. &lt;/p&gt;

</description>
      <category>serverless</category>
    </item>
    <item>
      <title>Quiz Website | Javascript</title>
      <author>Knol Coder</author>
      <pubDate>Tue, 15 Jun 2021 03:47:17 +0000</pubDate>
      <link>https://dev.to/knolcoder/quiz-website-3jbi</link>
      <guid>https://dev.to/knolcoder/quiz-website-3jbi</guid>
      <description>&lt;p&gt;Quiz Website Made With Html , Css &amp;amp; Javascript&lt;br&gt;
info :-&lt;br&gt;
1) You Can Set Time .&lt;br&gt;
2) You Can Set Rule.&lt;br&gt;
3) You Can Set Custom Question .&lt;/p&gt;

&lt;p&gt;Download - &lt;a href="https://dropbay.net/2zWJ/quiz-web.zip"&gt;Download Now&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Designing functions: The building blocks of computer programs</title>
      <author>Dave Amiana</author>
      <pubDate>Tue, 15 Jun 2021 03:09:51 +0000</pubDate>
      <link>https://dev.to/iamdeb25/designing-functions-the-building-blocks-of-computer-programs-2pmb</link>
      <guid>https://dev.to/iamdeb25/designing-functions-the-building-blocks-of-computer-programs-2pmb</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by Magda Ehlers from Pexels&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A function is an essential construct in programming. In the language that we use to convey a message on the computer, functions closely resemble a verb: &lt;em&gt;"the nuts and bolts of the language"&lt;/em&gt; (S. Pinker, 2007). Put it in another way, functions serve as the primary constructs for expressing a set computational procedure in a programming language. &lt;/p&gt;




&lt;p&gt;It is better to break down the problem into manageable pieces. Solving the smaller part of the problem requires a computational procedure that we store in a function. &lt;/p&gt;

&lt;p&gt;This article will introduce the things to consider in designing and organizing functions. &lt;/p&gt;

&lt;p&gt;A function is a block of code that processes inputs and configures an output. One of the nice things about this is it breaks down our solution into a set of subroutines that we can reuse to solve other problems. &lt;/p&gt;

&lt;p&gt;Indeed, simple algorithms can be stored in one function, sometimes, it branches off into two or more: &lt;strong&gt;the question is when and why do we need indirection?&lt;/strong&gt; The most obvious reason for this is &lt;em&gt;code-reusability&lt;/em&gt;. We need to make conscious efforts into making our codebase sustainable i.e. reusable. To achieve this, we have to delegate the simplest version of a task in a function. Our goal is to minimize the &lt;em&gt;boilerplate code&lt;/em&gt; (sections of code that are repeated in multiple places with little to no variation), &lt;strong&gt;we follow the virtue of not repeating ourselves&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Functions are sufficient for developing sophisticated software systems. This technique is sometimes known as &lt;em&gt;modular programming&lt;/em&gt;. This is one of the reasons why C is deemed elegant by some developers I know. &lt;/p&gt;

&lt;p&gt;There are three major concepts in modular programming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Module&lt;/em&gt; - a self-contained collection of functions that solves a problem (or subproblem).&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Abstract Step&lt;/em&gt; - A step in which some implementation details are unspecified. This step may define the routes where concrete functions may take place. In other words, it is a code block that delegates a group of functions necessary for solving the problem. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Concrete Step&lt;/em&gt; - A realization of the abstract step that implements the logic for solving independent subproblems.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#software-design-process-topdown-approach"&gt;
  &lt;/a&gt;
  Software Design Process: Top-Down Approach
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1BkE8VVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623724225735/nkFCw94Pc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1BkE8VVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623724225735/nkFCw94Pc.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;Figure 1.0&lt;/code&gt;. Hierarchical solution tree (Dale, N. B., &amp;amp; Weems, C., 2014).&lt;/p&gt;

&lt;p&gt;Steps for applying design principles in functions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Understand the problem&lt;/strong&gt;. State its input requirements as well as the specifications for expected output.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Write the major steps for solving the problem&lt;/strong&gt;. Make a hierarchical solution tree (as seen in figure 1) and define the major problems you need to solve. As you go down to the bottom, problems become more concrete and simpler.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Decide if the problem can be broken down into independent subproblems that we can work on separately&lt;/strong&gt;. It is often simple enough when you can see how to implement it directly in a language. If you feel overwhelmed by writing it in a language, you are probably bypassing one or more levels of abstraction -- you need to step back and think through how you can simplify this by breaking down the problem.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ensure that each function has exactly one job&lt;/strong&gt;. Their purpose should be obvious in its name (it makes your code easier to read and self-documenting, so we must assure that the function name should clearly state its purpose).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Document solution process&lt;/strong&gt;. Documentation helps to make our codebase easier to maintain. &lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Pinker, S. (2007). Steven Pinker: What our language habits reveal.  &lt;a href="https://www.youtube.com/watch?v=LjQM8PzCEY0"&gt;TED&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dale, N. B., &amp;amp; Weems, C. (2014). Programming and problem solving with C++. Jones &amp;amp; Bartlett Publishers.&lt;/li&gt;
&lt;li&gt;DeNero, J. (n.d.).  &lt;a href="https://composingprograms.com/pages/14-designing-functions.html"&gt;Composing Programs&lt;/a&gt;. &lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Everything you need to know about linux File System directories!</title>
      <author>mohammed afif ahmed</author>
      <pubDate>Tue, 15 Jun 2021 03:05:53 +0000</pubDate>
      <link>https://dev.to/afif_ahmed/everything-you-need-to-know-about-linux-directories-57ha</link>
      <guid>https://dev.to/afif_ahmed/everything-you-need-to-know-about-linux-directories-57ha</guid>
      <description>&lt;h2&gt;
  &lt;a href="#history-of-linux-and-windows"&gt;
  &lt;/a&gt;
  History of Linux and Windows
&lt;/h2&gt;

&lt;p&gt;Okay, before starting with the actual topic, let’s discuss what makes Linux different from windows. If you are a Windows user you might have seen different drives such as C, D, E, etc which are absent in Linux instead it has folders named /bin, /sbin, /usr, /etc.&lt;/p&gt;

&lt;p&gt;For new Linux users, let us tell you about how Linux and windows evolved. Windows was installed on top of DOS(Disk operating system), which was a command-line tool where you can run programs, games, etc. It used letters to assign removable discs such as floppy drives, i.e. A and B. When the hard drive was introduced, the letter C was assigned for the internal disk and the next available letter for the next disk.&lt;/p&gt;

&lt;p&gt;Microsoft evolved their kernel so that windows boots are less dependent on DOS and eventually without DOS at all. Linux follows the Unix tradition which is why it uses forward slash unlike backslash in windows. It is also case sensitive, also macOS has similar features as it is a common Unix-based ancestor.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-now-lets-jump-into-the-linux-filesystem"&gt;
  &lt;/a&gt;
  So now let’s jump into the Linux filesystem.
&lt;/h2&gt;

&lt;p&gt;A filesystem is used to control the flow of how data is stored or distributed or retrieved from a physical storage device such as HDD, SSD, etc. Its main purpose is to make users and the operating system store files in such a manner that all the different directories can utilize them efficiently.&lt;/p&gt;

&lt;p&gt;The OS plays the role of intermediate that facilitates the data transfer for storage on a storage device. Linux uses a directory tree to manage directories and files. The tree information is also stored on a storage device and this part is called the root file system or root directory.&lt;/p&gt;

&lt;p&gt;The root directory is the most important as all other directories are derived from it and it is responsible for booting, repairing, and restoring the Linux system.&lt;/p&gt;

&lt;p&gt;The File hierarchy for Linux defines the Linux directory structure. We can refer to the sequential directories in those directories by using directory names connected by a forward slash (/) such as /var/log and /var/spool/mail. These are called paths.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#now-let-us-explore-these-subdirectories-of-the-root-directory-one-by-one"&gt;
  &lt;/a&gt;
  Now let us explore these sub-directories of the root directory one by one.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---hUu8cAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rs-online.com/designspark/rel-assets/dsauto/temp/uploaded/linux-filesystem.png%3Fw%3D1042" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---hUu8cAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rs-online.com/designspark/rel-assets/dsauto/temp/uploaded/linux-filesystem.png%3Fw%3D1042" alt="lfs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bin"&gt;
  &lt;/a&gt;
  /bin
&lt;/h3&gt;

&lt;p&gt;This is a subdirectory of the root which stands for binaries and contains the executable programs, which are used for minimal functionality for booting or repairing. It usually contains the shell commands like cp(copy), rm(remove), ls, etc. It also contains programs that boot scripts may depend on. Bin folders can also be found in other sections of the file system tree.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sbin"&gt;
  &lt;/a&gt;
  /sbin
&lt;/h3&gt;

&lt;p&gt;This stands for system binaries that a system administrator may use and a standard user would not have access without permission. This folder, along with the one above it,contains the files that must be accessible while running in single-user mode (this mode boots you in as a root user to enable you to perform device repairs,updates, and testing) rather than multi-user mode.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#boot"&gt;
  &lt;/a&gt;
  /boot
&lt;/h3&gt;

&lt;p&gt;This directory contains all the executables or programs responsible for booting up a Linux machine whether it is ubuntu or kali or mint. As a result, the data used until even the Linux kernel starts to run some program is stored in the /boot directory.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dev"&gt;
  &lt;/a&gt;
  /dev
&lt;/h3&gt;

&lt;p&gt;This directory houses some exclusive or device-specific files. Everything in Linux is categorized as a file or a directory, as this command emphasizes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-la&lt;/span&gt; /dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see all the partitions on the system. /dev/cdrom represents our CD-ROM. Here the nested files represent a hardware device and any changes to them will be reflected in our hardware. For example, /dev/dsp represents the speakers and if you make changes to it, it will be reflected in the speakers. For instance, it will make a sound if you cat something on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /boot/vminux &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/dsp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#etc"&gt;
  &lt;/a&gt;
  /etc
&lt;/h3&gt;

&lt;p&gt;This directory contains all your configurations. Here configuration refers to those which are system-wide and not just for a particular user such as /etc/apt contains the sources list which contains the repo’s the system connects to and its various settings.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lib-lib32-lib64"&gt;
  &lt;/a&gt;
  /lib, /lib32, /lib64
&lt;/h3&gt;

&lt;p&gt;These are the directories where the libraries are stored. Libraries are files that the application uses to perform various functions, and these are required by the binaries in the /bin directory.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#media-and-mnt-mount"&gt;
  &lt;/a&gt;
  /media and /mnt (mount)
&lt;/h3&gt;

&lt;p&gt;These are the directories where we can find our other mounted drives such as USB,floppy disks, or external hard drives, etc. The /media folder wasn’t there before. &lt;br&gt;
It was just /mnt, but nowadays most Linux distros automatically mount devices in /media directory. But why two directories for mounting? Well, When manually mounting files, we use the /mnt directory and leave the /media directory to the operating system.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#opt-this-is-the-optional-folder"&gt;
  &lt;/a&gt;
  /opt (this is the optional folder)
&lt;/h3&gt;

&lt;p&gt;This folder usually contains manually installed software from any third-party vendors. This is the place where you can install the software created by you.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#proc"&gt;
  &lt;/a&gt;
  /proc
&lt;/h3&gt;

&lt;p&gt;This directory contains all the pseudo files that have information about the system processes and resources. Every process has a directory (named after the process ID) that contains all the necessary information on that process and these are not saved on the hard drive. The files here are translated by the kernel to generate some other information. for example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /proc/cpuinfo 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command prints out the information about the CPU.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#root"&gt;
  &lt;/a&gt;
  /root
&lt;/h3&gt;

&lt;p&gt;This is the home directory of the root user. It does not contain typical directories and does not reside in the /home directory, unlike a user's /home directory. You can store the files here but you need to have root access. This directory's location also means that the root has constant access to its /home folder.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run"&gt;
  &lt;/a&gt;
  /run
&lt;/h3&gt;

&lt;p&gt;This directory is relatively new, and various distributions use it in different ways. It's a tempfs file system, which means everything in it is deleted when the system is rebooted or shut down. It is used to store runtime information that processes use to work early in&lt;br&gt;
the boot method.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#srv"&gt;
  &lt;/a&gt;
  /srv
&lt;/h3&gt;

&lt;p&gt;This is called a service directory where data from the service is saved. For you, it will most likely be null, but if you run a web server or an FTP server, you will store files here that will be accessed by other users. Since it is at the root of the drive, it provides better&lt;br&gt;
protection.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sys"&gt;
  &lt;/a&gt;
  /sys
&lt;/h3&gt;

&lt;p&gt;This is called a system directory, It's been around for quite some time. It's a method of communicating with the kernel. This directory is similar to the /run directory in that it is not written to the disc physically. It's generated every time the machine starts up, so you wouldn't save anything here, and nothing is mounted here.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tmp"&gt;
  &lt;/a&gt;
  /tmp
&lt;/h3&gt;

&lt;p&gt;It is a temp (temporary) directory. This is where the program temporarily stores files that could be used during a session. For example, when you write a document in a program in vscode, it will save a temporary copy of what you're writing here on a regular basis. If the program crashes, you can search here to see if you have a recently saved copy that you can restore.&lt;/p&gt;

&lt;p&gt;When you reboot your computer, this folder is normally empty. Any files or directories may still be present or may have been stuck because the machine was unable to remove them. This isn't a concern unless there are hundreds of files taking up disc space, in which case you'll need to log in as root and manually delete them.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usr"&gt;
  &lt;/a&gt;
  /usr
&lt;/h3&gt;

&lt;p&gt;In contrast to the /bin directory, which is used by the system and system administrator to perform maintenance, this is the user application space where programs that are used by the user will be installed. Any program installed here is considered non-essential for basic system service, and it is also known as Unix System Resource. &lt;/p&gt;

&lt;p&gt;The installed programme can be found in a variety of locations, including /usr/bin, /usr/sbin, and /usr/local. The local directory is where most programs installed from source code end up. The /usr/share is where many larger programs mount themselves.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#var"&gt;
  &lt;/a&gt;
  /var
&lt;/h3&gt;

&lt;p&gt;This is the directory for variables. It contains files and directories that are expected to grow in size over time, such as dynamic data. /var/log contains system and application log files, which will grow in size as you use the system. Other items included here include mail databases and temporary storage for printer queues, also known as /spool.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#home"&gt;
  &lt;/a&gt;
  /home
&lt;/h3&gt;

&lt;p&gt;Each user has this directory. The /home directory is where you store your file and documents. Each user can access only their folder unless admin permissions.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And, phew...! finally we have reach the end. In this article, we have covered all the different Linux File system directories. We have also seen what makes Linux FS different from Windows FS and how Linux evolved. I  certainly hope that you now have knowledge of what each directory in Linux FS means and its true functionality as well as its role in OS.&lt;/p&gt;

&lt;p&gt;liked the post? &lt;br&gt;
&lt;a href="https://ko-fi.com/I2I639WWJ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKanlt08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>tutorial</category>
      <category>os</category>
      <category>windows</category>
    </item>
    <item>
      <title>The Importance Of Testing And How To Write Tests With React-Testing-Library</title>
      <author>Nathan Rymarz</author>
      <pubDate>Tue, 15 Jun 2021 02:16:51 +0000</pubDate>
      <link>https://dev.to/nrymarz/the-importance-of-testing-and-how-to-write-tests-with-react-testing-library-42c9</link>
      <guid>https://dev.to/nrymarz/the-importance-of-testing-and-how-to-write-tests-with-react-testing-library-42c9</guid>
      <description>&lt;p&gt;In my time at Flatiron, we used tests as guidelines for apps that we were building but we never learned to write our own. However, as part of a coding exercise for a company I had applied to, I was required to build a web application which included unit testing. This led to me learning about react-test-library, mocking functions like fetch, and the overall importance of testing.&lt;/p&gt;

&lt;p&gt;In larger applications, writing tests is vital to save time because manually testing every function of an app to ensure nothing is broken could take extremely long and is prone to human error. And more than that, tests also act as documentation. For someone who is new to a codebase, reading the tests can help them get caught up with which parts of a application are responsible for which features and how they are expected to work.  &lt;/p&gt;

&lt;p&gt;To start writing tests in a React app, we create a file with the .test.js extension. Inside our test file we need to import a couple things.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/jest-dom/extend-expect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The render method allows us to test a certain component by rendering it in a virtual DOM. After rendering it we can write an expect statement. For instance...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toThrowError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above 2 lines create a DOM with the component App rendered inside it and expects that the app should throw no errors. However, to be able to use these lines to really test your app, we need to wrap them inside a test method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App renders without errors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toThrowError&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The test function takes 2 parameters. The First one being a string that describes the test, and the second being a callback function that runs the test.&lt;/p&gt;

&lt;p&gt;Now, if you used create-react-app to build your React application, you will be able to run this test by typing 'npm run test' in the console.&lt;/p&gt;

&lt;p&gt;We can also write tests that simulate user actions with the fireEvent method that we imported earlier. FireEvent is an object of functions. So to make use of fireEvent we dot notation to call the event that we want to simulate. For example...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, we use fireEvent.click to simulate a user clicking on a button.&lt;/p&gt;

&lt;p&gt;Lastly, a common scenario you might face is writing tests for a component which fetches external data. To do this we first need to do a few things.&lt;/p&gt;

&lt;p&gt;We need to to write our own version of the fetch method. This is commonly called creating a "mock." Here is the code I wrote to mock fetch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;more data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our mock fetch will return some JSON that you can specify. The nice thing here is that we aren't actually making any http requests so we always know how our fetch will respond. &lt;/p&gt;

&lt;p&gt;Furthermore, in addition to importing fireEvent and render, we also need to import 'act' and 'screen.'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;act&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'act' will help us with writing async functions to use our mock fetch with and 'screen' will be what we use to access our virtual DOM. &lt;/p&gt;

&lt;p&gt;Here is an example of a test that uses all of these and expects our JSON data to be defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App fetches some JSON&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;act&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rendered-data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderedData&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeDefined&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this test to work our App component needs to be rendering the JSON data and give that rendered data a test-id of 'rendered-data.' Also notice that we use the async and await keywords because our function has to be asynchronous since we have to wait for our fetch to return our data before we assign renderedData.&lt;/p&gt;

&lt;p&gt;In conclusion, there are many more things to know about writing tests but I hope that reading this gives you a headstart into writing your own tests for your personal projects. I believe having experience writing tests may help you stand out to an employer and get that foot in the door as a new professional programmer.&lt;/p&gt;

</description>
      <category>react</category>
      <category>testing</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>searchBar</title>
      <author>4-in-1 Telecommunications</author>
      <pubDate>Tue, 15 Jun 2021 01:57:12 +0000</pubDate>
      <link>https://dev.to/tookooltech/searchbar-107j</link>
      <guid>https://dev.to/tookooltech/searchbar-107j</guid>
      <description>&lt;p&gt;SearchBar is a swiftui demo applications.&lt;/p&gt;

</description>
      <category>swift</category>
      <category>swiftui</category>
    </item>
    <item>
      <title>Como publicar seu primeiro package TS e automatizar com Github Actions</title>
      <author>Thiago Moraes</author>
      <pubDate>Tue, 15 Jun 2021 01:30:25 +0000</pubDate>
      <link>https://dev.to/thiagomr/como-publicar-seu-primeiro-package-ts-e-automatizar-com-github-actions-2p4m</link>
      <guid>https://dev.to/thiagomr/como-publicar-seu-primeiro-package-ts-e-automatizar-com-github-actions-2p4m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução
&lt;/h2&gt;

&lt;p&gt;Nesse artigo vou abordar a criação e publicação de um package escrito em Typescript para o NPM. A minha principal motivação é escrever algo que seja simples mas não deixe de levar em consideração fatores importantes, como versionamento, atualização, testes e automatização. O que será abordado:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Criar um package em TS&lt;/li&gt;
&lt;li&gt;Boas práticas de teste pre release&lt;/li&gt;
&lt;li&gt;Publicar um package público no npm&lt;/li&gt;
&lt;li&gt;Gerenciar atualizações&lt;/li&gt;
&lt;li&gt;Noções de versionamento&lt;/li&gt;
&lt;li&gt;Automatizar a publicação com github actions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pr%C3%A9requisitos"&gt;
  &lt;/a&gt;
  Pré-requisitos
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Criar uma conta no &lt;a href="https://github.com/join"&gt;Github&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Criar uma conta no &lt;a href="https://www.npmjs.com/signup"&gt;NPM&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#configurando-o-ambiente-para-o-package"&gt;
  &lt;/a&gt;
  Configurando o ambiente para o package
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#criando-o-reposit%C3%B3rio"&gt;
  &lt;/a&gt;
  Criando o repositório
&lt;/h3&gt;

&lt;p&gt;Nosso package vai se chamar math-ops e será responsável por fazer operações matemáticas básicas. Sendo assim, vamos criar um novo repositório com o nome escolhido:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rq7gpVCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3euz259a1uu7ynxddm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rq7gpVCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3euz259a1uu7ynxddm4.png" alt="Screenshot from 2021-06-13 19-07-03"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inicializando-o-reposit%C3%B3rio"&gt;
  &lt;/a&gt;
  Inicializando o repositório
&lt;/h3&gt;

&lt;p&gt;Vamos criar um novo diretório e acessá-lo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;math-ops &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;math-ops
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em seguida vamos configurar o repostório git e enviar o primeiro commit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"# math-ops"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; README.md
git init
git add README.md
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"first commit"&lt;/span&gt;
git branch &lt;span class="nt"&gt;-M&lt;/span&gt; main
git remote add origin git@github.com:thiagomr/math-ops.git
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configurando-o-package"&gt;
  &lt;/a&gt;
  Configurando o package
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#inicializando-as-configura%C3%A7%C3%B5es-do-npm"&gt;
  &lt;/a&gt;
  Inicializando as configurações do NPM
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como resultado deste comando teremos a seguinte saída:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//package.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@thiagomr/math-ops"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"repository"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git+https://github.com/thiagomr/math-ops.git"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Thiago Moraes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"bugs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/thiagomr/math-ops/issues"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/thiagomr/math-ops#readme"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nessa etapa é importante notar que definimos o nome do package (você deve mudar de acordo com o seu nome de usuário ou nome do package que você desejar), que será utilizado para instalar o mesmo. Também foi definida a versão 0.1.0, seguindo os padrões de &lt;strong&gt;Semantic Version&lt;/strong&gt;. Este é um padrão que nos permite incrementar a versão de acordo com o tipo da atualização. Você pode se aprofundar sobre o assunto &lt;a href="https://docs.npmjs.com/about-semantic-versioning"&gt;aqui&lt;/a&gt;. Vamos considerar que estamos criando uma release não oficial, ou seja, anterior à versão 1.0.0. É interessante também perceber que como ja temos o git configurado nesse diretório, o npm automaticamente sugere o preenchimento das configurações de url e homepage do mesmo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instalando-as-depend%C3%AAncias"&gt;
  &lt;/a&gt;
  Instalando as dependências
&lt;/h3&gt;

&lt;p&gt;Em seguida vamos instalar as dependências que utilizaremos no projeto, que são basicamente o Typescript e o Jest (e alguns auxiliares para ambos):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;typescript jest @types/jest ts-jest &lt;span class="nt"&gt;--save&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos adicionar o arquivo &lt;code&gt;tsconfig.json&lt;/code&gt; com as configurações que usaremos para compilar o projeto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//tsconfig.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"commonjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sourceMap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./lib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rootDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"declaration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"src"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"exclude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"**/*.spec.ts"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em seguida, iremos adicionar alguns scripts para fazer o build do projeto e uma configuração bem simples para o &lt;code&gt;Jest&lt;/code&gt;, ferramenta que usaremos para criar testes para as funcionalidades. Nosso arquivo com as alterações ficará da seguinte forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//package.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@thiagomr/math-ops"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A package to make basic math operations"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lib/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"types"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lib/index.d.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"clean"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rimraf lib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run clean &amp;amp;&amp;amp; tsc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prepublish"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run test &amp;amp;&amp;amp; npm run build"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Thiago Moraes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"repository"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git+https://github.com/thiagomr/math-ops.git"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"bugs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/thiagomr/math-ops/issues"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/thiagomr/math-ops#readme"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"preset"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ts-jest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"testEnvironment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"coveragePathIgnorePatterns"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"/node_modules/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"lib"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"lib/**/*"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^26.0.23"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^27.0.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ts-jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^27.0.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.3.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Algumas explicações mais detalhadas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"main": "lib/index.js",&lt;/code&gt; Será o arquivo que vai expor a API pública do nosso pacote.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"types": "lib/index.d.ts",&lt;/code&gt; Indica a declaração de tipos do TS, gerado automáticamente de acordo com as nossas configurações de compilação feitas anteriormente.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"jest": {...}&lt;/code&gt; Configuração para que o Jest funcione usando TS e indicação de arquivos a serem ignorados.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"files": {...}&lt;/code&gt; Arquivos que desejamos incluir no nosso pacote.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"prepublish"&lt;/code&gt; Executa um script antes de publicar o package. Neste caso vamos rodar os testes unitários.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"build"&lt;/code&gt; Faz a compilação do projeto. De maneira bem resumida, seria o processo de typechecking e transpilação do código TS para JS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para finalizar essa etapa, vamos criar um arquivo &lt;code&gt;.gitignore&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//.gitignore&lt;/span&gt;

&lt;span class="nx"&gt;node_modules&lt;/span&gt;
&lt;span class="nx"&gt;lib&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E então vamos enviar toda a configuração para o repositório:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"add dependecies"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#criando-a-primeira-funcionalidade"&gt;
  &lt;/a&gt;
  Criando a primeira funcionalidade
&lt;/h2&gt;

&lt;p&gt;Agora vamos adicionar o arquivo com a primeira funcionalidade, que irá retornar a soma entre dois números:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/sum.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;secondNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos criar também um arquivo de entrada para exportar a API  pública do nosso package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./sum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testando-o-package"&gt;
  &lt;/a&gt;
  Testando o package
&lt;/h2&gt;

&lt;p&gt;Vamos escrever nosso primeiro teste untário para a funcionalidade de &lt;code&gt;sum&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/sum.spec.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./sum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return a sum of two numbers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rodando os testes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora que já temos nosso primeiro teste unitário, vamos testar o uso real do package. Nós vamos utilizar o comando &lt;code&gt;npm link&lt;/code&gt;. Isso fará com que o npm crie uma referência local para esse projeto, podendo ser utilizado de forma direta em outros projetos. É uma forma de testar seu package no ambiente de desenvolvimento sem precisar publicá-lo várias vezes.&lt;/p&gt;

&lt;p&gt;O primeiro comando será executado no diretório do package e o segundo em um novo diretório para testes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# math-ops&lt;/span&gt;
npm &lt;span class="nb"&gt;link&lt;/span&gt;

&lt;span class="c"&gt;# testdir&lt;/span&gt;
npm &lt;span class="nb"&gt;link&lt;/span&gt; @thiagomr/math-ops
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No diretório de testes, vamos criar um arquivo que importa e utiliza a funcionalidade &lt;code&gt;sum&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// testdir/index.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@thiagomr/math-ops&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// sum is 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`sum is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para finalizar, vamos atualizar nosso repositório com as novas mudanças:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"add sum feature"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#publicando-no-npm-registry"&gt;
  &lt;/a&gt;
  Publicando no NPM registry
&lt;/h2&gt;

&lt;p&gt;Agora que já temos nosso pacote funcional e testado localmente, vamos para a fase de publicação. Vamos adicionar um arquivo .npmignore que vai excluir os arquivos desnecessários, enviando apenas o essencial e diminuindo o tamanho do package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//.npmignore&lt;/span&gt;

&lt;span class="nx"&gt;src&lt;/span&gt;
&lt;span class="nx"&gt;node_modules&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Iremos fazer o login no npm com a conta desejada:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Por padrão o versionamento do NPM utiliza o sistema de tags do GIT para indicar a publicação de novas versões. É importante manter o versionamento do NPM e GIT sincronizados, mas vale ressaltar que não há nenhuma regra que faça uma ligação entre as duas coisas. Existem alguns packages que facilitam o gerenciamento de ambos, mas como a intenção aqui é mostrar a funcionalidade básica e o mais pura possível, não utilizaremos nenhuma ferramenta adicional.&lt;/p&gt;

&lt;p&gt;Vamos atualizar o repositório com a tag de versão incial e em seguida publicar no npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git tag v0.1.0
git push &lt;span class="nt"&gt;--tags&lt;/span&gt;
npm publish &lt;span class="nt"&gt;--access&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;public
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora já temos nosso pacote publicado e disponível para instalação (O meu está em uma versão um pouco a frente pois fiz alguns testes para o artigo):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LAItngAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrjr9scufv5oc882s0d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LAItngAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrjr9scufv5oc882s0d2.png" alt="Screenshot from 2021-06-14 20-51-47"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adicionando-novas-funcionalidades"&gt;
  &lt;/a&gt;
  Adicionando novas funcionalidades
&lt;/h2&gt;

&lt;p&gt;Nessa etapa vamos adicionar uma nova feature. Isso vai reforçar os conceitos aplicados, trazendo familiaridade com o processo. Vamos adicionar uma funcionalidade que retorna o resultado da multiplicação entre dois números &lt;code&gt;index.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/times.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;secondNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;times&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./sum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./times&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seguindo o processo anterior, vamos escrever um teste unitário para a nova funcionalidade:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/times.spec.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./times&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return the multiplication of two numbers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos atualizar o repositório e publicar a nova versão:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"add times feature"&lt;/span&gt;
npm version minor
git push &lt;span class="nt"&gt;--tags&lt;/span&gt;
npm publish &lt;span class="nt"&gt;--access&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;public
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora você poderá o ver o package atualizado no NPM registry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatizando-a-publica%C3%A7%C3%A3o-com-github-actions"&gt;
  &lt;/a&gt;
  Automatizando a publicação com Github Actions
&lt;/h2&gt;

&lt;p&gt;Agora que já vimos como fazer todo o processo manualmente, vamos automatizar a publicação utilizando Github Actions.&lt;br&gt;
Vamos criar um token no NPM &lt;a href="https://docs.npmjs.com/creating-and-viewing-access-tokens"&gt;aqui&lt;/a&gt;, para que seja possível fazer a publicação através do Github.&lt;br&gt;
Vamos inserir nosso token como uma variável de ambiente do GIT, acessando o repostório e em seguida selecionado as opçoes &lt;code&gt;Settings &amp;gt; Secrets &amp;gt; New Repository Secret&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L60Ll_-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5g4gj966vmsxaywlan3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L60Ll_-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5g4gj966vmsxaywlan3s.png" alt="Screenshot from 2021-06-14 20-58-56"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Em seguida vamos criar o arquivo de configuração do pipeline para que seja executado sempre que ouver uma alteração na branch main e no arquivo &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/publish.yml&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;package.json'&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;publish&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JS-DevTools/npm-publish@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.NPM_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para testar o pipeline, nós criaremos a última funcionalidade ao nosso package, capaz de subtrair dois números:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstNumber&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;secondNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;subtract&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos novamente atualizar a entrada do package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./sum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./times&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./subtract&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assim como nos passos anteriores, vamos criar um teste unitário para o mesmo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/subtract.spec.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./subtract&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return the subtraction of two numbers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos enviar nossas alterações para o repositório e atualizar a versão do nosso package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"add subtract feature"&lt;/span&gt;
npm version minor
git push &lt;span class="nt"&gt;--tags&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se a nossa configuração estiver correta e tudo ocorrer bem, podemos verificar o pipeline no Github executado com sucesso e a nova versão publicada no NPM:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fCLWEfOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/moumenbtxhpe7lbvhfhy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fCLWEfOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/moumenbtxhpe7lbvhfhy.png" alt="Screenshot from 2021-06-14 21-04-51"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EGowOe3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28774hsw4b3371yzdgrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGowOe3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28774hsw4b3371yzdgrg.png" alt="Screenshot from 2021-06-14 21-05-12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos adicionar um exemplo de uso do package que também estará no &lt;code&gt;README.md&lt;/code&gt; do repositório:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// Install
npm &lt;span class="nb"&gt;install&lt;/span&gt; @thiagomr/math-ops
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@thiagomr/math-ops&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//6&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Isso é tudo pessoal. Aqui está o &lt;a href="https://github.com/thiagomr/math-ops"&gt;link do repistório&lt;/a&gt; com todo o código utilizado. Espero que tenha ficado claro e que de alguma forma possa ajudar vocês a publicarem seus próprios packages. Gostaria de ouvir feedbacks, opiniões, sugestões e o que mais desejarem. Me sigam no &lt;a href="https://twitter.com/thiagodmor"&gt;Twitter&lt;/a&gt; para mais novidades. Grande abraço e até a próxima!&lt;/p&gt;

</description>
      <category>node</category>
      <category>github</category>
      <category>tutorial</category>
      <category>npm</category>
    </item>
    <item>
      <title>Que es Git Flow y porque tenemos que aprenderlo</title>
      <author>Axel Valdez</author>
      <pubDate>Tue, 15 Jun 2021 00:37:08 +0000</pubDate>
      <link>https://dev.to/axelvaldez13/que-es-git-flow-y-porque-tenemos-que-de-aprenderlo-290f</link>
      <guid>https://dev.to/axelvaldez13/que-es-git-flow-y-porque-tenemos-que-de-aprenderlo-290f</guid>
      <description>&lt;p&gt;Todos damos por entendido que es git y, para quienes no lo saben, esto sirve para hacer un control de versionado sobre tu código. Escribiéndolo así a lo criollo: sirve para poder trabajar código de manera mas eficiente donde lo aloja una repo y de ahí varios desarrolladores clonan tal repo y lo modifican a su gusto o semejanza. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: pido disculpas por la foto que elegí de portada, busque una foto que haya sacado con ramas y encontré esta de un viaje a Iguazú. Para la próxima espero poder encontrar una adecuada.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#los-comandos-mas-reconocibles-que-tenemos-en-git-son"&gt;
  &lt;/a&gt;
  Los comandos mas reconocibles que tenemos en git son:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Git&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;span class="c1"&gt;// Para iniciar entorno git&lt;/span&gt;

&lt;span class="nx"&gt;Git&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;
&lt;span class="c1"&gt;// Para saber el status de nuestra version&lt;/span&gt;

&lt;span class="nx"&gt;Git&lt;/span&gt; &lt;span class="nx"&gt;pull&lt;/span&gt;
&lt;span class="c1"&gt;// Para actualizar nuestra rama con nuestra ultima version&lt;/span&gt;

&lt;span class="nx"&gt;Git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt;
&lt;span class="c1"&gt;// Para clonar un repositorio&lt;/span&gt;

&lt;span class="nx"&gt;Git&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt;
&lt;span class="c1"&gt;// Para mandar nuestra version a la rama que queremos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pasemos-a-gitflow"&gt;
  &lt;/a&gt;
  Pasemos a Gitflow
&lt;/h2&gt;

&lt;p&gt;Gitflow es un flujo de trabajo que trabaja con las metodologías ágiles y se compone de diferentes tipos de ramas: la master y la dev que son las mas conocidas por todo el mundo de desarrollo pero a esto le agregamos hotfix y feature. Pasemos a explicar todo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jKeCkXJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77s0bt9x8sb41trniix6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jKeCkXJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77s0bt9x8sb41trniix6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Master&lt;/strong&gt;&lt;br&gt;
Acá ya es producción, todo lo que pasa acá lo ve el usuario final. Hablándolo en criollo: es la pagina final, fin de la historia&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dev&lt;/strong&gt;&lt;br&gt;
Todo lo que nosotros vemos y probamos antes de mandarnos de lleno a producción. Si primero nos tenemos que mandar un moco, el primer lugar va a ser en desarrollo. Cuando este todo funcional y sin desperfectos, lo mandamos a prod. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCkuFBy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwocseo5euxk54mnstz6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCkuFBy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwocseo5euxk54mnstz6.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;br&gt;
Esta rama nos sirve para crear una nueva función o feature a nuestro desarrollo para posteriormente mandar un merge request a nuestra rama dev. En simples palabras, creo algo en una rama llamada feature y lo mando a dev para ver si se rompe todo o si funciona bien.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hotfix&lt;/strong&gt;&lt;br&gt;
Esta rama es más que nada para arreglar algo rápido, no es tan complejo y el fix es mas que nada para salir directo a producción sin pasar por dev. Por ejemplo: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;te olvidaste de algún error de ortografía? haces un hotfix, lo fixeas y ya salís a producción.&lt;/li&gt;
&lt;li&gt;el color que pusiste no es el que esta en el design system? creas un hotfix, lo arreglas y lo mandas a prod.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tal como lo dice la palabra, es un arreglo en caliente. Si entienden el chiste de arreglos en producción, van a saber qué viene de esta palabra. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pasos-para-crear-un-entorno-con-gitflow"&gt;
  &lt;/a&gt;
  Pasos para crear un entorno con gitflow
&lt;/h2&gt;

&lt;p&gt;Primero tienen que iniciar gitflow y nombran las ramas a su preferencia.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;span class="c1"&gt;// para iniciar gitflow a tu repo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En el primero van a llamar a la rama master, que en este caso, seria producción. Dependiendo donde sea su repo, posiblemente sea main o master. &lt;strong&gt;En github aparece como main&lt;/strong&gt; así que vamos a escribir en esta opción como &lt;strong&gt;main&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UtBNISfI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i7nrs9zznvjhxp9eo7u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UtBNISfI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i7nrs9zznvjhxp9eo7u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En el segundo paso nos va a pedir como se va a llamar la rama de desarrollo así que vamos a nombrarla como dev&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uOR_c4af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3pqiozl57zratyuzjv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOR_c4af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3pqiozl57zratyuzjv2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y por ultimo dejamos tal cual como están las siguientes ramas que serian feature, release, hotfix, y demás. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j0_KeP7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1fjowpdpychiap55l8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j0_KeP7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1fjowpdpychiap55l8r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#los-pasos-para-crear-una-nueva-rama-tanto-en-hotfix-como-en-feature-son-los-siguientes"&gt;
  &lt;/a&gt;
  Los pasos para crear una nueva rama tanto en hotfix como en feature son los siguientes:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt; &lt;span class="nx"&gt;feature&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nombre del branch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// para crear una rama en feature&lt;/span&gt;

&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt; &lt;span class="nx"&gt;hotfix&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nombre del branch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// para crear una rama en hotfix&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Eso es todo, happy coding✨✨&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>gitflow</category>
      <category>gitlab</category>
    </item>
    <item>
      <title>A Command Line Key-Value Data Store using the Rust Programming Language.</title>
      <author>John Idogun</author>
      <pubDate>Tue, 15 Jun 2021 00:24:08 +0000</pubDate>
      <link>https://dev.to/sirneij/a-command-line-key-value-data-store-using-the-rust-programming-language-33b6</link>
      <guid>https://dev.to/sirneij/a-command-line-key-value-data-store-using-the-rust-programming-language-33b6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#prelude"&gt;
  &lt;/a&gt;
  Prelude
&lt;/h2&gt;

&lt;p&gt;Rust is an imperative, super fast, and type-safe programming language that empowers you — a Software Engineer — "to reach farther, to program with confidence in a wider variety of domains than you did before." No wonder it has consistently maintained its deserved spot &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved"&gt;as the most loved programming language&lt;/a&gt; for half a decade!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-are-building"&gt;
  &lt;/a&gt;
  What we are building
&lt;/h2&gt;

&lt;p&gt;Using barebone &lt;code&gt;rust&lt;/code&gt; code, we will be building a simple command line &lt;code&gt;key-value data store&lt;/code&gt; like &lt;code&gt;Redis&lt;/code&gt;. It should take in two command line arguments and assign the first as the &lt;code&gt;key&lt;/code&gt; while the second, &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If installed on your machine, it can be used as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;┌──&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects/rust-kvstore]
└─&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij rust-kvstore]&lt;span class="nv"&gt;$ &lt;/span&gt;rust-kvstore needle haystack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should create a file, aptly named &lt;code&gt;kv.db&lt;/code&gt;. It's content can then be read:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;┌──&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects/rust-kvstore]
└─&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij rust-kvstore]&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;kv.db
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whose output should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;───────┬─────────────────────────────────────────────────────
       │ File: kv.db
───────┼─────────────────────────────────────────────────────
   1   │ needle  haystack
───────┴─────────────────────────────────────────────────────
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if you have the source files, you can simply &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt; it using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;┌──&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects/rust-kvstore]
└─&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij rust-kvstore]&lt;span class="nv"&gt;$ &lt;/span&gt;cargo run needle haystack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is simply for learning sake and no other motive is intended.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#declaimer"&gt;
  &lt;/a&gt;
  DECLAIMER
&lt;/h3&gt;

&lt;p&gt;This example is &lt;a href="https://www.merriam-webster.com/words-at-play/based-on-vs-based-off"&gt;based off of&lt;/a&gt; a &lt;a href="https://www.youtube.com/watch?v=WnWGO-tLtLA"&gt;two-part tutorial anchored by the beloved Ryan Levick&lt;/a&gt;. The only significant additions are: the use of a &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;/code&gt; instead of &lt;code&gt;Iterator&amp;lt;Item = String&amp;gt;&lt;/code&gt;; fixing this bug&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;thread &lt;span class="s1"&gt;'main'&lt;/span&gt; panicked at &lt;span class="s1"&gt;'Corrupt database: Os { code: 2, kind: NotFound, message: "No such file or directory" }'&lt;/span&gt;, src/main.rs:12:40
note: run with &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nv"&gt;RUST_BACKTRACE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="sb"&gt;`&lt;/span&gt; environment variable to display a backtrace
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
 by checking if &lt;code&gt;kv.db&lt;/code&gt; already exists and if not create it using Rust's &lt;a href="https://doc.rust-lang.org/std/path/struct.PathBuf.html"&gt;PathBuf&lt;/a&gt; standard library; using a &lt;a href="https://doc.rust-lang.org/std/fs/struct.File.html"&gt;more efficient&lt;/a&gt; file reader; and using &lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.split_once"&gt;split_once()&lt;/a&gt; instead of &lt;a href="https://doc.rust-lang.org/std/primitive.str.html#method.rsplit"&gt;rsplit()&lt;/a&gt; among others.&lt;br&gt;
&lt;strong&gt;It is highly recommended to &lt;a href="https://www.youtube.com/watch?v=WnWGO-tLtLA"&gt;check out the awesome livestreams on youtube&lt;/a&gt;&lt;/strong&gt;. I must confess, it was a total tear down and dissection.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#assumptions"&gt;
  &lt;/a&gt;
  Assumptions
&lt;/h2&gt;

&lt;p&gt;It is assumed that you have read &lt;a href="https://doc.rust-lang.org/stable/book/"&gt;The Rust book&lt;/a&gt; to some extent or have &lt;a href="https://www.youtube.com/watch?v=WnWGO-tLtLA"&gt;checked out the awesome livestreams on youtube by Ryan Levick&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h3&gt;

&lt;p&gt;As usual, you can get the full version of the source files for this article on &lt;a href="https://github.com/Sirneij/rust-kvstore"&gt;github&lt;/a&gt;. Just clone it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;┌──&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects]
└─&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij Projects]&lt;span class="nv"&gt;$ &lt;/span&gt; git clone https://github.com/Sirneij/rust-kvstore.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and open it in your favourite text editor, mine is &lt;a href="https://code.visualstudio.com/"&gt;vs code&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;┌──&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects]
└─&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij Projects]&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;rust-kvstore &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#proper-implementation"&gt;
  &lt;/a&gt;
  Proper implementation
&lt;/h2&gt;

&lt;p&gt;Going by the assumptions made above, I will only point out some of my inputs. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Taking arguments as vectors:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since our little project wants to get two command line arguments, Rust provides a function &lt;code&gt;args()&lt;/code&gt; which can be found in the &lt;code&gt;std::env&lt;/code&gt; library. This function returns an iterator of the command line arguments. The &lt;code&gt;.collect()&lt;/code&gt; converts the returned iterator into a &lt;code&gt;vector&lt;/code&gt;. Its implementation for this project looks this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should be noted that &lt;code&gt;&amp;amp;args[0]&lt;/code&gt; gives the path to our &lt;code&gt;executable&lt;/code&gt; which in this case should be &lt;code&gt;"target/debug/rust-kvstore"&lt;/code&gt;. You can see what is in &lt;code&gt;args&lt;/code&gt; by printing it to the console using &lt;code&gt;println!()&lt;/code&gt; macro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"target/debug/rust-kvstore"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"needle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"haystack"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you pass &lt;code&gt;needle haystack&lt;/code&gt; as arguments using &lt;code&gt;cargo run&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;┌──&lt;span class="o"&gt;(&lt;/span&gt;sirneij@sirneij&lt;span class="o"&gt;)&lt;/span&gt;-[~/Documents/Projects/rust-kvstore]
└─&lt;span class="nv"&gt;$[&lt;/span&gt;sirneij@sirneij rust-kvstore]&lt;span class="nv"&gt;$ &lt;/span&gt;cargo run needle haystack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we are only concerned with arguments we passed, which starts from &lt;code&gt;&amp;amp;args[1]&lt;/code&gt;, we overlooked &lt;code&gt;&amp;amp;args[0]&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Fixing "No such file or directory" bug:&lt;/strong&gt;
If &lt;code&gt;kv.db&lt;/code&gt; is not manually created or not present at the start of the program's usage, an error of this form will surface:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;thread &lt;span class="s1"&gt;'main'&lt;/span&gt; panicked at &lt;span class="s1"&gt;'Corrupt database: Os { code: 2, kind: NotFound, message: "No such file or directory" }'&lt;/span&gt;, src/main.rs:12:40
note: run with &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nv"&gt;RUST_BACKTRACE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="sb"&gt;`&lt;/span&gt; environment variable to display a backtrace
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To fix this, we need to check whether or not &lt;code&gt;kv.db&lt;/code&gt; has been created. If not create it on the fly. To accomplish this, we use this awesome &lt;code&gt;std::path::PathBuf&lt;/code&gt; library in our "constructor", &lt;code&gt;new()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Database&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;PathBuf&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"kv.db"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="nf"&gt;.exists&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buf_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;BufReader&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;buf_reader&lt;/span&gt;&lt;span class="nf"&gt;.read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"kv.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Using the more efficient &lt;code&gt;std::io::BufReader&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
It can also be seen in the snippet above that instead of using the &lt;code&gt;std::read_to_string&lt;/code&gt;, we opted for the more efficient &lt;code&gt;std::io::BufReader::new(file);&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;split_once() implemented:&lt;/strong&gt;&lt;br&gt;
When Ryan was livestreaming, &lt;code&gt;split_once()&lt;/code&gt; was only available in the &lt;code&gt;nightly&lt;/code&gt; version of Rust so he opted for &lt;code&gt;rsplit()&lt;/code&gt;. However, I think it is stable now and the full implementation is shown as follows:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;     &lt;span class="o"&gt;...&lt;/span&gt;
     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="nf"&gt;.lines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="nf"&gt;.split_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Corrupt database"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Nifty and awesome. To build the project from scratch, &lt;a href="https://www.youtube.com/watch?v=WnWGO-tLtLA"&gt;code along with Ryan Levick.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kindly drop your comments, reactions and suggestions. Make me a better writer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=WnWGO-tLtLA"&gt;Introduction to Rust&lt;/a&gt; - &lt;cite&gt;by Ryan Levick&lt;/cite&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://doc.rust-lang.org/stable/book/"&gt;The Rust Programming Language&lt;/a&gt; - &lt;cite&gt;by Steve Klabnik and Carol Nichols, with contributions from the Rust Community&lt;/cite&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved"&gt;Stack Overflow Developer Survey - Most Loved, Dreaded, and Wanted Languages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#attributions"&gt;
  &lt;/a&gt;
  Attributions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cover image made by &lt;a href="https://www.flaticon.com/authors/flat-icons"&gt;Flat Icons&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rust</category>
      <category>cli</category>
      <category>cargo</category>
      <category>database</category>
    </item>
    <item>
      <title>Dragon game</title>
      <author>Karen Molina</author>
      <pubDate>Tue, 15 Jun 2021 00:17:31 +0000</pubDate>
      <link>https://dev.to/voidrizoma/dragon-game-19e7</link>
      <guid>https://dev.to/voidrizoma/dragon-game-19e7</guid>
      <description>&lt;p&gt;Hello!&lt;br&gt;
Ok, let's start! Now, we can create a new game, you know the same book.&lt;br&gt;
I'm gonna put the code first, then I gotta explain it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import random
import time

def displayIntro():
    print("You are in a land full of dragons, In front of you,")
    print("you see two caves. In one cave, the dragons id friendly")
    print("and will share his treasure with you. The other dragon")
    print("is greedy and hungry, and will eat you in sight")

def chooseCave():
    cave = ""
    while cave != "1" and cave != "2":
        print("Which cave will you go into? (1 or 2)")
        cave = input()

    return cave

def checkCave(chooseCave):
    print("You approach the cave...")
    time.sleep(2)
    print("It is dark and spooky...")
    time.sleep(2)
    print("A large dragon jumps out in front of you! HE open his jaws...")
    print()
    time.sleep(2)

    friendlyCave = random.randint(1,2)

    if chooseCave == str(friendlyCave):
        print("Gives you his treasure!")
    else:
        print("Gobbles you down in one bite!")

playAgain = "yes"

while playAgain == "yes" or playAgain == "y":
    displayIntro()
    caveNumber = chooseCave()
    checkCave(caveNumber)
    print("Do you want to play again? (yes or no)")
    playAgain = input()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this program we use two modules: random and time module. &lt;/p&gt;

&lt;p&gt;Currently we use functions, the function is a way to say what to do and how. In python the functions has been writing with the statement defines or def. So, we have the firts block to code inside a function called displayIntro.&lt;br&gt;
Inside displayIntro function, we write a few print methods to introduce the user inside the game.&lt;/p&gt;

&lt;p&gt;Then we have the chooseCave function. Inside it, we put a empty varibale. Below we can write a while loop. Inside it, we have to compar two options or values: 1 and 2. Those values, are going to be the user options.&lt;/p&gt;

&lt;p&gt;The next function we have is called checkCave. In this function we have to write a twice print methods to start the story. Then, we have to question to user which are the way to choose. Immediately we have to do the comparison between his choose and a random number. This is why we use random module. To choose randomdly two options: number 1 or 2. The options that we return to user, depends that return the random module.&lt;/p&gt;

&lt;p&gt;Finnaly, we have to do another function to know if the user want to continue or left the game.  &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>gamedev</category>
    </item>
  </channel>
</rss>
