<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Welcome Thread - v142</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 15 Sep 2021 16:55:06 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v142-48hd</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v142-48hd</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0MSJVKPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/OBCnCi5hN4eJpQzxzC/giphy.gif%3Fcid%3Decf05e47yf218azv4b9sk1qtp5zyyfhkxnh5p2l5wguqoivy%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0MSJVKPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/OBCnCi5hN4eJpQzxzC/giphy.gif%3Fcid%3Decf05e47yf218azv4b9sk1qtp5zyyfhkxnh5p2l5wguqoivy%26rid%3Dgiphy.gif%26ct%3Dg" alt="Ahoy animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Listen to S6E6 of DevDiscuss: "VS Code and the Extended VS Code Universe" with Jonathan Carter &amp; Cassidy Williams</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 15 Sep 2021 16:38:27 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-s6e6-of-devdiscuss-vs-code-and-the-extended-vs-code-universe-with-jonathan-carter-cassidy-williams-487f</link>
      <guid>https://dev.to/devteam/listen-to-s6e6-of-devdiscuss-vs-code-and-the-extended-vs-code-universe-with-jonathan-carter-cassidy-williams-487f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#listen-to-devdiscuss-s6e6-right-here-on-on-dev"&gt;
  &lt;/a&gt;
  Listen to DevDiscuss S6E6 right here on on DEV:
&lt;/h2&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s6-e7-vs-code-and-the-extended-vs-code-universe"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E7 - VS Code and the Extended VS Code Universe&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e7-vs-code-and-the-extended-vs-code-universe" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e7-vs-code-and-the-extended-vs-code-universe" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e7-vs-code-and-the-extended-vs-code-universe" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e7-vs-code-and-the-extended-vs-code-universe" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e7-vs-code-and-the-extended-vs-code-universe"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s6-e7-vs-code-and-the-extended-vs-code-universe"&gt;
      &lt;img id="episode-profile-image" alt="S6:E7 - VS Code and the Extended VS Code Universe" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;DevDiscuss is the first original podcast from DEV all about the burning topics that impact all our lives as developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This week, we talk about the wonderful world of VS Code with two amazing guests.&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosts"&gt;
  &lt;/a&gt;
  Hosts:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;
 — Creator of DEV &amp;amp; Co-Founder of Forem&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
 — Lead Software Engineer @ Forem. Nick was the perfect co-host to join us for this episode considering the fact that he recently launched a brand new &lt;a href="https://forem.dev/foremteam/introducing-forem-self-host-246k"&gt;self-hosted Forem&lt;/a&gt; community called &lt;a href="https://community.vscodetips.com/"&gt;VSCodeTips&lt;/a&gt; — a place to discuss and VS Code and swap advice. 
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guests"&gt;
  &lt;/a&gt;
  Guests:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/lostintangent"&gt;@lostintangent&lt;/a&gt;
, Project Manager @ Microsoft who has worked on a bunch of developer tools and services over the last 15 years (e.g. Visual Studio, ASP.NET, browser tools for IE, CodePush). He's passionate about developer productivity and collaboration, and in particular, helping to make it easier to contribute to projects, share ideas amongst your teams, the community, and supporting remote-first cultures.&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/cassidoo"&gt;@cassidoo&lt;/a&gt;
, Principal Developer Experience Engineer @ Netlify who makes developer-friendly content across the internet to help people learn and laugh.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy this week's episode of DevDiscuss! Let us know your thoughts in the comments below — or on Twitter (&lt;a href="https://twitter.com/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCx6_Plf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/3o6ZsXuEB42sv8dDtC/giphy.gif%3Fcid%3Decf05e47gu5m85zwkqp8jhc4qhng9ramjuyq9letbz8aexz8%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCx6_Plf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/3o6ZsXuEB42sv8dDtC/giphy.gif%3Fcid%3Decf05e47gu5m85zwkqp8jhc4qhng9ramjuyq9letbz8aexz8%26rid%3Dgiphy.gif%26ct%3Dg" alt="Spinal Tap Speakers"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s6-e7-vs-code-and-the-extended-vs-code-universe/id1513053883?i=1000535395077"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/0rpFxh66bSOEriU0ytopdc"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzQ3?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjwkvWutIHzAhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s6e7-vs-code-and-the-9yW0lbjYGeH/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=165812442"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season six sponsors: &lt;a href="//cockroachlabs.com/devdiscuss"&gt;CockroachDB&lt;/a&gt; &amp;amp; &lt;a href="https://www.scoutapm.com/devdiscuss"&gt;Scout APM&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Pull Requests Like a PRO: Tips to Make High-Quality Pull Requests</title>
      <author>Navendu Pottekkat</author>
      <pubDate>Wed, 15 Sep 2021 16:28:21 +0000</pubDate>
      <link>https://dev.to/navendu/pull-requests-like-a-pro-tips-to-make-high-quality-pull-requests-2hfk</link>
      <guid>https://dev.to/navendu/pull-requests-like-a-pro-tips-to-make-high-quality-pull-requests-2hfk</guid>
      <description>&lt;p&gt;With Hacktoberfest around the corner, here are some tips to make better Pull Requests for your next Open-Source contribution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a maintainer and a contributor to Open-Source projects these are the things I look for when reviewing and take care of when submitting Pull Requests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a fast read but if you want one even faster, check out &lt;a href="https://twitter.com/sudo_navendu/status/1437456596473303042"&gt;this Twitter thread&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-1-contributing-docs-are-your-best-friends"&gt;
  &lt;/a&gt;
  Tip 1: Contributing Docs are your Best Friends
&lt;/h2&gt;

&lt;p&gt;Most Open-Source projects have a contributing doc(usually a &lt;a href="https://github.com/meshery/meshery/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file at the root of the repo) that contains all the necessary details on how to set up your development environment, coding conventions you have to follow and much more.&lt;/p&gt;

&lt;p&gt;If you are looking to contribute to a project, that should be the next place to look into after the &lt;a href="https://github.com/meshery/meshery#readme"&gt;ReadME&lt;/a&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Mt1sx_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dh3n0tmz2y2gle49ewav.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Mt1sx_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dh3n0tmz2y2gle49ewav.png" alt="A screenshot showing the contributing guide of the Meshery project in GitHub."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Contributing doc from the &lt;a href="https://github.com/meshery/meshery"&gt;Meshery&lt;/a&gt; project&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-2-document-your-prs"&gt;
  &lt;/a&gt;
  Tip 2: Document Your PRs
&lt;/h2&gt;

&lt;p&gt;This is really important. I repeat this is really important.&lt;/p&gt;

&lt;p&gt;You should make the reviewing process as easy as possible and a reviewer should be able to get the context of your PR with a quick glance.&lt;/p&gt;

&lt;p&gt;For this, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write self-documenting code (What is self-documenting code and how can it help? See &lt;a href="https://stackoverflow.com/a/209089/12424846"&gt;this great answer&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use comments liberally in your code&lt;/li&gt;
&lt;li&gt;Write clear commit messages and&lt;/li&gt;
&lt;li&gt;Most importantly, comment what your PR does clearly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As shown below, the PR description shows what issue it fixes, the change made in the PR and the actual new User-Experience.&lt;/p&gt;

&lt;p&gt;This makes the PR very easy to review.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6VeNnKBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqb563b2yjo9nie1rxzi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6VeNnKBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqb563b2yjo9nie1rxzi.png" alt="A screenshot of a pull request description from GitHub showing how to document your PRs."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A Pull Request description example&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-3-use-pull-request-templates"&gt;
  &lt;/a&gt;
  Tip 3: Use Pull Request Templates
&lt;/h2&gt;

&lt;p&gt;Most Open-Source projects will have a Pull Request template to guide newcomers and veterans alike into documenting their PRs properly.&lt;/p&gt;

&lt;p&gt;As you can see below, the PR template has sections where the contributors are expected to fill details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5Hz5SJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knvukchmgvajbzil8390.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5Hz5SJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knvukchmgvajbzil8390.png" alt="A screenshot of a pull request template from Microsoft's Open Service Mesh project."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Pull Request template from the &lt;a href="https://github.com/openservicemesh/osm"&gt;Open Service Mesh&lt;/a&gt; project&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This would make the job of the reviewer much easier as they would be able to easily test it out, ask a domain expert to review and much more.&lt;/p&gt;

&lt;p&gt;These also acts like a checklist that the contributor can tick off. For example: Questions like &lt;em&gt;"Did I write unit tests?", "Did I sign all of my commits?", "Is this a breaking change?"&lt;/em&gt; can be answered as you start filling the template.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-4-make-your-prs-small-and-focused"&gt;
  &lt;/a&gt;
  Tip 4: Make your PRs Small and Focused
&lt;/h2&gt;

&lt;p&gt;Whenever possible, your Pull Requests should do one thing and one thing only.&lt;/p&gt;

&lt;p&gt;The problem with addressing multiple concerns in a single PR is that the reviewer &lt;em&gt;may&lt;/em&gt; not agree with all the changes and this could potentially lead to long discussions.&lt;/p&gt;

&lt;p&gt;So small and focused PRs would reduce the time taken for reviews and would make your PR most likely to get merged.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sjMRtLP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klteluhjfn90k2hfe7to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sjMRtLP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klteluhjfn90k2hfe7to.png" alt="A screenshot showing a pull request in GitHub that focuses on one thing."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;An Example Pull Request with just a single, focused change&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-5-add-tests"&gt;
  &lt;/a&gt;
  Tip 5: Add Tests
&lt;/h2&gt;

&lt;p&gt;If the project you are working on has automated tests, then make sure that you add tests for the code you are adding.&lt;/p&gt;

&lt;p&gt;Not sure if you should write tests? Here is a &lt;strong&gt;bonus tip&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If it can be tested, it should be tested.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tip-6-make-sure-the-automated-tests-pass"&gt;
  &lt;/a&gt;
  Tip 6: Make sure the Automated Tests Pass
&lt;/h2&gt;

&lt;p&gt;Most projects have automated tests in their CI/CD pipelines which run on your Pull Requests.&lt;/p&gt;

&lt;p&gt;These tests are in place to make sure that the code you are adding passes some constraints. These are mostly lint checks, build checks, unit tests and integration tests.&lt;/p&gt;

&lt;p&gt;If these checks are not passing, fix it and make sure all the tests pass before asking for a review.&lt;/p&gt;

&lt;p&gt;Your code is not likely to get merged if these checks fail.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IcRMxLN8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj5w3yqu7v4627wdpeyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IcRMxLN8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj5w3yqu7v4627wdpeyd.png" alt="A screenshot showing a pull request in GitHub that focuses on one thing."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All checks passed!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-7-respond-to-feedback"&gt;
  &lt;/a&gt;
  Tip 7: Respond to Feedback
&lt;/h2&gt;

&lt;p&gt;When you open a Pull Request, you are also opening a discussion on why this change is needed and why your PR is the right way to add that change.&lt;/p&gt;

&lt;p&gt;So, make sure that you respond to reviews, make changes to your PR as suggested by the reviewer and ask for clarification questions if needed.&lt;/p&gt;

&lt;p&gt;This would make sure that you and the reviewer are on the same page and would make the PR reviews much easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Xdv2nWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqkme7w60iijpiv8okv7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Xdv2nWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqkme7w60iijpiv8okv7.png" alt="A screenshot showing a pull request in GitHub that focuses on one thing."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Sometimes discussions can get really long! But these are necessary when you are adding a new feature with breaking changes&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-8-be-patient"&gt;
  &lt;/a&gt;
  Tip 8: Be Patient
&lt;/h2&gt;

&lt;p&gt;Most of the Open-Source maintainers are volunteers. They maintain projects during their free time off from their work.&lt;/p&gt;

&lt;p&gt;So, they may take some time to get to your PR and review it.&lt;/p&gt;

&lt;p&gt;So be patient while they do their thing. Take a break, drink a cup of coffee and watch Naruto.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tip"&gt;
  &lt;/a&gt;
  Bonus Tip:
&lt;/h2&gt;

&lt;p&gt;I will be writing about Contributing to, Building, Scaling and Maintaining Open-Source projects here on the &lt;a href="https://dev.to/navendu"&gt;DEV Community&lt;/a&gt; as well as on &lt;a href="https://twitter.com/sudo_navendu"&gt;Twitter&lt;/a&gt; and on &lt;a href="https://navendu.me/"&gt;my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this last year, I have went from a noob Open-Source contributor to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Building &lt;a href="https://github.com/nsfw-filter/nsfw-filter"&gt;my own project&lt;/a&gt; and making it to the &lt;a href="https://twitter.com/sudo_navendu/status/1298191582101778433"&gt;#1 Trending Repository on GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Maintaining 2 &lt;a href="https://www.cncf.io/"&gt;CNCF&lt;/a&gt; Projects and&lt;/li&gt;
&lt;li&gt;Working &lt;a href="https://github.com/navendu-pottekkat"&gt;full-time&lt;/a&gt; in Open-Source&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would like to share everything I've learned to help as many people as possible who are interested in Open-Source.&lt;/p&gt;

&lt;p&gt;So, follow along and may the source be with you!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>Building a twitter bot with Python to search, retweet, like and reply tweets</title>
      <author>Patricia Dourado</author>
      <pubDate>Wed, 15 Sep 2021 16:26:23 +0000</pubDate>
      <link>https://dev.to/static_pat/building-a-twitter-bot-with-python-to-search-retweet-like-and-reply-tweets-25kj</link>
      <guid>https://dev.to/static_pat/building-a-twitter-bot-with-python-to-search-retweet-like-and-reply-tweets-25kj</guid>
      <description>&lt;p&gt;In this article we gonna build a twitter bot in Python with Tweepy, a very nice library to invoke the Twitter API. You will learn how to retrieve data from Twitter and automatize your tweets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#twitter"&gt;
  &lt;/a&gt;
  Twitter
&lt;/h2&gt;

&lt;p&gt;Around 2009 when I create my first Twitter account I remember Twitter still being a place to complain about life with strangers, tell how much depressive you feel, not sharing your user with your family and so on. You were limited to write in 140 characters without any other type of information attached such as photo (unless you used another place to host to your pictures and post the link on Twitter). Yeah, a lot has changed since those old days and everybody can say Twitter is one of the most  popular and not boring social network on nowadays.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1RDwfwvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4svqbk3k58xeug7uya75.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1RDwfwvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4svqbk3k58xeug7uya75.png" alt="Twitter fail whale"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter is used today for many things, from voting for awards, promoting protests, drawing the world's attention to some catastrophic situation, sharing memes, FAKE NEWS, revealing talent and even reporting crimes in inaccessible or unsafe places, contributing a lot to journalistic work and of the police.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g-A1pjrI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwjlp2o74xlss5cncd7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-A1pjrI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwjlp2o74xlss5cncd7w.png" alt="wtf is Covfefe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As it is a place full of users of different ages, but predominantly young, large companies use twitter for advertising, sales and, of course, answering possible complaints about their products in an automated and 'modern' way, full of memes of the moment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ciLCrsD---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpdgo1y5r0u7wvfeg9wo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciLCrsD---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpdgo1y5r0u7wvfeg9wo.png" alt="Naraze Tedesco"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#badly-programmed-bot"&gt;
  &lt;/a&gt;
  Badly programmed bot
&lt;/h3&gt;

&lt;p&gt;The growing use of bots is notable from well-programmed ones to big flops. As in the case of the Brazilian company Decolar, which responded to the user by referring to him/her through his 'nickname', which was a loophole for people to put insults in his name and make the company's official profile tweet the insult when responding, the user changed its nickname and printed the company tweet like: "wow free insults";&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3G_qxX0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71y1wlgkknws85vaaf3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3G_qxX0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71y1wlgkknws85vaaf3a.png" alt="Decolar Bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Translated tweet: &lt;em&gt;"Ok, selena gomez is not an artist.. Our team is working to offer your all the possible alternatives."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Something very important for the visibility of your brand, profile, account is engagement and to have it you must keep your account always active. You can do this manually or rest with the use of a Twitter bot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#twitter-api"&gt;
  &lt;/a&gt;
  Twitter API
&lt;/h2&gt;

&lt;p&gt;With this API you are able to retrieve, analyze data, write tweets programmatically.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Twitter API provides the tools you need to contribute to, engage with, and analyze the conversation happening on Twitter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To start our bot, first of all you need to create (if you don't have one) a twitter account and then you must apply for a developer account to have your user case approved. &lt;/p&gt;

&lt;p&gt;After that you have to create a Twitter Application through &lt;a href="https://apps.twitter.com/app/new"&gt;Twitter API for developers website&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-app"&gt;
  &lt;/a&gt;
  Create an App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n5QPIt56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhshbvmxmza6czxuhvrm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5QPIt56--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhshbvmxmza6czxuhvrm.png" alt="Twitter Developer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#choose-type-of-app"&gt;
  &lt;/a&gt;
  Choose type of app
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O8LZsv8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xz23atxl29awalmg4tp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O8LZsv8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xz23atxl29awalmg4tp.png" alt="Choose Type"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've chose the type hobbyist for the bot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lOY-NXj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3rissyxhbk3g17b3k2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lOY-NXj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3rissyxhbk3g17b3k2n.png" alt="Making a bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h5&gt;

&lt;p&gt;Submit a standard application for access to the Twitter developer plataform&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bco-PLlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvmpnhie3mzc5go4ml76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bco-PLlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvmpnhie3mzc5go4ml76.png" alt="Standard App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#describe-your-app"&gt;
  &lt;/a&gt;
  Describe your app
&lt;/h5&gt;

&lt;p&gt;Describe how you will use Twitter data and/or APIs. For example, you can say: &lt;br&gt;
&lt;strong&gt;&lt;em&gt;"I will dedicate this bot to test the auto replying to tag and comments, auto retweet and like status with the name of Pelé."&lt;/em&gt;&lt;/strong&gt; or whatever you like to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIPziZpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7o3kghz557c4oai16yx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIPziZpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7o3kghz557c4oai16yx.png" alt="Describe your App"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#submit-your-application"&gt;
  &lt;/a&gt;
  Submit your application
&lt;/h5&gt;

&lt;p&gt;Accept the terms and submit your application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sAeAvLJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2w53jbzgep9uulbr1l8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sAeAvLJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2w53jbzgep9uulbr1l8d.png" alt="Accept terms"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#verify-your-email"&gt;
  &lt;/a&gt;
  Verify your email
&lt;/h5&gt;

&lt;p&gt;You need to verify your email and confirm to complete your application, after that your application will be reviewed. You will have to wait until there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2wBHrvHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j1g5e07nixgx9z5fids.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2wBHrvHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j1g5e07nixgx9z5fids.png" alt="app-received"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When your application is approved you will be provided with a set of credentials that you will use to authenticate all requests to the API. Those are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;API Key&lt;/strong&gt; - This is essentially a username, and allows you to make a request on behalf of your App.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;API Key Secret&lt;/strong&gt; - This is a password, and allows you to make a request on behalf of your App.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Access Token&lt;/strong&gt; - This token represents the Twitter account that owns the App, and allows you to make a request on behalf of that Twitter account. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Access Token Secret&lt;/strong&gt; - This token also represents the Twitter account that owns the App, and allows you to make a request on behalf of that Twitter account. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bearer Token&lt;/strong&gt; - This token represents your App and enables you to authenticate requests that require &lt;a href="https://developer.twitter.com/en/docs/authentication/oauth-2-0"&gt;OAuth 2.0 Bearer Token&lt;/a&gt; authentication. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are not going to use the Bearer Token on this tutorial.&lt;/p&gt;

&lt;p&gt;With Twitter API we will have access to a lot of endpoints and public user's information such as:  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tweets, Retweets, Likes, Trends, Media&lt;/strong&gt;. As we will also have the right to tweet, retweet, like, send direct messages.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rate-limit"&gt;
  &lt;/a&gt;
  Rate Limit
&lt;/h3&gt;

&lt;p&gt;Twitter API limits the number of requests a developer can make during a period, so you will have to take this in consideration when writing your bot. If you pass this limit your Twitter bot will be blocked during a time or even stopped to run.&lt;/p&gt;

&lt;p&gt;For example, Twitter API allows you to make &lt;strong&gt;2400 tweet updates&lt;/strong&gt; by day in intervals of 30 minutes in your application (&lt;strong&gt;Retweets are also counted as tweets&lt;/strong&gt;). Also &lt;strong&gt;1000 messages of direct message&lt;/strong&gt;. Follow limit of &lt;strong&gt;400 follows&lt;/strong&gt; by day and etc.  &lt;/p&gt;

&lt;p&gt;You can check all the types of Rate Limit here: &lt;a href="https://developer.twitter.com/en/docs/rate-limits"&gt;Twitter API rate limit&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tweepy"&gt;
  &lt;/a&gt;
  Tweepy
&lt;/h2&gt;

&lt;p&gt;We are going to use the Python library Tweepy to automatize our twitter bot. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The API class provides access to the entire twitter RESTful API methods. Each method can accept various parameters and return responses. For more information about these methods please refer to API Reference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;You can install Tweepy through the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install tweepy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Particularly I use virtual environment to install my python libraries and packages not globally, if you don't know how to use it go back to the beginning of the last article here: &lt;a href="https://patriciadourado.com/frompat/jwt-login-flask/"&gt;JWT Login Flask&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dotenv"&gt;
  &lt;/a&gt;
  dotenv
&lt;/h2&gt;

&lt;p&gt;To not expose our credentials when eventually pushing to a public repository I recommend the use of the module &lt;a href="https://www.npmjs.com/package/dotenv"&gt;dotenv&lt;/a&gt; and our sensitive data in a .env file like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CONSUMER_KEY = 'YOUR API KEY'
CONSUMER_SECRET = 'YOUR SECRET KEY'
KEY = 'YOUR ACCESS TOKEN'
SECRET = 'YOUR SECRET'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env. Storing configuration in the environment separate from code is based on The Twelve-Factor App methodology.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;You can install dotenv through pip with the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install python-dotenv&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-tweet"&gt;
  &lt;/a&gt;
  First Tweet!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Import libraries and load env variables&lt;/strong&gt; - First of all we are going to import all the necessary libraries we will use:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Load env variables&lt;/strong&gt; - Then we will load the environment variables from .env file and set the python variables:
load_dotenv()  # take environment variables from .env:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# API key
&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'CONSUMER_KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# API secret key
&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'CONSUMER_SECRET'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Access token
&lt;/span&gt;&lt;span class="n"&gt;KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Access token secret
&lt;/span&gt;&lt;span class="n"&gt;SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'SECRET'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Link credentials to Login&lt;/strong&gt; - Log with the credentials from our Twitter Application with the OAuth. Twitter requires all requests to use OAuth for authentication:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Create object API&lt;/strong&gt; - We will create a Tweepy API. The API class provides access to the entire twitter RESTful API methods. Each method can accept various parameters and return responses:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Update status&lt;/strong&gt; - We are going to update our status and tweet our first tweet from the bot!
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'bot tweeting live!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#twitter-bot-is-live"&gt;
  &lt;/a&gt;
  Twitter bot is live!
&lt;/h3&gt;

&lt;p&gt;Run the code below to tweet our first tweet with bot!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-botpy-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;bot.py&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# take environment variables from .env.
&lt;/span&gt;
&lt;span class="c1"&gt;# API key
&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'CONSUMER_KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# API secret key
&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'CONSUMER_SECRET'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Access token
&lt;/span&gt;&lt;span class="n"&gt;KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Access token secret
&lt;/span&gt;&lt;span class="n"&gt;SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'SECRET'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create API object
&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# First tweet from your bot account!
&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'bot tweeting live!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#avoid-repeated-tweets"&gt;
  &lt;/a&gt;
  Avoid repeated Tweets
&lt;/h3&gt;

&lt;p&gt;To avoid reply or read the same tweets twice or more we are going to use a file with the ID of the last seen tweets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;FILE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'last_seen.txt'&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_last_seen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FILE_NAME&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;file_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FILE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;last_seen_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="n"&gt;file_read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;last_seen_id&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_last_seen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FILE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_seen_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;file_write&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FILE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;file_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_seen_id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;file_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#replying-tweets"&gt;
  &lt;/a&gt;
  Replying Tweets
&lt;/h3&gt;

&lt;p&gt;We are going to use the method &lt;code&gt;api.update_status&lt;/code&gt; again, but now for replying to users with the most recents tweets with the word 'Brazil' with the message: &lt;em&gt;"In brazilian portuguese we don't say foreign we say GRINGO and I think that is beautiful!"&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mentions_timeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_last_seen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FILE_NAME&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;tweet_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'extended'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'brazil'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
      &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"@"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" In brazilian portuguese we don't say foreign we say GRINGO and I think that is beautiful!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;store_last_seen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FILE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To invoke the method just add the following line: &lt;code&gt;reply()&lt;/code&gt; on your python bot.py&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#retweeting-tweets"&gt;
  &lt;/a&gt;
  Retweeting Tweets
&lt;/h3&gt;

&lt;p&gt;This time we are going to retweet the first 25 tweets mentioning the word &lt;em&gt;brazilian&lt;/em&gt;. Note that I used a &lt;code&gt;time.sleep()&lt;/code&gt; of 900 seconds to run the method &lt;code&gt;api.retweet()&lt;/code&gt; because of the rate limit imposed by Twitter API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;retweet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"brazilian"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'extended'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;retweeted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Check if Retweet
&lt;/span&gt;      &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;retweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error on retweet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;retweet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A retweet is considered a POST request, that way in 900 seconds (15 minutes) we will retweet 25 tweets, so in one hour (3600 seconds) we will have retweeted 3600/900 = 4 x 25 tweets = 100 tweets.&lt;/p&gt;

&lt;p&gt;Please, observe the rate limit window, per user and app for POST requests:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWWEkhSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myq831jdvtl47rbjryjn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWWEkhSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myq831jdvtl47rbjryjn.png" alt="Rate Limit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this logic we will have exactly 300 retweets in 3 hours.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#liking-tweets"&gt;
  &lt;/a&gt;
  Liking Tweets
&lt;/h3&gt;

&lt;p&gt;To favorite/like the tweets we can use the method &lt;code&gt;api.create_favorite()&lt;/code&gt; like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;favorite&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"brazilian"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'extended'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;retweeted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Check if Retweet
&lt;/span&gt;      &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_favorite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error on retweet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;favorite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#replying-and-retweeting-tweets"&gt;
  &lt;/a&gt;
  Replying and Retweeting Tweets
&lt;/h3&gt;

&lt;p&gt;If we would like to reply and retweet the same tweet we need to pay attention to not have our bot blocked by spamming, it means if we tweet the same thing in a short period the twitter is going to consider it as a spam. &lt;/p&gt;

&lt;p&gt;To get around this we will add an incremental value of i to differentiate the current reply from the previous one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;retweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"brazilian"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'extended'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;retweeted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Check if Retweet
&lt;/span&gt;      &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"@"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" In brazilian portuguese we don't say foreign we say GRINGO and I think that is beautiful! +"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;retweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error on retweet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;retweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the number of tweets searched to be replied and retweeted changed to 12 due to the rate limit. If you prefer you can reduce the number of tweets that will be replied and retweeted or increase the time in &lt;code&gt;time.sleep()&lt;/code&gt; for call the method;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;Hope you enjoyed this article and can build your own Twitter bot! :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>twitter</category>
      <category>bots</category>
      <category>showdev</category>
    </item>
    <item>
      <title>How to install Figma on Linux</title>
      <author>Anish De</author>
      <pubDate>Wed, 15 Sep 2021 16:08:12 +0000</pubDate>
      <link>https://dev.to/anishde12020/how-to-install-figma-on-linux-127f</link>
      <guid>https://dev.to/anishde12020/how-to-install-figma-on-linux-127f</guid>
      <description>&lt;p&gt;&lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt; is a great UI/UX tool with a quite generous free tier. This means many developers use Figma to prototype their application or website designs (including me). Many of us developers tend to use Linux but that is where a problem arises, the Figma app is not available for Linux!!!&lt;/p&gt;

&lt;p&gt;Now, to be fair, Figma has a web version which is almost exactly what the desktop version is but the desktop version is still preferred by most. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-we-get-the-figma-app-on-linux"&gt;
  &lt;/a&gt;
  How do we get the Figma app on Linux?
&lt;/h1&gt;

&lt;p&gt;Well, a great developer thought of solving this issue by making an unofficial version of Figma for Linux and the best part is that it is open source. See the GitHub Repository &lt;a href="https://github.com/Figma-Linux/figma-linux"&gt;here&lt;/a&gt;. The app is extremely similar to the Windows version of Figma. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-is-the-desktop-app-different-from-the-web-version"&gt;
  &lt;/a&gt;
  How is the desktop app different from the web version?
&lt;/h1&gt;

&lt;p&gt;The desktop app is built on electron (both, the official version for Windows and macOS as well as the unofficial version for Linux). The main advantages are better font support, in-app tabs (which is extremely useful for me), and extension development.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#one-small-problem-which-can-be-fixed"&gt;
  &lt;/a&gt;
  One Small Problem which can be fixed
&lt;/h1&gt;

&lt;p&gt;When you are installing Figma Linux on Ubuntu, you might use the PPA repository way. This way seems to have issues and Figma won't launch. If you ever try to launch it from the terminal, you will see this error -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;figma-linux: error while loading shared libraries: libffmpeg.so: cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what is the fix? &lt;br&gt;
Don't use the PPA!!!&lt;br&gt;
Get the &lt;code&gt;.deb&lt;/code&gt; package from the &lt;a href="https://github.com/Figma-Linux/figma-linux/releases"&gt;releases page&lt;/a&gt;&lt;br&gt;
If you have already downloaded from the PPA, you can simply overwrite it by installing the .deb (It might ask you to downgrade, doing that will also work). We also need to hold it off &lt;code&gt;apt upgrade&lt;/code&gt; or else it will automatically update and cause the issue again.&lt;/p&gt;

&lt;p&gt;To do this run the following command -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-mark hold figma-linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is it!!! The issue is fixed and I hope Figma Linux works well for you. If you have any doubts, you can leave down a comment below. For bugs, submit a GitHub issue &lt;a href="https://github.com/Figma-Linux/figma-linux/issues"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Unlimited JavaScript (or where can I use JavaScript)</title>
      <author>Patrick</author>
      <pubDate>Wed, 15 Sep 2021 15:58:46 +0000</pubDate>
      <link>https://dev.to/patik123/unlimited-javascript-or-where-can-i-use-javascript-3l4c</link>
      <guid>https://dev.to/patik123/unlimited-javascript-or-where-can-i-use-javascript-3l4c</guid>
      <description>&lt;p&gt;JavaScript is a 25-year-old programming language (it appeared in late 1995) as a language for creating interactive websites and web applications. The programming language was created by Netscape.&lt;/p&gt;

&lt;p&gt;In a few years, JavaScript has become a very popular programming language, as it can be used in all areas of computing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web"&gt;
  &lt;/a&gt;
  Web
&lt;/h2&gt;

&lt;p&gt;JavaScript was formerly used on websites. Over time, the language has grown from an ordinary Vanilla JS to a complex and effective framework.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jquery"&gt;
  &lt;/a&gt;
  &lt;a href="https://jquery.com/"&gt;jQuery&lt;/a&gt;
&lt;/h3&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JfvhTkQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pvadocfar02i3lvyj18.png" alt="jQuery logo"&gt;




&lt;/center&gt;


&lt;center&gt;&lt;a href="https://commons.wikimedia.org/wiki/File:Logo_jQuery.svg#/media/File:Logo_jQuery.svg"&gt;Image source&lt;/a&gt;&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript.&lt;/p&gt;


&lt;/blockquote&gt;

&lt;p&gt;Citation from website of &lt;a href="https://jquery.com/"&gt;jQuery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;jQuery is used in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WordPress&lt;/li&gt;
&lt;li&gt;NextCloud &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/jquery/jquery"&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Number of GitHub stars: 55.4k&lt;/p&gt;

&lt;p&gt;Number of forks on GitHub: 20.1k&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular"&gt;
  &lt;/a&gt;
  &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;
&lt;/h2&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4wXLoyVV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tjgzzqxl7iyuy373z32.png" alt="Angular logo"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://angular.io/presskit"&gt;Image source&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;Angular is a platform and framework for building single-page client applications using HTML and TypeScript. Angular is written in TypeScript. It implements core and optional functionality as a set of TypeScript libraries that you import into your applications.&lt;/p&gt;


&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://angular.io/guide/architecture"&gt;Citation from the website of Angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Angular use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/angular/angular"&gt;Github repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Number of GitHub stars: 76.4k&lt;/p&gt;

&lt;p&gt;Number of forks on GitHub: 20k&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h3&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HcZ77-EU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbbgyi88cmahlhfh2o6o.png" alt="React logo"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://www.vhv.rs/viewpic/Thohxhb_reactjs-logo-react-js-transparent-icon-hd-png/"&gt;Image source&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called “components”.&lt;/p&gt;


&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/"&gt;Citation from the website of React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/facebook/react"&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Number of GitHub stars: 175k&lt;/p&gt;

&lt;p&gt;Number of forks on GitHub: 35.2k&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vuejs"&gt;
  &lt;/a&gt;
  &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt;
&lt;/h3&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7t3ABOHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e07oqia8343zdnxxwyvy.png" alt="Vue.js logo"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://positivethinking.tech/wp-content/uploads/2021/01/Logo-Vuejs.png"&gt;Image source&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;Vue.js is a library for building interactive web interfaces. The goal of Vue. js is to provide the benefits of reactive data binding and composable view components with an API that is as simple as possible.  Itself is not a full-blown framework - it is focused on the view layer only.&lt;/p&gt;


&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://vuejs.org/"&gt;Citation from the website of Vue.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vue.js use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spendesk&lt;/li&gt;
&lt;li&gt;Yousign&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/vuejs/vue"&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Number of GitHub stars: 188k&lt;/p&gt;

&lt;p&gt;Number of forks on GitHub: 30.1k&lt;/p&gt;




&lt;p&gt;In 2009, Node.js saw the light of day.&lt;br&gt;
Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser (citation from Wikipedia). Node.js has enabled us to develop desktop, mobile applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desktop"&gt;
  &lt;/a&gt;
  Desktop
&lt;/h2&gt;

&lt;p&gt;JavaScript allows us to develop desktop applications. &lt;/p&gt;

&lt;p&gt;The advantage of such an application is that it can be created easily with knowledge of HTML, CSS and JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#electronjs"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.electronjs.org/"&gt;ElectronJs&lt;/a&gt;
&lt;/h3&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpxVyRtr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0z6ms4cinbxuhfert5d.png" alt="ElectronJS logo"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://commons.wikimedia.org/wiki/File:Electron_Software_Framework_Logo.svg"&gt;Image source&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;If you can build a website, you can build a desktop app. Electron is a framework for creating native applications with web technologies like JavaScript, HTML, and CSS. It takes care of the hard parts so you can focus on the core of your application.&lt;/p&gt;


&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.electronjs.org/"&gt;Citation from ElectronJS website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ElectronJs use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio Code (desktop app)&lt;/li&gt;
&lt;li&gt;InVision (desktop app)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/electron/electron"&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Number of GitHub stars: 96.8k&lt;/p&gt;

&lt;p&gt;Number of forks on GitHub: 12.7k&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#mobile"&gt;
  &lt;/a&gt;
  Mobile
&lt;/h2&gt;

&lt;p&gt;JavaScript can be used to create mobile applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ionic"&gt;
  &lt;/a&gt;
  &lt;a href="https://ionic.io/"&gt;Ionic&lt;/a&gt;
&lt;/h3&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a96fNJQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqv2bq0by57xawiau8gu.png" alt="Ionic logo"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://www.clipartmax.com/png/full/292-2928098_ionic-logo-ionic-framework.png"&gt;Image source&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;Ionic is a powerful HTML5 SDK that helps you build native-feeling mobile apps using web technologies like HTML, CSS, and JavaScript. Ionic is focused mainly on the look and feel, and UI interaction of your app. Ionic currently requires AngularJS in order to work at its full potential.&lt;/p&gt;


&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://ionic.io/"&gt;Citation from the Ionic website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ionic use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BBC&lt;/li&gt;
&lt;li&gt;Southwest Airlines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/ionic-team/ionic-framework"&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Number of GitHub stars: 45.2k&lt;/p&gt;

&lt;p&gt;Number of forks on GitHub: 13.4k&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-native"&gt;
  &lt;/a&gt;
  React Native
&lt;/h3&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1t3SWctl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wx5mdv4n3lxzljzthpg.png" alt="React Native logo"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://codeburst.io/react-native-how-native-have-you-been-9ebb08383474"&gt;Image source&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;React Native is an open-source UI software framework created by Facebook, Inc. It is used to develop applications for Android, Android TV, iOS, macOS, tvOS Web, Windows and UWP by enabling developers to use the React framework along with native platform capabilities. It is also being used to develop virtual reality applications at Oculus.&lt;/p&gt;


&lt;/blockquote&gt;

&lt;p&gt;Citation from &lt;a href="https://en.wikipedia.org/wiki/React_Native"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Native use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook,&lt;/li&gt;
&lt;li&gt;Walmart&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/facebook/react-native"&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Number of GitHub stars: 97.8k&lt;/p&gt;

&lt;p&gt;Number of forks on GitHub: 21.2k&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#artificial-intelligence"&gt;
  &lt;/a&gt;
  Artificial intelligence
&lt;/h2&gt;

&lt;p&gt;JavaScript is not just for desktop, mobile and web applications. It can also be used for machine learning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tensorflowjs"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.tensorflow.org/js"&gt;TensorFlow.js&lt;/a&gt;
&lt;/h2&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U-ABAL-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fmqqzsc7td0b1moy1bj.png" alt="TensorFlow.js logo"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://www.tensorflow.org/js"&gt;Image source&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;Tensorflow.js  is a library for machine learning in JavaScript. Develop ML models in JavaScript, and use ML directly in the browser or in Node.&lt;/p&gt;


&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.tensorflow.org/js"&gt;Citation from TensorFlow.js website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tensorflow/tfjs"&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Number of GitHub stars: 15.5k&lt;/p&gt;

&lt;p&gt;Number of forks on GitHub: 1.6k&lt;/p&gt;

&lt;p&gt;There are many more libraries, and there is more every day. The purpose of this article is only to show where JavaScript can be used.&lt;/p&gt;

&lt;p&gt;If you like the content and want even more you can start following me on &lt;a href="https://twitter.com/Patik123_"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>web</category>
    </item>
    <item>
      <title>New functions extending the functionality of useRefHistory in VueUse library</title>
      <author>Roman Harmyder</author>
      <pubDate>Wed, 15 Sep 2021 15:58:42 +0000</pubDate>
      <link>https://dev.to/harmyderoman/new-functions-extending-the-functionality-of-userefhistory-in-vueuse-library-520c</link>
      <guid>https://dev.to/harmyderoman/new-functions-extending-the-functionality-of-userefhistory-in-vueuse-library-520c</guid>
      <description>&lt;p&gt;I would like to share with you my little joy. My suggestion for expanding the function &lt;code&gt;useRefHistory&lt;/code&gt; by adding the delay effect to history snapshots was accepted by maintainers of VueUse. I wrote a pull request, that was merged. New features are already available in the latest version of VueUse (&amp;gt; v6.3.3). But first things first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adventure-story"&gt;
  &lt;/a&gt;
  Adventure story
&lt;/h2&gt;

&lt;p&gt;In my &lt;a href="https://dev.to/harmyderoman/vueuse-as-must-have-library-for-vue-3-5o2"&gt;last article&lt;/a&gt;, I wrote about &lt;code&gt;useRefHistory&lt;/code&gt;, and how to implement it in your application. While using this function, I noticed that the result of its work is a little impractical and not convenient for the user of the application. The function takes a snapshot of the data every time it notices the slightest change, even if it's just one letter. If you are writing a long text or a to-do list, make a mistake, and want to revert the changes, it is very inconvenient to press Undo for each letter. It is more convenient to configure this function so that it saves changes with a time delay.&lt;/p&gt;

&lt;p&gt;I started looking for a solution. It seems that it lies on the surface - you just need to add &lt;code&gt;setTimeOut&lt;/code&gt; to the &lt;code&gt;watch&lt;/code&gt;, which monitors data changes, but it turned out that this was not enough. &lt;code&gt;watch&lt;/code&gt; also need to skip changes that the &lt;code&gt;undo&lt;/code&gt; and &lt;code&gt;redo&lt;/code&gt; methods do to data, otherwise, this creates complete chaos!!!&lt;/p&gt;

&lt;p&gt;Looking for a solution led me to the source code of the VueUse library itself. It turned out that the basis for that was already laid by the authors.&lt;/p&gt;

&lt;p&gt;I opened a &lt;a href="https://github.com/vueuse/vueuse/issues/732"&gt;issue&lt;/a&gt; in the VueUse repository with a suggestion to add a new feature. The guys &lt;a href="https://github.com/antfu"&gt;antfu&lt;/a&gt; and &lt;a href="https://github.com/patak-js"&gt;patak-js&lt;/a&gt; turned out to be very nice people and real professionals. They supported my idea and entrusted me to write a pull request. We came up with a solution and they suggested to me how to implement it in the best way without breaking the style of the library.&lt;/p&gt;

&lt;p&gt;After the code review and some edits, the pull request was accepted and now new functions are available to you. I will tell you how to use them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usedebouncedrefhistory"&gt;
  &lt;/a&gt;
  &lt;a href="https://vueuse.org/core/useDebouncedRefHistory/"&gt;useDebouncedRefHistory&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The main change I made in the &lt;code&gt;useRefHistory&lt;/code&gt; functions is that now you can pass the &lt;code&gt;eventFilter&lt;/code&gt; property in the options object to change the behavior of the function. Filters are internal auxiliary structures of the library that you don't really need to learn. Unless you decide to write the code for VueUse yourself. Therefore, let's go straight to the practical.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useDebouncedRefHistory&lt;/code&gt; records the history of data changes with a specified delay. The delay is set in milliseconds and is passed to the options object. It can be wrapped in a ref object, then the delay will become reactive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useDebouncedRefHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@vueuse/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;undo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;redo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;canUndo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;canRedo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDebouncedRefHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;deep&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;undo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;redo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;canUndo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;canRedo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;clear&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usethrottledrefhistory"&gt;
  &lt;/a&gt;
  &lt;a href="https://vueuse.org/core/useThrottledRefHistory/"&gt;useThrottledRefHistory&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This function is similar to the previous one, only with a throttle effect. This means that the history will be saved at the moment of data change, and the next time after the delay time passed. If the user doesn't stop making changes, they will be recorded every 1000 milliseconds. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- setup in script - some syntactic sugar that will make your life easier--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useThrottledRefHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@vueuse/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;undo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;redo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;canUndo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;canRedo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useThrottledRefHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see, the changes are not so big in the codebase and logic, but they significantly improve the user experience. Use it wisely.&lt;/p&gt;

&lt;p&gt;I am very glad to contribute code that will be used all around the world. I find it very important to contribute code to open source because we all use someone else's work. In addition, I confirm that it is a good feeling to know that your code will be used by thousands of developers.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>vueuse</category>
    </item>
    <item>
      <title>Build Pixel Perfect Skeleton Loader Using CSS 🚀</title>
      <author>Ram Maheshwari 💚</author>
      <pubDate>Wed, 15 Sep 2021 15:55:52 +0000</pubDate>
      <link>https://dev.to/rammcodes/build-pixel-perfect-skeleton-loader-using-css-5692</link>
      <guid>https://dev.to/rammcodes/build-pixel-perfect-skeleton-loader-using-css-5692</guid>
      <description>&lt;p&gt;&lt;strong&gt;Skeleton Loaders&lt;/strong&gt; are used very commonly in &lt;strong&gt;Modern&lt;/strong&gt; Websites/Apps to indicate loading of data instead of using the traditional loaders, spinners, etc. which are boring and can lead to Poor User Experience 😵‍💫&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;I created this tutorial to share my knowledge of how to create a Perfect Skeleton Screen that looks like the exact replica of the original element 😉&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;We are going to convert the &lt;strong&gt;Food Blog Card&lt;/strong&gt; to it's own &lt;strong&gt;Skeleton loader&lt;/strong&gt; as shown in the GIF below 🖼️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VeNPyPU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.ibb.co/j54R1gC/Copy-of-Copy-of-Dopefolio-Open-Source-Portfolio-Template-for-Developers-2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VeNPyPU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.ibb.co/j54R1gC/Copy-of-Copy-of-Dopefolio-Open-Source-Portfolio-Template-for-Developers-2.gif" alt="Skeleton Loader Preview Demo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#there-are-3-steps-to-creating-a-perfect-skeleton-screen"&gt;
  &lt;/a&gt;
  There are &lt;strong&gt;3 Steps&lt;/strong&gt; to creating a perfect Skeleton Screen 🤘
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1&lt;/strong&gt;:
&lt;/h2&gt;

&lt;p&gt;Make sure you already have implemented the HTML and CSS for the Original Element. In our case, I have included the code for the &lt;strong&gt;Food Blog Card&lt;/strong&gt; below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;HTML Code ⬇️&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600;700;900&amp;amp;display=swap"&lt;/span&gt;
      &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img-cont"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
            &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt;
            &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://images.unsplash.com/photo-1594398028856-f253a046f417?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1189&amp;amp;q=80"&lt;/span&gt;
            &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Food image"&lt;/span&gt;
          &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-avatar-cont"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
              &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.ibb.co/JzNYHV9/image-1.jpg"&lt;/span&gt;
              &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"User Image"&lt;/span&gt;
              &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-avatar-img"&lt;/span&gt;
            &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-details"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Natalia Rodrigues&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-profession"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Food Blogger&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CSS Code ⬇️&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;      &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;62.5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Source Sans Pro'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.img-cont&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.user-info&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.user-avatar-cont&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.user-avatar-img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.user-details&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;flex-grow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.user-name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.user-profession&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Result ⬇️&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--inFJm8nL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/yQwJKPm/Fire-Shot-Capture-078-127-0-0-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--inFJm8nL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/yQwJKPm/Fire-Shot-Capture-078-127-0-0-1.png" alt="Food Blog Result Demo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2&lt;/strong&gt;:
&lt;/h2&gt;

&lt;p&gt;Now we have to convert the card into its own Skeleton Version. To do that, I will add an extra class called &lt;strong&gt;card--skeleton&lt;/strong&gt; on the HTML div with the class called &lt;strong&gt;card&lt;/strong&gt; as shown below so we can target the elements inside the card.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card card--skeleton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have &lt;strong&gt;2 Images&lt;/strong&gt; inside the card, the &lt;strong&gt;1st image&lt;/strong&gt; is the image of the Pizza and the &lt;strong&gt;2nd Image&lt;/strong&gt; is the image of the Person. Both of these images are wrapped inside their own container and those containers have their specific height.&lt;/p&gt;

&lt;p&gt;Now, we will remove both of these images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img-cont"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Removed Image --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-avatar-cont"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="c"&gt;&amp;lt;!-- Removed Image --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-details"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Natalia Rodrigues&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"user-profession"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Food Blogger&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we will add a background color to the image containers as shown below using the &lt;strong&gt;skeleton class&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card--skeleton&lt;/span&gt; &lt;span class="nc"&gt;.img-cont&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card--skeleton&lt;/span&gt; &lt;span class="nc"&gt;.user-avatar-cont&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the end result will look like this ⬇️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2hzdbl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/KqzQCMW/Fire-Shot-Capture-079-127-0-0-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2hzdbl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/KqzQCMW/Fire-Shot-Capture-079-127-0-0-1.png" alt="Skeleton Loader Preview Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will do the same thing with &lt;strong&gt;User Name&lt;/strong&gt; and &lt;strong&gt;User Profession&lt;/strong&gt; elements. We will change the background color of both of these elements along with the text color inside it. The background color and the text color will be the same.&lt;br&gt;
I have also added some border-radius which is optional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card--skeleton&lt;/span&gt; &lt;span class="nc"&gt;.user-name&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.card--skeleton&lt;/span&gt; &lt;span class="nc"&gt;.user-profession&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the end result will look like this ⬇️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LO5Lfdks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Yy1Pqqb/Fire-Shot-Capture-080-127-0-0-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LO5Lfdks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Yy1Pqqb/Fire-Shot-Capture-080-127-0-0-1.png" alt="Skeleton Loader Preview Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking cool, right? 😉&lt;/p&gt;

&lt;p&gt;So, now we can move on to the &lt;strong&gt;3rd Step&lt;/strong&gt; where we will add the shining effect animation ⚡&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 3&lt;/strong&gt;:
&lt;/h2&gt;

&lt;p&gt;In this step, we will add the &lt;strong&gt;Shining Effect Animation&lt;/strong&gt; on the entire Skeleton Card.&lt;/p&gt;

&lt;p&gt;To implement that, we will target the &lt;strong&gt;before&lt;/strong&gt; sudo class of &lt;strong&gt;card--skeleton&lt;/strong&gt; as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;      &lt;span class="nc"&gt;.card--skeleton&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="nb"&gt;transparent&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, we have added the &lt;strong&gt;before&lt;/strong&gt; sudo element which is &lt;strong&gt;absolutely positioned&lt;/strong&gt; and has the same height as the &lt;strong&gt;card--skeleton&lt;/strong&gt; and has 50% &lt;strong&gt;width&lt;/strong&gt; of the &lt;strong&gt;class--skeleton&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We also added &lt;strong&gt;linear-gradient&lt;/strong&gt; as the background with 3 colors ( transparent color, white color, transparent color ) in the right direction. &lt;/p&gt;

&lt;p&gt;So, it will make our &lt;strong&gt;card--skeleton&lt;/strong&gt; look this ⬇️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XY8MAv7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/TLvRkwx/Fire-Shot-Capture-081-127-0-0-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XY8MAv7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/TLvRkwx/Fire-Shot-Capture-081-127-0-0-1.png" alt="Skeleton Loader Preview Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we will use CSS &lt;strong&gt;keyframes&lt;/strong&gt; to move the gradient from the left side to the right side. Inside &lt;strong&gt;keyframes&lt;/strong&gt;, we will target the &lt;strong&gt;transform&lt;/strong&gt; property to &lt;strong&gt;skew&lt;/strong&gt; ( basically to turn the linear gradient from &lt;strong&gt;|&lt;/strong&gt; to &lt;strong&gt;/&lt;/strong&gt; ) the element and to &lt;strong&gt;translate&lt;/strong&gt; it in the X-direction.&lt;/p&gt;

&lt;p&gt;I have already added the &lt;strong&gt;overflow: hidden&lt;/strong&gt; value to the &lt;strong&gt;card&lt;/strong&gt; element so when the &lt;strong&gt;before&lt;/strong&gt; element goes outside of the &lt;strong&gt;card&lt;/strong&gt; boundaries because of the &lt;strong&gt;keyframes&lt;/strong&gt; transform, it's not going to be visible outside of the boundaries of &lt;strong&gt;card&lt;/strong&gt; which is what we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;      &lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;skewX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-10deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;skewX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-10deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.card--skeleton&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
        &lt;span class="c"&gt;/* Refer the Keyframe inside the Animation */&lt;/span&gt;
        &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loading&lt;/span&gt; &lt;span class="m"&gt;0.6s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, the end result will finally look this ⬇️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9nTYgQJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.ibb.co/7g21tVH/ezgif-com-gif-maker-6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9nTYgQJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.ibb.co/7g21tVH/ezgif-com-gif-maker-6.gif" alt="Skeleton Loader Preview Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and that's what we wanted 🥳🤘&lt;br&gt;
I hope you find this post to be helpful and thanks for reading it 😇&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#important"&gt;
  &lt;/a&gt;
  Important 😸
&lt;/h2&gt;

&lt;p&gt;I regularly post useful content related to &lt;strong&gt;Web Development and Programming&lt;/strong&gt; on &lt;strong&gt;Linkedin&lt;/strong&gt; and &lt;strong&gt;Twitter&lt;/strong&gt;. You should consider &lt;strong&gt;Connecting with me or Following&lt;/strong&gt; me on these &lt;strong&gt;Platforms&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://linkedin.com/in/rammcodes"&gt;Linkedin Profile&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href="https://twitter.com/rammcodes"&gt;Twitter Profile&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;You know, it takes time to create such content so it will be very helpful if you show some love to this post by &lt;strong&gt;Reacting&lt;/strong&gt; with ❤️ + 🦄 + 🔖 &lt;/p&gt;

&lt;p&gt;Share your feedback by &lt;strong&gt;Commenting&lt;/strong&gt; below 💬&lt;/p&gt;

&lt;p&gt;Drop me a &lt;strong&gt;Follow&lt;/strong&gt; for more &lt;strong&gt;Awesome&lt;/strong&gt; content related to &lt;strong&gt;Web Development&lt;/strong&gt; and &lt;strong&gt;Programming&lt;/strong&gt; 🙌&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-your-support"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thank you for your support&lt;/strong&gt; ❤️
&lt;/h3&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>REST APIs and Architecture - 101</title>
      <author>Uzair</author>
      <pubDate>Wed, 15 Sep 2021 15:44:32 +0000</pubDate>
      <link>https://dev.to/uzairali10/rest-apis-and-architecture-101-236f</link>
      <guid>https://dev.to/uzairali10/rest-apis-and-architecture-101-236f</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-the-heck-is-rest"&gt;
  &lt;/a&gt;
  What the Heck is REST??? 🤔
&lt;/h3&gt;

&lt;p&gt;REST stands for Representational State Transfer. It is nothing but some set of rules or constraints to make a web service in other words we can say its a standard way of defining a architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-constrains-that-must-be-followed-by-every-restful-service"&gt;
  &lt;/a&gt;
  Some Constrains that must be followed by every REST-ful Service ✅
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Client-Server Architecture&lt;/strong&gt;: REST is composed of Client, Server and Resources (data). Request-Response is handled by HTTP requests and response, but in REST client and server must be completely independent of each other. The server shouldn't be able to modify the client application and vice-versa sever only does the job of providing a requested resource.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Statelessness&lt;/strong&gt;: As already said that the client must not be aware of the logic that resides in server and vice-versa. So the message sent to server from the client must contain all the necessary info about the request (Eg: Which URI is requested, Method used, etc) And thus each request data packet can be understood in isolation by the server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cacheablity&lt;/strong&gt;: Client must be able to cache server's response, this minimises the client-server request response cycle and helps to scale up the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Layered Architecture&lt;/strong&gt;: The client and server need not to connected directly there can be multiple services connecting them such as load balancer, proxies, Security Layers etc&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code On Demand&lt;/strong&gt;: This is an &lt;strong&gt;optional&lt;/strong&gt; rule to be followed in this client has the ability to execute some code consisting of business logic which is provided by server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;API Rules&lt;/strong&gt;: There are some rules which should be followed while creating endpoint for API

&lt;ol&gt;
&lt;li&gt;an HTTP verb, which defines what kind of operation to perform&lt;/li&gt;
&lt;li&gt;a header, which allows the client to pass along information about the request&lt;/li&gt;
&lt;li&gt;an optional message body containing data&lt;/li&gt;
&lt;li&gt;Send a proper HTTP code to indicate a success or error status.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If any API or Service violates any of the above constraints it is not considered to be a RESTful Service 🚫&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#http-verbs"&gt;
  &lt;/a&gt;
  HTTP Verbs 👩‍🏭
&lt;/h3&gt;

&lt;p&gt;Mostly 4 Basic HTTP verbs are used while interacting with REST Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;GET&lt;/strong&gt; : To retrieve a specific resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt; : To Create a new resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PUT&lt;/strong&gt; : To modify an a specific resource&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DELETE&lt;/strong&gt; : To delete a specific resource&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The resource can be delivered to the client in a variety of formats including HTML, plain text, or Javascript object notation (JSON).&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URI&lt;/th&gt;
&lt;th&gt;HTTP verb&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;api/users&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get all users&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api/users/new&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show form for adding new user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api/users&lt;/td&gt;
&lt;td&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Adds a new User&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api/users/1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PUT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Update a user whose id is 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api/users/1/edit&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show edit form for user with id = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api/users/1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete a user with id = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;api/users/1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Get a user with id = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#how-restful-apis-work"&gt;
  &lt;/a&gt;
  How RESTful APIs work ⚙️
&lt;/h3&gt;

&lt;p&gt;Let's take an example. We want to build a simple application that connects to a server and provides the functionality of creating, reading, updating, and deleting resources (also known as CRUD) within the database&lt;/p&gt;

&lt;p&gt;A RESTful API is built and used to connect and provide communication between our client-facing front end to the back end server and database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrNotr4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k2pemud4diklvykcudj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrNotr4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k2pemud4diklvykcudj.png" alt="IcYxwQfeV"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When users of our application make client requests on the front end to retrieve a resource from within the database, the RESTful API is called, it makes a GET request to retrieve the resource,&lt;/li&gt;
&lt;li&gt;To create a resource within the database the RESTful API makes a POST request.&lt;/li&gt;
&lt;li&gt;To update a resource the RESTful API makes a PATCH request&lt;/li&gt;
&lt;li&gt;To delete a resource from within the database, the RESTful API makes a DELETE request to the Server&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>codenewbie</category>
      <category>node</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Todos: The Hard Parts</title>
      <author>Parham Negahdar</author>
      <pubDate>Wed, 15 Sep 2021 15:44:23 +0000</pubDate>
      <link>https://dev.to/pnegahdar/todos-the-hard-parts-3ij2</link>
      <guid>https://dev.to/pnegahdar/todos-the-hard-parts-3ij2</guid>
      <description>&lt;p&gt;&lt;strong&gt;Part 1 of 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As an backend/infra guy, I've grown a lot of respect for the intricacies of frontend development the last few years.&lt;/p&gt;

&lt;p&gt;By and large, a lot of the first wave problems of frontend javascript development have been fixed. The language&lt;br&gt;
facilities have gotten really nice, browser support has become more consistent, you can find the typescript typings for&lt;br&gt;
most things now, a lot of key packages have stabilized and upgrading things is less of a nightmare.&lt;/p&gt;

&lt;p&gt;As soon as Ecmascript gets python style &lt;a href="https://docs.python.org/3/library/typing.htm"&gt;ignored-by-default type hints&lt;/a&gt;&lt;br&gt;
(most transpilers currently do this) so it can interop with typescript more easily, javscript, or typescript, really,&lt;br&gt;
might become my favorite langauge.&lt;/p&gt;

&lt;p&gt;But still, frontend development is pretty damn hard!&lt;br&gt;
And that makes sense. Web applications can have interfaces as complex as &lt;a href="https://github.com/microsoft/vscode"&gt;IDEs&lt;/a&gt; and&lt;br&gt;
data exchange layers as complex as &lt;a href="https://github.com/yjs/yjs"&gt;distributed databases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A relatively "easy" problem I was dealing with recently in the data interchange layer demonstrates this well. As with&lt;br&gt;
most frontend tutorials it starts with the the problem of Todos. Consider the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IdType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IdType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Remove&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="p"&gt;})}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNewTodo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;todoId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IdType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;updates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;todoId&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;updates&lt;/span&gt; &lt;span class="p"&gt;}))),&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removeTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;todoId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IdType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;todoId&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;removeTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="p"&gt;))}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;newTodo&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
                    &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                        &lt;span class="nx"&gt;createTodo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
                        &lt;span class="nx"&gt;setNewTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bam in just a few lines of code we've implemented pretty much all the CRUD methods for todos. We can even update the&lt;br&gt;
titles and make them done. Really cool. Told ya, React is great. Look how easy it is to implement todos?&lt;/p&gt;

&lt;p&gt;But it's not saving anywhere. This shouldn't be too difficult either. We whip up our favorite instant-backend in the&lt;br&gt;
format de jour (GraphQL obviously, REST for example's sake)&lt;br&gt;
and API is ready. Just a few lines to update on the frontend now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;

&lt;span class="c1"&gt;// Connect to our backend&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;// Fetch our todos on load&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="c1"&gt;// our createTodos should now use the API methods&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// refresh data&lt;/span&gt;
    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// refresh data&lt;/span&gt;
    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We fire it up. Thing seem to mostly work, but the UI is kind-of &lt;strong&gt;glitchy&lt;/strong&gt;. You see, our webserver is running locally, so&lt;br&gt;
our net latency is as close to zero as we'll get. Our API is responding in 40ms but things still don't feel 'instant',&lt;br&gt;
there's a little flash in the UI as todos are added, and we wait for responses. This will only get worse as the network&lt;br&gt;
latency goes up when we deploy to production.&lt;/p&gt;

&lt;p&gt;We also notice when we update the todos we get mad &lt;strong&gt;race conditions&lt;/strong&gt;, sometimes the update returns a stale object&lt;br&gt;
because responses are out of order. This makes sense our async APIs can respond whenever they want so if they request&lt;br&gt;
and responses aren't ordered and we fire them off willy-nilly the new data be out of order.&lt;/p&gt;

&lt;p&gt;Now we realize we have two &lt;strong&gt;big&lt;/strong&gt; data synchronization problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We need to synchronize our data with the DOM and avoid unnecessary rendering.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to synchronize our local data with the backend server&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Turns out both of these problems are pretty difficult. And we've barely addressed any of the&lt;br&gt;
&lt;strong&gt;Advanced Rich Webapp Requirements™&lt;/strong&gt;:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#error-catching"&gt;
  &lt;/a&gt;
  Error Catching
&lt;/h4&gt;

&lt;p&gt;We need to let the user know when there was an error in the API request. This can happen on any&lt;br&gt;
operation and depending on which operation (initial load vs an update) we have to do different things.&lt;/p&gt;

&lt;p&gt;So we add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;initialLoadError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoadError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// For some toast or notification&lt;/span&gt;
    &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unable to process request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialLoadError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;initialLoadError&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ... render component&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what does this mean for our local state? How do we rollback the UI if this happened in an update or a delete?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#load-screens"&gt;
  &lt;/a&gt;
  Load Screens
&lt;/h4&gt;

&lt;p&gt;We need to show the user that their initial load/query/etc are still loading and inflight. There are&lt;br&gt;
also different forms of loading. When we're loading the initial data we want a full load-spinner overlay on the&lt;br&gt;
rendering area but when we're doing updates we want to just a load spinner in the corner.&lt;/p&gt;

&lt;p&gt;Some more hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;initial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;partial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;initial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialLoadError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;initialLoadError&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;initial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoadSpinner&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;position:relative&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;partial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;position: absolute; top: 0; right: 0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoadSpiner&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="c1"&gt;// ... render rest of component{" "}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#debouncing"&gt;
  &lt;/a&gt;
  Debouncing
&lt;/h4&gt;

&lt;p&gt;Users type fast and we can't send every keystroke as an API request. The natural way to solve this is&lt;br&gt;
to add a debounce:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTodosDebounced&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDebounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;trailing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updateTodos&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait do I want trailing or leading? Hmm. We add this and we still see some weird rollback behavior as the user types (&lt;br&gt;
this is due to the request races). Good enough.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#synthetic-local-data-optimistic-uis"&gt;
  &lt;/a&gt;
  Synthetic local data (optimistic UIs)
&lt;/h4&gt;

&lt;p&gt;We decide to solve our flashing problem by having synthetic local state. Basically we temporarily add data to a local &lt;strong&gt;synthetic&lt;/strong&gt;&lt;br&gt;
array of our existing data from the API and local mutations that have still not been persisted.&lt;/p&gt;

&lt;p&gt;This one is tricky, because it's hard to figure out which data is fresher (see race conditions mentioned above).&lt;/p&gt;

&lt;p&gt;Lets try a solution thats good enough:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;deletedTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDeletedTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;localTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLocalTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;

&lt;span class="c1"&gt;// mergeTodos is left as an (complex) excercise for the reader&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;syntheticTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mergeTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;localTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deletedTodos&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;localTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deletedTodos&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now say we delete something, we add the id to deleted todos and our &lt;code&gt;mergeTodos&lt;/code&gt; will drop that entry when creating the&lt;br&gt;
synthetic results. The function will also merge any mutations into the todos e.g. &lt;code&gt;todo = {...todo, ...localTodo}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Our synthetic array has reduced the flashing significantly. Everything feels instant now. We're not sure about the&lt;br&gt;
logic of the merge function as you can tell its still not race-proof.&lt;/p&gt;

&lt;p&gt;Also, what if the API operations related to the synthetic updates fail? How do we rollback?&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#working-offline-retry-and-networkdown-logic"&gt;
  &lt;/a&gt;
  Working offline, retry and network-down logic:
&lt;/h4&gt;

&lt;p&gt;We're on an airplane and we realize that when there is no wifi, the app is behaving poorly.&lt;br&gt;
Because of our synthetic data changes we're getting fake mutations that aren't actually persisted.&lt;br&gt;
Our favorite apps webapps let us know when there is no connectivity to the backend and either halt new operations or&lt;br&gt;
let us work offline for syncing later.&lt;/p&gt;

&lt;p&gt;We decide on the former (its hacky but quicker):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;networkOffline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNetworkOffline&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateOnlineStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setNetworkOffline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateOnlineStatus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateOnlineStatus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateOnlineStatus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;offline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateOnlineStatus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We add a bunch of logic switches around the place to avoid updates and changes when things are offline.&lt;br&gt;
We realize we need a few UI elements to either let the user see initial load data or block it off completely.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#undo-logic"&gt;
  &lt;/a&gt;
  Undo logic
&lt;/h4&gt;

&lt;p&gt;Now we wonder, how the f*** is &lt;code&gt;cmd-z&lt;/code&gt; implemented in Figma? This requires full knowledge of local operation order and&lt;br&gt;
very very smart synchronization of our backend.&lt;/p&gt;

&lt;p&gt;Yeah, screw it, users don't need cmd-z right now, we'll figure out how to stich it into all these other things&lt;br&gt;
down the road.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#live-reloading-and-multiuser-collaboration"&gt;
  &lt;/a&gt;
  Live reloading and Multiuser collaboration
&lt;/h4&gt;

&lt;p&gt;Who uses todo apps without collaboration? When another user modifies a todo it should be relfected locally and&lt;br&gt;
update our UI so we don't overwrite their changes. We learn about CRDTs but that feels like overkill.&lt;br&gt;
Okay, lets do it the easy way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Update our data every few seconds&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Obviously this will create some races and overwrite things but why where our users collaborating on the same todo within&lt;br&gt;
5 seconds to begin with? They shouldn't be doing that.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#data-caching"&gt;
  &lt;/a&gt;
  Data caching
&lt;/h4&gt;

&lt;p&gt;Why not store the last fetch data locally so we can load it while the newer data is loading?&lt;/p&gt;

&lt;p&gt;Maybe something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Load initial data from local storage&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo-cache&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="c1"&gt;// Update our todo cache everytime todos array changes&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo-cache&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to key the cached query based on the query and we still need to expire super old data and on user logout.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#query-reuse-and-bidrectional-data-binding"&gt;
  &lt;/a&gt;
  Query reuse and bidrectional data binding.
&lt;/h4&gt;

&lt;p&gt;If we use a similar query in a completely different component on the page we should bind the same results/udpates from the&lt;br&gt;
earlier query. If a todo is rendered in multiple places or can be edited in multiple places the data should cross sync&lt;br&gt;
between the two components in realtime. This requires &lt;em&gt;lifting&lt;/em&gt; the state. Let's skip this for now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hook-soup-and-off-the-shelf-tools"&gt;
  &lt;/a&gt;
  Hook Soup and Off The Shelf Tools
&lt;/h2&gt;

&lt;p&gt;At this point, our &lt;code&gt;Todo.tsx&lt;/code&gt; has something like &lt;strong&gt;40 hooks&lt;/strong&gt; and &lt;strong&gt;12 components&lt;/strong&gt;. All to implement a half-assed&lt;br&gt;
glitchy CRUD on some simple todos.&lt;/p&gt;

&lt;p&gt;Our dependency arrays are insane and someone recently reported that there is a loose API request that's firing every 10ms.&lt;br&gt;
We look at the git blame and see someone added something to the&lt;br&gt;
dependency array they shouldn't have (to be fair Eslint blindly warned them to add it).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Surely someone else has solved this...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And we would be correct, depending on which part of the problem we care about.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-1-binding-data-to-the-domreact"&gt;
  &lt;/a&gt;
  Problem 1: Binding data to the DOM/React
&lt;/h4&gt;

&lt;p&gt;First we look at solutions to the DOM data binding problem. &lt;a href="https://github.com/olegrjumin/awesome-react-state-management"&gt;There are a ton&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;React Hooks&lt;/strong&gt;: Great for entry level work, absolute mess when we start introducing all those things. Threading these state
variables across the 15 components we have is turning to be a nightmare.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Redux&lt;/strong&gt;: Looks great. The event stream it uses fits very well with some undo/rollback logic we think we'll need.
After trying it, we find that the out-of-band side effects spread over a bunch of reducer files are unclear.
Access to global state is hard and API requests are weird... wtf is a thunk?&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Mobx&lt;/strong&gt;: Whoa this looks easy. We make a class, mark variables we rerender on as observable and things look simple and imperative.
Facebook uses it on WhatsApp. None of the event stream stuff from Redux here. We either snapshot the class at points in time, or we roll our own solution.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;XState&lt;/strong&gt;: FSMs are cool. We've used them a few times on some backend flows with much success. We whip up an example and realize
that the machine became super complex. There are a ton of flows and things like rollback/partial-loading/etc become a bit tough
to reason about. Maybe we keep the main logic in the FSM and sub rendering logic independent?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After trying a few we land on &lt;strong&gt;mobx&lt;/strong&gt;. Theres a bit of magic around the wrapping, but we find that 98% of the time&lt;br&gt;
that magic works great. Using &lt;code&gt;observers&lt;/code&gt; everywhere is annoying, but we read about how it minimizes our rerendering by&lt;br&gt;
watching only the fields we used in the component (effectively memoizing every component), and we decide its worth it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-2-binding-data-to-the-backend"&gt;
  &lt;/a&gt;
  Problem 2: Binding data to the backend
&lt;/h4&gt;

&lt;p&gt;Now that we have a solution to the data binding problem we need a solution to backend synchronization problem.&lt;/p&gt;

&lt;p&gt;There are a ton of options here too:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;useSWR&lt;/strong&gt;: A react data fetching API that handles a lot of components like caching, states (loading/error/results), optimistic UI support,
and we have to be very uniform rest.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Apollo GraphQL Client&lt;/strong&gt;: Lots of nice things built into this powerful library. Hard requirement is that we use GraphQL.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Basic Fetch&lt;/strong&gt;: Using the native browser APIs to make requests and manage state ourselves.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Cloud storage clients like Firebase&lt;/strong&gt;: Many cloud APIs come with SDKs and react data bindings like Google Firebase.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our API isn't GraphQL (maybe it should be?) so we land on &lt;strong&gt;useSWR&lt;/strong&gt;. This lib only handles &lt;em&gt;some&lt;/em&gt; of our&lt;br&gt;
Advanced Rich Webapp™ requirements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-25-connecting-these-two-pieces"&gt;
  &lt;/a&gt;
  Problem 2.5: Connecting these two pieces:
&lt;/h4&gt;

&lt;p&gt;Sadly, the lib we use for fetching data is also highly intertwined with the lib we use to synchronize data. In the&lt;br&gt;
case of &lt;strong&gt;useSWR&lt;/strong&gt; our hands become forced to adopt their hook based system or we need to create some bindings into our&lt;br&gt;
own state management system.&lt;/p&gt;

&lt;p&gt;So we kinda get frameworked, one way or another.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;At this point, hopefully, we'd be content enough with the off-the-shelf tools.&lt;br&gt;
We grab some of them, create some of the glue code and proceed to use it.&lt;br&gt;
Where we need things like rollback and network state we put some of our ad-hoc logic in there to handle it appropriately.&lt;/p&gt;

&lt;p&gt;But we're not totally satisfied. &lt;code&gt;Todos&lt;/code&gt; are just one data model in our application. We'll probably have a 30 more and repeating the same&lt;br&gt;
patched-together hooks and methods across all these will suck. Also adding new functionality as we need it will become arduous&lt;br&gt;
once we have these half-assed hooks sprinkled everywhere.&lt;/p&gt;

&lt;p&gt;Our team is big enough and this is a big enough problem. Let's do the unthinkable. Lets &lt;em&gt;roll out our own solution.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next time&lt;/strong&gt;: In the next blog post (hopefully the next week), I will cover how to create a frontend transaction log that satisfies a lot of our&lt;br&gt;
Advanced Rich Webapp™ requirements. We will implement a log that tries it's best to linearize operations and provide ways&lt;br&gt;
to mutate and rollback things while keeping the component logic minimal. We implement the transaction manager as a generic&lt;br&gt;
so we can use it for &lt;code&gt;Todos&lt;/code&gt; and any other types we need.&lt;/p&gt;

&lt;p&gt;Want to be notified when we drop the post? Follow along on &lt;a href="https://synth.app/rss.xml"&gt;RSS&lt;/a&gt;, &lt;a href="https://twitter.com/pnegahdar"&gt;Twitter&lt;/a&gt;, or &lt;a href="https://synth.app"&gt;signup to our mailing list&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
      <category>frontend</category>
    </item>
    <item>
      <title>DEVCommunity, if you want to stay accountable, learn alongside, hit me up. Let's learn, grow and create projects together😊💪</title>
      <author>Madhavi Swamy</author>
      <pubDate>Wed, 15 Sep 2021 15:33:58 +0000</pubDate>
      <link>https://dev.to/madhaviswamy/devcommunity-if-you-want-to-stay-accountable-learn-alongside-hit-me-up-let-s-learn-grow-and-create-projects-together-3b7m</link>
      <guid>https://dev.to/madhaviswamy/devcommunity-if-you-want-to-stay-accountable-learn-alongside-hit-me-up-let-s-learn-grow-and-create-projects-together-3b7m</guid>
      <description>&lt;p&gt;Hey #DEVCommunity, I've been learning and documenting my journey of learning webdev on (@thematsci_gal) twitter. If you want to stay accountable and learn alongside, hit me up. Let's learn, grow and create projects together😊💪&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>shecoded</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why is Shopify using "Ruby on Rails" to build its $3 billion dollar e-commerce business?</title>
      <author>Sameer Kumar</author>
      <pubDate>Wed, 15 Sep 2021 15:25:08 +0000</pubDate>
      <link>https://dev.to/sameer1612/why-is-shopify-using-a-dead-programming-language-to-build-its-3-billion-dollar-e-commerce-business-4a52</link>
      <guid>https://dev.to/sameer1612/why-is-shopify-using-a-dead-programming-language-to-build-its-3-billion-dollar-e-commerce-business-4a52</guid>
      <description>&lt;p&gt;It would be an understatement to say Shopify is the unicorn of the eCommerce business. Shopify is used by millions of merchants all over the world to build their online presence and market their products. Started by 3 Canadians in 2004, inspired by their poor online shopping experience, Shopify has been significantly gaining new ground every day. According to research reports, its global e-commerce is forecasted to be $4.95 trillion by 2022- an almost 400% increase in eight years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Shopify?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Shopify is the present-day example of a well-structured, complex, and user-friendly eCommerce website built using Ruby on Rails. It is basically a Software-as-a-Service platform that gives entrepreneurs and intrapreneurs the opportunity to create a secure online store with wider features and choices to select their best payment gateways out of hundreds of possible options. For the advanced user, there is an option to edit the ready-made design templates. Even at the scale of processing millions of requests per minute (RPM), Shopify offers a lot more than an e-commerce sales platform. And, this is amazing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why does Shopify use Ruby on Rails?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the uninitiated, Ruby on Rails is very much prevalent in the present day. It is forming a niche because of its vast usage among millions of websites. Ruby on Rails is no longer a one advantage wonder web development framework. What makes it different is its effective development time, super-fast deployment, user-friendliness, etc.&lt;/p&gt;

&lt;p&gt;When Shopify was launched, at that time RoR was very popular. It was a promising framework and it is now. RoR helped Shopify to grow relatively at the same time as its number of users increased. This scalability feature of ruby on rails made it a favorite for the founders as it perfectly answers the rising demands of the new client, product additions, feature releases, and much more. The RoR architecture was famous for its modularity which means that the system can be divided into modules and gems. It was suitable for the twelve-factor app principles, which allowed it to be scaled in a natural way.&lt;/p&gt;

&lt;p&gt;The main idea was to create a platform where the tool merchants can build their own online store and sell their products easily. Bringing such a powerful platform requires overcoming a lot of technical challenges such as a secure infrastructure for proper user data handling, larger database sets, API creation, third-party integration, and availability issues. This is where RoR saves the bill.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Ruby on rails is known as a mature, and stable technology. It means when hundreds of merchants use Shopify they feel the ease of app operation and significant efficiency in the performance of the platform by removing any lags that occur. The framework uses the best coding principles like DRY (Don’t Repeat Yourself) and KISS (Keep It Simple, Stupid) that guide the developers in keeping the code clean.&lt;/li&gt;
&lt;li&gt;  RoR is agile and supports quick application development. It takes very little time to write and maintain the apps as compared to other programming languages. Its open-source library, 150k+ Gems, and undying support of the RoR community have been helping in improving the development workflow and allowing quick development of almost any idea. Using RoR, a merchant can reduce their store build time by 25–45% and reduce their time to go live in the market drastically.&lt;/li&gt;
&lt;li&gt;  RoR provides out-of-the-box security. They have default security headers that defend applications from clickjacking. Like, XSS is protected by default. Its SQL injection is managed by the default Rails object-relational mapper (ORM), Active Record. All the string text is escaped before being sent to the browser.&lt;/li&gt;
&lt;li&gt;  The configurations, practices can change from one developer to another based on their personal choices. RoR uses a software engineering principle called Convention over Configuration (CoC) which is hugely followed by developers all around the world. When working in a team, it is hard to review and keep track of one another’s code. But, through CoC, one can know how to connect URL paths to application logic, and database tables and columns.&lt;/li&gt;
&lt;li&gt;  Also, RoR uses MVC architecture. This allows the extensibility and modularity of apps in the Shopify platform. Therefore, no matter its complexity, a merchant can easily add new features to their online store in Shopify taking the help of a developer.&lt;/li&gt;
&lt;li&gt;  When building an online store, there is always scope for integrating more functionality. Having few custom apps can validate a variety of merchant needs. For example, reading and writing the data in response to user input or an event, adding any new functionality to the existing components of Shopify admin, and/or changing how the store shows information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Final Thoughts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the present day, e-commerce with Ruby on Rails is more relevant than ever. As the companies face imminent losses due to unseen circumstances, geographical preferences, customer needs, and much more, the companies aim to save more money, while reaching more customers. And, having a mobile eCommerce platform with RoR can reduce that operational burden by half.&lt;/p&gt;

&lt;p&gt;Name it and RoR has it all: payment gateways, campaign platforms, merchant helpdesks, etc. If you are planning to build an online shop, RoR has one of the best development frameworks as it includes many gems built particularly for e-commerce. Unique merchants deserve unique solutions. If you need to cover an extra mile for mature technology and a competent app development partner, that technology is Ruby on Rails and the partner is &lt;a href="https://railsfactory.com/"&gt;RailsFactory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do follow for more Ruby on Rails posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-connect"&gt;
  &lt;/a&gt;
  To Connect
&lt;/h2&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;🏠 Website: &lt;a href="https://hi-sameer.web.app"&gt;https://hi-sameer.web.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🏭 LinkedIn: &lt;a href="https://www.linkedin.com/in/sameerkumar1612/"&gt;https://www.linkedin.com/in/sameerkumar1612/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>ruby</category>
      <category>rails</category>
    </item>
  </channel>
</rss>
