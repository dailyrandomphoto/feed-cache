<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Microsoft has a brand new emoji set coming to Windows 11</title>
      <author>Madza</author>
      <pubDate>Fri, 16 Jul 2021 07:03:55 +0000</pubDate>
      <link>https://dev.to/madza/microsoft-has-a-brand-new-emoji-set-coming-to-windows-11-5d6k</link>
      <guid>https://dev.to/madza/microsoft-has-a-brand-new-emoji-set-coming-to-windows-11-5d6k</guid>
      <description>&lt;p&gt;Microsoft has &lt;a href="https://medium.com/microsoft-design/emotionality-at-work-398182387adc"&gt;announced&lt;/a&gt; a brand new emoji set coming to Windows 11 and Office 365.&lt;/p&gt;

&lt;p&gt;The most fundamental change Microsoft has made is that all the emoji are now 3D designs.&lt;/p&gt;

&lt;p&gt;Microsoft says it wants emoji to be playful, because it believes play is important in the workplace.&lt;/p&gt;

&lt;p&gt;In addition to revamping all of its existing emoji, Microsoft also created new ones to represent the new realities of hybrid work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4hOIrSPy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fve64yxpilwccxzckeg2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4hOIrSPy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fve64yxpilwccxzckeg2.jpg" alt="Alt"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Share your thoughts! Do you like the new ones more?&lt;/p&gt;

</description>
      <category>news</category>
      <category>microsoft</category>
      <category>windows</category>
      <category>ui</category>
    </item>
    <item>
      <title>AWS CI/CD pipeline: Solving Issues in Program Code</title>
      <author>Salah Elhossiny</author>
      <pubDate>Fri, 16 Jul 2021 06:59:43 +0000</pubDate>
      <link>https://dev.to/salah856/aws-ci-cd-pipeline-solving-issues-in-program-code-ffa</link>
      <guid>https://dev.to/salah856/aws-ci-cd-pipeline-solving-issues-in-program-code-ffa</guid>
      <description>&lt;p&gt;In &lt;a href="https://dev.to/awsmenacommunity/aws-ci-cd-pipeline-with-codeguru-unittest-part-i-i4o"&gt; previous part &lt;/a&gt; , we knew how to setup our environment for CI/CD using AWS series, and CodeGuru. &lt;/p&gt;

&lt;p&gt;Now, Let's check the code. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is the structure of the source code.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-src
    -main/java/com/example/concurrencysample
        -BasicCHeckMap.java
        -BasicSynchronization.java
        -Concurrency.java
        -ConcurrencyCheckout.java
        -SingletonRepo.java
        -Util.java
    -test/java/com/example/concurrencysample
        -SingletonRepoTests.java


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;let’s take a check the SingletonRepo file. SingletonRepo can only have one instance in the program. And sigletonsrepo have one HashMap. let’s check the putKey() function, which is the core of this workshop.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Concurrency&lt;/span&gt; &lt;span class="nf"&gt;putKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;product_code&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;           
    &lt;span class="nc"&gt;Date&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRandomDate&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_code&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_code&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Concurrency&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;   
&lt;span class="o"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;putKey works is simple. Check that HashMap has a number with containsKey() and if not, save the number with put(). &lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the HashMap already has the same value, don’t put it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BasicSynchronization calls pukey() of SingletonRepo and inserts a randomly generated number between 0 ~ 2000.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ConcurrencyCheckout is Main class. This class creates 5 BasicSynchronizations and starts 5 threads.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXX_PY13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/125903682-aacacecb-f5ab-45d3-9ba6-e25d760508e7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXX_PY13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/125903682-aacacecb-f5ab-45d3-9ba6-e25d760508e7.png" alt="Screenshot from 2021-07-16 08-40-35"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-the-problem-with-this-program"&gt;
  &lt;/a&gt;
  SO WHAT IS THE PROBLEM WITH THIS PROGRAM?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This code has a concurrency issue. if it call two PutKey() from two threads at the same time. What will happen?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The number is entered only once, but the call count is increased twice.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HashMap is not thread-safe. The code above is dangerous because get and put don’t guarantee atomicity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the number of threads is increased and the number of put calls executed simultaneously increases, the result cannot be guaranteed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An error occurs because the same problem appears in the UnitTest being executed. SingletonRepotests, a unit test that is performed, creates 8 threads and raises the count one by one when an input occurs in the HashMap. And after all the work is done, the number of values entered in the HashMap is compared with the number of occurrences. If the values are the same, the number of inputs and the number of HashMaps are the same, so the function worked correctly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, UnitTest will continue to fail because the current code was programmed without considering concurrency. Of course, if you are very lucky, the test may succeed. However, to prevent this, SingletonRepotests performs the same test 100 times.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how do you solve this problem?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can change HashMap to ConcurrentHashMap. ConcurrentHashMap is designed to be thread-safe, so it operates stably in a multi-threaded environment and has slightly better performance than Hashtable and synchronized map. ConcurrentHashMap locks the map when you put it, so you can prevent the same key put at the same time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open the SingletonRepo.java file in Cloud9, then change the HashMap below to ConcurrentHashMap.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt;   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.concurrent.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Concurrency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;   &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;ConcurrentHashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Concurrency&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ConcurrentHashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;push the changes again.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m "fix singletonrepo.java"
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And if you check the concurrencysample of Build, you can see that the build was successful. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tBUzJilW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/125905251-b554def6-9a53-4f87-8206-4ae54d663fed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tBUzJilW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/125905251-b554def6-9a53-4f87-8206-4ae54d663fed.png" alt="codequality-solve"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;let’s also check the Report. If you select Concurrency-Unittest-Report in Report group of Build, you can see the result passed by 100%.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2FbPvdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/125905288-54a27b2c-6ff4-4b41-8657-1e7f381767ab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2FbPvdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/125905288-54a27b2c-6ff4-4b41-8657-1e7f381767ab.png" alt="codequality-100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let`s go to CodePipeline : &lt;a href="https://console.aws.amazon.com/codepipeline"&gt;https://console.aws.amazon.com/codepipeline&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Select Pipeline in left menu and click concurrencysample-develop. this pipeline triggerd committing develop branch in concurrencysamle repository. you can find recently successed execution result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1-fslOYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/125905320-9312953c-93cd-4012-a750-89ca67b1ded7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-fslOYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/125905320-9312953c-93cd-4012-a750-89ca67b1ded7.png" alt="codepipeline-dev-success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We finished this part. In next part we will handle the pull requests and monitor the process using Codeguru. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>cicd</category>
      <category>cloud</category>
      <category>testing</category>
    </item>
    <item>
      <title>What gives Flutter the edge over its other alternatives?</title>
      <author>Praveen Varma</author>
      <pubDate>Fri, 16 Jul 2021 06:54:41 +0000</pubDate>
      <link>https://dev.to/geekyprawins/what-gives-flutter-the-edge-over-its-other-alternatives-22h7</link>
      <guid>https://dev.to/geekyprawins/what-gives-flutter-the-edge-over-its-other-alternatives-22h7</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey there! In the previous post we have walked through the Introduction of &lt;strong&gt;&lt;a href="https://flutter.dev"&gt;Flutter&lt;/a&gt;&lt;/strong&gt;, incase you haven't read that, you can read it &lt;a href="https://dev.to/geekyprawins/understanding-flutter-a-beginner-s-guide-2l6h"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;br&gt;
Now let's see what makes Flutter, the projected next big thing in Mobile App Development!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--df4pFU3M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18r9vvhueh1okb3dtvwp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--df4pFU3M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18r9vvhueh1okb3dtvwp.jpg" alt="memeF1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are as of mid-2020, over &lt;strong&gt;50,000&lt;/strong&gt; &lt;em&gt;Flutter&lt;/em&gt; apps on Google Playstore. Over half a million developers use &lt;em&gt;Flutter&lt;/em&gt; every month and how much they love it is evident in forums of &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; and &lt;a href="https://stackoverflow.com"&gt;StackOverflow&lt;/a&gt;. Clearly, Flutter is emerging a winner in the &lt;em&gt;cross-platform app&lt;/em&gt; development space and proving a worthy competitor to &lt;em&gt;React Native&lt;/em&gt;. &lt;br&gt;
In fact, the popularity of &lt;em&gt;Flutter&lt;/em&gt; has soared significantly despite its being such a &lt;strong&gt;young&lt;/strong&gt; framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swjFSdRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrlm6g87h29jvemz9stm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swjFSdRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrlm6g87h29jvemz9stm.jpeg" alt="f2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-unique-is-flutter"&gt;
  &lt;/a&gt;
  &lt;em&gt;How unique is Flutter?&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Now as I said in the previous post, &lt;em&gt;Flutter&lt;/em&gt; simply compile that &lt;em&gt;Dart&lt;/em&gt; code to native code for these different platforms and that happens with the help of the &lt;em&gt;Flutter SDK&lt;/em&gt; and as a result, you get real apps spit out with &lt;strong&gt;highly optimized high performance&lt;/strong&gt; code that's based on your code but that's not your code itself, instead it's the compiled version of that code and therefore you really ship code that runs on the different platforms and that's optimized and high performant because performance is actually a huge advantage of Flutter apps, Flutter out of the box gives you high performance applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-flutter-advantage"&gt;
  &lt;/a&gt;
  &lt;em&gt;The Flutter advantage&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;It's important to understand that Flutter does not use platform primitives. Now what do I mean with that? We're having our Flutter app and we're targeting iOS and Android. Now if we want to add a button then in Flutter with this UI as Code approach, we do so by adding a RaisedButton.&lt;/p&gt;

&lt;p&gt;Now this is just an instruction in your Flutter code which tells Flutter to render a button in that part of your widget tree.&lt;br&gt;
Now you could think that what happens when the code gets compiled to that native code is that this &lt;code&gt;RaisedButton&lt;/code&gt; is translated to "hey &lt;em&gt;iOS&lt;/em&gt;, please give me your default button", which would be a &lt;code&gt;UI button&lt;/code&gt; element in the iOS development world and for &lt;em&gt;Android&lt;/em&gt;, a &lt;code&gt;widget.button&lt;/code&gt;, that we get these native buttons which are of course part of the native development environments and that's &lt;strong&gt;NOT&lt;/strong&gt; what happens!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HeqZWfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp32bchqtk9hj20i7wi1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HeqZWfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp32bchqtk9hj20i7wi1.jpg" alt="flutter_icon_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead &lt;em&gt;Flutter&lt;/em&gt; has its own implementations and that's really important to understand and to keep in mind, &lt;strong&gt;directly controls every pixel on the screen&lt;/strong&gt;. So Flutter does not compile your code to some native equivalence or native alternatives, instead Flutter ships with its own engine which controls the entire screen, everything the user sees and renders every pixel on its own and that gives Flutter a lot of control and a lot of flexibility, sounds great right?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rRTMFQwb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4uv0agpybd8ikmwmsiwx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rRTMFQwb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4uv0agpybd8ikmwmsiwx.png" alt="9amcr9hg112df5ckybbh"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;em&gt;Conclusion&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Now you don't have to care too much about that because Flutter does it for you but it's important to be aware of that because that gives Flutter more control and less limitations and therefore, you implicitly, indirectly benefit from that.&lt;br&gt;
You have a good performance, you have a lot of power, a lot of things you can configure, you have full control over how you want to build your user interface!&lt;/p&gt;

&lt;p&gt;Thanks for giving this a read, have a great day!&lt;br&gt;
&lt;a href="https://github.com/geekyprawins"&gt;Praveen Varma&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>ios</category>
      <category>android</category>
      <category>dart</category>
    </item>
    <item>
      <title>HTML Cheat Sheet for Beginners! 🔥</title>
      <author>KUMAR HARSH</author>
      <pubDate>Fri, 16 Jul 2021 06:38:37 +0000</pubDate>
      <link>https://dev.to/cenacr007_harsh/html-cheat-sheet-for-beginners-4lbn</link>
      <guid>https://dev.to/cenacr007_harsh/html-cheat-sheet-for-beginners-4lbn</guid>
      <description>&lt;p&gt;This Cheat Sheet was made by &lt;a href="https://www.youtube.com/channel/UCeVMnSShP_Iviwkknt83cww"&gt;CodeWithHarry&lt;/a&gt;. I found this very useful so I am sharing it with you all. Bookmark it and keep it with yourself if you find it useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  📌 Structure
&lt;/h2&gt;

&lt;p&gt;This is the basic template or barebone structure of HTML.&lt;/p&gt;

&lt;p&gt;Boilerplate&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#headings"&gt;
  &lt;/a&gt;
  📌 Headings
&lt;/h2&gt;

&lt;p&gt;There are six headings available in HTML, H1 is the largest among all, and H6 is the smallest.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-h1-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;h1&lt;/code&gt; Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Heading 1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-h2-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;h2&lt;/code&gt; Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Heading 2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-h3-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;h3&lt;/code&gt; Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Heading 3&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-h4-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;h4&lt;/code&gt; Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Heading 4&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-h5-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;h5&lt;/code&gt; Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h5&amp;gt;&lt;/span&gt;Heading 5&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-h6-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;h6&lt;/code&gt; Tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h6&amp;gt;&lt;/span&gt;Heading 6&lt;span class="nt"&gt;&amp;lt;/h6&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#container"&gt;
  &lt;/a&gt;
  📌 Container
&lt;/h2&gt;

&lt;p&gt;Container tags are the tags that contain some data such as text, image, etc. There are several container tags in HTML.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-div-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;div&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;div tag or division tag is used to make blocks or divisions in the document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt; This is div block &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-span-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;span&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;span is a container for inline content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt; This is span block &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-p-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;p&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;Paragraph&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; This is a paragraph &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-pre-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;pre&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;pre tag represents pre-formatted text&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&lt;/span&gt; Hello World &lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-code-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;code&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;code tag is used to represent source codes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;
import python
&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#text-formatting"&gt;
  &lt;/a&gt;
  📌 Text Formatting
&lt;/h2&gt;

&lt;p&gt;Text formatting tags are used to format text or data of HTML documents. You can do certain things like creating italic, bold, strong text to make your document look more attractive and understandable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-b-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;b&lt;/code&gt; tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;I'm bold text&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-strong-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;strong&lt;/code&gt; tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;I'm important text&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-i-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;i&lt;/code&gt; tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;I'm italic text&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-em-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;em&lt;/code&gt; tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;Emphasized text&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-sub-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;sub&lt;/code&gt; tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;sub&amp;gt;&lt;/span&gt;Subscript&lt;span class="nt"&gt;&amp;lt;/sub&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-sup-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;sup&lt;/code&gt; tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;sup&amp;gt;&lt;/span&gt;Superscript&lt;span class="nt"&gt;&amp;lt;/sup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lists"&gt;
  &lt;/a&gt;
  📌 Lists
&lt;/h2&gt;

&lt;p&gt;Lists can be either numerical, alphabetic, bullet, or other symbols. You can specify list type and list items in HTML for the clean document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ol-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;ol&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;Ordered list starts with &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; tag and each list item starts with &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Data 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Data 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Data 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ul-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;ul&lt;/code&gt; tag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Your Data&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Your Data&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#media"&gt;
  &lt;/a&gt;
  📌 Media
&lt;/h2&gt;

&lt;p&gt;Media is anything that is present in digital form such as image, video, audio, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-audio-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;audio&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;It is used to embed sound content in the document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;audio&lt;/span&gt; &lt;span class="na"&gt;controls&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"demo.mp3"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"audio/mpeg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Your browser does not support the audio element.
&lt;span class="nt"&gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-img-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;img&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;It is used to embed or import image in a webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"Source_of_image"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Alternate text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-video-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;video&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;It is used to embed video in the webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"480"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt; &lt;span class="na"&gt;controls&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"demo_move.mp4"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"video/mp4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Your browser does not support the video tag.
&lt;span class="nt"&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#table"&gt;
  &lt;/a&gt;
  Table
&lt;/h2&gt;

&lt;p&gt;A table is a collection of rows and columns. It is used to represent data in tabular form.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table Structure&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;caption&amp;gt;&lt;/span&gt;Demo Table&lt;span class="nt"&gt;&amp;lt;/caption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Column1&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;colspan=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Column2&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data1&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data2&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data2&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data1&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data2&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data2&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tfoot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tfoot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  📌 Links
&lt;/h2&gt;

&lt;p&gt;Links are clickable text that can redirect you to some other page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-a-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;a&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; or anchor tag defines a hyperlink.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.codewithharry.com/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Visit CodeWithHarry.com!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#form"&gt;
  &lt;/a&gt;
  Form
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Sample Form&lt;/strong&gt;&lt;br&gt;
Form is used to collect user's input, generally user's data is sent to server for further processing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/action.php"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Name: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
Age: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"90"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;step=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"18"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"gender"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;selected=&lt;/span&gt;&lt;span class="s"&gt;"selected"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"male"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Male&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"female"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Female&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;"checked"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"newsletter"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"daily"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; Daily &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"newsletter"&lt;/span&gt;
&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"weekly"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; Weekly&lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;cols=&lt;/span&gt;&lt;span class="s"&gt;"20"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"comments"&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Comment&lt;span class="nt"&gt;&amp;lt;/textarea&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"terms"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"tandc"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;Accept terms&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#characters-amp-symbols"&gt;
  &lt;/a&gt;
  📌 Characters &amp;amp; Symbols
&lt;/h2&gt;

&lt;p&gt;Some symbols are not directly present on the keyboard, but there are some ways to use them in HTML documents. We can display them either by entity name, decimal, or hexadecimal value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copyright-symbol-%C2%A9"&gt;
  &lt;/a&gt;
  Copyright Symbol (©)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="ni"&gt;&amp;amp;copy;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#less-than-lt"&gt;
  &lt;/a&gt;
  Less than (&amp;lt;)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;lt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#greater-than-gt"&gt;
  &lt;/a&gt;
  Greater than (&amp;gt;)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ampersand-amp"&gt;
  &lt;/a&gt;
  Ampersand (&amp;amp;)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="ni"&gt;&amp;amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dollar-"&gt;
  &lt;/a&gt;
  Dollar ($)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="ni"&gt;&amp;amp;dollar;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#random-english-text"&gt;
  &lt;/a&gt;
  Random English Text
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;Elon Reeve Musk FRS is an entrepreneur and business magnate. He is the founder, CEO, and Chief Engineer at SpaceX; early stage investor, CEO, and Product Architect of Tesla, Inc.; founder of The Boring Company; and co-founder of Neuralink and OpenAI. A centibillionaire, Musk is one of the richest people in the world.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#if-you-liked-my-content-consider-following-me-on-twitter"&gt;
  &lt;/a&gt;
  If you liked my content consider following me on &lt;a href="https://twitter.com/cenacr007_harsh"&gt;Twitter&lt;/a&gt;.
&lt;/h4&gt;

&lt;p&gt;Also if you got any questions feel free to ping me on Twitter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You! 😊
&lt;/h3&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>3 Ways to Give Better Feedback</title>
      <author>Kenneth Larsen</author>
      <pubDate>Fri, 16 Jul 2021 06:24:16 +0000</pubDate>
      <link>https://dev.to/kennethlarsen/3-ways-to-give-better-feedback-48l6</link>
      <guid>https://dev.to/kennethlarsen/3-ways-to-give-better-feedback-48l6</guid>
      <description>&lt;p&gt;Giving feedback to your peers can be extremely difficult if you do not plan it right. Thankfully, there are a set of tools that can drastically improve those skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-the-proper-format"&gt;
  &lt;/a&gt;
  1: Use the proper format
&lt;/h2&gt;

&lt;p&gt;"Your pull requests are really annoying to review!" is not feedback that is easy to accept or easy to act on. It is very confronting and blaming and thereby switches the focus away from solving the problem.&lt;/p&gt;

&lt;p&gt;Instead, feedback should follow an observing formula:&lt;/p&gt;

&lt;p&gt;Observation of behaviour + impact of the behaviour + question or request = actionable and specific feedback.&lt;/p&gt;

&lt;p&gt;The formula turns the feedback from something blaming into: "Over the last three weeks, I've noticed that you have created large pull requests without any descriptions or instructions. This more than doubles the review time needed and has led to five production bugs. Can you help me understand why you prefer these large pull requests?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-negative-feedback-should-be-given-with-a-growth-mindset"&gt;
  &lt;/a&gt;
  2: Negative feedback should be given with a growth mindset
&lt;/h2&gt;

&lt;p&gt;To ensure that people can use negative feedback, you must give it with a growth mindset. If the negative feedback does not have the goal of helping your colleague grow in that particular area, then it is not valuable feedback.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-do-not-deliver-it-as-a-script"&gt;
  &lt;/a&gt;
  3: Do not deliver it as a script
&lt;/h2&gt;

&lt;p&gt;It might seem like a good idea to write down the feedback and read it to your colleague, but it will often come off as ungenuine. Feedback is about being present and listening, not delivering a presentation. &lt;/p&gt;

&lt;p&gt;With these three steps, you can easily take your feedback skills to the next level.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Huston, Therese; Let's Talk: Make Effective Feedback Your Superpower&lt;/p&gt;

&lt;p&gt;Hogan, Lara; Resilient Management&lt;/p&gt;

</description>
      <category>feedback</category>
      <category>management</category>
      <category>leadership</category>
      <category>reviews</category>
    </item>
    <item>
      <title>The 10 most in-demand roles in the Information Security domain</title>
      <author>infosec-jobs.com</author>
      <pubDate>Fri, 16 Jul 2021 06:16:46 +0000</pubDate>
      <link>https://dev.to/infosec_jobscom/the-10-most-in-demand-roles-in-the-information-security-domain-4599</link>
      <guid>https://dev.to/infosec_jobscom/the-10-most-in-demand-roles-in-the-information-security-domain-4599</guid>
      <description>&lt;p&gt;We thought it would be interesting to go deeper into the analytics part of running our InfoSec job board – in the most privacy focused way for our users, of course. So here we are now starting to expose some of our aggregated internal job data in a systematic fashion through a simple REST API with a list of generalized job titles that are posted on &lt;a href="https://infosec-jobs.com/"&gt;infosec-jobs.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The cool thing with this is that we are able to see what’s popular in terms of the roles employers are hiring for most often in the Cyber Security space.&lt;/p&gt;

&lt;p&gt;Our “methodology” here is quite simple: we’re primarily counting the occurence of job titles over the last 12 months, cleaned and adjusted for certain specialties that some companies like to do, e.g. inventing their own stuff that’s not being used by anyone else or adding crazy super-specific details to a vacancy title and so on. We also left out many titles with indicators regarding seniority or other requirements as we already have dedicated attributes for these. More on that probably in a future post.&lt;/p&gt;

&lt;p&gt;So here it is, our current (as of June 2021) top list of the ten roles in Information Security with the highest demand from employers on our site:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Security Engineer&lt;/li&gt;
&lt;li&gt;Application Security Engineer&lt;/li&gt;
&lt;li&gt;DevSecOps Engineer&lt;/li&gt;
&lt;li&gt;Cloud Security Architect&lt;/li&gt;
&lt;li&gt;Cloud Security Engineer&lt;/li&gt;
&lt;li&gt;Information Security Engineer&lt;/li&gt;
&lt;li&gt;Cyber Security Analyst&lt;/li&gt;
&lt;li&gt;Product Security Engineer&lt;/li&gt;
&lt;li&gt;Information Security Manager&lt;/li&gt;
&lt;li&gt;Security Analyst&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If your interested in the raw JSON data you can find the endpoint here: &lt;a href="https://infosec-jobs.com/api/list-job-titles/"&gt;https://infosec-jobs.com/api/list-job-titles/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The results there are updated every 6 hours, although it won’t really change that much anytime soon. And if it does we’ll maybe write about it 😉&lt;/p&gt;

&lt;p&gt;We also use all the job titles from that list for our brand new salaries survey to have a “standardized” selection of positions to choose from and attach salaries to. You can check out the survey – and the resulting dataset being released in the public domain – here: &lt;a href="https://salaries.infosec-jobs.com/"&gt;https://salaries.infosec-jobs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post appeared first on &lt;a href="https://insights.infosec-jobs.com/the-10-most-in-demand-roles-in-the-information-security-domain/"&gt;https://insights.infosec-jobs.com/the-10-most-in-demand-roles-in-the-information-security-domain/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>insights</category>
      <category>career</category>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>Learn PYTHON in ONE Week!</title>
      <author>SAIFULLAH🇮🇳</author>
      <pubDate>Fri, 16 Jul 2021 06:16:30 +0000</pubDate>
      <link>https://dev.to/saifullah/learn-python-in-one-week-1ok4</link>
      <guid>https://dev.to/saifullah/learn-python-in-one-week-1ok4</guid>
      <description>&lt;p&gt;Want to learn one of the most powerful and trending programming language within one week.&lt;/p&gt;

&lt;p&gt;Yes, you read it right you can learn Python within a week if you have dedication you can.&lt;br&gt;
Just follow the below path.&lt;/p&gt;

&lt;p&gt;Here is the path to learn &lt;strong&gt;Python&lt;/strong&gt; in just 1 week.&lt;/p&gt;

&lt;p&gt;So let's start with day by day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-01"&gt;
  &lt;/a&gt;
  DAY 01
&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#basic-concepts3-hours"&gt;
  &lt;/a&gt;
  Basic Concepts(3 hours)
&lt;/h1&gt;

&lt;p&gt;Variables&lt;br&gt;
 Display Output(Print command)&lt;br&gt;
 Take user input(input command)&lt;br&gt;
 Conditionals statements&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-02"&gt;
  &lt;/a&gt;
  DAY 02
&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#4-basic-concepts3-hours"&gt;
  &lt;/a&gt;
  4 Basic Concepts(3 hours)
&lt;/h1&gt;

&lt;p&gt;List(index, append, remove)&lt;br&gt;
 for loop&lt;br&gt;
 while loop&lt;br&gt;
 function&lt;/p&gt;

&lt;p&gt;you can learn basics from here -- &lt;br&gt;
&lt;a href="https://www.w3schools.com/python/default.asp"&gt;Python Basics&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-03"&gt;
  &lt;/a&gt;
  DAY 03
&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#simple-coding-problems5hours"&gt;
  &lt;/a&gt;
  Simple coding problems(5hours)
&lt;/h1&gt;

&lt;p&gt;Convert miles into Kilometers&lt;br&gt;
 Calculate Simple Interest&lt;br&gt;
 Find largest number in the list&lt;br&gt;
 Check a number is  prime or not&lt;br&gt;
 Sum of all digits in a number&lt;br&gt;
 Reverse String (check palindrome)&lt;br&gt;
 Calculate age&lt;br&gt;
 Build a simple Calculator&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-04"&gt;
  &lt;/a&gt;
  DAY 04
&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#data-structures3-hours"&gt;
  &lt;/a&gt;
  Data Structures(3 hours)
&lt;/h1&gt;

&lt;p&gt;Stack and Queue&lt;br&gt;
 Dictionary&lt;br&gt;
 Tuples&lt;/p&gt;

&lt;p&gt;you can learn DS from here -- &lt;br&gt;
&lt;a href="https://www.geeksforgeeks.org/data-structures/"&gt;Learn Data Structures&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-05"&gt;
  &lt;/a&gt;
  DAY 05
&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#oop4-hours"&gt;
  &lt;/a&gt;
  OOP(4 hours)
&lt;/h1&gt;

&lt;p&gt;Object&lt;br&gt;
 Class&lt;br&gt;
 Method and Constructor&lt;br&gt;
 OOP-Inheritance&lt;/p&gt;

&lt;p&gt;for this you can watch YouTube videos&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-06"&gt;
  &lt;/a&gt;
  DAY 06
&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#algorithm4-hours"&gt;
  &lt;/a&gt;
  Algorithm(4 hours)
&lt;/h1&gt;

&lt;p&gt;Binary Search&lt;br&gt;
 Bubble Sort&lt;br&gt;
 Selection Sort&lt;/p&gt;

&lt;p&gt;one of the best Algorithm course I came across--&lt;br&gt;
&lt;a href="https://youtube.com/playlist?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O"&gt;Learn Algorithm&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-07"&gt;
  &lt;/a&gt;
  DAY 07
&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#projects6-hours"&gt;
  &lt;/a&gt;
  Projects(6 hours)
&lt;/h1&gt;

&lt;p&gt;Build a web Crawler&lt;br&gt;
 or a news aggregator&lt;br&gt;
 or a simple game using pygame&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Voila!!&lt;/strong&gt; You made it you are now &lt;strong&gt;Junior Python developer.&lt;/strong&gt;&lt;br&gt;
So, that's it for now hope you find it useful.&lt;br&gt;
Now its all depends on you.&lt;br&gt;
Best of luck!! &lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to utilise JSDoc comment tags so that Visual Studio Code intellisense works great</title>
      <author>Dharmen Shah</author>
      <pubDate>Fri, 16 Jul 2021 06:09:59 +0000</pubDate>
      <link>https://dev.to/shhdharmen/how-to-utilise-jsdoc-comment-tags-so-that-visual-studio-code-intellisense-works-great-3ho4</link>
      <guid>https://dev.to/shhdharmen/how-to-utilise-jsdoc-comment-tags-so-that-visual-studio-code-intellisense-works-great-3ho4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#types-in-javascript"&gt;
  &lt;/a&gt;
  Types in JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript is a loosely typed and dynamic language. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// foo is now a number&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// foo is now a string&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// foo is now a boolean&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#intellisense-in-vs-code"&gt;
  &lt;/a&gt;
  Intellisense in VS Code
&lt;/h2&gt;

&lt;p&gt;Visual Studio Code's intellisense will only work, if it understands the &lt;code&gt;type&lt;/code&gt; of of your code.&lt;/p&gt;

&lt;p&gt;In above example, after you write first line, &lt;code&gt;let foo = 42;&lt;/code&gt; it will show you methods of a number:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HSr3WmCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372660432/JKt16SWHX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HSr3WmCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372660432/JKt16SWHX.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what if you assign a JSON, which is going to hold many properties like &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;createdOn&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bSyWUenA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372701424/76Qwg8gIF9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bSyWUenA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372701424/76Qwg8gIF9.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's also working fine. But, it's unlikely that your variable is going to hold values with initialization. So, now if you check for blank JSON, intellisense will stop working, because now VS code doesn't know the types.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-z0Ngbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372713349/nFnAUNqsN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-z0Ngbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372713349/nFnAUNqsN.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Without proper intellisense, we often make typos, call the method which doesn't exist or even try to access the properties of an objects by a random guess.&lt;/p&gt;

&lt;p&gt;To handle such and more complex scenarios, and make sure intellisense works right for those, we will use &lt;a href="https://jsdoc.app/"&gt;JSDoc&lt;/a&gt;'s &lt;code&gt;@param&lt;/code&gt;, &lt;code&gt;@type&lt;/code&gt; and &lt;code&gt;@typedef&lt;/code&gt; block tags.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jsdoc-to-the-rescue"&gt;
  &lt;/a&gt;
  JSDoc to the rescue
&lt;/h2&gt;

&lt;p&gt;JSDoc comes with lots of tags, you can checkout them all on it's website: &lt;a href="https://jsdoc.app/"&gt;https://jsdoc.app/&lt;/a&gt;. But for this article, we are going to focus on below 3 tags:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/tags-param.html"&gt;&lt;code&gt;@param&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/tags-type.html"&gt;&lt;code&gt;@type&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/tags-typedef.html"&gt;&lt;code&gt;@typedef&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#-raw-param-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;@param&lt;/code&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;@param&lt;/code&gt; tag provides the name, type, and description of a function parameter.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;@param&lt;/code&gt; tag requires you to specify the name of the parameter you are documenting. You can also include the parameter's type, enclosed in curly brackets, and a description of the parameter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/tags-param.html#overview"&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's look at some examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @param {string} somebody
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;somebody&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;somebody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After above code, VS code's intellisense will work great whenever you try to call &lt;code&gt;sayHello&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4k4nO8ku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372756661/aJe_pj1jm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4k4nO8ku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372756661/aJe_pj1jm.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can look at more examples at &lt;a href="https://jsdoc.app/tags-param.html#examples"&gt;https://jsdoc.app/tags-param.html#examples&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-type-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;@type&lt;/code&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;@type&lt;/code&gt; tag allows you to provide a type expression identifying the type of value that a symbol may contain, or the type of value returned by a function. You can also include type expressions with many other JSDoc tags, such as the &lt;code&gt;@param&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;A type expression can include the JSDoc namepath to a symbol (for example, &lt;code&gt;myNamespace.MyClass&lt;/code&gt;); a built-in JavaScript type (for example, &lt;code&gt;string&lt;/code&gt;); or a combination of these. You can use any &lt;a href="https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#type-expressions"&gt;Google Closure Compiler type expression&lt;/a&gt;, as well as several other formats that are specific to JSDoc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/tags-type.html#overview"&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's take a look at example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** @type {Array} */&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For above code, typing &lt;code&gt;foo.&lt;/code&gt; will load all &lt;code&gt;Array&lt;/code&gt;'s properties and methods:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1KTK9wwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372772162/tMU-pXRxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1KTK9wwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372772162/tMU-pXRxg.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More examples at &lt;a href="https://jsdoc.app/tags-type.html#examples"&gt;https://jsdoc.app/tags-type.html#examples&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-typedef-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;@typedef&lt;/code&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;@typedef&lt;/code&gt; tag is useful for documenting custom types, particularly if you wish to refer to them repeatedly. These types can then be used within other tags expecting a type, such as &lt;code&gt;@type&lt;/code&gt; or &lt;code&gt;@param&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/tags-typedef.html#overview"&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;This tag is really helpful, it helps us to shape any complex type. Let's take a look at example.&lt;/p&gt;

&lt;p&gt;This example defines a more complex type, an object with several properties, and sets its namepath so it will be displayed along with the class that uses the type. Because the type definition is not actually exposed by the function, it is customary to document the type definition as an inner member.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/toast.js&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @typedef {Object} Toast
 * @property {string} id
 * @property {boolean} closed - Indicates whether user has close the toast.
 * @property {Date} generatedOn - Indicates when the toast was generated.
 * @property {string} message - toast content.
 * @property {"warn" | "info"} type -  Indicates type of toast.
 * Also useful to show different icons.
 */&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * A function for showing toast
 * @param {Toast} toast - {@link toast} object
 * containing all components of the toast.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showToast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the breakdown of above code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first line:

&lt;ol&gt;
&lt;li&gt;We first indicated that we want to create a custom type using &lt;code&gt;@typedef&lt;/code&gt; tag&lt;/li&gt;
&lt;li&gt;Then we indicated that it's going to be an &lt;code&gt;Object&lt;/code&gt;. You can also create simpler custom type using primitive date types, for example &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;And lastly, we named this type as &lt;code&gt;Toast&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Now, as &lt;code&gt;Toast&lt;/code&gt; is going to be an &lt;code&gt;Object&lt;/code&gt;, in rest of the comments, we defined what are it's &lt;code&gt;properties&lt;/code&gt; going to be using &lt;code&gt;@property&lt;/code&gt; tag. You can learn more about &lt;code&gt;@property&lt;/code&gt; tag &lt;a href="https://jsdoc.app/tags-property.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now if you try to call &lt;code&gt;showToast&lt;/code&gt;, VS code will do it's magic:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxO1B22n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372818836/rFMwqFCUy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxO1B22n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626372818836/rFMwqFCUy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, this is not enough. In practical scenarios, you would be generating &lt;code&gt;Toast&lt;/code&gt;s in different files and calling &lt;code&gt;showToast&lt;/code&gt; from there. You can export and import &lt;code&gt;showToast&lt;/code&gt; in other files, but what about &lt;code&gt;Toast&lt;/code&gt; type definition?&lt;/p&gt;

&lt;p&gt;You can also import type definition the same way you import bindings from another module. But as types are created in comments, you need import them in comments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/home.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showToast&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./toast&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @returns {import("./toast").Toast[]}
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getToasts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allToasts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getToasts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;allToasts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;showToast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just to emphasis, here's how we imported &lt;code&gt;Toast&lt;/code&gt; type definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @returns {import("./toast").Toast[]}
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about &lt;code&gt;@typedef&lt;/code&gt; at &lt;a href="https://jsdoc.app/tags-typedef.html"&gt;https://jsdoc.app/tags-typedef.html&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned how JSDoc block tags, &lt;code&gt;@param&lt;/code&gt;, &lt;code&gt;@type&lt;/code&gt; and &lt;code&gt;@typedef&lt;/code&gt; can help us to achieve maximum out of VS Code's intellisense and code faster without getting into un-wanted issues.&lt;/p&gt;

&lt;p&gt;That's it! Thanks for reading. Let me know your thoughts and feedbacks in comments section.&lt;/p&gt;

&lt;p&gt;And yes, always believe in yourself 🌅&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CjRdMZ4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626373183525/KRCCwEHxN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CjRdMZ4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626373183525/KRCCwEHxN.jpeg" alt="joshua-earle-JAwzCW0JpIw-unsplash.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@joshuaearle?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Joshua Earle&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/faith?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
&lt;/small&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>jsdoc</category>
      <category>programming</category>
    </item>
    <item>
      <title>Learning Python-Basic course: Day 17, Summary of the week and Insertion sort.</title>
      <author>Aatmaj</author>
      <pubDate>Fri, 16 Jul 2021 05:44:53 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-17-summary-of-the-week-and-insertion-sort-4bi0</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-17-summary-of-the-week-and-insertion-sort-4bi0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-learn-about-the-insertion-sort-code-then-write-a-program-to-change-capital-and-small-cases"&gt;
  &lt;/a&gt;
  🤟Today we will learn about the insertion sort code, then write a program to change capital and small cases.
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#summary-of-the-week"&gt;
  &lt;/a&gt;
  Summary of the week
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-14-basic-exception-and-error-handling-using-try-except-5f38"&gt;Day 14&lt;/a&gt;- we covered the &lt;code&gt;try&lt;/code&gt; &lt;code&gt;catch&lt;/code&gt; statements, and basic exception handling. Advanced exception handling and types of exceptions, user defined exceptions is for later.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-15-more-about-try-except-1nmj"&gt;Day 15&lt;/a&gt;- We solved some creative questions based on &lt;code&gt;try&lt;/code&gt; &lt;code&gt;catch&lt;/code&gt; and learnt about nesting them. We also saw one really challenging question related to &lt;code&gt;try&lt;/code&gt; &lt;code&gt;except&lt;/code&gt; &lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-15-more-about-try-except-1nmj"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-16-fractal-lists-and-other-questions-1ca6"&gt;Day 16&lt;/a&gt; We solved more questions on lists now with the added power of &lt;code&gt;try&lt;/code&gt; &lt;code&gt;except&lt;/code&gt;. We covered questions like fractal lists, alphabetical order of lists and reversing lists.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#insertion-sort"&gt;
  &lt;/a&gt;
  Insertion sort.
&lt;/h2&gt;

&lt;p&gt;Insertion sort is a simple sorting algorithm. It works similar to the way you sort cards. If you are new to this algorithm, check out &lt;a href="https://www.geeksforgeeks.org/insertion-sort/"&gt;this link&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c1"&gt;#key = a[i]
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;#swap
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'''
Logic-
Set the key equal to the first unsorted value.
Compare the key and the sorted elements.
Move the key to the required position.
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code enclosed in block comments  &lt;code&gt;'''&lt;/code&gt; is block comments. Whenever working in teams, such documentation is of critical. More about it &lt;a href="https://dev.to/aatmaj/document-today-or-repent-tommorrow-1mg8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For those who are new to Data structures and algorithms, please check out this course on dev.to.-&lt;a href="https://dev.to/ayabouchiha/series/13547"&gt;Data structure &amp;amp; algorithms Series' Articles&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We did the alphabetical ordering yesterday(In case you missed it- &lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-16-fractal-lists-and-other-questions-1ca6"&gt;here&lt;/a&gt;) Replace the sorted() method used in it with insertion sort. &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/81fab3a1d869f4d75a0caecae1cf2abfbaff31f6/Basic/Day%2017/Exercise%20solutions/Exercise%201.py"&gt;Answer here&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Sample question&lt;br&gt;
1) &lt;strong&gt;Capital to Small&lt;/strong&gt; Write a program to turn capital letters into small case and small case to  capital case in a list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter a letter "&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#65=A
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;#65=A, 97=a 
&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#65=A
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error. Please enter only characters."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a letter a
Please enter a letter B
Please enter a letter c
Please enter a letter D
A
b
C
d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an example of error handling using &lt;code&gt;if-else&lt;/code&gt; statements.&lt;/p&gt;







&lt;p&gt;✌️So friends that's all for now. 😊 Hope you all are having fun.😎 Please let me know in the comment section below 👇. And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me. 😉&lt;br&gt;
Thank you all👍&lt;/p&gt;




&lt;p&gt;One more way to ask any doubts is by forking the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/tree/main/Basic/Doubts"&gt;repo here&lt;/a&gt; and sending Pull request of your doubt.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For those who have not yet made account in Dev.to, you can have a free easy sign-up using your mail or GitHub accounts. I would suggest the budding developers to create your GitHub free account right away. You would require to register sooner or later anyways&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥&lt;br&gt;
Next day will begin from Tuesday📅, Monday is reserved for.... &lt;a href="https://dev.to/aatmaj/launching-matlab-mondays-a-crash-course-nb1"&gt;MATLAB MONDAYS💥&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-me-for-updates-on-github-visit-the-learning-python-repo-made-for-this-course"&gt;
  &lt;/a&gt;
  Follow me for updates on &lt;a href="https://github.com/Aatmaj-Zephyr"&gt;Github&lt;/a&gt;. Visit the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;learning Python repo&lt;/a&gt; made for this course.
&lt;/h3&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Tìm hiểu địa chỉ cung cấp bộ bàn ăn cao cấp, chất lượng!</title>
      <author>Showroom Hùng Tuý</author>
      <pubDate>Fri, 16 Jul 2021 04:35:55 +0000</pubDate>
      <link>https://dev.to/showroomhungtuy/tim-hieu-dia-chi-cung-cap-bo-ban-an-cao-cap-chat-luong-760</link>
      <guid>https://dev.to/showroomhungtuy/tim-hieu-dia-chi-cung-cap-bo-ban-an-cao-cap-chat-luong-760</guid>
      <description>&lt;p&gt;&lt;em&gt;Cũng giống như những không gian nội thất khác, việc chọn các sản phẩm nội chất cho phòng bếp đặc biệt là bàn ăn cũng cần được lựa chọn một cách kỹ lưỡng, muốn được như vậy chúng ta cần tìm được một địa chỉ cung cấp uy tín .Vậy hiện nay đâu là địa chỉ cung cấp &lt;/em&gt;&lt;em&gt;bộ bàn ăn cao cấp, chất lượng, vừa đẹp lại có được độ bền tốt trong quá trình sử dụng lâu dài? Hãy cùng &lt;/em&gt;&lt;strong&gt;&lt;a href="https://hungtuy.com.vn/noi-that-pc35500.html"&gt;nội thất cao cấp&lt;/a&gt;&lt;/strong&gt;&lt;em&gt; Hùng Tuý tìm hiểu ngay trong bài viết sau đây.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Một số cách lựa chọn bàn ăn phù hợp với căn bếp&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Khi mua bàn ăn, rất nhiều người thường lựa chọn theo cảm tính. Nhưng đây là cách lựa chọn hoàn toàn sai lầm. Chúng ta nên mua bộ &lt;/span&gt;&lt;strong&gt;&lt;a href="https://hungtuy.com.vn/ban-an-pc20281.html"&gt;bàn ăn cao cấp&lt;/a&gt;&lt;/strong&gt;&lt;span&gt; dựa vào kích thước của không gian nhà bếp. Với những không gian không quá rộng chúng ta không nên chọn những mẫu bàn ăn có kích thước lớn. Bởi như vậy sẽ khiến cho căn bếp trở nên chật chội, làm ảnh hưởng đến quá trình nấu nướng, di chuyển.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--snrgDMSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hungtuy.com.vn/mediacenter/media/images/1498/category/ava/s1000_1000/noi-that-phong-an-cao-cap-01-1590638094.jpg" class="article-body-image-wrapper"&gt;&lt;img alt="Nội thất phòng ăn cao cấp nhập khẩu châu âu chính hãng tại Hà Nội" src="https://res.cloudinary.com/practicaldev/image/fetch/s--snrgDMSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hungtuy.com.vn/mediacenter/media/images/1498/category/ava/s1000_1000/noi-that-phong-an-cao-cap-01-1590638094.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nên lựa chọn bàn ăn sao cho phù hợp với không gian&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Tốt nhất, các bạn nên lựa chọn những bộ bàn ăn có kích thước vừa tầm sao cho thừa ra khoảng 1 mét phía sau các ghế ngồi để việc di chuyển, sinh hoạt nấu nướng trở nên dễ dàng hơn.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Địa chỉ cung cấp bộ bàn ăn cao cấp, chất lượng&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Hiện nay trên thị trường có rất nhiều địa chỉ cung cấp những bộ bàn ăn với nhiều kiểu dáng, mẫu mã khác nhau. Tuy nhiên để tìm được một địa chỉ uy tín thì không phải ai cũng biết. Thực tế cho thấy, hiện nay hàng giả hàng nhái đang được trà trộn rất nhiều trên thị trường. Bởi vậy mà làm sao có thể được bộ bàn ăn cao cấp chất lượng tốt đang là câu hỏi của rất nhiều người.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---T1LVYxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://photo-cms-viettimes.zadn.vn/c720x480/Uploaded/2021/obbcpuo/2019_06_11/vt_hung_tuy2678004_1162019.jpg" class="article-body-image-wrapper"&gt;&lt;img alt="Đại gia&amp;amp;quot; Hùng Túy có đứng sau An Quý Hưng trong game Vinaconex?" src="https://res.cloudinary.com/practicaldev/image/fetch/s---T1LVYxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://photo-cms-viettimes.zadn.vn/c720x480/Uploaded/2021/obbcpuo/2019_06_11/vt_hung_tuy2678004_1162019.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hùng Túy hiện đang là địa chỉ được nhiều người lựa chọn&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Gợi ý cho bạn, hiện nay Hùng Túy đang là địa chỉ cung cấp bộ bàn ăn uy tín, được rất nhiều khách hàng đánh giá cao. Mỗi một sản phẩm tại Hùng Tuý đều được đảm bảo 100% về chất lượng. Với nhiều năm trong nghề, Hùng Tuý luôn đem đến cho người tiêu dùng những sản phẩm có chất lượng tốt nhất. Cùng với đó, khi mua hàng khách hàng sẽ được thỏa sức lựa chọn những mẫu sản phẩm khác nhau, được mua hàng với giá cạnh tranh cùng đội ngũ nhân viên tư vấn nhiệt tình. Chính vì vậy mà Hùng Tuý luôn là sự lựa chọn hàng đầu của đông đảo người dùng.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Lời kết&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Chắc hẳn, thông qua bài viết này các bạn cũng đã tìm được cho mình một địa chỉ cung cấp &lt;/span&gt;&lt;strong&gt;&lt;a href="https://www.dailymotion.com/noithatcaocaphungtuy"&gt;bàn ăn cao cấp nhập khẩu&lt;/a&gt; &lt;/strong&gt;&lt;span&gt;chất lượng. Hy vọng những thông tin trên hữu ích cho bạn, hãy trở thành người tiêu dùng thông thái để có thể chọn cho gia đình mình bộ bàn ăn đẹp có chất lượng tốt nhất nhé&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>LinkedList Questions: Middle Element of Linked List - Optimal Approach</title>
      <author>Kathan Vakharia</author>
      <pubDate>Fri, 16 Jul 2021 04:34:43 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/linkedlist-questions-middle-element-of-linked-list-optimal-approach-3h6d</link>
      <guid>https://dev.to/kathanvakharia/linkedlist-questions-middle-element-of-linked-list-optimal-approach-3h6d</guid>
      <description>&lt;p&gt;In this series of posts, I will discuss coding questions on the &lt;code&gt;LinkedList&lt;/code&gt; Data structure.&lt;br&gt;
The posts in this series will be organized in the following way,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Question Link ❓&lt;/li&gt;
&lt;li&gt;Possible Explanation 📝&lt;/li&gt;
&lt;li&gt;Documented C++ Code 🧹&lt;/li&gt;
&lt;li&gt;Time and Space Complexity Analysis ⌛🌌&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#the-question"&gt;
  &lt;/a&gt;
  The Question
&lt;/h2&gt;

&lt;p&gt;Given a non-empty, singly linked list with head node &lt;code&gt;head&lt;/code&gt;, return a middle node of the linked list.&lt;/p&gt;

&lt;p&gt;If there are two middle nodes, return the second middle node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/problems/middle-of-the-linked-list/"&gt;https://leetcode.com/problems/middle-of-the-linked-list/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Give yourself at least 15-20 mins to figure out the solution :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kathanvakharia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuqECyTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bhbJL83l--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/458861/ab6297f8-b3bc-440d-bcba-e002322f382a.jpg" alt="kathanvakharia"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kathanvakharia/middle-element-of-linked-list-naive-approach-2589" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;LinkedList Questions: Middle Element of Linked List - Naive Approach&lt;/h2&gt;
      &lt;h3&gt;Kathan Vakharia ・ Jul 11 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#algorithms&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cpp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linkedlist&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I hope you have read the previous article because I want to relate the ideas of both approaches rather than making you feel, an optimal solution is a completely new thing! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👀 Observation: If you recall from the last post, we can reach the middle node after &lt;code&gt;floor(L/2)&lt;/code&gt; iterations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Remember the above point, I'll come to this point after we see the algorithm. &lt;/p&gt;

&lt;p&gt;Here's the algorithm.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initialize two pointers, &lt;code&gt;fast&lt;/code&gt; and &lt;code&gt;slow&lt;/code&gt; both pointing to &lt;code&gt;head&lt;/code&gt; initially.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move &lt;code&gt;fast&lt;/code&gt; double the speed than &lt;code&gt;slow&lt;/code&gt; untill &lt;code&gt;fast&lt;/code&gt; becomes &lt;strong&gt;NULL&lt;/strong&gt; or it has reached the last node.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//pseudo code
while fast!=NULL and fast-&amp;gt;next != NULL
        fast = fast-&amp;gt;next-&amp;gt;next
        slow = slow-&amp;gt;next
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;return &lt;code&gt;slow&lt;/code&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#why-does-this-work"&gt;
  &lt;/a&gt;
  Why does this work?
&lt;/h3&gt;

&lt;p&gt;First of all, we can either have an &lt;em&gt;odd&lt;/em&gt; length linkedlist or an &lt;em&gt;even&lt;/em&gt; length LinkedList.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Case 1: Odd length

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fast&lt;/code&gt; will point to the last node after &lt;code&gt;floor(L/2)&lt;/code&gt; iterations.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Case 2: Even Length

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fast&lt;/code&gt; will become &lt;strong&gt;NULL&lt;/strong&gt; after traversing the entire list in &lt;code&gt;floor(L/2)&lt;/code&gt; iterations.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So no matter what the type of LinkedList, one of the loop termination conditions will hit after &lt;code&gt;floor(L/2)&lt;/code&gt; iterations, and by that time &lt;code&gt;slow&lt;/code&gt; would be pointing to the required middle node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J6tHKS87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrolp7s3urc0wq43q7io.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6tHKS87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrolp7s3urc0wq43q7io.jpg" alt="Image for explanation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  C++ Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#definition-of-linked-list"&gt;
  &lt;/a&gt;
  Definition of Linked List
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Definition for singly-linked list.&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;  &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;middleNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;//make fast reach the end of the list by moving it double time the slow&lt;/span&gt;
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;//* now slow will point to the required node&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complexity-analysis"&gt;
  &lt;/a&gt;
  Complexity Analysis
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;N&lt;/code&gt;: Length of Linked List.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-complexity-on"&gt;
  &lt;/a&gt;
  Time Complexity: O(N)
&lt;/h3&gt;

&lt;p&gt;We are doing O(N/2) iterations which asymptotically is the same as O(N)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-complexity-o1"&gt;
  &lt;/a&gt;
  Space Complexity: O(1)
&lt;/h3&gt;

&lt;p&gt;We didn't use any extra space.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>cpp</category>
      <category>codenewbie</category>
      <category>linkedlist</category>
    </item>
    <item>
      <title>15 CSS3 Best practices of  for beginners to pro.</title>
      <author>menomanabdulla</author>
      <pubDate>Fri, 16 Jul 2021 04:12:32 +0000</pubDate>
      <link>https://dev.to/menomanabdulla/15-css3-best-practices-of-for-beginners-to-pro-253d</link>
      <guid>https://dev.to/menomanabdulla/15-css3-best-practices-of-for-beginners-to-pro-253d</guid>
      <description>&lt;p&gt;Whether you are a beginner or an expert in Frontend Development it is important to follow some best practices in order to keep your cascading style-sheet (CSS) optimized and organized. &lt;/p&gt;

&lt;p&gt;CSS guy is an artist, as an artist you should have some unique working strategy that’s make your action while working more enjoyable and fun. Here is some tips I share, you could follow and write your style as pro. Wow! let’s get started:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#01-dont-put-everything-in-to-one-css-file"&gt;
  &lt;/a&gt;
  01. Don't put everything in to one CSS file
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Case-01:&lt;/strong&gt; One large CSS file leads to fewer HTTP requests, &lt;br&gt;
which can improve performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Case-02:&lt;/strong&gt; Several smaller file leads to easier organization &lt;br&gt;
which will make development and maintenance cheaper and easier.&lt;/p&gt;

&lt;p&gt;Now what should our strategy for both scenarios? That’s a million &lt;br&gt;
dollars question. Okay let me clear your confusion; we can follow &lt;br&gt;
the win-win rules. &lt;/p&gt;

&lt;p&gt;“We could use multiple style sheets to keep things better &lt;br&gt;
organized, and then compress them into one file before putting &lt;br&gt;
them on the site, to improve performance.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#02-follow-topdown-approach-for-organize-your-stylesheet"&gt;
  &lt;/a&gt;
  02. Follow top-down approach for organize your stylesheet
&lt;/h3&gt;

&lt;p&gt;It always makes sense to lay your stylesheet out in a way that allows you to quickly find parts of your code. I recommend a top-down format that tackles styles as they appear in the source code. So an example stylesheet might be ordered like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uX56qs9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0x2sop2trqb0xa4sev0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uX56qs9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0x2sop2trqb0xa4sev0.png" alt="Follow top-down approach for organize your stylesheet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#03-make-ui-components"&gt;
  &lt;/a&gt;
  03. Make UI components
&lt;/h3&gt;

&lt;p&gt;Tried to make some prebuild UI component that you may use in future just simply plug a class name and have some properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#04-comment-your-css"&gt;
  &lt;/a&gt;
  04. Comment your CSS
&lt;/h3&gt;

&lt;p&gt;For better readability and organized coding, code commenting play insane role. Code commenting helps code refactor in future and helps other developer to understand the project codebase. Code commenting is always good practice. Those developer who write code with proper commenting, have huge market value. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0k9921bD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcs333jmtr7bzb5a300r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0k9921bD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcs333jmtr7bzb5a300r.png" alt="Comment your CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#05-how-to-write-consistent-css"&gt;
  &lt;/a&gt;
  05. How to write consistent CSS
&lt;/h3&gt;

&lt;p&gt;Consistent CSS is important for team collaboration as well as in large project. At the beginning part of the project you can set some rules for maintain throughout to your entire stylesheet. It will help you to write consistent CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#06-css-namespacing"&gt;
  &lt;/a&gt;
  06 CSS namespacing
&lt;/h3&gt;

&lt;p&gt;CSS namespacing helps you to create a structure that governs how CSS properties get written. If you follow the convention, you’ll be able to write CSS without being afraid of side effects. &lt;br&gt;
Here’s a list of namespaces I use:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;.l-: layouts&lt;/li&gt;
&lt;li&gt;.o-: objects&lt;/li&gt;
&lt;li&gt;.c-: components&lt;/li&gt;
&lt;li&gt;.js: JavaScript hooks&lt;/li&gt;
&lt;li&gt;.is-|.has-: state classes&lt;/li&gt;
&lt;li&gt;.t1|.s1: typography sizes&lt;/li&gt;
&lt;li&gt;.u-: utility classes&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#07-use-bem-or-block-elements-modifier"&gt;
  &lt;/a&gt;
  07. Use BEM or Block elements modifier
&lt;/h3&gt;

&lt;p&gt;Have you worked on large websites that spans more than a few pages? If you did, you probably realized the horrors of not conforming to a robust CSS architecture. You probably would also have researched on ways to write maintainable CSS.&lt;/p&gt;

&lt;p&gt;BEM convention is the good choice for well-maintained CSS architecture. If you’ve never heard of BEM before, it stands for block, element and modifier. It looks incredibly ugly when you first feast your eyes on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWA0rEMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yjsyzehh85suhy88jos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWA0rEMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yjsyzehh85suhy88jos.png" alt="Use BEM or Block elements modifier"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hated BEM to a point where I didn’t even give it a chance when I first got to know about it. I can’t remember what made me try BEM, but I realized how powerful it is to work with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#08-css-class-nesting-or-complex-selectors"&gt;
  &lt;/a&gt;
  08. CSS class nesting or complex selectors
&lt;/h3&gt;

&lt;p&gt;There are two major problems with using complex selectors. First, your increased specificity will not only make it harder to later rewrite existing rules, but also increase the time it takes for the browser to match selectors.&lt;/p&gt;

&lt;p&gt;When your browser is trying to interpret selectors and decide which element it matches, they go from right to left. This is faster in terms of performance than doing the other way around. Let’s take the selector below as an example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eWQMQCNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j86mo2bao510vuavrr4f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eWQMQCNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j86mo2bao510vuavrr4f.png" alt="CSS class nesting or complex selectors "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your browser will first start from the span. It will match all the span tags then go to the next one. It will filter out the spans that are inside a .selector class, and so on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4eHvxV8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odoea18q8pt8j4e2emnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4eHvxV8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odoea18q8pt8j4e2emnn.png" alt="CSS class nesting or complex selectors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don't recommend using tags for CSS selectors because it will match for every tag. While the difference can only be measured in a fraction of a millisecond, little things add up. More importantly, it’s good practice to reduce complexity and be specific.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#09-use-css-preprocessor-like-scss-sass-and-less"&gt;
  &lt;/a&gt;
  09. Use CSS preprocessor like SCSS, SASS and LESS
&lt;/h3&gt;

&lt;p&gt;For keeping your CSS DRY(Don’t repeat yourself), use CSS preprocessor like SCSS,SASS or LESS. The biggest benefit to using these preprocessor is that you can define your re-usable code at the top and reuse it by @ include and @ extend throughout all of your CSS.&lt;/p&gt;

&lt;p&gt;CSS preprocessor will make your life easier to write modular based CSS, it’s helps to write more organized and more consistent  cascading stylesheet. BEM naming convention with CSS namespacing and CSS preprocessor is perfect combo for robust CSS architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-reduce-redundancy"&gt;
  &lt;/a&gt;
  10. Reduce redundancy
&lt;/h3&gt;

&lt;p&gt;Sometimes it’s hard to spot redundancy, especially when repeating rules don’t follow the same order in both selectors. But if your classes differ in just one or two rules it’s better to outsource those rules and use them as an extra class, instead of this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-vertically-align-any-elements-using-only-css"&gt;
  &lt;/a&gt;
  11. Vertically align any elements using only CSS
&lt;/h3&gt;

&lt;p&gt;For vertically align any elements modern CSS introduce CSS flex and grid system. Those are awesome tolls for dynamically centered any elements.&lt;/p&gt;

&lt;p&gt;By Flex: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvrko2oJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9qza6ttnhll2xno83y7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvrko2oJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9qza6ttnhll2xno83y7.png" alt="Vertically align any elements using only CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By Grid: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ve4ATdtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xotv1wt9vgow0146hux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ve4ATdtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xotv1wt9vgow0146hux.png" alt="Vertically align any elements using only CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-try-to-use-shorthand-css-properties"&gt;
  &lt;/a&gt;
  12. Try to use shorthand CSS properties
&lt;/h3&gt;

&lt;p&gt;There is lots of way, you can ménage your style but try to stick with best approach. Always try to use CSS shorthand, it will reduce your code as well as give your stylesheet a nice and good looking shape. &lt;/p&gt;

&lt;p&gt;Bad Practice: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kWgyvQpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sozcg8pukc06lfv4bc5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kWgyvQpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sozcg8pukc06lfv4bc5r.png" alt="Try to use shorthand CSS properties"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good Practice: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_oXYwCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gy5crc21eq9m295qxgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_oXYwCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gy5crc21eq9m295qxgb.png" alt="Try to use shorthand CSS properties"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-use-rems-or-ems"&gt;
  &lt;/a&gt;
  13. Use rem’s or em’s
&lt;/h3&gt;

&lt;p&gt;Using rem’s or em’s is more dynamic way instead of using pixels. Try to use rem’s or em’s rather than pixels.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-avoid-important"&gt;
  &lt;/a&gt;
  14. Avoid !important
&lt;/h3&gt;

&lt;p&gt;For avoid code collusion and if you don’t want to break normal flow of browser behavior with your CSS don’t ever use !important. It’s really hard to find-out conflict within !important and refactor the whole codebase in large scale application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-use-mobile-first-development-approach"&gt;
  &lt;/a&gt;
  15. Use mobile first development approach
&lt;/h3&gt;

&lt;p&gt;A mobile-first approach to styling means that styles are applied first to mobile devices.&lt;br&gt;
Concern with: &lt;br&gt;
1.Min-Width Media Queries&lt;br&gt;
2.Progressive Enhancement (CSS &amp;amp; javaScript)&lt;br&gt;
3.Content (Not Device Width) Determines Breakpoints&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-words"&gt;
  &lt;/a&gt;
  Last Words
&lt;/h3&gt;

&lt;p&gt;I hope you like my CSS3 coding guidelines and front end web development best practices. You can check my &lt;a href="https://dev.to/menomanabdulla/15-html5-best-practices-for-beginners-to-master-47fb"&gt;15 Best practices of HTML5 for beginners&lt;/a&gt; for give your markup good shape. If you appreciate it or find any errors let me know in comments. Thanks for this journey &amp;amp; Happy Coding.&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>html</category>
    </item>
  </channel>
</rss>
