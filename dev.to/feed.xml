<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Hosting Kotlin/JS on GitHub Pages via GitHub Actions</title>
      <author>Sebastian Aigner</author>
      <pubDate>Fri, 05 Feb 2021 12:16:28 +0000</pubDate>
      <link>https://dev.to/kotlin/hosting-kotlin-js-on-github-pages-via-github-actions-3gep</link>
      <guid>https://dev.to/kotlin/hosting-kotlin-js-on-github-pages-via-github-actions-3gep</guid>
      <description>&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; is an easy way to &lt;strong&gt;host your Kotlin/JS application&lt;/strong&gt; - and in combination with the &lt;strong&gt;continuous integration&lt;/strong&gt; service &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;, you can easily set up a smooth development (and deployment!) experience for your projects. Read on to learn how you can &lt;strong&gt;build and test your application on GitHub's CI&lt;/strong&gt;, and get your &lt;strong&gt;Kotlin/JS web apps published for free&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we are going to configure GitHub Actions and Pages so that &lt;strong&gt;new code&lt;/strong&gt; pushed to our repository or added via pull request &lt;strong&gt;is automatically validated&lt;/strong&gt; (by having the project built and our tests run on GitHub's servers), and code pushed to the main branch of our project is automatically made &lt;strong&gt;available to the public&lt;/strong&gt; (by generating and publishing production artifacts of our app).&lt;/p&gt;

&lt;p&gt;To achieve this, we are going to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#sample-setup"&gt;Set up a quick Kotlin/JS project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#github-integration"&gt;Share its code on GitHub&lt;/a&gt; (via IntelliJ IDEA's Git integration)&lt;/li&gt;
&lt;li&gt;&lt;a href="#gh-action-setup"&gt;Set up GitHub Actions' workflow YAML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gh-pages-setup"&gt;Set up GitHub pages to work with the result of our Actions workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If you already know the basics, and want to skip straight to the configuration section, &lt;a href="#gh-action-setup"&gt;click here&lt;/a&gt; – or &lt;a href="https://github.com/SebastianAigner/kotlin-js-on-gh-pages"&gt;find the sample project directly on GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-sample-kotlinjs-application" class="anchor"&gt;
  &lt;/a&gt;
  Setting up our sample Kotlin/JS application &lt;a&gt;
&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To &lt;em&gt;deploy&lt;/em&gt; a project, we must first &lt;em&gt;have&lt;/em&gt; a project. For this demo, I will use an &lt;strong&gt;example generated via project wizard&lt;/strong&gt; – if you already have a Kotlin/JS application you would like to deploy, feel free to skip ahead and use it instead.&lt;/p&gt;

&lt;p&gt;A boilerplate Kotlin/JS project is quickly generated in &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ IDEA&lt;/a&gt; by navigating to File | New | Project..., selecting "Kotlin" in the sidebar, and choosing a &lt;strong&gt;project template&lt;/strong&gt; in the "Kotlin/JS" section (I'm choosing a React project). We just need to make sure that a Project JDK is selected. For everything else, the default settings are fine and don't need to be adjusted:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8F45ZQep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1nzk5keyrms4u7bh619e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8F45ZQep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1nzk5keyrms4u7bh619e.png" alt="new-project-wizard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a basic project, let's start by &lt;strong&gt;getting it on GitHub&lt;/strong&gt; - creating a repository and pushing our code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-our-code-on-github" class="anchor"&gt;
  &lt;/a&gt;
  Putting our code on GitHub &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We could, of course, use &lt;a href="https://guides.github.com/activities/hello-world/#repository"&gt;GitHub's web interface&lt;/a&gt; to set up our repository, and wire up our local repository manually – but &lt;strong&gt;&lt;a href="https://www.jetbrains.com/help/idea/version-control-integration.html"&gt;IntelliJ IDEA's Version Control Integration&lt;/a&gt;&lt;/strong&gt; makes it &lt;strong&gt;even smoother&lt;/strong&gt; to move our project code into a new GitHub Repository. We simply select "&lt;strong&gt;Share Project on GitHub&lt;/strong&gt;" in the "VCS" tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WkkRshol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e5y09kdv0ube2dmztwq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkkRshol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e5y09kdv0ube2dmztwq9.png" alt="share project on github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If this is your first time using this feature, IntelliJ IDEA might ask you to &lt;strong&gt;authenticate&lt;/strong&gt; using your GitHub account. You then get to specify your repository name, its visibility (private/public), and can provide a short description that will show up on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zWudM5hT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i42fc1w8jug5l95wafiv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWudM5hT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i42fc1w8jug5l95wafiv.png" alt="share proj"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once confirmed, IntelliJ IDEA will create a GitHub project for you, and show you the "Add Files For Initial Commit" window, which we can simply accept by pressing "Add":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rZIM4gfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/29g49u26awwu8ebz8ig3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rZIM4gfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/29g49u26awwu8ebz8ig3.png" alt="initial commit including gitignore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you might have noticed, IntelliJ IDEA makes our life a bit easier here by &lt;strong&gt;auto-generating&lt;/strong&gt; a default set of &lt;code&gt;.gitignore&lt;/code&gt; files, making sure that any files which shouldn't be checked into source control (such as build artifacts or local configurations) are &lt;strong&gt;correctly ignored&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the commit is finished, we see a small notification bubble containing a &lt;strong&gt;link to our GitHub repository&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PseGI43A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/st0uwzx0v3qi9s66k4w6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PseGI43A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/st0uwzx0v3qi9s66k4w6.png" alt="success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-github-actions" class="anchor"&gt;
  &lt;/a&gt;
  Setting up GitHub Actions &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Time to set up GitHub Actions! Actions will be responsible for &lt;strong&gt;building and testing&lt;/strong&gt; our project – turning our Kotlin source files into &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.html&lt;/code&gt; artifacts, running any unit tests we might have, and copying files into the right location for deployment on GitHub Pages (a branch called &lt;code&gt;gh-pages&lt;/code&gt; by convention). We configure Actions using so-called &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;&lt;strong&gt;workflows&lt;/strong&gt;&lt;/a&gt;, which are YAML configuration files containing instructions on how to transform and build code.&lt;/p&gt;

&lt;p&gt;GitHub looks for workflows in the &lt;code&gt;.github/workflows&lt;/code&gt; directory, so let's create this directory structure at our project's root. Inside, let's create a new file called &lt;code&gt;build-and-publish-kjs.yml&lt;/code&gt;, and add the following configuration to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Publish&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;pull_request&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test and Build&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

      &lt;span class="c1"&gt;# Setup Java 1.8 environment for the next steps&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup Java&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-java@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;java-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.8&lt;/span&gt;

      &lt;span class="c1"&gt;# Check out current repository&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Fetch Sources&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="c1"&gt;# Build application&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test and Build&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./gradlew build&lt;/span&gt;

      &lt;span class="c1"&gt;# If main branch update, deploy to gh-pages&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JamesIves/github-pages-deploy-action@3.7.1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;BRANCH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt; &lt;span class="c1"&gt;# The branch the action should deploy to.&lt;/span&gt;
          &lt;span class="na"&gt;FOLDER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build/distributions&lt;/span&gt; &lt;span class="c1"&gt;# The folder the action should deploy.&lt;/span&gt;
          &lt;span class="na"&gt;CLEAN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;# Automatically remove deleted files from the deploy branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#understanding-our-action-yaml" class="anchor"&gt;
  &lt;/a&gt;
  Understanding our Action YAML
&lt;/h3&gt;

&lt;p&gt;We could just use this configuration as is, and move on to the next step – but it's always good to try and understand what's going on in our project. And while the YAML configuration reads quite naturally, I still want to quickly look at this configuration file section by section (Additionally, feel free to consult the &lt;a href="https://docs.github.com/en/actions/learn-github-actions"&gt;GitHub Actions documentation&lt;/a&gt; for more information):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We first give our workflow a &lt;code&gt;name&lt;/code&gt; – in this case, &lt;code&gt;Build and Publish&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Next, we define the triggers for this workflow – what events &lt;strong&gt;kick off&lt;/strong&gt; this process. Because we want to make sure that pushed code always compiles, and that pull requests are also fine, we set the value to &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pull_request&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Next, we define a &lt;code&gt;job&lt;/code&gt;, which &lt;strong&gt;groups&lt;/strong&gt; the different steps we want to run in a given environment (in our case, &lt;code&gt;ubuntu-latest&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Now, we define the different &lt;code&gt;steps&lt;/code&gt; our build needs to go through:

&lt;ul&gt;
&lt;li&gt;The Kotlin compiler needs Java to be present, so we use a &lt;a href="https://github.com/actions/setup-java"&gt;predefined GitHub Action&lt;/a&gt; to &lt;strong&gt;install Java &lt;code&gt;1.8&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;We use &lt;a href="https://github.com/actions/checkout"&gt;another predefined Action&lt;/a&gt; to &lt;strong&gt;check out the code&lt;/strong&gt; for our project.&lt;/li&gt;
&lt;li&gt;We run the &lt;code&gt;./gradlew build&lt;/code&gt; command. &lt;code&gt;build&lt;/code&gt; is a &lt;strong&gt;standard lifecycle&lt;/strong&gt; task for Kotlin/JS projects which installs all dependencies from npm and Gradle, compiles the application, and runs any tests included in the project.&lt;/li&gt;
&lt;li&gt;Lastly, we use &lt;a href="https://github.com/JamesIves/github-pages-deploy-action"&gt;another Action&lt;/a&gt; to &lt;strong&gt;deploy our project&lt;/strong&gt; to GitHub Pages – but &lt;strong&gt;only if the workflow is running on the &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;main&lt;/code&gt; branch&lt;/strong&gt; (we don't want development branches to be deployed to the public!). We point this action to the &lt;code&gt;build/distributions&lt;/code&gt; folder, which is where building a Kotlin/JS project creates the final &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.html&lt;/code&gt; artifacts.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: This workflow &lt;strong&gt;builds and tests all commits and pull requests&lt;/strong&gt; – if the commit is on the &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;main&lt;/code&gt; branch, the changes are prepared for &lt;strong&gt;publishing via Pages&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#committing-the-workflow-file" class="anchor"&gt;
  &lt;/a&gt;
  Committing the workflow file
&lt;/h3&gt;

&lt;p&gt;To enable our newly created workflow in the GitHub project, we &lt;strong&gt;commit and push&lt;/strong&gt; our new &lt;code&gt;build-and-publish-kjs.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you do this via IntelliJ IDEA's "Commit and Push" functionality, please note that, depending on how your GitHub account is authenticated, you may encounter the following error when pushing a commit containing workflow files to your GitHub repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;error: failed to push some refs to 'https://github.com/SebastianAigner/kotlin-js-on-github-pages.git'
To https://github.com/SebastianAigner/kotlin-js-on-github-pages.git
!   refs/heads/master:refs/heads/master [remote rejected] (refusing to allow an OAuth App to create or update workflow `.github/workflows/build-and-publish-kjs.yml` without `workflow` scope)
Done
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is because of an OAuth issue with GitHub requiring a specific scope to push workflow-modifying commits. You can find more info on it and &lt;a href="https://youtrack.jetbrains.com/issue/IDEA-247361"&gt;vote on it here&lt;/a&gt;. Instead, you can commit the code via the terminal integrated in IntelliJ IDEA, using &lt;code&gt;git push origin master&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ru3o1w5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h3rijixf4qmhfsezqpc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ru3o1w5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h3rijixf4qmhfsezqpc4.png" alt="git-push-origin-master"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the push has finished, we can watch the progress of our Kotlin/JS application being built and prepared for publishing in the "Actions" tab of our GitHub repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s1H33EX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ztnb7qdc5qpk4phezuqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s1H33EX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ztnb7qdc5qpk4phezuqa.png" alt="action_running"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-github-pages" class="anchor"&gt;
  &lt;/a&gt;
  Setting up GitHub Pages &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After it finished, the workflow we created and triggered in the previous section put our final &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.html&lt;/code&gt; artifacts on the &lt;code&gt;gh-pages&lt;/code&gt; branch of our repository, just as we planned:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EB3RP9ij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6lhyhlsxutuk9tux4oh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EB3RP9ij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6lhyhlsxutuk9tux4oh.png" alt="gh-pages-branch"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;It's time to &lt;strong&gt;enable the GitHub Pages feature&lt;/strong&gt; of our repository, and point it to this branch. We can do this using the "Settings" tab.&lt;/p&gt;

&lt;p&gt;Somewhere close to the bottom, we can find a section labelled "GitHub Pages". We select the &lt;code&gt;gh-pages&lt;/code&gt; branch and &lt;code&gt;/ (root)&lt;/code&gt; (default) and hit "Save":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQV31bBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/66pf58m8og9xrbnzg01z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQV31bBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/66pf58m8og9xrbnzg01z.png" alt="github-pages-enable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After saving our changes, scrolling back to this section reveals the &lt;strong&gt;URL under which our application is available&lt;/strong&gt;. (I have previously set up a custom domain for GitHub pages, so this one is used by default.) If you don't have a &lt;a href="https://docs.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site"&gt;custom configuration&lt;/a&gt;, the URL of your application usually takes the shape of &lt;code&gt;&amp;lt;username&amp;gt;.github.io/&amp;lt;reponame&amp;gt;&lt;/code&gt;. Visiting this URL shows our Kotlin/JS application in all its glory, and for the world to see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kQajKrUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xr3ooqc9l4rgrpjia265.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kQajKrUZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xr3ooqc9l4rgrpjia265.png" alt="ready to be published"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can use this link to &lt;strong&gt;share your Kotlin/JS application&lt;/strong&gt; with friends and colleagues, or post it on your favorite news aggregator and wait for the upvotes to roll in! 😉&lt;/p&gt;

&lt;p&gt;(If your project is located in a private repository, you might want to change the GitHub Pages visibility. You can find more info on this in the &lt;a href="https://docs.github.com/en/github/working-with-github-pages/changing-the-visibility-of-your-github-pages-site"&gt;GitHub docs&lt;/a&gt;.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-your-project-for-a-spin" class="anchor"&gt;
  &lt;/a&gt;
  Take your project for a spin!
&lt;/h2&gt;

&lt;p&gt;We're done! From now on, whenever you push code, your project will automatically be built on GitHub's CI servers. If a commit is faulty, you can see so on the web interface – and you will even be reminded via email!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh9fs7_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvu8r28kptsqq99ys2rd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh9fs7_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvu8r28kptsqq99ys2rd.png" alt="checks failed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pushing to the main branch of the repository means your page (which is reachable at &lt;code&gt;&amp;lt;username&amp;gt;.github.io/&amp;lt;reponame&amp;gt;&lt;/code&gt;) will &lt;strong&gt;automatically&lt;/strong&gt; be updated.&lt;/p&gt;

&lt;p&gt;And when somebody makes a pull request, build and test status is also shown &lt;strong&gt;directly in context&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQSE8eUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u3wl5tcsahepdma6pbbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQSE8eUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u3wl5tcsahepdma6pbbq.png" alt="pr failed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you" class="anchor"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;I hope you found this post useful. &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; is a &lt;strong&gt;powerful, but also complex tool&lt;/strong&gt;, and I hope that these instructions make it a bit easier to get started together with Kotlin/JS. You can find the &lt;a href="https://github.com/SebastianAigner/kotlin-js-on-gh-pages"&gt;sample project I used&lt;/a&gt; to create the screenshots for this tutorial on GitHub as well, and use it as a source of inspiration or template for a future project.&lt;/p&gt;

&lt;p&gt;If you're interested in similar content, consider &lt;strong&gt;giving me a follow&lt;/strong&gt;, here on dev.to or on Twitter &lt;a href="https://twitter.com/sebi_io"&gt;@sebi_io&lt;/a&gt; to stay up to date.&lt;/p&gt;

&lt;p&gt;If you have ideas for future tutorials, please &lt;strong&gt;share them&lt;/strong&gt; in the comments below, or anywhere else you can get a hold of me!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Special thanks to &lt;a href="https://twitter.com/hszanowski"&gt;Jakub Chrzanowski&lt;/a&gt; for sharing some of his CI wisdom with me for this blog post.&lt;/em&gt;!&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>javascript</category>
      <category>github</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Get Out of Tutorial Hell: Be more like Tony Hawk!</title>
      <author>Jamees Bedford</author>
      <pubDate>Fri, 05 Feb 2021 08:00:01 +0000</pubDate>
      <link>https://dev.to/jameesy/how-to-get-out-of-tutorial-hell-be-more-like-tony-hawk-1md8</link>
      <guid>https://dev.to/jameesy/how-to-get-out-of-tutorial-hell-be-more-like-tony-hawk-1md8</guid>
      <description>&lt;p&gt;When learning to code, many of you will experience something that I call &lt;em&gt;'the tutorial loop'&lt;/em&gt; or &lt;em&gt;'tutorial hell'&lt;/em&gt;. It was something that plagued my learning for a while - in fact I would consider not resolving this sooner was one of the biggest mistakes I made whilst learning web development. This article is my thoughts on how one should attempt to break away from this loop, why this is immensely bad for your learning, and then some of the strategies I used to learn more effectively.&lt;/p&gt;

&lt;p&gt;The Tutorial Loop is the never ending cycle you may find yourself in when learning to code, where you watch tutorial after tutorial but never leave them with any working knowledge of the technology it is teaching. This prompts the developer to typically label the course as useless, and then find another one that may contain the 'secret sauce' to gaining superior programming knowledge.&lt;/p&gt;

&lt;p&gt;It's a frustrating place to be in. You code along to the video, building out the same application as the teacher, and it leaves you feeling with a sense of accomplishment and pride, but ultimately this course has not really left you with any real world skills. In fact, all it has done has taught you how to code along to someone else.&lt;/p&gt;

&lt;p&gt;There is a reason for this. &lt;em&gt;You are not making any decisions or figuring things out for yourself.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When I was eleven or twelve, I got a Tony Hawk "Learn to Skate" video. I watched it for hours, soaking up every single word that Tony said. One of the main things I was interested in was how to "Drop in", a fundamental tricks any skateboarder would have to master, which is being able to roll down a quarter pipe ramp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e77k_bRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x9sxxln7yyaamt6mm22c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e77k_bRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x9sxxln7yyaamt6mm22c.png" alt="Dropping in"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a hard trick for a beginner, because due to the nature of it, if you mess it up it has a large consequence. If you get overconfident and lean too far forward, you will fall flat on your face. Not confident enough, the skateboard will fly out from underneath you and backwards you go.&lt;/p&gt;

&lt;p&gt;When I got to the skate ramp for the first time, I was so full of confidence due to having soaked up this knowledge from the man himself that there was absolutely no way I could fail. His words rung in my ears as I hovered over the drop, I leaned forwards and BAM, I slammed against the concrete. No major injuries, just a big dent in my pride.&lt;/p&gt;

&lt;p&gt;Whilst listening to someone talk about how to do a certain task builds us with confidence and makes us think we can accomplish the skill being discussed, actually it requires practice. Repeating the same action, over and over again, practice after practice.&lt;/p&gt;

&lt;p&gt;A typical 'Learn to Code' tutorial will usually have a 'code-along' video, or will build a final project. We see the final app in the tutorial, and we may even have recreated it ourselves by writing the code as it is taught to us. But what we didn't see is the hours the teacher put into to getting that application working in the first place, working through the design process, all the initial thinking as to exactly how this app is going to come together, all the bugs and errors they encountered along the way. They are showing you the polished, complete project rather than the process the took to getting there. Not to mention, the hours and hours of learning they have put in to get to a level of ability where they can comfortably teach a topic.&lt;/p&gt;

&lt;p&gt;Much like Tony Hawk is able to nail his tricks and his How To video was perfect, we didn't see the hours and hours he had dedicated to learning these tricks, falling off and getting back up time and time again. The real learning to be had is in the process of figuring the hard bits out for ourself. And of course, failing, but consistently trying again.&lt;/p&gt;

&lt;p&gt;It is important, that as a new software engineer, that you understand that this is the case and that learning to code is a long process. In fact, the sooner you realise that only relying on watching other people code the apps you want to be making is not the best way to learn, in your journey the better.&lt;/p&gt;

&lt;p&gt;In Robert Greene's 'Mastery', he talks about how we each have the capability to go on to become a master in our craft, as long as we approach it in the right way:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"We enter a new field with excitement, but also fear about how much there is to learn ahead of us. The greatest danger here is boredom, impatience, fear, and confusion. Once we stop observing and learning, the process towards mastery comes to a halt."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As a new developer, we crave output. We enjoy going through a tutorial, coding along to the instructor because usually we will have an app or a project to show for it at the end. We feel fulfilled. Making slow progress on our own is boring and frustrating, but to become a master at any skill we must accept that boredom is part and parcel with the package. We can embrace boredom and choose to practice effectively!&lt;/p&gt;

&lt;p&gt;They say to learn a spoken language, the best thing you can do is to go to a country that speaks it and practice it. In my opinion, a programming language is exactly the same. Pick through codebases that already exist, pull things apart, fix bugs in open source projects, create new projects. Anything that is requiring you to think and grow your knowledge. You need to figure out how to solve problems and overcome issues that you don't know the answer to. Use this experience to get good at finding out the answers yourself, by Googling/Stack Overflowing and reading documentation.&lt;/p&gt;

&lt;p&gt;I'm not in this instance saying that you should avoid all tutorials, quite the contrary. Tutorials are really useful learning resources and are a great start to learning a new piece of tech, however, a 'start' is all they are.&lt;/p&gt;

&lt;p&gt;Tony Hawk didn't learn to skate by watching other people skating.. and you shouldn't learn to program by watching others code.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Top 5 DEV Comments from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 04 Feb 2021 23:43:50 +0000</pubDate>
      <link>https://dev.to/devteam/top-5-dev-comments-from-the-past-week-fc2</link>
      <guid>https://dev.to/devteam/top-5-dev-comments-from-the-past-week-fc2</guid>
      <description>&lt;p&gt;This is a weekly roundup of awesome DEV comments that you may have missed.  You are welcome and encouraged to boost posts and comments yourself using the &lt;strong&gt;&lt;a href="https://dev.to/t/bestofdev"&gt;#bestofdev&lt;/a&gt;&lt;/strong&gt; tag.&lt;/p&gt;




&lt;p&gt;Congrats on this &lt;a href="https://dev.to/devteam/what-was-your-win-this-week-145j"&gt;win of the week&lt;/a&gt;, &lt;a class="comment-mentioned-user" href="https://dev.to/ritaxcorreia"&gt;@ritaxcorreia&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/ritaxcorreia"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zYaOt7lP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--FSuExEjJ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/407623/c2f3e3d1-d1d8-4c68-8fd6-58275a106900.jpg" alt="ritaxcorreia profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/ritaxcorreia"&gt;
        &lt;span class="comment-username"&gt;Rita Correia&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/ritaxcorreia/comment/1b1hn" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jan 29
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Finaaaaaaally deploying my portfolio website! I finally have something decent to showcase my projects &lt;em&gt;self high-five&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ritacorreia.co/" rel="nofollow"&gt;ritacorreia.co/&lt;/a&gt;&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Thank you for contributing to the &lt;a href="https://dev.to/devteam/tell-us-about-the-black-technologists-that-inspire-you-2m7b"&gt;Black History Month celebration&lt;/a&gt; here on DEV &lt;a class="comment-mentioned-user" href="https://dev.to/krrishdhaneja"&gt;@krrishdhaneja&lt;/a&gt;
! I need to check out Coldfusion on YouTube!  &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/krrishdhaneja"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cBhesnlv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--e6_8j4jZ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/550389/dadf84dd-1428-4a39-97d2-b4a7f10cc463.jpeg" alt="krrishdhaneja profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/krrishdhaneja"&gt;
        &lt;span class="comment-username"&gt;Krrish Dhaneja&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/krrishdhaneja/comment/1b3i5" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Feb  1
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I don’t know a tech history maker but one black person who teaches tech using YT, is Dagogo Altraide or famously known as Coldfusion on YT, he is the best person on earth according to me who teaches tech and science in a very interesting and documentary type videos!!&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;"A single character typo brought me to my knees."&lt;br&gt;
— &lt;a class="comment-mentioned-user" href="https://dev.to/djtai"&gt;@djtai&lt;/a&gt;
 in &lt;a href="https://dev.to/ben/what-s-the-longest-you-ve-ever-spent-debugging-a-single-bug-op4"&gt;"What's the longest you've ever spent debugging a single bug?"&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can relate 😅 &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/djtai"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xktx8WTe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--gJjAkNug--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/18276/bb18a581-a33a-49de-b27d-b32e5c4ccbf8.jpg" alt="djtai profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/djtai"&gt;
        &lt;span class="comment-username"&gt;🇬🇺🇲🇵 David J. Taitingfong&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/djtai/comment/1b4md" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Feb  3
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Probably a whole 9-hr work day and some change.&lt;/p&gt;

&lt;p&gt;I was tasked with creating some Ansible configs for these build agents. The machines being spun up from them were identical, but spread across 3 different networks: A, B, and C. The big difference was one zip. A and B got it from shared drives, but C pulled it from our Artifactory. I was told that the one in Artifactory was the same from both A and B.&lt;/p&gt;

&lt;p&gt;A and B were fine but machines on C were failing. I figured it was the zip, and it was...but it took the whole day and 2 30-minute Zoom meetings with different folks.&lt;/p&gt;

&lt;p&gt;The problem? Well all 3 zips had the same name: Dir_X.Y.Z_14.0 &lt;strong&gt;but&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The zips on A and B unzipped to C:\Path\To\Dir_X.Y.Z_14.0&lt;/li&gt;
&lt;li&gt;The zip on C unzipped to C:\Path\To\Dir_X.Y.Z-14.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A single-character typo brought me to my knees lol. Someone renamed the directory to have a hyphen, but the zip they created still had an underscore, lol. Ahh good times.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/ziizium"&gt;@ziizium&lt;/a&gt;
 is a definite &lt;a href="https://dev.to/denicmarko/google-like-a-pro-5cf6"&gt;Pro Googler&lt;/a&gt;!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/ziizium"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0FkxbDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CbNrTj-Z--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/140071/bf530779-33b2-4994-8a62-b172af02f016.png" alt="ziizium profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/ziizium"&gt;
        &lt;span class="comment-username"&gt;Habdul Hazeez&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/ziizium/comment/1b604" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Feb  4
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;In addition,&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;|&lt;/code&gt; in place of &lt;code&gt;OR&lt;/code&gt;. e.g &lt;code&gt;JavaScript | HTML&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siBgyo7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7n566alr5gsx8jhxcyo0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HV75RMJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--siBgyo7C--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7n566alr5gsx8jhxcyo0.png" alt="Google search result for JavaScript and HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ext&lt;/code&gt; is also a substitute for &lt;code&gt;filetype&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2r7y9VkL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xkhvkw5dhzzg3g1cftc3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JyPI1hX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2r7y9VkL--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xkhvkw5dhzzg3g1cftc3.png" alt="Google search result for JavaScript PDF documents"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Limit search to a domain e.g &lt;code&gt;.com&lt;/code&gt;, &lt;code&gt;.edu&lt;/code&gt;, &lt;code&gt;.org&lt;/code&gt; e.t.c&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---41BmjM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gb2rpndxrly0s95on1a1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gn7Gv1nI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---41BmjM0--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gb2rpndxrly0s95on1a1.png" alt="Google search results for performance of web applications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can go really weird by combining operators and search terms that will perform a &lt;em&gt;pinpoint&lt;/em&gt; search.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JavaScript|HTML|CSS filetype:pdf -"framework" site:edu&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When I have the time, I'll write a more comprehensive post about Google searching.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Another awesome win of the week! I hope you're still celebrating, &lt;a class="comment-mentioned-user" href="https://dev.to/ldrmuse"&gt;@ldrmuse&lt;/a&gt;
 🎉 &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/ldrmuse"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DEgFl-bv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YGnmWK_Y--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/420927/bf23993e-d9b9-4e3b-bcd5-0d1ba07346d7.jpeg" alt="ldrmuse profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/ldrmuse"&gt;
        &lt;span class="comment-username"&gt;Melissa Heying&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/ldrmuse/comment/1b1ml" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jan 30
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Got my first paycheck as a web developer ❤️🎉 &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See you next week for more great comments ✌&lt;/p&gt;

</description>
      <category>bestofdev</category>
    </item>
    <item>
      <title>JS change text on hover </title>
      <author>DevLorenz0</author>
      <pubDate>Thu, 04 Feb 2021 21:51:20 +0000</pubDate>
      <link>https://dev.to/devlorenzo/js-change-text-on-hover-3945</link>
      <guid>https://dev.to/devlorenzo/js-change-text-on-hover-3945</guid>
      <description>&lt;p&gt;&lt;code&gt;Hello World!&lt;/code&gt; Today I decided to write a short article on how to change text on hover. If you think this topic it's too easy... You're right, however, this article is written mainly for beginners, but I'm sure you might need it too (also because you probably googled the question)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-change-text-on-hover-with-javascript" class="anchor"&gt;
  &lt;/a&gt;
  How to change Text on hover with javascript:
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#first-of-all-html" class="anchor"&gt;
  &lt;/a&gt;
  First of all: HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container"&amp;gt;
  &amp;lt;h1 class="title" id="title"&amp;gt;Lorem Ipsum dolor sit amet&amp;lt;/h1&amp;gt;
  &amp;lt;p class="text" id="text"&amp;gt;Lorem ipsum dolor sit amet paragraph&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#you-dont-really-need-a-lot-of-css-but-style-is-always-helpful" class="anchor"&gt;
  &lt;/a&gt;
  You don't really need a lot of CSS, but &lt;strong&gt;style&lt;/strong&gt; is always helpful
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
  display: flex;
  justify-content: center;
  text-align: center;
  align-content: center;
  border: 5px solid black;
  padding: 200px 100px;
}

.text {
  font-size: 17px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;You can have here a live preview (in case you missed something):&lt;br&gt;
&lt;a href="https://codepen.io/DevLorenzo/pen/vYXbJvd"&gt;Click Me&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#last-but-not-least-the-star-of-the-show-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Last but not least, the star of the show, Javascript:
&lt;/h3&gt;

&lt;p&gt;Before we start the party, let's Caching the DOM:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The results show that caching your DOM elements dramatically improves the speed of your code execution. This is clearly seen when comparing tests 3 and 4 where you get a boost from 32,889 to 602,620 operations per second. &lt;a href="https://www.sitepoint.com/jquery-performance-dom-caching/#:~:text=The%20results%20show%20that%20caching,to%20602%2C620%20operations%20per%20second!"&gt;Site Point&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const text = document.getElementById("text");
const title = document.getElementById("title");
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can then add an on mouse hover function: when mouse hovers text, text changes! Magic&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;text.onmouseover = function () {
  text.innerHTML = "I just changed cause you hovered me";
  title.innerHTML = "Please stop hovering me";
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And on Mouse out, if we want the text to change back again&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;text.onmouseout = function () {
  text.innerHTML = "Lorem ipsum when mouse out";
  title.innerHTML = "";
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#in-reality-you-can-also-have-this-without-javascript-but-its-less-intuitive" class="anchor"&gt;
  &lt;/a&gt;
  In reality, you can also have this without Javascript, but it's less intuitive:
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#lets-start-with-surprise-surprise-html" class="anchor"&gt;
  &lt;/a&gt;
  Let's start with, surprise, surprise, HTML:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;p&amp;gt;
    &amp;lt;span class="test" data-hover="And I'm second! Even if you read me first"&amp;gt;I'm first&amp;lt;/span&amp;gt;
  &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#and-continue-with-css" class="anchor"&gt;
  &lt;/a&gt;
  And continue with CSS:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.test:hover {
  font-size: 0;
}

.test:hover:before {
  font-size: 20px;
  content: attr(data-hover);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You need to use attr() function... If you, like me, never heard this function before check this &lt;a href="https://css-tricks.com/css-attr-function-got-nothin-custom-properties/"&gt;article on CSS tricks&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No JS this time, you happy now?&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Hope this helped and thanks for reading!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ps: Be sure to smash that like button.&lt;/p&gt;

&lt;p&gt;And remember to check my &lt;strong&gt;beautiful&lt;/strong&gt; &lt;a href="https://codepen.io/DevLorenzo"&gt;Code Pen profile&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>responsive</category>
    </item>
    <item>
      <title>How to use the HTML drag and drop API with React</title>
      <author>Michael Burrows</author>
      <pubDate>Thu, 04 Feb 2021 21:41:11 +0000</pubDate>
      <link>https://dev.to/michaelburrows/how-to-use-the-html-drag-and-drop-api-with-react-11bi</link>
      <guid>https://dev.to/michaelburrows/how-to-use-the-html-drag-and-drop-api-with-react-11bi</guid>
      <description>&lt;p&gt;In this tutorial we’ll be using the HTML drag and drop API to create a re-orderable list in React. This type of functionality can be used for a number of things including todo lists, voting, or quizes.&lt;/p&gt;

&lt;p&gt;As the HTML drag and drop API is built into the browser no additional frameworks are required which keeps the code lightweight. Here’s a demo of what we’ll be building:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W617tSFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vo7snqkx1fh3rp5rpckj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W617tSFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vo7snqkx1fh3rp5rpckj.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s get started by setting up a new project using Create React App:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app drag-n-drop
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the purposes of this tutorial we’ll modify &lt;code&gt;App.js&lt;/code&gt; rather than create a component. We’ll be using the &lt;code&gt;useState&lt;/code&gt; Hook to save the order of the list items so we need to import that along with React itself and the CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First up inside the &lt;code&gt;App&lt;/code&gt; function we’ll declare the state variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dragItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDragItem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setList&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Call Of Ktulu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;For Whom The Bell Tolls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Day That Never Comes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Memory Remains&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Confusion&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Moth Into Flame&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Outlaw Torn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No Leaf Clover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Halo on Fire&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;dragItem&lt;/code&gt; will be used store the item that is being dragged and the &lt;code&gt;list&lt;/code&gt; contains an array that we’ll output into the application and is what we’ll be able to reorder using drag and drop.&lt;/p&gt;

&lt;p&gt;Next we’ll add the functions for handling the events. These are all all triggered by drag events that are part of the HTML drag and drop API. I’ll go into each of these in more detail later in the tutorial when we setup the events in the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleDragStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setDragItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleDragEnter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#336699&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dragItem&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;newList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dragItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;newList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setDragItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleDragLeave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleDrop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;handleDragEnter&lt;/code&gt; function is doing the bulk of the work. It creates a copy of the list items in their original order before using the &lt;code&gt;splice()&lt;/code&gt; method to insert the item into it’s new position and updating the &lt;code&gt;list&lt;/code&gt; state.&lt;/p&gt;

&lt;p&gt;Finally we return the list items into a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; using the &lt;code&gt;map()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dnd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;
          &lt;span class="nx"&gt;draggable&lt;/span&gt;
          &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onDragStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleDragStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;onDragEnter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleDragEnter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;onDragLeave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleDragLeave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;onDrop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleDrop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;onDragOver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;draggable&lt;/code&gt; – sets the list item draggle property to true.&lt;br&gt;
&lt;code&gt;key&lt;/code&gt; – helps React identify items that have changed.&lt;br&gt;
&lt;code&gt;onDragStart&lt;/code&gt; – triggered when the user starts to drag a list item.&lt;br&gt;
&lt;code&gt;onDragEnter&lt;/code&gt; – triggered when a draggable element enters a valid drop target.&lt;br&gt;
&lt;code&gt;onDragLeave&lt;/code&gt; – triggered when a draggable element leaves a valid drop target.&lt;br&gt;
&lt;code&gt;onDrop&lt;/code&gt; – triggered when a draggable element is dropped on a valid drop target.&lt;br&gt;
&lt;code&gt;onDragOver&lt;/code&gt; – prevents ghosting when the list item is dropped.&lt;/p&gt;

&lt;p&gt;To complete the project add the following to the &lt;code&gt;App.css&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.dnd&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.dnd&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.dnd&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#003366&lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Excluding the background colors and &lt;code&gt;cursor:move&lt;/code&gt; these styles are optional and can be modified to suit your individual needs. The background colors enhance the UI and changing the cursor provides a visual indication so users know items are draggable.&lt;/p&gt;

&lt;p&gt;That’s all for this tutorial. You should now have a good understanding of how the HTML drag and drop API can be incorporated into a React application.&lt;/p&gt;

</description>
      <category>html</category>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 Reasons Why Front-end Is So Hard</title>
      <author>Jordan Brennan</author>
      <pubDate>Thu, 04 Feb 2021 19:59:10 +0000</pubDate>
      <link>https://dev.to/jfbrennan/5-reasons-why-front-end-is-so-hard-2b92</link>
      <guid>https://dev.to/jfbrennan/5-reasons-why-front-end-is-so-hard-2b92</guid>
      <description>&lt;p&gt;I’m primarily a frontend developer, but have done enough backend work to know what makes the two different. It’s these differences that remind me frontend is definitely not the easier of the two! &lt;/p&gt;

&lt;p&gt;Now don't misunderstand me. The breadth of requirements of large-scale, geographically-distributed services is not lost on me. In their entirety they are no doubt a greater challenge, but your average backend system is not that. Whether stand-alone or a component of something bigger, the typical backend system is pretty straightforward (CRUD the db, manage a queue, process files).&lt;/p&gt;

&lt;p&gt;Web applications, on the the other hand, are like wild stallions. The low barrier to entry (HTML, CSS, and JavaScript) makes them appear tame, but large web apps are in fact very very difficult to work with. Many devs get hurt in the process and limp back to other projects where you’re less likely to get kicked in the groin. &lt;/p&gt;

&lt;p&gt;So to that point, here’s 5 characteristics of front-end that make it so hard:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-uncontrollable-runtime-variances" class="anchor"&gt;
  &lt;/a&gt;
  1. Uncontrollable runtime variances
&lt;/h2&gt;

&lt;p&gt;The code you write will execute in a browser environment you don’t own and can’t control &lt;em&gt;and&lt;/em&gt; these environments come in a dozen variations.&lt;/p&gt;

&lt;p&gt;Browsers implement specs differently (or not at all), which means the perfectly valid code you write may not work as expected, or in some cases you just flat out cannot write the code you want to. But you try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;-webkit-transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-webkit-transform&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;ease-out&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;-moz-transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="nt"&gt;-moz-transform&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;ease-out&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;-o-transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="nt"&gt;-o-transform&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;ease-out&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;-ms-transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="nt"&gt;-ms-transform&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;ease-out&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="nt"&gt;transform&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;ease-out&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Tools, techniques, and even officially limiting browser support for your app is all necessary to manage that kind of chaos. &lt;/p&gt;

&lt;p&gt;The good news is the difference is narrowing. It will never go away because of the way specs are written and adopted by browser vendors, but at least we're past the IE era.&lt;/p&gt;

&lt;p&gt;So how does this compare to the backend? One word: containers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-network-disruptions-are-normal" class="anchor"&gt;
  &lt;/a&gt;
  2. Network disruptions are normal
&lt;/h2&gt;

&lt;p&gt;The devices browsers run on can lose network connectivity or hit a prohibitively slow spot in the network at any moment. This is not just a bug you can fix or even something you can prevent. This is a normal every day use case you have to solve for. &lt;/p&gt;

&lt;p&gt;Comparably, it is a very rare event that backend systems are affected by connectivity issues, and in many cases it doesn't matter at all because of the client-server paradigm. It’s &lt;em&gt;clients&lt;/em&gt;, not servers, that must be robust and reinitiate requests that fail to get through or time out &lt;em&gt;and&lt;/em&gt; they need to provide a good UX during these situations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-users-can-do-anything-at-any-time" class="anchor"&gt;
  &lt;/a&gt;
  3. Users can do anything at any time
&lt;/h2&gt;

&lt;p&gt;Front-end projects can almost seem like they have to solve for infinite scenarios: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The user can try to visit any page - not just what you consider the main page - at any time &lt;/li&gt;
&lt;li&gt;with any device &lt;/li&gt;
&lt;li&gt;with or without logging in. &lt;/li&gt;
&lt;li&gt;If bookmarked, they’ll expect the state of the page to be more or less the way it was when they bookmarked it&lt;/li&gt;
&lt;li&gt;or shared the link with a friend. &lt;/li&gt;
&lt;li&gt;They can navigate away from this page at any time. &lt;/li&gt;
&lt;li&gt;They can refresh it. &lt;/li&gt;
&lt;li&gt;They can clear caches. &lt;/li&gt;
&lt;li&gt;They can user another device without those caches, but still expect to see the same content.&lt;/li&gt;
&lt;li&gt;They can close the page and immediately reopen it, or reopen it 18 months later. &lt;/li&gt;
&lt;li&gt;They can click on anything at any time. &lt;/li&gt;
&lt;li&gt;They can scroll, pinch, rotate, increase or decrease font size, press the tab key, use browser extensions, use private mode, share their account with another person, not have required plugins (Ok, this one is finally over I think...). &lt;/li&gt;
&lt;li&gt;Their OS may have a dark mode. &lt;/li&gt;
&lt;li&gt;They might be using a screen reader. &lt;/li&gt;
&lt;li&gt;It might be a crawler and not an actual human.&lt;/li&gt;
&lt;li&gt;And many more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these actions need to be solved for in a way that makes the application secure, reliable, enjoyable, extensible, and maintainable.&lt;/p&gt;

&lt;p&gt;This human factor is a challenge for backends too (DoS attack, for example), but only the front-end has to handle the full breadth of human punishment!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-visual-implementations" class="anchor"&gt;
  &lt;/a&gt;
  4. Visual implementations
&lt;/h2&gt;

&lt;p&gt;This is the pixel-pushing part. It's what many consider to be "front-end" work, but is actually just one of the many concerns.&lt;/p&gt;

&lt;p&gt;Today’s designs are more challenging than ever too because of the advancements of the web platform, speed of mobile networks, and the diversity of devices. Take screen size as one example. In college we worked in the reliable 800x600 dimension. Today that screen is in everyone's pocket. We have everything from little phones to big professional 6k displays, and even jumbo multi-screen contexts like the &lt;a href="https://mobile.twitter.com/AJStacy06/status/857628546507968512"&gt;digital menus in McDonalds&lt;/a&gt;, which is a web app btw. Screen size alone caused a complete reset in how we approached web design and development, not to mention multi-touch, and now voice is on its way to the web too.&lt;/p&gt;

&lt;p&gt;In my experience, graphics code tends to push back harder than regular code and this entire discipline simply does not exist in backend development. As such, backend devs will never know the sheer joy (and &lt;a href="https://bugs.webkit.org/show_bug.cgi?id=190065"&gt;pain&lt;/a&gt;) of flex box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-async-processing" class="anchor"&gt;
  &lt;/a&gt;
  5. Async processing
&lt;/h2&gt;

&lt;p&gt;Some front-end tasks are asynchronous, which means code does not always get executed in the order you wrote it. Very confusing when coming from a synchronous runtime. This can take a little getting used to; however, the multi-threading experience I had with Java was painful enough that I think I'd take the async JavaScript APIs any day!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-part-of-frontend-work-is-hard-for-you" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;What part of front-end work is hard for you?&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;I’m curious to know which parts of front-end work people find the most challenging/frustrating. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>ux</category>
    </item>
    <item>
      <title>5 CSS Tricks I Used This Week</title>
      <author>Rita Correia</author>
      <pubDate>Thu, 04 Feb 2021 19:15:25 +0000</pubDate>
      <link>https://dev.to/ritaxcorreia/5-css-tricks-i-used-this-week-1m7d</link>
      <guid>https://dev.to/ritaxcorreia/5-css-tricks-i-used-this-week-1m7d</guid>
      <description>&lt;p&gt;Mastering CSS has a lot to do with understanding its capabilities and getting familiar with the range of properties available.&lt;br&gt;
While working on a couple of projects this past week, I looked up a few and did a little round-up of 5 helpful CSS tricks I used this week:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#selecting-specific-children" class="anchor"&gt;
  &lt;/a&gt;
  Selecting specific children
&lt;/h2&gt;

&lt;p&gt;This is an interesting trick, that can be adapted depending on how many or which exact elements you want to target.&lt;/p&gt;

&lt;p&gt;Imagine you have a list of items and you only want to select all but the first 3 children. You would use Example 1, with &lt;code&gt;n + 4&lt;/code&gt;, which means it will only start at the 4th item.&lt;/p&gt;

&lt;p&gt;To select a specific item, you can simply target the specific &lt;code&gt;nth-child&lt;/code&gt;. So if you want to select the 2nd list item, you'd use Example 2.&lt;/p&gt;

&lt;p&gt;If you want to select all but the first, you can simply use Example 3, with the &lt;code&gt;:not(:first-child)&lt;/code&gt; selector.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1yoZJWst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/azlbiganncsfao4yfrth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1yoZJWst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/azlbiganncsfao4yfrth.png" alt="carbon (1)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#touchaction-property%E2%80%A8%E2%80%A8" class="anchor"&gt;
  &lt;/a&gt;
  Touch-action property  
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;touch-action&lt;/code&gt; property is super helpful when developing for mobile devices as it gives you control over the effect of touchscreen interactions with an element. This can be compared to the &lt;code&gt;pointer-events&lt;/code&gt; property used to control mouse interactions.  There's quite a few values that you can use. You can read more about them on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action"&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;auto:&lt;/strong&gt; Allows the browser to handle all pan and zoom interactions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;manipulation:&lt;/strong&gt; Enables pinch and zoom interactions, but disables others you might find on some devices, like double-tap to zoom. It is shorthand for the combination of pan-x pan-y pinch-zoom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2_Eve6a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhz947z4arbzv55ky4ti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2_Eve6a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhz947z4arbzv55ky4ti.png" alt="carbon (3)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#accessibility-when-using-emojis" class="anchor"&gt;
  &lt;/a&gt;
  Accessibility when using Emojis
&lt;/h2&gt;

&lt;p&gt;It’s incredible how emojis are now so engrained in our digital communication. However, when content is accessed via a screen reader, some systems may not notice this content is there.  &lt;/p&gt;

&lt;p&gt;The best practice in this case is to wrap the emoji in a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, giving it the &lt;code&gt;role="img"&lt;/code&gt;, and providing a useful description in &lt;code&gt;aria-label&lt;/code&gt;. The screenreader will treat the emoji as an image in the accessibility tree with an accessible name for the end user.&lt;/p&gt;

&lt;p&gt;Thankfully, most modern screen readers will read the emoji's default description, although these are not consistent across systems. To safeguard consistency, it's wiser to provide this in the &lt;code&gt;aria-label&lt;/code&gt;. This is important when wanting to convey emotional value, for example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nmuU-RdM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v4bximrd4w7icao55lv1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nmuU-RdM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v4bximrd4w7icao55lv1.png" alt="carbon"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-disable-horizontal-scroll-on-mobile" class="anchor"&gt;
  &lt;/a&gt;
  How to disable horizontal scroll on mobile
&lt;/h2&gt;

&lt;p&gt;An oldie, but goodie. You know that pesky little horizontal scroll that keeps on showing when you're developing your responsive website? Ugh!&lt;br&gt;
Let's get rid of it, shall we? BYE FELICIA.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ou_A_9bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y1njxzlxvsjnql281xfv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ou_A_9bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y1njxzlxvsjnql281xfv.png" alt="disablescroll"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#wrapping-text-around-shapes-with%C2%A0shapeoutside" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping text around shapes with shape-outside
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;shape-outside&lt;/code&gt; property controls how the content wraps around a floated element’s bounding-box, meaning we can reflow text over a shape such as a circle, ellipse or a polygon.&lt;/p&gt;

&lt;p&gt;The caveat is that this property only works on floated elements for the time being, as per the CodePen example below. This will likely get updated in the near future.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ritacorreia/embed/yLVNZLN?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>todayilearned</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>CSS Variables and How To Use Them</title>
      <author>Shahed Nasser</author>
      <pubDate>Thu, 04 Feb 2021 18:46:54 +0000</pubDate>
      <link>https://dev.to/shahednasser/css-variables-and-how-to-use-them-3l7f</link>
      <guid>https://dev.to/shahednasser/css-variables-and-how-to-use-them-3l7f</guid>
      <description>&lt;p&gt;A lot of people don’t know about CSS variables, and you might be one of them! It’s time to learn about CSS variables and how you can use them.&lt;/p&gt;

&lt;p&gt;CSS variables are declared for a specific element as a custom property. Then, you can use that custom property anywhere you use that element.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#declaration-and-usage" class="anchor"&gt;
  &lt;/a&gt;
  Declaration and Usage
&lt;/h2&gt;

&lt;p&gt;Here’s how you declare a custom property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element { 
    --background-color: #f00;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;element&lt;/code&gt; can be a selector of any element, for example, div, p, .test, etc…&lt;/p&gt;

&lt;p&gt;What we did is that we declared a custom property for this element called &lt;code&gt;--background-color&lt;/code&gt; . All CSS custom properties must start with &lt;code&gt;--&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Now, we can use this custom property inside &lt;code&gt;element&lt;/code&gt; using the &lt;code&gt;var&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element {  
    background-color: var(--background-color);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we assigned the background-color property of &lt;code&gt;element&lt;/code&gt; to the variable we declared earlier.&lt;/p&gt;

&lt;p&gt;This is nice and all, but usually we have repetition inside different elements, not just one. declaring a custom variable inside one element type is not very convenient.&lt;/p&gt;

&lt;p&gt;In order to use a custom property inside more than one element type, we can declare the custom property inside the &lt;code&gt;:root&lt;/code&gt; pseudo-class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {  
    --primary-color: #333;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we can use the variable &lt;code&gt;--primary-color&lt;/code&gt; inside any element in our document:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;div {  
    color: var(--primary-color);
}
p {  
    background-color: var(--primary-color);
}
.fancy {  
    border-color: var(--primary-color);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By declaring our custom property inside :root , we are now able to use it inside div to set the text color, p to set the background color, and any element having class fancy to set the border color. This way, not only did we minimize repetition, but we also made it easier to edit and change our website’s primary color at any given point.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#inheritance" class="anchor"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h2&gt;

&lt;p&gt;Elements can also inherit custom properties. For example, let’s say we have the following HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="parent"&amp;gt;
    &amp;lt;div class="first-child"&amp;gt;&amp;lt;/div&amp;gt;  
    &amp;lt;div class="second-child"&amp;gt;&amp;lt;div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, we declare a variable called &lt;code&gt;--text-size&lt;/code&gt; on &lt;code&gt;.parent&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.parent {  
    --text-size: 15px;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we can use --text-size not only inside .parent , but also inside its children as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.first-child {
 font-size: var(--text-size);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can also override custom properties. We can do that by redeclaring the custom property inside the child element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.second-child {  
    --text-size: 30px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, if you use &lt;code&gt;--text-size&lt;/code&gt; inside &lt;code&gt;.second-child&lt;/code&gt; , it’ll be evaluated to 30px, but if you use it inside &lt;code&gt;.first-child&lt;/code&gt; or &lt;code&gt;.parent&lt;/code&gt;, it will still be 15px.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#fallback-values" class="anchor"&gt;
  &lt;/a&gt;
  Fallback Values
&lt;/h2&gt;

&lt;p&gt;You can also define a fallback value for a variable by passing a second parameter to var . For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.second-child {  
    font-size: var(--text-size, 30px);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Fallback values are used when the variable is not defined yet. They are not used as a fallback to browser incompatibility.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And that’s how you can use CSS variables! Keep in mind that some browsers like Internet Explorer don’t support them, so if you need to support all browsers you need to take that into consideration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://blog.shahednasser.com/css-variables-and-how-to-use-them/"&gt;my personal blog&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>January: Forem Twitch Events Roundup 👾</title>
      <author>Christina Gorton</author>
      <pubDate>Thu, 04 Feb 2021 18:44:34 +0000</pubDate>
      <link>https://dev.to/devteam/january-forem-twitch-events-roundup-3ecm</link>
      <guid>https://dev.to/devteam/january-forem-twitch-events-roundup-3ecm</guid>
      <description>&lt;p&gt;In January Nick Taylor and I kicked off a new month of Twitch streams. This is a round up of all the wonderful guests who joined us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-gant-laborde" class="anchor"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Gant Laborde
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wS5N5R61Z5w"&gt;
&lt;/iframe&gt;
&lt;br&gt;
We talked to Gant Laborde, CIO at Infinite Red, about AI and shared TensorFlow demos.&lt;/p&gt;

&lt;p&gt;Be sure to check out some of the demos Gant shared. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tensorflowtictactoe.co/"&gt;AI Trainable Tic Tac Toe&lt;/a&gt;&lt;br&gt;
Train this AI to play the best game of Tic Tac Toe.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://enjoyingthe.show/"&gt;Enjoying The Show&lt;/a&gt; &lt;br&gt;
This demo is an experiment for connecting speakers and audiences using AI. It uses webcams to share the dominant facial expression in the audience with the speaker. This helps the speaker gauge feedback from the audience just as they would by looking out at the faces in the crowd.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aisortinghat.com/"&gt;The AI Sorting Hat&lt;/a&gt;&lt;br&gt;
Sketch on the canvas to see which house your sketch is sorted in to. Watch out for the “easter egg” you can find by drawing a certain &lt;strong&gt;mark&lt;/strong&gt; 💀.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pair-programming-with-rafi" class="anchor"&gt;
  &lt;/a&gt;
  Pair Programming with Rafi
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cVW5sVgouYA"&gt;
&lt;/iframe&gt;
&lt;br&gt;
We were joined by &lt;a href="https://dev.to/rafi993"&gt;Rafi&lt;/a&gt; an active Forem open source contributor to work on this PR. &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/pull/10661"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Improving usability on onboarding screen when using keyboard and screen reader
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#10661&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/Rafi993"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--bjx_JJQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/8092120%3Fv%3D4" alt="Rafi993 avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/Rafi993"&gt;Rafi993&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/pull/10661"&gt;&lt;time&gt;Oct 06, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;h2&gt;
&lt;a id="user-content-what-type-of-pr-is-this" class="anchor" href="#what-type-of-pr-is-this"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What type of PR is this?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Refactor&lt;/li&gt;
&lt;li&gt;[ ] Feature&lt;/li&gt;
&lt;li&gt;[x] Bug Fix&lt;/li&gt;
&lt;li&gt;[ ] Optimization&lt;/li&gt;
&lt;li&gt;[ ] Documentation Update&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-description" class="anchor" href="#description"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;p&gt;Improving usability when using keyboard and screen reader&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-related-tickets--documents" class="anchor" href="#related-tickets--documents"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Related Tickets &amp;amp; Documents&lt;/h2&gt;
&lt;p&gt;Closes &lt;a href="https://github.com/forem/forem/issues/9585"&gt;https://github.com/forem/forem/issues/9585&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-qa-instructions-screenshots-recordings" class="anchor" href="#qa-instructions-screenshots-recordings"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;QA Instructions, Screenshots, Recordings&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Go to url &lt;a href="http://localhost:3000/onboarding" rel="nofollow"&gt;http://localhost:3000/onboarding&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Try to complete the on-boarding journey with keyboard (with screen reader on)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
&lt;a id="user-content-added-tests" class="anchor" href="#added-tests"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Added tests?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] yes&lt;/li&gt;
&lt;li&gt;[ ] no, because they aren't needed&lt;/li&gt;
&lt;li&gt;[ ] no, because I need help&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-added-to-documentation" class="anchor" href="#added-to-documentation"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Added to documentation?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[ ] docs.forem.com&lt;/li&gt;
&lt;li&gt;[ ] readme&lt;/li&gt;
&lt;li&gt;[x] no documentation needed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-what-gif-best-describes-this-pr-or-how-it-makes-you-feel" class="anchor" href="#what-gif-best-describes-this-pr-or-how-it-makes-you-feel"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What gif best describes this PR or how it makes you feel?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/eccb414eb03d8f4a4393e2d8c4e4df6b932351fa9ddcb9a999092e2b08aeb7dd/68747470733a2f2f6d65646961312e74656e6f722e636f6d2f696d616765732f37653931396634646663396636653838346332373366633631663664636464332f74656e6f722e6769663f6974656d69643d35363137343430" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eccb414eb03d8f4a4393e2d8c4e4df6b932351fa9ddcb9a999092e2b08aeb7dd/68747470733a2f2f6d65646961312e74656e6f722e636f6d2f696d616765732f37653931396634646663396636653838346332373366633631663664636464332f74656e6f722e6769663f6974656d69643d35363137343430" alt="Happy"&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/pull/10661"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-ben-halpern" class="anchor"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Ben Halpern
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-kRv_MrIATI"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Forem co-CEO &lt;a href="https://dev.to/ben"&gt;Ben Halpern&lt;/a&gt; joined us for a Walkthrough Wednesday. We talked about DEV's beginnings, the move to Forem, open source, upcoming features, Forem Cloud and more.&lt;/p&gt;

&lt;p&gt;Thanks to all our viewers who joined the streams and chatted with us this week! &lt;/p&gt;

&lt;p&gt;Be sure to follow the &lt;a href="https://www.twitch.tv/thepracticaldev"&gt;ThePracticalDev Twitch&lt;/a&gt; channel to check out all the great guests we have joining us every Wednesday this month. &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>meta</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Using Laravel for E-Commerce: Tutorial &amp; Live Demo</title>
      <author>Pierre-Guillaume Laurin</author>
      <pubDate>Thu, 04 Feb 2021 18:37:13 +0000</pubDate>
      <link>https://dev.to/pierreguillaumelaurin/using-laravel-for-e-commerce-tutorial-live-demo-18j9</link>
      <guid>https://dev.to/pierreguillaumelaurin/using-laravel-for-e-commerce-tutorial-live-demo-18j9</guid>
      <description>&lt;p&gt;PHP is, in &lt;em&gt;some&lt;/em&gt; ways, the backbone of the Internet. I mean, it is at the core of &lt;a href="https://snipcart.com/blog/wordpress-static-site-generator"&gt;WordPress&lt;/a&gt;, which powers &lt;a href="https://w3techs.com/technologies/details/cm-wordpress"&gt;64.2%&lt;/a&gt; of all the websites today. It is also used by the biggest social media; Facebook.&lt;/p&gt;

&lt;p&gt;But I have to admit, I’ve never had the chance to explore it fully.&lt;/p&gt;

&lt;p&gt;Today is the day I jump into PHP. However, I’ll begin my journey with the darling framework that is Laravel (I’ve heard it makes it easy to build secure, scalable full-stack projects from the start!).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wnsMG9sB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205654/jumpinphp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wnsMG9sB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205654/jumpinphp.gif" alt="Jumping in PHP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More especially, I’ll try to build a Laravel-powered &lt;a href="https://snipcart.com/blog/react-ecommerce-tutorial"&gt;e-commerce web app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully, this will show you the benefits Laravel can bring to your next e-commerce venture.&lt;/p&gt;

&lt;p&gt;Here’s what the tutorial will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project Setup with Sail&lt;/li&gt;
&lt;li&gt;Basic product listing generation, migration, and seeding&lt;/li&gt;
&lt;li&gt;Using advanced models for product options&lt;/li&gt;
&lt;li&gt;Front-end wiring&lt;/li&gt;
&lt;li&gt;Integrating Snipcart&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time to put my PHP skills to test!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laravel-amp-ecommerce-quick-context" class="anchor"&gt;
  &lt;/a&gt;
  Laravel &amp;amp; e-commerce: quick context
&lt;/h2&gt;

&lt;p&gt;Laravel is an open-source PHP web framework used to build sites &amp;amp; web apps.&lt;/p&gt;

&lt;p&gt;It has a smooth learning curve, removes some quirks of building with PHP, and has many modern built-in libraries. Some say it's the Ruby on Rails PHP equivalent.&lt;/p&gt;

&lt;p&gt;With Laravel, you can leverage &lt;a href="https://getcomposer.org/doc/00-intro.md"&gt;Composer&lt;/a&gt; to manage dependencies &amp;amp; packages. Many useful packages allow you to fast-track your Laravel development. Think stuff like debugging, authentication, API interactions, etc. Sites like Packagist &amp;amp; Packalyst are great resources to find helpful Laravel packages.&lt;/p&gt;

&lt;p&gt;Since September 2020, &lt;a href="https://auth0.com/blog/whats-new-in-laravel-8/"&gt;Laravel 8 is publicly available&lt;/a&gt;. It introduces features such as Laravel Jetstream, model factory classes, migration squashing, job batching, improved rate-limiting, dynamic Blade components, Tailwind pagination views, time testing helpers, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools for e-commerce on Laravel?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, there are existing e-commerce packages for Laravel. They can help to set up e-commerce functionalities on your Laravel app quickly.&lt;/p&gt;

&lt;p&gt;Here’s a curated list of the most popular ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://bagisto.com/en/"&gt;Bagisto&lt;/a&gt; — Code-driven &amp;amp; multi-featured Laravel package for e-commerce. Free &amp;amp; open-source.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aimeos.org/integrations/laravel-ecommerce-package/"&gt;Aimeos&lt;/a&gt; — A Laravel e-commerce package and online shop solution. Free &amp;amp; open-source.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.avored.com/"&gt;AvoRed&lt;/a&gt; — A modular and customizable PHP shopping cart. Free &amp;amp; open-source.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vanilo.io/"&gt;Vanilo&lt;/a&gt; — This one’s actually an e-commerce framework (like Magento or Prestashop) for Laravel.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://getcandy.io/"&gt;GetCandy&lt;/a&gt; — An headless Laravel e-commerce API. Free &amp;amp; open-source.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, where does that lead us?&lt;/p&gt;

&lt;p&gt;The three e-commerce options with Laravel are pretty much:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pick a Laravel-powered CMS and add custom e-commerce to it.&lt;/li&gt;
&lt;li&gt;Use e-commerce packages built to extend your app.&lt;/li&gt;
&lt;li&gt;Build your own e-commerce application from the ground up.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;First one?&lt;/strong&gt; Fast &amp;amp; easy. That’s what we did for the first version of this post, using PyroCMS and then integrating Snipcart as the custom shopping cart.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second one?&lt;/strong&gt; Interesting. We might do it in another post at some point!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third one?&lt;/strong&gt; Close to what we're doing here. But building the whole application from the ground up, including e-commerce capabilities, would be highly time-consuming.&lt;/p&gt;

&lt;p&gt;Instead, I’ll show you how you can build a store from scratch using pure Laravel and then adding Snipcart to enable e-commerce and shopping cart customization.&lt;/p&gt;

&lt;p&gt;All these options have in common the benefits you’ll win overusing a full-on e-commerce CMS—high scalability, easy customization, detached e-commerce functionalities, etc.&lt;/p&gt;

&lt;p&gt;I'm thrilled to be operating inside a Laravel project for this demo. Unlike many of our &lt;a href="http://snipcart.com/blog/jamstack"&gt;Jamstack&lt;/a&gt;/static site tuts, it'll be super easy to handle any backend logic for our store.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tutorial-building-an-ecommerce-website-with-laravel" class="anchor"&gt;
  &lt;/a&gt;
  Tutorial: building an e-commerce website with Laravel
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CbliEB4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205655/laravelsnipcart.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CbliEB4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205655/laravelsnipcart.png" alt="Laravel E-Commerce Website With Snipcart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I assume you already have a working installation of PHP and &lt;a href="https://getcomposer.org/"&gt;Composer&lt;/a&gt; running. If not, you can install them &lt;a href="https://www.php.net/"&gt;here&lt;/a&gt; and &lt;a href="https://getcomposer.org/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this tutorial, we will use &lt;a href="https://laravel.com/docs/8.x/sail"&gt;Sail&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Introduced with Laravel 8, it is a light-weight command-line interface for interacting with Laravel’s default Docker development environment that will streamline our development environment and database setup. Sail will allow us to quickly setup a development environment and database completely isolated from our local environment.&lt;/p&gt;

&lt;p&gt;Since Sail interacts with a Docker environment, that means you will also need &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt; (a great tool for app development these days). If you prefer, of course, you could plug in a local SQL database or use &lt;a href="https://laravel.com/docs/8.x/homestead"&gt;Homestead&lt;/a&gt; from Laravel. The latter is an all-in-one vagrant image that allows you to get started quickly.&lt;/p&gt;

&lt;p&gt;→ Read the full post &lt;a href="https://snipcart.com/blog/laravel-ecommerce-website-tutorial"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>php</category>
    </item>
    <item>
      <title>Building Web Apps With Svelte</title>
      <author>Kinanee Samson</author>
      <pubDate>Thu, 04 Feb 2021 18:09:50 +0000</pubDate>
      <link>https://dev.to/kalashin1/building-web-apps-with-svelte-4bj7</link>
      <guid>https://dev.to/kalashin1/building-web-apps-with-svelte-4bj7</guid>
      <description>&lt;p&gt;Good day guys, in this article we will focus on using svelte.js to build user interfaces and web apps. Svelte.js is kinda a new kid on the block compared to other frameworks and libraries out there that you can use to build front-end projects, but that does not mean it offers, less. We will see how we can setup a basic sveltejs project and then we will delve into some of the basic svelte syntax and by the end of this article you will feel confident enough to go on to more advanced svelte concept.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-svelte" class="anchor"&gt;
  &lt;/a&gt;
  What is Svelte
&lt;/h2&gt;

&lt;p&gt;Svelte is a JavaScript compiler that is used to build dynamic and interactive web app and user interface, this statement implies that svelte will compile our code down into a JavaScript implementation when we build for production. This is unlike regular frameworks and libraries where the core library is also shipped together with our code. This is a good thing because apps built with svelte are much smaller in bundle size compared to apps built with other traditional frameworks. The svelte syntax is also very easy to learn, short and simple, logic that would take a 10 to 15 lines of code on other traditional frameworks will only take a few say, 5 to 6 lines of svelte code to achieve the same purpose, although it's syntax shares a few similarities with react, so if you have experience working with react then learning svelte will be easier, (History of svelte)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-svelte" class="anchor"&gt;
  &lt;/a&gt;
  Installing Svelte
&lt;/h2&gt;

&lt;p&gt;To install svelte on your computer you need to make sure that you have nodejs installed on your computer, open up an command terminal and type &lt;code&gt;node -v&lt;/code&gt; and press enter that should throw off the version of nodejs you have installed on your computer if there is one, however if not then head to the &lt;a href="https://nodejs.org"&gt;node js webiste&lt;/a&gt; to download the latest version of nodejs. Once you've done that the next thing is to install a package from npm called degit. To do this type &lt;code&gt;npm i degit -g&lt;/code&gt; in a command line and hit enter. This installs degit for us, degit makes cloning a git repo very easy and it is going to help us clone the svelte template from the svelte repo. Once degit has been installed we now need to clone the starter template from the svelte repo. In the command line type &lt;code&gt;degit sveltejs/template svelte-app&lt;/code&gt; and hit enter. This command goes out to the svelte repo and clones the svelte template app to our pc and stores it inside a folder called &lt;code&gt;svelte-app&lt;/code&gt; and you dont have to call it svelte-app, you can name it whatever you want. Just know that what ever name you pass to command, a folder will be created with that name and the content of the svelte starter template is going to be stored inside it. Once it has finished downloading, enter &lt;code&gt;cd svelte-app&lt;/code&gt; in the command line and press enter, this and open up this folder in your text editor, if you have vs code installed on you pc type &lt;code&gt;code .&lt;/code&gt; and it will open it automatically inside the svelte-app folder and press enter from the command line and this should open up the folder in vs code. Next thing is to install the dependencies because when we clone the repo it doesnt ship with it the svelte compiler and other modules svelte depends on so make sure you are inside the svelte-app folder inside the command line then hit &lt;code&gt;npm install&lt;/code&gt; and press enter, grab a cup of smoothie and wait for that to finish loading up, and once that is done you should see a directory structure that looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
-------------------/node_modules                            |
    |------------/src/        
    |
    |------------/scripts/
    |
    |------------README.md
    |
    |------------/rollup.config.js


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The node modules folder contains the svelte library and other modules that svelte depends on. &lt;/li&gt;
&lt;li&gt;We will talk about the src folder shortly&lt;/li&gt;
&lt;li&gt;The README.md file contains useful information about running the app and i suggest that you go through it.&lt;/li&gt;
&lt;li&gt;The rollup.config.js file is just a module budler much like webpack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is our basic folder structure right now, lets examine the src folder and check up it's content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
src/------------------------------/App.svelte
            |
            |------------/main.js

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The src folder contains two files, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App.svelte&lt;/li&gt;
&lt;li&gt;main.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The App.svelte is a svelte component that comes with the basic svelte template, note the .svelte extension. All our svelte components must end with the .svelte extension so that svelte compiler can process that file. The main.js file is a file that kick starts our svelte app, it imports the App component from the App.svelte file and initializes the component targeting document.body i.e all our app content will be injected to the document's body tag. It is inside this src folder that we write all our code, create our svelte components and all the rest.&lt;/p&gt;

&lt;p&gt;The public folder is what is served to the browser when we are in development mode and it contains an index.html file, a global.css file that contains css rules that can be used to style our svelte components, the rules in this global.css is not scoped so it will have effect on all our svelte components, if we apply any class name contained in it to our components. We can also store other stylesheets, fonts, icons, images and other assets that our app depends in the public folder.&lt;/p&gt;

&lt;p&gt;The script folder contains a setupTypeScript.js file that will enable us to use TypeScript in our svelte components. Now we have a basic knowledge of our file structure the next thing is to serve up the app and see the basic contents, to do that from your terminal,  make sure you are at the root level in the svelte-app folder and then hit &lt;code&gt;npm run dev&lt;/code&gt; and enter, this spins up a local development server with live reload feature, open up browser and navigate to 'localhost:5000' and you should see the starter template app that svelte comes baked with. Back to our editor and let's get our hands dirty and write some code, open up the App.svelte component and clear up the contents so that you have a blank file, type the following information into the file;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spiderman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt; { hero } &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Save up the file and open your browser, you should see a gray colored text with the content 'spiderman'. If you have worked with Vue.js before you will notice that is similar to vue syntax. So the above code is basic svelte syntax, we have a script tag where we write JavaScript, and in this example we declared a variable called hero and set it equal to 'spiderman'. Next we have a main tag that has an h2 tag as it's child, we then use curly braces to dynamically inject the value of the hero variable we declared in the script tag as the content of the h2 tag. Lastly we have a style tag for adding styles to our components, the styles are scoped by default. Most of our svelte components will have these three basic tags; a script tag, a main tag(although you can use a div tag or any wrapper Html tag you like), and a style tag. You will agree with me that this is much simpler to understand and is easier to write than you would have using other front-end frameworks, e.g Angular, react or even Vue. That is the basic dynamic content injection, let's look at conditional rendering&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conditional-rendering" class="anchor"&gt;
  &lt;/a&gt;
  Conditional Rendering
&lt;/h2&gt;

&lt;p&gt;open up the app.svelte file and add the following contents to it;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spiderman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;villain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thanos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;showHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;showVillain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    {#if showHero}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{ hero }&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {/if}
    {#if showVillain}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{ villain }&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {/if}
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Open up your browser and view the results, we see that Thanos is added to the DOM while spiderman is removed from it, because showHero is false and showVillain is true, anytime we want to do some conditional rendering we use a curly braces, and then use the # symbol followed immediately by the if keyword and then a condition we want to evaluate, then we close up the if block by using another curly braces and inside it we use the forward slash followed immediately by the if keyword. In between both we write the html template we want to be rendered to the DOM, depending on the result of our expression, our template will or not be rendered, if the condition evaluates to false, it wont be added to the DOM, if it evaluates to true i will be. In this instance we used two if blocks let's see how we can add an else statement to each of the if block. Make the following alterations to your code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spiderman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;villain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thanos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;showHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;showVillain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    {#if showHero}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{ hero }&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {:else}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;No hero yet&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {/if}
    {#if showVillain}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{ villain }&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {:else}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;No Villain yet&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {/if}
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Save it and open up your browser, you should see (no hero yet and Thanos output to the browser) much like in a normal if else construct the template in the else section gets output to the DOM if our expression evaluates to false. Don't forget to add the colon before the else keyword We can use an else if block rather than using two if statements and let's see how we can do that, edit the App.svelte file and it should be looking like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spiderman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;villain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thanos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;showHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;showVillain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    {#if showHero}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{ hero }&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {:else if showVillain}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{ villain }&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {:else}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;No Hero or Villain yet&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {/if}
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can use the :else if statement to add a another condition to the block  and some HTML and if that condition evaluates to true the HTML will be added to the DOM, if it evaluates to false it wont be added to the DOM. let's take a look a repeating templates&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looping-with-svelte" class="anchor"&gt;
  &lt;/a&gt;
  Looping with Svelte
&lt;/h2&gt;

&lt;p&gt;Every front-end framework provide a means for you to repeat a template for a given list, and svelte is no different, say we have an array of heroes and we want to repeat a template for each item in hero in the list, let's see how we can do that with svelte, make the following alteration to your App.svelte  file;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hereos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spiderman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deadpool&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    {#each heroes as hero}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{ hero }&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {/each
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Save the file and open up your browser, you should see a list of heroes output to the browser, we use the curly braces and then # sign, followed immediately by the each keyword, next is the list and in this case it is heroes, next we use the as keyword followed by whatever we want to call each item in the list, just like we use a forEach loop, so we use a h2 tag to output the each item in turn and inside the h2 tag, we can tack on an else statement to an each block incase the list we supplied is empty and then svelte will display that message if the list we supplied to it is empty, let's edit our app.svelte file to allow for that;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hereos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spiderman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deadpool&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;heroes2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    {#each heroes2 as hero}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{ hero }&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {:else}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;No hero in the list&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {/each
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;save it and open up your browser, you should see no hero in the list inside the browser, because we supplied an empty array. Let's move to using and importing multiple components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiple-components" class="anchor"&gt;
  &lt;/a&gt;
  Multiple Components
&lt;/h2&gt;

&lt;p&gt;If we continue writing all our code inside one file, it is going to be a hell to work with and it will become difficult to manage, thus we need to split up our code into multiple components and import them where they are needed, take a list for example, we can have a list item component we can reuse for any list as a separate component and then we import that component into a parent component which will make use of the list item, let's see a typical use case of multiple components, edit your folder structure, inside the src folder create a file and name it Hero.svelte, it should contain the following contents&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hereos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spiderman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deadpool&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    {#each heroes as hero}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{ hero }&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {:else}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;No hero in the list&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {/each
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;save it, open your App.svelte and make the following changes to it;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Hero.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Hero&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Or --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Hero&amp;gt;&amp;lt;/Hero&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;save it and open your browser, you shouldn't see much change from the last time except of course now we get the heroes back in the DOM, however our code has changed, let's look at a few talking points. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You will notice that we didn't export anything in our Hero.svelte file yet we are importing it in App.svelte, this is because by default svelte exports every component we create so we don't need to do that our self.&lt;/li&gt;
&lt;li&gt;Secondly we use a self closing tag to represent the component, we could also use opening and closing tags too and that's fine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#functions-on-events" class="anchor"&gt;
  &lt;/a&gt;
  Functions on Events
&lt;/h2&gt;

&lt;p&gt;Certainly our code will need to fire a function when a button is clicked, when a form is submitted, e.t.c. we can do that using on:event={function} where event represents the event we are targeting and function represents a reference to the function we want to run when the event fires, let's see a typical example, Open Hero.svelte and make the following changes to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hereos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spiderman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deadpool&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;logHeroes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    {#each heroes as hero}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{ hero }&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{logHeroes}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;log heroes&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    {:else}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;No hero in the list&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {/each
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Open your browser, you should see a button under each hero, open up your browser console and then click on the button, you should see the heroes list output to the console. it is to note that we don't call the function explicitly, rather we pass a reference to the function, this is because if we call the function explicitly, it will fire the code immediately the browser loads up, this is quite similar to a behavior in react. When we pass a function reference to an event, we automatically take in the event object and we can make use of it. Let's see a typical use case;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hereos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spiderman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deadpool&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;logHeroes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heroes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    {#each heroes as hero}
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{ hero }&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{logHeroes}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;log heroes&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    {:else}
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;No hero in the list&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {/each
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Save it, open your browser and click the button, you should see the event object along with the heroes list output to the console. That's it for this article,  stay tuned for more articles on svelte as i will be writing more articles on svelte in the future, hope you enjoyed this one guys.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>svelte</category>
    </item>
    <item>
      <title>Natural Language Processing 101</title>
      <author>amananandrai</author>
      <pubDate>Thu, 04 Feb 2021 18:00:27 +0000</pubDate>
      <link>https://dev.to/amananandrai/natural-language-processing-101-1aeo</link>
      <guid>https://dev.to/amananandrai/natural-language-processing-101-1aeo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Humans have tried to communicate with computers since the advent of these smart devices. Initially, punch cards were used to talk to large devices like ENIAC and UNIVAC, and then programming languages were developed for communicating with computer systems. The ultimate goal is to talk to humans or instruct them in the human-understandable language which is known as &lt;strong&gt;Natural Language&lt;/strong&gt;. At the start of human-computer interaction, the languages were Assembly languages and then COBOL and FORTRAN which were easily interpreted by the machines but were difficult to understand by humans. Then programming languages were developed which were more human-understandable like SQL and Python. The number of natural languages present in the world is very large but the main focus of the research community is related to English. &lt;/p&gt;

&lt;p&gt;In the present time, we can give voice commands to the computer systems and they respond to them. This is what we as humans are trying to achieve. In the commercial of a famous Automobile brand when the car understands the commands of its owner it is termed as "A Human Thing". We humans, try to talk to people to grow a bond with them. We also talk with our pets and even in some cases to non-living objects as well. If we receive a response from these things we feel a sense of connection with them. Communication helps in bonding. And if it is in the natural language then it is an immense joy. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#natural-language-processing" class="anchor"&gt;
  &lt;/a&gt;
  Natural Language Processing
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Natural Language Processing&lt;/strong&gt; is the subset of Machine Learning which deals with the interpretation of natural language described above. NLP the abbreviation for Natural Language Processing is very famous among the Data Science and Machine Learning community. NLP helps to bypass programming languages to give commands to systems and allows us to use our voice and speech to give instructions. It basically breaks down the barriers of communication by allowing anyone, whether they have computing knowledge or not, to talk to bots, systems, apps, or any kind of software. The field of NLP is vast and research is constricted to just English but there are many languages present in the world and if we are able to make computers understand our local languages like Spanish, French, German, Afrikaans, Hindi, Tamil, Bengali, etc, then it would make the world a much better place. Computers would be able to assist humans in their daily tasks and even make the life of ordinary humans quite easy. It would not be necessary for common people to instruct computers to perform certain tasks to know about Programming languages. The general person can just say the commands and the computer performs the tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nlp-and-its-relation-to-machine-learning" class="anchor"&gt;
  &lt;/a&gt;
  NLP and its relation to Machine Learning
&lt;/h2&gt;

&lt;p&gt;Machine learning, by definition, is a type of artificial intelligence that provides computers the ability to learn without being explicitly programmed. Machine learning finds patterns in data and based on that provides results. Machine learning can help NLP powered systems adjust actions according to the historical context and patterns it picks up in a conversation. Thus ML is one of the most important parts of NLP powered systems. The increase in the amount of data helps NLP models to better emulate human languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-to-learn-for-starting-with-nlp" class="anchor"&gt;
  &lt;/a&gt;
  Things to learn for starting with NLP
&lt;/h2&gt;

&lt;p&gt;There are different aspects of NLP. It has basically two parts - &lt;strong&gt;Natural language generation (NLG)&lt;/strong&gt; and &lt;strong&gt;Natural language generation&lt;/strong&gt;. The name itself explains that NLG means to generate sentences(language) and NLU means to understand the natural language of humans. GPT-3 which was one of the most famous word a few months ago is an NLG model which generates sentences based on given input and BERT which is a model used in Google search engine for NLU to process our queries and give answers based on them.&lt;/p&gt;

&lt;p&gt;Some of the things whose knowledge can help in our road to glory in the path of NLP learning are-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic Linguistics&lt;/li&gt;
&lt;li&gt;String Manipulation&lt;/li&gt;
&lt;li&gt;Regular expressions&lt;/li&gt;
&lt;li&gt;Data cleaning&lt;/li&gt;
&lt;li&gt;Text analysis&lt;/li&gt;
&lt;li&gt;Machine learning and Deep learning basics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Basic Linguistics&lt;/strong&gt; is one of the essential parts of NLP apart from technical knowledge. One must know the basics of the language in which they are comfortable to build models for NLP. Knowledge of &lt;strong&gt;String Manipulation&lt;/strong&gt; and &lt;strong&gt;Regular Expressions&lt;/strong&gt; is required for starting with NLP. We are dealing with sentences and have to find patterns so string manipulation and regular expressions are required. &lt;strong&gt;Data Cleaning&lt;/strong&gt; is one of the most important parts of any data science field. In NLP also it has a major role. We remove stopwords, emojis, punctuation marks to make Bag-of-Words which are used to train models. These things are done by the use of string manipulation and the help of regular expressions. &lt;/p&gt;

&lt;p&gt;The most important part is &lt;strong&gt;Text Analysis&lt;/strong&gt; in the NLP business. Various steps are there in the NLP pipeline which constitutes the Text analysis phase. Some of them are making &lt;strong&gt;n-grams&lt;/strong&gt;. It is a collection of n consecutive words in a sentence which are used for finding the probability of the next word in sentence completion tasks or to fill up the missing words in sentences which are masked. &lt;strong&gt;Tokenization&lt;/strong&gt; is another step in which the sentences are divided into tokens which consists of words, punctuation marks, etc. &lt;strong&gt;Stemming&lt;/strong&gt; and &lt;strong&gt;Lemmatization&lt;/strong&gt; are another steps in NLP pipeline, in Stemming we crop the words like 'cars' to 'car' and 'walking','walked' to 'walk' whereas in lemmatization means to get the root word using grammatical laws. An example of lemmatization is converting 'is', 'am', 'are' to 'be' as it is the root of all these words. One more important step is &lt;strong&gt;Part of Speech(POS) tagging&lt;/strong&gt; in which the parts of speech of the different parts of sentences is identified. After performing these steps Machine learning and Deep Learning algorithms are used to perform various NLP tasks like Sentiment Analysis, Text Summarisation, Machine Translation, Question Answering, etc.&lt;/p&gt;




&lt;p&gt;I hope this article has aroused interest in beginners about NLP and some more people will try to learn about NLP in near future. Some more articles related to NLP written by me are- &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/amananandrai" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rOeopHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MysWUww6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/355422/d9bae3e1-e185-4e93-a850-58be1b042695.png" alt="amananandrai image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/amananandrai/python-nlp-libraries-to-learn-and-use-in-2021-2odp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Python NLP libraries to learn and use in 2021&lt;/h2&gt;
      &lt;h3&gt;amananandrai ・ Jan  9 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nlp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/amananandrai" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rOeopHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MysWUww6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/355422/d9bae3e1-e185-4e93-a850-58be1b042695.png" alt="amananandrai image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/amananandrai/5-nlp-tasks-using-hugging-face-pipeline-5b98" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 NLP tasks using Hugging Face pipeline&lt;/h2&gt;
      &lt;h3&gt;amananandrai ・ Oct 22 '20 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#nlp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/amananandrai" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rOeopHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MysWUww6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/355422/d9bae3e1-e185-4e93-a850-58be1b042695.png" alt="amananandrai image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/amananandrai/language-model-implementation-bigram-model-22ij" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Language Model Implementation (Bigram Model)&lt;/h2&gt;
      &lt;h3&gt;amananandrai ・ Aug  8 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nlp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/amananandrai" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rOeopHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MysWUww6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/355422/d9bae3e1-e185-4e93-a850-58be1b042695.png" alt="amananandrai image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/amananandrai/recent-advances-in-the-field-of-nlp-33o1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Recent advances in the field of NLP&lt;/h2&gt;
      &lt;h3&gt;amananandrai ・ Jun  4 '20 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#nlp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>nlp</category>
      <category>machinelearning</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
