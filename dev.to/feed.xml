<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What are your thoughts on Web 3.0?</title>
      <author>Madza</author>
      <pubDate>Mon, 27 Sep 2021 20:24:44 +0000</pubDate>
      <link>https://dev.to/madza/what-are-your-thoughts-on-web-3-0-4dl1</link>
      <guid>https://dev.to/madza/what-are-your-thoughts-on-web-3-0-4dl1</guid>
      <description>&lt;p&gt;Web 3.0 is the 3rd gen of internet services that will focus on using a machine-based understanding of data to provide a data-driven web.&lt;/p&gt;

&lt;p&gt;The tech community on social media has has created a &lt;a href="https://twitter.com/search?q=web%203.0&amp;amp;src=typed_query&amp;amp;f=top"&gt;buzz&lt;/a&gt; about it. Some do see it as a future while some are making memes out of it:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CJPI5tg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1430937414906744834/aWwkM4cF_normal.jpg" alt="Pawan Bhandarkar profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Pawan Bhandarkar
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @bhandarkarpawan
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Why is everyone learning Web 3.0 and blockchain all of a sudden??
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:25 PM - 26 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1442178457845125121" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1442178457845125121" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1442178457845125121" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--XTYextlz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1424866464063004679/YDg7WuQL_normal.jpg" alt="Kacie Ahmed profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kacie Ahmed
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @haezurath
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      2021: Start learning Web 3.0 &lt;br&gt;&lt;br&gt;2023: Earning $145k/yr as a blockchain developer 💰 &lt;br&gt;&lt;br&gt;Who is joining me on this journey?
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:03 PM - 26 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1442218393168498692" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1442218393168498692" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1442218393168498692" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KhMeE7cW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1427972206815072258/7MQgKJQl_normal.jpg" alt="Michal Malewicz profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Michal Malewicz
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @michalmalewicz
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I'm already Exploring Web 6.0&lt;br&gt;&lt;br&gt;You're still stuck on 3.0? &lt;br&gt;Vendor limited the upgrade?
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      09:24 AM - 27 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1442419941970485249" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1442419941970485249" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1442419941970485249" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;What are your thoughts on it? 👇&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>web3</category>
    </item>
    <item>
      <title>A real-life example of making a custom Promise in JavaScript/TypeSctipt</title>
      <author>NordicBeaver</author>
      <pubDate>Mon, 27 Sep 2021 20:08:15 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/a-real-life-example-of-making-a-custom-promise-in-javascript-typesctipt-5d1n</link>
      <guid>https://dev.to/nordicbeaver/a-real-life-example-of-making-a-custom-promise-in-javascript-typesctipt-5d1n</guid>
      <description>&lt;p&gt;It feels like we've completely moved from callbacks to &lt;em&gt;Promises&lt;/em&gt; and &lt;em&gt;async/await&lt;/em&gt; in the JavaScript world. So much, that almost every library and framework provides async versions of their functions. And the logic usually goes like this: 'I see &lt;em&gt;async&lt;/em&gt; -&amp;gt; I type &lt;em&gt;await&lt;/em&gt; and mark my function &lt;em&gt;async&lt;/em&gt; as well -&amp;gt; done!'. I got so used to it, so I started to forget how to create and use my own &lt;em&gt;Promises&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;But life always finds a way to remind you that old habits die hard, especially if you're talking about browsers APIs.&lt;/p&gt;

&lt;p&gt;So, if you're like me and need a little reminder on how to make custom &lt;em&gt;Promises&lt;/em&gt;, I hope you'll find this post helpful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-html-images"&gt;
  &lt;/a&gt;
  Creating html images.
&lt;/h2&gt;

&lt;p&gt;So here is the problem. We need to create an Image element using a browser's API and set its source to a dataUrl of some picture. At first, I wrote something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dataUrl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks great, but there is a problem here. When we set &lt;code&gt;image.src&lt;/code&gt; it's not instantly loaded. Even if a source is a data string, and not an URL to an external resource, it still takes time. So when an image is returned from the function, the is no guarantee that the data is already there.&lt;/p&gt;

&lt;p&gt;Unfortunately, if you want to wait for the loading to be done, you can't do something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dataUrl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// STOP! THIS IS ILLEGAL!&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only way is to set an event handler. But what do we put here?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ???&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dataUrl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we were still in 2010, we would solve this by having another argument for a callback function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onDone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But wait, it's 2021. Cool kids don't do that anymore. What we need, is to make our function return something awaitable. And there is nothing more awaitable than a &lt;em&gt;Promise&lt;/em&gt;. Here is the &lt;em&gt;Promise&lt;/em&gt; constructor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks a bit scary, but you just need to get to know it better. This is how you usually call it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Lalala, do some work&lt;/span&gt;
  &lt;span class="c1"&gt;// ....&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;we_are_good_and_got_the_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you pass a function in the constructor. A function that has 2 arguments, which are also functions. Call them &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;. In that function we do some work. If everything went well, just call &lt;code&gt;resolve&lt;/code&gt; with the result. Otherwise call reject with an error object.&lt;br&gt;
The thing that you passed into the &lt;code&gt;resolve&lt;/code&gt; is gonna be returned as a &lt;em&gt;Promise&lt;/em&gt; result when it resolves.&lt;/p&gt;

&lt;p&gt;Then you can use this new object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use the result&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Oh no there was an error&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, what's even better, you can also do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's apply what we learned to our problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLImageElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dataUrl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can call your new function with &lt;code&gt;await&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it. We've done it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-example-for-those-who-cant-wait"&gt;
  &lt;/a&gt;
  Bonus example for those who can't wait.
&lt;/h2&gt;

&lt;p&gt;The is one more example I want to show you. It's actually quite useful to be able to just wait for a set amount of time. Sadly, there is not &lt;code&gt;wait()&lt;/code&gt; or &lt;code&gt;sleep()&lt;/code&gt; function in JavaScript. But with our new powers we can make our one. Here is a quick one-liner for you guys to try and figure out as an exercise (I feel like a college teacher by saying this lol)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#show-me-more-please-senpai"&gt;
  &lt;/a&gt;
  Show me more please Senpai.
&lt;/h2&gt;

&lt;p&gt;This article is actually an extended version of an excerpt of my latest &lt;a href="https://www.youtube.com/watch?v=TwT1EgbOHi8"&gt;video&lt;/a&gt;. You're welcome to watch it if you want more ;).&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Creating new Data Pipelines from the command line</title>
      <author>Waylon Walker</author>
      <pubDate>Mon, 27 Sep 2021 20:03:44 +0000</pubDate>
      <link>https://dev.to/waylonwalker/creating-new-data-pipelines-from-the-command-line-3aim</link>
      <guid>https://dev.to/waylonwalker/creating-new-data-pipelines-from-the-command-line-3aim</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uqiv5LAiJe0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Kedro new is simply a wrapper around the cookiecutter templating library.  The kedro team maintains a ready made template that has everything you need for a kedro project.  They also maintain a few kedro starters, which are very similar to the base template.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/waylonwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ukb2PhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Izxe95PY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/271838/95e313ca-39fc-4ee6-bf57-ad52b4dcf0d2.png" alt="waylonwalker"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/waylonwalker/what-is-kedro-5b3h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is Kedro&lt;/h2&gt;
      &lt;h3&gt;Waylon Walker ・ Aug 19 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#kedro&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Unsure what kedro is, Check out yesterdays post on What is Kedro.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#pipx"&gt;
  &lt;/a&gt;
  pipx
&lt;/h2&gt;

&lt;p&gt;I recommend using &lt;code&gt;pipx&lt;/code&gt; when running kedro new.  &lt;code&gt;pipx&lt;/code&gt; is designed for system level cli tools so that you do not need to maintain a virtual environment or worry about version conflicts, &lt;code&gt;pipx&lt;/code&gt; manages the environment for you.&lt;/p&gt;

&lt;p&gt;The kedro team does not recommend &lt;code&gt;pipx&lt;/code&gt; in their docs as they already feel like there is a bit of a tool overload for folks that may be less familiar with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pipx&lt;/span&gt; &lt;span class="n"&gt;kedro&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I like using &lt;code&gt;pipx&lt;/code&gt; as it gives you better control over using a specific version or always the latest version, unlike when you run what you have on your system depends on when you last installed or upgraded.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#kedro-new"&gt;
  &lt;/a&gt;
  Kedro New
&lt;/h2&gt;

&lt;p&gt;The kedro team also has a set of starters, by passing in &lt;code&gt;--starter&lt;/code&gt; you can start with a different template.  Here is an example with the kedro spaceflights starter.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pipx run kedro new &lt;span class="nt"&gt;--starter&lt;/span&gt; spaceflights

&lt;span class="o"&gt;=============&lt;/span&gt;
Please enter a human readable name &lt;span class="k"&gt;for &lt;/span&gt;your new project.
Spaces and punctuation are allowed.
 &lt;span class="o"&gt;[&lt;/span&gt;New Kedro Project]: Spaceflights Complete

Repository Name:
&lt;span class="o"&gt;================&lt;/span&gt;
Please enter a directory name &lt;span class="k"&gt;for &lt;/span&gt;your new project repository.
Alphanumeric characters, hyphens and underscores are allowed.
Lowercase is recommended.
 &lt;span class="o"&gt;[&lt;/span&gt;spaceflights-complete]:

Python Package Name:
&lt;span class="o"&gt;====================&lt;/span&gt;
Please enter a valid Python package name &lt;span class="k"&gt;for &lt;/span&gt;your project package.
Alphanumeric characters and underscores are allowed.
Lowercase is recommended. Package name must start with a letter
or underscore.
 &lt;span class="o"&gt;[&lt;/span&gt;spaceflights_complete]:

Change directory to the project generated &lt;span class="k"&gt;in&lt;/span&gt; /home/u_walkews/git/spaceflights-complete

A best-practice setup includes initialising git and creating a virtual environment before running &lt;span class="sb"&gt;``&lt;/span&gt;kedro &lt;span class="nb"&gt;install&lt;/span&gt;&lt;span class="sb"&gt;``&lt;/span&gt; to &lt;span class="nb"&gt;install &lt;/span&gt;project-specific dependencies. Refer to the Kedro documentation: https://kedro.readthedocs.io/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#other-versions-of-kedro-with-pipx"&gt;
  &lt;/a&gt;
  Other versions of kedro with pipx
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pipx&lt;/code&gt; not only ensures that you run  the latest version, it can also run a very specific version.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pipx run &lt;span class="nt"&gt;--spec&lt;/span&gt; &lt;span class="nv"&gt;kedro&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0.16.6 kedro new
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://waylonwalker.com/kedro-environment/"&gt;https://waylonwalker.com/kedro-environment/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The next post in this series will help you create your virtual environment for your new kedro project.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#check-out-these-related-posts"&gt;
  &lt;/a&gt;
  Check Out These Related Posts
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/waylonwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ukb2PhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Izxe95PY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/271838/95e313ca-39fc-4ee6-bf57-ad52b4dcf0d2.png" alt="waylonwalker"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/waylonwalker/data-engineering-in-the-terminal-how-i-kedro-1f6l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Data Engineering in The Terminal | How I Kedro&lt;/h2&gt;
      &lt;h3&gt;Waylon Walker ・ Aug 18 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#kedro&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with Me
&lt;/h2&gt;

&lt;p&gt;I am trying to build my &lt;a href="https://youtube.com/waylonwalker"&gt;YouTube@waylonwalker&lt;/a&gt; channel I would greatly appreciate a sub.&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://twitter.com/_WaylonWalker"&gt;twitter@_waylonwalker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I stream a few times per week on &lt;a href="https://www.twitch.tv/waylonwalker"&gt;twitch@waylonwalker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out all of my public repos on &lt;a href="https://github.com/waylonwalker/"&gt;github@waylonwalker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Stay up to date by joining the &lt;a href="https://waylonwalker.com/newsletter"&gt;newsletter&lt;/a&gt; if that's your thing.&lt;/p&gt;

&lt;p&gt;Connect on &lt;a href="https://www.linkedin.com/in/waylonwalker/"&gt;LinkedIn@waylonwalker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://dev.to/waylonwalker"&gt;Dev.to@waylonwalker&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kedro</category>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>What is Security.txt and Why Do I Need It?</title>
      <author>Aaron Saray</author>
      <pubDate>Mon, 27 Sep 2021 19:16:29 +0000</pubDate>
      <link>https://dev.to/laravelhacker/what-is-security-txt-and-why-do-i-need-it-2e22</link>
      <guid>https://dev.to/laravelhacker/what-is-security-txt-and-why-do-i-need-it-2e22</guid>
      <description>&lt;p&gt;In this article we discuss what the &lt;code&gt;security.txt&lt;/code&gt; file is, where it goes, and how you should make use of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-raw-securitytxt-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;security.txt&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;The purpose of the &lt;code&gt;security.txt&lt;/code&gt; file is to provide an avenue for cyber security researchers and other good samaritans to report any security concerns they’ve come across. This should include the best contact person and way to contact them in your organization. It will also contain an expiration date to indicate if this information is still accurate or if it has become stale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-this"&gt;
  &lt;/a&gt;
  Why do we need this?
&lt;/h2&gt;

&lt;p&gt;There’s nothing worse than finding a security hole on a website and not knowing how to report the findings to the owner. Security researchers - or just kind-hearted people who are bored - need to have an easy way to report such concerns - and it’s not always clear how to do that.&lt;/p&gt;

&lt;p&gt;If you have a customer service group, sometimes that information gets routed to them. They may not understand the severity of the report or the urgency, or might even discard it. Your support personnel are probably not trained in how to handle security-related content and the sensitivity involved.&lt;/p&gt;

&lt;p&gt;Sometimes it can be confusing where to send the report. Think about someone trying to fill out a contact form: do I sent it to support? To sales? To other? And what about sites that don’t provide easy contact information - where do I try to contact them, then? Twitter?&lt;/p&gt;

&lt;p&gt;A universal system that is recognizable and accepted by all in the community is needed - and that is &lt;code&gt;security.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-make-one"&gt;
  &lt;/a&gt;
  How do I make one?
&lt;/h2&gt;

&lt;p&gt;The file is a plain text file named &lt;code&gt;security.txt&lt;/code&gt; with a mime type of text/plain. It must be encoded as &lt;code&gt;UTF-8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It should be placed at the root of your website at &lt;code&gt;/.well-known/security.txt&lt;/code&gt; or at &lt;code&gt;/security.txt&lt;/code&gt;. I tend to like the main root, not the &lt;code&gt;.well-known&lt;/code&gt; folder because I also like to supply other text files like &lt;code&gt;robots.txt&lt;/code&gt; and &lt;code&gt;humans.txt&lt;/code&gt; there. So, this means you can find the Laravel Hacker one at &lt;a href="https://laravelhacker.com/security.txt"&gt;https://laravelhacker.com/security.txt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fields are defined as a single key on each line followed by a colon and an optional space. You &lt;em&gt;must&lt;/em&gt; have the &lt;code&gt;Contact&lt;/code&gt; and &lt;code&gt;Expires&lt;/code&gt; fields. The contact is an URI - which is most often a mailto link. You could use a link to another webpage if you’re afraid of spam - but pointing to a link is starting to defeat the purpose. Now you need to make sure that page is also always up and available. The expiration date needs to be a ISO8601 date.&lt;/p&gt;

&lt;p&gt;So, for example, you could do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Contact: mailto:guy@smiley.com
Expires: 2022-12-31T18:59:00.000Z
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are additional optional fields available for encryption, acknowledgements, canonical references, and more. You can find out more about this at &lt;a href="https://securitytxt.org/"&gt;the official security.txt website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;If you’re looking for the official website for this spec, you can check out &lt;a href="https://securitytxt.org"&gt;https://securitytxt.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to see Laravel Hacker’s, you can check out &lt;a href="https://laravelhacker.com/security.txt"&gt;https://laravelhacker.com/security.txt&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What's your favorite JS testing framework?</title>
      <author>Madza</author>
      <pubDate>Mon, 27 Sep 2021 18:52:47 +0000</pubDate>
      <link>https://dev.to/madza/what-s-your-favorite-js-testing-framework-5c2l</link>
      <guid>https://dev.to/madza/what-s-your-favorite-js-testing-framework-5c2l</guid>
      <description>&lt;p&gt;Nowadays, the industry is dominated by agile development and tight deadlines. Manual unit testing can be complex and time-consuming, so it makes sense to rely on automated frameworks.&lt;/p&gt;

&lt;p&gt;Some of the favorites include: &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;, &lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt;, &lt;a href="https://jasmine.github.io/"&gt;Jasmine&lt;/a&gt;, &lt;a href="https://karma-runner.github.io/latest/index.html"&gt;Karma&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do you unit test your code and what's your favorite testing framework?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>javascript</category>
      <category>testing</category>
    </item>
    <item>
      <title>Dynamically Import ESM Modules From A CDN</title>
      <author>David Dal Busco</author>
      <pubDate>Mon, 27 Sep 2021 18:47:46 +0000</pubDate>
      <link>https://dev.to/daviddalbusco/dynamically-import-esm-modules-from-a-cdn-4ao5</link>
      <guid>https://dev.to/daviddalbusco/dynamically-import-esm-modules-from-a-cdn-4ao5</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DrnhNy2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2AhC1zkJeJsjBGN56FMa5mJA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DrnhNy2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2AhC1zkJeJsjBGN56FMa5mJA.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@danborn?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Daniel Born&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;What if I told you modern browsers can natively import a single, or sets of functions, of a JavaScript library bundles, at runtime and, from a CDN? Wouldn’t that open up possibilities?&lt;/p&gt;

&lt;p&gt;Well, good news. This is not an hypothesis but, a fact. Nowadays, all modern browsers can dynamically import &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;JavaScript modules&lt;/a&gt; from content delivery networks 🥳.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;There are a number of libraries and frameworks that enable module usage when developing web frontend applications. Most apps and libraries will have their files “bundled” using tools like &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt;, &lt;a href="https://rollupjs.org/"&gt;Rollup&lt;/a&gt; or with more recent bundler such as &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to these tools, the JavaScript code can be analyzed, build and split into smaller chunks.&lt;/p&gt;

&lt;p&gt;While this approach works like a charm, it has for downside that  ES modules are imported regardless if executed or not.&lt;/p&gt;

&lt;p&gt;For example, if you would use an awesome library such as &lt;a href="https://github.com/jakearchibald/idb-keyval"&gt;idb-keyval&lt;/a&gt; to print out a value stored in IndexedDB but, had for goal to reserve the function to administrators only.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idb-keyval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the code is build statically, the third party dependency would be added to the ES modules no matter what. As a result, all users, administrators or not, would have to download the related code even if they would never require it.&lt;/p&gt;

&lt;p&gt;This is when dynamic import, part of the &lt;a href="https://github.com/tc39/proposal-dynamic-importhttps://github.com/tc39/proposal-dynamic-import"&gt;official TC39&lt;/a&gt; proposal and which has been standardized with &lt;a href="https://tc39.es/ecma262/2020/"&gt;ECMAScript 2020&lt;/a&gt;, comes into play.&lt;/p&gt;

&lt;p&gt;It tells the browser to load code on demand and only when it is required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idb-keyval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Only the administrators would now have to download the code of the third party library.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Dynamic import is not mandatory, your code is all fine. Bundlers and browsers do an incredible job with the dozens of modules of your libraries and applications. It can be helpful in some situations. As in the above example, or when large modules take time to load. It can help improve boot time performance.&lt;/em&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dynamic-import-cdn-but-why"&gt;
  &lt;/a&gt;
  Dynamic Import + CDN … But Why?
&lt;/h3&gt;

&lt;p&gt;Imagine now you are developing an application that interact with a backend. Whether you implement your own API or use a third party cloud provider, the code that interact with your data might commonly find place within your frontend app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CIEhR7l0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AYQ5N22V_d5PVclZ7Ups0jg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CIEhR7l0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AYQ5N22V_d5PVclZ7Ups0jg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we have seen in previous chapter, if you do not take advantages of “dynamic import”, all users might therefore download the code to interact with the backend (displayed in the schema as “services”) regardless if they use it or not.&lt;/p&gt;

&lt;p&gt;While this is probably often not an issue - after all, if the application uses an API, there is a good chance that all users use it - it can become one over time because such design is tight to a vendor lock-in.&lt;/p&gt;

&lt;p&gt;Some day, you might have to migrate the application to a new backend or another cloud provider and, the complexity of the upgrade might become a problem.&lt;/p&gt;

&lt;p&gt;To prevent such issue, you might extract the “Services” to libraries, giving you more flexibility foreseen the pitfall.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SBHMt-3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AzppU1zdm2fm1va-X3WRWxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SBHMt-3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AzppU1zdm2fm1va-X3WRWxw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, without “dynamic import”, all users might still download all the code, what would be particularly unfortunate if you would ship the application with both “old” and “new” services at some point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2vTlIbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A09yQFPIiesplbZikZN2tEA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2vTlIbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A09yQFPIiesplbZikZN2tEA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s imagine again that everything is in now place. The application leverages “dynamic import”, both “old” and “new” services have been extracted to separate libs.&lt;/p&gt;

&lt;p&gt;Even though everything works for the best, at this point, the frontend application has direct dependencies (think &lt;code&gt;npm i lib --save&lt;/code&gt;) on these libraries.&lt;/p&gt;

&lt;p&gt;If you make any changes in the services, you have to re-build and re-deploy everything, what can quickly become tasky. Especially if you have got not “just” two services but lots of them.&lt;/p&gt;

&lt;p&gt;This is where the combination of “dynamic import” and CDN is finally going to shine.&lt;/p&gt;

&lt;p&gt;These two strategies applied together can transform the frontend application from a monolith to a modular solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUK1j9OT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AQ4niQVYzosDUo96OS6jr7Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUK1j9OT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AQ4niQVYzosDUo96OS6jr7Q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For each user request, upon a certain condition such as an environment configuration, the frontend application can request at runtime only the function(s), piece of code, needed to perform the specific queries.&lt;/p&gt;

&lt;p&gt;Doing so, not just the user is downloading only what is required to perform the queries but, the application also becomes almost independent of the services. Patching these or even adding a new backend can now be developed and deployed without any changes to the application!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#show-me-some-code"&gt;
  &lt;/a&gt;
  Show Me Some Code
&lt;/h3&gt;

&lt;p&gt;That was a long introduction and explanation, I hope you are still here 😅. A few code is often worth a thousand words, therefore here is how you can dynamically import function(s) from a CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ComponentInterface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@stencil/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-home.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppHome&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ComponentInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;componentDidLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cdn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cdn.jsdelivr.net/npm/idb-keyval@6/+es&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cdn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;dynamic&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;esm&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cdn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;❤️&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/mark&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is presented in a &lt;a href="https://stenciljs.com/"&gt;Stencil&lt;/a&gt; web component to highlight the fact that it works in any modern browsers.&lt;/p&gt;

&lt;p&gt;When the component is mounted, it creates a &lt;code&gt;string&lt;/code&gt; variable that point to the ES modules that needs to be loaded.&lt;/p&gt;

&lt;p&gt;The usage of such a temporary &lt;code&gt;string&lt;/code&gt; value is useful with TypeScript. Without it, the compiler throws an error &lt;code&gt;TS2307: Cannot find module 'https://...' or its corresponding type declarations.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The URL of the library on the CDN can then be used to dynamically import, &lt;code&gt;await import(cdn)&lt;/code&gt;, the functions we are interested in and voilà, that’s already it 🥳.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#type-safety"&gt;
  &lt;/a&gt;
  Type Safety
&lt;/h3&gt;

&lt;p&gt;Dynamic import is a native feature, therefore supported out of the box in JavaScript. To improve the syntax with TypeScript, I suggest to use interfaces that can be shared by the consumer (the frontend application) and the libraries (the “Services”).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DESC4KKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZP2hO1-pD2NH0vLPqDvfJg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DESC4KKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZP2hO1-pD2NH0vLPqDvfJg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For example, we can declare an &lt;code&gt;interface&lt;/code&gt; of a function that says “hello”:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;SayHello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;library&lt;/code&gt; can implements it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;say&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SayHello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
               &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;app&lt;/code&gt; can also uses the types to improve the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cdn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://..../index.esm.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;say&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;say&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SayHello&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cdn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;say&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moreover, extracting interfaces and types can also ease new development in the future.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This approach, “Dynamic Import + CDN”, is not just words to me. It is the core architecture of the next major release(s) of &lt;a href="https://deckdeckgo.com"&gt;DeckDeckGo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our main application (source &lt;a href="https://github.com/deckgo/deckdeckgo/tree/main/studio"&gt;GitHub&lt;/a&gt;), the core, is an offline first editor for slides that has no dependencies to any API.&lt;/p&gt;

&lt;p&gt;It “only” consumes a library (source &lt;a href="https://github.com/deckgo/deckdeckgo/tree/main/utils/editor"&gt;GitHub&lt;/a&gt;) that describes and exposes the interfaces for endpoints that can be use if a backend is configured.&lt;/p&gt;

&lt;p&gt;As we are currently using in production both &lt;a href="https://firebase.google.com/products/firestore"&gt;Google Firestore&lt;/a&gt; (see &lt;a href="https://github.com/deckgo/deckdeckgo/tree/main/providers/firebase"&gt;GitHub&lt;/a&gt;) and &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; (see &lt;a href="https://github.com/deckgo/deckdeckgo/tree/main/providers/api"&gt;GitHub&lt;/a&gt;), there are two services that are dynamically imported at runtime through a CDN to perform the operations with these cloud providers.&lt;/p&gt;

&lt;p&gt;Meanwhile, we have also developed a (successful) proof of concept to port our web app to the &lt;a href="https://dfinity.org/"&gt;DFINITY&lt;/a&gt;’s Internet Computer and we are continuing the work towards this direction because, spoiler alert, it is the future. That is why another service interacts with the blockchain network (see &lt;a href="https://github.com/deckgo/deckdeckgo/tree/main/providers/ic"&gt;GitHub&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Finally, thanks to the modular architecture, we are able to quickly integrate our editor in any networks if some clients are looking to use it on-premises.&lt;/p&gt;

&lt;p&gt;Summarized: we are future-proof 🚀.&lt;/p&gt;

&lt;p&gt;To infinity and beyond!&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;




&lt;p&gt;You can reach me on &lt;a href="https://twitter.com/daviddalbusco"&gt;Twitter&lt;/a&gt; or my &lt;a href="https://daviddalbusco.com"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give a try to &lt;a href="https://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt; for your next slides!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deckdeckgo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4yatxfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deckdeckgo.com/assets/meta/deckdeckgo-meta.png" alt="DeckDeckGo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>architecture</category>
      <category>programming</category>
    </item>
    <item>
      <title>Complete Automation Integrating Docker, Github with Jenkins Multibranch CI/CD Pipeline on AWS EC2</title>
      <author>Amsal Khan</author>
      <pubDate>Mon, 27 Sep 2021 18:45:35 +0000</pubDate>
      <link>https://dev.to/amsal/complete-automation-integrating-docker-github-with-jenkins-multibranch-ci-cd-pipeline-on-aws-ec2-3l0o</link>
      <guid>https://dev.to/amsal/complete-automation-integrating-docker-github-with-jenkins-multibranch-ci-cd-pipeline-on-aws-ec2-3l0o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-cicd"&gt;
  &lt;/a&gt;
  What is CI/CD?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CI stands for Continous Integration&lt;/li&gt;
&lt;li&gt;CD stands for Continous Delivery or Continous Deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me explain through a example: &lt;/p&gt;

&lt;p&gt;When you make a commit and push sources to Git SCM(Source Code Management like Github, GitLab etc), then automatic builds and tests are run with the latest changes, this is knows as Continous Integration&lt;/p&gt;

&lt;p&gt;With Continous Delivery, code changes are automatically built, tested, and prepared for a release to production. Continuous delivery expands upon continuous integration by deploying all code changes to a testing environment and put on a manual approval for adding them in production envirment.&lt;/p&gt;

&lt;p&gt;Continous Deployment expands upon continuous delivery and pushed to production environment automatically without any approval.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UxJnIaoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/product-marketing/DevOps/continuous_integration.4f4cddb8556e2b1a0ca0872ace4d5fe2f68bbc58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UxJnIaoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/product-marketing/DevOps/continuous_integration.4f4cddb8556e2b1a0ca0872ace4d5fe2f68bbc58.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-pipeline-and-multibranch-pipeline"&gt;
  &lt;/a&gt;
  What is Pipeline and MultiBranch Pipeline?
&lt;/h2&gt;

&lt;p&gt;A DevOps pipeline is a set of automated processes and tools that allows both developers and operations professionals to work cohesively to build and deploy code to a production environment&lt;br&gt;&lt;br&gt;&lt;br&gt;
Jenkins MultiBranch pipeline allows us to automatically create a pipeline for each branch on your source control repository.&lt;br&gt;Multibranch pipeline works using along with Jenkinsfile that is usually stored along with our source code inside a version control repository.&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#jenkins"&gt;
  &lt;/a&gt;
  Jenkins
&lt;/h2&gt;

&lt;p&gt;Jenkins is an open source automation server.&lt;br&gt;
The &lt;a href="https://www.jenkins.io"&gt;Jenkins&lt;/a&gt; project was started in 2004 (originally called Hudson) by Kohsuke Kawaguchi, while he worked for Sun Microsystems. It was mainly developed for Continuous Integration, but in recent days, Jenkins orchestrates the entire software delivery pipeline — called continuous delivery and Continuous Deployment (CD). Presently, it is among one of the most popular Devops tools.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/docker/docker"&gt;Docker&lt;/a&gt; is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and deploy it as one package. By doing so, thanks to the container, the developer can rest assured that the application will run on any other Linux machine regardless of any customized settings that machine might have that could differ from the machine used for writing and testing the code.&lt;/p&gt;

&lt;p&gt;It is a tool that is designed to benefit both developers and system administrators, making it a part of many DevOps (developers + operations) toolchains. For developers, it means that they can focus on writing code without worrying about the system that it will ultimately be running on. It also allows them to get a head start by using one of thousands of programs already designed to run in a Docker container as a part of their application. For operations staff, Docker gives flexibility and potentially reduces the number of systems needed because of its small footprint and lower overhead.&lt;br&gt;
Here, we will be integrating Docker with Jenkins.&lt;/p&gt;

&lt;p&gt;Pre-Requisites&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RHEL8 (you may install any other OS but steps will differ)&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;MobaXterm SSH Client (or any other whichever you prefer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Deploy a AWS EC2 Instance of RHEL8-OS from AWS Console.&lt;br&gt;&lt;br&gt;
Make sure to add Inbound rules for 8080 port for Source 0.0.0.0/0&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execute these commands to Install Docker:&lt;br&gt;
&lt;code&gt;sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo&lt;/code&gt;&lt;br&gt;
&lt;code&gt;sudo dnf install docker-ce&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execute these commands to Install Wget, OpenJDK, Jenkins:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo dnf update -y
sudo dnf install wget -y
sudo wget http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo -O /etc/yum.repos.d/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key
sudo  dnf install -y java-11-openjdk-devel
sudo dnf install http://repo.okay.com.mx/centos/8/x86_64/release/daemonize-1.7.8-1.el8.x86_64.rpm
sudo dnf install -y jenkins
sudo systemctl start jenkins
sudo systemctl enable jenkins
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Give Jenkins user sudo priviledges:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vi -f /etc/sudoers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and add the following line in the bottom of file:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;jenkins ALL= NOPASSWD: ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Lets Configure Jenkins now:
Open jenkins on web-browser using URL:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://aws_ip_address:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
    * You will need to get the token from&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/var/lib/jenkins/secrets/initialadminpassword
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo cat /var/lib/jenkins/secrets/initialadminpassword
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and copy the text and paste that on Jenkins webpage.&lt;br&gt;&lt;br&gt;
    * Select Install Suggested Plugins&lt;br&gt;&lt;br&gt;
    * Create a first admin user&lt;br&gt;&lt;br&gt;
    * Save and Finish&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a Personal Access Token by visiting &lt;a href="https://github.com/settings/tokens"&gt;here&lt;/a&gt;. Set all permissions and set Expiration to No Expiration.
And then go to Manage Jenkins-&amp;gt;Configure System
In the Add GitHub Server:
Enter Name:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Personal_Access_Token_USER
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;API URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://api.github.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add-&amp;gt;Jenkins, select Kind-&amp;gt;Secret Text&lt;br&gt;&lt;br&gt;
Enter Secret as your Personal Access Token which you created earlier.&lt;br&gt;&lt;br&gt;
ID (optional):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;b91c96c3-7a3f-4e08-b22d-c1100dd49eb9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter same ID if you are going to use my Jenkinsfile from this project or edit the ID in the Jenkinsfile acccordingly.&lt;br&gt;&lt;br&gt;&lt;br&gt;
Go to Manage Jenkins-&amp;gt;Manage Credentials-&amp;gt;Jenkins-&amp;gt;Global credentials(unrestricted)-&amp;gt;Add Credentials&lt;br&gt;&lt;br&gt;
Username: Your GitHub Username&lt;br&gt;&lt;br&gt;
Password: Enter the Personal Access Token which was generated earlier&lt;br&gt;&lt;br&gt;
ID (optional):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;434b0b23-9deb-4ee6-85d4-43c4c23513bb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter same ID if you are going to use my Jenkinsfile from this project or edit the ID in the Jenkinsfile acccordingly.&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and Modify Jenkinsfile
&lt;strong&gt;What it does?&lt;/strong&gt;
Well, Jenkinsfile is the ultimate pipeline file through which Jenkins will automatically detect the whole automation process and follow the steps mentioned in it.
Download my &lt;a href="https://github.com/Amsal1/devops_ci_cd/blob/master/Jenkinsfile"&gt;Jenkinsfile&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4BmzcQRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GWC3pIL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4BmzcQRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GWC3pIL.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Replace my git repo url with yours throughout the file. Also change UserIdentity block with your GitHub Details in class GitSCM of Code Checkout&lt;br&gt;&lt;br&gt;
Push this modified Jenkinsfile to your both branches in your repo. It would be better if you add it in master branch and create dev branch using that but you may only do this on a new repo. For a older repo, you may need to use combinations of few git commands including git reset, git rebase, git checkout and git branch. Text me if you face any diffcuilties😄&lt;br&gt;&lt;br&gt;
Also remember, I am using master and dev branch. If you're using any any other branch instead of 'dev' then, make changes accordingly in Jenkinsfile.&lt;br&gt;&lt;br&gt;
Also open inbound ports 82 and 83 in AWS EC2 Console like you did for port 8080 in Step 1&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select New Item:
Enter Item Name:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git_job_pipeline
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select Multibranch pipeline and click OK&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Select Add Sources-&amp;gt;GitHub&lt;br&gt;&lt;br&gt;
Select and set Credentials and set your repo name. &lt;br&gt;&lt;br&gt;
In my case: &lt;a href="https://github.com/Amsal1/devops_ci_cd/"&gt;https://github.com/Amsal1/devops_ci_cd/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click Save and it will done rest😄&lt;/p&gt;

</description>
      <category>jenkins</category>
      <category>docker</category>
      <category>devops</category>
      <category>multibranch</category>
    </item>
    <item>
      <title>Not Feeling Like Enough When in Tech</title>
      <author>Deepesha Burse</author>
      <pubDate>Mon, 27 Sep 2021 18:23:15 +0000</pubDate>
      <link>https://dev.to/deepeshaburse/not-feeling-like-enough-when-in-tech-234c</link>
      <guid>https://dev.to/deepeshaburse/not-feeling-like-enough-when-in-tech-234c</guid>
      <description>&lt;p&gt;Most of us, if not all, feel as though we’re not enough at some point in some context. Since I’ve decided to make a career in tech, I have felt so at multiple points and so thought of writing about it. This blog is my point of view, how I deal with the feeling and what I would expect from the other person if I were to express to someone. My sole aim of writing this blog is to start a conversation and not just be more in touch with our feelings but also become more sensitive towards others.&lt;/p&gt;

&lt;p&gt;Social media has definitely made a huge impact on me, and the large number of amazing, supportive tech communities is something that I am so grateful for. Unfortunately, just like everything else, I feel like the presence of so many communities and social media platforms is a huge contributor to this feeling. I’ll feel perfectly fine until I see this one tweet saying someone has learnt some new technology or a post on LinkedIn talking about this exceptional internship, they got a famous company and although I am very happy to read such a news, it starts the ‘Am I doing enough? Can I achieve that?’ loop. It makes me criticize everything I’ve achieved yet and if I really belong to this field. &lt;/p&gt;

&lt;p&gt;It’s not a good feeling to say the least! &lt;/p&gt;

&lt;p&gt;Even though I absolutely understand why we feel this way, and it is very tough to think of it in any other way, it is really worth considering what we’re comparing to and who. Tech is such a vast field. New things are being made/launched every day, we are making progress in leaps and bounds, and we need to be mindful of that. Keeping up with that and expecting ourselves to know everything is honestly, a little unfair to ourselves. As long as we’re making some sort of progress every day, and that includes breaks every once in a while (especially when we need one!), scrutinizing yourself over every little thing is not a good idea.&lt;/p&gt;

&lt;p&gt;Another little thing I love to remind myself is, that someone will always be better than me and I will always be better than someone. And this is also very contextual, I might be better than someone in one technology and that same person may be so much better than me in some other technology. &lt;/p&gt;

&lt;p&gt;Talking to loved ones or anyone you are close to helps a lot too! They remind you of the efforts you are putting in and that at the end of the day that’s all that matters. I have been very lucky with the people in my life, they have always been very supportive of me and not just reminded me that I’m good at what I do but also that I am much more than just my career. It’s a great reminder that our career is very important, but it is not the only thing that matters. &lt;/p&gt;

&lt;p&gt;Even though we feel this, I think we are not as sensitive to others or, rather considerate that others go through this too. When someone confides in you that they feel this way, the most common reply I’ve seen is ‘Don’t worry you’ll get there some day’ and although that’s a nice thing to say, I don’t really think that helps. Talking from experience, instead of being told I will probably get there some day, I would love one addition to that sentence: ‘You’re doing great right now, don’t compare yourself to them, but, if you do wish to achieve what they did, I’m sure you can and will get there some day.’ When someone is already feeling low, one ‘you’re doing great’ can go a long way, especially when they trust you with their feelings. &lt;/p&gt;

&lt;p&gt;And in case no one has told you today, I think you’re doing great! :))&lt;/p&gt;

&lt;p&gt;I hope this article pushes you to be kinder to yourself and those around you!&lt;/p&gt;

&lt;p&gt;I would love to hear how you all cope with this feeling, please drop a comment and share how you do, it might help someone!&lt;/p&gt;

</description>
      <category>mentalhealth</category>
      <category>career</category>
      <category>productivity</category>
      <category>growth</category>
    </item>
    <item>
      <title>Beginner's guide to Docker and Docker CLI commands</title>
      <author>paru429</author>
      <pubDate>Mon, 27 Sep 2021 18:21:35 +0000</pubDate>
      <link>https://dev.to/paru429/beginner-s-guide-to-docker-and-docker-cli-commands-1p75</link>
      <guid>https://dev.to/paru429/beginner-s-guide-to-docker-and-docker-cli-commands-1p75</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-docker-build-once-and-run-anywhere"&gt;
  &lt;/a&gt;
  What is Docker? - "build once and run anywhere."
&lt;/h3&gt;

&lt;p&gt;Docker is a software development tool and a virtualisation technology that makes it easy to develop, deploy, and manage applications by using containers. Container refers to a lightweight, stand-alone, executable package of a piece of software that contains all the libraries, configuration files, dependencies, and other necessary parts to operate the application.&lt;/p&gt;

&lt;p&gt;In other words, applications run in the same way, irrespective of where they are and what machine they are running on because the container provides the environment throughout the software development lifecycle of the application. Since containers are isolated, they provide security, thus allowing multiple containers to run simultaneously on the given host. Also, containers are lightweight because they do not require an extra load of a hypervisor. A hypervisor is a guest operating system like VMWare or VirtualBox, but instead, containers run directly within the host’s machine kernel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-docker"&gt;
  &lt;/a&gt;
  When to use docker?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Learning new technologies:&lt;/strong&gt; To get started with a new tool without spending time on installation and configuration, Docker offers an isolated and disposable environment. Many projects maintain Docker images with their applications already installed and configured.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic use cases:&lt;/strong&gt; Pulling images from Docker Hub is also a good solution if your application is basic or standard enough to work with a default Docker image. Cases such as in developing and hosting a website using MERN stack, the node, mongodb official images are already available on DockerHub and they are well supported. If the default configuration in these images is acceptable for your needs, then pulling the image can save a lot of time that would otherwise be spent setting up your environment and installing the necessary tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App isolation:&lt;/strong&gt; If you want to run multiple applications on one server, keeping the components of each application in separate containers will prevent problems with dependency management.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer teams:&lt;/strong&gt; &lt;em&gt;It works on my machine!&lt;/em&gt; As a developer we know that one of the trickiest problems in software development is having to deal with environment disparity across different machines and platforms. Docker allows you to run containers locally, eliminating disparity between your development and production environments, and everything in between. There is no need to install software packages locally. Everything you need for your development environment can simply run on the Docker engine as containers. Regardless of the language or the tool, you can easily containerise your environment locally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Limited system resources&lt;/strong&gt; Instances of containerised apps use far less memory than virtual machines, they start up and stop more quickly, and they can be packed far more densely on their host hardware. All of this amounts to less spending on IT.&lt;br&gt;
The cost savings will vary depending on what apps are in play and how resource-intensive they may be, but containers invariably work out as more efficient than VMs. It’s also possible to save on costs of software licenses, because you need many fewer operating system instances to run the same workloads.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#virtual-machines-vs-docker"&gt;
  &lt;/a&gt;
  Virtual machines vs Docker
&lt;/h3&gt;

&lt;p&gt;Docker containers and virtual machines are both ways of deploying applications inside environments that are isolated from the underlying hardware. The chief difference is the level of isolation.&lt;/p&gt;

&lt;p&gt;With a virtual machine, everything running inside the VM is independent of the host operating system, or hypervisor. The virtual machine platform starts a process (called virtual machine monitor, or VMM) in order to manage the virtualisation process for a specific VM, and the host system allocates some of its hardware resources to the VM. However, what’s fundamentally different with a virtual machine is that at start time, it boots a new, dedicated kernel for this VM environment, and starts a (often rather large) set of operating system processes. This makes the size of the VM much larger than a typical container that only contains the application.&lt;/p&gt;

&lt;p&gt;In contrast, With a container runtime like Docker, your application is sandboxed inside of the isolation features that a container provides, but still shares the same kernel as other containers on the same host. As a result, processes running inside containers are visible from the host system (given enough privileges for listing all processes). Having multiple containers share the same kernel allows the end user to bin-pack lots and lots of containers on the same machine with near-instant start time. Also, as a consequence of containers not needing to embed a full OS, they are very lightweight, commonly around 5-100 MB.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o8IOhzbf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd12w4u7egmc1orlcw96.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8IOhzbf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd12w4u7egmc1orlcw96.png" alt="VMvsDocker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-container"&gt;
  &lt;/a&gt;
  What is a Container?
&lt;/h3&gt;

&lt;p&gt;A container is a &lt;strong&gt;runnable instance&lt;/strong&gt; of an image. You can create, start, stop, move, or delete a container using the Docker API or CLI. You can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.&lt;/p&gt;

&lt;p&gt;By default, a container is relatively well isolated from other containers and its host machine. You can control how isolated a container’s network, storage, or other underlying subsystems are from other containers or from the host machine.&lt;/p&gt;

&lt;p&gt;A container is defined by its image as well as any configuration options you provide to it when you create or start it. When a container is removed, any changes to its state that are not stored in persistent storage disappear.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-docker-image"&gt;
  &lt;/a&gt;
  What is a Docker Image?
&lt;/h3&gt;

&lt;p&gt;An image is a &lt;strong&gt;read-only template&lt;/strong&gt; with instructions for creating a Docker container. Often, an image is based on another image, with some additional customisation. For example, you may build an image which is based on the ubuntu image, but installs the Apache web server and your application on top of it, as well as the configuration details needed to make your application run.&lt;/p&gt;

&lt;p&gt;You might create your own images or you might only use those created by others and published in a registry. To build your own image, you create a &lt;strong&gt;Dockerfile&lt;/strong&gt; with a simple syntax for defining the steps needed to create the image and run it. Each instruction in a Dockerfile creates a &lt;strong&gt;layer&lt;/strong&gt; in the image. When you change the Dockerfile and rebuild the image, only those layers which have changed are rebuilt. This is part of what makes images so lightweight, small, and fast, when compared to other virtualisation technologies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-docker-hub"&gt;
  &lt;/a&gt;
  What is Docker Hub?
&lt;/h3&gt;

&lt;p&gt;Docker Hub is a cloud-based repository service provided by Docker in which users create, test, store and distribute container images. Through Docker Hub, a user can access public, open-source image repositories, as well as use space to create their own private repositories, automated build functions, web hooks and workgroups.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-simple-dockerfile"&gt;
  &lt;/a&gt;
  Writing simple Dockerfile
&lt;/h3&gt;

&lt;p&gt;Assume we have a simple node JS application that has server.js file, which listens to the port 3040 and prints 'Hello World!' on hitting 'localhost:3040/'&lt;/p&gt;

&lt;p&gt;File Structure as follows:&lt;br&gt;
simpleNodeApplication&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;li&gt;package-lock.json&lt;/li&gt;
&lt;li&gt;package.json&lt;/li&gt;
&lt;li&gt;server.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
//Initializes a new build stage and sets the Base Image for subsequent instructions
FROM node:14-alpine

//Defining working directory for our application and 
it will be the default directory for our further steps
WORKDIR /app

//Copy package.json file to our created workdir
COPY package.json .

//Does npm install
RUN npm install

//Copy entire code from local to our workdir
COPY . .

//Exposing application on port 3040
EXPOSE 3040

//Command to run our application
CMD ["node", "server.js"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;To play with the above dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Build image&lt;/em&gt; =&amp;gt; &lt;code&gt;docker build -t myApp:V1 .&lt;/code&gt;&lt;br&gt;
&lt;em&gt;Create container and map it to port 3000&lt;/em&gt; =&amp;gt; &lt;code&gt;docker run -p 3000:3040 --name myContainer myApp:V1&lt;/code&gt;&lt;br&gt;
&lt;em&gt;List running containers&lt;/em&gt; =&amp;gt; &lt;code&gt;docker ps&lt;/code&gt;&lt;br&gt;
&lt;em&gt;Stop container&lt;/em&gt; =&amp;gt; &lt;code&gt;docker stop myContainer&lt;/code&gt;&lt;br&gt;
&lt;em&gt;To start container again&lt;/em&gt; =&amp;gt; &lt;code&gt;docker start myContainer&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We might wonder about the difference between RUN and CMD, &lt;code&gt;RUN&lt;/code&gt; command will be executed while we build an image, Whereas the &lt;code&gt;CMD&lt;/code&gt; instruction should be used to run the software contained in your image&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#docker-commands"&gt;
  &lt;/a&gt;
  Docker commands
&lt;/h3&gt;

&lt;p&gt;The following are some of the docker CLI commands that we use in daily basis&lt;/p&gt;

&lt;p&gt;Let ImageId be &lt;code&gt;myApp:V1&lt;/code&gt; and ContainerName be &lt;code&gt;myContainer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;docker build [OPTIONS] PATH | URL | -&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker build -t myApp:V1 .&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This command help us to build an image of an application using written dockerfile.&lt;br&gt;
We can name the image on our own, to do that use &lt;code&gt;-t&lt;/code&gt; option &lt;code&gt;docker build -t name:tag .&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker tag myApp:V1 myNewApp:V1&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This allows us to rename/tag already created image without the need for rebuilding it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;List all images that are available in local.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker image inspect Name|ImageId&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker image inspect myApp:V1&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This provides detailed information of an image in JSON format by default.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker rmi [OPTIONS] IMAGE [IMAGE...]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker rmi myApp:V1&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This command allows us to remove one or more images.&lt;br&gt;
We can remove the image only if it is not used by any container, including stopped containers. Inorder to remove image we need to remove the container first.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker system prune [OPTIONS]&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;docker run [OPTIONS] IMAGE [COMMAND] [ARG...]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker run -p 3000:3040 -it -rm --name myContainer myApp:V1&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This command first creates a writeable container layer over the specified image, and then starts it using the specified command. By default this command runs in attached mode. Every time you run this command it will create a new container with the given image.&lt;br&gt;
By default this command search for image in local, if not found it will also look in repositories.&lt;br&gt;
In order to name our container we can use &lt;code&gt;--name&lt;/code&gt; option, &lt;code&gt;docker run --name string Name|ImageId&lt;/code&gt;.&lt;br&gt;
In order to run an application with interactive mode(read input from console etc...) use &lt;code&gt;-it&lt;/code&gt; option.&lt;br&gt;
&lt;code&gt;-rm&lt;/code&gt; option will tell docker to remove the container once the container is stopped.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker stop [OPTIONS] CONTAINER [CONTAINER...]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker stop myContainer&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This commands helps us to stop one or more containers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker start [OPTIONS] CONTAINER [CONTAINER...]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker start myContainer&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This commands helps us to start one or more stopped containers. By default this runs in detached mode.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker restart [OPTIONS] CONTAINER [CONTAINER...]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker restart myContainer&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Restart one or more containers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker rename CONTAINER NEW_NAME&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker rename myContainer myNewContainer&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Allows us to rename already created container.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker ps [OPTIONS]&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This list all running containers by default.&lt;br&gt;
To list all containers use &lt;code&gt;-a&lt;/code&gt; option.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker rm [OPTIONS] CONTAINER [CONTAINER...]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker rm myContainer&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This command allows us to remove one or more containers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker logs [OPTIONS] CONTAINER&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker logs myContainer&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fetch the logs of a container.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Copy files/folders between a container and the local filesystem. This can be used in scenarios like when we want to pull log file from container to local file system for debugging.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker login [OPTIONS] [SERVER]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker login localhost:8080&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Log in to a Docker registry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker logout [SERVER]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker logout localhost:8080&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Log out from a Docker registry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker push [OPTIONS] NAME[:TAG]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker image push myApp:V1&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use docker image push to share your images to the Docker Hub registry or to a self-hosted one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker pull [OPTIONS] NAME[:TAG|@DIGEST]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker pull ubuntu:20.04&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker Hub contains many pre-built images that you can pull and try without needing to define and configure your own.&lt;br&gt;
This command allows us to download a particular image, or set of images (i.e., a repository)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hope you got a good understanding about docker&lt;br&gt;
Thanks for reading!!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>beginners</category>
      <category>development</category>
    </item>
    <item>
      <title>Testing in Android. How to run a test</title>
      <author>Tristan Elliott</author>
      <pubDate>Mon, 27 Sep 2021 17:39:35 +0000</pubDate>
      <link>https://dev.to/theplebdev/testing-in-android-how-to-run-a-test-51gk</link>
      <guid>https://dev.to/theplebdev/testing-in-android-how-to-run-a-test-51gk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now that I have officially released my first app, which can be found &lt;a href="https://play.google.com/store/apps/details?id=com.elliottSoftware.ecalvingtracker&amp;amp;hl=en&amp;amp;gl=US"&gt;HERE&lt;/a&gt; on the Google Play store. I want to add more features to my app, however, I think the next best step is to add some tests. So, this series is going to be a practical series dedicated to understanding testing in the Android framework. All the information in this blog post is from a Google codelab which can be found &lt;a href="https://developer.android.com/codelabs/advanced-android-kotlin-training-testing-basics#0"&gt;HERE&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-environment"&gt;
  &lt;/a&gt;
  The Environment
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In Android there are 3 folders that get automatically created for us. Those folders are called &lt;a href="https://developer.android.com/studio/build/build-variants#sourcesets"&gt;Source Sets&lt;/a&gt; and they contain the source code for our app. The source sets are:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1) main :&lt;/strong&gt; contains our app's code. This code is a shared amongst all different versions of the app we build(build variants).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) androidTest :&lt;/strong&gt; contains tests know as instrumented tests(tests that run on physical device or emulator)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) test :&lt;/strong&gt; contains tests know as local tests(tests that run without a physical device or emulator)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--79JPnXh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyjsjzxgkqmbvqr0zqgs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79JPnXh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyjsjzxgkqmbvqr0zqgs.png" alt="deleteAfterupload1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-a-local-test"&gt;
  &lt;/a&gt;
  Running a local test:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To run our first local there are two steps that we must take:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; open the &lt;code&gt;test&lt;/code&gt; folder until you find the &lt;code&gt;ExampleUnitTest.java&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; Right-click the ExampleUnitTest class and select &lt;code&gt;Run ExampleUnitTest&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once you click the run option, a window will pop up at the bottom of the screen. To show all of the tests that have passed click on the &lt;code&gt;Show passed&lt;/code&gt; check mark icon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mxASitk5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wht3q0r7z9uxtowd9faj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mxASitk5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wht3q0r7z9uxtowd9faj.png" alt="delete2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-the-test-fail"&gt;
  &lt;/a&gt;
  Making the test fail
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you look at the ExampleUnitTest class you will notice that each method has a &lt;code&gt;@Test&lt;/code&gt; annotation. This is what marks it as a test in the Android System. Also, notice the test contains an assertion, &lt;code&gt;asserEquals()&lt;/code&gt;.An assertion is the core of your test. It's a code statement that checks that your code or app behaved as expected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android uses the testing library JUnit for testing. Both &lt;code&gt;@Test&lt;/code&gt; and &lt;code&gt;asserEquals()&lt;/code&gt; come from JUnit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now to make a test fail, create a new method inside the ExampleUnitTest class and mark the method with &lt;code&gt;@Test&lt;/code&gt;. It will be very similar to the test &lt;code&gt;addition_isCorrect&lt;/code&gt; but we will purposely make the assertion fail. Below is an example of the failing test:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Test
    public void addition_isIncorrect() {
        assertEquals(3, 2 + 2);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If the you run the above code, you should get a window that looks similar to:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--br6iYwxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/id1x7xg80qaly8axzg8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--br6iYwxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/id1x7xg80qaly8axzg8u.png" alt="delete3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fix the assertion and run the code again. Boom, you and I now have a basic idea of how to run a test in the android framework.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#running-a-instrumented-test"&gt;
  &lt;/a&gt;
  Running a instrumented test
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To run a instrumented test, you perform the exact some process but in the &lt;code&gt;androidTest&lt;/code&gt; source set folder. However, when you run a instrumented test notice the emulator starting up. Remember that to run an instrumented test you need a physical device or an emulator. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that you can run tests, look forward to the next post where we will create our own tests.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Thank you for taking the time out of your day to read this blog post of mine. If you have any questions or concerns please comment below or reach out to me on &lt;a href="https://twitter.com/TristAndroidDev"&gt;Twitter&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>android</category>
    </item>
    <item>
      <title>Reactive Forms in Angular The basics</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Mon, 27 Sep 2021 17:35:07 +0000</pubDate>
      <link>https://dev.to/mcube25/reactive-forms-in-angular-the-basics-3jol</link>
      <guid>https://dev.to/mcube25/reactive-forms-in-angular-the-basics-3jol</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;Angular uses reactive methods to process and manage form. It is easy to use reactive forms to capture user inputs events, validate the inputs and create form models in large angular applications. This enables the tracking of data and changes in the form model in all parts of the application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reactive-form-model-setup"&gt;
  &lt;/a&gt;
  Reactive Form model setup
&lt;/h4&gt;

&lt;p&gt;Reactive forms provide a model-driven approach to handling form inputs whose values change over time. It uses an explicit and immutable approach to manage the form at a given point in time and it is built around observable streams.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adding-a-basic-form-control"&gt;
  &lt;/a&gt;
  Adding a basic form control
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Register the reactive form module in the app module declaration of an angular app. This module declares a reactive form directives needed to use the reactive form&lt;/li&gt;
&lt;li&gt; Generate a new form control instance and save in the component class&lt;/li&gt;
&lt;li&gt;Register the form control in the template. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us take a look at how to implement the above. To use the reactive form controls we need to import ReactiveFormsModule from @angular/forms package and add it to the NgModule imports array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
imports:[
ReactiveFormsModule],
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next is to generate a form control. To register a single form control, we import the form control class and create a new instance of FormControl that is saved as a class property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { FormControl } from '@angular/forms';

@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrls: ['./cart.component.css']
})

export class CartComponent implements OnInit {
  name = new FormControl('');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By creating this control in the component class, immediate access is gotten to listen for, update and validate the state of the form input.&lt;br&gt;
To register the control in the template, we can add a label to the template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label&amp;gt;Name:
&amp;lt;input type="text" [formControl]="name"&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Displaying a form control value can be achieved through value changes from observables where changes are listened for in the template using &lt;code&gt;AsyncPipe&lt;/code&gt;  or in the component class using a subscribe method. It can also be achieved with the value property which gives a snapshot of the current value.&lt;br&gt;
Let us take an example of how to display the value using interpolation in the template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label&amp;gt;Name:
&amp;lt;input type="text" [formControl]="name"&amp;gt;
&amp;lt;p&amp;gt;
    value: {{name.value}}
&amp;lt;/p&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The displayed value changes as the form control element is updated. Reactive forms have methods they use to change a control value programmatically. This gives flexibility to update the value without user interaction. A form control instance provides a &lt;code&gt;setValue()&lt;/code&gt; method that updates the value of the form control and validates the structure of the value provided against the control structure. To update the name we can use the setValue method as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; upDateName() {
    this.name.setValue('Kings');
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the template  with a button to simulate name update&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label&amp;gt;Name:
&amp;lt;input type="text" [formControl]="name"&amp;gt;
&amp;lt;p&amp;gt;
    value: {{name.value}}
&amp;lt;/p&amp;gt;
&amp;lt;/label&amp;gt;
&amp;lt;button (click)="upDateName()"&amp;gt;Update Name&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The form model is the source of truth for the control. When the button is clicked the value of the input is changed within the component class overriding its current value.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#grouping-form-controls"&gt;
  &lt;/a&gt;
  Grouping form controls
&lt;/h4&gt;

&lt;p&gt;Forms typically contain several related controls. Reactive forms provide two ways of grouping multiple related controls into a single input form.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A form group that defines a dynamic form with a fixed set of controls that can be managed together.&lt;/li&gt;
&lt;li&gt;A form array that defines a dynamic form where controls can be added or removed at run time. 
A single form control instance gives control over a single input field while a form group instance tracks the form state of a group of form control instances. let us take a look at this in play. Import the form group class from the angular packages
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { FormControl, FormGroup } from '@angular/forms';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a form group instance, associate the form group model and view then save the data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;profileForm = new FormGroup({
    firstName: new FormControl(''),
    lastname: new FormControl('')
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Associate the form group model and view in the template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form [formGroup]="profileForm "&amp;gt;
    &amp;lt;label&amp;gt;First Name:
        &amp;lt;input type="text" formControlName="firstName"&amp;gt;
        &amp;lt;p&amp;gt;
            value: {{name.value}}
        &amp;lt;/p&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;Last Name:
            &amp;lt;input type="text" formControlName="lastName"&amp;gt;
            &amp;lt;p&amp;gt;
                value: {{name.value}}
            &amp;lt;/p&amp;gt;
            &amp;lt;/label&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To save the form data the form group directive listens for the submit event emitted by the form element which can be bind to a callback function. let us add an ngSubmit event listener to the form tag with the &lt;code&gt;onSubmit()&lt;/code&gt; callback method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form [formGroup]="profileForm " (ngSubmit)="onSubmit()"&amp;gt;
    &amp;lt;label&amp;gt;First Name:
        &amp;lt;input type="text" formControlName="firstName"&amp;gt;
        &amp;lt;p&amp;gt;
            value: {{name.value}}
        &amp;lt;/p&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;Last Name:
            &amp;lt;input type="text" formControlName="lastName"&amp;gt;
            &amp;lt;p&amp;gt;
                value: {{name.value}}
            &amp;lt;/p&amp;gt;
            &amp;lt;/label&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;add the method to the class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  onSubmit() {
console.log(this.profileForm.value);

  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use a button element to add a button to the form to trigger the form submission&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;button type="submit" [disabled]="profileForm.valid"&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#creating-nested-form-groups"&gt;
  &lt;/a&gt;
  Creating nested form groups
&lt;/h4&gt;

&lt;p&gt;Form groups can accept individual form control instances and other form group instances as children. This makes composing complex form models easier to maintain and logically grouped together. Let us create and take a look at a complex form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; profileForm = new FormGroup({
    firstName: new FormControl(''),
    lastname: new FormControl(''),
    address: new FormGroup({
      street: new FormControl(''),
      city: new FormControl(''),
      state: new FormControl(''),
      zip: new FormControl('')
    })
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Group the nested form in a template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div formGroupName="address"&amp;gt;
   &amp;lt;h5&amp;gt;Address&amp;lt;/h5&amp;gt;
        &amp;lt;label&amp;gt;City:
            &amp;lt;input type="text" formControlName="city"&amp;gt;
            &amp;lt;p&amp;gt;
                value: {{city.value}}
            &amp;lt;/p&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;Street Name:
            &amp;lt;input type="text" formControlName="street"&amp;gt;
            &amp;lt;p&amp;gt;
                value: {{street.value}}
            &amp;lt;/p&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;State Name:
            &amp;lt;input type="text" formControlName="state"&amp;gt;
            &amp;lt;p&amp;gt;
                value: {{state.value}}
            &amp;lt;/p&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;Zip:
            &amp;lt;input type="text" formControlName="zip"&amp;gt;
            &amp;lt;p&amp;gt;
                value: {{zip.value}}
            &amp;lt;/p&amp;gt;
        &amp;lt;/label&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;updateProfile()&lt;/code&gt; method can be used to update the firstName and street of the user&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;updateProfile() {
    this.profileForm.patchValue({
      firstName: 'jules',
      address: {
        street: '234 jules miles street'
      }
    })
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;simulate an update by adding a button to the user profile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button (click)="updateProfile()"&amp;gt;update profile&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#generating-controls-using-the-formbuilder-service"&gt;
  &lt;/a&gt;
  Generating controls using the formbuilder service
&lt;/h4&gt;

&lt;p&gt;To generate controls using the formbuilder service, we need to import the formbuilder class then inject the formbuilder service and then generate the form contents.&lt;/p&gt;

&lt;p&gt;import the formbuilder class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { FormBuilder} from '@angular/forms';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;inject the formbuilder service&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;constructor( private fb: FormBuilder) { }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;generate the controls&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;profileForm = this.fb.group({
      id: [''],
      teacherIds: [''],
      studentIds: [''],
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#validating-form-input"&gt;
  &lt;/a&gt;
  Validating form input
&lt;/h4&gt;

&lt;p&gt;Form validation is used to ensure that user input is complete and correct. To achieve this we import a validator function in the form component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Validators} from '@angular/forms'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add logic and validators to the form fields required&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;profileForm = this.fb.group({
      id: ['', validators.required],
      teacherIds: [''],
      studentIds: [''],
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the validator to the template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input placeholder="id" formControlName="id" required /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Display current status of form by using interpolation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt; Form status: {{profileForm.status}} &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see from our discussion that building a form using the reactive form approach makes managing immutable form input data at a given point much easy.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>forms</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The 6 Features of C# 10 you need to know NOW🤯</title>
      <author>Dotnetsafer</author>
      <pubDate>Mon, 27 Sep 2021 17:27:00 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/the-6-features-of-c-10-you-need-to-know-now-oja</link>
      <guid>https://dev.to/dotnetsafer/the-6-features-of-c-10-you-need-to-know-now-oja</guid>
      <description>&lt;p&gt;With only &lt;strong&gt;two months left&lt;/strong&gt; until the official release of C# 10 and &lt;strong&gt;Microsoft has opened a discussion&lt;/strong&gt; about the new features and functions of the tenth version of its C# language. These enhancements are those announced in C# 10.0 Preview 7.&lt;/p&gt;

&lt;p&gt;The features and improvements that Microsoft is going to implement in the next version of C# 10 are the following 👇&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#record-types-can-seal%C2%A0tostring"&gt;
  &lt;/a&gt;
  💥 Record types can seal ToString
&lt;/h2&gt;

&lt;p&gt;Now in C# 10.0 version, &lt;strong&gt;you have the ability&lt;/strong&gt; to add the sealed modifier when you override ToString in a record type.&lt;/p&gt;

&lt;p&gt;Sealing the ToString method &lt;strong&gt;evade the compiler from synthesizing&lt;/strong&gt; a ToString method for any derived record types. This function &lt;strong&gt;allows you&lt;/strong&gt; to ensure all derived record types use the ToString method defined in a common base record type.&lt;/p&gt;

&lt;p&gt;Microsoft &lt;strong&gt;advises us&lt;/strong&gt; that this feature requires setting the  element in the csproj file to preview.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-record-keyword%C2%A0"&gt;
  &lt;/a&gt;
  What is the Record Keyword? 🤔
&lt;/h3&gt;

&lt;p&gt;If you don't know what I'm talking about, this is normally used to &lt;strong&gt;define a reference type&lt;/strong&gt; that provides built-in functionality for encapsulating data.&lt;/p&gt;

&lt;p&gt;A simple example of what can be done with this is that &lt;strong&gt;you can create record types&lt;/strong&gt; with immutable properties using standard property syntax 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And what better way to understand it than with a simple example from Microsoft 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#filescoped-namespace-declaration"&gt;
  &lt;/a&gt;
  🏅 File-scoped namespace declaration
&lt;/h2&gt;

&lt;p&gt;You can now use &lt;strong&gt;the new namespace declaration&lt;/strong&gt; form to declare that all subsequently declared declarations are members of the declared namespace 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;NamespaceName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This new syntax, which will be implemented in the new version of C# 10, &lt;strong&gt;will save both vertical and horizontal space&lt;/strong&gt; for the most common namespace declarations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-namespace-keyword%C2%A0"&gt;
  &lt;/a&gt;
  What is namespace keyword? 🤔
&lt;/h3&gt;

&lt;p&gt;To clarify this, the namespace keyword &lt;strong&gt;is used to declare a scope&lt;/strong&gt; that contains a set of related objects. You can use a namespace to &lt;strong&gt;organize&lt;/strong&gt; code elements and to &lt;strong&gt;create&lt;/strong&gt; globally unique types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;SampleNamespace&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ISampleInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;SampleEnum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SampleDelegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Nested&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleClass2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And sure, but…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-filescope-namespace-declarations"&gt;
  &lt;/a&gt;
  What are file-scope namespace declarations? 🤔
&lt;/h3&gt;

&lt;p&gt;These declarations in particular, &lt;strong&gt;allow you to declare all the types of a file&lt;/strong&gt;, which are in a single namespace.&lt;/p&gt;

&lt;p&gt;To go a little deeper, in this version of C# 10.0, the example is similar to the previous one that has been shown by Microsoft, but &lt;strong&gt;uses a file scope namespace&lt;/strong&gt; declaration 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;SampleFileScopedNamespace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ISampleInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;SampleEnum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SampleDelegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#constant-interpolated-strings"&gt;
  &lt;/a&gt;
  ✨ Constant interpolated strings
&lt;/h2&gt;

&lt;p&gt;To understand the Constant interpolated strings, first we need to understand String Interpolation.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;$&lt;/em&gt; character &lt;strong&gt;identifies a string literal&lt;/strong&gt; as an interpolated string. An interpolated string is a string literal that might contain interpolation expressions.&lt;/p&gt;

&lt;p&gt;When an interpolated string is resolved to a result string, items with interpolation expressions &lt;strong&gt;are replaced by the string representations&lt;/strong&gt; of the expression results.&lt;/p&gt;

&lt;p&gt;Perfect, now my question is….&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-constant-interpolated-strings-have-in-c-10%C2%A0"&gt;
  &lt;/a&gt;
  What Constant interpolated strings have in C# 10? 🤔
&lt;/h3&gt;

&lt;p&gt;Talking about this new feature that C# version 10.0 will bring is const strings, which can be initialized using string interpolation only if the placeholders are themselves constant strings.&lt;/p&gt;

&lt;p&gt;String interpolations can create &lt;strong&gt;more readable const strings&lt;/strong&gt; as the const strings used in the application are constructed. &lt;br&gt;
Placeholder expressions cannot be numeric constants because those constants are &lt;strong&gt;converted to strings at runtime&lt;/strong&gt;. The culture currently in place, could affect the string representation.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#extended-property%C2%A0patterns"&gt;
  &lt;/a&gt;
  🔥 Extended Property Patterns
&lt;/h2&gt;

&lt;p&gt;First, I will explain what are the Extended property patterns. These patterns allow you to have property subpatterns refer to nested members, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;MethodCallExpression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"MethodName"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;MethodCallExpression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"MethodName"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that this has been clarified…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-extended-property-patterns-have-in-c-10%C2%A0"&gt;
  &lt;/a&gt;
  What Extended Property Patterns have in C# 10? 🤔
&lt;/h3&gt;

&lt;p&gt;The next functionality that Microsoft discusses is that nested fields or properties &lt;strong&gt;could be referenced&lt;/strong&gt; within a property pattern. The example Microsoft gives is a pattern of the form 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Prop1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prop2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Microsoft tells us that &lt;strong&gt;it will be valid in C# 10.0&lt;/strong&gt; and later, and that this is equivalent to 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Prop1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Prop2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is valid in C# version 8.0 and all subsequent versions&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#declaration-and-assignment-in-same-deconstruction"&gt;
  &lt;/a&gt;
  ⚡ Declaration and assignment in same deconstruction
&lt;/h2&gt;

&lt;p&gt;This new change implemented by the new version, &lt;strong&gt;allows to remove the restriction&lt;/strong&gt; of previous versions of C#. The example that Microsoft gives us in this case is 👇&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;…Previously, a deconstruction could assign all values to existing variables, or initialize newly declared variables:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Initialization:&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// assignment:&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;restriction&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;eliminated&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="m"&gt;10.0&lt;/span&gt; &lt;span class="err"&gt;👇&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#global-using-directives"&gt;
  &lt;/a&gt;
  🌐 Global using directives
&lt;/h2&gt;

&lt;p&gt;You can now use the global modifier to any using directive. With this you can tell the compiler that the directive must be applied to all source files in the compilation.&lt;/p&gt;

&lt;p&gt;Perfect, but as before…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-using-directive"&gt;
  &lt;/a&gt;
  What is the using directive? 🤔
&lt;/h3&gt;

&lt;p&gt;This directive allows you to use &lt;strong&gt;types defined&lt;/strong&gt; in a namespace without specifying the entire namespace of that type.&lt;/p&gt;

&lt;p&gt;To summarize, the using directive imports all types from a single namespace, as shown in the following example 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can apply &lt;strong&gt;two modifiers&lt;/strong&gt; to a using directive:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The global modifier has the same effect as adding the same using directive to every source file in your project. This modifier was introduced in C# 10.0.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The static modifier imports the static members and nested types from a single type rather than importing all the types in a namespace.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you liked this article, don't forget to FOLLOW US, so that you can be one of the first to read what's new in .NET.&lt;/p&gt;

&lt;p&gt;And if you are reading this, it means that you belong to the &lt;strong&gt;1% of the people&lt;/strong&gt; who read the articles UNTIL THE END, tell me how many coffees ☕ you need per day to continue programming, if I see many coffees ☕ I will not feel alone and &lt;strong&gt;you will make my day!!!&lt;/strong&gt; 😃👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nTBUsnr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/vog34yj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nTBUsnr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/vog34yj.gif" alt="a"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
