<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Become a leader in VIM window and tab creation!</title>
      <author>Amin</author>
      <pubDate>Mon, 17 May 2021 20:59:07 +0000</pubDate>
      <link>https://dev.to/aminnairi/become-a-leader-in-vim-window-and-tab-creation-12c5</link>
      <guid>https://dev.to/aminnairi/become-a-leader-in-vim-window-and-tab-creation-12c5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h2&gt;

&lt;p&gt;If you are like me, a VIM user, but have never used windows, now is a great time to do it!&lt;/p&gt;

&lt;p&gt;The main reason I didn't use windows in VIM is because I use Tmux. But this is a bad reason, and not everybody is used to use Tmux, even though you should because this is a fantastic tool.&lt;/p&gt;

&lt;p&gt;The second bad reason why I don't use windows is because I don't really like the key combination. Since most of the keys are used for something very logical, there is no more space for using window efficiently, meaning we need to use a key modifier (the control key) to create windows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leader"&gt;
  &lt;/a&gt;
  Leader
&lt;/h2&gt;

&lt;p&gt;For instance, if I want to create a new vertical split window, I will type &lt;code&gt;&amp;lt;C-w&amp;gt;v&lt;/code&gt;. Hitting the control key is a bummer for me. I know this is a very bad reason to not use windows in VIM.&lt;/p&gt;

&lt;p&gt;What worked for me was to use the leader key.&lt;/p&gt;

&lt;p&gt;The default leader key in VIM is a backslash. And this is not that bad and I've actually used it for many years before.&lt;/p&gt;

&lt;p&gt;I've seen many people using the space key as their leader key so I put that in my configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let mapleader = " "
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it. At first, I didn't think it would be better but as I used it in my remaps, I felt the difference immediately. It feels more natural and quicker to type Leader-prefixed key combinations when using the space key.&lt;/p&gt;

&lt;p&gt;But if you find yourself another key that match your workflow by any means don't update it because of me. In the end, what works for me may not be what works for you. This article is really just my journey I wanted to share with some of you to get inspiration from.&lt;/p&gt;

&lt;p&gt;The leader key is one wonderful way of creating our own key combinations without overriding the default one from VIM so that even if you want help from other people, they don't get stopped by your VIM settings and key overrides. They can just use VIM as if it was as vanilla as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#windows"&gt;
  &lt;/a&gt;
  Windows
&lt;/h2&gt;

&lt;p&gt;From there, I decided it was time to use windows a little bit more. And when I say windows, I do not talk about the operating system but indeed the window feature of VIM! I really love VIM because I don't really need to think about the keys I am hitting. For instance, if I want to change the inside of a whole word, I will type &lt;code&gt;ciw&lt;/code&gt; which expands to &lt;code&gt;change inside word&lt;/code&gt;. I need something like that for windows to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap &amp;lt;Leader&amp;gt;hs &amp;lt;C-w&amp;gt;s
nnoremap &amp;lt;Leader&amp;gt;vs &amp;lt;C-w&amp;gt;v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like that, I don't need to think much. If I want to split the screen horizontally, I hit &lt;code&gt;&amp;lt;Leader&amp;gt;hs&lt;/code&gt; which in my head expands to &lt;code&gt;horizontal split&lt;/code&gt;. Same thing for vertical split. Only the space is odd here but with time I learn to not worry about it too much and it became quite natural now.&lt;/p&gt;

&lt;p&gt;Now that we have several windows (and that we are using this wonderful feature in VIM without any plugins), we should also be moving around as quick as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-around-windows"&gt;
  &lt;/a&gt;
  Moving around windows
&lt;/h2&gt;

&lt;p&gt;Same thing, moving around windows is quite tedious, even though it seems logical. &lt;code&gt;&amp;lt;C-w&amp;gt;h&lt;/code&gt; will move to the window on the left. And you can use &lt;code&gt;hjkl&lt;/code&gt;, our beloved movements keys to move around windows. But if we want speed, hitting that modifier key (control) is way too much time spent to move around, especially with more than two windows.&lt;/p&gt;

&lt;p&gt;We could use the leader key, but this would be practically the same problem. What we could do is use the alt key, which (correct me if I'm wrong) does not seem to be used that much in VIM. So I ended up remapping those like that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap &amp;lt;A-h&amp;gt; &amp;lt;C-w&amp;gt;h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may be thinking: Hey! I though the modifier keys were lame to use. And you will be right. But here this is the only way (at least from what I experiment) to move around windows as quickly as possible. This is yet another modifier to learn but the time saved is huge. Especially for not having to hit &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; and &lt;code&gt;h&lt;/code&gt; for instance for moving, worse, you have to hit this combination again to move another time. And I truly think this is a very good trade off.&lt;/p&gt;

&lt;p&gt;So now, with windows created, we can quickly move to the left window by using the &lt;code&gt;Alt h&lt;/code&gt; combination. This is way quicker, especially if we want to spam the keys for quickly moving to the N leftmost window.&lt;/p&gt;

&lt;p&gt;And of course, we can do the same for every movement keys as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap &amp;lt;A-h&amp;gt; &amp;lt;C-w&amp;gt;h
nnoremap &amp;lt;A-j&amp;gt; &amp;lt;C-w&amp;gt;j
nnoremap &amp;lt;A-k&amp;gt; &amp;lt;C-w&amp;gt;k
nnoremap &amp;lt;A-l&amp;gt; &amp;lt;C-w&amp;gt;l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice! But we can go even further by resizing windows in the same fashion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resizing-windows"&gt;
  &lt;/a&gt;
  Resizing windows
&lt;/h2&gt;

&lt;p&gt;Here is what it looks like adding the necessary settings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap &amp;lt;A-S-h&amp;gt; &amp;lt;C-w&amp;gt;&amp;lt;
nnoremap &amp;lt;A-S-l&amp;gt; &amp;lt;C-w&amp;gt;&amp;gt;
nnoremap &amp;lt;A-S-j&amp;gt; &amp;lt;C-w&amp;gt;-
nnoremap &amp;lt;A-S-k&amp;gt; &amp;lt;C-w&amp;gt;+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now resize windows using the Alt and Shift modifiers. But we can spam it as much as we want to quickly resize vertical and horizontal split windows.&lt;/p&gt;

&lt;p&gt;And again, I'm not saying that there is anything wrong with the default based key combination, this is pretty amazing even because the keys are actually pretty logical. Plus to increase, minus to decrease. Etc... But by doing that, we gain some speed, we prevent ourselves some keystrokes for something that we may be spamming quite often now that we learned to love windows.&lt;/p&gt;

&lt;p&gt;And that's pretty much it for windows. There may be even more setting or key combination for things related to windows but that is what is working for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tabs"&gt;
  &lt;/a&gt;
  Tabs
&lt;/h2&gt;

&lt;p&gt;Next thing is tabs. And creating tabs is actually pretty simple since we have to type the command manually by doing &lt;code&gt;:tabnew&lt;/code&gt;. Same thing for closing a tab with &lt;code&gt;:tabclose&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But this is many keystrokes and we could be using our Leader key from before to create tabs more easily and without even thinking about it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap &amp;lt;Leader&amp;gt;tc :tabnew&amp;lt;Cr&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;tq :tabclose&amp;lt;Cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can create tabs using &lt;code&gt;&amp;lt;Leader&amp;gt;tc&lt;/code&gt; which, again in my head, expands to &lt;code&gt;tab create&lt;/code&gt; and &lt;code&gt;&amp;lt;Leader&amp;gt;tq&lt;/code&gt; which expands to &lt;code&gt;tab quit&lt;/code&gt;. That's nice!&lt;/p&gt;

&lt;p&gt;There is, actually, a key combination to go to the next tab which is &lt;code&gt;gt&lt;/code&gt; and to go back by using &lt;code&gt;gT&lt;/code&gt;. But for the latter, we must actually use the shift key for the uppercase t. This is personnal preference, but I decided to map my keys to navigate tabs more naturally, again to prevent thinking about it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap &amp;lt;Leader&amp;gt;tn :tabnext&amp;lt;Cr&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;tp :tabprevious&amp;lt;Cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if I do the same exercise as before, &lt;code&gt;&amp;lt;Leader&amp;gt;tn&lt;/code&gt; expands to &lt;code&gt;tab next&lt;/code&gt; and &lt;code&gt;&amp;lt;Leader&amp;gt;tp&lt;/code&gt; expands to &lt;code&gt;tab previous&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it! That's my two cents for using windows and tabs a little bit more in VIM. I actually think that you should do you because those are the things that work for me but you should experiment, test things out and set you own VIM configuration for what is working for you.&lt;/p&gt;

&lt;p&gt;You may even be using the default key combinations if you think that this is good for you and that is totally okay!&lt;/p&gt;

&lt;p&gt;I still use Tmux (for those of you who are used to this application). But now I stopped worrying about sharing things around my VIM instance since I only have one instance now, but several tabs and windows. Actually, this is really not a problem for me because I use NeoVIM and the system clipboard is shared with the yanking/pasting of VIM so I could even not use tabs and windows at all but I guess this is a little more resource-friendly to not have 10 VIM instance for a client/server Web application for instance.&lt;/p&gt;

&lt;p&gt;I like to think that VIM manages my project, and that Tmux manages multiple parallel projects and even customers I work for (one session = one customer).&lt;/p&gt;

&lt;p&gt;In the end, all those key combinations demonstration was only a mean to an end that was: use windows and tabs more! These are awesome tools that VIM provided for us and I see too many VIM users still create tabs in their terminal instead of VIM only to create a new instance of VIM to edit another file for instance in the same project. You should be using tabs and buffers instead or even split the window if that is what you want (as far as I understand the goal of windows and tabs in VIM).&lt;/p&gt;

&lt;p&gt;And here is the wrap up configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Use space as the leader key
let mapleader = " "

" Split aliases
nnoremap &amp;lt;Leader&amp;gt;vs :vertical split&amp;lt;Cr&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;hs :split&amp;lt;Cr&amp;gt;

" Navigation between window
nnoremap &amp;lt;A-h&amp;gt; &amp;lt;C-w&amp;gt;h
nnoremap &amp;lt;A-j&amp;gt; &amp;lt;C-w&amp;gt;j
nnoremap &amp;lt;A-k&amp;gt; &amp;lt;C-w&amp;gt;k
nnoremap &amp;lt;A-l&amp;gt; &amp;lt;C-w&amp;gt;l

" Resizing window
nnoremap &amp;lt;A-S-h&amp;gt; &amp;lt;C-w&amp;gt;&amp;lt;
nnoremap &amp;lt;A-S-l&amp;gt; &amp;lt;C-w&amp;gt;&amp;gt;
nnoremap &amp;lt;A-S-j&amp;gt; &amp;lt;C-w&amp;gt;-
nnoremap &amp;lt;A-S-k&amp;gt; &amp;lt;C-w&amp;gt;+

" Moving window
nnoremap &amp;lt;A-C-h&amp;gt; &amp;lt;C-w&amp;gt;H
nnoremap &amp;lt;A-C-l&amp;gt; &amp;lt;C-w&amp;gt;L
nnoremap &amp;lt;A-C-j&amp;gt; &amp;lt;C-w&amp;gt;J
nnoremap &amp;lt;A-C-k&amp;gt; &amp;lt;C-w&amp;gt;K

" Close window
nnoremap &amp;lt;Leader&amp;gt;wc :q&amp;lt;Cr&amp;gt;

" Creating &amp;amp; navigating tabs
nnoremap &amp;lt;Leader&amp;gt;tc :tabnew&amp;lt;Cr&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;tq :tabclose&amp;lt;Cr&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;tn :tabnext&amp;lt;Cr&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;tp :tabprevious&amp;lt;Cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy hacking!&lt;/p&gt;

</description>
      <category>vim</category>
      <category>linux</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 10 Chrome DevTools tips &amp; tricks</title>
      <author>Arek Nawo</author>
      <pubDate>Mon, 17 May 2021 20:09:07 +0000</pubDate>
      <link>https://dev.to/areknawo/top-10-chrome-devtools-tips-tricks-2b8g</link>
      <guid>https://dev.to/areknawo/top-10-chrome-devtools-tips-tricks-2b8g</guid>
      <description>&lt;p&gt;&lt;strong&gt;DevTools&lt;/strong&gt; are undoubtedly one of the most important tools in a web developer’s toolbelt. Definitely the go-to (and pretty much only) way for &lt;strong&gt;front-end debugging&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;From all the browsers, and all the DevTools variations (most notably 3, to be precise), &lt;strong&gt;Chrome DevTools&lt;/strong&gt; are the most popular. They help you debug your code across many Chromium-based browsers like Chrome, Edge, or Brave - and even more other Chromium-based projects.&lt;/p&gt;

&lt;p&gt;So, you’re most likely familiar with the basic DevTools workflow. Click a button or press a key, and you’re in. From there, you’ll most likely end up checking the console, playing with some JavaScript and DOM, and maybe inspect the network requests or storage tab. That’s all pretty much the same across browsers.&lt;/p&gt;

&lt;p&gt;However, did you know that at least Chrome DevTools have many commonly unknown &lt;strong&gt;features&lt;/strong&gt; that can save your dev life or, at the very least, smooth your workflow? Well, if you didn’t, here’s 10 of them!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-freezing"&gt;
  &lt;/a&gt;
  1. Freezing
&lt;/h1&gt;

&lt;p&gt;We’re starting with a banger!&lt;/p&gt;

&lt;p&gt;Have you ever been in a situation where, e.g., you needed to test the hover behavior of a component on your website, but it was controlled by JS, so no &lt;em&gt;CSS → Toggle Element&lt;/em&gt; State available? You also can’t move your pointer from the element, as it’ll revert to default behavior.&lt;/p&gt;

&lt;p&gt;So, you’re stuck, and the only solution is to edit the code, which can become cumbersome pretty quickly for a quick check like this. So is there another solution?&lt;/p&gt;

&lt;p&gt;Turns out there is - a keyboard shortcut for &lt;strong&gt;pausing with the debugger&lt;/strong&gt;! Just open your DevTools, go to the &lt;em&gt;Sources&lt;/em&gt; tab, trigger the state anyway you need to, and hit &lt;code&gt;F8&lt;/code&gt;. You should now be in the debugger, and your state should be left &lt;strong&gt;frozen&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v-F0l6uK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4clqcng2vuym29e8hvnp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-F0l6uK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4clqcng2vuym29e8hvnp.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
"Paused in debugger" triggered with F8



&lt;h1&gt;
  &lt;a href="#2-command-palette"&gt;
  &lt;/a&gt;
  2. Command palette
&lt;/h1&gt;

&lt;p&gt;Next up, we’ve got something big, though somewhat hidden. Did you know DevTools have their own &lt;strong&gt;command palette&lt;/strong&gt;? It can be triggered by &lt;code&gt;Ctrl Shift P&lt;/code&gt; (just like on default VS Code config!) or from the vertical three-dot (&lt;em&gt;Customize and control DevTools&lt;/em&gt;) menu → &lt;em&gt;Run command&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zLTAwB1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyazghl2zd09e7fpcnzj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLTAwB1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyazghl2zd09e7fpcnzj.png" alt="DevTools command palette in action"&gt;&lt;/a&gt;&lt;/p&gt;
DevTools command palette in action



&lt;p&gt;Command palette has many great shortcuts that you’ll learn as you get more comfortable with it. My personal favorites are again related to the debugger - &lt;em&gt;Disable JavaScript&lt;/em&gt; and &lt;em&gt;Enable JavaScript&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-emulation"&gt;
  &lt;/a&gt;
  3. Emulation
&lt;/h1&gt;

&lt;p&gt;It’s no secret that DevTools are full of &lt;strong&gt;emulation tools&lt;/strong&gt;. Most likely, you know and have used the &lt;strong&gt;network throttling&lt;/strong&gt; tools (&lt;em&gt;Network&lt;/em&gt; → Top Menu bar → &lt;em&gt;No throttling&lt;/em&gt; Dropdown menu) or “device toolbar” (on the left of DevTools tabs). But of course, there’s more!&lt;/p&gt;

&lt;p&gt;Again from the vertical three-dot menu → &lt;em&gt;More Tools&lt;/em&gt; → e.g., &lt;em&gt;Rendering&lt;/em&gt; or &lt;em&gt;Sensors&lt;/em&gt;. You can also use the command palette if you know what you’re looking for.&lt;/p&gt;

&lt;p&gt;In the opened &lt;strong&gt;Rendering&lt;/strong&gt; drawer, you can control some debugging rendering toggles and emulate CSS media stuff. You’ll most likely check in here when you’ll be developing auto dark mode (&lt;code&gt;prefers-color-scheme&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3a2FQk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hemg3zt6lobx94h61klj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3a2FQk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hemg3zt6lobx94h61klj.png" alt="Rendering drawer"&gt;&lt;/a&gt;&lt;/p&gt;
Rendering drawer



&lt;p&gt;The &lt;strong&gt;Sensors&lt;/strong&gt; drawer is a bit more extraordinary. You’ll use it for emulating advanced mobile device features like &lt;strong&gt;location&lt;/strong&gt; or &lt;strong&gt;idle state&lt;/strong&gt;. There’s even a nice 3D editor (with what looks like Pixel 3 XL with the mother of all notches 😅) for setting the &lt;strong&gt;orientation&lt;/strong&gt; for things like the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Gyroscope"&gt;Gyroscope API&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tqJSIcKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lup85p5bp1tcq6tpu0hf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tqJSIcKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lup85p5bp1tcq6tpu0hf.png" alt="Sensors drawer"&gt;&lt;/a&gt;&lt;/p&gt;
Sensors drawer



&lt;h1&gt;
  &lt;a href="#4-customization"&gt;
  &lt;/a&gt;
  4. Customization
&lt;/h1&gt;

&lt;p&gt;This might be one of the simplest tips, but did you know that DevTools have their own &lt;strong&gt;settings panel&lt;/strong&gt; (&lt;code&gt;F1&lt;/code&gt; or the &lt;em&gt;Settings&lt;/em&gt; cog icon on the left of tabs)? Shocking, I know.&lt;/p&gt;

&lt;p&gt;The thing is, most devs, most of the time, don’t have a need to open settings, and so they don’t really know how much good stuff is in there. UI customization, &lt;strong&gt;dark mode&lt;/strong&gt;, &lt;strong&gt;experimental features&lt;/strong&gt;, throttling profiles, &lt;strong&gt;shortcuts&lt;/strong&gt;, and more - DevTools settings are an absolute gold mine of options. Experimenting with them and tweaking them to your needs will definitely result in a better experience!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gm1jW0CR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tora454ipdqotm9g3uyl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gm1jW0CR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tora454ipdqotm9g3uyl.png" alt="DevTools settings panel"&gt;&lt;/a&gt;&lt;/p&gt;
DevTools settings panel



&lt;h1&gt;
  &lt;a href="#5-multiline-editing"&gt;
  &lt;/a&gt;
  5. Multi-line editing
&lt;/h1&gt;

&lt;p&gt;If you’re a web developer long enough, there’s a high chance you sometimes want to just play with some JS or mess with a specific website design. Code playgrounds like &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt; or &lt;a href="https://codesandbox.io/"&gt;CodeSandbox&lt;/a&gt; will probably be a better choice in the first scenario, but they still take some time to load, and you need to explicitly go to their respective websites first. DevTools console is just much quicker and much more &lt;strong&gt;versatile&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;However, there’s no discussion that its &lt;strong&gt;multi-line editing&lt;/strong&gt; is trash. Having to &lt;code&gt;Shift Enter&lt;/code&gt; all the time is a recipe for frustration and crippled productivity. But, there is another way!&lt;/p&gt;

&lt;p&gt;Go to &lt;em&gt;Sources&lt;/em&gt; → left drawer → optionally double arrow in “sub-tabs” → &lt;em&gt;Snippets&lt;/em&gt;. There you’ve got something like DevTools dedicated &lt;strong&gt;coding playground&lt;/strong&gt;! Just click &lt;em&gt;New snippet&lt;/em&gt; and start writing! When you’re done, you can run your snippet or even format it if you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zYrx3pbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52cg0cbyiqtaakfwx7f6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zYrx3pbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52cg0cbyiqtaakfwx7f6.png" alt="DevTools snippet editor"&gt;&lt;/a&gt;&lt;/p&gt;
DevTools snippet editor



&lt;p&gt;Granted, the DevTools snippet editor isn’t all sunshine and rainbows. The editing experience is far from what you get in modern code editor/IDE, formatting can’t be configured, and without IIFE, you’ll pollute and potentially run into conflict with the global scope.&lt;/p&gt;

&lt;p&gt;Still, a great option for quick multi-line snippets!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-live-expressions"&gt;
  &lt;/a&gt;
  6. Live expressions
&lt;/h1&gt;

&lt;p&gt;Next up, also something related to quick code experiments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live expressions&lt;/strong&gt; allow you to run quick, usually, single-line pieces of JS “live”, meaning continuously updating. You’ll best see it if you enter something like &lt;code&gt;Math.random()&lt;/code&gt; - it’ll constantly be outputting different values until you clear the expression!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AM7KpFEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arvz444n1wixmx9xkj6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AM7KpFEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arvz444n1wixmx9xkj6z.png" alt="Live expressions in action"&gt;&lt;/a&gt;&lt;/p&gt;
Live expressions in action



&lt;p&gt;To use live expressions, you should go to the console tab, and click the eye icon button (&lt;em&gt;Create live expression&lt;/em&gt;) and enter your expression in the opened editor (use &lt;code&gt;Shift Enter&lt;/code&gt; for multi-line)&lt;/p&gt;

&lt;p&gt;Now, I, for once, often use it to see the current number of elements on the website and when/how it updates (&lt;code&gt;document.querySelectorAll("\*").length&lt;/code&gt;), but there’s surely more expressions you’d want to watch continuously.&lt;/p&gt;

&lt;p&gt;Just remember not to enter too complex code in there, as running it constantly could bring your machine to its knees!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-jquery-shortcuts"&gt;
  &lt;/a&gt;
  7. jQuery shortcuts
&lt;/h1&gt;

&lt;p&gt;You almost certainly have played with DOM elements in your console. Before that, you had to access the desired DOM element. You could do that with JS DOM API like &lt;code&gt;document.getElementById()&lt;/code&gt;, or through right-click on the element in DOM inspector → &lt;em&gt;Store as global variable&lt;/em&gt;. But did you know there are more efficient, &lt;strong&gt;jQuery-style&lt;/strong&gt; ways of doing it?&lt;/p&gt;

&lt;p&gt;Granted, jQuery might not be the most favorable JS library these days, but its &lt;code&gt;$()&lt;/code&gt; function is undoubtedly versatile. So, it’s good that you can use it in your console without even touching jQuery!&lt;/p&gt;

&lt;p&gt;In the DevTools console you’ve got multiple &lt;strong&gt;$ shortcuts&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;$()&lt;/code&gt; as an alias for &lt;code&gt;document.querySelector()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;$$()&lt;/code&gt; as an alias for &lt;code&gt;document.querySelectorAll()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;$0&lt;/code&gt; to &lt;code&gt;$4&lt;/code&gt; for from the last to fifth selected element in DOM inspector&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;$\_&lt;/code&gt; for the value of last executed operation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, there’s quite a lot of these useful shortcuts! So, if you get past the force of habit, here you got a great way to speed up your workflow!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86QXj5xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmfrpld7azpc98mzlwaf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86QXj5xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmfrpld7azpc98mzlwaf.png" alt="Usage of $ shortcuts"&gt;&lt;/a&gt;&lt;/p&gt;
Usage of $ shortcuts



&lt;h1&gt;
  &lt;a href="#8-screenshots"&gt;
  &lt;/a&gt;
  8. Screenshots
&lt;/h1&gt;

&lt;p&gt;There are many ways to do &lt;strong&gt;screenshots&lt;/strong&gt;. But unless you want to capture the entire screen or window, there’s a high chance your screenshot won’t be perfectly lined up. Thankfully, at least when it comes to web pages, DevTools have many tools for that!&lt;/p&gt;

&lt;p&gt;So, there are as many as 4 types of screenshots you can do with DevTools alone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;em&gt;Screenshot&lt;/em&gt; (standard) - just the screenshot of the current view&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Area screenshot&lt;/em&gt; - screenshot of the selected area of the webpage&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Node screenshot&lt;/em&gt; - screenshot of the selected node&lt;/li&gt;
&lt;li&gt;  &lt;em&gt;Full size screenshot&lt;/em&gt; - screenshot of the entire website (all the scrollable content)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The easiest way to do pretty much any of the screenshot types listed is to search for &lt;em&gt;“screenshot”&lt;/em&gt; in the command palette - all options are there. For node screenshots, you can also right-click in the DOM inspector → &lt;em&gt;Capture node screenshot&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yj8LXgM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7n83bmhva8qypf4fmi7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yj8LXgM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7n83bmhva8qypf4fmi7.png" alt="DevTools screenshots types"&gt;&lt;/a&gt;&lt;/p&gt;
DevTools screenshots types



&lt;p&gt;Now, I’ve got an additional tip for you! If you’ve ever had to take &lt;strong&gt;high-resolution screenshots&lt;/strong&gt; for e,g product showcases or articles, then DevTools also got you covered!&lt;/p&gt;

&lt;p&gt;Go to &lt;em&gt;Settings&lt;/em&gt; → &lt;em&gt;Devices&lt;/em&gt; → &lt;em&gt;Add custom device&lt;/em&gt;, and enter Full HD resolution with 4 as device pixel ratio. This way, you get an &lt;strong&gt;8K screen&lt;/strong&gt; device!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--staY4tzU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzvtwfw2wlin1q7ey1xt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--staY4tzU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzvtwfw2wlin1q7ey1xt.png" alt="8K screen device"&gt;&lt;/a&gt;&lt;/p&gt;
8K screen device



&lt;p&gt;Then, with the device toolbar on, activate the 8K device preset, and take a screenshot (either through command palette or from the vertical three-dot menu on the right (&lt;em&gt;More options&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;It might be spotty, and depending on your machine, can freeze if you go higher than 8K, but it’s a great way to take screenshots of higher resolution than your screen!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-design-mode"&gt;
  &lt;/a&gt;
  9. Design mode
&lt;/h1&gt;

&lt;p&gt;This one’s pretty cool! Did you know that there’s a &lt;strong&gt;design mode&lt;/strong&gt; flag that makes your entire website editable?! Like &lt;code&gt;contenteditable&lt;/code&gt; style!&lt;/p&gt;

&lt;p&gt;It’s similar to setting &lt;code&gt;contenteditable&lt;/code&gt; attribute on your root &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element, but a bit cleaner, without affecting the DOM.&lt;/p&gt;

&lt;p&gt;When in console, just set &lt;code&gt;document.designMode&lt;/code&gt; to &lt;code&gt;”on”&lt;/code&gt;, and you’re done! Feel free to play around with deleting/adding text, removing images, and so on! When you’re done, just set the same property to &lt;code&gt;”off”&lt;/code&gt; and seal your work.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-custom-formatters"&gt;
  &lt;/a&gt;
  10. Custom formatters
&lt;/h1&gt;

&lt;p&gt;Last but not least, we’ve got &lt;strong&gt;custom object formatters&lt;/strong&gt;. These let you do some crazy stuff to nicely format your cryptic or complex objects.&lt;/p&gt;

&lt;p&gt;To enable custom formatters, go to &lt;em&gt;Settings&lt;/em&gt; → &lt;em&gt;Preferences&lt;/em&gt; → &lt;em&gt;Console&lt;/em&gt; section → &lt;em&gt;Enable custom formatters&lt;/em&gt;. From now on, you can use custom formatters by using libraries that support them or by defining them yourself through the &lt;code&gt;window.devtoolsFormatters&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;devtoolsFormatters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: white; background: orange;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;hasBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otherProperties&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Other properties:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;margin-left:8px;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;otherProperties&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;devtoolsFormatters&lt;/code&gt; is an array of &lt;strong&gt;formatter objects&lt;/strong&gt;. These contain 3 methods: &lt;code&gt;header()&lt;/code&gt; for rendering the main message (use &lt;code&gt;null&lt;/code&gt; to leave object unaffected), &lt;code&gt;hasBody()&lt;/code&gt; to determine whether the object can be expanded, and &lt;code&gt;body()&lt;/code&gt; for rendering the object’s expanded form when required. The values returned from &lt;code&gt;header()&lt;/code&gt; or &lt;code&gt;body()&lt;/code&gt; should be in &lt;a href="http://www.jsonml.org/"&gt;JsonMl format&lt;/a&gt; (essentially JSON representation of HTML). As for what the above gets you:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FGHE7jEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tjcc558oo4zfbmju4o03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FGHE7jEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tjcc558oo4zfbmju4o03.png" alt="Custom formatter in action"&gt;&lt;/a&gt;&lt;/p&gt;
Custom formatter in action



&lt;p&gt;If HTML or CSS in the DevTools console sounds weird to you, you should read &lt;a href="https://areknawo.com/getting-creative-with-the-console-api/"&gt;one of my older posts&lt;/a&gt;, where I go into details about different console logging methods and their stylings.&lt;/p&gt;

&lt;p&gt;Overall, custom formatters are a pretty complex topic on their own, maybe even deserving their own blog post (let me know if you want to see it).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#11-use-betterconsole"&gt;
  &lt;/a&gt;
  11. Use BetterConsole
&lt;/h1&gt;

&lt;p&gt;If you’ve got this far, I’ve got a special bonus tip for you - use &lt;strong&gt;BetterConsole&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;I’ve covered it in-depth in &lt;a href="https://areknawo.com/better-console-experience-for-your-devtools/"&gt;my previous blog post&lt;/a&gt;, but in general, &lt;strong&gt;BetterConsole&lt;/strong&gt; is my project, meant to fix some of the small but infuriating issues related to the DevTools console that you have to deal with all the time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--du1qKlhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7x3hc3vb0ysqsrw5lmx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--du1qKlhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7x3hc3vb0ysqsrw5lmx.png" alt="BetterConsole"&gt;&lt;/a&gt;&lt;/p&gt;
BetterConsole



&lt;p&gt;So, instead of a separate window or drawer compromising your window size (especially on a small screen), you’ve got a bubble + card combo - &lt;strong&gt;freely resizable&lt;/strong&gt; and &lt;strong&gt;draggable&lt;/strong&gt; within the whole viewport! You’ve also got a built-in &lt;strong&gt;multi-line editor&lt;/strong&gt; with &lt;strong&gt;VS Code&lt;/strong&gt;-level editing experience, including &lt;strong&gt;intellisense&lt;/strong&gt;, code suggestions, code folding, and more!&lt;/p&gt;

&lt;p&gt;Beyond that, there’s &lt;strong&gt;TypeScript&lt;/strong&gt; support and &lt;strong&gt;SCSS&lt;/strong&gt; support - with a dedicated panel for injecting stylesheets and DOM elements right from the console. Oh, and you can use the &lt;strong&gt;Prettier&lt;/strong&gt; integration to format your code beautifully.&lt;/p&gt;

&lt;p&gt;Essentially, a coding playground, but for every website, right under your mouse pointer. Sure, it doesn’t have as many features as DevTools themselves, but it’s a much better experience for what you’re doing in your console most of the time.&lt;/p&gt;

&lt;p&gt;And the best part is - &lt;strong&gt;beta phase&lt;/strong&gt; is coming soon! With it, you can &lt;a href="https://discord.gg/YmxC34EDBV"&gt;help me develop&lt;/a&gt; the best console experience possible and get a chance not only to try but also &lt;strong&gt;get 100% off&lt;/strong&gt; - free - the final product!&lt;/p&gt;

&lt;p&gt;So, if you’re interested, feel free to check out the project’s &lt;a href="https://twitter.com/BetterConsole"&gt;Twitter page&lt;/a&gt; and &lt;a href="https://discord.gg/YmxC34EDBV"&gt;join the Discord server&lt;/a&gt; to be among the first beta-testers!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom line
&lt;/h1&gt;

&lt;p&gt;So, as you can see, Chrome DevTools are full of useful and interesting stuff. Tips and tricks in this post are just 10 of many, which you can find in DevTools!&lt;/p&gt;

&lt;p&gt;But, even if you’re not looking for anything more in the DevTools console, you’ll certainly enjoy &lt;strong&gt;BetterConsole&lt;/strong&gt;’s flexibility, TypeScript support, and multi-line editing experience. So, &lt;a href="https://discord.gg/YmxC34EDBV"&gt;join the beta Discord server&lt;/a&gt; now, and follow BetterConsole on &lt;a href="https://twitter.com/BetterConsole"&gt;Twitter&lt;/a&gt; for updates.&lt;/p&gt;

&lt;p&gt;For more web development content, &lt;strong&gt;follow me&lt;/strong&gt; on &lt;a href="https://twitter.com/areknawo"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/areknawoblog"&gt;Facebook&lt;/a&gt;, or through &lt;a href="https://areknawo.com#newsletter"&gt;my newsletter&lt;/a&gt;. Thanks for reading, and happy coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>vscode</category>
      <category>chrome</category>
    </item>
    <item>
      <title>Guía completa y práctica sobre posicionamiento CSS: position sticky</title>
      <author>Lupita Code 🌄</author>
      <pubDate>Mon, 17 May 2021 20:06:38 +0000</pubDate>
      <link>https://dev.to/lupitacode/guia-completa-y-practica-sobre-posicionamiento-css-position-sticky-1c8n</link>
      <guid>https://dev.to/lupitacode/guia-completa-y-practica-sobre-posicionamiento-css-position-sticky-1c8n</guid>
      <description>&lt;p&gt;¡Hola gente bonita!👋&lt;/p&gt;

&lt;p&gt;En el articulo anterior explique el posicionamiento fijo, en esta ocasión voy a explicar el posicionamiento &lt;code&gt;sticky&lt;/code&gt; o también llamado (en español) pegajoso.&lt;/p&gt;

&lt;p&gt;El posicionamiento &lt;code&gt;sticky&lt;/code&gt; es relativamente mas nuevo que los otros tipos de posicionamiento y tal como dice la documentación de la MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;El posicionamiento sticky puede considerarse un híbrido de los posicionamientos relativo y fijo. Un elemento con posicionamiento sticky es tratado como un elemento posicionado relativamente hasta que cruza un umbral especificado, en cuyo punto se trata como fijo hasta que alcanza el límite de su padre. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Son muy similares, pero hay algunas diferencias importantes.&lt;br&gt;
Este tipo de posicionamiento se utiliza cuando queremos que un elemento se posicione en un lugar especifico y que cuando lleguemos a ese elemento al hacer scroll, se quede de forma fija.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#top-right-bottom-left"&gt;
  &lt;/a&gt;
  ↕️↔️ top, right, bottom, left
&lt;/h2&gt;

&lt;p&gt;Las coordenadas no se usan para mover el elemento (como en los otros tipos de posicionamiento), si no que se usan para indicar en que punto el elemento tendrá un comportamiento diferente, antes de llegar a ese punto el elemento se va a comportar de manera natural.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ejemplo"&gt;
  &lt;/a&gt;
  Ejemplo 1️⃣
&lt;/h3&gt;

&lt;p&gt;El ejemplo mas común es tener un slider o imagen en la parte superior y un menú de navegación debajo. Cuando hagamos scroll y lleguemos al menú, este se quedara fijo en la pagina.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="slider"&amp;gt;SCROLL TO THE BOTTOM&amp;lt;/div&amp;gt;
   &amp;lt;nav class="nav"&amp;gt;
       &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;Home&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;Blog&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;Contact&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/nav&amp;gt;
&amp;lt;div class="container"&amp;gt;
     &amp;lt;article&amp;gt;
        &amp;lt;h2 class="title"&amp;gt;Lorem ipsum dolor sit amet.&amp;lt;/h2&amp;gt;
           &amp;lt;p&amp;gt; lorem.. &amp;lt;/p&amp;gt;
      &amp;lt;/article&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.slider {
    height: 300px;
    font-size: 4rem;
    font-weight: bold;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: yellow;
}

.nav {
    position: sticky; ⬅️
    top: 0; ⬅️
    height: 50px;
    padding: 0.5em;
    background-color: #ccc;
}

.nav ul {
    margin-top: 0;
    margin-bottom: 0;
    padding-left: 0;
    list-style-type: none;
    display: flex;
    justify-content: space-around;
}
.nav ul li {
    line-height: 2;
}

.container {
    width: 70%;
    max-width: 600px;
    margin: 0 auto;
}

article {
    padding: 2em;
    line-height: 1.6;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XnHtcUT7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b19r5swgxr3etprwm5sv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XnHtcUT7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b19r5swgxr3etprwm5sv.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como puedes observar, en el código CSS agregué la declaración &lt;code&gt;top: 0&lt;/code&gt; esto significa que cuando el menú de navegación &lt;code&gt;&amp;lt;nav&amp;gt;&amp;lt;/nav&amp;gt;&lt;/code&gt; tenga 0px se mantendrá fijo al límite superior de la ventana del navegador, similar a la posición &lt;code&gt;fixed&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Sin embargo, el elemento es desplazado con relación a su ancestro más cercano o su bloque contenedor. Por ejemplo, si el menú de navegación &lt;code&gt;&amp;lt;nav&amp;gt;&amp;lt;/nav&amp;gt;&lt;/code&gt; se encuentra dentro de un contenedor padre (usaremos de ejemplo la etiqueta &lt;code&gt;&amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;&lt;/code&gt;) no tendrá ningún efecto a menos que se especifique la altura al elemento padre.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   &amp;lt;div class="slider"&amp;gt;SCROLL TO THE BOTTOM&amp;lt;/div&amp;gt;
        &amp;lt;header class="header"&amp;gt;
            &amp;lt;nav class="nav"&amp;gt;
                &amp;lt;ul&amp;gt;
                    &amp;lt;li&amp;gt;Home&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;Blog&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;Contact&amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
            &amp;lt;/nav&amp;gt;
        &amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; .header {
    height: 500px; ⬅️
    background-color: #ccc;
}

.nav {
    position: sticky; ⬅️
    top: 0; ⬅️
    height: 50px;
    padding: 0.5em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f-oRK9Zo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmow3spdmqo6bf2vpi4e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f-oRK9Zo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmow3spdmqo6bf2vpi4e.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como podemos observar el menu va a estar colocado en la parte superior del viewport mientras hagamos scroll y una vez terminemos de recorrer los 200px de altura del header, el menú de navegación deja de estar fijo. Esta es la diferencia con el posicionamiento &lt;code&gt;fixed&lt;/code&gt;. Con posicionamiento sticky lo que esta tomando como referencia es el alto del contenedor padre (header), si no declaramos un alto al header no va a funcionar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ejemplo"&gt;
  &lt;/a&gt;
  Ejemplo 2️⃣
&lt;/h3&gt;

&lt;p&gt;Otro uso común del posicionamiento sticky es para los encabezados en una lista alfabética. En este ejemplo el encabezado "B" aparecerá justo por debajo de los ítems que comienzan con "A". El encabezado "B" se mantendrá fijado al límite superior del viewport hasta que todos los ítems "B" se hayan desplazado fuera de la pantalla, en cuyo punto será cubierto por el encabezado "C", y así sucesivamente.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1 class="title"&amp;gt;Lengujes de programación&amp;lt;/h1&amp;gt;
        &amp;lt;dl class="list"&amp;gt;
            &amp;lt;div class="list-group"&amp;gt;
                &amp;lt;dt class="list-header"&amp;gt;A&amp;lt;/dt&amp;gt;
                &amp;lt;dd&amp;gt;Ada&amp;lt;/dd&amp;gt;
                &amp;lt;dd&amp;gt;ActionScript&amp;lt;/dd&amp;gt;
                &amp;lt;dd&amp;gt;ALGOL 68&amp;lt;/dd&amp;gt;
                &amp;lt;dd&amp;gt;ASP.NET&amp;lt;/dd&amp;gt;
                &amp;lt;dd&amp;gt;Assembly language&amp;lt;/dd&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="list-group"&amp;gt;
                &amp;lt;dt class="list-header"&amp;gt;B&amp;lt;/dt&amp;gt;
                &amp;lt;dd&amp;gt;Bash&amp;lt;/dd&amp;gt;
                &amp;lt;dd&amp;gt;BASIC&amp;lt;/dd&amp;gt;
                &amp;lt;dd&amp;gt;Batch (Windows/Dos)&amp;lt;/dd&amp;gt;
                &amp;lt;dd&amp;gt;Babbage&amp;lt;/dd&amp;gt;
                &amp;lt;dd&amp;gt;BuildProfessional&amp;lt;/dd&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="list-group"&amp;gt;
                &amp;lt;dt class="list-header"&amp;gt;C&amp;lt;/dt&amp;gt;
                &amp;lt;dd&amp;gt;C#&amp;lt;/dd&amp;gt;
                &amp;lt;dd&amp;gt;Clojure&amp;lt;/dd&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/dl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;html {
    height: 300%;
}
.title {
    text-align: center;
}

.list {
    padding: 20px;
}

.list-group {
    padding: 0 20px;
}

.list-header {
    position: sticky; ⬅️
    top: 0; ⬅️
    padding: 10px;
    font-weight: 10px;
    background-color: #333;
    color: #00ff6c;
}

dd {
    font: bold 20px/45px Helvetica, Arial, sans-serif;
    margin: 0;
    padding: 0 0 0 12px;
    white-space: nowrap;
}

dd + dd {
    border-top: 1px solid #ccc;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hiORnb3v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6tg5v2tlloml83ktl1x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hiORnb3v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6tg5v2tlloml83ktl1x.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El elemento &lt;code&gt;&amp;lt;dt class="list-header"&amp;gt;&amp;lt;/dt&amp;gt;&lt;/code&gt; se va a quedar fijo en la parte superior siempre que el alto de su contenedor &lt;code&gt;&amp;lt;div class="list-group"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; tenga contenido.&lt;/p&gt;

&lt;p&gt;Si quieres ver mas ejemplos, puedes consultar el articulo de CSS-Tricks: &lt;a href="https://css-tricks.com/creating-sliding-effects-using-sticky-positioning/"&gt;Creating sliding effects using sticky positioning.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  📋 Conclusión
&lt;/h2&gt;

&lt;p&gt;☑️ Al posicionar el elemento como &lt;code&gt;sticky&lt;/code&gt; se habilitan las propiedades top, right, bottom y left, pero no se usan para mover el elemento, si no para indicar en que punto el elemento estara fijo.&lt;br&gt;
☑️ El elemento es posicionado de acuerdo al flujo normal del documento.&lt;br&gt;
☑️ Las dimensiones del elemento se adaptan al contenido, excepto que se haya definido su tamaño con width o height.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursos"&gt;
  &lt;/a&gt;
  🔎Recursos:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/CSS/position"&gt;Position | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/creating-sliding-effects-using-sticky-positioning/"&gt;CSS-Tricks | Article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gracias por leer🦸🏻‍♀️&lt;br&gt;
Mis redes sociales donde comparto notas de código:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/lupitacode"&gt;▶️Youtube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://instagram.com/lupitacode"&gt;📷Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/lupitacode"&gt;🐦Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://facebook.com/lupitacode"&gt;🔵Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codepen.io/lupitacode/"&gt;🔲Codepen&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lupitacode.medium.com/"&gt;✍️Medium&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@lupitacode"&gt;🎵Tik Tok&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>spanish</category>
      <category>latam</category>
    </item>
    <item>
      <title>Guía completa y práctica sobre posicionamiento CSS: Fundamentos </title>
      <author>Lupita Code 🌄</author>
      <pubDate>Mon, 17 May 2021 20:01:21 +0000</pubDate>
      <link>https://dev.to/lupitacode/guia-completa-y-practica-sobre-posicionamiento-css-fundamentos-17c</link>
      <guid>https://dev.to/lupitacode/guia-completa-y-practica-sobre-posicionamiento-css-fundamentos-17c</guid>
      <description>&lt;p&gt;¡Hola, gente bonita! 👋&lt;/p&gt;

&lt;p&gt;Antes de explicar los diferentes valores que tiene la propiedad &lt;code&gt;position&lt;/code&gt; debemos entender algunos conceptos clave, por ejemplo el flujo normal, que nos va a permitir saber como es la forma en que se presentan los elementos de la página web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qu%C3%A9-es-el-flujo-normal-del-html"&gt;
  &lt;/a&gt;
  🧐¿Qué es el flujo normal del HTML?
&lt;/h2&gt;

&lt;p&gt;El flujo normal (normal flow) en HTML es el orden natural en el que los elementos aparecen en pantalla, es decir, los elementos aparecerán colocados tal como estén ordenados en el código HTML solo si no se aplica ningún CSS que cambie la forma en la que se comportan.&lt;/p&gt;

&lt;p&gt;Por ejemplo, si colocamos un encabezado (en el código HTML) &lt;code&gt;&amp;lt;h1&amp;gt;Title&amp;lt;/h1&amp;gt;&lt;/code&gt; y debajo un párrafo &lt;code&gt;&amp;lt;p&amp;gt;lorem...&amp;lt;/p&amp;gt;&lt;/code&gt; el navegador primero dibuja el encabezado y después el párrafo y así sucesivamente.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qu%C3%A9-es-un-elemento-posicionado"&gt;
  &lt;/a&gt;
  🤔¿Qué es un elemento posicionado?
&lt;/h2&gt;

&lt;p&gt;Un elemento posicionado es aquel elemento que ha salido de su flujo normal a través de la propiedad &lt;code&gt;position&lt;/code&gt;, además adquiere nuevas propiedades. &lt;br&gt;
La propiedad position establece en que punto de la pagina comenzara a posicionarse, mostrarse o dibujarse el elemento que se haya establecido en el código HTML. &lt;/p&gt;

&lt;p&gt;Es importante saber desde que punto se va a comenzar a pintar porque eso es lo que dirá que espacio ocupara cada elemento, por defecto si no se especifica, los elementos se crean con la propiedad &lt;code&gt;position&lt;/code&gt; y el valor &lt;code&gt;static&lt;/code&gt;, los elementos comenzaran a pintarse desde la esquina superior izquierda del elemento padre (0 x 0).&lt;/p&gt;

&lt;p&gt;Los diferentes tipos de posicionamiento son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;static&lt;/code&gt; (valor por defecto)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;relative&lt;/code&gt; (El elemento se coloca relativo al flujo normal)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;absolute&lt;/code&gt; (El elemento se coloca respecto a su contenedor posicionado mas cercano)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fixed&lt;/code&gt; (El elemento se coloca respecto al viewport)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sticky&lt;/code&gt; (Es una combinación entre relative y fixed)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todos los elementos HTML son posicionados como estáticos por defecto, esto es, para hacer que el elemento fluya en el orden natural de la pagina, es decir, que el elemento siempre será posicionado de acuerdo al flujo normal de la pagina.&lt;/p&gt;

&lt;p&gt;Al tener un elemento posicionado podemos moverlo en los 3 ejes y corresponden a cinco propiedades:&lt;/p&gt;

&lt;p&gt;↔️ &lt;strong&gt;Eje X:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;right&lt;/code&gt;(mover el elemento desde la parte derecha hacia la izquierda)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;left&lt;/code&gt;(mover el elemento desde la parte izquierda hacia la derecha)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;↕️    &lt;strong&gt;Eje Y:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;top&lt;/code&gt; (mover el elemento desde la parte superior hacia la inferior)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bottom&lt;/code&gt;(mover el elemento desde la parte inferior hacia la superior)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🔄 &lt;strong&gt;Eje Z:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;z-index&lt;/code&gt;(cuando dos o mas elementos se solapan, podemos decidir cual aparece primero y cual por detrás de el).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⚠️ Las propiedades top, right, bottom, left y z-index no funcionaran y no serán habilitadas para los elementos con posicionamiento estático por lo tanto los elementos no se podrán mover o desplazar.&lt;/p&gt;

&lt;p&gt;En la propiedad &lt;code&gt;z-index&lt;/code&gt; solo se especifica un numero entero positivo/negativo, no se usa unidades tales como pixeles o porcentajes. La propiedad &lt;code&gt;z-index&lt;/code&gt; toma un valor numérico entre 0 y ±2147483647 en la mayoría de los navegadores comunes.&lt;br&gt;
Es recomendable no usar valores consecutivos como: 1,2,3,4... &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contexto"&gt;
  &lt;/a&gt;
  ⏹️Contexto
&lt;/h2&gt;

&lt;p&gt;Un contexto o también llamado punto de referencia es un área, podemos verlo como un rectángulo imaginario a través del cual los elementos van a poder posicionarse, moverse, alinearse o distribuirse.&lt;/p&gt;

&lt;p&gt;Cuando hablamos de posicionamiento, el contexto es la posición inicial del elemento (donde esta originalmente) y desde el cual se calcula hacia donde se va a mover el elemento posicionado cuando colocamos ya sea &lt;code&gt;bottom&lt;/code&gt;,&lt;code&gt;right&lt;/code&gt;,&lt;code&gt;left&lt;/code&gt;,&lt;code&gt;top&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;💡 Cabe mencionar que el navegador reserva un espacio para cada uno de los elementos y esto lo hace para que ningún otro elemento ocupe ese espacio, esto también se le conoce como &lt;strong&gt;espacio reservado.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursos"&gt;
  &lt;/a&gt;
  🔎 Recursos:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Learn/CSS/CSS_layout/Normal_Flow"&gt;Flujo Normal | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/CSS/position"&gt;Position | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/z-index"&gt;z-index | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.joshwcomeau.com/css/stacking-contexts/"&gt;What the heck, z-index?? | Josh Comeau&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gracias por leer🦸🏻‍♀️&lt;br&gt;
Mis redes sociales donde comparto notas de código:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/lupitacode"&gt;▶️Youtube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://instagram.com/lupitacode"&gt;📷Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/lupitacode"&gt;🐦Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://facebook.com/lupitacode"&gt;🔵Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codepen.io/lupitacode/"&gt;🔲Codepen&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lupitacode.medium.com/"&gt;✍️Medium&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@lupitacode"&gt;🎵Tik Tok&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>spanish</category>
      <category>latam</category>
    </item>
    <item>
      <title>NuxtJS - Authentication made easy with Magic</title>
      <author>Mohammad Shahbaz Alam</author>
      <pubDate>Mon, 17 May 2021 19:40:04 +0000</pubDate>
      <link>https://dev.to/shahbaz17/nuxtjs-authentication-made-easy-with-magic-3ki1</link>
      <guid>https://dev.to/shahbaz17/nuxtjs-authentication-made-easy-with-magic-3ki1</guid>
      <description>&lt;p&gt;These days adding authentication to an application is very challenging, and you shouldn’t build it from scratch. As the centralized companies on the internet have already failed us in protecting user's privacy and data.&lt;/p&gt;

&lt;p&gt;The user trust model of the internet is broken. Let's fix it one step at a time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Hi 👋, in this guide you'll be learning how to add passwordless login to a Nuxt.js application using Magic Link.&lt;/p&gt;

&lt;p&gt;Nuxt.js is a higher-level framework based on Vue.js to create production-ready modern web applications. Nuxt is inspired by Next.js, which is a framework of similar purpose, based on React.js.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-a-secured-nuxtjs-application-with-magic"&gt;
  &lt;/a&gt;
  Create a secured Nuxt.js application with Magic
&lt;/h1&gt;

&lt;p&gt;Let’s start by creating our application using &lt;code&gt;npx make-magic&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx make-magic &lt;span class="nt"&gt;--template&lt;/span&gt; nuxt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a few seconds, you will be prompted for a project name, this will also be the name of the folder that will be created for this project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XYlTtmFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97oxlem2mhfen8mf3baa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XYlTtmFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97oxlem2mhfen8mf3baa.png" alt="Enter your project name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After putting in a project name, you will be prompted for your Magic Publishable API Key, which enables user authentication with &lt;a href="https://magic.link"&gt;Magic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLTASG8u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqf4i18yhocywognpmoh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLTASG8u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqf4i18yhocywognpmoh.png" alt="Enter Magic Publishable Key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get your &lt;strong&gt;publishable API key&lt;/strong&gt;, you'll need to sign up to &lt;a href="https://dashboard.magic.link/signup?ref=nuxt-dev-to-post"&gt;Magic Dashboard&lt;/a&gt;. Once you've signed up, an app will be created upon your first login (you'll be able to create new apps later).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n_PHiFq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpp4w4g0ebm9jq2c84u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_PHiFq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpp4w4g0ebm9jq2c84u8.png" alt="Magic Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll now be able to see your &lt;strong&gt;Test Publishable API Key&lt;/strong&gt; - copy and paste the key into your CLI prompt.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sP6_cGn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bl5im0fsjtpntdxsdpf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sP6_cGn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bl5im0fsjtpntdxsdpf1.png" alt="Entered Magic Test Publishable API key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After hitting Enter, you'll be asked to select whether you’d like to use npm / yarn as the NPM client for your project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wiTKod4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i367jel60qjbgtwr2t6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wiTKod4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i367jel60qjbgtwr2t6o.png" alt="Select NPM Client"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After selecting your NPM client, the nuxt server will automatically start, and your application will be running on &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this example app, you'll be prompted to sign up for a new account using an email address or login into an existing one. The authentication process is secured by &lt;a href="https://magic.link"&gt;Magic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VjPlWJJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uli3plstf1ayp987affb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VjPlWJJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uli3plstf1ayp987affb.png" alt="Login page of the Nuxt.js application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking on your magic link email, you'll be successfully logged in, and redirected to the profile page that displays your email, issuer, and public address.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HPA3YaEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gdc446vq5pepzjbuho8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPA3YaEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gdc446vq5pepzjbuho8.png" alt="Profile page of the Nuxt.js application displaying user's info"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read the full guide on &lt;a href="https://magic.link/posts/magic-nuxt"&gt;https://magic.link/posts/magic-nuxt&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Live Demo: &lt;a href="https://magic-nuxtjs.vercel.app/"&gt;https://magic-nuxtjs.vercel.app/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nuxt</category>
      <category>javascript</category>
      <category>magic</category>
      <category>auth</category>
    </item>
    <item>
      <title>TIL - HTML Dialog Element</title>
      <author>James Cox</author>
      <pubDate>Mon, 17 May 2021 19:02:24 +0000</pubDate>
      <link>https://dev.to/jamesncox/til-html-dialog-element-1pm3</link>
      <guid>https://dev.to/jamesncox/til-html-dialog-element-1pm3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#til"&gt;
  &lt;/a&gt;
  #TIL
&lt;/h1&gt;

&lt;p&gt;Today I learned that HTML has a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog"&gt;native modal&lt;/a&gt;, known as the  &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML  element represents a dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AN HTML POP UP? NO WAY! (yes way).&lt;/p&gt;

&lt;p&gt;As always, I demonstrate the usage in React.js, which means that some functionality translates directly, and other functionality does not. For example, according to the docs: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The ::backdrop CSS pseudo-element can be used to style behind a  element when the dialog is displayed with HTMLDialogElement.showModal(). For example, to dim unreachable content behind the modal dialog.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you will see in a moment, using  a &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; in React requires a little bit of a different usage to dim the background. But, truthfully I think it is still easier than with vanilla JS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-modal"&gt;
  &lt;/a&gt;
  The Modal
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/7qmo9"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Looks great, doesn't it? And you will see in just a moment that the necessary code is relatively simple!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openDialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeDialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLs&lt;/span&gt; &lt;span class="nx"&gt;Native&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;simple&lt;/span&gt; &lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;overlay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;dialog&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;BOOM&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;And&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;youve&lt;/span&gt; &lt;span class="nx"&gt;got&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nx"&gt;Easy&lt;/span&gt; &lt;span class="nx"&gt;peezy&lt;/span&gt; &lt;span class="nx"&gt;lemon&lt;/span&gt; &lt;span class="nx"&gt;squeezy&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lemon emojis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="err"&gt;🍋🍋🍋&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;closeDialog&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/dialog&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;openDialog&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Open&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#breaking-it-down"&gt;
  &lt;/a&gt;
  Breaking it Down
&lt;/h2&gt;

&lt;p&gt;The open or closed state of the modal is handled by the &lt;code&gt;useState&lt;/code&gt; hook provided by React and toggled by the &lt;code&gt;openDialog()&lt;/code&gt; and &lt;code&gt;closeDialog()&lt;/code&gt; functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openDialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeDialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HTML for a &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element looks something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;dialog&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;BOOM&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;And&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;youve&lt;/span&gt; &lt;span class="nx"&gt;got&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Easy&lt;/span&gt; &lt;span class="nx"&gt;peezy&lt;/span&gt; &lt;span class="nx"&gt;lemon&lt;/span&gt; &lt;span class="nx"&gt;squeezy&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lemon emojis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="err"&gt;🍋🍋🍋&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;closeDialog&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/dialog&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most import part of the above code is the &lt;code&gt;open&lt;/code&gt; property in the opening &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; tag, written as &lt;code&gt;&amp;lt;dialog open&amp;gt;&lt;/code&gt;. That's how the browser knows to display the modal.&lt;/p&gt;

&lt;p&gt;And the full &lt;code&gt;return&lt;/code&gt; statement with the conditional render handled by the &lt;code&gt;isOpen&lt;/code&gt; property in state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLs&lt;/span&gt; &lt;span class="nx"&gt;Native&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;simple&lt;/span&gt; &lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;overlay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;dialog&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;BOOM&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;And&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;youve&lt;/span&gt; &lt;span class="nx"&gt;got&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nx"&gt;Easy&lt;/span&gt; &lt;span class="nx"&gt;peezy&lt;/span&gt; &lt;span class="nx"&gt;lemon&lt;/span&gt; &lt;span class="nx"&gt;squeezy&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lemon emojis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="err"&gt;🍋🍋🍋&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;closeDialog&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/dialog&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;openDialog&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Open&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-should-i-care"&gt;
  &lt;/a&gt;
  Why Should I Care?
&lt;/h2&gt;

&lt;p&gt;The cool and most important thing about the &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element is better accessibility. Sure, you can build your own modal, but then you've got to work extra hard to make it available to screen readers and other accessibility tools. &lt;/p&gt;

&lt;p&gt;Another cool benefit is not having to add a bunch of &lt;code&gt;z-index&lt;/code&gt; properties to your CSS in order to properly display the modal and any overlays you wish to add. "Modal behaviour" is baked right into the &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element. &lt;/p&gt;

&lt;p&gt;Added accessibility AND easier styling capabilities? Sounds like a WIN-WIN to me!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-css"&gt;
  &lt;/a&gt;
  The CSS
&lt;/h2&gt;

&lt;p&gt;Curious how I personally styled my modal and overlay? Here is the full CSS file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;dialog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;224&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;224&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;247&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;207&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.open-btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.overlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;dialog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.open-btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-overlay"&gt;
  &lt;/a&gt;
  The Overlay
&lt;/h2&gt;

&lt;p&gt;The only thing I added that that doesn't come "baked in" was the overlay. I got creative with my solution, but I would not call it "difficult" or "complex". Inside my conditional render of the &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element I added &lt;code&gt;&amp;lt;div className="overlay" /&amp;gt;&lt;/code&gt;. And simply styled with CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.overlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Think of it as stretching a layer of slightly-transparent color across the entire screen when &lt;code&gt;isOpen&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Check out this &lt;a href="https://www.shopify.com/partners/blog/new-html"&gt;great Shopify article&lt;/a&gt; that features this and other useful HTML native elements. The &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element is number 6 in the article and I really liked tihs part: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Does it work?&lt;br&gt;
The  does a slightly more complex thing…and does it well. Browser support is somewhat patchy (notably no Internet Explorer, and Safari is pending at the time of writing), but there is a polyfill.&lt;/p&gt;

&lt;p&gt;Is it accessible?&lt;br&gt;
Support is quite good, but it does need a little ARIA support to go to production. What's really good about the  element is that most accessibility support is built in, making it a far better starting point than having to create your own fixed inline custom dialog component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope you enjoyed my article on this awesome HTML element! As always let me know if you have any questions, comments, feedback, suggestions, etc!&lt;/p&gt;

&lt;p&gt;Thanks again and see you next time!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  Update
&lt;/h2&gt;

&lt;p&gt;It appears that the &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element does not behave as intended on iOS. At least not on mobile iOS. I am going to do some further digging and update this article with the relevant information as soon as possible!&lt;/p&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
    <item>
      <title>Formatting dates in javascript without a library</title>
      <author>Thomas Ledoux</author>
      <pubDate>Mon, 17 May 2021 18:45:00 +0000</pubDate>
      <link>https://dev.to/thomasledoux1/formatting-dates-in-js-without-a-library-21mm</link>
      <guid>https://dev.to/thomasledoux1/formatting-dates-in-js-without-a-library-21mm</guid>
      <description>&lt;p&gt;Gone are the days where we needed libraries to simply format a date (yes I'm looking at you Moment.js).&lt;br&gt;
After ditching Moment.js about a year ago, because it's not good with tree-shaking and immutability, I landed on Day.js.&lt;/p&gt;

&lt;p&gt;This was definitely an upgrade compared to Moment.js purely looking at the size of the library you're importing, but it still felt strange to use a library to format a date.&lt;/p&gt;

&lt;p&gt;For a new project I'm working on, I did some research, and found out that Javascript has some solid date functions built in.&lt;/p&gt;

&lt;p&gt;Say I want to convert a UTC date to a human readable, localized string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// Thu Dec 20 2012 04:00:00 GMT+0100 (Central European Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The default already looks kind of ok, but my client wants it to be in Dutch, and wants the weekday to be written out fully (e.g. Wednesday). &lt;br&gt;
For this case, we can use the &lt;code&gt;toLocaleDateString()&lt;/code&gt; function on the Javascript Date object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UTC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nl-BE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// possible values: 'long', 'short', 'narrow'&lt;/span&gt;
  &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// possible values: 'numeric', '2-digit'&lt;/span&gt;
  &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;short&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// possible values: 'numeric', '2-digit', 'long', 'short', 'narrow'&lt;/span&gt;
  &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// possible values: 'numeric', '2-digit'&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="c1"&gt;// donderdag 20 dec. 2012&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Super easy! And easy to customise too, you don't have to remember to use capitals, different digits (like dd-MM-yyyy etc.).&lt;br&gt;
Formatting without options (just a locale) will format the date the default way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nl-BE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// 20/12/2012&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to see more options, have a look at the MDN page: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So for simple conversions/formatting this can definitely do the trick, for more complex stuff (working with different timezones, adding/subtracting days...) I'd recommend using date-fns (&lt;a href="https://github.com/date-fns/date-fns"&gt;https://github.com/date-fns/date-fns&lt;/a&gt;)!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
    </item>
    <item>
      <title>How I made a web app to create presentations</title>
      <author>Kostas Bariotis</author>
      <pubDate>Mon, 17 May 2021 18:36:58 +0000</pubDate>
      <link>https://dev.to/kbariotis/how-i-made-a-web-app-to-create-presentations-5b91</link>
      <guid>https://dev.to/kbariotis/how-i-made-a-web-app-to-create-presentations-5b91</guid>
      <description>&lt;p&gt;I had that idea for a while in my head. I was tired of every time I had to create a presentation and I was spending more time deciding where the header should go and if it's five pixels higher than it should be and if the colors match.&lt;/p&gt;

&lt;p&gt;Today I'm glad to introduce you to &lt;a href="https://presentador.app"&gt;Presentador&lt;/a&gt;. Now I can focus on writing the content of my presentation while Presentador takes care of the positioning of the elements and the colors. 🛠&lt;/p&gt;

&lt;p&gt;In this post, I would like to explore some challenges I found along the way of creating a web app for presentations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presentation-mode"&gt;
  &lt;/a&gt;
  Presentation mode
&lt;/h2&gt;

&lt;p&gt;A presentation app at the very least will allow you to present, meaning zooming the contents of the slides to play nicely on bigger screens, projectors, etc. When your presentation slides are basically HTML pages being rendered on a web browser, you can't rely on scaling using pixels or relative units like &lt;code&gt;em&lt;/code&gt;. Different screens will have different resolutions and different user settings. So how do we scale to always make sure that the slides will keep their original shape? &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale()"&gt;CSS &lt;code&gt;scale&lt;/code&gt;&lt;/a&gt; to the rescue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wl8m8_uk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54045xgtb9gk6ugwfcgt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wl8m8_uk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54045xgtb9gk6ugwfcgt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;scale&lt;/code&gt; we are able to resize our page in two dimensions. &lt;a href="https://github.com/Presentador/presentador.app/blob/master/src/components/Slide/SlideWrapper.tsx#L27-L58"&gt;First, we get the viewport size of the current browser and then calculate how much to scale&lt;/a&gt;. Hats off to &lt;a href="https://revealjs.com/"&gt;Reveal.js&lt;/a&gt; for giving me the idea. 💡&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-text-selection"&gt;
  &lt;/a&gt;
  User text selection
&lt;/h2&gt;

&lt;p&gt;I wanted to be able to edit all text-based components in place in each slide. I started experimenting with &lt;code&gt;contenteditable&lt;/code&gt; and at first, it was serving its purpose greatly. Until I decided to add a simple WYSIWYG interface to allow me to add bold and italic text as well as links.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d3ZqbX3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwarzmdyn7pv42xf51cj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d3ZqbX3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwarzmdyn7pv42xf51cj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The biggest challenge I faced there was working text selection. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection"&gt;Selection&lt;/a&gt; is still experimental and besides that, I found it to be quite complicated. I wanted something easier to work with.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://github.com/timdown/rangy"&gt;Rangy&lt;/a&gt;. It makes working with user selection, a walk in the park. Unfortunately, it is outdated and hasn't been maintained for some time, but I still found it stable and simple. With &lt;a href="https://github.com/Presentador/presentador.app/blob/master/src/components/Slide/EditableToolbar.tsx#L8-L9"&gt;some experimentation&lt;/a&gt; I was able to load it onto my app and I'm not exaggerating when I say: it saved lots of hours. Hats off to the author.&lt;/p&gt;

&lt;p&gt;I'm using it to &lt;a href="https://github.com/Presentador/presentador.app/blob/master/src/components/Slide/EditableToolbar.tsx#L170-L178"&gt;save and restore the user selection&lt;/a&gt; as well as to wrap or unwrap an HTML element around a specific selection, so to make it bold, italic or transform it to a link. 💥&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#local-file-system"&gt;
  &lt;/a&gt;
  Local file system
&lt;/h2&gt;

&lt;p&gt;Saving presentations on the cloud you say? Well yeah but honestly, it wouldn't offer me that much at this point. These days, I'm working constantly from one single laptop so I wasn't worried about losing my work. But I had to save my work somewhere. Well, let's use that hard drive then.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API"&gt;File System Access&lt;/a&gt; API is here and while no major compatibility exists yet, this &lt;a href="https://github.com/GoogleChromeLabs/browser-fs-access"&gt;library&lt;/a&gt; will fallback to native implementation if the browser doesn't support it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2xeI0d0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c3bkff4yq4lruu8553h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2xeI0d0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c3bkff4yq4lruu8553h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I'm able to save my work in a local file, store it on my cloud account and load it whenever I need it. 👍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There you go. Those were my biggest challenges creating a web app for creating presentations.&lt;/p&gt;

&lt;p&gt;It was a great journey. &lt;a href="https://presentador.app"&gt;Do use it&lt;/a&gt; and let me know if any feedback you may have. I'm looking forward to that. 🙏&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Installing fonts on a remote server</title>
      <author>Alen Duda</author>
      <pubDate>Mon, 17 May 2021 18:33:12 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/installing-fonts-on-a-remote-server-km9</link>
      <guid>https://dev.to/bornfightcompany/installing-fonts-on-a-remote-server-km9</guid>
      <description>&lt;p&gt;Recently we encountered an interesting situation after migrating our web application to a new server - all the generated &lt;em&gt;PDFs started to look slightly different&lt;/em&gt; than before. This was unexpected as no changes were made to fonts, yet after a short research the conclusion was that the &lt;strong&gt;fonts were different&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We used Adobe Acrobat to check for font names and found three different results for old server, new server and locally generated PDFs. This pointed to the fact that the generic &lt;em&gt;sans-serif&lt;/em&gt; font family was declared and the tool we use for PDF generation (&lt;a href="https://wkhtmltopdf.org/"&gt;wkhtmltopdf&lt;/a&gt;) used the default sans-serif font available on the operating system the application was running on (&lt;code&gt;Helvetica&lt;/code&gt; on local Mac OS and &lt;code&gt;DejaVu Sans&lt;/code&gt; on new CentOS Linux 7 server). Since the documents were required to look the same and wkhtmltopdf has issues with Webfonts, the agreed solution was to install the same old font and set it as the default sans-serif on the new remote server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gathering-information-and-preparing-directories"&gt;
  &lt;/a&gt;
  Gathering information and preparing directories
&lt;/h2&gt;

&lt;p&gt;After SSH-ing to the remote server, we checked which operating system was present:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /etc/os-release
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also used the following commands to check&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fc-match &lt;span class="nt"&gt;-a&lt;/span&gt;  &lt;span class="c"&gt;# print which fonts are used&lt;/span&gt;
fc-list &lt;span class="c"&gt;# print where font files are located&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gave us enough information for further steps.&lt;/p&gt;

&lt;p&gt;On CentOS, custom font files for each user need to be placed inside &lt;code&gt;~/.fonts&lt;/code&gt; directory. Since that directory didn't exist, we created it with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="c"&gt;# make sure we are in home directory&lt;/span&gt;
&lt;span class="nb"&gt;mkdir&lt;/span&gt; .fonts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#uploading-and-installing-the-font"&gt;
  &lt;/a&gt;
  Uploading and installing the font
&lt;/h2&gt;

&lt;p&gt;After the .fonts directory is created, we needed to upload the font files in that directory. This can be done in multiple ways, but here we will mention the two simplest (if you don't have sudo access).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-1-raw-wget-endraw-from-a-thirdparty-server"&gt;
  &lt;/a&gt;
  Option 1: &lt;code&gt;wget&lt;/code&gt; from a third-party server
&lt;/h3&gt;

&lt;p&gt;This is a great option if the font in question is available on a publicly available third-party server like &lt;a href="https://ttfonts.net/"&gt;TTFonts&lt;/a&gt;. Inside the .fonts directory we run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget &lt;span class="nt"&gt;--no-check-certificate&lt;/span&gt; &lt;span class="s2"&gt;"http://ttfonts.net/sfonts/2/27260_NimbusSanL.ttf"&lt;/span&gt;
wget &lt;span class="nt"&gt;--no-check-certificate&lt;/span&gt; &lt;span class="s2"&gt;"https://ttfonts.net/sfonts/2/27258_NimbusSanLBold.ttf"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice we used both regular and bold font files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-2-raw-scp-endraw-from-local-machine"&gt;
  &lt;/a&gt;
  Option 2: &lt;code&gt;scp&lt;/code&gt; from local machine
&lt;/h3&gt;

&lt;p&gt;In case you have the needed font files available on your machine, you need to upload them to the remote. Our colleague Maroje recently wrote a &lt;a href="https://dev.to/bornfightcompany/transferring-files-between-local-machine-and-aws-instance-4efg"&gt;great article&lt;/a&gt; about how to do just that and it was very useful.&lt;/p&gt;

&lt;p&gt;For this option, open a terminal on your local machine and navigate to the directory which contains your font files.&lt;br&gt;
Since we use SSH on our server and login without a password, we used the following command to copy all .ttf files in current directory to remote server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;scp &lt;span class="nt"&gt;-i&lt;/span&gt; /Users/username/.ssh/public_key.pub &lt;span class="k"&gt;*&lt;/span&gt;.ttf remote-user@remote-host-ip:~/.fonts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information please see Maroje's post as he explained it in more detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-alias"&gt;
  &lt;/a&gt;
  Setting up the alias
&lt;/h2&gt;

&lt;p&gt;With the font files present on the server, they are ready to be used... but our situation required us to specify that font as the default sans-serif.&lt;/p&gt;

&lt;p&gt;This was done by navigating to &lt;code&gt;~/.config&lt;/code&gt; directory and creating a new &lt;code&gt;fontconfig&lt;/code&gt; directory to hold our font alias file, which we create usingthe ubiquitous &lt;em&gt;nano&lt;/em&gt; editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.config
&lt;span class="nb"&gt;mkdir &lt;/span&gt;fontconfig
&lt;span class="nb"&gt;cd &lt;/span&gt;fontconfig
nano fonts.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The content of fonts.conf file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version='1.0'?&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE fontconfig SYSTEM 'fonts.dtd'&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;fontconfig&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;alias&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;family&amp;gt;&lt;/span&gt;sans-serif&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;prefer&amp;gt;&amp;lt;family&amp;gt;&lt;/span&gt;NimbusSanL&lt;span class="nt"&gt;&amp;lt;/family&amp;gt;&amp;lt;/prefer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/alias&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/fontconfig&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! The new font started being used immediately, even though several references advised to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;fc-cache &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This was a short tutorial-like post on font installation on a remote Linux machine without GUI. As a mostly front-end dev, this was somewhat out of my comfort zone but very interesting and I was happy with the result. Hopefully this helps somebody and I will put the references for more info.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T-7YeN0m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ak13tfnm5yaejo1ygns.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T-7YeN0m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ak13tfnm5yaejo1ygns.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jichu4n.com/posts/how-to-set-default-fonts-and-font-aliases-on-linux/"&gt;https://jichu4n.com/posts/how-to-set-default-fonts-and-font-aliases-on-linux/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ohana.windwardstudios.com/m/76878/l/879660-how-do-i-install-fonts-in-linux"&gt;https://ohana.windwardstudios.com/m/76878/l/879660-how-do-i-install-fonts-in-linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/1138020/how-to-install-nimbussanl-regu-font-in-ubuntu-18-04"&gt;https://askubuntu.com/questions/1138020/how-to-install-nimbussanl-regu-font-in-ubuntu-18-04&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/css/css_font.asp"&gt;Cover image source&lt;/a&gt;&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>bash</category>
      <category>font</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Virtual Sommelier, text classifier in the browser</title>
      <author>Aral Roca</author>
      <pubDate>Mon, 17 May 2021 18:26:41 +0000</pubDate>
      <link>https://dev.to/aralroca/virtual-sommelier-text-classifier-in-the-browser-2502</link>
      <guid>https://dev.to/aralroca/virtual-sommelier-text-classifier-in-the-browser-2502</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Original article: &lt;a href="https://dev-blog.vinissimus.com/food-pairing-classifier"&gt;https://dev-blog.vinissimus.com/food-pairing-classifier&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;At Vinissimus, we have recently launched a &lt;a href="https://www.vinissimus.com/en/virtual-sommelier/"&gt;virtual sommelier&lt;/a&gt; that suggests wines given a text of a food dish.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VAh7yI2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aralroca.com/images/blog-images/virtual-sommelier.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VAh7yI2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aralroca.com/images/blog-images/virtual-sommelier.png" alt="example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article we'll explore the development of this suggester, trained with machine learning and consumed directly from the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Have a database with many wines (there are +15000 wines in our database), with food labels (in total we have &lt;strong&gt;+1000 food labels&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Given a text, for example "Wine for paella" (or just "paella"), returns all the labels among the +1000 we have that are related: paella, seafood, rice, shrimp...&lt;/li&gt;
&lt;li&gt;Fast to train and use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#type-of-problem-to-solve"&gt;
  &lt;/a&gt;
  Type of problem to solve
&lt;/h2&gt;

&lt;p&gt;Before starting with the project, it's necessary to know what kind of problem we are facing; regression, binary-class classification, multi-class classification, multi-class multi-label classification... To know this, we must know what each term is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#regression"&gt;
  &lt;/a&gt;
  Regression
&lt;/h3&gt;

&lt;p&gt;The regression makes sense when the value we want to predict is a numerical value that can give a new value outside the training values.&lt;/p&gt;

&lt;p&gt;It's not the type of problem we want to solve ❌...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#classification"&gt;
  &lt;/a&gt;
  Classification
&lt;/h3&gt;

&lt;p&gt;We use a classification, when the value we want to predict is a value within a set of predefined values (classes).&lt;/p&gt;

&lt;p&gt;Okay, this is what we want ✅.&lt;/p&gt;

&lt;p&gt;Within the classification, there are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Binary single-label&lt;/strong&gt;: predicts a class between two classes &lt;em&gt;(not our case, since we have 1000 classes ❌ )&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multi-class single-label&lt;/strong&gt;: predicts a class between more than two classes &lt;em&gt;(not our case either, since we don't have to choose 1. For example for paella we can recommend: paella, rice and seafood labels ❌ )&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multi-class multi-label&lt;/strong&gt;: predicts a range of classes between more than two classes &lt;em&gt;(This is what we want ✅ )&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is important to know that our problem is a &lt;strong&gt;multi-class multi-label classification&lt;/strong&gt; as this will determine some hyperparameters to use such as the loss function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exploring-techniquestools"&gt;
  &lt;/a&gt;
  Exploring techniques/tools
&lt;/h2&gt;

&lt;p&gt;Now that we know that the problem we want to solve is a multi-class multi-label classification, let's explore a few ways in order to solve the problem, considering that we want to load the model directly from the browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tensorflowjs"&gt;
  &lt;/a&gt;
  Tensorflow.js
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Spoiler&lt;/strong&gt;: we'll discard it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tensorflow.org/js"&gt;Tensorflow&lt;/a&gt; is one of the most used frameworks for deeplearning, it allows you to create neural network models in a simple and declarative way. It also has a JavaScript version that allows us to load an already trained model from the browser to make predictions. So initially this tool could be considerated adequate to solve the problem.&lt;/p&gt;

&lt;p&gt;Tensorflow works with tensors (n-dimensional vectors) as a lingua franca, so to work with text we must transform the text into tensors. To do this there are several embedding models, however we'll use the &lt;a href="https://tfhub.dev/google/universal-sentence-encoder/1"&gt;Universal Sentence Encoder&lt;/a&gt; that is already optimized to work from the browser, because to make the prediction we must also pass the text to tensor from the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mV9iAnY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aralroca.com/images/blog-images/example-classification.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mV9iAnY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aralroca.com/images/blog-images/example-classification.png" alt="example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can transform our entire dataset into encodings with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tensorflow/tfjs-node-gpu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tensorflow-models/universal-sentence-encoder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Encoding...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;use&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;embeddings.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSync&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Saved...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And use a network architecture like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;tf&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tensorflow/tfjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tensorflow/tfjs-node-gpu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequential&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dense&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;inputShape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;relu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;units&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dense&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;inputShape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;relu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;units&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dense&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sigmoid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;units&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;binaryCrossentropy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;optimizer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;adam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accuracy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To train the model, pass it the encodings that we have generated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;embeddings&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./embeddings.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;outputs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./outputs.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fitDataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;epochs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;file://./model&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course there are many hyperparameters to play with: number of epochs, batch size, dense layer activation functions, optimizer, etc. However, after spending a lot of time we haven't found yet the best way to solve two problems that had arisen when we tried to solve the problem with Tensorflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The time needed to train with +1000 classes and +400000 examples in the dataset made it unfeasible. Around 10 days of training.&lt;/li&gt;
&lt;li&gt;Testing with fewer classes and examples works well... But calculating the embeddings with the Universal Sentense encoder is a bit expensive (although the prediction is cheaper). To make the prediction we have to pass the embeddings so it's a price to pay.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the requirements (Fast to train and use) was not feasible with Tensorflow.js. We have to &lt;strong&gt;look for other alternatives&lt;/strong&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fasttext"&gt;
  &lt;/a&gt;
  FastText
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Spoiler&lt;/strong&gt;: This is what we finally use.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fasttext.cc/"&gt;FastText&lt;/a&gt; is a Facebook tool that, among other things, is used to train text classification models. Unlike Tensorflow.js, it is more intended to work with text so we don't need to pass a tensor and we can use the text directly. Training a model with it is much faster and there are fewer hyperparameters. Besides, to use the model from the browser is possible through WebAssembly. So it's a good alternative to try. Moreover, we can directly use the fastText CLI, which makes it easier to test combinations.&lt;/p&gt;

&lt;p&gt;After some tests, we found that fastText met the requirements. The following sections of the article will focus on the use of FastText.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparing-the-data-amp-data-augmentation"&gt;
  &lt;/a&gt;
  Preparing the data &amp;amp; data augmentation
&lt;/h2&gt;

&lt;p&gt;FastText expects a text file with different labels and texts with a similar format to this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;__label__1606 __label__433 rabbit with mushrooms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The text &lt;code&gt;rabbit with mushrooms&lt;/code&gt; is related to the labels with the id &lt;code&gt;1606&lt;/code&gt; &lt;em&gt;(id of the "rabbit with mushrooms" label)&lt;/em&gt; and &lt;code&gt;433&lt;/code&gt; &lt;em&gt;(id of the "rabbit" label)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The initial problem is that we don't start from ready-made sentences because the search engine didn't exist before, so we have to generate them from each label we have.&lt;/p&gt;

&lt;p&gt;Surely we could put more labels on it, for example, white meat, but how do we make all those relationships?&lt;/p&gt;

&lt;p&gt;What we did is to save an array with each label in a JSON, and make several scripts for each label to have extra information such as: synonyms, plurals, closest words, relations, etc. For each language we have (en, es, it, fr and de).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For &lt;strong&gt;synonyms&lt;/strong&gt;, &lt;strong&gt;plurals&lt;/strong&gt; and missing translations we used the &lt;a href="https://www.deepl.com/en/docs-api/"&gt;API of DeepL&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;closest words&lt;/strong&gt;, FastText has available &lt;a href="https://fasttext.cc/docs/en/pretrained-vectors.html"&gt;Wikipedia vectors&lt;/a&gt; to search the closest words with k-nearest.&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;relations&lt;/strong&gt;, we simply made several iterations in the array applying logics like: all words that have "beef, goat, etc" are marked as children of "red meat". And so on with all the detected labels that were more generic, such as: fish, rice, pasta, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from normalizing each text with this simple JS function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NFD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\u&lt;/span&gt;&lt;span class="sr"&gt;0300-&lt;/span&gt;&lt;span class="se"&gt;\u&lt;/span&gt;&lt;span class="sr"&gt;036f&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example of 2 items of this array:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1109"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"txt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"es"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"revueltos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"fr"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"oeufs brouilles"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"de"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ruhreier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"it"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"uova strapazzate"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"scrambled eggs"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"similar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"fritos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"revuelto"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"egg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"huevo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"estrellados"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"779"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"779"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"txt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"es"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"huevos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"fr"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"oeuf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"de"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"it"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"uova"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eggs"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"similar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"uovo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"œuf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"ei"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"kartoffel omelette"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"omelette"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"huevo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"spiegelei"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"tortilla de patatas"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"tortilla"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"gebraten"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"tortillas"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"fritos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"frito"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"fichi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"ous"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Preparing this array has been the most laborious part of the whole process. Once this array is ready, then we can generate with the format that FastText is expecting as many food sentences as possible by adding plurals, synonyms, knowing which generic labels to put for each sentence, etc. Besides we can add extra words to the sentences such as "Wine for ...", "Pairing for ...", etc.&lt;/p&gt;

&lt;p&gt;So we went from 1000 labels, and therefore 1000 possible sentences with 1 label per sentence, to increase to 74,000 sentences and each sentence with several labels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#training"&gt;
  &lt;/a&gt;
  Training
&lt;/h2&gt;

&lt;p&gt;Once the file with all the sentences and labels has been generated, we can train the model. With FastText we can do this directly with the CLI. After playing a little with the hyperparameters, this was the command that best converged our loss function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./fasttext supervised -input data/dataset.txt -output model -epoch 50 -lr 0.1 -lrUpdateRate 1000 -minCount 1 -minn 3 -maxn 6 -wordNgrams 2 -dim 100 -neg 20 -loss ova
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a &lt;strong&gt;loss function&lt;/strong&gt; we use the &lt;strong&gt;ova&lt;/strong&gt; (one vs all) which is the one that best suits us for a multi-class multi-label classification problem. Other parameters such as epoch, learning rate, etc, are the result of playing with the hyperparameters so that the loss function is as close to 0 as possible (where there is less error).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;minn&lt;/strong&gt; and &lt;strong&gt;maxn&lt;/strong&gt; are important to avoid misspelings when typing. So if people search for "pizzza", for example, they will get the same results as "pizza". On the other hand, it significantly increases the final size of the model. I'll explain later how to fix this.&lt;/p&gt;

&lt;p&gt;If you run the command, you'll see that the training time is much faster than using Tensorflow, with 20min maximum.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation"&gt;
  &lt;/a&gt;
  Evaluation
&lt;/h2&gt;

&lt;p&gt;To know how well your model is doing, one of the things to look at during the training, as I said, is how the loss is closer to zero. We can also look how the accuracy is closer to 100. However, once it's already trained we can evaluate how well the model is doing by looking at two other factors: Recall and precision. To do this, FastText has a &lt;a href="https://fasttext.cc/docs/en/cheatsheet.html#text-classification"&gt;test&lt;/a&gt; command that can be applied to a set of sentences that have not been used during training.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reducing-the-model-size-quantization"&gt;
  &lt;/a&gt;
  Reducing the model size: Quantization
&lt;/h2&gt;

&lt;p&gt;One problem we encountered was that the size of the model occupied 400mb, so it was totally unfeasible to be used in the browser... This is the cost we include for avoiding misspelings with minn and maxn parameters.&lt;/p&gt;

&lt;p&gt;To solve this, we use a well-known technique in machine learning called quantization, which consists of reducing the memory size reserved for each weight.&lt;/p&gt;

&lt;p&gt;Fortunately, FastText has its own implementation to apply quantization in its models. For more details they published a &lt;a href="https://arxiv.org/pdf/1612.03651.pdf"&gt;paper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's important to be aware that applying quantization is not a panacea, and that we are likely to lose some model accuracy.&lt;/p&gt;

&lt;p&gt;We apply the quantization with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./fasttext quantize -output model -input data/dataset.txt -qnorm -retrain -epoch 1 -cutoff 100000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, we drop from 400mb to 4mb! 100 times less. 4mb is still big for the browser, but more feasible...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-model-on-the-browser"&gt;
  &lt;/a&gt;
  Using the model on the browser
&lt;/h2&gt;

&lt;p&gt;To use the model trained with FastText from the browser, it is necessary to load it &lt;a href="https://github.com/facebookresearch/fastText/tree/master/webassembly"&gt;via WebAssembly&lt;/a&gt;. However, you don't require a WebAssembly knowledge as you can use the &lt;code&gt;fasttext.js&lt;/code&gt; file which has all the glue code.&lt;/p&gt;

&lt;p&gt;We can load the model dynamically with the following function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setModel&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onLoadModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FastText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addOnPostRun&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./fasttext.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;addOnPostRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FastText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;setModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./model.ftz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first part of the above example we've loaded the fasttext library. Then we've loaded the model and saved it, in this case, in the React state, so that we can use it later.&lt;/p&gt;

&lt;p&gt;For label prediction through a text, we can use this function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;predictLabelsFromText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numLabels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;numLabels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;predictions&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;scoreA&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;scoreB&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;scoreB&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;scoreA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__label__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Given a text, this function returns the 5 related labels (if the probability is higher than 50%, controled by the threshold).&lt;/p&gt;

&lt;p&gt;Compared to Tensorflow, the prediction here is very fast.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;In this article we have seen how to train a text prediction model easily using FastText and how to use it directly from the browser.&lt;/p&gt;

&lt;p&gt;The example used in the article is a real example of a project we developed at Vinissimus, in which, given a text about food, relates to the referenced food labels in order to be able to recommend a wine.&lt;/p&gt;

&lt;p&gt;You can test the result in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.vinissimus.co.uk/en/virtual-sommelier/"&gt;https://www.vinissimus.co.uk/en/virtual-sommelier/&lt;/a&gt; (English)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.vinissimus.com/es/virtual-sommelier/"&gt;https://www.vinissimus.com/es/virtual-sommelier/&lt;/a&gt; (Spanish)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.italvinus.it/it/virtual-sommelier/"&gt;https://www.italvinus.it/it/virtual-sommelier/&lt;/a&gt; (Italian)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.vinissimus.fr/fr/virtual-sommelier/"&gt;https://www.vinissimus.fr/fr/virtual-sommelier/&lt;/a&gt; (French)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.hispavinus.de/de/virtual-sommelier/"&gt;https://www.hispavinus.de/de/virtual-sommelier/&lt;/a&gt; (German)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>machinelearning</category>
      <category>webassembly</category>
      <category>react</category>
    </item>
    <item>
      <title>Variables in JavaScript</title>
      <author>Sanskrati Jain</author>
      <pubDate>Mon, 17 May 2021 17:46:24 +0000</pubDate>
      <link>https://dev.to/sanskrati01/variables-in-javascript-382b</link>
      <guid>https://dev.to/sanskrati01/variables-in-javascript-382b</guid>
      <description>&lt;p&gt;JS variables are used to store data values. But unlike any other language, the datatypes of that variable are not declared first like in C++. JavaScript has dynamic types. This means that the same variable can be used to hold different data types,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; var, let, and const: &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To declare variables we use var, let, and const.&lt;br&gt;
var and let are very similar except in block scope which is discussed in the difference between var and let. &lt;br&gt;
cont is the same as let but used only for constants.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bdflpd4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m73qk61gcc1agvthtgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bdflpd4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m73qk61gcc1agvthtgb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Difference Between var and let:
The main difference between var and let is that scope of var is global while that of let is limited to block. This means if I declare a variable using var, it can be excessed anywhere except in the case of a function. This can be a problem if we use it in loops for example.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N90-Fa_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlh708gxer2l1ejhq6uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N90-Fa_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlh708gxer2l1ejhq6uz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Properties of const :
People usually misunderstood the cont. It does not define a constant value. It defines a constant reference to a value, which means we can actually change the properties of a constant object or the element of a constant array. It is just you can reassign a value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KKywHgU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32o0r99xenloshae74oy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KKywHgU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32o0r99xenloshae74oy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>The Easiest Way to Debug Kubernetes Workloads</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 17 May 2021 17:31:52 +0000</pubDate>
      <link>https://dev.to/martinheinz/the-easiest-way-to-debug-kubernetes-workloads-1njg</link>
      <guid>https://dev.to/martinheinz/the-easiest-way-to-debug-kubernetes-workloads-1njg</guid>
      <description>&lt;p&gt;Debugging containerized workloads and &lt;em&gt;Pods&lt;/em&gt; is a daily task for every developer and DevOps engineer that works with Kubernetes. Oftentimes simple &lt;code&gt;kubectl logs&lt;/code&gt; or &lt;code&gt;kubectl describe pod&lt;/code&gt; is enough to find the culprit of some problem, but some issues are harder to hunt down. In those cases you might try to use &lt;code&gt;kubectl exec&lt;/code&gt; but even that might not be enough as some containers such as &lt;em&gt;Distroless&lt;/em&gt; don't even contain shell that you could SSH into. So what do we have left, if all of the above fails? ...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-might-just-be-a-better-way"&gt;
  &lt;/a&gt;
  There Might Just Be a Better Way...
&lt;/h2&gt;

&lt;p&gt;Sometimes you need to grab a bigger hammer or just use more appropriate tool for the task at hand. In case of debugging workloads on Kubernetes, that appropriate tool would be &lt;code&gt;kubectl debug&lt;/code&gt;, which is a new command added not too long ago (v1.18) that allows you to debug running pods. It injects special type of container called &lt;em&gt;EphemeralContainer&lt;/em&gt; into problematic Pod allowing you to poke around and troubleshoot. This can be very useful for cases described in the intro or in any other situation where interactive debugging is preferable or more efficient. So, &lt;code&gt;kubectl debug&lt;/code&gt; looks like the way to go, but to use it we will need &lt;em&gt;ephemeral containers&lt;/em&gt;, so what exactly are these?&lt;/p&gt;

&lt;p&gt;Ephemeral containers are a sub-resource in Pod similar to normal &lt;code&gt;containers&lt;/code&gt;. Unlike regular containers though, ephemeral containers are not meant for building applications, but rather for inspecting them. We don't define them at the creation time of a Pod, rather we inject them using special API into running Pod to run troubleshooting commands and to inspect environment of the Pod. Apart from these differences, ephemeral containers also lack some of the fields of basic containers, such as &lt;code&gt;ports&lt;/code&gt; or &lt;code&gt;resources&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Why do we need them, though? Can't we just use basic containers? Well, you cannot add containers to Pod as they're supposed to be disposable (or in other words - deleted and recreated at any time), which can make it difficult to troubleshoot hard to reproduce bugs that require inspection of Pod. That's why ephemeral containers were added to API - they allow you to add container to an existing pod, making it easier to inspect running pods.&lt;/p&gt;

&lt;p&gt;Considering that ephemeral containers are part of Pod spec which is core of Kubernetes, how is that you (probably) haven't heard about it, yet? The reason why these are mostly unknown feature is because ephemeral containers are in early &lt;em&gt;Alpha&lt;/em&gt; stage, which means they're not enabled by default. Resources and features in this stage might undergo big changes or be removed entirely in future versions of Kubernetes. Therefore, to use them you have to explicitly enable them using &lt;em&gt;Feature Gates&lt;/em&gt; in &lt;code&gt;kubelet&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-feature-gates"&gt;
  &lt;/a&gt;
  Configuring Feature Gates
&lt;/h2&gt;

&lt;p&gt;We already established that we want to try &lt;code&gt;kubectl debug&lt;/code&gt; out, so how do we enable ephemeral containers feature gate? Well, it depends on your cluster setup. For example, if you're using &lt;code&gt;kubeadm&lt;/code&gt; to spin up create clusters, then you can use following &lt;em&gt;ClusterConfiguration&lt;/em&gt; to enable ephemeral containers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kubeadm.k8s.io/v1beta2&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterConfiguration&lt;/span&gt;
&lt;span class="na"&gt;kubernetesVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1.20.2&lt;/span&gt;
&lt;span class="na"&gt;apiServer&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;extraArgs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;feature-gates&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ephemeral containers=true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the following examples though, we will use &lt;em&gt;KinD (Kubernetes in Docker)&lt;/em&gt; cluster for simplicity and testing purposes, which also allows us to specify Feature Gates that we want enabled. So, to create our playground cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# File: config.yaml&lt;/span&gt;
&lt;span class="c1"&gt;# Run:  kind create cluster --config ./config.yaml --name kind --image=kindest/node:v1.20.2&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cluster&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kind.x-k8s.io/v1alpha4&lt;/span&gt;
&lt;span class="na"&gt;featureGates&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ephemeral containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;nodes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;control-plane&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the cluster running, we should verify that it indeed worked. The simplest way to see if this configuration got applied, is to inspect Pod API which should now include the ephemeral containers section alongside the usual Containers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl explain pod.spec.ephemeralContainers
KIND:     Pod
VERSION:  v1

RESOURCE: ephemeralContainers &amp;lt;&lt;span class="o"&gt;[]&lt;/span&gt;Object&amp;gt;

DESCRIPTION:
     List of ephemeral containers run &lt;span class="k"&gt;in &lt;/span&gt;this pod....
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This confirms that we have it and therefore we can start using &lt;code&gt;kubectl debug&lt;/code&gt;. So, let's start off with simple example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl run some-app &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;k8s.gcr.io/pause:3.1 &lt;span class="nt"&gt;--restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Never
~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl debug &lt;span class="nt"&gt;-it&lt;/span&gt; some-app &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;busybox &lt;span class="nt"&gt;--target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;some-app
Defaulting debug container name to debugger-tfqvh.
If you don&lt;span class="s1"&gt;'t see a command prompt, try pressing enter.
/ #

# From other terminal...
~ $ kubectl describe pod some-app
...
Containers:
  some-app:
    Container ID:   containerd://60cc537eee843cb38a1ba295baaa172db8344eea59de4d75311400436d4a5083
    Image:          k8s.gcr.io/pause:3.1
    Image ID:       k8s.gcr.io/pause@sha256:f78411e19d84a252e53bff71a4407a5686c46983a2c2eeed83929b888179acea
...
Ephemeral Containers:
  debugger-tfqvh:
    Container ID:   containerd://12efbbf2e46bb523ae0546b2369801b51a61e1367dda839ce0e02f0e5c1a49d6
    Image:          busybox
    Image ID:       docker.io/library/busybox@sha256:ce2360d5189a033012fbad1635e037be86f23b65cfd676b436d0931af390a2ac
    Port:           &amp;lt;none&amp;gt;
    Host Port:      &amp;lt;none&amp;gt;
    State:          Running
      Started:      Mon, 15 Mar 2021 20:33:51 +0100
    Ready:          False
    Restart Count:  0
    Environment:    &amp;lt;none&amp;gt;
    Mounts:         &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We first start a Pod called &lt;code&gt;some-app&lt;/code&gt; just so we have something to &lt;em&gt;"debug"&lt;/em&gt;. We then run &lt;code&gt;kubectl debug&lt;/code&gt; against this Pod, specifying &lt;code&gt;busybox&lt;/code&gt; as an image for the ephemeral container, as well as a target which is the original container. Additionally, we also include &lt;code&gt;-it&lt;/code&gt; arguments so that we immediately attach to container and get a shell session.&lt;/p&gt;

&lt;p&gt;In the above snippet you can also see that if we describe the Pod after running &lt;code&gt;kubectl debug&lt;/code&gt; on it, then its description will include &lt;em&gt;Ephemeral Containers&lt;/em&gt; section with values we specified as command options earlier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process-namespace-sharing"&gt;
  &lt;/a&gt;
  Process Namespace Sharing
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;kubectl debug&lt;/code&gt; is quite powerful tool, but sometimes adding another container to a Pod might not be enough to get relevant information about the application running in Pod's other container. This might be the case when container being troubleshot doesn't include necessary debugging tools or even shell. In such situation we can use &lt;em&gt;Process Sharing&lt;/em&gt; to allow us to inspect Pod's original container using our injected ephemeral container.&lt;/p&gt;

&lt;p&gt;One problem though with process sharing is that it cannot be applied to existing Pods, therefore we have to create a new one with &lt;code&gt;spec.shareProcessNamespace&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; and inject an ephemeral container into it. Doing this would be quite cumbersome, especially if we have to debug multiple pods/containers or just perform this repeatedly. Luckily, &lt;code&gt;kubectl debug&lt;/code&gt; can do this for us using &lt;code&gt;--share-processes&lt;/code&gt; option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl run some-app &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nt"&gt;--restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Never
~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl debug &lt;span class="nt"&gt;-it&lt;/span&gt; some-app &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;busybox &lt;span class="nt"&gt;--share-processes&lt;/span&gt; &lt;span class="nt"&gt;--copy-to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;some-app-debug
Defaulting debug container name to debugger-tkwst.
If you don&lt;span class="s1"&gt;'t see a command prompt, try pressing enter.
/ # ps ax
PID   USER     TIME  COMMAND
    1 root      0:00 /pause
    8 root      0:00 nginx: master process nginx -g daemon off;
   38 101       0:00 nginx: worker process
   39 root      0:00 sh
   46 root      0:00 ps ax

~ $ cat /proc/8/root/etc/nginx/conf.d/default.conf 
server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;
...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above snippet shows that with process sharing we can see everything inside the other container in a Pod including its processes and files, which can definitely be very handy for debugging.&lt;/p&gt;

&lt;p&gt;As you probably noticed, in addition to &lt;code&gt;--share-processes&lt;/code&gt; we also included &lt;code&gt;--copy-to=new-pod-name&lt;/code&gt; because - as was mentioned - we need to create a new pod whose name is specified by this flag. If we then list running pods from another terminal we will see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# From other terminal:&lt;/span&gt;
~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods
NAME             READY   STATUS    RESTARTS   AGE
some-app         1/1     Running   0          23h
some-app-debug   2/2     Running   0          20s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's our new debug Pod along the original application Pod. It has 2 containers in comparison to the original one as it also includes the ephemeral container.&lt;/p&gt;

&lt;p&gt;Also, if you want to at any point verify whether the process sharing is allowed in some Pod, then you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pod some-app-debug &lt;span class="nt"&gt;-o&lt;/span&gt; json  | jq .spec.shareProcessNamespace
&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#putting-it-to-good-use"&gt;
  &lt;/a&gt;
  Putting It To Good Use
&lt;/h2&gt;

&lt;p&gt;Now that we have the feature gate enabled and know how the command works, let's try to put it a good use and debug some application. Let's imagine the following scenario - we've got an application that's misbehaving and we need to troubleshoot networking related issues in its container. The application doesn't have necessary networking CLI tools which we could use. To solve this, we can use &lt;code&gt;kubectl debug&lt;/code&gt; in a following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl run distroless-python &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;martinheinz/distroless-python &lt;span class="nt"&gt;--restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Never
~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; distroless-python &lt;span class="nt"&gt;--&lt;/span&gt; /bin/sh
&lt;span class="c"&gt;# id&lt;/span&gt;
/bin/sh: 1: &lt;span class="nb"&gt;id&lt;/span&gt;: not found
&lt;span class="c"&gt;# ls&lt;/span&gt;
/bin/sh: 2: &lt;span class="nb"&gt;ls&lt;/span&gt;: not found
&lt;span class="c"&gt;# env&lt;/span&gt;
/bin/sh: 3: &lt;span class="nb"&gt;env&lt;/span&gt;: not found
&lt;span class="c"&gt;#&lt;/span&gt;
...

kubectl debug &lt;span class="nt"&gt;-it&lt;/span&gt; distroless-python &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;praqma/network-multitool &lt;span class="nt"&gt;--target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;distroless-python &lt;span class="nt"&gt;--&lt;/span&gt; sh
Defaulting debug container name to debugger-rvtd4.
If you don&lt;span class="s1"&gt;'t see a command prompt, try pressing enter.
/ # ping localhost
PING localhost(localhost (::1)) 56 data bytes
64 bytes from localhost (::1): icmp_seq=1 ttl=64 time=0.025 ms
64 bytes from localhost (::1): icmp_seq=2 ttl=64 time=0.044 ms
64 bytes from localhost (::1): icmp_seq=3 ttl=64 time=0.027 ms
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After starting a pod we first try to get shell session into its container, which might seem like it worked, but when we try to run some basic commands we can see that there's literally nothing there. So, instead, we inject ephemeral container into the pod using &lt;code&gt;praqma/network-multitool&lt;/code&gt; image which contains tools like &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;ping&lt;/code&gt;, &lt;code&gt;telnet&lt;/code&gt;, etc. and now we can perform all the necessary troubleshooting.&lt;/p&gt;

&lt;p&gt;In the above example it was enough for us to have another container in the Pod and poke around in there. But sometimes, you might need to look directly into the troubling container while not having a way to get into its shell. In that case we can take advantage of process sharing like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl run distroless-python &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;martinheinz/distroless-python &lt;span class="nt"&gt;--restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Never
~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl debug &lt;span class="nt"&gt;-it&lt;/span&gt; distroless-python &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;busybox &lt;span class="nt"&gt;--share-processes&lt;/span&gt; &lt;span class="nt"&gt;--copy-to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;distroless-python-debug
Defaulting debug container name to debugger-l692h.
If you don&lt;span class="s1"&gt;'t see a command prompt, try pressing enter.
/ # ps ax
PID   USER     TIME  COMMAND
    1 root      0:00 /pause
    8 root      0:00 /usr/bin/python3.5 sleep.py  # Original container is just sleeping forever
   14 root      0:00 sh
   20 root      0:00 ps ax
/ # cat /proc/8/root/app/sleep.py 
import time
print("sleeping for 1 hour")
time.sleep(3600)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we once again ran container that uses Distroless image. Knowing that we wouldn't be able to do anything in its shell, we ran &lt;code&gt;kubectl debug&lt;/code&gt; with &lt;code&gt;--share-processes --copy-to=...&lt;/code&gt;, which creates a new Pod with additional ephemeral container which has access to all processes. When we then list running processes, we can see that our application container's process has PID 8, which we can use to explore its files and environment. To do that, we have to go through &lt;code&gt;/proc/&amp;lt;PID&amp;gt;/...&lt;/code&gt; directory - which in this case would be - &lt;code&gt;/proc/8/root/app/...&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another common situation is that application keeps crashing upon container start making it difficult to debug as there's not enough time to get shell session into the container and run some troubleshooting commands. In this case the solution would be to create container with different entry point/command, which would stop the application from crashing immediately and allowing us to perform debugging:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods
NAME                READY   STATUS             RESTARTS   AGE
crashing-app        0/1     CrashLoopBackOff   1          8s

~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl debug crashing-app &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--copy-to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;crashing-app-debug &lt;span class="nt"&gt;--container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;crashing-app &lt;span class="nt"&gt;--&lt;/span&gt; sh
If you don&lt;span class="s1"&gt;'t see a command prompt, try pressing enter.
# id
uid=0(root) gid=0(root) groups=0(root)
#
...

# From another terminal
~ $ kubectl get pods
NAME                READY   STATUS             RESTARTS   AGE
crashing-app        0/1     CrashLoopBackOff   3          2m7s
crashing-app-debug  1/1     Running            0          16s
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus-debugging-cluster-nodes"&gt;
  &lt;/a&gt;
  Bonus: Debugging Cluster Nodes
&lt;/h2&gt;

&lt;p&gt;This article was mainly focused on debugging of Pods and their containers - but as any cluster admin knows - oftentimes it's the nodes that need debugging and not the Pods. Luckily for us, &lt;code&gt;kubectl debug&lt;/code&gt; also allows for debugging of nodes by creating Pod that will run on specified node with node's root filesystem mounted in &lt;code&gt;/root&lt;/code&gt; directory. This essentially acts as a SSH connection into node, considering that we can even use &lt;code&gt;chroot&lt;/code&gt; to get access to host binaries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get nodes
NAME                 STATUS   ROLES                  AGE   VERSION
kind-control-plane   Ready    control-plane,master   25h   v1.20.2

~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl debug node/kind-control-plane &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ubuntu
Creating debugging pod node-debugger-kind-control-plane-hvljt with container debugger on node kind-control-plane.
If you don&lt;span class="s1"&gt;'t see a command prompt, try pressing enter.
root@kind-control-plane:/# chroot /host

# head kind/kubeadm.conf
apiServer:
  certSANs:
  - localhost
  - 127.0.0.1
  extraArgs:
    feature-gates: EphemeralContainers=true
    runtime-config: ""
apiVersion: kubeadm.k8s.io/v1beta2
clusterName: kind
controlPlaneEndpoint: kind-control-plane:6443
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet we first identified the node which we want to debug, then we ran &lt;code&gt;kubectl debug&lt;/code&gt; explicitly using &lt;code&gt;node/...&lt;/code&gt;  as parameter to get access to our cluster's node. After that, when we get attached to the Pod, we use &lt;code&gt;chroot /host&lt;/code&gt; to break out of &lt;code&gt;chroot&lt;/code&gt; jail and gain full access to the host. Finally, to verify that we really can see everything on the host, we view part of &lt;code&gt;kubeadm.conf&lt;/code&gt; in which we can see the &lt;code&gt;feature-gates: EphemeralContainers=true&lt;/code&gt; which we configured in the beginning of the article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Being able to quickly and efficiently debug applications and services can save you a lot of time, but more importantly it can greatly help you with solving issues that might end-up costing you a lot of money if not resolved immediately. That's why it's important to have tools like &lt;code&gt;kubectl debug&lt;/code&gt; at your disposal and enabled, even when they're not GA or enabled by default yet.&lt;/p&gt;

&lt;p&gt;If - for whatever reason - enabling ephemeral containers is not an option, then it's probably a good idea to try practicing alternative debugging approaches, such as using debug version of application's image which would include troubleshooting tools; or temporarily changing Pod's container's command directive to stop it from crashing.&lt;/p&gt;

&lt;p&gt;With that said, &lt;code&gt;kubectl debug&lt;/code&gt; and ephemeral containers are only one of many useful - yet barely known - Kubernetes Feature Gates, so keep an eye out for followup article(s) that will dive into some other hidden features of Kubernetes.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>kubernetes</category>
      <category>linux</category>
      <category>debugging</category>
    </item>
  </channel>
</rss>
