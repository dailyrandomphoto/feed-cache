<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>AWS Karpenter - Is the AWS Open Source Kubernetes Autoscaler Right for You?</title>
      <author>CAST AI</author>
      <pubDate>Fri, 10 Dec 2021 10:53:34 +0000</pubDate>
      <link>https://dev.to/castai/aws-karpenter-is-the-aws-open-source-kubernetes-autoscaler-right-for-you-60c</link>
      <guid>https://dev.to/castai/aws-karpenter-is-the-aws-open-source-kubernetes-autoscaler-right-for-you-60c</guid>
      <description>&lt;p&gt;AWS has just made a new open-source tool called Karpenter generally available. I will dig into how it works, and will be unavoidably comparing it with what we at CAST AI have built.&lt;/p&gt;

&lt;p&gt;What exactly is Karpenter, how does its autoscaling mechanism work, and should you use it?&lt;/p&gt;

&lt;p&gt;Karpenter is a very simple autoscaler with two reactive policies. Its biggest selling point? No node pools. &lt;/p&gt;

&lt;p&gt;Let’s take a look at how Karpenter works and compare it to the autoscaling mechanisms of CAST AI.&lt;/p&gt;

&lt;h2&gt;Quick feature comparison - CAST AI vs. Karpenter&lt;/h2&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QavaTXNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/12/Feature-Comparison-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QavaTXNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/12/Feature-Comparison-1.png" alt="AWS Karpenter vs. CAST AI" width="880" height="1033"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Detailed feature comparison of Karpenter and CAST AI&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#installationandonboarding"&gt;Installation and onboarding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#autoscalingpolicies"&gt;Autoscaling policies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#codevendorsupport"&gt;Cloud vendor support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nonodepools"&gt;No node pools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#podgrouping"&gt;Pod grouping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#costoptimization"&gt;Cost optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#karpentervscastai"&gt;Karpenter vs. CAST AI - which autoscaler is a better pick for you?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="installationandonboarding"&gt;Installation and onboarding&lt;/h2&gt;

&lt;p&gt;After trying Karpenter out, I’d say that onboarding isn’t trivial but not as hard as the Kubernetes Cluster Autoscaler.  &lt;/p&gt;

&lt;p&gt;Karpenter onboarding requires you to have eksctl CLI installed and configured, even if you created an EKS cluster without the help of eksctl. It takes around &lt;a href="https://karpenter.sh/docs/getting-started/"&gt;6 to 7 steps&lt;/a&gt; to get started with Karpenter&lt;/p&gt;

&lt;p&gt;CAST AI doesn’t have a eksctl dependency and you’re looking at a 2 steps process that your IT manager could complete on his own in a minute or two.&lt;/p&gt;

&lt;h2 id="autoscalingpolicies"&gt;Autoscaling policies&lt;/h2&gt;

&lt;p&gt;Karpenter has only two most basic autoscaling policies. At first glance they are quite similar to two of the policies in CAST AI (Unscheduled Pod Policy and Node Deletion policy). Let’s compare the two.&lt;/p&gt;

&lt;h3&gt;1. Provisioner &lt;/h3&gt;

&lt;p&gt;At its simplest form without sub features CAST AI’s Unscheduled Pod Policy works in a similar way as Karpenter’s Provisioner. &lt;/p&gt;

&lt;p&gt;If there are pods that can’t start because no suitable node has been found by Kubernetes vanilla scheduler - a new node will be created based on those pending pod constraints like zone, subnet, PodAntiAffinity, capacity preference (spot or on-demand).&lt;/p&gt;

&lt;p&gt;Karpenter has these constraints available for NodeSelector, NodeAffinity, TopologySpreadConstraints:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;requirements:
    - key: node.k8s.aws/instance-type #If not included, all instance types are considered
      operator: In
      values: ["m5.large", "m5.2xlarge"]
    - key: "topology.kubernetes.io/zone" #If not included, all zones are considered
      operator: In
      values: ["us-east-1a", "us-east-1b"]
    - key: "kubernetes.io/arch" #If not included, all architectures are considered
      values: ["arm64", "amd64"]
    - key: " karpenter.sh/capacity-type" #If not included, the webhook for the AWS cloud provider will default to on-demand
      operator: In
      values: ["spot", "on-demand"]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Karpenter supports GPU and ARM with the following tolerations: &lt;strong&gt;nvidia.com/gpu&lt;/strong&gt;, &lt;strong&gt;amd.com/gpu&lt;/strong&gt;, and &lt;strong&gt;aws.amazon.com/neuron&lt;/strong&gt;. To add a GPU node, one needs to define a specific list of nodes (and we’re back to the node pool idea).&lt;/p&gt;

&lt;p&gt;CAST AI allows you to specify more pod constraints, like &lt;em&gt;get me instances with fast local storage for Spark jobs&lt;/em&gt;, but does not require you to specify the instance types yourself. In case you didn’t check lately, there are 475 available types on AWS which makes it easy getting back to implicit NodePools by accident.&lt;/p&gt;

&lt;p&gt;You can also specify the Spot interruption rate per cluster and override per workload in CAST AI. For example you may want your casual Spot workload in a cluster to be on more cost efficient Spot instances even if that means these instances could be interrupted once in a while.&lt;/p&gt;

&lt;p&gt;But those huge Jupyter notebook pods with a ton of resources? You want them to run Spot Instances that are so unpopular that they barely get ever interrupted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Back to the Node Pools against own will&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Running your Kubernetes workloads on burstable T3a Instance types is a crime to your business and your DevOps, but this is what you will get by default with Karpenter. Because, as you guessed it, they are the most affordable instances.&lt;/p&gt;

&lt;p&gt;Don’t want burstable instances? Then list all acceptable Instance types in Karpenter Provisioner CRD which you want in your Kubernetes cluster to have. And with that you have just specified a cherry picked Node list and are implicitly back to NodePools.&lt;/p&gt;

&lt;p&gt;And what if these cherry picked Node lists are not available during Black Friday or Xmas days? You will need to extend the list with more alternatives. Many more alternatives. But didn't the first paragraph in this article say there will be no Node Pools? Unfortunately they are unavoidable with Karpenter under the hood.&lt;/p&gt;

&lt;h3&gt;2. Delete Empty Node policy&lt;/h3&gt;

&lt;p&gt;As the name implies, Karpenter can and will delete empty nodes. This policy allows you to set the Time To Live for empty nodes (&lt;strong&gt;ttlSecondsAfterEmpty&lt;/strong&gt; with a default of 30). CAST AI’s Delete Node policy works in the same fashion. CAST AI engine will not remove nodes if there are workloads running on them (excluding DaemonSets of course).&lt;/p&gt;

&lt;p&gt;Kubernetes scheduler by default acts in a very fair way and will always distribute workloads for maximum performance and availability. And if you’re running EKS you can’t change the Kubernetes scheduler profile.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s look at this with an analogy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Imagine a train (Kubernetes cluster) with 10 train cars (Nodes), each train car can seat 100 passengers (pods), the train has a capacity to transport 1000 passengers at peak.&lt;/p&gt;

&lt;p&gt;The train moves from the central station fully utilized with 1000 seats taken and with every stop more people get off the train than on it. Even a few stops before the end of the train journey, if the train is carrying only 15 passengers out of 1000, someone needs to make sure that there are empty train cars. It’s likely that there are 1 to 2 passengers in a train car enjoying their privacy and the Delete Empty Node train car can’t find anything to remove.&lt;/p&gt;

&lt;p&gt;So how does Karpenter help with over provisioned resources for off peak times when load is lower?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enter Node Expiry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Karpenter offers a Node Expiry feature. If a node expiry time-to-live value (&lt;strong&gt;ttlSecondsUntilExpired&lt;/strong&gt;) is reached, that node is drained of pods and Node is deleted.&lt;/p&gt;

&lt;p&gt;Great! But wait a minute, what about your workloads that are running on these nodes? Sorry, end of shift. Nodes are going down, say hello to downtime.&lt;/p&gt;

&lt;p&gt;Alright, but how would you know what the expiration time should be? If you get it too short, your pods are going down, you then have to wait several minutes for the Karpenter provisioner to add new nodes with refreshed ttlSecondsUntilExpired.&lt;/p&gt;

&lt;p&gt;If you set ttlSecondsUntilExpired too long, you’re wasting your money. In other words Karpenter reacts in time to add new capacity so your cloud bill could expand, but leave you hanging with reducing that excess capacity.&lt;/p&gt;

&lt;p&gt;CAST AI, on the other hand, offers Evictor that shrinks the cluster to the minimum number of nodes by bin packing pods (simulating evictions, honoring Pod Disruption Budgets etc). Once Evictor makes a node empty, it’s deleted automatically.&lt;/p&gt;

&lt;h2 id="codevendorsupport"&gt;Cloud vendor support&lt;/h2&gt;

&lt;p&gt;At the moment, Karpenter only supports AWS. The code has a lot of AWS-specific hardcoded logic. For instance using EC2 Fleet and Spot Fleet, without a way forward for other clouds. Karpenter has fake interfaces created in the code so the project looks pluggable and open enough if someone were to take the initiative to enable other cloud support in Karpenter.&lt;/p&gt;

&lt;p&gt;CAST AI supports AWS (EKS, kOps), Google Cloud Platform (GKE), and Microsoft Azure (AKS).&lt;/p&gt;

&lt;h2 id="nonodepools"&gt;No node pools&lt;/h2&gt;

&lt;p&gt;The promise of being free of node pools sounds great. But Karpenter doesn’t offer users almost any control over the scheduling decisions when using a “naked” Provisioner. &lt;/p&gt;

&lt;p&gt;A Provisioner is Karpenter’s Kubernetes CRD which defines the node creation constraints. For example, if you had workloads that needed a GPU and you wanted the GPU nodes to have a taint (so that only the pods that actually need it are placed on those nodes), you would create a Provisioner like that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: gpu
spec:
  requirements: 
  - key: node.kubernetes.io/instance-type
    operator: In
    values:
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
  taints:
  - key: nvidia.com/gpu
    value: true
    effect: “NoSchedule”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Karpenter, the engineer still needs to have deep knowledge of the available instance types with all of their nuances. &lt;/p&gt;

&lt;p&gt;To use the SSDs in a K8s cluster, you would need to create a user-data script that makes a single logical disk out of those local SSDs and creates a symbolic link for the kubelet to use. That requires creating an EC2 Launch Template and referencing it in the Provisioner resource. And, most importantly, you need to keep it up to date if you want to achieve cost savings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt; In more complicated clusters, you’d have to create many different Provisioners, i.e. node pools: one for GPUs, another one for storage optimized, yet another one for infrequently interrupted Spot instances, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Provisioner conflicts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When there are multiple Provisioner resources defined and an unschedulable pod can tolerate/select any of them, the result will be non-deterministic. &lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: team-a
spec:
  labels:
    team: a
  requirements:
    - key: "node.kubernetes.io/instance-type" 
      operator: In
      values: ["m5.large"]
---
apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: team-b
spec:
  labels:
    team: b
  requirements:
    - key: "node.kubernetes.io/instance-type" 
      operator: In
      values: ["m5.2xlarge"]
---
apiVersion: v1
kind: Pod
metadata:
  name: pod
spec:
  containers:
  - image: nginx
    name: pod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nginx pod would be scheduled on either the m5.large or the m5.2xlarge node (chosen based on the sequence the API-Server returns for the records). This is another dimension that the DevOps engineer would need to think about. &lt;/p&gt;

&lt;p&gt;The Provisioners should clearly define constraints, and all pods should clearly define the selectors to reduce or eliminate randomness. &lt;/p&gt;

&lt;p&gt;In CAST AI, the selectors/tolerations are predefined, and engineers don’t have to come up with them on their own.&lt;/p&gt;

&lt;h2 id="podgrouping"&gt;Pod grouping (a.k.a. Bin Packing on provisioning)&lt;/h2&gt;

&lt;p&gt;Karpenter's GitHub states that they use bin packing, but only in the nodePlacer sense. That is, grouping pods to be placed on nodes to avoid creating a separate node for each pod. &lt;/p&gt;

&lt;p&gt;In CAST AI we use Permutations and Clique functions. Their purpose is to find out the most optimal pod groupings. &lt;/p&gt;

&lt;p&gt;Karpenter doesn’t have elaborate algorithms to group pods optimally. The algorithm used is basically creating a hash of the pod constraints. This means that otherwise compatible pods will end up on different nodes (Karpenter will create multiple nodes). &lt;/p&gt;

&lt;p&gt;Consider this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
  name: pod1
spec:
  nodeSelector:
    topology.kubernetes.io/zone: "eu-central-1a"
  containers:
    - image: nginx
      name: pod
--------
apiVersion: v1
kind: Pod
metadata:
  name: pod1
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: topology.kubernetes.io/zone
                operator: In
                values:
                  - "eu-central-1a"
                  - "eu-central-1b"
  containers:
    - image: nginx
      name: pod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though the pods could fit into a single node placed in the eu-central-1a zone, Karpenter will create two nodes (that might even end up in the same zone) because the hash of the pod constraints is different. Your Cluster has overprovisioned capacity, and Karpenter leaves you without a way to shrink it.&lt;/p&gt;

&lt;h2&gt;Cost optimization&lt;/h2&gt;

&lt;p&gt;When Karpenter bin-packs pods, it produces a list of viable instance types per each pod group. For example, if there’s a pod group that needs 2 CPU and 8 GiB, then a list of all instance types that have at least 2 CPU and 8 GiB is retrieved. The list is sorted by resource weight.&lt;/p&gt;

&lt;p&gt;Karpenter sorts those instance types using a weight function where 1 CPU = 1 GiB, favoring nodes with higher CPU and lower memory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// weightOf uses a euclidean distance function to compare the instance types.
// Units are normalized such that 1cpu = 1gb mem. Additionally, accelerators
// carry an arbitrarily large weight such that they will dominate the priority,
// but if equal, will still fall back to the weight of other dimensions.
func weightOf(instanceType cloudprovider.InstanceType) float64 {
    return euclidean(
        float64(instanceType.CPU().Value()),
        float64(instanceType.Memory().ScaledValue(resource.Giga)), // 1 gb = 1 cpu
        float64(instanceType.NvidiaGPUs().Value())*1000,           // Heavily weigh gpus x 1000
        float64(instanceType.AMDGPUs().Value())*1000,              // Heavily weigh gpus x 1000
        float64(instanceType.AWSNeurons().Value())*1000,           // Heavily weigh neurons x 1000
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After sorting, only the first 20 of the nodes are picked.&lt;/p&gt;

&lt;p&gt;This list might not contain the cheapest instance types because of Karpenter’s particular weighing system. There is no inventory database that can tell exactly how much something costs.&lt;/p&gt;

&lt;p&gt;After the bin-packing and sorting, the list is passed to the EC2 Fleet API. The mode of choosing the instance type depends on whether it’s an on-demand node or spot instance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On-demand instances&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this case, Karpenter passes the “lowest cost” allocation method that makes the EC2 Fleet API choose the cheapest instance type out of the 20 received viable instance types. There might be cheaper instance types, but the API works with what it was given.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spot instances&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Karpenter passes the “capacity optimized prioritized” allocation method that makes the EC2 Fleet API choose the instance types which have the highest availability, prioritizing the instance types at the top of the list. This has nothing to do with cost optimization and could be considered something similar to the CAST AI “Least interrupted” Spot reliability setting.&lt;/p&gt;

&lt;p&gt;CAST AI offers an entirely different approach to cost optimization. The platform selects the most cost-efficient instances that match the workload requirements and automatically rightsizes instances to avoid overallocation. CAST AI also comes with features such as cost reporting on any level, information about cluster cost, or potential savings. Karpenter doesn't have any of those.&lt;/p&gt;

&lt;h2 id="karpentervscastai"&gt;Karpenter vs. CAST AI - which autoscaler is a better pick for you?&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5pNKtJg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/12/CAST-AI-vs.-Karpenter.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5pNKtJg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/12/CAST-AI-vs.-Karpenter.png" alt="AWS Karpenter vs. CAST AI" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Karpenter offers a limited set of functionalities right now.&lt;/p&gt;

&lt;p&gt;AWS Karpenter is an option if you’re on AWS and considering the native Kubernetes Cluster Autoscaler. Today, &lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/"&gt;AWS offers 400+ instances&lt;/a&gt;, so node pools on which the Kubernetes Cluster Autoscaler works become unmanageable considering the exhaustible instance inventory. This is essentially what Karpenter kind of tries to solve.&lt;/p&gt;

&lt;p&gt;If you’re looking for an autoscaler that can significantly reduce your cloud bill for production workloads without impacting their availability, you need to look elsewhere.&lt;/p&gt;

&lt;p&gt;CAST AI offers a substantially more robust set of features which makes it a great fit for reliable automated cost reduction on production and development workloads. It also works with all three major cloud providers: AWS, Google Cloud, and Azure.&lt;/p&gt;

&lt;p&gt;To see what results could CAST AI bring you, you can &lt;a href="https://console.cast.ai/?screen_hint=SIGNUP" rel="noreferrer noopener"&gt;&lt;strong&gt;register and start with a free cluster analysis&lt;/strong&gt;&lt;/a&gt; or book a quick demo by clicking the button below.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>devops</category>
      <category>kubernetes</category>
      <category>aws</category>
    </item>
    <item>
      <title>Ensure greater security, performance, and scalability through Blockchain Testing Services</title>
      <author>Hemanth Yamjala</author>
      <pubDate>Fri, 10 Dec 2021 10:53:26 +0000</pubDate>
      <link>https://dev.to/cigniti/ensure-greater-security-performance-and-scalability-through-blockchain-testing-services-k51</link>
      <guid>https://dev.to/cigniti/ensure-greater-security-performance-and-scalability-through-blockchain-testing-services-k51</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9pexDZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgrahvv7xnzydn259f3i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9pexDZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgrahvv7xnzydn259f3i.jpg" alt="Image description" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The scalability and performance of IT applications and systems are supposedly the key non-functional requirements for any business enterprise. These also help enterprises understand the readiness of any project for implementation. Due to its decentralized and distributed model, which enables peers in a network to collaborate, Blockchain shares similar considerations with Bitcoin. Here, each peer node needs to compute and communicate with other nodes to validate transactions and update a shared ledger. The salience of blockchain technology has hit home in recent times, with digital and cryptocurrencies such as bitcoin becoming the talk of the town.&lt;/p&gt;

&lt;p&gt;According to techjury.net, the global blockchain market is estimated to garner revenue to the tune of $20 billion by 2024. Also, the total worldwide spending on blockchain technology solutions in 2021 is expected to be around $6.6 billion (Source: Statista). So, with so much buzz around blockchain technology, it is imperative for businesses dealing with cryptocurrencies and this technology to ensure their security, scalability, and performance through blockchain testing or assurance. However, before delving into blockchain quality assurance, let us first understand what blockchain is all about.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-blockchain"&gt;
  &lt;/a&gt;
  What is a blockchain?
&lt;/h1&gt;

&lt;p&gt;A blockchain is a decentralized, transparent, shared, and digitized public ledger that records every transaction and tracks assets in a network. It relies on a computer network where peers operate in a collaborative way. The best thing about the blockchain is the fact that every transaction recorded is encrypted and comes with a timestamp. Also, each record in the decentralized database carries a link to the previous one. In any blockchain network, the participants are the nodes sharing a ledger that is updated through peer-to-peer replication. A blockchain network eliminates duplication and therefore, is economical and efficient. Since the architecture is based on consensus, the transactions are validated, authenticated, secured, and verifiable. The above-mentioned factors make blockchain the best network to record, track, and store transactions.&lt;/p&gt;

&lt;p&gt;Since transactions in a blockchain network are replicated at a high volume, the network may face latency issues. Also, some key considerations should be factored in while conducting blockchain testing of applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-considerations-for-blockchain-app-testing"&gt;
  &lt;/a&gt;
  Key considerations for blockchain app testing
&lt;/h2&gt;

&lt;p&gt;The main factors to consider while conducting &lt;a href="https://www.cigniti.com/services/blockchain-application-testing/?utm_source=dev.to&amp;amp;utm_medium=article&amp;amp;utm_campaign=ensure_greater_security"&gt;blockchain application testing&lt;/a&gt; are as follows:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Smart contract testing:&lt;/b&gt; Similar to what is done in API testing, the methods for smart contracts should be validated. These may include validating the methods and verifying the conditional statement and the boundary value. Thereafter, the validation for encrypting the smart contract should be transmitted to another system through a distributed ledger. At the unit level testing of the blockchain architecture, all APIs for the smart contract are tested individually followed by integration testing.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Node testing&lt;/b&gt; A blockchain functions through network nodes in a distributed peer-to-peer network using an authentication protocol. It checks whether the majority of nodes have approved the transaction and validated the block. This is why all nodes must be tested independently.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Performance:&lt;/b&gt; For any blockchain performance testing, information related to network latency and based on expected transaction size, block size, and network size should be made available. It also needs details of the duration of a query, returning the output through a specialized authentication protocol. Thus, any blockchain performance testing is conducted on such parameters, and to prevent any abrupt downside or peak, cloud-based features such as auto-scaling should be leveraged.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Security:&lt;/b&gt; Blockchain has been envisioned as a secure way to record transactions in a network, and so, its security should be maintained at all levels and at all times. To ensure the integrity of the network, all transactions are encrypted cryptographically. However, should the identity layer get hacked, there is no stopping the instantaneous transactions. Hence, blockchain security testing should overcome challenges as mentioned below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wallet signature method&lt;/li&gt;
&lt;li&gt;Access and authentication&lt;/li&gt;
&lt;li&gt;Private keys&lt;/li&gt;
&lt;li&gt;Secure hash and consensus algorithm&lt;/li&gt;
&lt;li&gt;Vulnerability assessment&lt;/li&gt;
&lt;li&gt;Follow OWAPS guidelines for web and mobile applications&lt;/li&gt;
&lt;li&gt;Validating information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The blockchain testing framework has to deal with more challenges that are not limited to the above few. These mainly relate to the implementation of blockchain in an application. Nonetheless, the above-mentioned factors act as guidelines for testing blockchain implementations effectively and with proper verification and validation.&lt;/p&gt;

&lt;p&gt;Further, to ensure greater trust, security, performance, and scalability of the blockchain architecture, testers should follow a suite of best practices as mentioned below:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Shift-left testing:&lt;/b&gt; As more blockchain teams are implementing Agile and DevOps methodologies in the value chain, employing the shift-left method of testing becomes important. With shift-left testing, teams can conduct various tests early and reuse them continuously through a blockchain test automation framework. By shifting testing up in the value chain, early and iterative feedback on errors is received and acted upon. Thus, by fixing defects early on in the blockchain development, their impact on the business can be minimized or eliminated.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;API testing:&lt;/b&gt; This type of testing addresses the interaction of applications inside and outside the blockchain ecosystem. Let us understand its importance with an example. When a transaction is submitted to an API, it ought to be validated under specific rules and guidelines to create an updated order. The order is subsequently distributed by the blockchain and the API receives a confirmation of the same. So, testers must validate the applications’ interactions inside and outside the blockchain at every step and ensure the correct handling of API requests.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Functional testing:&lt;/b&gt; Functional testing for &lt;a href="https://www.cigniti.com/blog/5-top-techniques-testing-blockchain-apps/?utm_source=dev.to&amp;amp;utm_medium=article_ensure_greater_blockchain&amp;amp;utm_campaign=blog"&gt;blockchain applications&lt;/a&gt; evaluates business processes and scenarios. It does so by keeping blockchain components such as block size, chain size, data transmission, and the addition of a block into consideration. It plays a crucial role in assessing the business circumstances and authenticating every transaction that gets added to the blockchain.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Integration testing:&lt;/b&gt; Since blockchain deployment can be across several systems, locations, and environments operating in parallel, the need for several components to seamlessly interface with each other becomes critical. With integration testing, all touchpoints including the APIs are tested for validation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;In this day of rising cybercrime, Blockchain is fast emerging as a technology that can offer secure payments. As a suitable platform for digital transformation, it offers a cost-saving, decentralized, disruptive, and secure alternative for record-keeping and facilitating transactions. However, it is only with blockchain assurance that the quality, integrity, scalability, performance, and security of the framework or network can be assured.  &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 5 WordPress Trends for 2022</title>
      <author>Hire App Developers Australia</author>
      <pubDate>Fri, 10 Dec 2021 10:46:24 +0000</pubDate>
      <link>https://dev.to/appdevelopaustralia/top-5-wordpress-trends-for-2022-49li</link>
      <guid>https://dev.to/appdevelopaustralia/top-5-wordpress-trends-for-2022-49li</guid>
      <description>&lt;p&gt;WordPress is an open-source content management system that also happens to be one of the favourites when it comes to developing a website. It is used by bloggers as well as businesses to set up informative websites, highly customised websites as well as ecommerce websites. The major advantage of WordPress is that it has a low learning curve, but it is always beneficial to hire WordPress developers. This article provides more information on the top trends for WordPress development in 2022.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJNKO8fR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rdfuzisoktoci4cyccd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJNKO8fR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rdfuzisoktoci4cyccd.png" alt="Image description" width="550" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://programmerwiki.wordpress.com/2021/12/09/top-5-wordpress-trends-for-2022/"&gt;&lt;strong&gt;Top 5 WordPress Development Trends&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a good decision to opt for WordPress to develop your website. However, it is a good practice to follow the latest design &amp;amp; development trends when considering WordPress development in Sydney. Here are the top 5 development trends:&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Build Chatbot for Website using Chatwoot!</title>
      <author>Sankalp Swami</author>
      <pubDate>Fri, 10 Dec 2021 10:34:31 +0000</pubDate>
      <link>https://dev.to/aviyel/build-chatbot-for-website-using-chatwoot-4980</link>
      <guid>https://dev.to/aviyel/build-chatbot-for-website-using-chatwoot-4980</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_CAs8UGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639052101312-event-announcement-9-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_CAs8UGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639052101312-event-announcement-9-resized.png" alt="Live Chat chatwoot chatbots" width="760" height="380"&gt;&lt;/a&gt;&lt;br&gt;
That moment when your internet is down and you are frustrated with late responses of a representative of your broadband company going through their CRMs. Do you want your customers to feel the same? If not, Chatbots are the solution and how do you integrate chatbots into your application? Umm well why worry when Aviyel comes with another valuable event where you will learn how to integrate chatbots into your website using Chatwoot.&lt;/p&gt;

&lt;p&gt;Chatbots are here to make our life easier. Chatbot helps massively in better customer engagement which is the prime goal for most companies. With the help of chatbots, we can improve our lead generation. If you want to improve your customer engagement, improve your lead generation, this event is the solution. Join this event and learn how to build Chatbot for a website using &lt;a href="https://www.chatwoot.com/"&gt;Chatwoot&lt;/a&gt; with Murtuzaali Surti.&lt;/p&gt;

&lt;p&gt;Why should one join this event?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You will learn what are chatbots and their impact on customer experience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn why one should prefer chatwoot for integrating chatbots into their websites.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will take a hands-on approach to various chatwoot features which will help in improving your customer engagement.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Murtuzaali Surti is coming live on Aviyel where he will help you guys by building chatbots for websites using Chatwoot. Murtuza is a front-end web developer and also an author at CSS Tricks. He is good at designing accessible, responsive, and elegant user interfaces. Murtuza is also having the ability to write in-depth articles regarding web development and UI design.&lt;/p&gt;

&lt;p&gt;Join us to get hands-on experience with Chatwoot &amp;amp; open-source!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Date: December 19th, 2021&lt;br&gt;
Time: 08 AM PST | 11 AM EST&lt;br&gt;
Register here:&lt;/strong&gt; &lt;a href="https://bit.ly/3rS9EcM"&gt;https://bit.ly/3rS9EcM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressed? Check out the rest of our events!&lt;br&gt;
Let’s build open-source together! 🎉&lt;br&gt;
Team Aviyel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Murtuzaali Surti Socials!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/murtuza_surti"&gt;Murtuzaali Surti&lt;/a&gt;&lt;br&gt;
GitHub: &lt;a href="https://github.com/murtuzaalisurti"&gt;Murtuzaali Surti&lt;/a&gt;&lt;br&gt;
Hashnode: &lt;a href="https://murtuza.hashnode.dev/"&gt;Murtuza's Blog&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/murtuzaali-surti/"&gt;Murtuzaali Surti&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My Django-Svelte setup for fullstack development</title>
      <author>besil</author>
      <pubDate>Fri, 10 Dec 2021 10:22:55 +0000</pubDate>
      <link>https://dev.to/besil/my-django-svelte-setup-for-fullstack-development-3an8</link>
      <guid>https://dev.to/besil/my-django-svelte-setup-for-fullstack-development-3an8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#my-djangosvelte-workflow-for-fullstack-development"&gt;
  &lt;/a&gt;
  My Django-Svelte workflow for fullstack development
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#motivation"&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#about-post"&gt;About this post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-app"&gt;The app&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-app/prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-app/setup"&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-app/django/settings"&gt;Code: Django - settings.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-app/svelte"&gt;Code: Svelte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-app/django/spa"&gt;Code: Django - spa view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-app/test-it"&gt;Test it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#authentication"&gt;Adding Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rest-api"&gt;Rest API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#production"&gt;Building for Production&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;I recently discovered &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; and became my first choice for personal projects and MVP/POCs.&lt;/p&gt;

&lt;p&gt;As a backend developer, I struggled a lot with frameworks like React or Vue, looking for a productive workflow. Svelte is dead simple compared to them, in my opinion. And yet very powerful.&lt;/p&gt;

&lt;p&gt;However, coming from &lt;a href="https://www.djangoproject.com"&gt;Django&lt;/a&gt;, I still struggled on stuff like &lt;strong&gt;security&lt;/strong&gt; or &lt;strong&gt;form validation&lt;/strong&gt;: if I want a SPA, do I really need to use only Django Rest Framework and implement everything through REST API?&lt;br&gt;
Take &lt;a href="https://docs.djangoproject.com/en/4.0/topics/auth/default/"&gt;authentication&lt;/a&gt; for example: Django has built-in views for doing it in a secure way. Do I really need to re-implement it every time client-side using JWT? Looks like a waste of time, for my productivity at least.&lt;/p&gt;

&lt;p&gt;I really like Django approach “&lt;strong&gt;batteries included&lt;/strong&gt;”, since it ships with best practices and it makes me a lot more focused on the goal I want to achieve.&lt;br&gt;
On the other hand, I still want the flexibility and reactivity provided by a SPA framework.&lt;/p&gt;

&lt;p&gt;So, after multiple projects, I'd like to share in this blog post my personal take aways and show how I scaffold my projects, in order to get:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;Django website&lt;/strong&gt;, using the powerful template system for authentication, registration and password recovery (using Django built in views)&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;Svelte app&lt;/strong&gt; served by Django, with hot reloading during development&lt;/li&gt;
&lt;li&gt;some &lt;strong&gt;Rest API&lt;/strong&gt; to provide data to the SPA app using the awesome &lt;a href="https://www.django-rest-framework.org"&gt;Django REST Framework&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way helps me a lot, because it keeps the best of the three worlds without compromising productivity.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#about-this-post"&gt;
  &lt;/a&gt;
  About this post &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Please consider the following as my personal vademecum for setting up a Django+Svelte project quickly with basic usefules dependencies (such as whitenoise, black...) and authentication (which I haven't found much covered online).&lt;/p&gt;

&lt;p&gt;It is a concentrated boilerplate of my favourites tweaks on Django that made me proficient. Feel free to ignore those who don't interests you. Any feedback is very welcome.&lt;/p&gt;

&lt;p&gt;I’m using Svelte because is my favourite, but the approach should work for Vue and React, with obvious adjustments.&lt;/p&gt;

&lt;p&gt;A medium Django/Python and Svelte knowledge is required.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-app"&gt;
  &lt;/a&gt;
  The app &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;My tools for the job are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://python-poetry.org"&gt;poetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com"&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;My setup is very similar to the one in the &lt;a href="https://www.django-rest-framework.org/tutorial/quickstart/#project-setup"&gt;DRF quickstart&lt;/a&gt;, but I prefer poetry to pip&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;django-svelte-sample-app
&lt;span class="nb"&gt;cd &lt;/span&gt;django-svelte-sample-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#django-setup"&gt;
  &lt;/a&gt;
  Django setup
&lt;/h3&gt;

&lt;p&gt;For poetry init, go for the defaults and add the basic dependencies for our Django project after&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry init
poetry add django whitenoise
poetry add &lt;span class="nt"&gt;--dev&lt;/span&gt; black &lt;span class="nt"&gt;--allow-prereleases&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set Django up (note the final dot)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;poetry run django-admin startproject myapp .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#svelte-setup"&gt;
  &lt;/a&gt;
  Svelte setup
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx degit sveltejs/template frontend
cd frontend
npm install
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;You should have the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ find .
.
./frontend
./frontend/README.md
./frontend/rollup.config.js
./frontend/public
./frontend/public/index.html
./frontend/public/global.css
./frontend/public/favicon.png
./frontend/.gitignore
./frontend/package-lock.json
./frontend/package.json
./frontend/scripts
./frontend/scripts/setupTypeScript.js
./frontend/src
./frontend/src/App.svelte
./frontend/src/main.js
./pyproject.toml
./myapp
./myapp/asgi.py
./myapp/__init__.py
./myapp/settings.py
./myapp/urls.py
./myapp/wsgi.py
./manage.py
./poetry.lock
./.venv/....
./frontend/node_modules/...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#code-django-settingspy"&gt;
  &lt;/a&gt;
  Code: Django - settings.py &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We will configure some settings for Django in order to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;enable Django Debug using Environment Variables&lt;/li&gt;
&lt;li&gt;configure logging&lt;/li&gt;
&lt;li&gt;read templates from a root folder (instead of subapps templates)&lt;/li&gt;
&lt;li&gt;managing static files with &lt;a href="http://whitenoise.evans.io/en/stable/"&gt;Whitenoise&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will modify the &lt;strong&gt;myapp/settings.py&lt;/strong&gt; file&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-djangodebug"&gt;
  &lt;/a&gt;
  Introducing DJANGO_DEBUG
&lt;/h3&gt;

&lt;p&gt;This is very useful when working with &lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt; or &lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; and you want to dinamically turn on/off the Django debug mode.&lt;/p&gt;

&lt;p&gt;Replace&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"DJANGO_DEBUG"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"DJANGO_DEBUG"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"ON"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configure-logging"&gt;
  &lt;/a&gt;
  Configure logging
&lt;/h3&gt;

&lt;p&gt;I usually configure logging as the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;logging_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"INFO"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"LOGGING_LEVEL"&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"LOGGING_LEVEL"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"disable_existing_loggers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"formatters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"console"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"[%(asctime)s][%(levelname)8s][%(name)16.16s]@[%(lineno)5s]$ %(message)s"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"handlers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"console"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"class"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"logging.StreamHandler"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"formatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"console"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"handlers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"console"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"WARNING"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"propagate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"loggers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"django.server"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"WARNING"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"handlers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"console"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;"propagate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;"myapp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logging_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"handlers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"console"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;"propagate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now easily change the log level using the LOGGING_LEVEL env variable. Feel free to change the format as you prefer!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#django-template-folder"&gt;
  &lt;/a&gt;
  Django Template folder
&lt;/h3&gt;

&lt;p&gt;I generally prefer to have all my .html templates inside a root level &lt;em&gt;templates&lt;/em&gt; folder instead of every app having &lt;em&gt;appname/templates/appname&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;Modify the TEMPLATES variable from:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"BACKEND"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"django.template.backends.django.DjangoTemplates"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"DIRS"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="s"&gt;"APP_DIRS"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"OPTIONS"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"context_processors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s"&gt;"django.template.context_processors.debug"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"django.template.context_processors.request"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"django.contrib.auth.context_processors.auth"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"django.contrib.messages.context_processors.messages"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"BACKEND"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"django.template.backends.django.DjangoTemplates"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"DIRS"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"myapp/templates"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- here
&lt;/span&gt;        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and create the folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; myapp/templates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#django-static-files"&gt;
  &lt;/a&gt;
  Django static files
&lt;/h3&gt;

&lt;p&gt;As mentioned, I really love Whitenoise for serving static files directly from Django. This helps me a lot during development and deploying because I can stay within Django.&lt;/p&gt;

&lt;p&gt;We now create a staticfiles folder inside myapp, where files will be collected when we go to production, and the folder that will contain the compiled Svelte files, that will be served as Django static files (we will see it later)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; myapp/static/frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to configure out static configurations accordingly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"myapp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"staticfiles"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/static/"&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"whitenoise.storage.CompressedManifestStaticFilesStorage"&lt;/span&gt;

&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"myapp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"static"&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And do not forget to add Whitenoise to the list of middlewares:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"django.middleware.security.SecurityMiddleware"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"whitenoise.middleware.WhiteNoiseMiddleware"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- here
&lt;/span&gt;    &lt;span class="s"&gt;"django.contrib.sessions.middleware.SessionMiddleware"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"django.middleware.common.CommonMiddleware"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finish-django-configuration"&gt;
  &lt;/a&gt;
  Finish Django configuration
&lt;/h3&gt;

&lt;p&gt;Let's complete Django configuration creating applying the migrations and starting up the server, just to be sure no warnings came up&lt;/p&gt;

&lt;p&gt;If you want to just check that everything is ok, you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;DJANGO_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON poetry run python manage.py makemigrations
&lt;span class="nv"&gt;DJANGO_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON poetry run python manage.py migrate
&lt;span class="nv"&gt;DJANGO_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON poetry run python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Watching for file changes with StatReloader
[2021-12-09 18:31:03,519][    INFO][django.utils.aut]@[  643]$ Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
December 09, 2021 - 18:31:03
Django version 4.0, using settings 'myapp.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, so good. We just instructed Django to do some useful stuff through standard configuration. Let's add the Svelte part in order to see something.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-svelte"&gt;
  &lt;/a&gt;
  Code: Svelte &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;For now, we will just expose the Svelte default app from Django.&lt;/p&gt;

&lt;p&gt;The idea here is: we will serve the files from Django static/frontend dir and we will develop from Django (ie. localhost:8000) instead of localhost:5000 (default rollup dev server).&lt;/p&gt;

&lt;p&gt;All we have to do is configure rollup to emit the build files in the static django folder.&lt;br&gt;
Go to &lt;strong&gt;frontend/rollup.config.js&lt;/strong&gt; and change the &lt;strong&gt;export default&lt;/strong&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;sourcemap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iife&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../myapp/static/frontend/bundle.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- here&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;production&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;livereload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../myapp/static/frontend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- here&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Move the frontend/public/ files to django&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mv &lt;/span&gt;frontend/public/favicon.png myapp/static/frontend/
&lt;span class="nb"&gt;mv &lt;/span&gt;frontend/public/global.css myapp/static/frontend/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in a terminal starts rollup dev server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd frontend
npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you will see the bundle files created under the Django folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ls myapp/static/frontend
bundle.css     bundle.js      bundle.js.map  favicon.png    global.css     index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will leave the rollup dev server up so that we will have the hot reload while working on the Django side, so leave the server up and change terminal.&lt;/p&gt;

&lt;p&gt;In order to serve it from Django, we need to render the template using a standard view&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-django-the-spa-view"&gt;
  &lt;/a&gt;
  Code: Django - the SPA view &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We now create a dedicated Django app that will just render the Svelte app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;myapp
poetry run django-admin startapp spa
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; myapp/templates/spa
&lt;span class="nb"&gt;mv &lt;/span&gt;frontend/public/index.html myapp/templates/spa/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace the content of &lt;strong&gt;myapp/spa/views.py&lt;/strong&gt; with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SpaView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"spa/index.html"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modify the &lt;strong&gt;myapp/templates/spa/index.html&lt;/strong&gt; using static resources from the &lt;em&gt;frontend&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% load static %}

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;'viewport'&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;'width=device-width,initial-scale=1'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Svelte app&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'icon'&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'image/png'&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{% static 'frontend/favicon.png' %}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- &amp;lt;-- here --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{% static 'frontend/global.css' %}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- &amp;lt;-- here --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{% static 'frontend/bundle.css' %}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- &amp;lt;-- here --&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"{% static 'frontend/bundle.js' %}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- &amp;lt;-- here --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the view in the &lt;strong&gt;myapps/urls.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# myapps/urls.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.spa.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SpaView&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- here
&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"admin/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SpaView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spa"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- here
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and finally, in order to add it in the installed apps, we need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;modify &lt;strong&gt;myapp/spa/apps.py&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SpaConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AppConfig&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;default_auto_field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"django.db.models.BigAutoField"&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"myapp.spa"&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;add &lt;strong&gt;myapp.spa&lt;/strong&gt; in the INSTALLED_APPS in &lt;strong&gt;myapp/settings.py&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"django.contrib.admin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"django.contrib.auth"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;"django.contrib.staticfiles"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"myapp.spa"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- here
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-it"&gt;
  &lt;/a&gt;
  Test it &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;From the root folder of the project (ie the one with the &lt;em&gt;frontend&lt;/em&gt; and &lt;em&gt;myapp&lt;/em&gt; folders inside), run in two different terminal windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# 1st shell - svelte&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;frontend
npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# 2nd shell - django&lt;/span&gt;
&lt;span class="nv"&gt;DJANGO_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ON poetry run python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt; and you will see the Svelte app served directly from Django.&lt;/p&gt;

&lt;p&gt;Try changing &lt;strong&gt;frontend/src/App.svelte&lt;/strong&gt; or &lt;strong&gt;frontend/src/main.js&lt;/strong&gt;, hit Ctrl+R and you will see it hot reloaded (from Django. Remember to disable cache or force the browser to refresh the page if you don't see any change).&lt;/p&gt;

&lt;p&gt;Don't forget that you need the "npm run dev" in background in order to keep sync the bundle.* files under Django static folder.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#secure-our-spa-the-django-way"&gt;
  &lt;/a&gt;
  Secure our SPA the Django way &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Now we can leverage the standard Django features, such as authentication.&lt;/p&gt;

&lt;p&gt;First, secure our View extending the LoginRequiredMixin. In &lt;strong&gt;myapp/spa/views.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.mixins&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SpaView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"spa/index.html"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To enable auth, add in your &lt;strong&gt;myapp/settings.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;

&lt;span class="n"&gt;LOGIN_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LOGIN_REDIRECT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"spa"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LOGOUT_REDIRECT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"spa"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in &lt;strong&gt;myapps/urls.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- here
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.spa.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SpaView&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"admin/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"accounts/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"django.contrib.auth.urls"&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- here
&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SpaView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spa"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create the login form template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; myapp/templates/registration
&lt;span class="nb"&gt;touch &lt;/span&gt;myapp/templates/registration/login.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following to &lt;strong&gt;myapp/templates/registration/login.html&lt;/strong&gt; (taken from the &lt;a href="https://docs.djangoproject.com/en/4.0/topics/auth/default/#django.contrib.auth.views.LoginView"&gt;django documentation&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    {% if form.errors %}
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Your username and password didn't match. Please try again.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endif %}

    {% if next %}
    {% if user.is_authenticated %}
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Your account doesn't have access to this page. To proceed,
        please login with an account that has access.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% else %}
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Please login to see this page.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {% endif %}
    {% endif %}

    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"{% url 'login' %}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {% csrf_token %}
        &lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ form.username.label_tag }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ form.username }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ form.password.label_tag }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ form.password }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"login"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"{{ next }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

    {# Assumes you set up the password_reset view in your URLconf #}
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{% url 'password_reset' %}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lost password?&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a super user running in a terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry run python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you try to hit &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;, you will be redirected to &lt;a href="http://localhost:8000/accounts/login/?next=/"&gt;http://localhost:8000/accounts/login/?next=/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Try to login with the provided credentials and you will see the Svelte app again.&lt;/p&gt;

&lt;p&gt;Hit &lt;a href="http://localhost:8000/accounts/logout"&gt;localhost:8000/accounts/logout&lt;/a&gt; to logout.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rest-api"&gt;
  &lt;/a&gt;
  Rest API &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Now we will add a very simple REST API using &lt;a href="https://www.django-rest-framework.org/#installation"&gt;Django Rest Framework&lt;/a&gt; and consume it from the Svelte App.&lt;/p&gt;

&lt;p&gt;Note that our Svelte SPA app will leverage &lt;a href="https://www.django-rest-framework.org/api-guide/authentication/#sessionauthentication"&gt;DRF SessionAuthentication&lt;/a&gt;, since it will invoke the API in the same context of the Django app. This is the most secure way, in my opinion&lt;/p&gt;

&lt;p&gt;First, install DRF&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;poetry add djangorestframework
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition, since Django 4.0 &lt;a href="https://docs.djangoproject.com/en/4.0/releases/4.0/#zoneinfo-default-timezone-implementation"&gt;has just been released&lt;/a&gt;, we need to install pytz, since DRF still uses it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry add pytz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and add it in &lt;strong&gt;myapp/settings.py&lt;/strong&gt; INSTALLED_APPS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"django.contrib.admin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"django.contrib.auth"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"django.contrib.contenttypes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"django.contrib.sessions"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"django.contrib.messages"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"django.contrib.staticfiles"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'rest_framework'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- here
&lt;/span&gt;    &lt;span class="s"&gt;"myapp.spa"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new Django app for the API&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;myapp
poetry run django-admin startapp api
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the mock api in &lt;strong&gt;myapp/api/views.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APIView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;authentication&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.renderers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONRenderer&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GreetingApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;authentication_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;authentication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SessionAuthentication&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAuthenticated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;renderer_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;JSONRenderer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we are using the default Django Session Authentication (via login form)&lt;/li&gt;
&lt;li&gt;the API is available only for authenticated users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now adjust &lt;strong&gt;frontend/src/App.svelte&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;apimessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Waiting for server...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/greet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;apimessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello {name}!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        Visit the &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://svelte.dev/tutorial"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Svelte tutorial&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; to learn
        how to build Svelte apps.
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Data from server&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    {apimessage}
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the API to &lt;strong&gt;myapp/urls.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.spa.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SpaView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.api.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GreetingApi&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- here
&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"admin/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"accounts/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"django.contrib.auth.urls"&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"api/greet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GreetingApi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- here
&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SpaView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"spa"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hit &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;, login and enjoy your Django based SPA using Server Side Authentication and Rest API&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-for-production"&gt;
  &lt;/a&gt;
  Building for Production &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In order to make our app ready to Production, we need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Gunicorn installed
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry add gunicorn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;collect all static files
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry run python manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;configure the allowed hosts
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#myapp/settings.py
# change ALLOWED_HOSTS = [] to
&lt;/span&gt;&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you are ready to run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry run gunicorn myapp.wsgi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt; and enjoy your gunicorn served app&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In this quite long walkthrough, we saw different things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;set up a Django app with my personal useful tweaks&lt;/li&gt;
&lt;li&gt;set up an integrated Svelte app served by Django&lt;/li&gt;
&lt;li&gt;configure Django built-in authentication to secure our SPA&lt;/li&gt;
&lt;li&gt;providing some Rest API for the SPA to consume&lt;/li&gt;
&lt;li&gt;packing everything up for Production&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find all the code &lt;a href="https://github.com/besil/django-svelte-sample-app"&gt;here on github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope this post can help you make your life as developer easier. I'm going to add other posts integrating Docker/Docker compose and some utility scripts for local development.&lt;/p&gt;

&lt;p&gt;Feel free to comment, I'd be glad to receive any feedback your have.&lt;/p&gt;

</description>
      <category>django</category>
      <category>svelte</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How angular starts </title>
      <author>sibaspage</author>
      <pubDate>Fri, 10 Dec 2021 10:07:38 +0000</pubDate>
      <link>https://dev.to/sibaspage/how-angular-starts-519j</link>
      <guid>https://dev.to/sibaspage/how-angular-starts-519j</guid>
      <description>&lt;p&gt;How angular starts executing?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is file name called angular.json which act like a configuration for the whole application.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Its looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  "build": {
    "builder": "@angular-devkit/build-angular:browser",
    "options": {
        "outputPath": "dist/angular-starter",
        "index": "src/index.html",
        **"main": "src/main.ts",**
        "polyfills": "src/polyfills.ts",
        "tsConfig": "tsconfig.app.json",
        "aot": false,
        "assets": [
        "src/favicon.ico",
        "src/assets"
        ],
        "styles": [
        "./node_modules/@angular/material/prebuilt-themes/deeppurple-amber.css",
        "src/style.css"
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The entry point will be mentioned in the "main" section.&lt;br&gt;
Which is "&lt;strong&gt;main.ts&lt;/strong&gt;" here.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;main.ts&lt;/strong&gt; file creates a browser environment to run the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Along with this it called a function called "&lt;strong&gt;bootstrapModule&lt;/strong&gt;"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;platformBrowserDynamic().bootstrapModule(AppModule)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code &lt;strong&gt;AppModule&lt;/strong&gt; is getting bootstrapped.&lt;/p&gt;

&lt;p&gt;AppModule is looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';

@NgModule({
    declarations: [
        AppComponent
    ],
    imports: [
        BrowserModule
    ],
    providers: [],
    entryComponents: [],
    bootstrap: [AppComponent]
})
export class AppModule { }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see in the &lt;strong&gt;AppModule&lt;/strong&gt; &lt;strong&gt;AppComponent&lt;/strong&gt; is getting bootstrapped.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;AppComponent&lt;/strong&gt; is defined in &lt;strong&gt;app.component.ts&lt;/strong&gt; file.&lt;br&gt;
Which looks like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css']
})
export class AppComponent {
    title = 'angular';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These file interacts with the webpage and serves data to it.&lt;/p&gt;

&lt;p&gt;After this its calls &lt;strong&gt;index.html&lt;/strong&gt; which looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;!doctype html&amp;gt;
  &amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Angular&amp;lt;/title&amp;gt;
    &amp;lt;base href="/"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;
  &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The html template of the root component is displayed inside the &lt;code&gt;&amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;&lt;/code&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>programming</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Angular vs React: Which Framework Should You Choose In Your Next Project? 
</title>
      <author>Amelia Smith</author>
      <pubDate>Fri, 10 Dec 2021 09:53:11 +0000</pubDate>
      <link>https://dev.to/amelias26018837/angular-vs-react-which-framework-should-you-choose-in-your-next-project-2efn</link>
      <guid>https://dev.to/amelias26018837/angular-vs-react-which-framework-should-you-choose-in-your-next-project-2efn</guid>
      <description>&lt;p&gt;Many times it's difficult to select a Javascript framework, especially when we have more option with the same feature and that has the capability to meet the project need. At that phase, it requires deliberation to select a proper framework. In contrast, it requires different parameters to compare the performance of the framework. &lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Angular vs React&lt;/strong&gt;, we compare both technologies, differences, similarities, and use cases that help you to select the best. &lt;/p&gt;

&lt;p&gt;Let’s get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React is one of the popular open-source front-end development libraries written in Javascript. It was mostly used in making interactive user interfaces with declarative and component-based characteristics. Moreover, the developer can learn once and work anywhere approach as it is easy to learn and create scalable and rapid applications.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Angular is the component based web app framework that is used to build scalable online applications. It has integrated features, defined libraries like routing, client-server communication. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React vs Angular : The Differences&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React is a well known JSX based Javascript library. In contrast, Angular is a Javascript framework. Moreover, Angular is used for developing complex enterprise applications such as progressive web applications and single-page applications, whereas React is used to build UI components in applications with regular variable data. The learning curve of React is moderate, on the other hand, Angular has a steeper learning curve due to its wide number of built-in features. &lt;/p&gt;

&lt;p&gt;The traits make &lt;em&gt;Angular vs React&lt;/em&gt; different from its fundamental. Thus, let's compare in the common ground.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React Traits&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React is free to use open-source framework. This is used to create reusable UI components and also manage view layers. Moreover, it is scalable and fast to change the data without loading the webpage. React is more used in large-scale applications as it loads site data without refreshing.  &lt;/p&gt;

&lt;p&gt;React contains a redux state that creates quick, scalable applications like dynamic elements. &lt;/p&gt;

&lt;p&gt;React has many external entities for certain functions, and to get that interactive functionality, it requires developers. &lt;/p&gt;

&lt;p&gt;React is also used to convert JSX to Javascript to get better browser compatibility. &lt;br&gt;
Code, bundler, web pack are used in React. &lt;/p&gt;

&lt;p&gt;The companies that used React are New York Times, Netflix, etc. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular Traits&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The front-end development framework Angular is the fastest way to construct data-driven applications. It ensures the stability of code and efficiency. Moreover, it has model-view-controller ability, it enhances the functionality of browser-based apps by decreasing the quantity of javascript code that is required to keep for operating projects.  &lt;/p&gt;

&lt;p&gt;Angular has Rxjs and AngularCLI built technologies that are simpler to exchange channels, construct data with independent event handles. Moreover, with Angular, debugging errors, adding files, creating apps is the breeze.   &lt;/p&gt;

&lt;p&gt;It quickly does the server-side rendering. &lt;/p&gt;

&lt;p&gt;It enhances overall performance. &lt;/p&gt;

&lt;p&gt;Companies using Angular are Upwork, PayPal, localities, etc. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;If you are developing a small sized application, then React will work well, but that does not mean that you can't use React in the giant application, but if you are working on an enterprise-level application, Angular is a wide choice. &lt;/p&gt;

&lt;p&gt;React works in the simplest way as it uses UI components. However, you can &lt;a href="https://www.bacancytechnology.com/hire-reactjs-developer"&gt;hire Reactjs developer&lt;/a&gt; to solve all your queries and build your application as per your requirements. Similarly, Angular is capable of managing different tasks without the need of external assistance. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 10 Best Courier Tracking Software</title>
      <author>coolpavanakumar</author>
      <pubDate>Fri, 10 Dec 2021 09:45:08 +0000</pubDate>
      <link>https://dev.to/coolpavanakumar/top-10-best-courier-tracking-software-501h</link>
      <guid>https://dev.to/coolpavanakumar/top-10-best-courier-tracking-software-501h</guid>
      <description>&lt;p&gt;One of the most important aspects of running an eCommerce business is having a reliable and efficient delivery service partner. Courier tracking software can help businesses to improve their customer experience, increase efficiency and reduce operational costs. Here; we will provide an in-depth review of the &lt;a href="https://www.clickpost.ai/blog/top-10-best-courier-tracking-software-and-tools"&gt;top 10 best courier tracking software&lt;/a&gt; which are helpful for eCommerce business. The article also provides a brief overview on what they do and how to use them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best Courier Tracking Software&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)ClickPost&lt;/strong&gt;&lt;br&gt;
ClickPost is an ecommerce shipment tracking software designed to help e-retailers grow their businesses by providing order and customer data. It works with ecommerce retailers selling across all sales channels, including web, mobile, social media or brick and mortar retail locations. ClickPost allows these e-commerce brands to have a full view of their customers' entire journey in one place. This includes managing returns and exchanges, providing excellent customer service across multiple channels and providing analytics to optimize product pricing and marketing efforts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)AfterShip&lt;/strong&gt;&lt;br&gt;
AfterShip is courier shipment tracking software that enables merchants to help their customers track their order by notifying them of updates on courier tracking information through email, SMS or push notifications. AfterShip aims to improve customer satisfaction and reduce shopping cart abandonment. Merchants can automatically sync their store's shipments with AfterShip in just a few clicks. The service will only be available for online stores using WooCommerce, Magento, Bigcommerce initially, but integrations for other platforms are scheduled soon after launch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)Convey&lt;/strong&gt;&lt;br&gt;
Convey Tracking Software is a web-based software that provides automated shipment tracking. Convey Courier Tracking Software works with all carriers in the US, Canada, UK, Australia and most other countries in the world. The service provides notifications via SMS or email alerts when shipments get delivered or picked up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4)Narvar&lt;/strong&gt;&lt;br&gt;
Narvar provides courier monitoring service that simplifies courier order delivery display and updates. It provides online shipment interface solutions for courier companies, which enable the user to track courier details after payment on Narvar's official website, as well as third-party courier providers' platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5)WeSupplyLabs&lt;/strong&gt;&lt;br&gt;
WeSupplyLabs Courier Tracking software is designed to support any Courier or Logistics business that requires a simple Courier tracking solution. It provides tracking for eCommerce businesses and allows them to share their shipment details with their customers, automate Courier activities, manage Courier workflow, track Courier shipments and generate reports in order to analyze Courier data. WeSupplyLabs version of Courier Tracking offers an open API (Application Programming Interface) which enables external integration with other systems like wholesale distributors, eCommerce websites, etc. Courier services - including DHL®, FedEx®, UPS®, TNT®, USPS™, and others are integrated into the system for easy tracking of your courier shipments throughout the world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6)ParcelPerform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7)Easyship&lt;/strong&gt;&lt;br&gt;
Easyship is one of the most accurate Courier Tracking Software in today's market. Easyship integrates with all major shipping carriers including over 70 couriers to provide you with the most competitive rates possible. As well, Easyship Courier Tracking offers real-time shipment tracking so that customers have full transparency about where their shipments are at all times. What is more, they can easily track their shipment through our user-friendly website or app on their Android and Apple devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8)ShipStation&lt;/strong&gt;&lt;br&gt;
ShipStation is an easy-to-use shipping platform that consolidates all your packages into one place while allowing you to access dozens of carriers—all while getting the best rates around. Plus, it's orders of magnitude cheaper than other shippers. Most importantly, our integrations with all major eCommerce platforms like Shopify and BigCommerce make syncing your accounts a breeze. Once synced, you can effortlessly import tracking information automatically, so you never miss a beat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9)MetaPack&lt;/strong&gt;&lt;br&gt;
MetaPack is a UK-based Courier Tracking Software company. It helps in reducing the turnaround time and costs by providing end to end visibility of Courier deliveries, access to digital proof of delivery for online deliveries, generating intelligent listings that helps in meeting regulatory standards for transport documentation and managing mail flows through web based Courier tracking system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10)EasyPost&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Choose the Best ecommerce courier tracking software&lt;/strong&gt;&lt;br&gt;
Check the below points before selecting the ideal courier tracking software.&lt;/p&gt;

&lt;p&gt;1.Software Area of Operation&lt;br&gt;
2.Software Prices and Rates&lt;br&gt;
3.Software Implementation and Features&lt;br&gt;
4.Business Priorities&lt;br&gt;
5.Customer Support &amp;amp; Services of Software&lt;br&gt;
6.Shipping Rates&lt;br&gt;
7.Choice of Carriers&lt;br&gt;
8.Tech Capabilities&lt;br&gt;
9.Shipping Partners&lt;br&gt;
10.API Integration&lt;br&gt;
11.eCommerce Product Returns management&lt;br&gt;
12.Provision of Data Analytics&lt;br&gt;
13.Unified Tracking Platform&lt;br&gt;
14.Tie Up With More Carriers&lt;br&gt;
15.Greater Carrier Visibility&lt;br&gt;
16.Customer Experience&lt;br&gt;
17.Payment Option&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion paragraph:&lt;/strong&gt; Courier tracking software is a must-have for any company that relies on shipments in order to do business. With so many available options, it can often be difficult to determine which types of courier tracking tools are the best ones to use. To help you out, we’ve put together this list of 10 companies with some of the most popular and well-regarded courier tracking solutions currently available. These are all highly rated by their users and will allow your business to quickly track where your freight is at any given time without having to spend hours poring over different website screens or calling customer service lines. The shipping industry has changed drastically due to technology innovations like these services - what other changes have you seen?&lt;/p&gt;

</description>
      <category>couriertracking</category>
      <category>trackingsoftware</category>
    </item>
    <item>
      <title>Understanding the low-code vs no-code debate</title>
      <author>Minal Mehta</author>
      <pubDate>Fri, 10 Dec 2021 09:44:54 +0000</pubDate>
      <link>https://dev.to/tooljet/understanding-the-low-code-vs-no-code-debate-o07</link>
      <guid>https://dev.to/tooljet/understanding-the-low-code-vs-no-code-debate-o07</guid>
      <description>&lt;p&gt;Most of us, at times, are unable to understand or differentiate between low-code &amp;amp; no-code. At times some of the users describe them in a similar way. Does this matter? What are the real differences between them and how can they be used independently?&lt;/p&gt;

&lt;p&gt;Both the low-code &amp;amp; no-code principles of application development abstract away from ‘code’ to bring forth the advantages of ‘&lt;strong&gt;visual modelling&lt;/strong&gt;’. However, the difference remains fundamentally in the scale and type of application that needs to be built via applying one of the two approaches. Let's explore more as we advance further in this article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Low-code vs no-code: What are the similarities to begin with?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The low-code and no-code development platforms bring forth the methods of building software applications without coding or with less coding. So how do these principles work? These development principles take the visual approach to application development. Hence app development becomes accessible to a higher volume of individuals, especially tech-savvy natives working in the line of business.&lt;/p&gt;

&lt;p&gt;The low-code and no-code principles of development support the professional as well as the citizen developers alike. It is possible to develop applications with greater efficiency while adhering to these novel approaches of development. This can heighten productivity. This is pretty much where the similarities end!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Low-code &amp;amp; its use cases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Low-code platforms are sort of a ’&lt;strong&gt;middle ground&lt;/strong&gt;’ between the full-on manual coding and absolute no-coding. They are more malleable. The low-code platforms can be very visually driven coming with elements of ‘drag &amp;amp; drop’. They are quite open and extendable. They also have room for manual coding, giving developers the joy of both worlds! Here it is possible to increase the speed of development and there may not be any need to constantly replicate the basic code.&lt;/p&gt;

&lt;p&gt;Low-code development principles also permit for the scalable architecture, open API that can be reused &amp;amp; come with the flexibility of being ‘on-cloud’ or with onsite adaptability. The developers can additionally exercise control over the application quality, testing and performance tooling.&lt;/p&gt;

&lt;p&gt;Additionally, with low-code principles of developing, the potential for the developers to extend the capabilities of the platform with the application of their own code can be multiplied. They are at the same time empowered to modify or build complex and sophisticated applications that may otherwise need more manpower deployment or may need some specific skills.&lt;/p&gt;

&lt;p&gt;The low-code platforms are able to handle more user cases because of their generic purpose nature.&lt;/p&gt;

&lt;p&gt;Let us have a look at some of the pros of low–code platforms:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next-gen technologies with the applicability of innovative use cases&lt;/strong&gt;: A host of Low-Code platforms come with a comprehensive library of components that are built by the technology leaders. They also permit you to draw upon the third party smart services on offer in the cloud-like Machine Learning, AI, Blockchain, Facial &amp;amp; Voice Recognition services and the likes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Customer Experience Applications&lt;/strong&gt;: These are available for mobile, leveraging the previously – built interface templates that are designed in such a way to support the developers optimise the user-friendliness and uptake of any application. They also come to ensure consistency in corporate branding.&lt;/p&gt;

&lt;p&gt;The Legacy System Modernization comes along with the current architecture along with microservices. These support component-based development where they are able to use containers. These come with continuous deployment opportunities for the existing mission-critical applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No-code &amp;amp; its uses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No-code platforms or principles of development can be safely considered to be the simplest. These are visual-based, drag &amp;amp; drop platforms that allow us to function with basic applications. We may not be overhauling the legacy systems here as we did in the Low-Code Platforms. At the same time, we may not be able to scale it very well and may be limited in our approach towards the integration capabilities. This approach to development is best suited to teams that have specific needs that fall within a limited scope.&lt;/p&gt;

&lt;p&gt;The No-code Platforms come with simplicity of use  However this can also be one of its downfalls. With most of its framework being determined by the ones who developed it, the real ability to customize it boils down to low or no at all! This may possibly lead to loopholes for security and compliance-related issues. Also, the ability to work out the application into a more wide organizational architecture becomes limited. This principle of development may lack the oversight and the consideration that comes straight from a developer-driven application. The No-Code apps are also known to end up contributing to the presence of shadow IT.&lt;/p&gt;

&lt;p&gt;It may seem somewhat blurry that if these principles of development are limited in their capabilities, why have they at all been able to hang around for as long as they have done? We can answer by saying that this application is safe to use by people with no – coding knowledge or experience. Especially by the ones who can’t wait for an IT team to build something for them. No-code applications are also a great way for non-technical people to build prototypes for what they want before they bring them forth to their IT teams.&lt;/p&gt;

&lt;p&gt;At the first glance, the simplicity and ease along with the rigidity that comes with No-code development principles may work at a basic departmental level, however, scaling to the organizational level may pose certain challenges like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Architectural considerations&lt;/strong&gt;: There can be instances of monolith application architecture solely due to the inexperience of the developer with application architecture patterns. Most of the no-code platforms may require deployment to their affiliated public cloud and they may not come with the flexibility of deploying to a private cloud or onsite application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Low extensibility&lt;/strong&gt;:  the No-code platforms lean more towards the operational efficiency use cases. They do not have the bandwidth to focus on the User Experience or are not able to extend to the legacy systems We may not be able to create custom solutions for third–party or homegrown requirements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inefficient data governance&lt;/strong&gt;:  Because of the stand-alone nature of the apps built using the no-code, platform data governance is likely to be a primary challenge&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where does Tooljet stand in the no-code / low-code space?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We may very well use the Tooljet platform for no-code application development, where it really makes a mark in the low–code space. Tooljet allows rapid application development with pre-built components to suit the end-users. By minimizing the coding needs and taking away the grunt work, Tooljet is able to gain ground when it comes to keeping updated the ageing legacy systems and improving customer experiences brick by brick among its other benefits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ending Note&lt;/strong&gt;: With the ongoing debate when deciding upon which principles to route for, we may end by insisting that the no-code platforms are quite simplistic when it comes to supporting the complex use cases while the low-code principles come across as too complex for non-professional developers to use. To compound this challenge let us observe that while implementing a no-code principle to development, one may be seen as shadowing IT  to the larger IT space. Also, once your application grows beyond, what are you going to do? All the cost-saving and efficiency may go out of the window as your choices get limited. On the other hand, if we deploy the low-code principles to development it may expand your horizon and you may be able to add more customizations to your application. Larger more complex and sophisticated applications can be built with a low-code platform and this is not the case for the no-code principles.&lt;/p&gt;

&lt;p&gt;Looking for a low-code platform to build your next internal tool? We would love you to check out ToolJet on &lt;a href="https://github.com/ToolJet/ToolJet/"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>opensource</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Is Kubernetes a DIY platform?</title>
      <author>CloudNow Technologies</author>
      <pubDate>Fri, 10 Dec 2021 09:40:18 +0000</pubDate>
      <link>https://dev.to/cloudnowtech/is-kubernetes-a-diy-platform-239c</link>
      <guid>https://dev.to/cloudnowtech/is-kubernetes-a-diy-platform-239c</guid>
      <description>&lt;p&gt;The growth of Kubernetes has been phenomenal. It’s grown from an open-source project used and promoted by a few cloud-native developers to a popular choice for automating and scaling container deployments, fuelled in greater part by the shift of application workloads to containers.&lt;/p&gt;

&lt;p&gt;Kubernetes (also known as k8s or “kube”) is an open-source orchestration tool for containers and does not cost any money to download, set up, and run in-house. Almost tempting enough to want to set it up yourself, isn’t it? But doing it yourself – or DIY Kubernetes option – in reality, is not as simple a platform to use as you may think. Here we present two options – DIY Kubernetes and Managed Kubernetes – each with their advantages and challenges.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DIY Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A DIY approach to Kubernetes can be taken up  through a range of different distributions, including both lightweight distributions and distributions intended for full-scale production use. It can be deployed on-premises or on cloud-based infrastructure, where you would provision and manage the clusters yourself. If K8s is deployed on-prem it will be done as a “Minikube”, which is a utility used to run Kubernetes on your local machine.&lt;/p&gt;

&lt;p&gt;But because approaches to DIY Kubernetes vary, the amount of effort that deployment requires also varies. Though Kubernetes is an open-source platform, it is not very user-friendly. Also, finding reliable platform support is difficult. If you already know Kubernetes well and have experimented with smallish clusters running in local environments, you may have the expertise to pull off a DIY installation.&lt;/p&gt;

&lt;p&gt;But if you have a multi-cluster environment with dozens of servers or more DIY Kubernetes may not be practical. Kubernetes at an enterprise level can be complicated to deploy and that in turn may reduce productivity.&lt;/p&gt;

&lt;p&gt;However, if your requirement is only for a small number of clusters to be deployed, the cost-benefit trade-off is often worthwhile with a DIY K8s approach.&lt;br&gt;
Managed Kubernetes&lt;br&gt;
Managed K8s services - which refer to the management of the K8s platform and not the application or containers being developed and hosted - allow for containerized applications to be deployed and managed in a production-grade environment more easily.&lt;/p&gt;

&lt;p&gt;Managed Kubernetes is naturally more expensive but it is often worth it in the long run simply because most of it is automated. Also, there is the technical support that comes with more automation and support for hosting, maintenance, infrastructure configuration, and so on.&lt;/p&gt;

&lt;p&gt;While some cloud providers offer basic levels of monitoring, there are others that offer technical support services or custom infrastructure setup, automatic provisioning of clusters, and so on, so choose your managed Kubernetes service provider according to your needs.&lt;/p&gt;

&lt;p&gt;Security concerns too can be taken care of with managed Kubernetes and may not be possible with the DIY option. When creating clusters, enterprises need to consider aspects like resource groups, authentication and security-based policy controls, which can prove challenging if one lacks experience in setting up K8 or expertise in automating clusters or using various scripting languages like Terraform.&lt;/p&gt;

&lt;p&gt;So on the whole, a Managed K8s approach tends to be advantageous for more complex, enterprise-grade deployments.&lt;br&gt;
Is it worth doing it yourself? Ask yourself:&lt;br&gt;
Is your team experienced with K8s? It is not an easy service to work with for novices.&lt;/p&gt;

&lt;p&gt;Are you working on a lightweight or production-grade distribution?&lt;/p&gt;

&lt;p&gt;Do you need hand-holding? Do you prefer to be able to call someone for support or are you comfortable figuring out/looking up the answers for yourself?&lt;/p&gt;

&lt;p&gt;Kubernetes already includes an impressive set of features, including scalability, detached credential configuration, self-recovery, workload management and batch execution, and progressive application deployment, but they require significant manual configuration.&lt;/p&gt;

&lt;p&gt;Managed solutions take care of much of this configuration for you, or at least guide you through the decision-making process.&lt;/p&gt;

&lt;p&gt;There's a wide range of processes, tools, and value-adds that you can use while implementing managed Kubernetes services. Do consult CloudNow before getting started on your next containerized application development project.&lt;/p&gt;

&lt;p&gt;This blog originally published at &lt;a href="https://www.cloudnowtech.com/blog/"&gt;CloudNow Blog&lt;/a&gt;. Link to the &lt;a href="https://www.cloudnowtech.com/blog/is-kubernetes-a-diy-platform/"&gt;original blog&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Managed solutions take care of much of this configuration for you, or at least guide you through the decision-making process.
&lt;/li&gt;
&lt;li&gt;There's a wide range of processes, tools, and value-adds that you can use while implementing managed Kubernetes services. Do consult CloudNow before getting started on your next containerized application development project.
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>How else?</title>
      <author>melissa775</author>
      <pubDate>Fri, 10 Dec 2021 09:39:37 +0000</pubDate>
      <link>https://dev.to/melissa775/how-else-4996</link>
      <guid>https://dev.to/melissa775/how-else-4996</guid>
      <description>&lt;p&gt;Do you now something about web development &lt;a href="https://brights.io/web-development"&gt;https://brights.io/web-development&lt;/a&gt;  ? We are &lt;br&gt;
offers a full range of services for your company and you in particular. We provide our clients with all the space they need on the web: web domains, email domains, hosting and management, and much more that is related to software and programs.&lt;/p&gt;

&lt;p&gt;You will be able to manage your professional email and your employees' email, as well as transfer domains and allow unlimited traffic.&lt;br&gt;
Your whole company in one space with the highest quality on the market and the support of a large group of professionals.&lt;br&gt;
And it couldn't be otherwise. All this has been happening to us for 8 years. 8 years of vast experience, a huge mass of regular and satisfied customers. Isn't that the main thing?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Append a file into a zip file in Python</title>
      <author>Michael Salaverry</author>
      <pubDate>Fri, 10 Dec 2021 09:27:14 +0000</pubDate>
      <link>https://dev.to/barakplasma/append-a-file-into-a-zip-file-in-python-3e0c</link>
      <guid>https://dev.to/barakplasma/append-a-file-into-a-zip-file-in-python-3e0c</guid>
      <description>&lt;p&gt;I was trying to find a way to append a file into a zip file in python, but I could not find an easy way to do it.&lt;/p&gt;

&lt;p&gt;When using zipfile built into python, using the 'a' append method doesn't overwrite files the way I expected it to. So this python module will overwrite the existing file when appending a file (which to me is the obvious solution).&lt;/p&gt;

&lt;p&gt;There's no lack of StackOverflow posts and answers, but all of those were too specific to the specific post/issue.&lt;/p&gt;

&lt;p&gt;So I decided to scratch my own itch, and make a library to handle it for myself and others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pypi.org/project/appendzip/0.0.4/"&gt;https://pypi.org/project/appendzip/0.0.4/&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/barakplasma"&gt;
        barakplasma
      &lt;/a&gt; / &lt;a href="https://github.com/barakplasma/append-zip"&gt;
        append-zip
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      append a file into an existing zip file, overwriting the existing file of the same name if needed
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
append-zip&lt;/h1&gt;
&lt;p&gt;Appends a file to a zip file, overwriting the existing file there if necessary&lt;/p&gt;
&lt;h2&gt;
Performance&lt;/h2&gt;
&lt;p&gt;Not efficient; extracts all the files in the zip, copies over the new file, and compresses a brand new zip replacing the original one. You will need enough disk space to duplicate the zip file.&lt;/p&gt;
&lt;h2&gt;
Caveats&lt;/h2&gt;
&lt;p&gt;for some reason, windows has a different file length after unzipping (by 10-20 bytes). So beware how this works on windows&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/barakplasma/append-zip"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;MIT licensed&lt;/p&gt;

&lt;p&gt;example of how to use it:&lt;/p&gt;

&lt;p&gt;install (on Mac)&lt;br&gt;
&lt;code&gt;$ python3 -m pip install appendzip&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;appendzip.appendzip&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;appendzip&lt;/span&gt;
&lt;span class="c1"&gt;# before appendzip calendar.txt in the zip archive test.zip contains 2021-01-02
# before appendzip calendar.txt outside the zip contains 2022-02-03
&lt;/span&gt;&lt;span class="n"&gt;appendzip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'test.zip'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'calendar.txt'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s"&gt;'calendar.txt'&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# after appendzip calendar.txt inside the zip contains 2022-02-03
# after, there is still only one file in the zip archive test.zip
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>showdev</category>
    </item>
  </channel>
</rss>
