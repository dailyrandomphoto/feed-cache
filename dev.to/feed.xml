<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Build a Sign Up Form with Floating Labels and Transitions Using Plain HTML and CSS</title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 14 Sep 2021 09:43:06 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/how-to-build-a-sign-up-form-with-floating-labels-and-transitions-using-plain-html-and-css-48k7</link>
      <guid>https://dev.to/ubahthebuilder/how-to-build-a-sign-up-form-with-floating-labels-and-transitions-using-plain-html-and-css-48k7</guid>
      <description>&lt;p&gt;In this tutorial we are going to build a modern sign up form with floating labels and smooth transitions using plain HTML and CSS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xvp4uj0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631609464381/HJWAfjRaO.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xvp4uj0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631609464381/HJWAfjRaO.gif" alt="complete view"&gt;&lt;/a&gt; - Complete view&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see in the above image, when an input within the form gains focus, its label floats to the top and a semi-thick border appears around the input. If text gets typed into the input and the input loses focus, the label remains on top. Otherwise, the label drops back down into the input.&lt;/p&gt;

&lt;p&gt;Many modern forms have some sort of transition applied to them. Not only do these transitions make the form more dynamic, but they also help guide the user on the state of the input (that is whether it has focus or not) and what kind of data each input is expected to handle.&lt;/p&gt;

&lt;p&gt;In this tutorial, you will learn about some cool CSS features like transitions, selectors like :placeholder_focus ,and many other CSS  properties you should know.&lt;/p&gt;

&lt;p&gt;Let's dive in!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-html-markup"&gt;
  &lt;/a&gt;
  The HTML Markup
&lt;/h3&gt;

&lt;p&gt;We are going to define the markup for our sign up form. But before that, we have to set up our HTML boilerplate and correctly link to our stylesheet from the head tag. You can easily do this with the Emmet plugin by typing ! then tab in your IDE/Code editor.&lt;/p&gt;

&lt;p&gt;You can also copy this boilerplate and paste it into your index.html file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"ie=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"styles.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within the body tag, we define the markup for our sign up form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"signupFrm"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign up&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inputContainer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inputContainer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Username&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inputContainer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inputContainer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Confirm Password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"submitBtn"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Sign up"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a container div to hold the form element. Each of the form's inputs, along with its text label, are wrapped inside a container div. The labels serve the purpose of informing the user what information each input should take in.&lt;/p&gt;

&lt;p&gt;And our page will look like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--szUkeno_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631610026061/Gl10AzF-A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--szUkeno_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631610026061/Gl10AzF-A.png" alt="noCSS.png"&gt;&lt;/a&gt; - No CSS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may notice that the placeholder value we have assigned to all inputs is "a". This will be helpful later in the tutorial when we start to apply some dynamic logic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-style-the-form"&gt;
  &lt;/a&gt;
  How to Style the Form
&lt;/h3&gt;

&lt;p&gt;Our form is pretty basic, so let's add some styling to make it look nicer.&lt;/p&gt;

&lt;p&gt;First, we need to perform some resets and set the background color:&lt;/p&gt;

&lt;p&gt;@import url('&lt;a href="https://fonts.googleapis.com/css2?family=Lato&amp;amp;display=swap'"&gt;https://fonts.googleapis.com/css2?family=Lato&amp;amp;display=swap'&lt;/a&gt;);&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Get rid of all default margins/paddings. Set typeface */&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"lato"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what our page will look like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EOKxRV26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631610149691/6G8i29XCH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EOKxRV26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631610149691/6G8i29XCH.png" alt="reset-lato.png"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After stying the &lt;code&gt;body&lt;/code&gt;, we'll set the display mode of the content to flex. This makes sure that all the direct children inside a container element div are displayed side-by-side by default.&lt;/p&gt;

&lt;p&gt;In our case, there's only one child inside the container signupFrm. The only reason we use display: flex here is to use the align-items and justify-content properties to help center everything vertically and horizontally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Puts the form in the center both horizontally and vertically. Sets its height to 100% of the viewport's height */&lt;/span&gt;

&lt;span class="nc"&gt;.signupFrm&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;vh&lt;/code&gt; property, which stands for viewport height, ensures that the form takes up 100% of the height of the browser window, regardless of the screen size or orientation. That will make it more responsive.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--efyiyYrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631610302222/lIu4yghUv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--efyiyYrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631610302222/lIu4yghUv.png" alt="middle.png"&gt;&lt;/a&gt; - Centralize&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we'll style the form a bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;105&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first style targeted on the form, we set the background to white, we give it a width of 400px, we add some curve around the form, and finally we set a shadow around the box. We also set the font size of the title and some space below the element.&lt;/p&gt;

&lt;p&gt;And the result should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ANwvifh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631610418351/7uMAETpAs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ANwvifh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631610418351/7uMAETpAs.png" alt="with card.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we'll style the div which contains the form inputs and form labels.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.inputContainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;17px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We set the position property of our input's container div to relative. This will enable us position the children input and label however we want. We also set the width to take up 90 percent of the entire container width.&lt;/p&gt;

&lt;p&gt;This is how our form will be rendered in the web browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AkVGw1fo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631610832780/Z2i9lzd-z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkVGw1fo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631610832780/Z2i9lzd-z.png" alt="margin-added.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to style our inputs.&lt;/p&gt;

&lt;p&gt;We first set the &lt;code&gt;position&lt;/code&gt; to &lt;code&gt;absolute&lt;/code&gt;. This will allow us to move each of them to the top-left part of the relatively positioned container parent.&lt;/p&gt;

&lt;p&gt;We also need to hide our arbitrary placeholder text (the "a" characters mentioned earlier), so they don't overlap with the text within each label. The placeholder text will be needed when we implement the transition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Style the inputs */&lt;/span&gt;

&lt;span class="nc"&gt;.input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#DADCE0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Hide the placeholder texts (a) */&lt;/span&gt;

&lt;span class="nd"&gt;::placeholder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the styles applied, our form should now look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2l8S1S4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631611179475/3NjbC5Asf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2l8S1S4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631611179475/3NjbC5Asf.png" alt="absolute.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we style the text labels:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Styling text labels */&lt;/span&gt;

&lt;span class="nc"&gt;.label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#DADCE0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The label shows text that tells which information is expected inside the input. We start by setting its position to absolute. And by setting the top and left properties, we can move the text upwards relative to its container.&lt;/p&gt;

&lt;p&gt;Next we set a transition of 0.5 seconds. This is how long it will take the text to move up when hovered on.&lt;/p&gt;

&lt;p&gt;Finally, we also set a z-index of 0. The low z-index ensures that the label is positioned behind other "higher-placed" elements if they ever overlap.&lt;/p&gt;

&lt;p&gt;Here is what gets rendered on the page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oTWv0-om--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631611237749/iuz822e-W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oTWv0-om--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631611237749/iuz822e-W.png" alt="labels.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are going to focus on the buttons.&lt;/p&gt;

&lt;p&gt;We'll add some smooth animations with the CSS transform property, which moves the button up a little and changes the color once it's hovered over:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.submitBtn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.submitBtn&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#9867C5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-2px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the result:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t5-rE0j0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631609292500/eAIu6uGOw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t5-rE0j0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631609292500/eAIu6uGOw.gif" alt="submit button changes color"&gt;&lt;/a&gt; - Button scales and changes color&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we need to perform some state changes.&lt;/p&gt;

&lt;p&gt;When an input gains focus, we want to position its label beyond the top of the container (-7px), 3 pixels from the left, reduce the font-size to 14, and change the color to purple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.input&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-0Yx90q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631609226767/w6tsCD2e6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-0Yx90q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631609226767/w6tsCD2e6.gif" alt="label floats to top but no border"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also need to add a purple border around the input when it gains focus.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.input&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we have to do something very important.&lt;/p&gt;

&lt;p&gt;Currently, when you type some text into the form and move focus (your mouse) away from it, the label text and the text within the input collide:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WAQTU6Qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631609403640/o-VPrYbz_.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WAQTU6Qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631609403640/o-VPrYbz_.gif" alt="clashes with another"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the following CSS, we'll specify that, when we type a value into the input and change focus, we want the label to remain floating. Also, well specify that we want the label text to lose its purple color:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.input&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;:placeholder-shown&lt;/span&gt;&lt;span class="o"&gt;)+&lt;/span&gt; &lt;span class="nc"&gt;.label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with that, here is the final look of our sign up page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xvp4uj0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631609464381/HJWAfjRaO.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xvp4uj0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631609464381/HJWAfjRaO.gif" alt="complete view"&gt;&lt;/a&gt; - Complete view&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;I hope you learned some new things about CSS from this tutorial. CSS transitions bring life to your website, and in this guide we have made our form much more lively with them.&lt;/p&gt;

&lt;p&gt;You can get all the code from this tutorial from this  &lt;a href="https://github.com/KingsleyUbah/Sign-Up-CSS"&gt;GitHub repository&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I recently created a newsletter where I provide practical tips and resources on learning web development. Subscribe to my  &lt;a href="https://www.getrevue.co/profile/ubahthebuilder"&gt;newsletter&lt;/a&gt;  and get tips right in your inbox.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for following along.&lt;/p&gt;

&lt;p&gt;P/S: If you are learning JavaScript, I created an eBook which teaches 50 topics in JavaScript with hand-drawn digital notes.  &lt;a href="https://gum.co/js-50"&gt;Check it out here&lt;/a&gt; .&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 10 Must Know JavaScript Functions!
</title>
      <author>TheDailyTechTalk</author>
      <pubDate>Tue, 14 Sep 2021 09:15:18 +0000</pubDate>
      <link>https://dev.to/thedailytechtalk/top-10-must-know-javascript-functions-1dm9</link>
      <guid>https://dev.to/thedailytechtalk/top-10-must-know-javascript-functions-1dm9</guid>
      <description>&lt;p&gt;&lt;em&gt;I recently started a new blog &lt;a href="https://thedailytechtalk.com"&gt;TheDailyTechTalk&lt;/a&gt; where I create free content. If you liked this post and would like to read more posts about JavaScript please check it out 🎉🎉&lt;br&gt;
🥰&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me, please follow me on &lt;a href="https://twitter.com/TheDailyTechTa1"&gt;Twitter&lt;/a&gt; to learn more about programming and similar topics ❤️❤️&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#top-10-mustknow-javascript-functions"&gt;
  &lt;/a&gt;
  Top 10 Must-Know JavaScript Functions
&lt;/h1&gt;

&lt;p&gt;Please check out full &lt;a href="https://www.thedailytechtalk.com/top-10-must-know-javascript-functions"&gt;article here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-filter"&gt;
  &lt;/a&gt;
  1 filter()
&lt;/h2&gt;

&lt;p&gt;This function filters an array based on the condition you provide and it returns a new array which contains items which satisfy those conditions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const temperatures = [10, 2, 30.5, 23, 41, 11.5, 3];

const coldDays = temperatures.filter(dayTemperature =&amp;gt; {
    return dayTemperature &amp;lt; 20;
});

console.log("Total cold days in week were: " + coldDays.length); // 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-map"&gt;
  &lt;/a&gt;
  2 map()
&lt;/h2&gt;

&lt;p&gt;Function &lt;code&gt;map()&lt;/code&gt; is a very simple, it loops over an array and convert each item into something else.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const readings = [10, 15, 22.5, 11, 21, 6.5, 93];
const correctedReadings = readings.map(reading =&amp;gt; reading + 1.5);
console.log(correctedReadings); // gives [11.5, 16.5, 24, 12.5, 22.5, 8, 94.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-some"&gt;
  &lt;/a&gt;
  3 some()
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;some()&lt;/code&gt; is very similar to &lt;code&gt;filter()&lt;/code&gt; , but &lt;code&gt;some()&lt;/code&gt; returns boolean instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const animals = [
    {
        name: 'Dog',
        age: 2
    },

    {
        name: 'Cat',
        age: 8
    },

     {
        name: 'Sloth',
        age: 6
    },
];

if(animals.some(animal =&amp;gt; {
    return animal.age &amp;gt; 4
})) {
    console.log("Found some animals!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-every"&gt;
  &lt;/a&gt;
  4 every()
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;every()&lt;/code&gt;  is also very similar to &lt;code&gt;some()&lt;/code&gt; , but &lt;code&gt;every()&lt;/code&gt; true only if every single element in array satisfy our condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const isBelowThreshold = (currentValue) =&amp;gt; currentValue &amp;lt; 40;

const array1 = [1, 30, 39, 29, 10, 13];

console.log(array1.every(isBelowThreshold));   // true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-shift"&gt;
  &lt;/a&gt;
  5 shift()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;shift()&lt;/code&gt; method removes the first element from an array and returns removed element. This method changes the length of the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const items = ['meat', 'carrot', 'ham', 'bread', 'fish'];
items.shift()
console.log(items); // ['carrot', 'ham', 'bread', 'fish']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-unshift"&gt;
  &lt;/a&gt;
  6 unshift()
&lt;/h2&gt;

&lt;p&gt;Just like  &lt;code&gt;shift()&lt;/code&gt; method removes the first element from an array &lt;code&gt;unshift()&lt;/code&gt; adds it. This method changes the length of the array and returns the new length of the array as result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const items = ['milk', 'fish'];
items.unshift('cookie')
console.log(items); // ['cookie', 'milk', 'fish']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-slice"&gt;
  &lt;/a&gt;
  7 slice()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;slice()&lt;/code&gt; method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let message = "The quick brown fox jumps over the lazy dog";
let startIndex = message.indexOf('brown');
let endIndex = message.indexOf('jumps');
let newMessage = message.slice(startIndex, endIndex);
console.log(newMessage); // "brown fox "
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-splice"&gt;
  &lt;/a&gt;
  8 splice()
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;splice()&lt;/code&gt; below start at index 2 (the third place, count starts from 0!! ) of the array, and remove one item.&lt;br&gt;
In our array that would mean that "rabbit" got removed. &lt;code&gt;splice()&lt;/code&gt; will return new array as result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const animals = ['dog', 'cat', 'rabbit', 'shark', 'sloth'];
animals.splice(2, 1);
console.log(animals); // ["dog", "cat", "shark", "sloth"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-includes"&gt;
  &lt;/a&gt;
  9 includes()
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;includes()&lt;/code&gt; will check every item in the array, and check if any of them includes our condition. It will return boolean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array1 = [1, 2, 3];

console.log(array1.includes(2));
// expected output: true

const pets = ['cat', 'dog', 'bat'];

console.log(pets.includes('cat'));  //  true

console.log(pets.includes('at'));  //  false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-reverse"&gt;
  &lt;/a&gt;
  10 reverse()
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;reverse()&lt;/code&gt; method reverses an array. Be careful since &lt;code&gt;reverse()&lt;/code&gt; is destructive which means it changes the original array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array1 = ['one', 'two', 'three', 'four'];
console.log(array1);  //  ["one", "two", "three", "four"]

const reversed = array1.reverse();
console.log(reversed);  //  ["four", "three", "two", "one"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;I recently started a new blog &lt;a href="https://thedailytechtalk.com"&gt;TheDailyTechTalk&lt;/a&gt; where I create free content. If you liked this post and would like to read more posts about JavaScript please check it out 🎉🎉&lt;br&gt;
🥰&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me, please follow me on &lt;a href="https://twitter.com/TheDailyTechTa1"&gt;Twitter&lt;/a&gt; to learn more about programming and similar topics ❤️❤️&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>Exploring JavaScript console object and logging! </title>
      <author>TheDailyTechTalk</author>
      <pubDate>Tue, 14 Sep 2021 09:12:27 +0000</pubDate>
      <link>https://dev.to/thedailytechtalk/exploring-javascript-console-object-and-logging-5079</link>
      <guid>https://dev.to/thedailytechtalk/exploring-javascript-console-object-and-logging-5079</guid>
      <description>&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me, please follow me on &lt;a href="https://twitter.com/TheDailyTechTa1"&gt;Twitter&lt;/a&gt; to learn more about programming and similar topics ❤️❤️&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-console"&gt;
  &lt;/a&gt;
  JavaScript Console
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The console object provides access to the browser's debugging console (e.g. the Web console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most developers usually use &lt;code&gt;console.log()&lt;/code&gt; to debug JavaScript code, but &lt;code&gt;console&lt;/code&gt; provides us with such a powerful set of features it would be shame not to use them, or at least know what they do.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;console.log()&lt;/code&gt; For general output of logging information.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;console.info()&lt;/code&gt; Informative logging of information.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;console.warn()&lt;/code&gt; Outputs a warning message.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;console.error()&lt;/code&gt; Outputs an error message to the Web console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using other logging besides &lt;code&gt;console.log()&lt;/code&gt; will provide you with more informative and clearer logs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d1haIhfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rh74jy8pa4thcj7duem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d1haIhfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rh74jy8pa4thcj7duem.png" alt="console logging example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-by-exploring-console-object"&gt;
  &lt;/a&gt;
  Lets start by exploring console object
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Umad8Mcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kwlj6wc7wgj0e8q7gqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Umad8Mcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kwlj6wc7wgj0e8q7gqa.png" alt="console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see Console object has plenty of methods. Lets explore some of more useful ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoleclear"&gt;
  &lt;/a&gt;
  console.clear()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;console.clear()&lt;/code&gt; clear the console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoledir"&gt;
  &lt;/a&gt;
  console.dir()
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.log()&lt;/code&gt; prints the object in its string representation while &lt;code&gt;console.dir()&lt;/code&gt; recognizes the object as an object and prints it’s properties in the form of a clean expandable list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;duck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vAS9R3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0uarwub9qbw15xjf90r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vAS9R3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0uarwub9qbw15xjf90r.PNG" alt="console.dir()"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoletable"&gt;
  &lt;/a&gt;
  console.table()
&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;console.table()&lt;/code&gt; we can create beautiful tables. This is probably my favourite &lt;code&gt;console&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zZoO7dI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1eka7eaofk3p3twymy0g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zZoO7dI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1eka7eaofk3p3twymy0g.PNG" alt="console.table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoletime-consoletimelog-and-consoletimeend"&gt;
  &lt;/a&gt;
  console.time(), console.timeLog() and console.timeEnd()
&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;console.time()&lt;/code&gt; to start a timer.&lt;br&gt;
Use &lt;code&gt;console.timeLog()&lt;/code&gt; to print time elapsed since the timer started.&lt;br&gt;
Use &lt;code&gt;console.timeEnd()&lt;/code&gt; to print the total amount of time since &lt;code&gt;console.time()&lt;/code&gt; started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtzQJKQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01eoysbgw6q8uw7r7025.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtzQJKQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01eoysbgw6q8uw7r7025.PNG" alt="console.table()"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#consolegroup-and-consolegroupend"&gt;
  &lt;/a&gt;
  console.group() and console.groupEnd()
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The console.group() method creates a new inline group in the Web console log. This indents following console messages by an additional level, until console.groupEnd() is called.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_xctQCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvyy14yey3zykvxy37rm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_xctQCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvyy14yey3zykvxy37rm.PNG" alt="group"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#console-logging-with-css"&gt;
  &lt;/a&gt;
  console logging with CSS
&lt;/h2&gt;

&lt;p&gt;This works with most console method such as &lt;code&gt;.log()&lt;/code&gt;, &lt;code&gt;.warn()&lt;/code&gt;, &lt;code&gt;.error()&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Please note that we have to use '%c' for css to work!&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cTheDailyTechTalk!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:red;font-family:system-ui;font-size:4rem;-webkit-text-stroke: 1px black;font-weight:bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0AZfb8VJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxl8cpeg8znxtypzpubb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0AZfb8VJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxl8cpeg8znxtypzpubb.PNG" alt="group"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I recently started a new blog &lt;a href="https://thedailytechtalk.com"&gt;TheDailyTechTalk&lt;/a&gt; where I create free content. If you liked this post and would like to read more posts about javascript please check it out 🎉🎉&lt;br&gt;
🥰&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Array methods that you should know</title>
      <author>Abdullah Furkan Özbek</author>
      <pubDate>Tue, 14 Sep 2021 08:02:16 +0000</pubDate>
      <link>https://dev.to/afozbek/array-methods-that-you-should-know-j0m</link>
      <guid>https://dev.to/afozbek/array-methods-that-you-should-know-j0m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-findindex"&gt;
  &lt;/a&gt;
  1- findIndex
&lt;/h2&gt;

&lt;p&gt;The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLargeNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLargeNumber&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;find() method, which returns the value of an array element, instead of its index.&lt;/li&gt;
&lt;li&gt;Returns The index of the first element in the array that passes the test. Otherwise, -1.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// EXAMPLE 1&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// -1, not found&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 2 (array[2] is 7)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// EXAMPLE 2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cantaloupe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blueberries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grapefruit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blueberries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// blueberries&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-includes"&gt;
  &lt;/a&gt;
  2- includes
&lt;/h2&gt;

&lt;p&gt;The includes() method determines whether an array includes a certain value among its entries, returning true or false as appropriate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;at&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When comparing strings and characters, includes() is case-sensitive.&lt;/li&gt;
&lt;li&gt;Returns: A Boolean which is true if the value searchElement is found within the array (or the part of the array indicated by the index fromIndex, if specified).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-isarray"&gt;
  &lt;/a&gt;
  3- isArray
&lt;/h2&gt;

&lt;p&gt;The Array.isArray() method determines whether the passed value is an Array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foobar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Returns true if the value is an Array; otherwise, false.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-some"&gt;
  &lt;/a&gt;
  4- Some
&lt;/h2&gt;

&lt;p&gt;The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// checks whether an element is even&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Returns true if the callback function returns a truthy value for at least one element in the array. Otherwise, false.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;MDN Docs | Array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>3 years of blogging - Here's how it all started!</title>
      <author>Gourav Khunger</author>
      <pubDate>Tue, 14 Sep 2021 07:56:42 +0000</pubDate>
      <link>https://dev.to/gouravkhunger/3-years-of-blogging-here-s-how-it-all-started-jcd</link>
      <guid>https://dev.to/gouravkhunger/3-years-of-blogging-here-s-how-it-all-started-jcd</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://genicsblog.com/3-years-of-blogging"&gt;Read this article on my blog&lt;/a&gt; for a better experience!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello there!&lt;/p&gt;

&lt;p&gt;I am really excited to share my journey in technical writing and how I got into it! First, I am really thankful to &lt;a href="https://hashnode.com"&gt;hashnode&lt;/a&gt; for providing us with an amazing &lt;a href="https://hashnode.com/bootcamp"&gt;bootcamp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yesterday was the first session of the Bootcamp hosted by &lt;a href="https://hashnode.com/@tanoaksam"&gt;Sam Sycamore&lt;/a&gt;, where &lt;a href="https://hashnode.com/@quincy"&gt;Quincy Larson&lt;/a&gt; and &lt;a href="https://hashnode.com/@didicodes"&gt;Edidiong Asikpo&lt;/a&gt; shared amazing tips on technical writing which really helped a lot!&lt;/p&gt;

&lt;p&gt;Here in this article, I am going to share my background in technical writing - from where it started where it is heading towards and what is my vision. I would also include some tips at the end for you which I learned by hit and trial, the hard way 😂.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flashback-2018"&gt;
  &lt;/a&gt;
  Flashback 2018
&lt;/h2&gt;

&lt;p&gt;I was in 8th grade back then, and I was trying to learn android app development from an amazing book by J. F. Dimarzio titled "&lt;a href="https://amzn.to/3A93YMM"&gt;Beginning Android Programming with Android Studio&lt;/a&gt;".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3A93YMM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_HdviZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631599770243/LwI6JWpNE.jpeg" alt="Beginning Android Development with Android Studio Book"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had also learned basic web dev skills like HTML and CSS. Javascript, or broadly, web dev didn't appeal to me that much so I went to learn native app development. I didn't know about frameworks like Vue or React back then, so that was it.&lt;/p&gt;

&lt;p&gt;At that time, I found out various resources and learned a lot of things from other's blogs, but sometimes, though I could understand the concepts, it just happened that the article wasn't that well written or it was hard to understand all by reading, and some struggle was needed. In short, it wasn't that beginner-friendly.&lt;/p&gt;

&lt;p&gt;I would sometimes also want to document things I learn because teaching someone else makes your own concepts stronger, and that is more powerful than just reading and practicing.&lt;/p&gt;

&lt;p&gt;The above things were accompanied by my thoughts of having my own place on the internet where I could share things I love about, and have the world read them. And that's how I started with blogging.&lt;/p&gt;

&lt;p&gt;At first, I came to know about blogger- Google's service that allows you to make minimal blogs. It was actually a good start for beginners who wished to make a simple blog. &lt;em&gt;But&lt;/em&gt;, it turned out it was not a good fit to make a developer blog.&lt;/p&gt;

&lt;p&gt;From there, I turned to many platforms, from blogger to WordPress, from WordPress to medium and dev community, but none could give the freedom of owning your own content- and having all the SEO juice to your own domain. That's where hashnode came in and I quickly migrated and use it as my daily driver for blogging!&lt;/p&gt;




&lt;p&gt;If you wish to read more on my story of switching between different platforms and choosing hashnode at the end, do read this article: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://genicsblog.com/introductory-first-post"&gt;https://genicsblog.com/introductory-first-post&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;And yeah, it has been 3 years since I started blogging and I have learned a lot through the way! From making an article enjoyable for the readers to improving my English- and even making good friends in the community. I also feel blessed to have the opportunity to help others through my articles!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-motivation"&gt;
  &lt;/a&gt;
  My motivation
&lt;/h2&gt;

&lt;p&gt;Everyone needs some motivation to keep doing a thing, and if they love what they do, the motivation manifests from the passion for the work itself!&lt;/p&gt;

&lt;p&gt;It's similar in my case. I really enjoy programming and I can sit hours coding an app. I really love how what we code actually works in real life- designing the UI and embracing it.&lt;/p&gt;

&lt;p&gt;And this passion for programming motivates me to write about it on this blog. The comments and feedback from the community really help to keep up the spirit.&lt;/p&gt;

&lt;p&gt;Sometimes it's hard to keep writing because there are other things to consider, like schooling and studies, but I do write when I am bored from other work because it gives refreshment from the usual routine!&lt;/p&gt;

&lt;p&gt;There are other ways I keep myself motivated- by challenging myself for each article I write, aiming for at least x views per post, and then sharing it to different platforms, it just feels good even if I get 100 views on an article and I feel it was worth my time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-goals"&gt;
  &lt;/a&gt;
  My goals
&lt;/h2&gt;

&lt;p&gt;As far as this blog is concerned, I wish to take it up to 10k views a month, which is 10x to the current scenario. For that, I spend time on on-site and off-site SEO and my small efforts have started to make a difference.&lt;/p&gt;

&lt;p&gt;Here's an image from the Google search console about this blog's analytics for the past one and a half years.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8-fAD4gx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631601870247/zyuBYbzn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8-fAD4gx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631601870247/zyuBYbzn7.png" alt="Genics Blog Analytics From Google Search Console Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There used to be good traffic earlier because I wrote consistently when I was on WordPress, but then I had left blogging for some months, mostly because studies became dominant.&lt;/p&gt;

&lt;p&gt;But then I started again on hashnode, and I was happy to regain the impressions I generally used to get, all because of hashnode. &lt;/p&gt;

&lt;p&gt;Hashnode is really awesome platform because it allows you to post your content on your blog, but at the same time they circulate the article on their platform, so you'll always have a base audience ready! And since the content remains on your domain, you get all the SEO benefits :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hashnode.com/@gouravkhunger/joinme"&gt;Join hashnode now&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Also, on a side note, I am looking forward to learning some new technologies and write about them, so follow me on hashnode to stay updated with what I post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-tips-for-new-writers"&gt;
  &lt;/a&gt;
  Some tips for new writers
&lt;/h2&gt;

&lt;p&gt;Now is the time to share some things I learned over time!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-fear-what-others-will-think-about-your-article"&gt;
  &lt;/a&gt;
  Don't fear what others will think about your article
&lt;/h3&gt;

&lt;p&gt;Many people face this! Even I used to be conscious about each word I wrote when I was new to blogging. But with different experiments, I found out the more informal you write a tutorial or any kind of article, the better it is perceived by people.&lt;/p&gt;

&lt;p&gt;It is hard to keep up with formal language- otherwise, what's the need for blogs, documentations would have been enough for the people to understand things 😂.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avoid-slangs"&gt;
  &lt;/a&gt;
  Avoid slangs
&lt;/h3&gt;

&lt;p&gt;The point just discussed doesn't mean you should be using different internet slangs to make your article informal. That can actually put a bad impact.&lt;/p&gt;

&lt;p&gt;What I do is I speak what I am writing, just as if you are conversing with someone and explaining the tech you are writing about. That helps to write articles that are easy to understand and at the same time write articles that don't bore the reader.&lt;/p&gt;

&lt;p&gt;Here's another thing I usually do, and it was also shared by @&lt;a href="https://dev.to@didicodes"&gt;Edidiong Asikpo&lt;/a&gt; during the Bootcamp session yesterday:&lt;/p&gt;

&lt;p&gt;To improve your writing skills, you can try to write an article and read it as if you don't even know who has written it, that helps to point out parts of the article that are hard to understand and also fix any grammatical issues, speaking of which, I recommend you to use &lt;a href="https://grammarly.com"&gt;grammarly&lt;/a&gt; 😀&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-ok-to-make-mistakes"&gt;
  &lt;/a&gt;
  It's ok to make mistakes
&lt;/h3&gt;

&lt;p&gt;Mistakes are how you learn things. Nobody is born perfect =)&lt;/p&gt;

&lt;p&gt;It's ok if you can't write good words, or if your English fluency is a hurdle, just start going with the flow, and over time, you'll become better at the skill.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#focus-on-a-niche-that-you-are-passionate-about"&gt;
  &lt;/a&gt;
  Focus on a niche that you are passionate about
&lt;/h3&gt;

&lt;p&gt;It's hard to come up with article ideas if you start writing about tech that you don't enjoy. Find out what you like because that can help you stay consistent. Also, you yourself will enjoy the researching process when you wish to explore new things about the tech that you didn't know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-the-interaction-going"&gt;
  &lt;/a&gt;
  Keep the interaction going
&lt;/h3&gt;

&lt;p&gt;You should try to reply to each comment your post gets, because that invokes interaction and builds trust around your blog, and if your blog is an active community- people are likely to come back to read your articles again!&lt;/p&gt;

&lt;p&gt;You can make an email newsletter too- that helps to regain users. You know what? Hashnode blogs get an email newsletter feature completely free! What are you waiting for? &lt;a href="https://hashnode.com/@gouravkhunger/joinme"&gt;Join hashnode&lt;/a&gt; and start blogging in minutes!&lt;/p&gt;

&lt;p&gt;Here's one of my in-depth articles about some of the mistakes I had been making in blogging, which you should stop making right away!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://genicsblog.com/mistakes-that-beginners-do-in-blogging-dont-make-these-yourself"&gt;https://genicsblog.com/mistakes-that-beginners-do-in-blogging-dont-make-these-yourself&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed the article and took away something from it - thanks for reading so far! I would appreciate it if you could take 5 more minutes to write down your opinions and feedback :)&lt;/p&gt;

</description>
      <category>blogging</category>
      <category>tips</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Deploy Django Site on Qovery for free</title>
      <author>Rachit Khurana</author>
      <pubDate>Tue, 14 Sep 2021 07:29:48 +0000</pubDate>
      <link>https://dev.to/dilutewater/deploy-django-site-on-qovery-for-free-2gfk</link>
      <guid>https://dev.to/dilutewater/deploy-django-site-on-qovery-for-free-2gfk</guid>
      <description>&lt;p&gt;Coding a Django website is pretty simple, but deploying it online could be a tedious &amp;amp; a complicated task for beginners(including me). Hence here is a complete guide on how to host your Django site for free on &lt;a href="https://www.qovery.com/"&gt;Qovery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is basically a guide on how to modify you Django application to make it work on Qovery. For guide on how to make the application &amp;amp; deploy on Qovery check out this guide :&lt;br&gt;
&lt;a href="https://hub.qovery.com/guides/tutorial/deploy-django-with-postgresql/"&gt;https://hub.qovery.com/guides/tutorial/deploy-django-with-postgresql/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I'm assuming you have already made your Django project and made a github/gitlab repository &amp;amp; it is working perfectly on your local machine. I'm also assuming that you have a Qovery account &amp;amp; have created an project as well as an environment for the same. (From github/gitlab repository)&lt;/p&gt;

&lt;p&gt;I will be taking my TriviaQuiz Django Site for reference.&lt;/p&gt;

&lt;p&gt;Here is my initial repository that was working perfectly on my local machine:&lt;br&gt;
&lt;a href="https://gitlab.com/rachitkhurana40/trivia-quiz-initial"&gt;https://gitlab.com/rachitkhurana40/trivia-quiz-initial&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-the-webserver"&gt;
  &lt;/a&gt;
  Setting up the Webserver
&lt;/h2&gt;

&lt;p&gt;Qovery basically hosts your application through a docker container and need a webserver to run on. So we can use &lt;a href="https://pypi.org/project/gunicorn/"&gt;gunicorn&lt;/a&gt;. Its a pretty simple python webserver. &lt;br&gt;
You just need to install it using pip &amp;amp; add it to your requirements.txt file&lt;/p&gt;

&lt;p&gt;Django automatically generates a wsgi.py file that is required by gunicorn to run the server. &lt;br&gt;
Now the startup command will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gunicorn &amp;lt;yourprojectname&amp;gt;.wsgi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For mine it will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gunicorn triviaquiz.wsgi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-dockerfile"&gt;
  &lt;/a&gt;
  Making Dockerfile
&lt;/h2&gt;

&lt;p&gt;Qovery hosts your application through a docker container. So the next thing we need to do is make a Dockerfile&lt;/p&gt;

&lt;p&gt;A Dockerfile is just a text document with all the commands required to build your application in a docker container. &lt;/p&gt;

&lt;p&gt;Don't worry you won't need to learn Docker just for hosting. &lt;/p&gt;

&lt;p&gt;You can you my Dockerfile for the same. most probably it will work with your Django Project too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM python:3
WORKDIR /app
COPY . .
RUN pip install -r requirements.txt
RUN python manage.py makemigrations
RUN python manage.py migrate
EXPOSE 8000
CMD ["gunicorn","&amp;lt;yourprojectname&amp;gt;.wsgi","--bind","0.0.0.0:8000"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For my project it is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM python:3
WORKDIR /app
COPY . .
RUN pip install -r requirements.txt
RUN python manage.py makemigrations
RUN python manage.py migrate
EXPOSE 8000
CMD ["gunicorn","triviaquiz.wsgi","--bind","0.0.0.0:8000"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Dockerfile is doesn't have an extension&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-files"&gt;
  &lt;/a&gt;
  Static Files
&lt;/h2&gt;

&lt;p&gt;Serving static files for the website is important. Otherwise most of your static assets (like css , js files) won't be shown on the site. &lt;/p&gt;

&lt;p&gt;For serving static files we will use &lt;a href="http://whitenoise.evans.io/en/stable/"&gt;whitenoise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can install it using pip and also add it to your requirements.txt.&lt;/p&gt;

&lt;p&gt;After that you just need to add whitenoise (&lt;code&gt;whitenoise.middleware.WhiteNoiseMiddleware&lt;/code&gt;) to your django middleware in your project's settings.py file. &lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; Add the whitenoise middleware after Django’s SecurityMiddleware( &lt;code&gt;django.middleware.security.SecurityMiddleware&lt;/code&gt;)&lt;br&gt;
. For eg:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'django.middleware.security.SecurityMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'whitenoise.middleware.WhiteNoiseMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.middleware.common.CommonMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.middleware.csrf.CsrfViewMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.auth.middleware.AuthenticationMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.messages.middleware.MessageMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.middleware.clickjacking.XFrameOptionsMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the whitenoise middleware in 2nd line. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forevercacheable-files-and-compression-support-optional"&gt;
  &lt;/a&gt;
  Forever-cacheable files and compression support (Optional)
&lt;/h3&gt;

&lt;p&gt;Just add this to your settings.py:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;STATICFILES_STORAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'whitenoise.storage.CompressedManifestStaticFilesStorage'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h2&gt;

&lt;p&gt;The next thing we need to do is change the database from sqlite to Either postgres or Mysql on Qovery. &lt;/p&gt;

&lt;p&gt;You might be wondering why should we do that? The simple answer is the sqlite database resets everytime you deploy your site. &lt;br&gt;
Since sqlite is just a file, it gets overwritten everytime you make even a small change in your code &amp;amp; deploy it. &lt;/p&gt;

&lt;p&gt;Hence we will be using Postgres database from Qovery. &lt;/p&gt;

&lt;p&gt;First create a postgres database in Qovery&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xod4W5UO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8thmhm3mdxtewp00nkdt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xod4W5UO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8thmhm3mdxtewp00nkdt.png" alt="Make a postgres DB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating, go to its actions and deploy it. &lt;br&gt;
After deploying it, I would recommend you to restart it , it gets optimised by doing that. &lt;/p&gt;

&lt;p&gt;Next we need to use this database in our Django app. &lt;br&gt;
For that we need to make some changes in settings.py file. &lt;/p&gt;

&lt;p&gt;By default Django uses sqlite database &amp;amp; has the following code in settings.py file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.db.backends.sqlite3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;'db.sqlite3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we will be using Postgres for our app. Hence will need to install &lt;a href="https://pypi.org/project/psycopg2/"&gt;psycopg2&lt;/a&gt; &amp;amp; also add it to the requirements.txt file.&lt;/p&gt;

&lt;p&gt;After that we need to change the database config in settings.py file to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.db.backends.postgresql_psycopg2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;DBNAME&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'postgres'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;'USER'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;DG_LOGIN&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'postgres'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;'PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'PASS'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;'HOST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;DB_HOST&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;host_url&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;'PORT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;DB_PORT&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5432&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the things with &amp;lt;&amp;gt; needs to be modified. &lt;br&gt;
 can be found in your qovery's Environment variables and would be something like &lt;code&gt;QOVERY_POSTGRESQL_XXXXXXXXX_DEFAULT_DATABASE_NAME&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Similarly  would be something like &lt;code&gt;QOVERY_POSTGRESQL_XXXXXXXXX_LOGIN&lt;/code&gt;&lt;br&gt;
 would be like &lt;code&gt;QOVERY_POSTGRESQL_XXXXXXXXX_HOST&lt;/code&gt;&lt;br&gt;
 would be like &lt;code&gt;QOVERY_POSTGRESQL_XXXXXXXXX_PORT&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For , go to your database application in Qovery and then click on Host. It will automatically copy the host url. &lt;/p&gt;

&lt;p&gt;After that you need to go to your database application in Qovery. &amp;amp; then click on show config. And copy your master password. &lt;br&gt;
Now come back to your application project on Qovery, and make a new environment variable.&lt;br&gt;
Its name should be &lt;code&gt;PASS&lt;/code&gt; and value should be the password that you copied. &lt;/p&gt;

&lt;p&gt;After replacing all &amp;lt;&amp;gt; with the values, you can push your git code and Qovery will start to deploy your Django applications. And then your website will be up in a few minutes. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-superuser"&gt;
  &lt;/a&gt;
  Creating Superuser
&lt;/h2&gt;

&lt;p&gt;And next thing you might need to do is make a superuser. For that you should use your local machine instead. &lt;br&gt;
So you can navigate to your directory in which the project is. Otherwise clone your repository and navigate to that&lt;br&gt;
For that you need to create a &lt;code&gt;.env&lt;/code&gt; file. &lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; It should be &lt;code&gt;.env&lt;/code&gt; file and not &lt;code&gt;.env.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.env&lt;/code&gt; file should contain the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;QOVERY_POSTGRESQL_XXXXXXXXX_DEFAULT_DATABASE_NAME="postgres"
QOVERY_POSTGRESQL_XXXXXXXXX_LOGIN="postgres"
PASS="&amp;lt;PASS&amp;gt;"
QOVERY_POSTGRESQL_XXXXXXXXX_HOST="&amp;lt;host_url&amp;gt;"
QOVERY_POSTGRESQL_XXXXXXXXX_PORT=5432
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you should replace &lt;code&gt;QOVERY_POSTGRESQL_XXXXXXXXX_DEFAULT_DATABASE_NAME&lt;/code&gt; etc with the variable names as described a little above, under Database. &lt;/p&gt;

&lt;p&gt;And also replace  with the database password and  with the host url. &lt;/p&gt;

&lt;p&gt;Now you can open this directory in your terminal/CMD . &lt;br&gt;
and then you can run the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;either in a virtual environment or directly (as per your preference).&lt;/p&gt;

&lt;p&gt;After that you can access everything from your Django's admin panel. &lt;/p&gt;

&lt;p&gt;Here is the final repository:&lt;br&gt;
&lt;a href="https://github.com/rachit1601/triviaquiz"&gt;https://github.com/rachit1601/triviaquiz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is my site deployed on Qovery:&lt;br&gt;
&lt;a href="https://triviaquiz.redcrypt.xyz/"&gt;https://triviaquiz.redcrypt.xyz/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any other problems, you can write in the comments or you can contact me on Discord at &lt;code&gt;DiluteWater#3149&lt;/code&gt; &lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>qovery</category>
    </item>
    <item>
      <title>Speed up Laravel in Docker by moving vendor directory</title>
      <author>Tyler Smith</author>
      <pubDate>Tue, 14 Sep 2021 07:20:41 +0000</pubDate>
      <link>https://dev.to/tylerlwsmith/speed-up-laravel-in-docker-by-moving-vendor-directory-19b9</link>
      <guid>https://dev.to/tylerlwsmith/speed-up-laravel-in-docker-by-moving-vendor-directory-19b9</guid>
      <description>&lt;p&gt;I'm building a Laravel app on my MacBook Pro with Docker by mounting my project folder inside a Docker container. I was working on an API endpoint in the app that had a response time of a little more than a second. This made the interactivity in a connected React app feel &lt;em&gt;painfully&lt;/em&gt; slow. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-laravel-is-slow-in-docker"&gt;
  &lt;/a&gt;
  Why Laravel is slow in Docker
&lt;/h2&gt;

&lt;p&gt;The reason behind this slow performance is two-fold, caused by the combination of the PHP request model and the latency when transferring data between Docker's Linux VM and the host MacOS machine. &lt;/p&gt;

&lt;p&gt;When PHP receives a request, it loads all of its dependencies on a per-request basis. Once the request finishes it discards all of the loaded data. This is different than something like Node.js, where a single thread handles all requests and each module is cached when it's first loaded.&lt;/p&gt;

&lt;p&gt;PHP's way of loading dependencies is already inefficient compared to Node. And when you do Docker development on a non-Linux machine, you add the overhead of crossing between Docker's Linux VM and the mounted host machine folder for every single dependency file that's loaded. It's the difference between moving books from one shelf to another vs moving books to a shelf in a house down the street.&lt;/p&gt;

&lt;p&gt;To keep Docker fast, we want to minimize the amount of times we need to cross between Docker's Linux VM and the host machine. We can do that by storing Composer's &lt;code&gt;vendor/&lt;/code&gt; folder inside the container instead of in the mounted project directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-the-vendor-directory"&gt;
  &lt;/a&gt;
  Moving the vendor directory
&lt;/h2&gt;

&lt;p&gt;For the rest of this post, we'll assume that you have a container where your app is stored in &lt;code&gt;/srv/app/&lt;/code&gt;. We will install the Composer dependencies in &lt;code&gt;/srv/vendor/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In your Dockerfile, we'll install the Composer dependencies using the &lt;code&gt;RUN&lt;/code&gt; command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# ...previous Dockerfile commands&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /srv/app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nv"&gt;COMPOSER_VENDOR_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/srv/vendor"&lt;/span&gt; composer &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will install the Composer dependencies in the &lt;code&gt;/srv/vendor&lt;/code&gt; directory, but Laravel can't see them: it expects its dependencies to be in the project root's &lt;code&gt;vendor/&lt;/code&gt; folder. We must update the places where Laravel loads the Composer autoload file.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;public/index.php&lt;/code&gt; and &lt;code&gt;artisan&lt;/code&gt;, find the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And replace it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;'/../vendor/autoload.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also update the path in &lt;code&gt;phpunit.xml&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;docker build&lt;/code&gt; (or &lt;code&gt;docker-compose build&lt;/code&gt; if you use Compose), and bring the container back up. When you navigate to your Laravel project in the browser, you should see noticeably faster page-load speeds. &lt;strong&gt;In my project, my API request drop from about 1000ms to about 200ms.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gotchcas"&gt;
  &lt;/a&gt;
  Gotchcas
&lt;/h2&gt;

&lt;p&gt;The faster page-load speeds are nice, but if you use IntelliSense &amp;amp; autocomplete, you're really going to want your dependencies in your mounted project directory so that your editor can see them.&lt;/p&gt;

&lt;p&gt;You can install your Composer dependencies in your mounted project directory by running the following command from your host machine while the Laravel container is running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker &lt;span class="nb"&gt;exec &lt;/span&gt;your-container-name composer &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;p&gt;In addition to moving your dependencies into your container, you can also enable PHP's OpCache to make Laravel load even faster. &lt;a href="https://www.hmazter.com/2019/04/speeding-up-php-docker-with-opcache/"&gt;Kristoffer Högberg has a concise write-up on how to do this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Michaël Perrin wrote a post called &lt;a href="http://blog.michaelperrin.fr/2017/04/14/docker-for-mac-on-a-symfony-app/"&gt;"3 ways to get Docker for Mac faster on your Symfony app"&lt;/a&gt; that has some interesting performance measurements before and after optimization. Michaël's post was the inspiration behind this article, and it's definitely worth a read.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>docker</category>
      <category>php</category>
    </item>
    <item>
      <title>Selecting low power networking — LoraWan,SigFox, Nb-IoT and LTE-M</title>
      <author>TheDailyTechTalk</author>
      <pubDate>Tue, 14 Sep 2021 07:06:32 +0000</pubDate>
      <link>https://dev.to/thedailytechtalk/selecting-low-power-networking-lorawan-sigfox-nb-iot-and-lte-m-2ld3</link>
      <guid>https://dev.to/thedailytechtalk/selecting-low-power-networking-lorawan-sigfox-nb-iot-and-lte-m-2ld3</guid>
      <description>&lt;p&gt;&lt;em&gt;I recently started a new blog &lt;a href="https://thedailytechtalk.com"&gt;TheDailyTechTalk&lt;/a&gt; where I create free content. If you liked this post and would like to read more posts about javascript please check it out 🎉🎉&lt;br&gt;
🥰&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me, please follow me on &lt;a href="https://twitter.com/TheDailyTechTa1"&gt;Twitter&lt;/a&gt; to learn more about programming and similar topics ❤️❤️&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#selecting-low-power-networking-contrasting-pros-and-cons-of-lorawansigfox-nbiot-and-ltem"&gt;
  &lt;/a&gt;
  Selecting low power networking contrasting pros and cons of LoraWan,SigFox, Nb-IoT and LTE-M
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-low-power-wide-area-network"&gt;
  &lt;/a&gt;
  What is "Low power wide area network"?
&lt;/h2&gt;

&lt;p&gt;LPWAN is a type of wireless telecommunication designed for long-range communications between IoT devices, sensors etc. Its main purpose is to send small amounts of data over a great distance for a long period of time, even years on a single battery*.* Coverage can range from 1 km up to over 40 km.&lt;/p&gt;

&lt;p&gt;Frequency which LPWAN providers like SigFox or LoraWaN use depends on location (and sometimes even the country). Providers use either unlicensed ISM bands , 868 MHz in Europe, 915 Mhz in North America and 433 MHz in Asia, or licensed LTE frequency bands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kt_J_-9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.thedailytechtalk.com/_nuxt/uploads/63ed0e7-592.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kt_J_-9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.thedailytechtalk.com/_nuxt/uploads/63ed0e7-592.jpg" alt="The advantages of Sigfox, LoRaWAN, and NB-IoT."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;The respective advantages of Sigfox, LoRaWAN, and NB-IoT. Source: The Korean Institute of Communications and Information Sciences (KICS) as published in ICT Express, March 2019.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sigfox"&gt;
  &lt;/a&gt;
  SigFox
&lt;/h1&gt;

&lt;p&gt;Sigfox was founded in 2009 in France.Today they are available in over 60 countries and their numbers are constantly growing. They offer end-to-end LPWAN solutions. Sigfox network architecture is built using base stations in a star topology, but with their own cloud service acting as a middle man. That kind of architecture offers some great benefits such as data security and data flow via API.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strong industry support and partners like Texas Instruments, Silicon Labs and Arduino&lt;/li&gt;
&lt;li&gt;Very long range&lt;/li&gt;
&lt;li&gt;Large coverage&lt;/li&gt;
&lt;li&gt;Cost effective&lt;/li&gt;
&lt;li&gt;Cloud service &amp;amp; API&lt;/li&gt;
&lt;li&gt;Easy to integrate with services like AWS, Azure and others&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not an open standard&lt;/li&gt;
&lt;li&gt;Low security (16 bit encryption)&lt;/li&gt;
&lt;li&gt;US design architecture is different from European architecture&lt;/li&gt;
&lt;li&gt;Bad UI/UX in administration interface&lt;/li&gt;
&lt;li&gt;Bad latency performance&lt;/li&gt;
&lt;li&gt;Low maximum payload length&lt;/li&gt;
&lt;li&gt;Limited amount of UL / DL&lt;/li&gt;
&lt;li&gt;No private networks&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lorawan"&gt;
  &lt;/a&gt;
  LoRaWaN
&lt;/h1&gt;

&lt;p&gt;LoRaWaN network architecture is deployed as a typical star topology, with a gateway in the middle that converts radio signal to IP and vice versa. They are mainly used for telemetric data transfers and object tracking. Messages transmitted by an end device with LoRaWAN are received by all base stations in the range, which increases the ratio of successfully received messages. However, that requires multiple base stations in range, as well as the need to filter duplicated messages, which leads to increased network deployment cost.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strong industry support and partners such as Cisco, IBM and KPN&lt;/li&gt;
&lt;li&gt;Strong security (128 bit encryption) and authentication (2 layers of security)&lt;/li&gt;
&lt;li&gt;Great for communication with moving devices, since it is resistant to the Doppler effect&lt;/li&gt;
&lt;li&gt;Unlimited uplinks and downlinks&lt;/li&gt;
&lt;li&gt;Multiple classes of end devices for different requirements and situations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not an open standard&lt;/li&gt;
&lt;li&gt;The price and availability of the modules&lt;/li&gt;
&lt;li&gt;You can only use vendors approved by Semtech&lt;/li&gt;
&lt;li&gt;Expensive device certification required for most device types&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#nbiot"&gt;
  &lt;/a&gt;
  NB-IoT
&lt;/h1&gt;

&lt;p&gt;NB-IoT , which stands for Narrowband Internet of Things, uses licensed frequency spectrum, unlike SigFox and LoRa. Their communication protocol is based on the LTE protocol and it can coexist with both GSM and LTE protocols. NB-IoT frequency band width is 200 KHz, and because of that there are 3 operation modes possible: stand-alone operation which utilizes GSM frequency bands currently in use, guard-band operation that utilizes unused resource blocks within LTE band and in-band operation which utilizes resource blocks within an LTE carrier.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Big data rate (200 kbps)&lt;/li&gt;
&lt;li&gt;Large maximum payload length (1600) bytes&lt;/li&gt;
&lt;li&gt;LTE encryption&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Latency performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No private networks&lt;/li&gt;
&lt;li&gt;Low coverage&lt;/li&gt;
&lt;li&gt;Cost efficiency&lt;/li&gt;
&lt;li&gt;Lower range than its competitors&lt;/li&gt;
&lt;li&gt;Low interference immunity&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#ltem"&gt;
  &lt;/a&gt;
  LTE-M
&lt;/h1&gt;

&lt;p&gt;CAT-M, officially known as LTE CAT-M1, is the second generation of LTE chips developed by 3GPP. As well as coexisting with 2G, 3G and 4G mobile networks , LTE-M network benefits from their security, privacy and other features. Unlike the rest of the world where GSM spectra are the norm, US service providers have system architecture for LTE-M.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compatible with existing LTE network.&lt;/li&gt;
&lt;li&gt;High data rate&lt;/li&gt;
&lt;li&gt;Support of voice functionality via VoLTE&lt;/li&gt;
&lt;li&gt;Low power consumption&lt;/li&gt;
&lt;li&gt;Use of TCP / IP protocols&lt;/li&gt;
&lt;li&gt;Easy to deploy&lt;/li&gt;
&lt;li&gt;Supports mobility, no disconnections while moving between stations&lt;/li&gt;
&lt;li&gt;Low latency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Firmware upgrades consume power&lt;/li&gt;
&lt;li&gt;High costs&lt;/li&gt;
&lt;li&gt;Bandwidth consumption&lt;/li&gt;
&lt;li&gt;Low support outside USA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;I recently started a new blog &lt;a href="https://thedailytechtalk.com"&gt;TheDailyTechTalk&lt;/a&gt; where I create free content. If you liked this post and would like to read more posts about javascript please check it out 🎉🎉&lt;br&gt;
🥰&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me, please follow me on &lt;a href="https://twitter.com/TheDailyTechTa1"&gt;Twitter&lt;/a&gt; to learn more about programming and similar topics ❤️❤️&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>3 free Brag Document Templates [Google Docs]</title>
      <author>Kevin Peters</author>
      <pubDate>Tue, 14 Sep 2021 06:53:18 +0000</pubDate>
      <link>https://dev.to/getworkrecognized/3-free-brag-document-templates-google-docs-4nla</link>
      <guid>https://dev.to/getworkrecognized/3-free-brag-document-templates-google-docs-4nla</guid>
      <description>&lt;p&gt;Brag documents are an effective way to get recognized by your manager and peers for your work. It will help you to get promoted or simply get a salary raise. Getting a template and what to write into that is difficult, that is why we have prepared some templates for you. All of the templates are free and can be accessed via Google Docs.&lt;/p&gt;

&lt;p&gt;You might be a startup that is trying to set up their performance evaluation processes to finally create alignment for leveling and ranking within the company, or simply a worker who wants to get a promotion. A brag document can help to convince your manager to get promoted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-work-with-the-templates"&gt;
  &lt;/a&gt;
  How to work with the templates
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open the URL of the template, you can find them in the next chapters&lt;/li&gt;
&lt;li&gt;Press on File → Make a copy&lt;/li&gt;
&lt;li&gt;Fill the document with your data&lt;/li&gt;
&lt;li&gt;Send it to your manager, ideally discuss it in a 1-on-1 meeting and see if you can reach for the promotion&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#brag-document-template-1-the-general-one"&gt;
  &lt;/a&gt;
  Brag Document Template #1: The general one
&lt;/h2&gt;

&lt;p&gt;Template Link: "&lt;a href="https://docs.google.com/document/d/1p_zbIdoAY9ctxCebKfo5bXNp0oLyN4hWsFhTW63Ypms/edit?usp=sharing"&gt;Brag Document Template 1: For Everyone&lt;/a&gt;"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--guItwZ-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmrhkqw0ah2fo74y7vfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--guItwZ-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmrhkqw0ah2fo74y7vfb.png" alt="A preview of the first brag document template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This brag document is made for every profession. After a short introduction on where you describe yourself in a short profile, you will jump over to defining the goals from past years. If you do not know what goals you had a year ago, feel free to write down what the company’s goals were.&lt;/p&gt;

&lt;p&gt;Once those are written down it is time to think about your past year’s performance. What tasks have you done that impacted the key metrics of the company? Most people struggle with this but think back, month by month what you have done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://getworkrecognized.com/login?utm_source=blog&amp;amp;utm_medium=devto&amp;amp;utm_campaign=3-brag-document-templates-google-docs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7O6pdYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqgz3wp8rgyek1oyenxg.gif" alt="Promotional Banner for getworkrecognized"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then write down what the situation was, without describing what you have done and how the situation was impacted. All that and you will have a good overview of what your performance looked like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brag-document-template-2-software-engineers-amp-more"&gt;
  &lt;/a&gt;
  Brag Document Template #2: Software Engineers &amp;amp; More
&lt;/h2&gt;

&lt;p&gt;Template Link: "&lt;a href="https://docs.google.com/document/d/1iR9VwwaBp-PHcLwe3L32VVtNoSpCX3GXxXhIqJOKJMA/edit?usp=sharing"&gt;Brag Document Template 2: Software Engineers &amp;amp; Tech&lt;/a&gt;"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LtgAqbSQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcl1z85q0munxcqce3il.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LtgAqbSQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcl1z85q0munxcqce3il.png" alt="A preview of the second brag document template made for Software Engineers and Tech"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This brag document is specially made for Software Engineers but can be used for other professions as well. It is also written based on the popular article "&lt;a href="https://jvns.ca/blog/brag-documents/#template"&gt;Get your work recognized: write a brag document&lt;/a&gt;" by Julia Evans. It will go through your Goals, Projects, how you have collaborated with colleagues and how you progressed the company. Overall it is super focused on software engineers that have clear projects on what they work on and surely this cannot be found in every job that is out there, but if you have some structured way of working towards some KPIs this template might be for you.&lt;/p&gt;

&lt;p&gt;The only chapter that does apply to Software Engineers is "Design &amp;amp; documentation". Ideally, you skip this chapter from the template to make it a generic one that works for everyone. But in general, this template is really popular as it was &lt;a href="https://news.ycombinator.com/item?id=20665225"&gt;featured on Hackernews with more than 300 upvotes&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brag-document-template-3-based-on-leadership-principles"&gt;
  &lt;/a&gt;
  Brag Document Template #3: Based on Leadership Principles
&lt;/h2&gt;

&lt;p&gt;Template Link: "&lt;a href="https://docs.google.com/document/d/11Gk-JTP3hF4ei9EbJjuyO-51EhaOZ9xp34u9PlN3lXo/edit?usp=sharing"&gt;Brag Document Template 3: Leadership Principles&lt;/a&gt;"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---FO7XO1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hv8f55q47bgfieo26uf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---FO7XO1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hv8f55q47bgfieo26uf.png" alt="A preview of the third brag document template based on leadership principles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This brag document template is the best if your company works with Leadership Principles, also called operation principles in some companies. You can find a big selection of leadership principles in our free &lt;a href="https://getworkrecognized.com/tools/career-ladders-explorer?utm_source=blog&amp;amp;utm_medium=devto&amp;amp;utm_campaign=3-brag-document-templates-google-docs"&gt;Career Ladders Explorer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The template is structured quite simply. You have three sections that are like the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Good Leadership Principles/Actions&lt;/li&gt;
&lt;li&gt;Room to improve based on Leadership Principles&lt;/li&gt;
&lt;li&gt;Outlook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The important thing to consider in this template is to overweight the good parts and leave out the bad things. Ideally, you should have started with listing "okish" achievements and getting to the best achievements, then starting with the worst parts where you need to improve and top it off with improvements that are possible for you to reach in the next performance review cycle.&lt;/p&gt;

&lt;p&gt;In the final self-evaluation section try to focus on reasons why you should get promoted. Most of the time the main reason should be that you act on the next level already when it comes to leadership principles. And write as well that you want to get promoted now, because of all your achievements and your output.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-brag-docs"&gt;
  &lt;/a&gt;
  Other brag docs
&lt;/h2&gt;

&lt;p&gt;Do you have any other brag documents that you want to share? Feel free to shoot us an email at: &lt;a href="//mailto:getworkrecognized@gmail.com"&gt;getworkrecognized@gmail.com&lt;/a&gt;. We are happy to have your template listed here as well and we are looking to extend this collection of brag documents soon.&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>programming</category>
      <category>help</category>
    </item>
    <item>
      <title>Best VS Code extensions to increase your productivity</title>
      <author>TheDailyTechTalk</author>
      <pubDate>Tue, 14 Sep 2021 06:48:20 +0000</pubDate>
      <link>https://dev.to/thedailytechtalk/best-vs-code-extensions-to-increase-your-productivity-3562</link>
      <guid>https://dev.to/thedailytechtalk/best-vs-code-extensions-to-increase-your-productivity-3562</guid>
      <description>&lt;p&gt;&lt;em&gt;I recently started a new blog &lt;a href="https://thedailytechtalk.com"&gt;TheDailyTechTalk&lt;/a&gt; where I create free content. If you liked this post and would like to read more posts about javascript please check it out 🎉🎉&lt;br&gt;
🥰&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me, please follow me on &lt;a href="https://twitter.com/TheDailyTechTa1"&gt;Twitter&lt;/a&gt; to learn more about programming and similar topics ❤️❤️&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bracket-pair-colorizer"&gt;
  &lt;/a&gt;
  Bracket Pair Colorizer
&lt;/h2&gt;

&lt;p&gt;With over 5.8 million downloads, &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&amp;amp;ssr=false#overview"&gt;Bracket Pair Colorizer&lt;/a&gt; is definitely one of the most popular VS Code extensions out there.&lt;br&gt;
This extension allows matching brackets to be identified with colours. It is highly customizable and with a lot of configuration options.&lt;br&gt;
Simply mind blowing extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7kAbZ--7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/CoenraadS/BracketPair/master/images/example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7kAbZ--7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/CoenraadS/BracketPair/master/images/example.png" alt="Bracket Pair Colorizer example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&amp;amp;ssr=false#overview"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prettier-code-formatter"&gt;
  &lt;/a&gt;
  Prettier - Code formatter
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier - Code formatter&lt;/a&gt; With more then 14.3 million downloads this is definitely one of the best VS Code extensions.&lt;/p&gt;

&lt;p&gt;Prettier is an code formatter which enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary etc. It is highly configurable to better fit your and your teams coding style.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#auto-rename-tag"&gt;
  &lt;/a&gt;
  Auto Rename Tag
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Auto Rename Tag&lt;/a&gt; is a super useful VS Code extension for web developers. As the names suggest, Auto Rename Tag renames the second tag as the first one is updated and vice versa. Really useful for writing HTML, React or Vue. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HeXDlnP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/formulahendry/vscode-auto-rename-tag/399eaa6ba4ad32c7958dfa11d46fd7fc5ffe9f05/images/usage.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HeXDlnP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/formulahendry/vscode-auto-rename-tag/399eaa6ba4ad32c7958dfa11d46fd7fc5ffe9f05/images/usage.gif" alt="Auto Rename Tag usage gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ponicode"&gt;
  &lt;/a&gt;
  Ponicode
&lt;/h2&gt;

&lt;p&gt;Ponicode is an AI-powered extension pack that generates unit tests. &lt;/p&gt;

&lt;p&gt;AI shows you what functions need to be tested the most and&lt;br&gt;
it handles repetitive part of unit testing, by writing the test file for you.&lt;br&gt;
It also generates and suggests you relevant inputs for your tests scenarios.&lt;/p&gt;

&lt;p&gt;Supports&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ponicode.ponicode"&gt;Check it out here.&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eslint"&gt;
  &lt;/a&gt;
  ESLint
&lt;/h2&gt;

&lt;p&gt;With this plugin, you can code with ease knowing that you will maintain correct code etiquette make things easier to read, both for yourself and others.It is really easy to customise, simply modify Json settings file according to your needs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&amp;amp;ssr=false#overview"&gt;Check it out here.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I recently started a new blog &lt;a href="https://thedailytechtalk.com"&gt;TheDailyTechTalk&lt;/a&gt; where I create free content. If you liked this post and would like to read more posts about javascript please check it out 🎉🎉&lt;br&gt;
🥰&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me, please follow me on &lt;a href="https://twitter.com/TheDailyTechTa1"&gt;Twitter&lt;/a&gt; to learn more about programming and similar topics ❤️❤️&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Learning Path</title>
      <author>Diego Frattini</author>
      <pubDate>Tue, 14 Sep 2021 06:43:44 +0000</pubDate>
      <link>https://dev.to/tolomeo/the-learning-path-4dhg</link>
      <guid>https://dev.to/tolomeo/the-learning-path-4dhg</guid>
      <description>&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@jannesglas?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jannes Glas&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/path?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;I created a website hosting learning paths.&lt;/p&gt;

&lt;p&gt;I started building it because of a professional need, then I realised it could be useful to other people, too.&lt;br&gt;
All resources are free as they are selected among tens of gratis videos, tutorials, books found on the web.&lt;/p&gt;

&lt;p&gt;If that sounded useful to anybody, they could find it here: &lt;a href="https://the-learning-path.vercel.app/"&gt;https://the-learning-path.vercel.app&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#not-tldr"&gt;
  &lt;/a&gt;
  Not TL;DR
&lt;/h2&gt;

&lt;p&gt;I am a self taught developer. I always was.&lt;br&gt;
I know I am not the only one. I know that because of statistics:&lt;/p&gt;


&lt;blockquote&gt;
        &lt;p&gt;Statistically, around 65-70% of developers considered themselves as a self-taught developer and the number is growing rapidly.&lt;/p&gt;
    &lt;/blockquote&gt;
Madhur Gupta, and Sagar Kapoor. “7 Best Learning Methods for Self Taught Developers.” GeeksforGeeks, 7 July 2021, www.geeksforgeeks.org/7-best-learning-methods-for-self-taught-developers
    
&lt;br&gt;



&lt;p&gt;I also know that because of personal experience. Among all the engineers I worked with, I could count many coming from rather diverse educational paths: designers, architects, philosophers, mathematicians and even a professionally trained musician who taught me how much music and coding have in common.&lt;/p&gt;


&lt;blockquote&gt;
        &lt;p&gt;Both music and programming can be and are often self taught. People who are self taught are generally pretty successful as they have one of the most important traits: self motivation.&lt;/p&gt;
    &lt;/blockquote&gt;
NanoDano. “Similarities Between Music and Programming.” DevDungeon, 5 July 2019, www.devdungeon.com/content/similarities-between-music-and-programming
    
&lt;br&gt;



&lt;p&gt;At the start of my career as a  developer, self motivation was driven by curiosity. I wanted to know everything about how software things worked and I believed I would eventually reach my goal because persons conceived those things. I was a person no less. Great reasoning.&lt;/p&gt;

&lt;p&gt;I have to admit that was not my only drive, though. Competition played a big role too, as I couldn't stand knowing less than many of my colleagues about something I found so fascinating.&lt;/p&gt;

&lt;p&gt;Ego issues aside, it wasn't easy for me to build a mental model of software behaviours and an understanding of engineering practices, without counting on solid fundamentals.&lt;br&gt;
Free learning resources were present but scattered in the wild web, not differently than what still happens Today.&lt;br&gt;
Thankfully I could always rely on several websites helping me out with tutorials and explanations. Some of them are still alive, some others tragically ceased to exist at some point in time.&lt;/p&gt;

&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ThTE1xH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pq0mhpjugy1a3405irfe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ThTE1xH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pq0mhpjugy1a3405irfe.png" alt="Css-tricks as it was on November 1st 2012"&gt;&lt;/a&gt;Css-tricks as it was on November 1st 2012 (https://web.archive.org/web/20121101231755/https://css-tricks.com). I still refer to this website to find examples and inspiration.


&lt;/p&gt;

&lt;p&gt;Despite the challenges, I managed to find my way through. I can Today call myself a software engineer with no shame and I transitioned to roles with leadership responsibilities.&lt;/p&gt;

&lt;p&gt;That transition comes with its own set of complications. As an example, one needs to realise their actions are no longer relevant as individual contributions while commitment around processes and collaboration become more important. This topic alone could give birth to a collection of articles but, since that has been done already and it doesn't spark joy when I think about it, I am not planning to put down any of those.&lt;/p&gt;

&lt;p&gt;What I find compelling instead, is learning new things. What my role gives me, is the chance of helping my team to learn new things as well.&lt;br&gt;
I recently tried to do exactly that, but politics got in the way. The short version of the story is I wanted to make use of some paid platform's learning paths to build a shared knowledge base in the team. That unfortunately wasn't an option.&lt;/p&gt;

&lt;p&gt;That meant going back to my primal source of learning: free quality resources found on the web. That also meant facing again old challenges, like finding the right content among hundreds, understanding what to start from or what to progress with or figuring out how the unorganised pieces of knowledge fit together.&lt;/p&gt;

&lt;p&gt;To try solving those issues once and for all, I decided to create &lt;a href="https://the-learning-path.vercel.app"&gt;The learning path&lt;/a&gt;, where I collected some good videos, readings, books, examples, exercises and cheatsheets I could find. All of them are free.&lt;br&gt;
The resources are categorised by topic and ordered by complexity level, from basic to advanced concepts.&lt;br&gt;
The paths are not a collection of everything. They represent instead an opinionated selection of items which could work nicely together.&lt;/p&gt;

&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bI4UeztC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efq6fscgsocnb2wdukrh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bI4UeztC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efq6fscgsocnb2wdukrh.png" alt=""&gt;&lt;/a&gt;"The React learning path" page. React training resources are among the first I collected due to the need of levelling the team knowledge about the library.


&lt;/p&gt;

&lt;p&gt;The final aim is to provide a valid alternative to similar paid offers, which I always suggest to have a look at anyway.&lt;/p&gt;

&lt;p&gt;The deployed website at the time of this writing is the MVP.&lt;br&gt;
I am planning to enrich and refine resources collections, add more features and sections and include more paths.&lt;br&gt;
If this project manages to help anyone learning something, I will see it as a success.&lt;br&gt;
For the time being, I am happy as it is proving useful to me and my team.&lt;/p&gt;

&lt;p&gt;Last but not least: a huge thanks to Salvatore Tedde, who supported me in the conception phases of the project and contributed to the website design. He too is a self taught developer and a continuous learner, so I was sure he would be interested and help me with this.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>learning</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 25, Buttons, Entry and Textboxes </title>
      <author>Aatmaj</author>
      <pubDate>Tue, 14 Sep 2021 06:09:57 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-25-buttons-entry-and-textboxes-2d0n</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-25-buttons-entry-and-textboxes-2d0n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-cover-three-widgets-namely-button-entry-and-textbox"&gt;
  &lt;/a&gt;
  Today we will cover three widgets, namely button, entry and textbox.
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#the-plain-old-button"&gt;
  &lt;/a&gt;
  The plain old button
&lt;/h2&gt;

&lt;p&gt;We have covered check buttons, radio buttons and label in the previous parts. But now we will see how to make a simple clickable button. &lt;/p&gt;

&lt;p&gt;The button widget can be created as shown &lt;code&gt;button=tk.Button(form,text="Press Me",command=cmd)&lt;/code&gt;&lt;br&gt;
'cmd' is the  command to be executed once the button is pressed. The example below will make things clearer.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#making-a-blank-button"&gt;
  &lt;/a&gt;
  Making a blank button
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;

&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Example of Entry widget"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'400x200'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Press Me"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IbrCmGCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w22b2svmeh2ycai4tqxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IbrCmGCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w22b2svmeh2ycai4tqxg.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VA5nwwQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epcakg5pqhf555sthqdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VA5nwwQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epcakg5pqhf555sthqdg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On pressing the button, nothing happens. It is just a blank button. But now we will add a counter to count the number of times the button is pressed.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#adding-counter-to-the-button"&gt;
  &lt;/a&gt;
  Adding counter to the button.
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;

&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Example of Entry widget"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'400x200'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntVar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="c1"&gt;#don't forget the str()
&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Press Me"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;On pressing the button, the text of the button changes in accordance to the number of times the button is pressed. This is achieved by using the &lt;code&gt;IntVar()&lt;/code&gt; variable.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zbapgOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzrdmqcpibwxh8zcxd3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zbapgOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzrdmqcpibwxh8zcxd3r.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ck4hfTRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/482syg5vj7gzexldbem1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ck4hfTRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/482syg5vj7gzexldbem1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vMoquqEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrx6tz05d7g4qnmx7f9m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vMoquqEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrx6tz05d7g4qnmx7f9m.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-entry-widget"&gt;
  &lt;/a&gt;
  The Entry widget.
&lt;/h2&gt;

&lt;p&gt;The entry widget is a single line textbox. The users can give in a single line input via this widget.&lt;br&gt;
&lt;code&gt;entry = tk.Entry(parent)&lt;/code&gt;&lt;br&gt;
We can also add other parameters to the entry widget like color, etc. Here is an example below which demonstrates a blank entry widget.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#blank-entry-widget"&gt;
  &lt;/a&gt;
  Blank entry widget.
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;

&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Example of Entry widget"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'400x200'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cxPEFlCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbtpby50gfg5u1qojvfx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxPEFlCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbtpby50gfg5u1qojvfx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#getting-value-from-the-entry"&gt;
  &lt;/a&gt;
  Getting value from the entry.
&lt;/h3&gt;

&lt;p&gt;The value of the text can be obtained using the &lt;code&gt;get()&lt;/code&gt; function.  The below example will make things very clear.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;

&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Example of Entry widget"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'400x200'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="s"&gt;'''
The TB1.get() method returns the string value of the  text inputted into the entry widget. By using the config() method of the button, we can set the text of the button.
'''&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To process the input data, we will need the help of other widgets. Button for example. In the above example, when the button is pressed, the button text changes according to the value of the entry.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FiykySH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5oognqdgj9yapvlebo2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FiykySH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5oognqdgj9yapvlebo2o.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fD6pSXOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4x0brdbpabmng97ncec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fD6pSXOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4x0brdbpabmng97ncec.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFsSu9QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tx1vrflcvir6gy3iyhc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFsSu9QZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tx1vrflcvir6gy3iyhc.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yiNU544A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp4fyvgntwwzp1ja6zoo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yiNU544A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp4fyvgntwwzp1ja6zoo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#textbox"&gt;
  &lt;/a&gt;
  Textbox.
&lt;/h2&gt;

&lt;p&gt;Textboxes are just the same as entry widgets, the only difference is that we can add multiple lines to it. Just replace 'Entry' by 'Text' and you are done!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#blank-textbox"&gt;
  &lt;/a&gt;
  Blank textbox.
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;

&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Example of textbox widget"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'400x200'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0EQyx3C7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t7nv5a41xob5juki1ha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0EQyx3C7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t7nv5a41xob5juki1ha.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setting-the-textspace"&gt;
  &lt;/a&gt;
  Setting the text-space
&lt;/h4&gt;

&lt;p&gt;Using the height and width attributes, we can set the number of input characters in each line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;

&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Example of textbox widget"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'400x200'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TosJIIJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olwmezxtkeovnt97hbt2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TosJIIJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olwmezxtkeovnt97hbt2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#getting-input-from-the-textbox"&gt;
  &lt;/a&gt;
  Getting input from the textbox.
&lt;/h3&gt;

&lt;p&gt;We can get the input in the same manner. We need to specify two parameters to the get method. The start and the end parameter. &lt;code&gt;text=TB1.get(1.0, "end-1c")&lt;/code&gt; will give the entire result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;

&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Example of Entry widget"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'400x200'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"end-1c"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s"&gt;'''
get(start, [end])
where,
start is starting index of required text in TextBox,
end is ending index of required text in TextBox
'''&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UTjiRzki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ka7z6j5nlihj7px5tb0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTjiRzki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ka7z6j5nlihj7px5tb0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;







&lt;p&gt;So friends, that was all for today. Tomorrow, we will do a password management program! So stay tuned in this course!. Follow me on GitHub for updates.&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
