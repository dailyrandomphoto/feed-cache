<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>15000+ Premium design resources Lifetime Only 99$ </title>
      <author>Kamal Ahmed</author>
      <pubDate>Sat, 02 Oct 2021 10:23:27 +0000</pubDate>
      <link>https://dev.to/marketerkamal/15000-premium-design-resources-lifetime-only-99-52m3</link>
      <guid>https://dev.to/marketerkamal/15000-premium-design-resources-lifetime-only-99-52m3</guid>
      <description>&lt;p&gt;15000+ Premium design resources Web template, Illustrations, Mobile app, Free icon and Web app elements from the world’s best designers&lt;/p&gt;

&lt;p&gt;15000+ Premium design resources Web template, Illustrations, Mobile app, Free icon and Web app elements from the world’s best designers&lt;/p&gt;

&lt;p&gt;Lifetime Access Only 99$ Party popper&lt;br&gt;
Get 10% Discount Use this coupon code: SPI10&lt;/p&gt;

&lt;p&gt;From : &lt;a href="https://uihut.com"&gt;https://uihut.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webpack</category>
      <category>webdesign</category>
      <category>designresorces</category>
      <category>offer</category>
    </item>
    <item>
      <title>How to Build a Predictive Machine Learning Site With React and Python (Part Two: API Development)</title>
      <author>Gospel Darlington</author>
      <pubDate>Sat, 02 Oct 2021 09:51:46 +0000</pubDate>
      <link>https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-two-api-development-11d2</link>
      <guid>https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-two-api-development-11d2</guid>
      <description>&lt;p&gt;What we’ll be building.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l46f7FcO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633089584413_predictive-model-api.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l46f7FcO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633089584413_predictive-model-api.gif" alt="Hireable API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sequel to the &lt;a href="https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-one-model-development-117"&gt;last article&lt;/a&gt;, we will be building a machine learning API that will predict whether a candidate will or will not be hired based on his or her credentials. This is part two out of a three-part series we will be developing. This part is only concerned with developing the machine learning API. If you haven't read part one of this article you should do so before this one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Building a machine learning model with no deployment mechanism could be frustrating unless you just want to learn. But where is the beauty in that if you can't deploy it for the whole world to see and use? for your machine learning model to be useful you need to integrate it with an API. You don't know how to build a machine learning API? Don't worry, in this tutorial you will learn step-by-step how to develop a predictive machine learning API. We will utilize the machine learning model developed in the &lt;a href="https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-one-model-development-117"&gt;part one&lt;/a&gt; of this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;p&gt;To flow along in this tutorial, a good understanding of the following tools is required.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Fast API&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-one-model-development-117"&gt;Part One&lt;/a&gt; of this tutorial&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-machine-learning-api"&gt;
  &lt;/a&gt;
  What is a Machine Learning API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hFVkZ2qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633093273963_laptop-6332544_960_720.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFVkZ2qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633093273963_laptop-6332544_960_720.jpg" alt="Image by Riekus from Pixabay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will answer this question by defining the terminologies used here and also doing a brief coverage of the advantages associated with machine learning APIs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is an API&lt;/strong&gt;&lt;br&gt;
API stands for an &lt;strong&gt;a&lt;/strong&gt;pplication &lt;strong&gt;p&lt;/strong&gt;rograming &lt;strong&gt;i&lt;/strong&gt;nterface. To simply state, it is a piece of backend service that allows two or more computers to have communications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why combine machine learning with an API&lt;/strong&gt;&lt;br&gt;
It gives your model the platform to be accessed and used by millions of people all over the globe, else it will just be a piece of code sitting on your computer. Take this analogy to understand why you must combine a machine learning model with an API.&lt;/p&gt;

&lt;p&gt;An airplane needs an airport, this is where it will operate from and also be accessed by millions of passengers that frequent the airport. Without the airport, the airplane cannot serve the passengers. This is how important an API is to a machine learning model, without an API a machine learning model cannot be used online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the advantages of an API&lt;/strong&gt;&lt;br&gt;
The benefits are almost unlimited, the following are some advantages of combining a machine learning model with an API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It helps people to access your model online.&lt;/li&gt;
&lt;li&gt;It helps other applications to utilize your model.&lt;/li&gt;
&lt;li&gt;It brings you profits by offering it as a service.&lt;/li&gt;
&lt;li&gt;It helps your model to gather more data from your users.&lt;/li&gt;
&lt;li&gt;It helps your model to collect more diversified inputs from people online.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These and more are some advantages of integrating a machine learning model with an API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What technologies can achieve a machine learning API&lt;/strong&gt;&lt;br&gt;
There are a few programming languages and frameworks that can help you put together a machine learning model with an API. This also depends on your choice of programming language and framework. The most popular frameworks that can help you achieve a hybrid of a machine learning model and API are django, Flask, and FastAPI. All these frameworks are built upon the Python programming language. For the sake of this tutorial, we will be using the FastAPI framework, which is fast, lightweight, and simple to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-predictive-machine-learning-api"&gt;
  &lt;/a&gt;
  Building a Predictive Machine Learning API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bORFNBUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633156459395_laptop-1148958_960_720.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bORFNBUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633156459395_laptop-1148958_960_720.jpg" alt="Image by Free-Photos from Pixabay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the meat of this tutorial, you will be guided by the hand so ensure that you don't skip any step. Below are the procedures you need to follow to build a machine learning API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choosing a Development Environment&lt;/strong&gt;&lt;br&gt;
This step is important, the tools that you use will either help you accomplish your task on time or frustrates you with difficulties. For this tutorial, we will be using VScode for all the coding. This is because all the necessary toolings needed to both develop and test our API are all in one place. Below are some of the reasons we are choosing VScode for this work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for Python IntelliSense, Code Format tools, and Code Highlights.&lt;/li&gt;
&lt;li&gt;Support for Thunder Client Extention for testing our API.&lt;/li&gt;
&lt;li&gt;Support for an integrated terminal with splitting functionality.&lt;/li&gt;
&lt;li&gt;Support for integrated version control and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Installing Development Dependencies&lt;/strong&gt;&lt;br&gt;
As earlier stated, we will be using the FastAPI framework which is built upon the Python programming language to code up our API. The following are the tools and libraries we will install for our development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 3.9.7&lt;/li&gt;
&lt;li&gt;Fastapi 0.68.1&lt;/li&gt;
&lt;li&gt;Uvicorn 0.15.0&lt;/li&gt;
&lt;li&gt;Scikit-learn 1.0&lt;/li&gt;
&lt;li&gt;Thunder Client&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, follow the below instruction to have them all installed on your computer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Head to the VScode &lt;a href="https://code.visualstudio.com/download"&gt;site&lt;/a&gt; and download the appropriate version for your OS.&lt;/li&gt;
&lt;li&gt;Install the downloaded package on your computer.&lt;/li&gt;
&lt;li&gt;Head to the Python &lt;a href="https://www.python.org/downloads/"&gt;website&lt;/a&gt; and download &lt;strong&gt;Python version 3.9.7&lt;/strong&gt; or later.&lt;/li&gt;
&lt;li&gt;Install the Python package and add the path to your &lt;strong&gt;system variables&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Goto the directory from part one of this tutorial where you have your &lt;strong&gt;&lt;em&gt;model folder&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Create a new directory called &lt;strong&gt;api&lt;/strong&gt; &lt;em&gt;side-by-side&lt;/em&gt; with the model folder, It should look like this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o596h7V6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Daltonic/predictive/raw/main/screenshots/api/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o596h7V6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Daltonic/predictive/raw/main/screenshots/api/2.png" alt="Project Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;strong&gt;&lt;em&gt;api folder&lt;/em&gt;&lt;/strong&gt; in VSCode and install the following libraries using the terminal.&lt;/p&gt;

&lt;p&gt;pip install fastapi&lt;br&gt;
pip install uvicorn[standard]&lt;br&gt;
pip install scikit-learn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On VScode click on extensions and install &lt;strong&gt;&lt;em&gt;Thunder Client&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congratulations, that is all that you will need for now, here is how your VScode should look, minus the theming.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmVJecwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633159892539_Screenshot%2B207.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmVJecwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633159892539_Screenshot%2B207.png" alt="VScode Project structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please make sure you are on the &lt;strong&gt;api&lt;/strong&gt; working directory, else just change the directory into it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Importing Libraries&lt;/strong&gt;&lt;br&gt;
Within the &lt;strong&gt;api folder&lt;/strong&gt;, create a new file named &lt;strong&gt;&lt;em&gt;"main.py"&lt;/em&gt;&lt;/strong&gt;, this is where all the programming logic will reside. Once you have created this file, paste the following code snippets inside it.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Importing necessary libraries
import uvicorn
import pickle
from pydantic import BaseModel
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;uvicorn&lt;/strong&gt; library is used to create a server having a host and port of your preference for communicating with our API via &lt;strong&gt;HTTP&lt;/strong&gt; requests and responses.&lt;/p&gt;

&lt;p&gt;We use the &lt;strong&gt;pickle&lt;/strong&gt; library to load up our trained model from part one of this series.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;BaseModel&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;class from the **pydantic&lt;/strong&gt; library is used for defining our API request parameters. This is important for ensuring that we are sending the right data types to our trained machine learning model.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;FastAPI&lt;/strong&gt; library helps us define the routes and the functions a route will run when accessed by a client. It also helps us define the responses we give for a request.&lt;/p&gt;

&lt;p&gt;Lastly, the CORSMiddleware helps us define the domains that will get resources from our API. This is a very important configuration in a FastAPI project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initializing the fast API&lt;/strong&gt;&lt;br&gt;
The following code block initializes the fastAPI, whitelist the domains origins that can access our API endpoints, and configures it as a middleware.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Initializing the fast API server
app = FastAPI()
origins = [
    "http://localhost.tiangolo.com",
    "https://localhost.tiangolo.com",
    "http://localhost",
    "http://localhost:8080",
    "http://localhost:3000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Terrific job, now let’s advance to loading up our trained machine learning model from part one of this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loading up the Trained Model&lt;/strong&gt;&lt;br&gt;
Copy and paste the following codes on your VScode &lt;strong&gt;main.py&lt;/strong&gt; file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Loading up the trained model
model = pickle.load(open('../model/hireable.pkl', 'rb'))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Using the pickle library, we are loading the trained model in combination with the Python &lt;strong&gt;open function&lt;/strong&gt;. Take note of the path to the trained pickle model, we are accessing it from the &lt;strong&gt;model folder&lt;/strong&gt;. Although, you can access your trained model from any directory provided that you specify it in the Python open function. However, for the sake of this tutorial, we should all follow the same style guide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Defining the model input types&lt;/strong&gt;&lt;br&gt;
Again, copy and paste the codes below into your code editor.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Defining the model input types
class Candidate(BaseModel):
    gender: int
    bsc: float
    workex: int
    etest_p: float
    msc: float
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Base on the BaseModel class, we are defining a class called &lt;strong&gt;“Candidate”&lt;/strong&gt;. By doing this we are instructing our model prediction route to only accept the data types that conform to the specifications in the Candidate class. This immensely helps us collect the right data types for our trained machine learning model and reduce errors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the Home Route&lt;/strong&gt;&lt;br&gt;
This is a route that specifies what we respond to our users when they visit the home route. For this project, we will just give them a welcome message. Paste the following codes to your code editor.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Setting up the home route
@app.get("/")
def read_root():
    return {"data": "Welcome to online employee hireability prediction model"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Setting up the Prediction Route&lt;/strong&gt;&lt;br&gt;
Now let's stitch all these codes together. Paste the following code on your editor and let me explain.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Setting up the prediction route
@app.post("/prediction/")
async def get_predict(data: Candidate):
    sample = [[
        data.gender,
        data.bsc,
        data.workex,
        data.etest_p,
        data.msc
    ]]
    hired = model.predict(sample).tolist()[0]
    return {
        "data": {
            'prediction': hired,
            'interpretation': 'Candidate can be hired.' if hired == 1 else 'Candidate can not be hired.'
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Firstly, when a user sends a post data to our prediction route, we use the Candidate class to bind it to the request body and extract the essential data we specified into a multi-dimensional array called &lt;strong&gt;“sample”&lt;/strong&gt;. Secondly, we give this array to our model for prediction and save the result in another variable called &lt;strong&gt;“hired”&lt;/strong&gt;. Lastly, we send a response back to the client with either &lt;em&gt;“Candidate can be hired”&lt;/em&gt; or &lt;em&gt;“Candidate can not be hired”&lt;/em&gt; base on the prediction of our model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuring the Server Host and Port&lt;/strong&gt;&lt;br&gt;
Finally, we do a quick server configuration instructing the uvicorn library to start up our server on the specified host and port number whenever the &lt;strong&gt;main.py&lt;/strong&gt; file is executed. See the codes below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Configuring the server host and port
if __name__ == '__main__':
    uvicorn.run(app, port=8080, host='0.0.0.0')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Congratulations, you have just built a machine learning API. Now let’s do quick testing to see if it's all good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-api-endpoints"&gt;
  &lt;/a&gt;
  Testing the API Endpoints
&lt;/h2&gt;

&lt;p&gt;Adhere to the following instructions to test the API endpoints.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the VScode interface, click on the Thunder Client.&lt;/li&gt;
&lt;li&gt;Create a new request.&lt;/li&gt;
&lt;li&gt;Select the post option.&lt;/li&gt;
&lt;li&gt;Enter "&lt;a href="http://localhost:8080/prediction"&gt;http://localhost:8080/prediction&lt;/a&gt;" on the address bar.&lt;/li&gt;
&lt;li&gt;Goto the body tab and supply the parameters below.&lt;/li&gt;
&lt;li&gt;Finally, click on send.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will have something like this if you had done the above steps correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1-hZcI6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Daltonic/predictive/raw/main/screenshots/api/3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-hZcI6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Daltonic/predictive/raw/main/screenshots/api/3.png" alt="Testing the Prediction Route"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also send another request to the home route but use the GET method instead. You should get something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RneTrXFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633166067545_Screenshot%2B208.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RneTrXFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633166067545_Screenshot%2B208.png" alt="Testing the Home Route"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hurray, you have just completed two out of the three-part series on how to build a predictive machine learning model. In the third and last article for this series, you will learn how to consume this API using ReactJs. You can see the full source code on my &lt;a href="https://github.com/Daltonic/predictive/tree/main/api"&gt;Git Repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In conclusion, preparing a deployable machine learning model in the past has been a pain on the neck but not anymore. You have seen how easy it is to do so with the FastAPI framework built upon the Python programming language. I believe that FastAPI is the first simple solution for developers to bridge the gap between machine learning and web development. In our next tutorial, we will see this in action by hooking it up with ReactJs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-author"&gt;
  &lt;/a&gt;
  About Author
&lt;/h2&gt;

&lt;p&gt;Gospel Darlington is a remote &lt;strong&gt;Fullstack&lt;/strong&gt; web developer, prolific with technologies such as &lt;strong&gt;VueJs&lt;/strong&gt;, &lt;strong&gt;Angular&lt;/strong&gt;, &lt;strong&gt;ReactJs&lt;/strong&gt;, and &lt;strong&gt;API development&lt;/strong&gt;. He takes a huge interest in the development of high-grade and responsive web applications.&lt;/p&gt;

&lt;p&gt;Gospel Darlington currently works as a &lt;strong&gt;freelancer developing apps and writing tutorials&lt;/strong&gt; that teach other developers how to integrate software products into their projects.&lt;/p&gt;

&lt;p&gt;He spends his free time &lt;strong&gt;coaching young people&lt;/strong&gt; on how to be successful in life. His hobbies include inventing new recipes, book writing, songwriting, and singing. You can reach me on &lt;a href="https://daltonic.github.io/"&gt;Website&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/darlington-gospel-aa626b125/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/idaltonic"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/darlington.gospel01"&gt;Facebook&lt;/a&gt;, or &lt;a href="https://github.com/Daltonic"&gt;GitHub&lt;/a&gt; for any discussion.&lt;/p&gt;

</description>
      <category>python</category>
      <category>react</category>
      <category>machinelearning</category>
      <category>fastapi</category>
    </item>
    <item>
      <title>Ways to Make Money?</title>
      <author>Thu Htet Tun</author>
      <pubDate>Sat, 02 Oct 2021 09:49:07 +0000</pubDate>
      <link>https://dev.to/thuhtetdev/ways-to-make-money-19gc</link>
      <guid>https://dev.to/thuhtetdev/ways-to-make-money-19gc</guid>
      <description>&lt;p&gt;hello guys!&lt;/p&gt;

&lt;p&gt;I won't explain you with long and complicate words for that coz everybody can make money on their own way,&lt;br&gt;
so here's the key points to modify your mind.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don't ever think about making money is hard&lt;/li&gt;
&lt;li&gt;You can make money right now but amount will be based on yours.&lt;/li&gt;
&lt;li&gt;You can't make money right now .. it takes time to make money.. but amount will be based on yours preparation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's all. &lt;br&gt;
Making money is not hard. Choose your way.&lt;/p&gt;

&lt;p&gt;For me, I'm not that rich now. But I can live on my own and currently follow that No.3 rule to set up my mind. I wanna make more income streams as much as I can. I'm currently working on a full time job but I wanna expand my income by teaching and sharing. &lt;br&gt;
After that, making passive incomes will be my final target.&lt;/p&gt;

&lt;p&gt;Think about what's your method to make money.&lt;br&gt;
Share in this comment section&lt;/p&gt;

&lt;p&gt;Thanks for your time.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Awesome Card Design for Website with HTML CSS</title>
      <author>Sadee</author>
      <pubDate>Sat, 02 Oct 2021 09:41:39 +0000</pubDate>
      <link>https://dev.to/codewithsadee/awesome-card-design-for-website-with-html-css-46i</link>
      <guid>https://dev.to/codewithsadee/awesome-card-design-for-website-with-html-css-46i</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/g9VdvKx8fuM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How to Create Awesome Card Design for Website with HTML CSS&lt;/p&gt;

&lt;p&gt;In this video I will show you how to create creative card design with hover effect step by step&lt;br&gt;
Website Component Design&lt;/p&gt;

&lt;p&gt;⌛️ | 𝐀𝐫𝐞 𝐲𝐨𝐮 𝐢𝐧𝐭𝐞𝐫𝐞𝐬𝐭𝐞𝐝 𝐢𝐧 𝐚 𝐜𝐞𝐫𝐭𝐚𝐢𝐧 𝐬𝐞𝐜𝐭𝐢𝐨𝐧? 𝐔𝐬𝐞 𝐓𝐢𝐦𝐞𝐬𝐭𝐚𝐦𝐩𝐬&lt;br&gt;
  →  0:00 Demo&lt;br&gt;
  →  0:17 File Structure &amp;amp; Code&lt;br&gt;
  →  8:05 Final Preview&lt;/p&gt;

&lt;p&gt;📥 | 𝐆𝐞𝐭 𝐚𝐥𝐥 𝐢𝐦𝐚𝐠𝐞𝐬 𝐭𝐡𝐚𝐭 𝐈 𝐮𝐬𝐞𝐝&lt;br&gt;
  →  &lt;a href="https://drive.google.com/file/d/1P31-"&gt;https://drive.google.com/file/d/1P31-&lt;/a&gt;... (.zip)&lt;/p&gt;

&lt;p&gt;🅰️ | 𝐆𝐞𝐭 𝐭𝐡𝐞 𝐟𝐨𝐧𝐭 𝐈 𝐮𝐬𝐞𝐝&lt;br&gt;
  →  Open Sans : &lt;a href="https://fonts.google.com/specimen/Ope"&gt;https://fonts.google.com/specimen/Ope&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;📥 | 𝐈𝐜𝐨𝐧 𝐋𝐢𝐧𝐤&lt;br&gt;
  →  &lt;a href="https://ionic.io/ionicons/usage"&gt;https://ionic.io/ionicons/usage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❤️ | 𝐈𝐧𝐭𝐞𝐫𝐞𝐬𝐭𝐞𝐝 𝐢𝐧 𝐬𝐞𝐞𝐢𝐧𝐠 𝐦𝐨𝐫𝐞 𝐯𝐢𝐝𝐞𝐨𝐬? 𝐒𝐔𝐁𝐒𝐂𝐑𝐈𝐁𝐄 𝐍𝐎𝐖&lt;br&gt;
  →  &lt;a href="https://bit.ly/3m4UgF5"&gt;https://bit.ly/3m4UgF5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👤 | 𝐋𝐢𝐤𝐞 - 𝐅𝐨𝐥𝐥𝐨𝐰 &amp;amp; 𝐒𝐮𝐛𝐬𝐜𝐫𝐢𝐛𝐞 𝐌𝐞&lt;br&gt;
  →  Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
  →  Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
  →  YouTube : &lt;a href="https://bit.ly/3m4UgF5"&gt;https://bit.ly/3m4UgF5&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Open Sourcing URL Shortener</title>
      <author>Rishabh Rawat</author>
      <pubDate>Sat, 02 Oct 2021 09:26:42 +0000</pubDate>
      <link>https://dev.to/rishabh570/open-sourcing-url-shortener-2g3d</link>
      <guid>https://dev.to/rishabh570/open-sourcing-url-shortener-2g3d</guid>
      <description>&lt;p&gt;Open Source Software (OSS) has been the main driving force in democratizing access to so many awesome tools with way more transparency than ever possible. It’s never too late to start giving back to the community and contribute towards a better OSS culture. That’s why we started this journey by open-sourcing our in-house URL Shortener service.  The reason for choosing this is to assess the road ahead and be in a better position to embark on our open source journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#road-to-open-sourcing-url-shortener"&gt;
  &lt;/a&gt;
  Road to Open Sourcing URL Shortener
&lt;/h2&gt;

&lt;p&gt;Let’s take a look at the steps involved in open sourcing this service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-business-logic-abstraction"&gt;
  &lt;/a&gt;
  1. Business logic abstraction
&lt;/h3&gt;

&lt;p&gt;Being an internal service, the URL Shortener was strongly tied with our tracking API which is used for, as the name suggests, tracking purposes. We needed to decouple these services before open-sourcing URL Shortener as having internal dependencies in an open-source project is unfeasible for obvious reasons. This called for refactoring.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iza1cifd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1dpcte9ppsa3ez8juzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iza1cifd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1dpcte9ppsa3ez8juzw.png" alt="URL shortener initial setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown in the diagram, CTA (Call To Action) token is generated in the notifications service and is passed down to the URL shortener whenever a notification needs to be sent. URL Shortener then stores the CTA token &amp;lt;&amp;gt; original URL mapping in a separate table. And, it simply passes the CTA token and the original URL to the tracking API whenever someone clicks on the short link. As you might guess, the CTA token has nothing to do with a URL shortening service and therefore it should not have any context of such tokens.&lt;/p&gt;

&lt;p&gt;This presented before us, the quest to pull URL Shortener out of the loop and stop passing any redundant data to it. Let’s take a look at the steps involved:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MtCqGEP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6kund78e8img1e90hrd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MtCqGEP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6kund78e8img1e90hrd.png" alt="URL Shortener Business Logic Abstraction HLD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the above HLD proposes a different way of passing down the CTA Token in a way where URL Shortener is not bothered with unnecessary data. Let’s go through it step-by-step:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Notification services hit the URL Shortener to get the short URL whenever a notification needs a short link (eg. referral emails, market open reminder SMS, order updates SMS, etc.).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; URL Shortener generates the short URL, maps it with the corresponding original (or “long”) URL, and returns the result to the notification service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; After sending the notification, the shortener forwards the CTA token &amp;amp; the corresponding original URL to our tracking API service when someone clicks on the short URL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Tracking API stores this original URL to CTA token mapping in the PostgreSQL.&lt;/p&gt;

&lt;p&gt;Forwarding the data to tracking API happens like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Tvy9pPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jlu3oks6w698nwd3bh5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Tvy9pPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jlu3oks6w698nwd3bh5.png" alt="URL Shortener Modified Tracking HLD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; User clicks on the short link received through email or SMS notification.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; URL Shortener receives the short URL user clicked and redirects him/her to the original URL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Before redirecting the user to the original URL, the shortener also emits a kafka event that contains the short URL that the user clicked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Tracking API, upon receiving the short URL, stores the data corresponding to that in the PostgreSQL table for analytics purposes. No user-specific data is used in any shape &amp;amp; form. We only use the metadata to understand the delivery, click rates, etc.&lt;/p&gt;

&lt;p&gt;And that is it for the business logic abstraction. Following these steps, we were able to make the URL Shortener loosely coupled with our tracking API and free from internal dependencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-refactor"&gt;
  &lt;/a&gt;
  2. Refactor
&lt;/h3&gt;

&lt;p&gt;The URL Shortener service was created a little more than 2 years ago to fulfil the needs of an internal URL shortening service. It was just a bare-bone HTTP server with SQLite as the database. But with the increase in the notification sent from smallcase, the number of requests to the shortener has increased significantly over time, it gets around 500k (read + write) requests per month. There were a couple of things that need addressal:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simple &amp;amp; non-scalable nature of the service&lt;/li&gt;
&lt;li&gt;No logging pipeline to debug when something goes wrong.&lt;/li&gt;
&lt;li&gt;No way to avoid getting duplicate short keys for different URLs.&lt;/li&gt;
&lt;li&gt;No purging of stale entries from the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#moving-to-fastify"&gt;
  &lt;/a&gt;
  Moving to Fastify
&lt;/h4&gt;

&lt;p&gt;As I mentioned, the initial setup was not reliable enough for the growing needs. There were some major changes required in the implementation. There were three options we had in mind:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using S3, AWS Lambda, and CloudFront&lt;/li&gt;
&lt;li&gt;Using AWS API Gateway and Dynamo DB&lt;/li&gt;
&lt;li&gt;Fastify with MongoDB &amp;amp; Redis&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s talk about each one of them.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#using-s3-aws-lambda-and-cloudfront"&gt;
  &lt;/a&gt;
  Using S3, AWS Lambda, and CloudFront
&lt;/h5&gt;

&lt;p&gt;This approach aims to use S3 as a redirection engine by activating website hosting on the bucket. This way, for each short URL we can create a new empty object with a long URL attached in the website redirect metadata. On top of this, we can create a bucket lifecycle policy to purge the entries older than a set timeframe.&lt;/p&gt;

&lt;p&gt;To create an admin page, all we need is a basic page hosted on S3 which will trigger a POST request to API Gateway invoking a lambda function which will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a short key&lt;/li&gt;
&lt;li&gt;create an empty S3 object&lt;/li&gt;
&lt;li&gt;store the short URL (/) as the redirection destination in the object properties.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While going ahead with this approach meant we didn’t have to worry about scalability or &lt;a href="https://www.digitalocean.com/community/tutorials/what-is-high-availability"&gt;High Availability&lt;/a&gt;, it certainly ties us with AWS offerings and implicitly denies any flexibility when it comes to change of service vendor.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#using-aws-api-gateway-with-dynamo-db"&gt;
  &lt;/a&gt;
  Using AWS API Gateway with Dynamo DB
&lt;/h5&gt;

&lt;p&gt;If we observe closely, all that lambda function is doing is storing the short URL in the empty S3 object. Hence, we can cut out on the resources &amp;amp; cost using this approach. Let’s take a look at how API Gateway combined with Dynamo DB would work here.&lt;/p&gt;

&lt;p&gt;There are four phases a request goes through when using the API Gateway:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Method Request&lt;/li&gt;
&lt;li&gt;Integration Request&lt;/li&gt;
&lt;li&gt;Integration Response&lt;/li&gt;
&lt;li&gt;Method Response&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-settings-method-request.html"&gt;Method Request&lt;/a&gt; involves creating API method resources, attaching HTTP verbs, authorisation, validation, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-integration-settings-integration-request.html"&gt;Integration Request&lt;/a&gt; is responsible for setting up the integration between API Gateway &amp;amp; DynamoDB. One thing to note here, we need to modify the request &amp;amp; change it to a format that DynamoDB understands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-settings-method-response.html"&gt;Method Response&lt;/a&gt; is configured to send the response back to the client which can be 200, 400, or some other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-integration-settings-integration-response.html"&gt;Integration Response&lt;/a&gt; is what we get from DynamoDB but again, we need to convert this back into the format that the client understands.&lt;/p&gt;

&lt;p&gt;Again, while this approach allows us to get rid of the lambda and uses Apache VTL to communicate with DynamoDB, this presents the vendor lock-in we saw in the previous approach as it is strongly tied to AWS offerings. Also, it leaves us with us zero-control over the execution.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#fastify-with-mongodb-amp-redis"&gt;
  &lt;/a&gt;
  Fastify with MongoDB &amp;amp; Redis
&lt;/h5&gt;

&lt;p&gt;It is immediately noticeable that this approach gives us complete control over the service with no vendor lock-in. We can choose any data storage solution as per our needs, custom logging setup, and even in-house key generation service if we want.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;a href="https://www.fastify.io/benchmarks/"&gt;benchmarks&lt;/a&gt;, Fastify is the clear winner among other Nodejs frameworks. It has &lt;a href="https://github.com/delvedor/find-my-way"&gt;faster routing&lt;/a&gt;, &lt;a href="https://github.com/fastify/fast-json-stringify"&gt;JSON handling with faster rendering&lt;/a&gt; and a bunch of ready-made &lt;a href="https://www.fastify.io/ecosystem/"&gt;plugins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While this is perfect in terms of what we wanted, it also means we now have to make sure that MongoDB and Redis are highly available otherwise it directly affects our service. This means developers’ bandwidth is extensively required which was not the case in the previous approaches.&lt;/p&gt;

&lt;p&gt;With our Fastify application in place, we were able to plug our improved custom logging pipeline which is a huge benefit to the developer experience because the old pipeline was not reliable for the scale we now operate at.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adding-logging-pipeline"&gt;
  &lt;/a&gt;
  Adding logging pipeline
&lt;/h4&gt;

&lt;p&gt;With the increasing number of requests and possibly errors, we needed a proper logging setup to debug and monitor the service. That’s why we chose &lt;a href="https://www.npmjs.com/package/bunyan"&gt;bunyan&lt;/a&gt; to log insightful data in our application. These logs sit conveniently on our new logging pipeline running on EFK (or, Elasticsearch Fluentd Kibana) stack. While this deserves a separate blog post on its own, let’s take a brief look at how the logs travel from our application to the &lt;a href="https://www.elastic.co/guide/en/kibana/current/dashboard.html"&gt;kibana dashboard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wHc_dSbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e3euqz7u5twhzko1dk4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHc_dSbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e3euqz7u5twhzko1dk4.png" alt="Logging pipeline used for URL shortener"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The logs that we have written inside the application are produced to the standard output. The fluentd collector (which is present in all the applications using the EFK logging pipeline) takes all the logs from the stdout and forwards them to the fluentd aggregator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The aggregator is simply where all the logs get collected from various &lt;a href="https://aws.amazon.com/ec2/"&gt;AWS EC2&lt;/a&gt; application instances. All the logs then go through the &lt;a href="https://www.fluentd.org/plugins"&gt;plugins&lt;/a&gt; installed to process the logs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These potentially transformed logs are then sent to the Elasticsearch nodes over the network where this data gets stored. The structure of the logs needs to follow a predetermined pattern and that’s why Elasticsearch needs an index mapping to understand the structure of logs comings its way. This helps in &lt;a href="https://www.elastic.co/blog/what-is-an-elasticsearch-index"&gt;indexing&lt;/a&gt; and storing data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kibana uses the structured logs data to show the logs nicely on a &lt;a href="https://www.elastic.co/guide/en/kibana/current/dashboard.html"&gt;dashboard&lt;/a&gt;. Since the data is structured, Kibana enables us to create visualisations and custom dashboards (a collection of different visualisations) on top of it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#generating-unique-short-key"&gt;
  &lt;/a&gt;
  Generating unique short key
&lt;/h4&gt;

&lt;p&gt;With the increasing number of short key generations, there’s a higher probability that the key generation service can spit out the same short keys for two different original (or long) URLs, if not handled correctly. The solution to this problem is simply not let a short key get reused. Now there are two ways to achieve this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Do not generate a duplicate short key&lt;/li&gt;
&lt;li&gt;Retry until a unique short key is generated&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s take a look at both approaches.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#do-not-generate-a-duplicate-short-key"&gt;
  &lt;/a&gt;
  Do not generate a duplicate short key
&lt;/h5&gt;

&lt;p&gt;To make sure we don’t generate a duplicate short key ever, we need to know what keys have been generated already. One approach could be creating two tables in PostgreSQL, one for the available keys (let’s say AvlK) and one for the keys that are occupied (let’s say OccK).&lt;/p&gt;

&lt;p&gt;So while creating a short URL, we would fetch one unused key from AvlK table, add it to OccK table and return it. Two database operations, one short URL. Not fair.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#retry-until-a-unique-short-key-is-generated"&gt;
  &lt;/a&gt;
  Retry until a unique short key is generated
&lt;/h5&gt;

&lt;p&gt;Instead of maintaining two tables just to get one short key, we can work with just one PostgreSQL table which will store the keys already occupied. We can then simply generate a random key, check if it is occupied, and assign it if it is not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T4N_LiIQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eoo54yt30p5uaboiz9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4N_LiIQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eoo54yt30p5uaboiz9k.png" alt="NanoId Collision Calculator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at the results on &lt;a href="https://zelark.github.io/nano-id-cc/"&gt;nanoId collision calculator&lt;/a&gt;, we can see that after three days of generating short keys at rate of 70/hr, there is 1% probability of encountering at least one collision.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;70 keys generation per hour * 24 hours * 3 days = 5040 short keys
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So 1% probability means, having at least &lt;strong&gt;one collision in every 5k short keys generation&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#passively-purging-the-url-mappings"&gt;
  &lt;/a&gt;
  Passively purging the URL mappings
&lt;/h4&gt;

&lt;p&gt;Short URLs are not supposed to have a lifetime of decades or even more than 1 year depending upon the use case. As it is not practical to store the entries forever. That’s why purging is required. But the implementation can be flexible. At smallcase, short URLs are majorly generated for two broad categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For transactional notifications&lt;/li&gt;
&lt;li&gt;For campaigns&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The short links generated for the transactional notifications are not supposed to be active forever whereas the links that are generated for the campaigns are supposed to be active till the campaign is active. Considering the differences in the lifespan of different short links, they needed to be treated differently when it comes to purging the entries from the database.&lt;/p&gt;

&lt;p&gt;One approach was to run a job that would remove all the entries which are older than a set timeframe. But turns out there was a better way with minimal additional effort. Instead of running a dedicated job to purge entries, we could simply handle this when we’re creating short URLs. Remember we were doing retries to land upon a key that was not already occupied? A minor change in that process handled purging for us. Just when you get an already occupied key, allow overwriting to that key only if it has hit the expiration date (which is also stored during the creation of the short key along with the mapping). This increases the time of creating short links comparatively but this is the trade-off you need to make to ensure unique keys.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-documentation"&gt;
  &lt;/a&gt;
  3. Documentation
&lt;/h3&gt;

&lt;p&gt;Lastly, the crucial part of an open-source project. Documentation. These were the following things that were on the checklist:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;README.md&lt;/li&gt;
&lt;li&gt;CONTRIBUTING.md&lt;/li&gt;
&lt;li&gt;CODE_OF_CONDUCT.md&lt;/li&gt;
&lt;li&gt;LICENCE&lt;/li&gt;
&lt;li&gt;CODEOWNERS&lt;/li&gt;
&lt;li&gt;Templates for creating issues &amp;amp; submitting PRs for streamlined flow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And finally, making the project public! 🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What Next?
&lt;/h2&gt;

&lt;p&gt;This was our journey to open-sourcing the URL shortener service that we use at smallcase. I believe open source not only helps in building a better tool, but it also builds a community of people that care about equal access to software. At the end of the day, we learn from each other.&lt;/p&gt;

&lt;p&gt;The project is available here: &lt;a href="//github.com/smallcase/smalllinks"&gt;github.com/smallcase/smalllinks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please feel free to create an issue on Github if you find any improvement opportunities or bugs present in the project. I’ll be happy to connect 😃.&lt;/p&gt;

</description>
      <category>fastify</category>
      <category>urlshortener</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How Internet Message Access Protocol(IMAP) works in Node JS</title>
      <author>Venkat3750</author>
      <pubDate>Sat, 02 Oct 2021 09:18:11 +0000</pubDate>
      <link>https://dev.to/venkat3750/how-internet-message-access-protocol-imap-works-in-node-js-1jh5</link>
      <guid>https://dev.to/venkat3750/how-internet-message-access-protocol-imap-works-in-node-js-1jh5</guid>
      <description>&lt;p&gt;Hello my dear peers 😃! Hope you're doing well. Welcome to my tech blog and this time we are discussing about &lt;strong&gt;IMAP&lt;/strong&gt; package and it's uses in Node JS with real time code snippet examples. In this, first will only focus on reading emails.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nodeimap-is-an-imap-client-module-for-nodejs"&gt;
  &lt;/a&gt;
  node-imap is an IMAP client module for node.js.
&lt;/h4&gt;

&lt;p&gt;Let's open our terminal and hit &lt;strong&gt;npm install node-imap.&lt;/strong&gt; to install IMAP package.&lt;/p&gt;

&lt;p&gt;In this blog, we are mainly focusing on how to read email attachments based on the &lt;strong&gt;DATE RANGE&lt;/strong&gt;, &lt;strong&gt;FROM&lt;/strong&gt; particular email address and it's &lt;strong&gt;SUBJECT&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's see from the below example code which fetches first 3 email messages from the mail box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var Imap = require('node-imap'),
    inspect = require('util').inspect;

var imap = new Imap({
  user: 'mygmailname@gmail.com',
  password: 'mygmailpassword',
  host: 'imap.gmail.com',
  port: 993,
  tls: true
});

function openInbox(cb) {
  imap.openBox('INBOX', true, cb);
}

imap.once('ready', function() {
  openInbox(function(err, box) {
    if (err) throw err;
    var f = imap.seq.fetch('1:3', {
      bodies: 'HEADER.FIELDS (FROM TO SUBJECT DATE)',
      struct: true
    });
    f.on('message', function(msg, seqno) {
      console.log('Message #%d', seqno);
      var prefix = '(#' + seqno + ') ';
      msg.on('body', function(stream, info) {
        var buffer = '';
        stream.on('data', function(chunk) {
          buffer += chunk.toString('utf8');
        });
        stream.once('end', function() {
          console.log(prefix + 'Parsed header: %s', inspect(Imap.parseHeader(buffer)));
        });
      });
      msg.once('attributes', function(attrs) {
        console.log(prefix + 'Attributes: %s', inspect(attrs, false, 8));
      });
      msg.once('end', function() {
        console.log(prefix + 'Finished');
      });
    });
    f.once('error', function(err) {
      console.log('Fetch error: ' + err);
    });
    f.once('end', function() {
      console.log('Done fetching all messages!');
      imap.end();
    });
  });
});

imap.once('error', function(err) {
  console.log(err);
});

imap.once('end', function() {
  console.log('Connection ended');
});

imap.connect();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are scenarios where you need to fetch only the attachments from the email and process it for a different purpose. In such cases, please refer below code example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var imap = new Imap({
  user: 'mygmailname@gmail.com',
  password: 'mygmailpassword',
  host: 'imap.gmail.com',
    port: 993,
    tls: true,
  });
  imap.once("ready", function () {
    var fs = require("fs"),
      fileStream;
    imap.openBox("INBOX", true, function (err, box) {
      if (err) throw err;
      try {
        imap.search(
          [
            ["FROM", FROM_MAIL],
            ["HEADER", "SUBJECT", SUBJECT],
            ["UNSEEN", ["SINCE", "Day, Year"]],
          ],
          function (err, results) {
            if (err) throw err;
            try {
              var f = imap.fetch(results, {
                bodies: ["HEADER.FIELDS (FROM TO SUBJECT DATE)"],
                struct: true,
              });
              f.on("message", function (msg, seqno) {
                console.log("Message #%d", seqno);

                var prefix = "(#" + seqno + ") ";
                msg.on("body", function (stream, info) {
                  var buffer = "";
                  stream.on("data", function (chunk) {
                    buffer += chunk.toString("utf8");
                  });
                  stream.once("end", function () {
                    console.log(
                      prefix + "Parsed header: %s",
                      Imap.parseHeader(buffer)
                    );
                  });
                });
                msg.once("attributes", function (attrs) {
                  // console.log("test", attrs);
                  var attachments = findAttachmentParts(attrs.struct);
                  console.log(
                    prefix + "Has attachments: %d",
                    attachments.length
                  );
                  for (var i = 0, len = attachments.length; i &amp;lt; len; ++i) {
                    var attachment = attachments[i];

                    var f = imap.fetch(attrs.uid, {
                      //do not use imap.seq.fetch here
                      bodies: [attachment.partID],
                      struct: true,
                    });
                    //build function to process attachment message
                    f.on("message", processAttachment(attachment));
                  }
                });
                msg.once("end", function () {
                  console.log(prefix + "Finished email");
                });
              });
              f.once("error", function (err) {
                console.log("Fetch error: " + err);
              });
              f.once("end", function () {
                console.log("Done fetching all messages!");
                imap.end();
              });
            } catch (e) {
              console.log("err", e);
            }
          }
        );
      } catch (e) {
        console.log("log", e);
      }
    });
  });

  imap.once("error", function (err) {
    console.log(err);
  });

  imap.once("end", function () {
    console.log("Connection ended");
  });
  imap.connect();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The downloaded email attachment must be decoded using &lt;strong&gt;Base64Decode()&lt;/strong&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function processAttachment(attachment) {
  var filename = attachment.params.name;
  var encoding = attachment.encoding;
  var name = filename.split(".")[1];
  console.log("log", name);

  return function (msg, seqno) {
    if (name === "pdf") {
      var prefix = "(#" + seqno + ") ";
      msg.on("body", function (stream, info) {
        //Create a write stream so that we can stream the attachment to file;
        console.log(
          prefix + "Streaming this attachment to file",
          filename,
          info
        );
        var path = require("path");
       // var dirPath = path.join(__dirname, "/attachments");
        var writeStream = fs.createWriteStream(filename);
        writeStream.on("finish", function () {
          console.log(prefix + "Done writing to file %s", filename);
        });

        if (toUpper(encoding) === "BASE64") {
          stream.pipe(new base64.Base64Decode()).pipe(writeStream);
        } else {
          stream.pipe(writeStream);
        }
      });
      msg.once("end", function () {
        console.log(prefix + "Finished attachment %s", filename);
      });
    }
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The above process attachment method has a condition check of having only PDF docs.&lt;/p&gt;

&lt;p&gt;So, after processing the email attachments would you recommend those emails still be present in same inbox? No not at all, because we need to move that to some other folder so that we can differentiate the newly arrived emails. &lt;/p&gt;

&lt;p&gt;So, you can move the processed email to specific folder from the inbox using below code example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; imap.seq.move(seqno, "Processed", function (err) {
                  if (!err) {
                    console.log(seqno + ": move success");
                  }
                });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope you got atleast an idea how to work with imap package and with emails in Node JS 🎉🎉. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/node-imap"&gt;https://www.npmjs.com/package/node-imap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/mikebevz/node-imap"&gt;https://github.com/mikebevz/node-imap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for sticking around and holding on to the end.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>imap</category>
    </item>
    <item>
      <title>How to Make Your React Apps Responsive with a Custom Hook</title>
      <author>Francisco Mendes</author>
      <pubDate>Sat, 02 Oct 2021 09:11:32 +0000</pubDate>
      <link>https://dev.to/franciscomendes10866/how-to-make-your-react-apps-responsive-with-a-custom-hook-4hd3</link>
      <guid>https://dev.to/franciscomendes10866/how-to-make-your-react-apps-responsive-with-a-custom-hook-4hd3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;The hook I'm going to teach you today, despite being very simple, it's possible to do several things with it. For example if you want a certain component to have a certain behavior from a certain resolution, you can use this hook. &lt;/p&gt;

&lt;p&gt;However, you can also make responsiveness adjustments with it in a simple and fast way.&lt;/p&gt;

&lt;p&gt;The main reason I created this hook is that I needed to access the current width of the page, because I was using a calendar and I wanted it to adapt its behavior from a certain resolution because it was not responsive with the breakpoints from the css framework I was using.&lt;/p&gt;

&lt;p&gt;And for that I decided to share with you the code of this hook as I will show you a simple example. Last but not least I will make the code for this example available in a github repository.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;p&gt;Today I'm only going to install one dependency, but it's not mandatory, this is just to make my work in this example easier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;classnames
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's immediately start working on our hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/hooks/useMediaQuery.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our hook will take a single argument which will be the min width of the page, which will be our target.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/hooks/useMediaQuery.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will import the &lt;code&gt;useState()&lt;/code&gt; hook so that we can store two properties in our state, the windowWidth and the isDesiredWidth.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/hooks/useMediaQuery.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isDesiredWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea of windowWidth is to store the with of the current window, while isDesiredWidth has to be a boolean to validate that the window's current width is less than minWidth (our target).&lt;/p&gt;

&lt;p&gt;Next, let's import the &lt;code&gt;useEffect()&lt;/code&gt; hook to be aware of the changes that are made, which in this case is the change and validation of the width of the window.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/hooks/useMediaQuery.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isDesiredWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will have to create a function that will be our handler, which will be used whenever the window resizes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/hooks/useMediaQuery.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isDesiredWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resizeHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this handler we'll get the width of the current window, then we'll compare it with our minWidth and finally we'll store the data obtained in our state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/hooks/useMediaQuery.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isDesiredWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resizeHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentWindowWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDesiredWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentWindowWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;minWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;currentWindowWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isDesiredWidth&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to create an event listener where whenever the window does a resize we want to invoke our resizeHandler function.&lt;/p&gt;

&lt;p&gt;And if the window doesn't resize, we'll cleanup our &lt;code&gt;useEffect()&lt;/code&gt; hook and remove the event listener.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/hooks/useMediaQuery.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isDesiredWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resizeHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentWindowWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDesiredWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentWindowWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;minWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;currentWindowWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isDesiredWidth&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resizeHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resizeHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then just return our isDesiredWidth so we can use the hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/hooks/useMediaQuery.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isDesiredWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resizeHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentWindowWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDesiredWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentWindowWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;minWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;currentWindowWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isDesiredWidth&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resizeHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resizeHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDesiredWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's create the styles for our App.jsx module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* @src/App.module.css */&lt;/span&gt;

&lt;span class="nc"&gt;.layout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f6f9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.layout&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#14274e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.mobile&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#394867&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.mobile&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f6f9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tablet&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#14274e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tablet&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#9ba4b4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now with our hook created and our App.jsx styles created, we can import both into the component. Then we'll use our hook to determine if it's mobile or tablet. In jsx we will do conditional rendering to have the desired visual result at each of the resolutions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/App.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;classNames&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;classnames&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./hooks/useMediaQuery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isMobile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;768&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTablet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
      &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classNames&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;isMobile&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mobile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;isTablet&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tablet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;desktop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;])}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isMobile&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mobile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isTablet&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tablet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Desktop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get a result similar to this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BwVYgJvN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1633163873/Kapture_2021-10-02_at_09.36.13-min_u6u32k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BwVYgJvN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1633163873/Kapture_2021-10-02_at_09.36.13-min_u6u32k.gif" alt="final app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As promised at the beginning of the article, to access the github repository click &lt;a href="https://github.com/FranciscoMendes10866/responsive-hook"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As always, I hope you found it interesting. If you noticed any errors in this article, please mention them in the comments. 🧑🏻‍💻&lt;/p&gt;

&lt;p&gt;Hope you have a great day! 👹&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>css</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why you should avoid using abstraction and interface</title>
      <author>Muhammad Fauzan</author>
      <pubDate>Sat, 02 Oct 2021 09:07:40 +0000</pubDate>
      <link>https://dev.to/fncolon/why-you-should-avoid-using-abstraction-and-interface-1cag</link>
      <guid>https://dev.to/fncolon/why-you-should-avoid-using-abstraction-and-interface-1cag</guid>
      <description>&lt;p&gt;Using &lt;strong&gt;abstraction&lt;/strong&gt; lead us to write another &lt;strong&gt;higher-level of abstraction&lt;/strong&gt; if it's not leads, then your abstraction is bad.&lt;/p&gt;

&lt;p&gt;e.g&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CrazyExample&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getValueAndOptions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//??&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;what is the benefit of hiding the complexity of a system? is it just to waste your time, you would be find the way back to your complexity during development again.&lt;/p&gt;

</description>
      <category>oop</category>
    </item>
    <item>
      <title>Why can't I see my post stats on DEV?</title>
      <author>Keff</author>
      <pubDate>Sat, 02 Oct 2021 08:58:14 +0000</pubDate>
      <link>https://dev.to/nombrekeff/why-can-t-i-see-my-post-stats-on-dev-2hp2</link>
      <guid>https://dev.to/nombrekeff/why-can-t-i-see-my-post-stats-on-dev-2hp2</guid>
      <description>&lt;p&gt;I see there is a stats section for posts and for my whole account, but they never show anything, they appear blank.&lt;/p&gt;

&lt;p&gt;Is there any way of getting access to them? Or should I do something else?&lt;/p&gt;

&lt;p&gt;Regards!&lt;/p&gt;

</description>
      <category>meta</category>
      <category>question</category>
      <category>help</category>
    </item>
    <item>
      <title>Why I stopped using API Platform</title>
      <author>Alessandro Chitolina</author>
      <pubDate>Sat, 02 Oct 2021 08:38:40 +0000</pubDate>
      <link>https://dev.to/alekitto/why-i-stopped-using-api-platform-2eki</link>
      <guid>https://dev.to/alekitto/why-i-stopped-using-api-platform-2eki</guid>
      <description>&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: Though I’m listing here what make my life harder when using API Platform, I still consider it a great solution to build rapid CRUD prototypes. This article is addressed to those who want build a long-term api-based solution.&lt;/p&gt;




&lt;p&gt;In principle there was FOSRestBundle, a shiny little magic box to create something similar to a REST API. Actually, there was too much magic in it..&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-then-api-platform-came-and-headaches-with-it"&gt;
  &lt;/a&gt;
  And then API Platform came, and headaches with it.
&lt;/h2&gt;

&lt;p&gt;Despite the documentation states th&lt;span id="rmm"&gt;a&lt;/span&gt;t “Everything is fully customizable through a powerful event system and strong OOP”, the truth is that is nearly impossibile to customise deep behaviours and logic inside the api component and the choice to tightly couple it to the Symfony Serializer (probably the less powerful and poor of configuration options serializers I ever seen) make it even worse. But this is what I discovered only at the end of this incredible journey into API Platform..&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-journey-begins"&gt;
  &lt;/a&gt;
  The journey begins
&lt;/h3&gt;

&lt;p&gt;The first thing I noted when I began to use API Platform was its no support for versioning. You can put a prefix in your path and pretend that is a versioning system, but the fact is that the tool does not help you at all. Ultimately I didn’t like versions in path: it is not so RESTy, I’d rather prefer to pass it through a request header (a custom one or an attribute of the Accept header).&lt;/p&gt;

&lt;p&gt;So I began to start exploring services, normalizers, final classes with twelve (!) required dependencies and four optional dependencies to discover that everything in API Platform revolves around the OpenAPI specification.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#openapi-oh-my"&gt;
  &lt;/a&gt;
  OpenAPI, oh my!
&lt;/h3&gt;

&lt;p&gt;I consider OpenAPI a great example on how NOT to write a specification. Partly because it tries to derive a protocol from an architectural standard (which REST is) and this is a nearly impossible task. And partly because of the limitations it puts upon a great designed protocol such as the HTTP.&lt;/p&gt;

&lt;p&gt;For example: OpenAPI limits the HTTP methods you can use to the standardised ones (not even &lt;em&gt;all&lt;/em&gt; the standardised methods, but this is another story), although the HTTP specification clearly states that a method is simply a group of US-ASCII characters. It does not even mandates the registration of non-standard methods to IANA, so why a specification used to define how to write your own API protocol should limit it?&lt;/p&gt;

&lt;p&gt;Anyway, the extraordinary effort to produce an OpenAPI schema leads to the impossibility to have a versioned API for real. When I realised that, my mind blown up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gju0wQVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxry52qnxj16grxkiiiw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gju0wQVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxry52qnxj16grxkiiiw.gif" alt="Mind blown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After overriding something like 14 services just to modify a single call contained in a final class which is required throughout all the API Platform codebase without specifying an interface, I started doubting..&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-journey-continues-dtos-serializer-and-validation"&gt;
  &lt;/a&gt;
  The journey continues: DTOs, Serializer and validation
&lt;/h2&gt;

&lt;p&gt;One of the most important things I learned from my work on monolithic projects was the use of DTOs and the rich model entities. They allowed me to avoid errors in database, simplifies the logics of dynamic forms and started to be a sort of holy grail of my projects: it was simply too convenient to use it.&lt;/p&gt;

&lt;p&gt;I thought that maybe the DTOs could help me with this problem too. I was wrong.&lt;/p&gt;

&lt;p&gt;API Platform does support DTOs, but not very well (to be honest, one of my colleagues told me that the DTOs support is better now, but when I tried, it was very very bad). There was not so much documentation, so I had to try to use them directly on code.&lt;/p&gt;

&lt;p&gt;First try: write a simple DTO, declare it in input and output of the ApiResource annotation, add validation annotations on DTOs properties, write the transformer, send correct data, everything’s ok. Then I tried to pass invalid data: 500.&lt;/p&gt;

&lt;p&gt;Umm.. I opened the web profiler, went to validation section and… surprise! API Platform called validation on the entity. WTF?!&lt;/p&gt;

&lt;p&gt;That approach is bad for multiple reasons, but is obviously incompatible with the rich model entities as invalid data will throw exceptions when trying to set them into the entity. In addition, if a field is invalid on the entity, but is not present on the DTO (or is present with an aliased name), an error with an unknown field is returned to the client. No way!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Edit:&lt;/strong&gt; someone told me that this behaviour is fixed now, but it was present at the time and anyway the DTOs support is still limited.&lt;/p&gt;

&lt;p&gt;What makes it worse, is the use of Symfony Serializer which is impossible to replace. Its scarcity of configuration options (at the time a basic functionality such as the ignore attribute was not present) and the lack of control about the attributes to be exposed and the object construction was frustrating.&lt;br&gt;&lt;br&gt;
Additionally, the use of deserialisers which can throw an exception on invalid data makes everything really unstable and unreliable because those errors are returned to the client in a completely different way than the validation errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZomEDUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rhmi7cmwksoyx4c52wm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZomEDUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rhmi7cmwksoyx4c52wm.jpg" alt="Headache"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#headaches-platform-the-end-of-the-journey"&gt;
  &lt;/a&gt;
  Headaches Platform: the end of the journey
&lt;/h2&gt;

&lt;p&gt;What makes everything more and more complicated was the intensive use of hydra and jsonld. The aim of API Platform is to be the only one, the only API present in the system. But in the real world you are probably working on one API exposed by one service developed alongside other services and other APIs. These APIs are probably communicating each other and expose foreign references and data.&lt;/p&gt;

&lt;p&gt;Producing only ONE documentation for the whole architecture can’t be done from one of these services as it cannot know the architecture of the other ones.&lt;/p&gt;

&lt;p&gt;Out-of-scope functionalities (JWT authentication, admin generators, etc), bad designed filters (cannot be aliased for example), pagination with pages (which are a frontend concept) and a limited support for PATCH requests gave me only the confirmation of my doubts:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;API Platform is not ready and is not designed to be a reliable API tool in a world of microservices.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#so-what"&gt;
  &lt;/a&gt;
  So what?
&lt;/h2&gt;

&lt;p&gt;So I started from scratch. Started a new Symfony project, begin writing stuff to have a powerful versioning system, to be compatible with rich model entities, without the limitations of OpenAPI and with DTOs to be a central point of the API architecture.&lt;/p&gt;

&lt;p&gt;Now I decided to open my code and publish it on GitHub. I wanted this project to be a rock solid toolbox to write REST APIs which are maintenable in a long long term project, learning from all the things I don’t like in other API toolsets.&lt;/p&gt;

&lt;p&gt;I called it Solido, and here’s the doc: &lt;a href="https://solid-o.github.io/docs/"&gt;https://solid-o.github.io/docs/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s obviously under active development and I’m looking for others to join me building a very strong, well written and useful open source API toolbox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVHtSA3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33afgcm6ympyq5j87esy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVHtSA3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33afgcm6ympyq5j87esy.jpg" alt="Github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading,&lt;br&gt;
A.&lt;/p&gt;

</description>
      <category>php</category>
      <category>apiplatform</category>
      <category>symfony</category>
    </item>
    <item>
      <title>JavaScript and its DataTypes</title>
      <author>jC-blip-ux</author>
      <pubDate>Sat, 02 Oct 2021 07:55:08 +0000</pubDate>
      <link>https://dev.to/jcblipux/javascript-and-its-datatypes-2bip</link>
      <guid>https://dev.to/jcblipux/javascript-and-its-datatypes-2bip</guid>
      <description>&lt;p&gt;JavaScript has data types to hold different types of values. And the two types of data types in JavaScript are:&lt;/p&gt;

&lt;p&gt;Primitive data type&lt;br&gt;
Non-primitive (reference) data type&lt;/p&gt;

&lt;p&gt;JavaScript is a dynamic type language, means you don't need to specify type of the variable because it is dynamically(accepting in real-time) used by JavaScript engine. We need to use var here to specify the data type. It can hold any type of values such as numbers, strings etc.&lt;br&gt;
 For example:&lt;br&gt;
var a=80; //holds the number&lt;/p&gt;

&lt;p&gt;var b="Sam";//holds the string&lt;/p&gt;

&lt;p&gt;The five type available are:&lt;br&gt;
 tring&lt;br&gt;
number &lt;br&gt;
boolean&lt;br&gt;
undefined&lt;br&gt;
null&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Get started with github</title>
      <author>Nikhil Bobade </author>
      <pubDate>Sat, 02 Oct 2021 07:43:13 +0000</pubDate>
      <link>https://dev.to/nikhil27b/get-started-with-github-2647</link>
      <guid>https://dev.to/nikhil27b/get-started-with-github-2647</guid>
      <description>&lt;p&gt;Hey guys hacktoberfest is started if you don’t know about GitHub or what is GitHub how its use so this is useful post for you.&lt;br&gt;
In this post you learn how to use GitHub and create your 1st pull request with using GitHub. and also after 4 successful pull request you will be get free t-shirt from hacktoberfest event. so learn and participate in event.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-github"&gt;
  &lt;/a&gt;
  What is GitHub:-
&lt;/h3&gt;

&lt;p&gt;GitHub is a web-based interface that uses Git, the open source version control software that lets multiple people make separate changes to web pages at the same time. As Carpenter notes, because it allows for real-time collaboration, GitHub encourages teams to work together to build and edit their site content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-account-and-create-repo-"&gt;
  &lt;/a&gt;
  GitHub Account and create repo :-
&lt;/h3&gt;

&lt;p&gt;1.go to github.com and simple create your account .&lt;br&gt;
2.Create a new repository&lt;br&gt;
3.To create a new repository, select New Repository from the + sign dropdown menu (you can see I've selected it in the upper-right corner in the image above).&lt;br&gt;
4.Enter a name for your repository (e.g., "portfolio") and click Create Repository).&lt;br&gt;
5.Your 1st repo is created. 😊🎉&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#now-we-are-moved-to-next-step-"&gt;
  &lt;/a&gt;
  Now we are moved to next step :-
&lt;/h4&gt;

&lt;p&gt;1.Download git from browser.&lt;br&gt;
2.&lt;a href="https://git-scm.com/"&gt;https://git-scm.com/&lt;/a&gt; .&lt;br&gt;
3.simple download and install the git software&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#simple-now-open-your-command-prompt-or-powershell"&gt;
  &lt;/a&gt;
  Simple now open your command prompt or PowerShell 💻
&lt;/h5&gt;

&lt;p&gt;1.Now we are Create folder for your project folder use this command (mkdir Demo).&lt;br&gt;
2.Change your terminal to the Demo directory with the command (cd Demo).&lt;br&gt;
3.Now create your 1st file readme file and save as (readme.md)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#yeah-now-its-time-to-add-our-file-in-github"&gt;
  &lt;/a&gt;
  yeah 😀 Now its time to add our file in GitHub
&lt;/h5&gt;

&lt;p&gt;1.Use command ( git init  )in terminal .&lt;br&gt;
2.and add that file in git like git add (filename) or git add . there are to add multiple file we are use ( git add . ).&lt;br&gt;
3.add your remote URL &lt;br&gt;
4.git remote add origin &lt;a href="https://github.com/"&gt;https://github.com/&lt;/a&gt;/Demo.git&lt;br&gt;
5.then use command for commit the changes ( git commit -m “first commit”&lt;br&gt;
6.After this you can be use git status to check the your files .&lt;br&gt;
if you want to change the branch use this command (git branch -m main)&lt;br&gt;
7.now its time to push your code  or files to GitHub&lt;br&gt;
8.Use git push  -u origin main &lt;/p&gt;

&lt;p&gt;Congratulations! 🎉🎉🎉 You have create your 1st requst to git now if you want to learn more comment git at this post or simple check github docs .&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You.
&lt;/h5&gt;

&lt;p&gt;A collabration with Geeky4u Did you find it helpful let me know in comments.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
      <category>html</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
