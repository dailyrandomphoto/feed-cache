<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>You don't need --save anymore for NPM installs</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 18 Aug 2021 06:53:48 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/you-don-t-need-save-anymore-for-npm-installs-4min</link>
      <guid>https://dev.to/dailydevtips1/you-don-t-need-save-anymore-for-npm-installs-4min</guid>
      <description>&lt;p&gt;If you ever installed an NPM package the following syntax looks very familiar to you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; package_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was long the golden standard to install a package and save it as a dependency in your project.&lt;/p&gt;

&lt;p&gt;Meaning if we didn't specify the &lt;code&gt;--save&lt;/code&gt; flag, it would only get locally installed and not added to the package.json file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#npm-evolved"&gt;
  &lt;/a&gt;
  NPM evolved
&lt;/h2&gt;

&lt;p&gt;Over time NPM evolved into a huge player in package management, and ever since version 5 of NPM, we no longer need to define this &lt;code&gt;--save&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;Meaning our packages will be saved by default into our package.json file.&lt;/p&gt;

&lt;p&gt;I'm thrilled with this addition, as it's very rare to want to install a package that you don't need in your package.json file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-dev-dependencies-using-npm"&gt;
  &lt;/a&gt;
  Installing dev dependencies using NPM
&lt;/h2&gt;

&lt;p&gt;We also used to have the following command to install a package as a dev dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; package_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will place the package in your dev dependencies in the package.json file.&lt;/p&gt;

&lt;p&gt;So to recap, the normal install will install our package under the &lt;code&gt;dependencies&lt;/code&gt;, while the &lt;code&gt;--save-dev&lt;/code&gt; argument will place them under &lt;code&gt;devDependencies&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my_project&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;package_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;devDependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;package_dev_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#npm-install-additional-flags"&gt;
  &lt;/a&gt;
  NPM install additional flags
&lt;/h2&gt;

&lt;p&gt;As we saw, the default install has no flags and will install our dependency. NPM, however gives us some flags to control the options.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-P&lt;/code&gt;, '--save-prod`: Package will install as a dependency&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-D&lt;/code&gt;, &lt;code&gt;--save-dev&lt;/code&gt;: Package will be installed as dev dependency&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-O&lt;/code&gt;, &lt;code&gt;--save-optional&lt;/code&gt;: Package will be installed as an optional dependency&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--no-save&lt;/code&gt;: Package won't be saved in package.json file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the most important flags we can use. However, the only one you frequently use might be the &lt;code&gt;-D&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;Do keep in mind the letter flags are capital sensitive.&lt;/p&gt;

&lt;p&gt;So to recap: we don't need to use the &lt;code&gt;--save&lt;/code&gt; attribute anymore. This is now the default behavior.&lt;br&gt;
We can provide the &lt;code&gt;-D&lt;/code&gt; flag to save a package as a dev dependency.&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. I hope you learned something new today. And thank you, NPM for making this available.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>npm</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Trying Golang as a JavaScript lover</title>
      <author>PuruVJ</author>
      <pubDate>Wed, 18 Aug 2021 06:51:43 +0000</pubDate>
      <link>https://dev.to/puruvj/trying-golang-as-a-javascript-lover-1fon</link>
      <guid>https://dev.to/puruvj/trying-golang-as-a-javascript-lover-1fon</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.puruvj.dev/blog/golang-as-javascripter"&gt;Read in light, midday, dark or &lt;strong&gt;zombie mode&lt;/strong&gt; 😈&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have been into coding since early 2015. That's about 6 years now. In that time I have done HTML CSS JavaScript, its supersets TypeScript(My favorite language of all time 😌) and Dart, some light Python, and C and C++ in university curriculum.&lt;/p&gt;

&lt;p&gt;Recently, Golang caught my eye. So I had been casually reading its documentation, the tutorial, some articles. Not really trying it out, in the sense of opening VSCode and writing the actual code.&lt;/p&gt;

&lt;p&gt;I was just trying to get a feel for the patterns. Because the more sources you learn from, the better you become, no matter if the context is entirely different. Concepts and Patterns bleed over to other things.&lt;/p&gt;

&lt;p&gt;Now here's one thing about me: I am a die-hard JavaScripter(That's not an official term, but who cares, let's consider it is, for now 😋). I write everything in JavaScript or TypeScript(Basically JavaScript with Types and futuristic features). Whether it's an app, or a small script or heck, even something where using Python would be better, I still go with JavaScript.&lt;/p&gt;

&lt;p&gt;Why? Because JavaScript is extremely flexible. As a language alone, it can literally do &lt;strong&gt;anything&lt;/strong&gt;. It is a very easy language. There are a dozen ways to do anything in it. Then you include the &lt;strong&gt;Modular&lt;/strong&gt; aspect of it in the equation, and the huge registry, &lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt;, and JavaScript reaches a godly level.&lt;/p&gt;

&lt;p&gt;Yet at the same time, it is explicit enough. You have to declare variable first before using it with &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;, unlike Python, which leads to confusion about &lt;strong&gt;where&lt;/strong&gt; the variable is coming from!!&lt;/p&gt;

&lt;p&gt;JavaScript uses curly braces for blocks instead of indentation. People would say Python looks cleaner without those braces, and I agree. It &lt;strong&gt;looks&lt;/strong&gt; cleaner. But while reading, that indentation confuses me, as in, the line I'm reading belongs to which block exactly. Plus writing it is really risky. You might end up accidentally removing indentation from a line at the end of a block and it becomes a part of the outer block. It &lt;strong&gt;has happened to me&lt;/strong&gt;, countless times.&lt;/p&gt;

&lt;p&gt;These are some reasons why JavaScript is my favorite. So where does Go factor in on it?&lt;/p&gt;

&lt;p&gt;Let's see!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h1&gt;

&lt;p&gt;Sorry, there's no TLDR for this article. It's just a documentation of my experience 🥲&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h1&gt;

&lt;p&gt;Before we start, here's something I wanna make clear: This isn't an organized technical article about pros and cons of Go or JavaScript. This is a completely Subjective article about what &lt;strong&gt;I like&lt;/strong&gt; about Go and what I don't like about it. If yur here for a hardcore, informative article about Go and JavaScript, you will be disappointed 😅&lt;/p&gt;

&lt;p&gt;But hey, if you wanna read a first hand experience, this is it!! Read on!! 🤩&lt;/p&gt;

&lt;p&gt;So with that out of the way, let's begin!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-even-try-go"&gt;
  &lt;/a&gt;
  Why even try Go?
&lt;/h1&gt;

&lt;p&gt;This is a valid question. You just read that I know many languages, and even on top of that, I use JavaScript for everything. So what gives? Why try to fit another language in my tiny brain?&lt;/p&gt;

&lt;p&gt;The problem was when JS was way too big!!&lt;/p&gt;

&lt;p&gt;What do I mean by that? Let's rewind a little!!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-lazy-undergraduate"&gt;
  &lt;/a&gt;
  The lazy undergraduate
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Spoiler: I am the lazy undergraduate in question 😄.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I took admission in university a few months back. Thanks to Covid-19, our classes are fully online. It means there are a bunch of Google meet links that I had to hunt for, for every class.&lt;/p&gt;

&lt;p&gt;So the actual process was:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up the timetable every hour and see which class is next.&lt;/li&gt;
&lt;li&gt;If there's a class in next hour, find out its link.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Believe me or not, this process took 5 minutes. EVERY. SINGLE. TIME! 5 minutes isn't a lot, but you count these 5 minutes for every time I had to it, and combine it, that's around 10+ hours wasted just for finding the link.&lt;/p&gt;

&lt;p&gt;And worse than that is the repetition. As a programmer, you know how horrible it is do the same boring task again and again. And unlike non-programmers, you can't accept the situation and get used to it. You have to automate it, even if it takes hours.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1VL5Ezvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qsg22feun69lok3r4ia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VL5Ezvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qsg22feun69lok3r4ia.png" alt="Can this 5 minute task be automated meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So hey, that's what I did!!&lt;/p&gt;

&lt;p&gt;I created a script that would run in the background, and open the class link in the browser 5 minutes before the class started. Just like that!!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-comes-deno"&gt;
  &lt;/a&gt;
  In comes Deno
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dA8R45QK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trdr9n3qqgklpr4754pf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dA8R45QK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trdr9n3qqgklpr4754pf.png" alt="Hold up a minute meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're like, "Hold up a minute, what's Deno doing an article about Go?", lemme explain.&lt;/p&gt;

&lt;p&gt;Deno is platform for JavaScript/typeScript, like NodeJS, with the added benefit of compiling your code into machine level code, or an executable file.&lt;/p&gt;

&lt;p&gt;This was perfect for me. I could write code in my favorite language, and convert it over to an executable that I could configure to run on System startup, so I'd never have to run it myself ever again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oitati5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.puruvj.dev/media/golang-as-javascripter--xmen-perfection-meme.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oitati5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.puruvj.dev/media/golang-as-javascripter--xmen-perfection-meme.gif" alt="Perfection meme from X Men"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Only it wasn't perfect 🤐🤐&lt;/p&gt;

&lt;p&gt;The code itself was amazingly easy to write. I completed it in 3 hours, because I was so familiar with TypeScript.&lt;/p&gt;

&lt;p&gt;But where the issue was while compiling the code into an executable.&lt;/p&gt;

&lt;p&gt;The executable's size was 56 MB for windows, and as high as 90MB for MacOS M1.&lt;/p&gt;

&lt;p&gt;56MB isn't a lot for me. Even 90 MB is nothing. But it kept nagging at me. I try to keep the sizes of apps/websites I build as low as I can, and 56MB felt just way too big for that.&lt;/p&gt;

&lt;p&gt;And not only that. Because I had made this project public(Here it is: &lt;a href="https://github.com/PuruVJ/auto-class-launcher-deno"&gt;PuruVJ/auto-class-launcher-deno&lt;/a&gt;) and usable for everyone, my batchmates tried to use it, and well, 60-90Mb was way too big for them, due to limited internet and all.&lt;/p&gt;

&lt;p&gt;So I got a good excuse to re-write it.&lt;/p&gt;

&lt;p&gt;Node was out of question because any script in it would require NodeJS to be installed on the system and overall a more complicated process.&lt;/p&gt;

&lt;p&gt;I turned towards Rust! I had been jumping to learn Rust for quite some time, cuz of its performance and modernity and all that stuff.&lt;/p&gt;

&lt;p&gt;But oh boy, Rust was hard. Extremely hard!! I gave up after a few hours.&lt;/p&gt;

&lt;p&gt;Then, I finally turned towards Go!!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learning-go"&gt;
  &lt;/a&gt;
  Learning Go
&lt;/h1&gt;

&lt;p&gt;I sat down at night to make it. I created the project, initialized the Go boilerplate(which is just a &lt;code&gt;go.mod&lt;/code&gt; file and a &lt;code&gt;main.go&lt;/code&gt; with 4 lines of code), &lt;strong&gt;then&lt;/strong&gt; I opened up the Go Tutorial.&lt;/p&gt;

&lt;p&gt;Yeah, this might seem strange to you. Initialize a project, and &lt;strong&gt;then&lt;/strong&gt; start learning that thing? Why would you do that?&lt;/p&gt;

&lt;p&gt;Well, I'm a huge proponent of Learning by Doing, where you learn the bare minimum upfront, and the rest you learn by trying to make a small project in it. It makes you learn the concept the hard way, but really fast, without wasting any time on trivialities.&lt;/p&gt;

&lt;p&gt;In case of Go, though, I didn't need anything upfront, cuz I had seen the syntax before a bit and it looked simple enough to me.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Spoiler: Learning by Doing really works, I learnt basic Go in 3-4 hours only 😉&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h1&gt;

&lt;p&gt;Before I jump into the experience, here's the straight up results 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2hH3qG9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2tmt0hr5u00vaz2k9fi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2hH3qG9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2tmt0hr5u00vaz2k9fi.png" alt="Comparison of the binary size and memory consumption generated by Deno and Go"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're unable to read the image(Screenreader/Slow network), it's a comparison table showing Deno generated binary size to be &lt;strong&gt;57 - 90MB&lt;/strong&gt; and memory consumption to be &lt;strong&gt;6 - 11MB&lt;/strong&gt;, whereas with Go, the binary size is &lt;strong&gt;2.6 - 2.9MB&lt;/strong&gt;, and RAM consumption is &lt;strong&gt;1.5 - 7MB&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mindblown right 🤯?! Such a huge difference in the binary size. The Go version is straight away &lt;strong&gt;22 - 31&lt;/strong&gt; times smaller!!&lt;/p&gt;

&lt;p&gt;And even the &lt;strong&gt;max&lt;/strong&gt; memory consumption of Go binary is similar to the &lt;strong&gt;minimum&lt;/strong&gt; memory consumption of the &lt;strong&gt;Deno&lt;/strong&gt; program.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reason the memory consumptions varies is because both these Go and Deno do garbage collection, so the objects and constructs are garbage collected &lt;strong&gt;eventually&lt;/strong&gt; and memory consumption drops down, because the binary knows it need not keep those things in memory anymore.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#observations-about-migrating"&gt;
  &lt;/a&gt;
  Observations about migrating
&lt;/h1&gt;

&lt;p&gt;This, folks, is the part you came to read about really. Read on!&lt;/p&gt;

&lt;p&gt;So I migrated the whole app to Go, (mostly) bug free, in 1 day.&lt;/p&gt;

&lt;p&gt;And here's my observations, as an avid JavaScripter learning Go for the very first time!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-very-different-in-a-good-way-"&gt;
  &lt;/a&gt;
  Not very different (In a good way 🙂)
&lt;/h2&gt;

&lt;p&gt;Really, that's the first point I noticed about it. It isn't much different from JavaScript. There are variables, functions, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt; blocks, Error handling system and what not.&lt;/p&gt;

&lt;p&gt;That is the main point of Go, really!! It combines all the knowledge of 60 years of programming into a very simple and wise language which doesn't invent a lot of new stuff. Rather, it focuses on problems that aren't even code related, which are just as important as the code itself, like feature creep, standard formatting, great package management system and stuff that isn't answered well enough in a majority of languages to the day. And OFC, can't forget Goroutines 😌&lt;/p&gt;

&lt;p&gt;OFC, it depends on how comfortable you're with programming languages, generally, but if you're very comfortable with TypeScript or Dart or any other statically typed language, you'll feel right at home with Go.&lt;/p&gt;

&lt;p&gt;But even then, it isn't necessary to know a Statically typed language before, as Go will infer as much of the types as it can without you needing to tell it much.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables-are-pythonic-but-not-quite"&gt;
  &lt;/a&gt;
  Variables are Pythonic, but not quite...
&lt;/h2&gt;

&lt;p&gt;Here's how JavaScript variables are defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Declare variable&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;someVal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;someVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Set it to something later on&lt;/span&gt;
&lt;span class="nx"&gt;someVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you wanna do it explicitly in TypeScript,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;someVal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;someVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Set it to something later on&lt;/span&gt;
&lt;span class="nx"&gt;someVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OFC, TypeScript is intelligent and you don't always need to specify types for a variable.&lt;/p&gt;

&lt;p&gt;As you can see, it's &lt;strong&gt;extremely clear&lt;/strong&gt; where this variable is defined. You are scrolling through a file, there's the big &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; glaring right at you. The source is extremely clear.&lt;/p&gt;

&lt;p&gt;Now let's come to Python.&lt;/p&gt;

&lt;p&gt;The above example of declaring a variable here 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;someVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'hello'&lt;/span&gt;

&lt;span class="c1"&gt;# Set it to something later on
&lt;/span&gt;&lt;span class="n"&gt;someVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'world'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you the declaration part and the part where we set it's value to something, later on in the program? There's no difference. No way to know where this variable was defined. It's irritating in my opinion. There needs to be some distinction between the two.&lt;/p&gt;

&lt;p&gt;Now, why I talk about Python variables? Cuz Golang variables, in their simplest form, are very much like Python variables, but they have one extra character that prevents the confusion that Python variables introduce. That character is &lt;code&gt;:&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;someVal&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"Tell me. Do you bleed?"&lt;/span&gt;

&lt;span class="c"&gt;// Set it to something later on&lt;/span&gt;
&lt;span class="n"&gt;someVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"You will!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;A little dialogue from Batman vs Superman 🦇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1st time, I'm declaring the variable using the &lt;code&gt;:=&lt;/code&gt; operator. But when setting its value later in the program, I use the regular &lt;code&gt;=&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;This is a small thing, but it makes a huge difference!! I even actually prefer it over JavaScript's &lt;code&gt;let&lt;/code&gt; variable declaration. It is cleaner, but not &lt;strong&gt;so clean&lt;/strong&gt; it sacrifices developer ergonomics.&lt;/p&gt;

&lt;p&gt;And if you prefer a more verbose way, that's there too&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;someVal&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like JavaScript's &lt;code&gt;var someVal = "hello"&lt;/code&gt;, but here the data type is necessary. If you're a TypeScripter, you'll feel right at home here.&lt;/p&gt;

&lt;p&gt;And ofc, you also have &lt;code&gt;const&lt;/code&gt; in go, and its declaration is the exact same as doing it in JavaScript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;someVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I really love the fact that Go goes the extra length to keep the code clean, but doesn't shy away from providing the standard, more verbose APIs when they're needed. It's the best of both worlds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-system"&gt;
  &lt;/a&gt;
  Type System
&lt;/h2&gt;

&lt;p&gt;Go's Type system is similar to the type system of TypeScript, where most of the time, you don't even need to specify types for your variables.&lt;/p&gt;

&lt;p&gt;In TypeScript, this below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is inferred as &lt;code&gt;string&lt;/code&gt; automatically. Same with number or boolean or just anything.&lt;/p&gt;

&lt;p&gt;Go works like this too!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;x&lt;/code&gt; is inferred as &lt;code&gt;string&lt;/code&gt;. Works similar to TypeScript!!&lt;/p&gt;

&lt;p&gt;This kind of type system is personally my favorite!! Having too much type information makes the code hard to scan, in my opinion! Having types only where absolutely needed is the way I roll, and I am glad Go has that same philosophy 🤩&lt;/p&gt;

&lt;p&gt;OFC, there was one place where I found Go's system to be less convenient.&lt;/p&gt;

&lt;p&gt;You see, in the project, I input the timetable and link information from an external &lt;code&gt;.json&lt;/code&gt; file. That JSON file has the following TypeScript structure 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ClassConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;times&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;thu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fri&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sun&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}[];&lt;/span&gt;
&lt;span class="p"&gt;}[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, I have an object type inside the main object type. If you're a TypeScript developer, you wouldn't even think about it twice.&lt;/p&gt;

&lt;p&gt;But in Golang, you can't define a type with a struct inside struct 🤐&lt;/p&gt;

&lt;p&gt;So I had to do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;ClassTime&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Day&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"day,omitempty"`&lt;/span&gt;
  &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"time,omitempty"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Link&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt;      &lt;span class="s"&gt;`json:"link,omitempty"`&lt;/span&gt;
  &lt;span class="n"&gt;Times&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;ClassTime&lt;/span&gt; &lt;span class="s"&gt;`json:"times"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;ClassConfig&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So yeah, I had to declare 2 more types to get the TypeScript behavior 🥲.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Those tags in structs are a way to tell go to expect this data to be a json field, and don't include a field if it is not there in the JSON itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#standard-library-is-the"&gt;
  &lt;/a&gt;
  Standard library is the 🧑‍🍳😘
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Bonus points if you figured out the heading 😜&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JavaScript doesn't have a standard library. Sure, it has some really good global functions that you can snatch up and use directly, but they don't qualify as &lt;strong&gt;standard lib&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Go is the opposite. By default, globally, it doesn't provide much.&lt;/p&gt;

&lt;p&gt;But you start importing stuff from the built in standard library, you can achieve a lot!!&lt;/p&gt;

&lt;p&gt;Want JSON? Import &lt;code&gt;json&lt;/code&gt; package, and use it.&lt;/p&gt;

&lt;p&gt;Need to do math? Import &lt;code&gt;math&lt;/code&gt; package, and use it!!&lt;/p&gt;

&lt;p&gt;But you're wondering, doesn't that add an extra step over just using the &lt;code&gt;Math.*&lt;/code&gt; and &lt;code&gt;JSON.*&lt;/code&gt; objects of JavaScript? Yes, it does!&lt;/p&gt;

&lt;p&gt;But that doesn't mean that Go is bad for not having global objects like these, or JS is bad for having global objects that are just lying around in the namespace. No.&lt;/p&gt;

&lt;p&gt;Go is a compiled language. It takes all the code you wrote, inlines everything you imported, and then convert it to machine level code. JS on the other hand is an interpreted language. What you write is what is executed in the browser ultimately, so no conversion required. So there, having these objects available isn't a big problem.&lt;/p&gt;

&lt;p&gt;But in Go, if you include every in-built module by default, its final output size is gonna be &lt;strong&gt;huge&lt;/strong&gt;. No one likes big file sizes. So by importing only what you need, output size stays small.&lt;/p&gt;

&lt;p&gt;And the standard library has just so much more stuff than &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;json&lt;/code&gt; packages. It has packages that in Node/Deno world, you'd be installing from npm/pulling it with a URL.&lt;/p&gt;

&lt;p&gt;Here are some great libs 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;bytes&lt;/strong&gt; - Dealing with Byte slices&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;context&lt;/strong&gt; - Defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;database&lt;/strong&gt; - Interfaces for dealing with Databases(SQL only, at the moment)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;embed&lt;/strong&gt; - For embedding resources into your final binary so no need to ship many different files&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;time&lt;/strong&gt; - For dealing with dates and times.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;flag&lt;/strong&gt; - Package flag implements command-line flag parsing. This is really shocking to me, cuz in Node and Deno, you always have to pull in another library for dealing with CLIs. And here, you're getting that literally built-in here 😻&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's so much more great stuff in Go Standard Library!! I highly recommend you to check it out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goembed-is-dope"&gt;
  &lt;/a&gt;
  go:embed is DOPE!! 🤯🤯
&lt;/h2&gt;

&lt;p&gt;While building this script, I had a little hiccup: &lt;em&gt;How to store a default timetable config in the binary itself? 🤔&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In Deno, I had directly inlined the config inside a .ts file as a simple JS Object. But I didn't want to do it, as declaring nested objects in Go is more work. You have to specify object with their struct type next to them everytime. Overall, didn't feel like a good idea ultimately.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go:embed&lt;/code&gt; comes to rescue!!&lt;/p&gt;

&lt;p&gt;Rather than explaining what it does, I'll just show you 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="s"&gt;"embed"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;//go:embed sample.json&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sampleConfigStr&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the comment &lt;code&gt;//go:embed sample.json&lt;/code&gt;? This is all we need actually! With this, Go will get this file, and embed it in the variables defined on the next line. Here I have specified the variable to be a &lt;code&gt;Byte array&lt;/code&gt;, but it could've been a &lt;code&gt;string&lt;/code&gt; too. And it would &lt;strong&gt;just work&lt;/strong&gt; 🤩&lt;/p&gt;

&lt;p&gt;I ship the &lt;code&gt;sample.json&lt;/code&gt; file, which is the default timetable now, directly in the binary. No need to download the timetable separately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vscode-extension-is-a-gem"&gt;
  &lt;/a&gt;
  VSCode extension is a gem
&lt;/h2&gt;

&lt;p&gt;Did I mention how marvelous Go's VSCode extension is 😍?!&lt;/p&gt;

&lt;p&gt;It provides blazing fast intellisense.&lt;/p&gt;

&lt;p&gt;It allows you to auto import packages from standard library while typing. So if you're typing &lt;code&gt;fmt.&lt;/code&gt;, and &lt;code&gt;fmt&lt;/code&gt; hasn't been imported, it will show you the methods available on &lt;code&gt;fmt&lt;/code&gt;, and when you use the autocomplete to type out the method, it will automatically import that package for you!! No need to go to the top of the file and add the package to the &lt;code&gt;import&lt;/code&gt; list. This feature is really good.&lt;/p&gt;

&lt;p&gt;It creates tests for your functions automatically. Just right click inside the function, and click on &lt;code&gt;Generate unit tests tests&lt;/code&gt;, and bam!! You have a tests file now!!&lt;/p&gt;

&lt;p&gt;And, remember the Class type definitions above?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;ClassTime&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Day&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"day,omitempty"`&lt;/span&gt;
  &lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"time,omitempty"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Link&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt;      &lt;span class="s"&gt;`json:"link,omitempty"`&lt;/span&gt;
  &lt;span class="n"&gt;Times&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;ClassTime&lt;/span&gt; &lt;span class="s"&gt;`json:"times"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;ClassConfig&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice all these &lt;code&gt;json:&lt;/code&gt; tags in the definitions. These were added by the extension, not me. I struggled to add these myself for some time, but it didn't work, cuz I was adding spaces here and there, but you aren't supposed to add those. So I put the cursor in the struct definition, right click -&amp;gt; Add tags to struct field. It added these tags and the code worked finally.&lt;/p&gt;

&lt;p&gt;There's a lot more this extension does. It's extremely well crafted, so much so that after you go back to a TypeScript project after this, you actually start feeling homesick for this extension(extensionsick?). And that's saying a lot, cuz TypeScript tools in VSCode is on a &lt;strong&gt;godly&lt;/strong&gt; level.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-map-filter-every"&gt;
  &lt;/a&gt;
  No .map .filter .every 😭
&lt;/h2&gt;

&lt;p&gt;All these were the good parts of Go. But there are some things in Go that I didn't like as a JavaScripter. People may argue that Go is better for it, but that doesn't mean I have to like it.&lt;/p&gt;

&lt;p&gt;Which leads to this point: Go doesn't have &lt;code&gt;arr.map&lt;/code&gt;, &lt;code&gt;.filter&lt;/code&gt;, and all the superb array methods that exist on arrays in JS. Which means I have to use loops for everything.&lt;/p&gt;

&lt;p&gt;Loops aren't bad, but after using these Array methods for so long, using loops feels like going back to the stone age 🤧&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heartsick-for-the-"&gt;
  &lt;/a&gt;
  Heartsick for the +
&lt;/h2&gt;

&lt;p&gt;This is a &lt;strong&gt;super nitpick&lt;/strong&gt; and I might as well not include it in this post, but I might as well just do 😉.&lt;/p&gt;

&lt;p&gt;In JS, you have this little trick to convert any data type to a number, by just putting a &lt;code&gt;+&lt;/code&gt; symbol before it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// NaN&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;11.5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 11.5&lt;/span&gt;

&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This trick is very useful in JS. Sadly, Go doesn't have this, you have to use &lt;code&gt;strconv.Atoi&lt;/code&gt; function, which you can't use in value, as it returns a tuple of value and error, so you need an extra line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This isn't much more code, but nothing beats the simplicity of &lt;code&gt;+timeArr[0]&lt;/code&gt; 😌.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I acknowledge that returning an error is probably better than returning a &lt;code&gt;NaN&lt;/code&gt;, but still, it's more code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#reinvent-the-module-system-please"&gt;
  &lt;/a&gt;
  Reinvent the module system please 🙏
&lt;/h2&gt;

&lt;p&gt;This was probably the most painful aspect. In JS, you write some reusable code in another file than your main file, say &lt;code&gt;math.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;math.js&lt;/code&gt; you can export the functions you need 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then import it when you need to use.&lt;/p&gt;

&lt;p&gt;Go also has ways to import and export from other packages, but that's it. Import and export from packages, not other files. Other files in your project with the same &lt;code&gt;package &amp;lt;name&amp;gt;&lt;/code&gt; specified in them have everything shared among them, which, in my humble opinion, is not good. Globals was a &lt;strong&gt;huge&lt;/strong&gt; problem in JavaScript world, and that's the reason we have modules now in JS(After 10 years of people making their own module systems. Yup, the problem was &lt;strong&gt;that&lt;/strong&gt; big).&lt;/p&gt;

&lt;p&gt;Now, I have a feeling file based module system probably won't come to Go anytime soon, but still, if you can do it Golang folks... 🥲&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h1&gt;

&lt;p&gt;Don't let the last few sections make you shy away from trying Go, moving to Go was a very positive result ultimately, and I'd recommend every single JS developer to try Go.&lt;/p&gt;

&lt;p&gt;Hope this article brought you some enthusiasm for trying Go, and some newfound respect for JS(Necessary once in a while thanks to Tech twitter 🙄)&lt;/p&gt;

&lt;p&gt;Peace ✌️&lt;/p&gt;

</description>
    </item>
    <item>
      <title>[Joke] Bad things about every programming language</title>
      <author>DevGuyAhnaf</author>
      <pubDate>Wed, 18 Aug 2021 06:24:28 +0000</pubDate>
      <link>https://dev.to/devguyahnaf/joke-bad-things-about-every-programming-language-3246</link>
      <guid>https://dev.to/devguyahnaf/joke-bad-things-about-every-programming-language-3246</guid>
      <description>&lt;p&gt;This is just a sarcastic post where I rant about the bad sides of every programming language I have tried/used. Please don't be offended, as this just for entertainment purposes.&lt;/p&gt;

&lt;p&gt;Let's get started:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;: Slow as hell, no generics or types. I am not Harry Potter, Parseltongue is not for me. Spaces and tabs don't work together well. SNEK!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: My life is &lt;code&gt;undefined&lt;/code&gt;, every single tutorial on the internet is on JS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;: Error: Property &lt;code&gt;sanity&lt;/code&gt; of type &lt;code&gt;Mind&lt;/code&gt; is undefined.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;: I wish I had a widescreen monitor. JVM taking too much of my RAM. And the error tracebacks are bigger than my p- (rogramming skills)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C++/C&lt;/strong&gt;: I wish pointers didn't exist, and type conversion was easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;: Lifetimes don't make sense. Car-go, car not fly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Golang&lt;/strong&gt;: No generics, error handling is disgusting. Why use zero values if nil exists?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt;: Microsoft™ Java. Also, pointers are useless here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;: A very good &lt;strong&gt;programming&lt;/strong&gt; language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;: The only thing I can flex about in my life is a flexbox that I made when I was 12 years old.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this post. Again, please don't take this offensively. A lot of the programming languages on this post are the ones I use, and they are pretty good. I just made the bad things sound funny :)&lt;/p&gt;

</description>
      <category>programming</category>
      <category>coding</category>
    </item>
    <item>
      <title>Protect Your Social Media Accounts</title>
      <author>Atul Anand</author>
      <pubDate>Wed, 18 Aug 2021 05:48:24 +0000</pubDate>
      <link>https://dev.to/theatulanand/protect-your-social-media-accounts-2a59</link>
      <guid>https://dev.to/theatulanand/protect-your-social-media-accounts-2a59</guid>
      <description>&lt;p&gt;The Internet has made our lives easier in so many ways. However, you need to know how you can protect your privacy and avoid fraud. Remember, not only can people be defrauded when using the Internet for investing; the fraudsters use information online to send bogus materials, solicit or phish.&lt;/p&gt;

&lt;p&gt;Phishing is the attempt to obtain financial or confidential information from Internet users. This phishing expedition usually begins with an email that looks as if it is from a legitimate source, often a financial institution. The email contains a link to a fake website that looks like the real site. Fraudsters want you to provide account and password information, and then they have access to your account.&lt;/p&gt;

&lt;p&gt;Here’s what you can do to protect yourself when using social media:&lt;br&gt;
Privacy Settings: Always check the default privacy settings when opening an account on a social media website. The default privacy settings on many social media websites are typically broad and may permit sharing of information to a vast online community. Modify the setting, if appropriate, before posting any information on a social media website.&lt;/p&gt;

&lt;p&gt;Biographical Information: Many social media websites require biographical information to open an account. You can limit the information made available to other social media users. Consider customizing your privacy settings to minimize the amount of biographical information others can view on the website.&lt;/p&gt;

&lt;p&gt;Account Information: Never give account information, Social Security numbers, bank information or other sensitive financial information on a social media website. If you need to speak to a financial professional, use a firm-sponsored method of communication, such as telephone, letter, firm e-mail or firm-sponsored website.&lt;/p&gt;

&lt;p&gt;Friends/Contacts: When choosing friends or contacts on a social media site, think about why you use the website. Decide whether it is appropriate to accept a “friend” or other membership request from a financial service provider, such as a financial adviser or broker-dealer. There is no obligation to accept a “friend” request of a service provider or anyone you do not know or do not know well.&lt;/p&gt;

&lt;p&gt;Site Features: Familiarize yourself with the functionality of the social media website before broadcasting messages on the site. Who will be able to see your messages -- only specified recipients, or all users?&lt;/p&gt;

&lt;p&gt;On-Line Security Tips&lt;br&gt;
As with all computer and web-based accounts, take precautions to keep your social media account information secure. Here are some security tips:&lt;/p&gt;

&lt;p&gt;Pick a “strong” password, keep it secure, and change it frequently.&lt;br&gt;
Use different passwords for different accounts.&lt;br&gt;
Use caution with public computers or wireless connections. Try to avoid accessing your social media accounts on public or other shared computers. But if you must do so, remember to log out completely by clicking the “log out” button on the social media website to terminate the online session.&lt;br&gt;
Be mindful of accessing your social media accounts on public wireless connections, such as at a coffee shop or airport. It is very easy to eavesdrop on Internet traffic, including passwords and other sensitive data, on a public wireless network.&lt;br&gt;
Be extra careful before clicking on links sent to you, even if by a friend.&lt;br&gt;
Secure your mobile devices. If your mobile devices are linked to your social media accounts, make sure that these devices are password protected in case they are lost or stolen.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Best Dashboard Frameworks For Your Business.</title>
      <author>Kat Holder</author>
      <pubDate>Wed, 18 Aug 2021 05:36:12 +0000</pubDate>
      <link>https://dev.to/katholder/best-dashboard-frameworks-for-your-business-4k2m</link>
      <guid>https://dev.to/katholder/best-dashboard-frameworks-for-your-business-4k2m</guid>
      <description>&lt;p&gt;You open your &lt;b&gt;business application&lt;/b&gt; and your dashboard guides you about Key Performance Indicators in an instant. With the spike of engagement of business services in the cloud, dashboards have also moved to that feature. Web-based dashboards entertain two main features- firstly they fetch you data from several sources, feeds, sites and databases. Secondly, they also entertain complex facts and figures. A web dashboard has several components that involve data stores and transport methods. &lt;br&gt;
And to distinguish between these components, using colors will help you sort out. The ready-to-use dashboards help in saving time as you can create meaningful reports with effectiveness and convenience. &lt;br&gt;
                      You can have your &lt;b&gt; customizable dashboard &lt;/b&gt; even though cloud companies provide you with that. When you will be making your own, you would have a specific dashboard that would respond to your enterprise. &lt;br&gt;
Let’s discuss some of the best out there-&lt;/p&gt;

&lt;h3&gt;WebDataRocks&lt;/h3&gt;

&lt;p&gt;It is a lightweight JS pivot table component that runs on any browser and integrates with any front-end and back-end technology. It means that you can start a new project or analytics start-up with no risk as it is gratis.  Its primary function is to create tabular reports easily and deliver them quickly. &lt;/p&gt;

&lt;h3&gt;AnyChart Library&lt;/h3&gt;

&lt;p&gt;It is an interactive JS chart, intending to be designed and run on the web, desktop, and mobile apps. It is a set of flexible JS libraries and caters to &lt;a href="https://codersera.com/blog/javascript-data-visualization-libraries/"&gt;data visualization&lt;/a&gt; needs as it has 79 different chart types which can be used to build interactive dashboard demos. &lt;br&gt;
            The library has pre-built themes while at the same time, supports custom themes and palettes.It easily caters to additional information. Along with that, you can share this information on several platforms like Twitter, Linkedin, Pinterest, and AnyChart dashboard allows you to export to several other formats easily, increasing your reach and making your project versatile and dynamic. &lt;/p&gt;

&lt;h3&gt;DHTMLX Dashboard Demo&lt;/h3&gt;

&lt;p&gt;It supports dynamic rendering and because of this, it is a perfect fit for developing complex apps and working with large data volumes. It also has a user-friendly interface that makes sure data processing is done in real quick time, allowing for visualization of features and also exporting data to Excel or CSV. &lt;br&gt;
The best thing is that it allows you extensive customizable options, and you can have 20+ UI components and other &lt;b&gt;DHTMLX libraries&lt;/b&gt; as well as custom content, arrange them the way you want and help in resizing as well. The Charts library provides you with a lot of varieties of charts and graphs for data visualization as well.&lt;/p&gt;

&lt;h3&gt;DevExpress Dashboard&lt;/h3&gt;

&lt;p&gt;It brings to you a variety of dynamic UI elements and provides you the tools that allow you to build interactive dashboards both for mobile devices and web platforms. One can filter data both on the front and back end as you can use a data-aware dashboard element. You also have a drill-down feature that makes it possible to change detailed data from the back end in a dashboard. There is this choice that the user can make- whether to go for displaying general knowledge or viewing more detailed data.&lt;/p&gt;

&lt;h3&gt;Webix JS dashboard&lt;/h3&gt;

&lt;p&gt;Webix Dashboard is a ready-made &lt;b&gt;JS component&lt;/b&gt; that involves widgets that can be customized and resized depending upon your needs. This easily gets configured in your app and supports Backbone, React, JQuery, Vue.js. You can add various widgets and change their position and it also comes with the drag-n-drop feature. &lt;br&gt;
The widget is based on Grid Layout, and because of that inner elements in cells are aligned into rows and columns and by doing so, mobility is added to them.&lt;/p&gt;

&lt;h3&gt;Syncfusion Dashboard Layout&lt;/h3&gt;

&lt;p&gt;It allows in creating both types of the dashboard- static and dynamic through &lt;b&gt; JS dashboard template &lt;/b&gt;. Similar to the previous one, it has a grid structure that comprises basic blocks. You can customize it as well. With drag-n-drop blocks to reordering layout, each dashboard block contains 65+ UI controls or custom HTML content. &lt;br&gt;
The tool offers an effective layout and provides an auto-arrangement feature that moves the block upgrade to occupy the empty spaces.&lt;/p&gt;

&lt;h3&gt;Smashing Dashboard Template&lt;/h3&gt;

&lt;p&gt;It is a Sinatra- based framework that easily provides you with custom dashboards. It is a successor to Dashing and provides you with the same feature but with regular updates like the former did. &lt;/p&gt;

&lt;p&gt;Through CSS, HTML, and CoffeeScript- one can &lt;b&gt;build JS dashboards&lt;/b&gt; as one wants by using different widgets or through creating custom controls borrowed from these languages. It also has a drag-n-drop interface, however, this framework runs easily on Chrome, Safari 6+, and Firefox but does not work in Internet Explorer. &lt;/p&gt;

&lt;h3&gt;Cube.js framework&lt;/h3&gt;

&lt;p&gt;It is a modular framework that provides a dynamic set of modules that help in making transformation and modeling in the data warehouse, cashing, querying, building UI, and a lot of other stuff. It is a completely customizable solution that works well with large sets of data. It helps in creating analytical web apps. &lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Dashboards have become a necessary tool in visualizing large amounts of data. It is not necessary to have a dashboard made from scratch only. It all depends upon your need, The above listed are a few examples that we thought could come in handy and help you provide the version that you would want. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>computerscience</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>5 JavaScript Practices That Will Help You In The Long Run</title>
      <author>jsmanifest</author>
      <pubDate>Wed, 18 Aug 2021 05:35:14 +0000</pubDate>
      <link>https://dev.to/jsmanifest/5-javascript-practices-that-will-help-you-in-the-long-run-1pi</link>
      <guid>https://dev.to/jsmanifest/5-javascript-practices-that-will-help-you-in-the-long-run-1pi</guid>
      <description>&lt;p&gt;In this article, I will go over some practices in JavaScript that will help you in the long run. You might have already heard of some (or all) of them, but it's the details that follow below them that is most important.&lt;/p&gt;

&lt;p&gt;Some of these examples are real-world examples taken from a production code-base. Since they were shipped to production I would like to take this opportunity to help others understand the good bad when we write code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-handle-different-data-types"&gt;
  &lt;/a&gt;
  1. Handle different data types
&lt;/h2&gt;

&lt;p&gt;As time passes the day to realize this becomes an important practice comes closer than ever. By not handling different data types going into your functions there is a good chance your program will suffer from errors sooner or later. You either learn by a real mistake or you learn from resources that help you avoid future mistakes.&lt;/p&gt;

&lt;p&gt;I have come across many situations in code that look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createList&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;ul&amp;gt;
      &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`
          &amp;lt;li&amp;gt;
            &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
          &amp;lt;/li&amp;gt;
        `&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="s2"&gt;
    &amp;lt;/ul&amp;gt;
  `&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While this runs perfectly fine without issues, what I find is that developers often read this as "default list to an empty array" and assume that this will combat errors where list was passed in as an &lt;em&gt;unexpected/bad type&lt;/em&gt;. But JavaScript reads this as "default list to an empty array when it does not have a value to default to or when it is &lt;code&gt;undefined&lt;/code&gt;".&lt;/p&gt;

&lt;p&gt;Prior to ES6 the way most of us initialized values was to use the &lt;code&gt;||&lt;/code&gt; operator like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createList&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;ul&amp;gt;
      &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`
          &amp;lt;li&amp;gt;
            &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
          &amp;lt;/li&amp;gt;
        `&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="s2"&gt;
    &amp;lt;/ul&amp;gt;
  `&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This closely resembles the behavior from the previous example and since code has shifted (conventially) to use defaulted parameters to do this, new developers who are learning JavaScript who are interchanging between learning from old and new tutorials might mistaken this as the same behavior because the practice is used to achieve the same goal.&lt;/p&gt;

&lt;p&gt;So if this function was called and passed in &lt;code&gt;null&lt;/code&gt;, we would receive a &lt;code&gt;TypeError&lt;/code&gt; because we are using an &lt;em&gt;array method&lt;/em&gt; on a &lt;code&gt;null&lt;/code&gt; value. Since &lt;code&gt;null&lt;/code&gt; is a value, JavaScript will accept this and use it to default &lt;code&gt;list&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you use &lt;em&gt;TypeScript&lt;/em&gt;, it will catch this and present you with an error message. This is true, but its actually not uncommon where I see people silence crucial errors by writing &lt;code&gt;// @ts-ignore&lt;/code&gt;. Please do not ignore TypeScript errors, they are there to help you fix them before something bad will happen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-use-ternary-operators-instead-of-ampamp-as-much-as-possible-when-assigning-values"&gt;
  &lt;/a&gt;
  2. Use ternary operators instead of &amp;amp;&amp;amp; as much as possible when assigning values
&lt;/h2&gt;

&lt;p&gt;The difference between ternary operators and the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (logical AND) is not that much different when trying to assign a value to something. Though the small difference between these two can actually become your savior more often than you would imagine.&lt;/p&gt;

&lt;p&gt;I'm not talking about scenarios where you would use it in an &lt;code&gt;if&lt;/code&gt; statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In these cases the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator is perfectly fine and is a good choice to write code in a cleaner way.&lt;/p&gt;

&lt;p&gt;But when you start to assign values it is a bad practice! By relying on &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, you as a developer are responsible for ensuring that it won't produce errors when different data types are received.&lt;/p&gt;

&lt;p&gt;For example in unexpected situations like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createListItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/li&amp;gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createList&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;ul&amp;gt;
      &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createListItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="s2"&gt;
    &amp;lt;/ul&amp;gt;
  `&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will produce an unexpected result like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;undefined&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This happens because when we use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; it will immediately return the value of the first operand that evaluates to &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By using ternary operators it forces us to default to a value we expect, making our code more predictable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createListItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/li&amp;gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createList&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;ul&amp;gt;
      &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createListItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="s2"&gt;
    &amp;lt;/ul&amp;gt;
  `&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can at least &lt;em&gt;expect&lt;/em&gt; a cleaner outcome when a bad type is passed in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Users who are not technical geniuses might not know what &lt;code&gt;undefined&lt;/code&gt; means whereas the technical people will quickly catch that this is a human coding flaw.&lt;/p&gt;

&lt;p&gt;Speaking of ternary operators here is a real world code example written from somebody:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;update-data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;pageName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dataKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dataOut&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;dataOut&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dataKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those who might not know, this can be rewritten to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;update-data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;pageName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dataKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dataOut&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;dataKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because the way the ternary operator works is that the first operand is evaluated &lt;em&gt;as a condition&lt;/em&gt; that is used to decide whether to return the value in the second or third operand.&lt;/p&gt;

&lt;p&gt;Though the code is valid the reason why I brought this up is to explain that ternary operators are best used to close the gap between certainty and uncertainty.&lt;/p&gt;

&lt;p&gt;In the previous example we aren't really sure what &lt;code&gt;item&lt;/code&gt; will be in the way it is written:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createListItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/li&amp;gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we use ternary operators, we can be certain that the &lt;code&gt;item&lt;/code&gt; will not be implicitly included as a child of the parent &lt;code&gt;ul&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createListItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/li&amp;gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-create-utility-helpers-when-it-can-be-used-in-more-than-one-situation-especially-when-more-than-one-situation"&gt;
  &lt;/a&gt;
  3. Create utility helpers when it can be used in more than one situation. Especially when more than one situation
&lt;/h2&gt;

&lt;p&gt;Once you realize you are using two pieces of code in more than one place it is a good idea to start thinking about creating a helper utility.&lt;/p&gt;

&lt;p&gt;Consider this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;newDispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Actions must be plain objects&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Action types cannot be undefined.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;//TODO: add is Dispatching&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;rawRootDispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Actions must be plain objects&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Action types cannot be undefined.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawRootReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawRoot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem with this is that it is not very manageable in the long run. If we make more functions that work with action objects and needed to validate them to be objects before continuing, we have to write more of these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Actions must be plain objects&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is also not much control besides throwing an error. What if we don't want the program to fail but still want values to go through the validation process?&lt;/p&gt;

&lt;p&gt;A function utility will solve those problems:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validateObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;shouldThrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldThrow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Actions must be plain objects&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then there is also the validation to check if action.type is &lt;code&gt;undefined&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Action types cannot be undefined.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we have a &lt;code&gt;validateObject&lt;/code&gt; utility we can reuse it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validateAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;shouldThrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validateObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldThrow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Action types cannot be undefined.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we have two validators now but have similar behavior we can further create a higher level utility to produce different/custom validators:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createValidator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validateFn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;shouldThrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;invalidMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;otherOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validateFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;otherOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;otherOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;invalidMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldThrow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;invalidMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggleThrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;enableThrow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;shouldThrow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;enableThrow&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can make a suite of validators without having to write &lt;code&gt;throw new Error('...')&lt;/code&gt; everywhere:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// prettier-ignore&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allPass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isExist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validateAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createValidator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allPass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isExist&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validateStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createValidator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validateURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createValidator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allPass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;validateStr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validateObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createValidator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;invalidMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Value is not an object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;update-data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;dataKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form[password]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dataOut&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dataObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gonzo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validateAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validateURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://google.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validateURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;htt://google.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;validateObject&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="c1"&gt;// Error: Value is not an object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-comment-your-code-when-you-think-someone-else-will-question-you-about-what-it-does"&gt;
  &lt;/a&gt;
  4. Comment your code when you think someone else will question you about what it does
&lt;/h2&gt;

&lt;p&gt;I cannot stress enough of how important this is to your code. If your code will be viewed by someone other than yourself, it is a good practice to explain what your code is doing&lt;/p&gt;

&lt;p&gt;It is one of my biggest pet peeves when I read through code because what ends up happening is you're forcing the reader to search throughout other parts of the code for hints to understand exactly what is happening which can be a headache when you &lt;em&gt;need&lt;/em&gt; to understand it to be able to understand what comes next.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createSignature&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;sk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pk&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I don't mean comment your code as in doing this and calling it a day:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create the signature with the sk, message and optionally an sk&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createSignature&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;sk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pk&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not only is this vague but we don't know &lt;em&gt;where&lt;/em&gt; message comes from or &lt;em&gt;what&lt;/em&gt; it is. Is it a string? An array of strings? Is it &lt;em&gt;required&lt;/em&gt;? Is this an actual message like what you would receive in your email? Is it okay to call it something else? What is the true meaning of it?&lt;/p&gt;

&lt;p&gt;Do everyone a favor and be a team player:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Create the signature with the sk, message and optionally an sk
 * Message should be converted to base64 before calling this function
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createSignature&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;sk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;sk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// secret key&lt;/span&gt;
  &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// public key&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-name-your-functions-in-a-positive-way"&gt;
  &lt;/a&gt;
  5. Name your functions in a positive way
&lt;/h2&gt;

&lt;p&gt;A good practice to follow is to name your functions in a way that it resembles what your mind is already accustomed to when we think of the good things in life.&lt;/p&gt;

&lt;p&gt;For example, when we think of a glass cup of water, what is more positive, the glass being half full or the glass being half empty?&lt;/p&gt;

&lt;p&gt;Although they both mean the exact same thing, the latter has the negative notion that if the glass is half empty we need to think about a refill soon. Do we have anymore water left? Will I be able to last a whole day if not?&lt;/p&gt;

&lt;p&gt;Now if we say that the glass is half full, there is a positive notion that we are "almost there".&lt;/p&gt;

&lt;p&gt;Now lets jump to function naming in code. If we are working with DOM nodes and we are making a function to hide or show elements, how would you name a function that checks if an input element is usable or not?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which one would you rather use? Neither one is wrong, they are both functions that achieve the same thing without problems, only that they are named differently.&lt;/p&gt;

&lt;p&gt;So what is the big deal?&lt;/p&gt;

&lt;p&gt;If we think about all the times we write conditional statements or check if something is successful, majority of the time we are used to receiving &lt;code&gt;true&lt;/code&gt; for successful attempts, and &lt;code&gt;false&lt;/code&gt; for bad attempts.&lt;/p&gt;

&lt;p&gt;This happens so often that when we write or read through code we can quickly skim through conditional statements and get away with scenarios where we assume the function behaves expectedly seeing that it returns &lt;code&gt;true&lt;/code&gt; if everything looks right.&lt;/p&gt;

&lt;p&gt;But think about it. If we stuck with &lt;code&gt;isEnabled&lt;/code&gt; we wouldn't have to worry about other meanings behind the word "enabled". If &lt;code&gt;isEnabled&lt;/code&gt; returns true, that's really straight forward and we are assured that if it is &lt;em&gt;not&lt;/em&gt; enabled then it straight up means &lt;em&gt;disabled&lt;/em&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we stuck with &lt;code&gt;isDisabled&lt;/code&gt; we have to remember that &lt;code&gt;true&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a positive result from this function. This goes against what we are already accustomed to! And for this reason it is more easier to mistaken the behavior which increases the risk of errors in your code.&lt;/p&gt;

&lt;p&gt;Here's another scenario. If we were parsing values from a YAML string, sometimes we come across a (seemingly) boolean value where &lt;code&gt;true&lt;/code&gt; is written as &lt;code&gt;"true"&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as &lt;code&gt;"false"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isBooleanTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isBooleanFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Consider this example in YAML syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;button&lt;/span&gt;
      &lt;span class="na"&gt;hidden&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;false'&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1px solid red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This parses to JSON as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"components"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"hidden"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"button"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"border"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1px solid red"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we were to check if an element is hidden, we have two options to choose: &lt;code&gt;isBooleanTrue&lt;/code&gt; and &lt;code&gt;isBooleanFalse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lets see how this looks like if we chose &lt;code&gt;isBooleanFalse&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;parsedComponents&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;components&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parsedComponents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;parsedComponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;styleKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;styleValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;styleKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styleValue&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Check if it is currently visible&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isBooleanFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;visible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I find this semantic a little confusing even while writing this function. Although the behavior achieves what the &lt;code&gt;toggle&lt;/code&gt; functions intends, this confusion supports the general idea that our code should be simple, readable and maintainable, which is why naming your functions is so important.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And that concludes the end of this post! I found you found this to be valuable and look out for more in the future!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>Automate JavaScript Code Linting and Formatting in 5 simple  Steps</title>
      <author>Rahul Banerjee</author>
      <pubDate>Wed, 18 Aug 2021 05:33:23 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/automate-javascript-code-linting-and-formatting-in-5-simple-steps-2an9</link>
      <guid>https://dev.to/rahulbanerjee99/automate-javascript-code-linting-and-formatting-in-5-simple-steps-2an9</guid>
      <description>&lt;h2&gt;
&lt;a href="https://dev.to/new#what-are-git-hooks"&gt;&lt;/a&gt;What are Git Hooks?&lt;/h2&gt;

&lt;p&gt;Git hooks are basically scripts fired before an important action occurs, eg: before a commit is made, before code is pushed to a repo after a commit is made, etc. You can learn more about Git Hooks and the different kinds of hooks over &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pre-commit hook is a hook that is run before you make a commit.&lt;/p&gt;

&lt;h2&gt;
&lt;a href="https://dev.to/new#tldr"&gt;&lt;/a&gt;TLDR&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install Mocha and Chai for testing&lt;/li&gt;
&lt;li&gt;Install Eslint for Linting&lt;/li&gt;
&lt;li&gt;Install Pretty and Pretty-quick for formatting&lt;/li&gt;
&lt;li&gt;Install Husky to setup pre-commit hook&lt;/li&gt;
&lt;li&gt;Test the pre-commit hook&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
&lt;a href="https://dev.to/new#current-project-setup"&gt;&lt;/a&gt;Current Project Setup&lt;/h2&gt;

&lt;p&gt;I have two files, the first file is called 'utils.js'. It has 4 basic arithmetic functions.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;divide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;divide&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see it is weirdly formatted and is missing semi-colons. This is done intentionally.&lt;/p&gt;

&lt;p&gt;The second file is &lt;code&gt;index.js&lt;/code&gt;. It simply imports the functions from utils.js and exports them.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is also intentionally formatted in a weird manner.&lt;/p&gt;

&lt;p&gt;The project also has a basic package.json file generated using &lt;code&gt;npm init&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
&lt;a href="https://dev.to/new#step-1-setup-testing"&gt;&lt;/a&gt;Step 1 Setup Testing&lt;/h2&gt;

&lt;p&gt;We will use mocha and chai for testing. We will write a single test case for each of our functions. To learn more about mocha and chai in-depth, refer to &lt;a href="https://blog.logrocket.com/a-quick-and-complete-guide-to-mocha-testing-d0e0ea09f09d/"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, let's install mocha and chai&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; mocha
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's install chai&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; chai
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will create a file 'tester.js', and add a few tests to it.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* eslint-disable import/no-extraneous-dependencies */&lt;/span&gt;
&lt;span class="cm"&gt;/* eslint-disable no-undef */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;assert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Adding 1 and 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Subtract&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Subtracting 1 from 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return 0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have not included the entire tester file, there are a couple more test cases for multiply and divide.&lt;/p&gt;

&lt;p&gt;Inside your package.json, add the following under scripts&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mocha --timeout 2000 tester.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do not have 'scripts' in your package.json, create one. It should look like this&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mocha --timeout 2000 tester.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can go to the terminal and run the following command&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
&lt;a href="https://dev.to/new#step-2-setup-linter"&gt;&lt;/a&gt;Step 2 Setup Linter&lt;/h2&gt;

&lt;p&gt;We will use the package &lt;a href="https://www.npmjs.com/package/eslint"&gt;eslint&lt;/a&gt;. First, let's install the package&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;eslint &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will need to initialize our linter&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./node_modules/.bin/eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get a bunch of questions, answer them based on your project.&lt;br&gt;Finally, we will add a new command inside 'scripts' in 'package.json' You can add this under the 'test' command we added in the previous section.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint --fix *.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will run the linter on all your javascript files and fix the linting errors wherever it can.&lt;br&gt;You can also disable some es-lint checks by adding comments to the top of the file or above certain lines. For example, I disabled a couple of checks in the 'tester.js' file&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* eslint-disable import/no-extraneous-dependencies */&lt;/span&gt;
&lt;span class="cm"&gt;/* eslint-disable no-undef */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
&lt;a href="https://dev.to/new#step-3-setup-prettier"&gt;&lt;/a&gt;Step 3 Setup Prettier&lt;/h2&gt;

&lt;p&gt;We will have to install a couple of packages &lt;a href="https://www.npmjs.com/package/prettier"&gt;prettier&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/pretty-quick"&gt;pretty-quick&lt;/a&gt; to format the code.&lt;/p&gt;

&lt;p&gt;Install prettier using the following command&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; npm &lt;span class="nb"&gt;install &lt;/span&gt;prettier &lt;span class="nt"&gt;-save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install pretty-quick using the following command&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;pretty-quick &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will add another command to our 'scripts' section in 'package.json'&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"pretty-quick"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pretty-quick"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do not run the command right now. Let's set up the pre-commit hook and run the command automatically.&lt;/p&gt;

&lt;h2&gt;
&lt;a href="https://dev.to/new#step-4-setup-husky"&gt;&lt;/a&gt;Step 4 Setup Husky&lt;/h2&gt;

&lt;p&gt;We will use &lt;a href="https://www.npmjs.com/package/husky"&gt;husky&lt;/a&gt; to set up our pre-commit hook.&lt;br&gt;Install the package&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;husky@4 &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you install V5 of husky, you might need to do some additional work to set up the pre-commit hook.&lt;/p&gt;

&lt;p&gt;After installation add the following inside your 'package.json'&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"pre-commit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pretty-quick --staged &amp;amp;&amp;amp; npm run lint &amp;amp;&amp;amp; npm test"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, we tell husky to run the above commands (pretty-quick, lint, and the tests) before our files can be committed.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--staged&lt;/code&gt; runs the formatter only on the staged files.&lt;/p&gt;

&lt;h2&gt;
&lt;a href="https://dev.to/new#step-5-test-precommit-hook"&gt;&lt;/a&gt;Step 5 Test Pre-commit hook&lt;/h2&gt;

&lt;p&gt;Now we can finally test our pre-commit hook.&lt;br&gt;First, add your files&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Type the following command to commit your files&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m "Test commit"&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see husky running the prettier, linter and testing scripts. Below is a screenshot of the terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TIZwZd3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u3n8zlk687rf06gv0do.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--on2IPflg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--TIZwZd3t--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u3n8zlk687rf06gv0do.png" alt="Screen Shot 2021-08-18 at 12.59.18 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the linter returns an error or one of the test cases fails, the commit will be unsuccessful and your files will remain in the staging area and not be committed.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>No Fuss Dark-Mode Toggle with React &amp; Styled-Components! 🌞↔️🌖</title>
      <author>Chris Hansen </author>
      <pubDate>Wed, 18 Aug 2021 05:32:36 +0000</pubDate>
      <link>https://dev.to/hyggedev/no-fuss-dark-mode-toggle-with-react-styled-components-3nd4</link>
      <guid>https://dev.to/hyggedev/no-fuss-dark-mode-toggle-with-react-styled-components-3nd4</guid>
      <description>&lt;p&gt;Have you noticed &lt;strong&gt;dark mode&lt;/strong&gt; is pretty standard lately? &lt;/p&gt;

&lt;p&gt;Well, that's because it's badass!&lt;/p&gt;

&lt;p&gt;Let's achieve this new standard of awesome by utilizing styled-components and React! &lt;/p&gt;

&lt;p&gt;It's super easy to implement, so let's get straight to it! 💯&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  👉 &lt;a href="https://styled-components-darkmode.netlify.app/"&gt;Demo&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#repo"&gt;
  &lt;/a&gt;
  👉 &lt;a href="https://github.com/chansen17/styled-components-darkmode"&gt;Repo&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#some-things-im-expecting-you-to-know"&gt;
  &lt;/a&gt;
  Some things I'm expecting you to know
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Development Environment&lt;/li&gt;
&lt;li&gt;Basics in React&lt;/li&gt;
&lt;li&gt;Basic S(C)ass&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#1-fresh-react-project"&gt;
  &lt;/a&gt;
  1. Fresh React project
&lt;/h2&gt;

&lt;p&gt;Let's clean up the file structure ~ &lt;em&gt;if you want.&lt;/em&gt; I deleted all unnecessary files for this project. Removing &lt;code&gt;App.css&lt;/code&gt; and all testing related files. Be sure to remove necessary lines of code in &lt;code&gt;index.js&lt;/code&gt;. I also cleaned up the boilerplate between the &lt;code&gt;header&lt;/code&gt; tags.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-install-and-import-styledcomponents"&gt;
  &lt;/a&gt;
  2. Install and Import styled-components
&lt;/h2&gt;

&lt;p&gt;With a fresh project, let's now install and import styled-components. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;yarn add styled-components&lt;/code&gt; or&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install --save styled-components&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's now import styled-components like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import styled from 'styled-components'`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-lets-create-a-simple-landing-page-with-styledcomponents"&gt;
  &lt;/a&gt;
  3. Let's create a simple landing page with styled-components
&lt;/h2&gt;

&lt;p&gt;In our &lt;code&gt;App()&lt;/code&gt; let's return a &lt;code&gt;Page&lt;/code&gt;, &lt;code&gt;Container&lt;/code&gt;, &lt;code&gt;Heading&lt;/code&gt;, &lt;code&gt;H1&lt;/code&gt;, &lt;code&gt;P&lt;/code&gt;, &lt;code&gt;Toggle&lt;/code&gt;, and &lt;code&gt;ThemeImage&lt;/code&gt; component, respectively. It should look like so&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L5QrFfMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dvrh7tpi1vtvfp2lp5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L5QrFfMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dvrh7tpi1vtvfp2lp5f.png" alt="Example code showing the Page, Heading, H1, P, Toggle, and ThemeImage components"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#4-now-that-we-have-our-layout-lets-create-each-of-our-components"&gt;
  &lt;/a&gt;
  4. Now that we have our layout, let's create each of our components
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Page&lt;/code&gt; and &lt;code&gt;Container&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xwyNV_7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0p4lz4gcacptj0ptwy7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwyNV_7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0p4lz4gcacptj0ptwy7f.png" alt="Page and Container component"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;Heading&lt;/code&gt; and &lt;code&gt;H1&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14H-guWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6io3xddrn3oypq22rjog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14H-guWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6io3xddrn3oypq22rjog.png" alt="Heading and H1"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;P&lt;/code&gt; and &lt;code&gt;Toggle&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uelY4RE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fog9wx0oy7z4o9ko5ah2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uelY4RE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fog9wx0oy7z4o9ko5ah2.png" alt="P and Toggle components"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;ThemeImage&lt;/code&gt; is the component that will contain our toggle state images &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uIXu4vln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lokti6hl65uhkz6gd65n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uIXu4vln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lokti6hl65uhkz6gd65n.png" alt="ThemeImage component"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#5-lets-create-state-for-our-toggle-component"&gt;
  &lt;/a&gt;
  5. Let's create state for our toggle component
&lt;/h2&gt;

&lt;p&gt;In order for us to to toggle between light and dark mode, we need to hold state. Let's begin by importing the useState hook. &lt;code&gt;import {useState} from 'react'&lt;/code&gt;. Then add it to your &lt;code&gt;App()&lt;/code&gt; component like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDarkMode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next let's add the logic that will toggle between light and dark mode for our button &lt;code&gt;Toggle&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;setDarkMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;// console.log(isDarkMode);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This functions only responsibility is to toggle the opposite of what the current state is. In other words, if the state is currently &lt;code&gt;true&lt;/code&gt;, toggling it will become &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt; it becomes &lt;code&gt;true&lt;/code&gt;. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#6-update-our-raw-toggle-endraw-component"&gt;
  &lt;/a&gt;
  6. Update our &lt;code&gt;Toggle&lt;/code&gt; component
&lt;/h2&gt;

&lt;p&gt;Now that we have a function that can toggle our light ~ dark state, let's update our &lt;code&gt;Toggle&lt;/code&gt; component like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleToggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Toggle&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-import-images-to-display-the-active-theme"&gt;
  &lt;/a&gt;
  7. Import images to display the active theme
&lt;/h2&gt;

&lt;p&gt;If we want to show our users the current and next theme, we can do so visually with the use of a Moon and Sun image. Let's import the images at the top of our code like so:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;images are available in the repo&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Moon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./images/moon.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Sun&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./images/sun.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then lets update our &lt;code&gt;ThemeImage&lt;/code&gt; component like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleToggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeImage&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Sun&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Moon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Toggle&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we are updating the &lt;code&gt;ThemeImage&lt;/code&gt; components src attribute as it is an instance of &lt;code&gt;img&lt;/code&gt;. We are also conditionally setting the image with a simple ternary operator while also utilizing template literals. &lt;br&gt;
I'll explain with some pseudocode. You can read this like &lt;code&gt;if stateIsNotDarkMode ? render Moon : else render Sun.&lt;/code&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#8-lets-update-some-style-properties-in-our-components"&gt;
  &lt;/a&gt;
  8. Let's update some style properties in our components
&lt;/h2&gt;

&lt;p&gt;We're almost done! Let's update the &lt;code&gt;background&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; properties in a few of our components &lt;/p&gt;

&lt;p&gt;First, Let's change the &lt;code&gt;Page&lt;/code&gt; components background style to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;props&lt;/span&gt; &lt;span class="err"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;props.light&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;"#eee"&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;"#333"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Secondly, let's change the &lt;code&gt;H1&lt;/code&gt; components color style to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;props&lt;/span&gt; &lt;span class="err"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;!props.light&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;"papayawhip"&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;"#000"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Lastly, let's change the  &lt;code&gt;P&lt;/code&gt; components color styles to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;props&lt;/span&gt; &lt;span class="err"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;!props.light&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;"#eee"&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;"#333"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we are conditionally styling our background or color properties based on the prop that we pass into our components. If the component contains the &lt;code&gt;light&lt;/code&gt; prop, render this color, else render this color.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#9-pass-in-our-default-theme-to-our-components-with-the-raw-light-endraw-prop"&gt;
  &lt;/a&gt;
  9. Pass in our default Theme to our components with the &lt;code&gt;light&lt;/code&gt; prop
&lt;/h2&gt;

&lt;p&gt;All we have to do now is update our components in the layout with the default &lt;code&gt;light&lt;/code&gt; prop. Like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;H1&lt;/span&gt; &lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Dynamic&lt;/span&gt; &lt;span class="nx"&gt;Styling&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;Styled&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Components&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/H1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt; &lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Lorem&lt;/span&gt; &lt;span class="nx"&gt;ipsum&lt;/span&gt; &lt;span class="nx"&gt;dolor&lt;/span&gt; &lt;span class="nx"&gt;sit&lt;/span&gt; &lt;span class="nx"&gt;amet&lt;/span&gt; &lt;span class="nx"&gt;consectetur&lt;/span&gt; &lt;span class="nx"&gt;adipisicing&lt;/span&gt; &lt;span class="nx"&gt;elit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Dicta&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="nx"&gt;natus&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="nx"&gt;vitae&lt;/span&gt; &lt;span class="nx"&gt;sint&lt;/span&gt; &lt;span class="nx"&gt;qui&lt;/span&gt; &lt;span class="nx"&gt;sapiente&lt;/span&gt; &lt;span class="nx"&gt;impedit&lt;/span&gt; &lt;span class="nx"&gt;rerum&lt;/span&gt; &lt;span class="nx"&gt;commodi&lt;/span&gt; &lt;span class="nx"&gt;fugit&lt;/span&gt; &lt;span class="nx"&gt;ullam&lt;/span&gt; &lt;span class="nx"&gt;repudiandae&lt;/span&gt; &lt;span class="nx"&gt;itaque&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;saepe&lt;/span&gt; &lt;span class="nx"&gt;fuga&lt;/span&gt; &lt;span class="nx"&gt;facere&lt;/span&gt; &lt;span class="nx"&gt;temporibus&lt;/span&gt; &lt;span class="nx"&gt;excepturi&lt;/span&gt; &lt;span class="nx"&gt;dolore&lt;/span&gt; &lt;span class="nx"&gt;officia&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/P&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleToggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThemeImage&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Moon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Sun&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Toggle&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Heading&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Page&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here I am also conditionally rendering the &lt;code&gt;light&lt;/code&gt; prop to either be true, or false, depending on on our state. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion! 👏
&lt;/h2&gt;

&lt;p&gt;Congrats! That's a wrap on &lt;strong&gt;No Fuss Dark-Mode Toggle with React &amp;amp; Styled-Components!&lt;/strong&gt; Hopefully, if everything went right, you were able to implement a badass dark mode into your project, in 9 simple steps! &lt;/p&gt;

&lt;p&gt;Please don't hesitate to hit me up on &lt;a href="https://twitter.com/hyggedev"&gt;Twitter&lt;/a&gt; in regards to any questions, concerns or if you just wanna say hello! &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#are-you-a-beginner-web-developer"&gt;
  &lt;/a&gt;
  Are you a beginner web developer!?
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/how-to-stay-focused-as-a-self-taught-frontend-web-developer-7gp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to stay focused 🔍 as a self taught Frontend Web Developer 💻&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  ・ Jul 29 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devjournal&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/how-to-build-a-responsive-react-navigation-menu-with-styled-components-3682" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to build a Responsive 📱 React Navigation Menu with Styled-Components 💻&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  ・ Aug 3 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/hyggedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF2YY4hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EoeHCiMq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/273899/c143e65c-a98f-4545-968d-814c095950a0.jpg" alt="hyggedev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hyggedev/easiest-way-to-add-icons-to-your-react-apps-5cgd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Easiest Way To Add Icons To Your React Apps 😎&lt;/h2&gt;
      &lt;h3&gt;Chris Hansen  ・ Aug 10 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Creating View Components in ASP.NET Core 3.1</title>
      <author>EzzyLearning.net</author>
      <pubDate>Wed, 18 Aug 2021 05:25:16 +0000</pubDate>
      <link>https://dev.to/ezzylearning/creating-view-components-in-asp-net-core-3-1-1161</link>
      <guid>https://dev.to/ezzylearning/creating-view-components-in-asp-net-core-3-1-1161</guid>
      <description>&lt;p&gt;ASP.NET Core is a cross-platform, high-performance, open-source framework for building modern web, cloud and internet based applications. We can also develop Web APIs, mobile apps and client site single page applications using our favorite development tools on Windows, macOS and Linux. Microsoft introduced many new features in ASP.NET Core 1.0 to 3.1 releases such as Razor Pages, Blazor etc. In this article I will teach you about one of the newly introduced feature of ASP.NET Core called View Components. I will explain the difference between View Components and Partial Views. I will also explain how can we implement reusable view components which can also be parameterized to customized to generate different response in different parts of the web application. We will be creating a weather widget view component which will display the current weather information of the city we will pass as a parameter to the view component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-view-components"&gt;
  &lt;/a&gt;
  What are View Components
&lt;/h2&gt;

&lt;p&gt;View Component are powerful, self-contained, reusable UI components which can consistently generate reusable HTML from a razor view. They can generate both static and dynamic contents which can be customized further using parameters. View Components can also be used to connect backend databases or services to fetch data. Here are the important points to remember when implementing View Components&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;View Components are suitable for rendering a chunk rather than a whole response. This makes them ideal for rending UI elements, widgets, dynamic menus, shopping cart, login page, sidebars etc.&lt;/li&gt;
&lt;li&gt;View Components don’t support features like View Data or Data Binding and only depend on the data provided to them at runtime as parameters&lt;/li&gt;
&lt;li&gt;View Components support separation of concern and testability benefits in a sense that they always generate consistent output no matter where they are used.&lt;/li&gt;
&lt;li&gt;View components can be parameterized to customize the output, and they can also have their own business logic.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#view-components-vs-partial-views"&gt;
  &lt;/a&gt;
  View Components vs Partial Views
&lt;/h2&gt;

&lt;p&gt;They are designed to do everything that a Partial View was doing in previous versions of ASP.NET and more. When we use partial view, we still have dependency on controller, and we can access View Data and controller contents while in View Component we don’t even need a controller. View Components have their own separate class which can run some business logic and generate response using razor view. We can think View Components as mini controllers with less overhead than a full MVC Controller.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-view-component"&gt;
  &lt;/a&gt;
  Creating a View Component
&lt;/h2&gt;

&lt;p&gt;A View Component consists of following two parts&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A class typically derived from a &lt;strong&gt;Microsoft.AspNetCore.Mvc.ViewComponent&lt;/strong&gt; object&lt;/li&gt;
&lt;li&gt;A view to render the response generated by the View Component&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are many ways you can create your own View Component class. You can derive your class from &lt;strong&gt;ViewComponent&lt;/strong&gt; as mentioned above&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class Navbar : ViewComponent 
{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can decorate your class with a &lt;strong&gt;ViewComponent&lt;/strong&gt; attribute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ViewComponent]
public class Navbar
{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also follow the naming conventions and simply create a class with the suffix &lt;strong&gt;ViewComponent&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class NavbarViewComponent 
{

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me walk you through a simple ASP.NET Core 3.1 demo application in which we can learn how to create and use our own View Components. For this tutorial, I am going to use &lt;strong&gt;Microsoft Visual Studio 2019&lt;/strong&gt; but you can also create &lt;strong&gt;ASP.NET Core 3.1&lt;/strong&gt; web application using command line tools e.g. &lt;strong&gt;dotnet&lt;/strong&gt; if you want.&lt;/p&gt;

&lt;p&gt;First, let’s create a new ASP.NET Core Web Application project in Visual Studio 2019. For this tutorial, I have chosen &lt;strong&gt;ViewComponentsDemoApp&lt;/strong&gt; as the project name. Once your project is open in Visual Studio, press &lt;strong&gt;F5&lt;/strong&gt; to make sure your project is building and running without any error. If everything is fine, you should be able to see the following output in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mghJ3ETn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t39pgcxvyg5yyk8iswk5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mghJ3ETn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t39pgcxvyg5yyk8iswk5.png" alt="asp-net-core-3-1-default-web-application-demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we create our custom view component or its associated view file please note that the runtime searches for the view in the following paths:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/Views/{Controller Name}/Components/{View Component Name}/{View Name}&lt;/li&gt;
&lt;li&gt;/Views/Shared/Components/{View Component Name}/{View Name}&lt;/li&gt;
&lt;li&gt;/Pages/Shared/Components/{View Component Name}/{View Name}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Off course, just like everything else in ASP.NET Core, we can customize the view search path and guide the runtime to look for the views somewhere else but for simplicity I have decided to use one of the default view path.&lt;/p&gt;

&lt;p&gt;Create a &lt;strong&gt;Components&lt;/strong&gt; folder in &lt;strong&gt;Shared&lt;/strong&gt; folder and inside Components folder create a folder called &lt;strong&gt;WeatherWidget&lt;/strong&gt;. This folder will contain both the class and the view file of our custom view component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y3gwO1WZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bo9naulmqvacdbbpgb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y3gwO1WZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bo9naulmqvacdbbpgb8.png" alt="view-component-folder-in-asp-net-core-3-1-project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside WeatherWidget folder, create a class named &lt;strong&gt;WeatherWidgetViewComponent&lt;/strong&gt; and a view named &lt;strong&gt;Default.cshtml&lt;/strong&gt;. The reason I created the view with the name Default.cshtml is because in ASP.NET Core default view name for a view component is Default. We can give our view a different name but then we have to specify the new name in order to use it. I will recommend that you name your views Default.cshtml so that runtime can find them automatically at &lt;strong&gt;Views/Shared/Components/{View Component Name}/{View Name}&lt;/strong&gt; path without any special configuration.&lt;/p&gt;

&lt;p&gt;To keep things simple in the start, I implemented a simple view component below that simply passes a single parameter &lt;strong&gt;cityName&lt;/strong&gt; when invoked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class WeatherWidgetViewComponent : ViewComponent
{
    public IViewComponentResult Invoke(string cityName)
    {
        return View("Default", cityName);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep following points in mind when you are implementing view components methods&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can define your logic in synchronous &lt;strong&gt;Invoke&lt;/strong&gt; method that returns &lt;strong&gt;IViewComponentResult&lt;/strong&gt; as shown in above example or you can define your logic in &lt;strong&gt;InvokeAsync&lt;/strong&gt; method that returns &lt;strong&gt;Task&lt;/strong&gt;. We will see the example of this method in action later in this tutorial. &lt;/li&gt;
&lt;li&gt;Most of the time, you will initialize your model in Invoke or &lt;strong&gt;InvokeAsync&lt;/strong&gt; methods and will pass the model to a view by calling ViewComponent &lt;strong&gt;View&lt;/strong&gt; method.&lt;/li&gt;
&lt;li&gt;Inside &lt;strong&gt;Invoke&lt;/strong&gt; or &lt;strong&gt;InvokeAsync&lt;/strong&gt; methods, there is no model binding and you don’t handle HTTP request. You should use the parameters passed to the method instead of any data available in HTTP context.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Inside our Default.cshtml view file I added just two lines. The first line says that the model type passed in is just a string, and the second line renders that string wrapped in an h2.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@model string

&amp;lt;h2&amp;gt;@Model&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#invoking-a-view-component"&gt;
  &lt;/a&gt;
  Invoking a View Component
&lt;/h2&gt;

&lt;p&gt;It is now time to invoke our simple view component from a razor view or layout page. To use the view component, we need to call InvokeAsync method of Component class inside a view, and we can also pass parameters as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@await Component.InvokeAsync("WeatherWidget", new { cityName = "London" })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Press F5 to run the project and you will see the parameter value displayed on the page as h1 heading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPpM-q1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzojchlu42on26x1ofau.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPpM-q1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzojchlu42on26x1ofau.png" alt="simple view component demo in asp-net-core-3-1"&gt;&lt;/a&gt;&lt;br&gt;
If you are using ASP.NET Core 1.1 and higher, you can also invoke a view component as a Tag Helper. The syntax to invoke view components as Tag Helpers is following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;vc:[view-component-name]
  parameter1="parameter1 value"
  parameter2="parameter2 value"&amp;gt;
&amp;lt;/vc:[view-component-name]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so if we want to invoke our WeatherWidget component we can use following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;vc:weather-widget city-name="London"&amp;gt;&amp;lt;/vc:weather-widget&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that to use a view component as a Tag Helper, you need to register the assembly containing the view component using the &lt;strong&gt;@addTagHelper&lt;/strong&gt; directive to the &lt;strong&gt;_ViewImports.cshtml&lt;/strong&gt; file. For the purpose of this tutorial, I added following line in _ViewImports.cshtml file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@addTagHelper *, ViewComponentsDemoApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far our view component hasn’t provided us any special value as it is only rendering h1 element which we could easily render without even using view components. Let’s add some logic and data into our view component to make it more reusable and useful component.&lt;/p&gt;

&lt;p&gt;For a variation, replace the Invoke method with &lt;strong&gt;InvokeAsync&lt;/strong&gt; method and call a method &lt;strong&gt;GetWeatherInfo&lt;/strong&gt; that returns hard coded weather information for London, New York and Paris based on the &lt;strong&gt;cityName&lt;/strong&gt; parameter passed to it. In real world application, you can call a weather web service here to fetch the real data for your applications.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class WeatherWidgetViewComponent: ViewComponent {

  public async Task &amp;lt; IViewComponentResult &amp;gt; InvokeAsync(string cityName) {
    var response = await GetWeatherInfo(cityName);
    return View("Default", response);
  }

  private async Task &amp;lt; WeatherInfo &amp;gt; GetWeatherInfo(string cityName) {

    var obj = new WeatherInfo();
    obj.City = cityName;
    obj.Date = DateTime.Now.ToString("dddd h:mm tt");

    if (cityName == "London") {
      obj.Icon = "cloudy.png";
      obj.Condition = "Cloudy";
      obj.Precipitation = "7%";
      obj.Humidity = "70%";
      obj.Wind = "6 km/h";
    }
    else if (cityName == "New York") {
      obj.Icon = "partly_cloudy.png";
      obj.Condition = "Partly Cloudy";
      obj.Precipitation = "17%";
      obj.Humidity = "80%";
      obj.Wind = "16 km/h";
    }
    else if (cityName == "Paris") {
      obj.Icon = "rain.png";
      obj.Condition = "Rain";
      obj.Precipitation = "67%";
      obj.Humidity = "20%";
      obj.Wind = "9 km/h";
    }

    return obj;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have used following &lt;strong&gt;WeatherInfo&lt;/strong&gt; model class in above example so you can also create this class inside Models folder created at your project root level&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;namespace ViewComponentsDemoApp.Models
{
    public class WeatherInfo
    {
        public string City { get; set; }
        public string Date { get; set; }
        public string Icon { get; set; }
        public string Condition { get; set; }
        public string Precipitation { get; set; }
        public string Humidity { get; set; }
        public string Wind { get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;o render more professional UI element instead of a simple h1 element, I added bootstrap card markup inside our &lt;strong&gt;Default.cshtml&lt;/strong&gt; view as follows. Note that the &lt;strong&gt;WeatherInfo&lt;/strong&gt; object is now used as a model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="card"&amp;gt;
    &amp;lt;div class="card-body" style="width:200px;"&amp;gt;
        &amp;lt;h5 class="card-title"&amp;gt;@Model.City&amp;lt;/h5&amp;gt;
        &amp;lt;p class="card-text"&amp;gt;
            &amp;lt;span class="text-muted"&amp;gt;@Model.Date&amp;lt;/span&amp;gt;
        &amp;lt;/p&amp;gt;
        &amp;lt;img src="@("/images/" + Model.Icon)" class="card-img-top" style="margin:auto; width: 65px;"&amp;gt;
        &amp;lt;h6 class="text-muted"&amp;gt;@Model.Condition&amp;lt;/h6&amp;gt;
        &amp;lt;br /&amp;gt;
        &amp;lt;div&amp;gt;Precipitation: &amp;lt;span&amp;gt;@Model.Precipitation&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;Humidity: &amp;lt;span&amp;gt;@Model.Humidity&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;Wind: &amp;lt;span&amp;gt;@Model.Wind&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, I invoked &lt;strong&gt;WeatherWidget&lt;/strong&gt; view component three times and passed different city name as a parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="text-center"&amp;gt;
    &amp;lt;h2&amp;gt;World Weather&amp;lt;/h2&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;center&amp;gt;
        &amp;lt;div class="container"&amp;gt;
            &amp;lt;div class="row"&amp;gt;
                &amp;lt;div class="card-group" style="margin:auto;"&amp;gt;

                    &amp;lt;vc:weather-widget city-name="London"&amp;gt;&amp;lt;/vc:weather-widget&amp;gt;

                    &amp;lt;vc:weather-widget city-name="New York"&amp;gt;&amp;lt;/vc:weather-widget&amp;gt;

                    &amp;lt;vc:weather-widget city-name="Paris"&amp;gt;&amp;lt;/vc:weather-widget&amp;gt;

                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/center&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Press F5 to run the example and you will see that our WeatherWidget view component has generated the weather information of all three cities passed as parameter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_xW1y8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r453yk1v1x1t7c66kyoo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_xW1y8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r453yk1v1x1t7c66kyoo.png" alt="Creating View Components in ASP.NET Core 3.1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this tutorial, I talked about one of the cool feature of ASP.NET Core view components and how they can help you in extending your views and provide more reusable functionality for the users. Keep visiting my website to read more articles on other areas of ASP.NET Core and related technologies.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top Chrome Extensions That You Wish You Knew It Earlier</title>
      <author>Suhail Kakar</author>
      <pubDate>Wed, 18 Aug 2021 05:08:24 +0000</pubDate>
      <link>https://dev.to/suhailkakar/top-chrome-extensions-that-you-wish-you-knew-it-earlier-f95</link>
      <guid>https://dev.to/suhailkakar/top-chrome-extensions-that-you-wish-you-knew-it-earlier-f95</guid>
      <description>&lt;p&gt;Chrome is a fantastic browser — it's quick, well-designed, and jam-packed with useful features – but that's only the beginning. Chrome's true strength lies in its vast library of add-ons, which provide it with a never-ending supply of new features and capabilities.&lt;/p&gt;

&lt;p&gt;In this article, I am going to introduce you top extensions that you might not know about them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-fake-filler"&gt;
  &lt;/a&gt;
  10. Fake Filler
&lt;/h3&gt;

&lt;p&gt;Fake Filler is a form filler that fills all inputs on a page with scam/dummy data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cJ2zpqdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912422004.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cJ2zpqdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912422004.png" alt="screely-1628912422004.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-colorpick-eyedropper"&gt;
  &lt;/a&gt;
  9. ColorPick Eyedropper
&lt;/h3&gt;

&lt;p&gt;A zoomed eyedropper &amp;amp; color chooser tool that allows you to select color values from web pages and more.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DvwncDX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912469522.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DvwncDX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912469522.png" alt="screely-1628912469522.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-site-palette"&gt;
  &lt;/a&gt;
  8. Site Palette
&lt;/h3&gt;

&lt;p&gt;A must-have tool for designers and front-end developers to grab colors for any website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6l6xuIgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912564725.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6l6xuIgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912564725.png" alt="screely-1628912564725.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-whatfont"&gt;
  &lt;/a&gt;
  7. WhatFont
&lt;/h3&gt;

&lt;p&gt;The easiest way to identify fonts on web pages.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SGtRacs_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912633708.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SGtRacs_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912633708.png" alt="screely-1628912633708.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-responsive-viewer"&gt;
  &lt;/a&gt;
  6. Responsive Viewer
&lt;/h3&gt;

&lt;p&gt;Show multiple screens once, Responsive design tester&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6D-YiHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912739290.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6D-YiHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912739290.png" alt="screely-1628912739290.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-perfectpixel"&gt;
  &lt;/a&gt;
  5. PerfectPixel
&lt;/h3&gt;

&lt;p&gt;Adds a semi-transparent image overlay over the top of the developed HTML to easily perform pixel-perfect comparisons between them, useful for replicating UI designs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_X9NSDH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912813362.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_X9NSDH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912813362.png" alt="screely-1628912813362.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-imageye"&gt;
  &lt;/a&gt;
  4. Imageye
&lt;/h3&gt;

&lt;p&gt;Find and download all images on a web page. With Imageye you can find, browse and download all the images present on a web page.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMjRWEvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912878062.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMjRWEvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912878062.png" alt="screely-1628912878062.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-stylebot"&gt;
  &lt;/a&gt;
  3. Stylebot
&lt;/h3&gt;

&lt;p&gt;Change the appearance of the web instantly.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iT0gG-sA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912920005.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iT0gG-sA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912920005.png" alt="screely-1628912920005.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-page-ruler-redux"&gt;
  &lt;/a&gt;
  2. Page Ruler Redux
&lt;/h3&gt;

&lt;p&gt;A Web Developer\Designer ruler to get perfect pixel dimensions and positioning to measure elements on any web page.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qh3LAjSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912970131.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qh3LAjSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628912970131.png" alt="screely-1628912970131.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-web-developer"&gt;
  &lt;/a&gt;
  1. Web Developer
&lt;/h3&gt;

&lt;p&gt;Adds a toolbar button with various web developer tools.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVBxd-vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628923402532.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVBxd-vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/screely-1628923402532.png" alt="screely-1628923402532.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion ⌛
&lt;/h3&gt;

&lt;p&gt;I hope you found this short list helpful. If you need any help please let me know in the comment section. &lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>.NET Core 
In Artificial Intelligence Series-Overview</title>
      <author>Kinfey Lo</author>
      <pubDate>Wed, 18 Aug 2021 04:26:40 +0000</pubDate>
      <link>https://dev.to/kinfey/net-core-in-artificial-intelligence-series-overview-3i5f</link>
      <guid>https://dev.to/kinfey/net-core-in-artificial-intelligence-series-overview-3i5f</guid>
      <description>&lt;p&gt;Hi .NET Developer, this is a series of how to complete artificial intelligence applications under .NET Core, and hope to provide a guide for .NET Developer to enter the field of artificial intelligence.&lt;/p&gt;

&lt;p&gt;.NET Core is already a technology stack solution for full-scene applications, with support for every field. Since Microsoft's efforts in open source, the community capabilities of .NET Core have also been supplemented.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1w9MPfjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nxozzkit3d5sxljtkym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1w9MPfjB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nxozzkit3d5sxljtkym.png"&gt;&lt;/a&gt;&lt;br&gt;
Artificial intelligence is a global hotspot. In artificial intelligence, the Python language is the first world. There are many technical barriers for many .NET programmers to enter this field. Of course, some people will mention why we need to use .NET for machine learning? For a team, there is technical continuity. If you want to invest in a new field, you must ensure the technical cost. If you want to recruit a Python team, it will cost a lot. What can be done with the original technology is the best solution, and it can continue the creativity of the original team. It is also very good for individuals to better apply the experience accumulated in the past in new fields.&lt;/p&gt;

&lt;p&gt;What can .NET Core do in artificial intelligence at this stage? How is the ecology? The following are some related technologies in native .NET Core artificial intelligence scenarios&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--owNy0HB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qptj9sqpzooldh0t7nb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--owNy0HB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qptj9sqpzooldh0t7nb.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-interactive"&gt;
  &lt;/a&gt;
  &lt;strong&gt;.NET Interactive&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In traditional data science, data scientists like to use Jupyter Notebook as the main environmental tool. (Jupyter notebook is a web application that allows users to combine explanatory text, mathematical equations, code, and visual content into one easy-to-share document.) .NET Interactive is an extension of Jupyter Notebook that allows .NET Developers to work in Jupyter Use C#/F# to do data-related work on Notebook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#numsharp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NumSharp&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In Python, we need to use Numpy to do a large amount of data processing, complete matrix operations, and multi-dimensional data conversion. NumSharp is an open source .NET Core version of Numpy provided by a third party. (Github  &lt;a href="https://github.com/SciSharp/NumSharp"&gt;&lt;/a&gt;&lt;a href="https://github.com/SciSharp/NumSharp"&gt;https://github.com/SciSharp/NumSharp&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-dataframe"&gt;
  &lt;/a&gt;
  &lt;strong&gt;.NET DataFrame&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In data science, data analysis is a very important part, and Pandas is an important tool in the Python scenario. For .NET Core, data analysis is done through DataFrame, allowing you to understand and adjust data faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#xplot"&gt;
  &lt;/a&gt;
  &lt;strong&gt;XPlot&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Through XPlot, you can generate different charts from the data and find out the characteristics of the data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#net-for-apache-spark"&gt;
  &lt;/a&gt;
  &lt;strong&gt;.NET for Apache Spark&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;.NET Core natively supports Apache Spark for big data processing&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mlnet"&gt;
  &lt;/a&gt;
  &lt;strong&gt;ML.NET&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;ML.NET is Microsoft's machine learning framework, which provides an easy way to train, create, and run models in the .NET ecosystem. This is great news for .NET developers, because it allows you to reuse all the knowledge, skills, code, and libraries you already have as a .NET developer. However, this is not just a framework for .NET developers. In fact, ML.NET has proven itself to be a great end-to-end tool that enables any developer to create complex pipelines and bind to different data sources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tensorflownet"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TensorFlow.NET&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;TensorFlow.NET (TF.NET) provides .NET Standard bindings for TensorFlow. It aims to implement a complete Tensorflow API in C#, allowing .NET developers to use the cross-platform .NET Standard framework to develop, train, and deploy machine learning models. TensorFlow.NET has built-in Keras high-level interface and is released as an independent package TensorFlow.Keras. (Github  &lt;a href="https://github.com/SciSharp/TensorFlow.NET"&gt;&lt;/a&gt;&lt;a href="https://github.com/SciSharp/TensorFlow.NET"&gt;https://github.com/SciSharp/TensorFlow.NET&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tensorflowsharp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TensorFlowSharp&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;TensorFlowSharp is a TensorFlow model runtime. Compared with TensorFlow.NET, it lacks many functions such as graph calculation and training. (Github  &lt;a href="https://github.com/migueldeicaza/TensorFlowSharp"&gt;&lt;/a&gt;&lt;a href="https://github.com/migueldeicaza/TensorFlowSharp"&gt;https://github.com/migueldeicaza/TensorFlowSharp&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#torchsharp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TorchSharp&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;TorchSharp is a .NET library that provides access to libraries that support PyTorch. (Github  &lt;a href="https://github.com/xamarin/TorchSharp"&gt;&lt;/a&gt;&lt;a href="https://github.com/xamarin/TorchSharp"&gt;https://github.com/xamarin/TorchSharp&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Through the above-mentioned native libraries, you can complete related technologies through C#/F#. This series will start with the most basic knowledge, including environment construction, basic concepts, machine learning related algorithms, and deep learning, hoping to make .NETer more Good to learn the knowledge of artificial intelligence.&lt;/p&gt;

&lt;p&gt;ps:The book update is also synchronized on Github (&lt;a href="https://github.com/kinfey/DotMLBooks"&gt;&lt;/a&gt;&lt;a href="https://github.com/kinfey/DotMLBooks"&gt;https://github.com/kinfey/DotMLBooks&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Creating a confetti Effect in 5 minutes</title>
      <author>CoderZ90</author>
      <pubDate>Wed, 18 Aug 2021 04:21:16 +0000</pubDate>
      <link>https://dev.to/official_fire/creating-a-confetti-effect-in-5-minutes-16h3</link>
      <guid>https://dev.to/official_fire/creating-a-confetti-effect-in-5-minutes-16h3</guid>
      <description>&lt;p&gt;Hello guys 😊 Hope you are safe. So after reading this blog i hope you will be able to create a confetti effect just in 5 minutes&lt;/p&gt;

&lt;p&gt;Confetti Falling Background is very impressive when it's a Birthday wishes website, Inaugration website, or something related to wishes or parties. &lt;/p&gt;

&lt;p&gt;There is also a video tutorial available on my channel &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Confetti Video Tutorial Link -&lt;/em&gt; &lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=quSR_ZrVz6Y&amp;amp;t=44s"&gt;https://www.youtube.com/watch?v=quSR_ZrVz6Y&amp;amp;t=44s&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the first step we need to do is download 1 file ( we are using javascript library )&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#link-to-download-httpsgithubcomcoderz90confettiblobmainconfettijs"&gt;
  &lt;/a&gt;
  Link to download - &lt;a href="https://github.com/CoderZ90/confetti/blob/main/confetti.js"&gt;https://github.com/CoderZ90/confetti/blob/main/confetti.js&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;You can follow my tutorial to make it or keep reading the blog to make it :)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-01"&gt;
  &lt;/a&gt;
  Step 01
&lt;/h1&gt;

&lt;p&gt;Create a index.html file and put the following code here in this we are link our &lt;strong&gt;confetti.js&lt;/strong&gt; file and also linking our css file which is &lt;strong&gt;style.css&lt;/strong&gt; - one more cool thing is you can modify the &lt;strong&gt;confetti.js&lt;/strong&gt; file according to your needs if you want to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- link css file to style --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Confetti Js Effect 🎇&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Here link the script file which you downloaded from the above link --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"confetti.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Our javascript code comes here --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-02"&gt;
  &lt;/a&gt;
  Step 02
&lt;/h1&gt;

&lt;p&gt;After you have done this you can go to css file and style it whatever you want to in this we are just changing the background color and the text color just for learning purpose we are keeping it simple as possible 🔥&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;/* Putting font poppins it is a very beautiful font also if you dont have installed it on your system it might not show so you need to import it from *google fonts* */&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Now here we are just styling the background and centering it to the middle */&lt;/span&gt;

&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-03"&gt;
  &lt;/a&gt;
  Step 03
&lt;/h1&gt;

&lt;p&gt;Now the javascript time we all were waiting for. so in html create a script tag and put this code inside it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;

        &lt;span class="c1"&gt;// for starting the confetti &lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;confetti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1000 is time that after 1 second start the confetti ( 1000 = 1 sec)&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="c1"&gt;//  for stopping the confetti &lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;confetti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5000 is time that after 5 second stop the confetti ( 5000 = 5 sec)&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// after this here we are calling both the function so it works&lt;/span&gt;
        &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// if you dont want to make it stop and make it infinite you can just remove the stop function 😊&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So finally we are done Thankyou for giving your time and reading this blog. i hope after reading this blog you will be able to create it in minutes 😊💖&lt;/p&gt;

&lt;p&gt;Thankyou again and also subscribe to my channel for more videos / blog like this ✌🙏&lt;/p&gt;

&lt;p&gt;Subscribe - &lt;a href="https://youtube.com/c/CodingFire?sub_confirmation=1"&gt;https://youtube.com/c/CodingFire?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More tutorials - &lt;/p&gt;

&lt;p&gt;Background Remover Like Remove.bg - &lt;a href="https://www.youtube.com/watch?v=f_rpLBzunbQ&amp;amp;t=70s"&gt;https://www.youtube.com/watch?v=f_rpLBzunbQ&amp;amp;t=70s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brightness slider - &lt;a href="https://www.youtube.com/watch?v=bSQ-QD1Iqi0"&gt;https://www.youtube.com/watch?v=bSQ-QD1Iqi0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Theme changer - &lt;a href="https://www.youtube.com/watch?v=ZXTsYjxv7-g&amp;amp;t=3s"&gt;https://www.youtube.com/watch?v=ZXTsYjxv7-g&amp;amp;t=3s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desktop app using javascript - &lt;a href="https://www.youtube.com/watch?v=v0n0OMkUQac"&gt;https://www.youtube.com/watch?v=v0n0OMkUQac&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
