<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Quickly Master L1 vs L2 Regularization - ML Interview Q&amp;A</title>
      <author>Avi Arora</author>
      <pubDate>Thu, 11 Nov 2021 21:19:31 +0000</pubDate>
      <link>https://dev.to/aarora4/quickly-master-l1-vs-l2-regularization-ml-interview-qa-5cem</link>
      <guid>https://dev.to/aarora4/quickly-master-l1-vs-l2-regularization-ml-interview-qa-5cem</guid>
      <description>&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;While training your machine learning model, you often encounter a situation when your model fits the training data exceptionally well but fails to perform well on the testing data, i.e., does not predict the test data accurately. This is where regularization comes into action; Machine learning can handle such situations rightly with regularization. Regularization is a technique to reduce the error by fitting a function appropriately on the given training set and avoid overfitting.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Article Overview&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://analyticsarora.com/quickly-master-l1-vs-l2-regularization-ml-interview-qa/#What-is-L1-and-L2-Regularization"&gt;What is L1 and L2 Regularization?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://analyticsarora.com/quickly-master-l1-vs-l2-regularization-ml-interview-qa/#what-does-the-lambda-term-represent-in-L1-and-L2-Regularization"&gt;What does the lambda term represent in L1 and L2 Regularization?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://analyticsarora.com/quickly-master-l1-vs-l2-regularization-ml-interview-qa/#How-do-L1-and-L2-regularization-differ-in-improving-the-accuracy"&gt;How do L1 and L2 Regularization differ in improving the accuracy of machine learning models?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://analyticsarora.com/quickly-master-l1-vs-l2-regularization-ml-interview-qa/#Which-technique-is-commonly-preferred-to-boost-the-model%E2%80%99s-accuracy-rate-and-why?"&gt;Which technique is commonly preferred to boost accuracy rate and why?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>What is manylinux?</title>
      <author>DH Kim</author>
      <pubDate>Thu, 11 Nov 2021 21:09:40 +0000</pubDate>
      <link>https://dev.to/icncsx/what-is-manylinux-4ojd</link>
      <guid>https://dev.to/icncsx/what-is-manylinux-4ojd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-why-python-packaging-can-be-hard-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Why Python packaging can be hard&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;There may be a time in your development career where you need to author a package that extends Python w/ C or C++. In such a case your Python package needs to go through a compilation process, which converts C or C++ to binaries that work for a specific target system. This becomes really tedious when you think about how many flavors and versions of Linux there are.  Building a separate binary for Red Hat, SUSE, Ubuntu, etc... Ugh so tiring.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-why-python-packaging-can-be-easy-w-manylinux-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Why Python packaging can be easy w/ manylinux&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Fortunately, there is a solution. &lt;code&gt;manylinux&lt;/code&gt; was birthed to make it easy for your Python packages to be compatible with most Linux variants. &lt;code&gt;manylinux&lt;/code&gt; takes advantage of the fact that most distributions are mindful of backwards compatibility, and intentionally builds bdist wheels on an old version of a distribution. The idea is that if we build on an old supported version, the binaries produced are compatible with current versions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-so-what-is-a-manylinux-really-is-it-a-ham-sandwich-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;So what is a manylinux really? Is it a ham sandwich?&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;No. Even better. It's a Docker image. &lt;code&gt;manylinux&lt;/code&gt; is a &lt;code&gt;Docker&lt;/code&gt; image built off a certain old versions of the CentOS operating system that comes bundled with libraries that are assumed to be present by default on almost all Linux systems.&lt;/p&gt;

&lt;p&gt;You can find an example of manylinux distributions within the pandas project. Here are two (out of many) from the list of available pandas downloads from PyPI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pandas-1.0.3-cp37-cp37m-manylinux1_x86_64.whl
pandas-1.0.3-cp37-cp37m-manylinux1_i686.whl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, pandas has built manylinux wheels for CPython 3.7 supporting both x86-64 and i686 architectures. It's manylinux so this wheel should be compatible for many linux :)&lt;/p&gt;

&lt;p&gt;Happy packaging!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>todayilearned</category>
      <category>programming</category>
      <category>linux</category>
    </item>
    <item>
      <title>Do you have any questions about whistleblowing and worker’s rights in the tech industry? Ask to be featured on our podcast! 🎧  </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 11 Nov 2021 21:01:25 +0000</pubDate>
      <link>https://dev.to/devteam/do-you-have-any-questions-about-whistleblowing-and-workers-rights-in-the-tech-industry-ask-to-be-featured-on-our-podcast-420g</link>
      <guid>https://dev.to/devteam/do-you-have-any-questions-about-whistleblowing-and-workers-rights-in-the-tech-industry-ask-to-be-featured-on-our-podcast-420g</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners — and we like to feature the &lt;em&gt;actual&lt;/em&gt; voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#do-you-have-any-questions-about-whistleblowing-and-workers-rights-in-the-tech-industry"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Do you have any questions about whistleblowing and worker’s rights in the tech industry?&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message 📞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; 🎙&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) 🗣&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Wednesday, November 17th at 9 AM, ET (1 PM UTC, 6 AM PT)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement 😉
&lt;/h4&gt;

&lt;p&gt;Catch up on recent episodes of the show &lt;a href="https://dev.to/devdiscuss"&gt;here&lt;/a&gt; 👀  &lt;/p&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Python Packaging: sdist vs bdist</title>
      <author>DH Kim</author>
      <pubDate>Thu, 11 Nov 2021 20:54:55 +0000</pubDate>
      <link>https://dev.to/icncsx/python-packaging-sdist-vs-bdist-5ekb</link>
      <guid>https://dev.to/icncsx/python-packaging-sdist-vs-bdist-5ekb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-why-packages-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Why packages?&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Let's start with a fundamental question: why package at all? Reason is fairly simple. Once you have created a package, then you are likely to use some of the code in other places. For example, you might want to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mypkg.module&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-what-is-a-distribution-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;What is a distribution?&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;A Python distribution is a versioned compressed archive file that contains your Python package. The distribution file is what an end-user (the client) will download from the internet when they run &lt;code&gt;pip install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are two primary distribution types in use today: &lt;code&gt;Built Distributions&lt;/code&gt; and &lt;code&gt;Source Distributions&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-source-distribution-sdist-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Source Distribution (sdist)&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;A source distributions is the simpler of the two types of distributions. Intuitively speaking, an &lt;code&gt;sdist&lt;/code&gt; is very similar to source code - the code that you write. Therefore, &lt;code&gt;sdist&lt;/code&gt; will not include platform-specific binaries. The result is an archive (.tar.gz) that contains the source code of your package and instructions on how to build it, and the target system of your client will perform the actual build to create a bdist (wheel).&lt;/p&gt;

&lt;p&gt;Creating an sdist is akin to sharing just the source. It doesn't build usable artifacts that the client can consume immediately. The advantage of this is that creating an sdist is the same for all platforms (Windows, Linux, Mac) and machines (32 Bit / 64 Bit). The disadvantage is that users have to build the package themselves once they download the sdist.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-built-distribution-bdist-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Built Distribution (bdist)&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;A built distribution, also sometimes referred to as a &lt;code&gt;bdist&lt;/code&gt;, is more complex than an sdist in that it actually "builds" the package. Principally, &lt;code&gt;bdist&lt;/code&gt; creates a distribution containing &lt;code&gt;.so&lt;/code&gt;, &lt;code&gt;.dll&lt;/code&gt;, &lt;code&gt;.dylib&lt;/code&gt; for binary modules. The result is an archive that is specific to a platform (for example linux-x86_64) and to a version of Python (for example Python3.9). &lt;/p&gt;

&lt;p&gt;Installing a &lt;code&gt;bdist&lt;/code&gt; in the client is immediate, as they don't need to build anything (you as the package author have already built it for them, setuptools doesn't need to build it). The downside is that you as the package author have to build for multiple platforms and versions and upload all of the distributions for max compatibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-should-i-produce-sdist-or-bdist-for-clients-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Should I produce sdist or bdist for clients?&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;It is best practice to upload both, wheels and a source distribution, because any built distribution format only works for a subset of target systems. If there is not a platform-specific bidst that works for the end-user, they can go ahead and build locally w/ the &lt;code&gt;sdist&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>todayilearned</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>New CSS Features, Facebook’s Facial Recognition System in the Metaverse, &amp; more on DevNews!</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 11 Nov 2021 20:49:50 +0000</pubDate>
      <link>https://dev.to/devteam/new-css-features-facebooks-facial-recognition-system-in-the-metaverse-more-on-devnews-47hp</link>
      <guid>https://dev.to/devteam/new-css-features-facebooks-facial-recognition-system-in-the-metaverse-more-on-devnews-47hp</guid>
      <description>&lt;p&gt;New week, new episode of DevNews — the podcast where we read between the lines of today's most pressing software development-related stories&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s6-e3-new-css-features-a-new-search-engine-and-facebook-s-facial-recognition-system-in-the-metaverse"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E3 - New CSS Features, a New Search Engine, and Facebook’s Facial Recognition System in the Metaverse&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e3-new-css-features-a-new-search-engine-and-facebook-s-facial-recognition-system-in-the-metaverse" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e3-new-css-features-a-new-search-engine-and-facebook-s-facial-recognition-system-in-the-metaverse" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e3-new-css-features-a-new-search-engine-and-facebook-s-facial-recognition-system-in-the-metaverse" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e3-new-css-features-a-new-search-engine-and-facebook-s-facial-recognition-system-in-the-metaverse" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e3-new-css-features-a-new-search-engine-and-facebook-s-facial-recognition-system-in-the-metaverse"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s6-e3-new-css-features-a-new-search-engine-and-facebook-s-facial-recognition-system-in-the-metaverse"&gt;
      &lt;img id="episode-profile-image" alt="S6:E3 - New CSS Features, a New Search Engine, and Facebook’s Facial Recognition System in the Metaverse" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guest:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/5t3ph"&gt;@5t3ph&lt;/a&gt;
, software engineer at Microsoft and author of ModernCSS.dev,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this episode, we have an update about Facebook’s Facial Recognition system, and then we get into You.com, which calls itself “the world’s first open search engine.” Then we speak with Stephanie Eckles, software engineer at Microsoft and author of ModernCSS.dev about exciting new CSS updates that were just announced at Chrome Dev Summit 2021.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;— or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s6-e3-new-css-features-a-new-search-engine/id1525581923?i=1000541470161"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/0Gid8e24n6aAjwSLIB3Q20"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzQz?sa=X&amp;amp;ved=0CAQQkfYCahcKEwig0ou6l5H0AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s6-e3-new-css-features-a-new-search-engine-and-facebooks-facial-recognition-system-in-the-metaverse-88219260"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews/s6e3-new-css-features-a-new-T2oIp7L8_n3/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=167683796"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/229"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Our Season 6 sponsor: &lt;a href="https://www.hackatom.org/"&gt;Cosmos HackAtom&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy the show this week! 📰 &lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Preventable events:  statelessness in stateful components</title>
      <author>Michael Warren</author>
      <pubDate>Thu, 11 Nov 2021 20:39:01 +0000</pubDate>
      <link>https://dev.to/michaelwarren1106/preventable-events-statelessness-in-stateful-components-4cpg</link>
      <guid>https://dev.to/michaelwarren1106/preventable-events-statelessness-in-stateful-components-4cpg</guid>
      <description>&lt;p&gt;One of the biggest debates about authoring web components that I've had, both in my own mind and with coworkers is the debate over stateful vs stateless components. Is it better to have a component that manages a bit of its own state so that developers don't have to in their applications, or is it better that components manage no internal state and only use properties provided from the outside application to render.&lt;/p&gt;

&lt;p&gt;There are pros and cons to either side of the question.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-amp-cons-of-stateless-components"&gt;
  &lt;/a&gt;
  Pros &amp;amp; Cons of Stateless components
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Easier to build&lt;/strong&gt;&lt;br&gt;
With the exception of form elements, completely stateless components are super easy to build. Each property has a certain set of allowed values and the component only re-renders when a property is changed, and only uses the outside properties to change what is rendered. Every functionality is exposed via the external API so that the outside world can manipulate it.&lt;/p&gt;

&lt;p&gt;Native form inputs are a little harder to make stateless, because native HTML form inputs automatically have and track their &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;validity&lt;/code&gt; states. Making an input behave as if it were stateless when the native element isn't purely stateless is very tricky.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application state is the only state&lt;/strong&gt;&lt;br&gt;
Since stateless components don't hold any state, the application's state where components are used is the ONLY state. That way, there's never a chance of conflicting state where the component's internal state might be different than the application's state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flexible implementation for developers&lt;/strong&gt;&lt;br&gt;
Developers that use stateless components have full freedom to do what they need, when they need to, and they know that the component won't be trying to perform any logic or hold onto any internal state that might potentially conflict with the outside application state. Take the closing of a modal window for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- This modal is closed because its `open` boolean attribute isn't present, and it won't open until the `open` attribute is added --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;x-modal&amp;gt;&amp;lt;/x-modal&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- This modal is open because its "open" boolean attribute is present, but it won't close until the `open` attribute is removed programmatically --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;x-modal&lt;/span&gt; &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/x-modal&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With a completely stateless modal window, the developer gets to decide when the modal closes. If they need to do some extra functionality between the user deciding to close the modal and the modal actually closing, the freedom to do that is built in to the implementation strategy of the component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Developers MUST recreate component state in their application state&lt;/strong&gt;&lt;br&gt;
Imagine a stateless component with a lot of available properties, and imagine a flow where lots of those properties need to be manipulated. Stateless components means that the application's state needs to be created/bound to component properties to manipulate the component in the desired ways. It's essentially a mirror of state that the component &lt;em&gt;could&lt;/em&gt; have, or in some cases, already "does" have internally. It's also more lines of code in the application itself. It can be argued that components are created to encapsulate functionality and that internal state is part of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- someBooleanVariable is application state that basically mirrors `xModal.open` --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;x-modal&lt;/span&gt; &lt;span class="na"&gt;open=&lt;/span&gt;&lt;span class="s"&gt;"${someBooleanVariable}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/x-modal&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The more properties you need to manipulate in a given UI, the more closely to mirroring the component's state you'll actually be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- 'someObject' is basically a shallow clone of xComponent --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;x-component&lt;/span&gt;
   &lt;span class="na"&gt;active=&lt;/span&gt;&lt;span class="s"&gt;"${someObject.active}"&lt;/span&gt;
   &lt;span class="na"&gt;status=&lt;/span&gt;&lt;span class="s"&gt;"${someObject.status}"&lt;/span&gt;
   &lt;span class="na"&gt;variant=&lt;/span&gt;&lt;span class="s"&gt;"${someObject.variant}"&lt;/span&gt;
   &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"${someObject.label}"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&amp;lt;/x-component&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it gets worse if you are looping through repeated instances of the same component, like looping through rows in a table and managing each one's properties individually. In that case, your application state would be some array of objects, each one basically being a shallow copy of the component whose state you're managing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Potential loss of consistency in component behavior&lt;/strong&gt;&lt;br&gt;
If each individual developer is completely in control of what each stateless component does, then you stand to risk some loss of consistency in component behavior. If you're making a design system whose main responsibility is consistency in user experience, statelessness might be a hindrance, depending on the component.&lt;/p&gt;

&lt;p&gt;Take a stateless input for example, where it only displays an error state when the &lt;code&gt;error&lt;/code&gt; parameter has a value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;x-form-field&lt;/span&gt; &lt;span class="na"&gt;error=&lt;/span&gt;&lt;span class="s"&gt;"Some error message"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/x-form-field&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now envision that your organization has collectively made the rule that error messages should never be shown to users while they are typing but only after the form field has lost focus (yelling at users to fix an error they are currently trying to fix is bad form ). Our stateless form field above allows developers to show error messages at any time, even while typing. Preventing that behavior in order to preserve the desired user experience goes against the statelessness concept, because the component is doing something it wasn't told to do from the outside, ie - something like "when this form field is focused, never show error messages, regardless of what the &lt;code&gt;error&lt;/code&gt; property is set to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-we-have-both"&gt;
  &lt;/a&gt;
  Can we have both?
&lt;/h2&gt;

&lt;p&gt;Is it possible to have a component be mostly stateful to prevent application developers from needing to essentially clone our components in their application state and also to help keep consistent UX behaviors, but still selectively allow for them to prevent certain stateful behaviors when they need to?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preventable-events-pattern"&gt;
  &lt;/a&gt;
  Preventable events pattern
&lt;/h3&gt;

&lt;p&gt;Event listeners is one of the main ways that component developers can respond to actions that happen within the boundaries of a web component. When a user clicks something, selects an option, checks a checkbox, chances are, some event is emitted to the outside application that lets that application know what happened, etc.&lt;/p&gt;

&lt;p&gt;I'm sure that lots of folks reading this are probably already familiar with &lt;code&gt;event.preventDefault()&lt;/code&gt; as we've previously used it to do things like prevent the default click event on links or buttons so that we can execute some JS before changing pages, but we can actually harness this function to enable components to be both stateful and stateless when we need them to be.&lt;/p&gt;

&lt;p&gt;Since event listeners are all executed synchronously — that is, every event handler that is established on some DOM element is executed in a synchronous chain (outside in) before our JS code moves on — it is possible to check to see if a particular event was prevented and use that conditional to decide what to do next. In our case, we would check to see if the event was prevented and if so, NOT perform stateful property setting internally.&lt;/p&gt;

&lt;p&gt;Let's look at our modal window example from before but make it a stateful modal window this time. Meaning, that when the user clicks the X button to close the modal, the modal window will close itself without the dev having to manually set the &lt;code&gt;open&lt;/code&gt; property to &lt;code&gt;false&lt;/code&gt;;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// xModal.js&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;XModal&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;internalModalClose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// modal will close itself when the close button is clicked.&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
       ...other modal stuff

       &amp;lt;button class="close-modal" @click="internalModalClose()"&amp;gt;Close X&amp;lt;/button&amp;gt;
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This stateful-only approach saves one line of code in the outer application (for every modal instance), but if the developer needs to run some JS between the user clicking the close button and the modal actually closing, there's no way for that to happen.&lt;/p&gt;

&lt;p&gt;But if we change the internal close button click handler to adopt the preventable event pattern, we'll get what we need!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// xModal.js&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;XModal&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;internalModalClose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// prevent the native click event from bubbling so we can emit our custom event&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// create and dispatch our custom event&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;close-button-clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;closeEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    

    &lt;span class="c1"&gt;// this if block will only execute AFTER all event handlers for the closeEvent have been executed&lt;/span&gt;
    &lt;span class="c1"&gt;// so its safe to check here to see if the event has been defaultPrevented or not&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;closeEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultPrevented&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// perform our stateful activity ONLY if closeEvent hasn't been defaultPrevented.&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
       ...other modal stuff

       &amp;lt;button class="close-modal" @click="internalModalClose()"&amp;gt;Close X&amp;lt;/button&amp;gt;
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then when our mostly stateful component gets used&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- some-page.html--&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;x-modal&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;close-button-clicked=&lt;/span&gt;&lt;span class="s"&gt;"handleModalClose()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/x-modal&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// somePage.js&lt;/span&gt;

&lt;span class="nx"&gt;handleModalClose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// now the modal won't close itself automatically&lt;/span&gt;
  &lt;span class="nx"&gt;$event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;stuff&lt;/span&gt;

  &lt;span class="c1"&gt;// set the open prop to false to close the modal when ready&lt;/span&gt;
  &lt;span class="nx"&gt;xModal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this approach, it enables a component to be stateful, but also allow certain "escape hatches" for developers to take control in a stateless way.&lt;/p&gt;

&lt;p&gt;Even the conceptual idea of "preventing the default behavior" fits semantically. You the component developer are allowing your component consumers the ability to prevent the default stateful behavior in a predictable way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#library-function"&gt;
  &lt;/a&gt;
  Library function
&lt;/h3&gt;

&lt;p&gt;If you find yourself constantly dispatching custom events that you want to all be preventable, this approach is easily turned into a library or helper function to create and dispatch a preventable event and automatically check to see if that event is &lt;code&gt;defaultPrevented&lt;/code&gt; before executing a callback.&lt;/p&gt;

&lt;p&gt;Here's an example of a generic preventable event factory function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultEventOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;bubbles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;cancelable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;composed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatchElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;eventOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EventInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actualEventOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;defaultEventOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;eventOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;actualEventOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;dispatchElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultPrevented&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// if the event isn't prevented, run the callback function with the dispatchElement as `this` so class references in the callback will work&lt;/span&gt;
      &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatchElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and here's how that library function would get used in a component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// xModal.js&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;XModal&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;emitPreventable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eventEmitter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;internalModalClose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emitPreventable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;close-modal-clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// won't execute unless the event isn't defaultPrevented&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
       ...other modal stuff

       &amp;lt;button class="close-modal" @click="internalModalClose()"&amp;gt;Close X&amp;lt;/button&amp;gt;
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This approach isn't applicable everywhere. It will only help with event-based features, which mostly centers around user interaction, so I wouldn't advertise this approach as enabling a component to be fully stateful AND fully stateless at the same time. Its not even a 50/50 mix of the two. If you want to make stateful components and you use an event-based strategy, this approach will enable you to provide more flexibility, but not necessarily ultimate flexibility.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Ubuntu Nice to have's</title>
      <author>skino</author>
      <pubDate>Thu, 11 Nov 2021 20:38:06 +0000</pubDate>
      <link>https://dev.to/skino2020/ubuntu-nice-to-haves-22cn</link>
      <guid>https://dev.to/skino2020/ubuntu-nice-to-haves-22cn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I've posted before on setting up PHP development environments on various Linux, but I've never really gone over the "Nice to haves" i like when working with.&lt;/p&gt;

&lt;p&gt;So today were going to go through the steps i take to get my system working how i like it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-prerequisites"&gt;
  &lt;/a&gt;
  Some Prerequisites
&lt;/h3&gt;

&lt;p&gt;So as with every software installation on Linux we want to update our repositories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update
sudo apt-get upgrade

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with that done, lets get onto git, zsh &amp;amp; OhMyZsh﻿&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-zsh-ohmyzsh"&gt;
  &lt;/a&gt;
  Git, ZSH, OhMyZsh
&lt;/h3&gt;

&lt;p&gt;Git is installed as simply as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install git

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get the usual:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After this operation, 20.3 MB of additional disk space will be used.&lt;/p&gt;

&lt;p&gt;Do you want to continue? [Y/n] y&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just select &lt;code&gt;Y&lt;/code&gt; and the installation will complete.&lt;/p&gt;

&lt;p&gt;next we need to install ZSH which again is just another single command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install zsh

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that done onto OhMyZsh, This one has a few more commands but again, nothing crazy. To start with were going to make some changes to our terminal, We need to get some fonts so the theme we will install for OhMyZsh will work properly.&lt;/p&gt;

&lt;p&gt;Download and install these font:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf"&gt;MesloLGS NF Regular.ttf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf"&gt;MesloLGS NF Bold.ttf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf"&gt;MesloLGS NF Italic.ttf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf"&gt;MesloLGS NF Bold Italic.ttf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once installed you will need to tell the terminal to use the MesloNG, To do this simply click on the burger menu and click &lt;strong&gt;Preferences&lt;/strong&gt; like so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lnWbp7GB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/FjhBIyXs47GtDT8RSdEzdllNM0nJEz2dgamlVorI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lnWbp7GB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/FjhBIyXs47GtDT8RSdEzdllNM0nJEz2dgamlVorI.png" alt="" width="786" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the preferences is open click on the &lt;strong&gt;"Unnamed"&lt;/strong&gt; Option in the left panel, Click the &lt;strong&gt;Custom Fonts radio button&lt;/strong&gt; and then select &lt;strong&gt;MesloLGS NF&lt;/strong&gt; like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xs6GTb9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/sIdVQPnu0BGsEDhopb6v0hVrpIRAgzERjlmyAUQt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xs6GTb9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/sIdVQPnu0BGsEDhopb6v0hVrpIRAgzERjlmyAUQt.png" alt="" width="852" height="675"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now onto cloning &lt;strong&gt;OhMyZsh&lt;/strong&gt; and then installing Powerlevel10k to customize the look and feel of our Terminal. First Lets clone OhMyZsh.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you get a CURL is not installed error simply run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install curl

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you first install it will ask you if you want to set the default shell to zsh select Y and press enter. This will set the shell as Default and then add a .zshrc to your ~/ directory. if all goes well you should see the below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VBEqtVTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/C6vVymh4Bp0vLEhKjCaMsxlKBGcAy9kJfAWnLDzB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VBEqtVTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/C6vVymh4Bp0vLEhKjCaMsxlKBGcAy9kJfAWnLDzB.png" alt="" width="866" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice!, now some people like what they see here and don't mind the -&amp;gt; ~ prompt, but i like to tart it up a bit with Powerlevel10k. To install p10k simply run the following from your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will clone the theme to our machine and we just need to tell zsh/OhMyZsh to use the powerlevel10k theme. To do this, we need to edit the .zshrc file i mentioned earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo nano ~/.zshrc

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gAol4b_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/t5fQx02GLjsL4ubmQgzWw6S6ja67OJqUMI838LwG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gAol4b_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/t5fQx02GLjsL4ubmQgzWw6S6ja67OJqUMI838LwG.png" alt="" width="866" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to edit the ZSH_THEME bit and change it from:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ZSH_THEME="robbyrussell"&lt;/code&gt; to &lt;code&gt;ZSH_THEME="powerlevel10k/powerlevel10k"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once done hit the key combination &lt;strong&gt;Ctrl + X&lt;/strong&gt;, type &lt;strong&gt;Y&lt;/strong&gt; and then hit &lt;strong&gt;Enter this will save the file and bring you back to the same terminal prompt from earlier. We now need to refresh the config so we can start using powerlevel10k&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source ~/.zshrc

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you source the .zshrc you will immediately be directed to the p10k setup. there is many many different alterations you can choose but I'll show you mine. The first few questions are just ensuring the terminal is using the custom fonts etc. The following few questions for me are all &lt;strong&gt;Y&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Does this look like a diamond (rotated square)?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Does this look like a lock?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Does this look like a Debian logo (swirl/spiral)?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Do all these icons fit between the crosses?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we get to the actual configuring:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prompt Style - &lt;strong&gt;(3) Rainbow&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Character Set - &lt;strong&gt;(1) Unicode&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Show Current Time - &lt;strong&gt;(1) No&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Prompt Separators - &lt;strong&gt;(1) Angled&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Prompt Heads - &lt;strong&gt;(1) Sharp&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Prompt Tails - &lt;strong&gt;(1) Flat&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Prompt Height - &lt;strong&gt;(2) Two Lines&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Prompt Connection - &lt;strong&gt;(2) Dotted&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Prompt Frame - &lt;strong&gt;(2) Left&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Connection and Frame color - &lt;strong&gt;(4) Darkest&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Prompt Spacing - &lt;strong&gt;(2) Sparse&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Icons - &lt;strong&gt;(2) Many Icons&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Prompt Flow - &lt;strong&gt;(1) Concise&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Enable Transient Prompt - &lt;strong&gt;(n) No&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Instant Prompt Mode - &lt;strong&gt;(1) Verbose (Recommended)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Apply Changes to ~/.zshrc - (y) Yes &lt;strong&gt;(Recommended)&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;That is the final question and if you have done everything correct you should be faced with the following prompt:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FnpnO6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/5F95peBd0xz3bpWdSWYyvkFZ9A4hXlXBcOWJdOYq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FnpnO6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/5F95peBd0xz3bpWdSWYyvkFZ9A4hXlXBcOWJdOYq.png" alt="" width="866" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of these changes are subject to your preferences, i work a lot in the Terminal so i like it to get out of the way and look clean.&lt;/p&gt;

&lt;p&gt;We can leave the terminal as it is now..... or we can add two plugins to our install to make your life so much easier!&lt;/p&gt;

&lt;p&gt;First we need to CD into the OhMyZsh Plugin Directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/.oh-my-zsh/plugins/

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This path may differ depending on what Distro of Linux you are using, For this tutorial i have been using Ubuntu.&lt;/p&gt;

&lt;p&gt;On a side note... how cool does our terminal look when navigating through directories:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vW6N9dwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/szfiLCDx5VVNUU1kKD0RxdbSCCBKffD6UMBRM7yO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vW6N9dwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/szfiLCDx5VVNUU1kKD0RxdbSCCBKffD6UMBRM7yO.png" alt="" width="866" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyway, to our first plugin Auto Suggestions. This can be cloned into our plugins directory by typing the following command into our terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will pull the plugin down but not set it for use. we going to be installing two plugins so I'll go ahead and clone the second one before we edit the .zshrc&lt;/p&gt;

&lt;p&gt;The second plugin is Syntax Highlighting and its brilliant, sometimes when working in the terminal you type a command and you get the non helpful "failed - blah blah blah" messages.... well Syntax Highlighting will show up green if the syntax is correct and red if not... neat!&lt;/p&gt;

&lt;p&gt;In the plugins directory from terminal type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have both of our plugins downloaded lets set them in our .zshrc and source it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo nano ~/.zshrc
scroll down to the plugins bit:
# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;were going to edit this to include two more plugins as well as the git one. It is essential that &lt;code&gt;zsh-syntax-highlighting&lt;/code&gt; is the last plugin to load, if it isn't it wont function as intended. Edit the plugin section like mine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git 
    zsh-autosuggestions
    zsh-syntax-highlighting
)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have edited it like above, &lt;strong&gt;Ctrl + X&lt;/strong&gt;, &lt;strong&gt;Y&lt;/strong&gt; and &lt;strong&gt;Enter&lt;/strong&gt; to save and exit Nano. at the next prompt simply type:&lt;/p&gt;

&lt;p&gt;source ~/.zshrc&lt;/p&gt;

&lt;p&gt;Once that is done, as your typing the prompt will swap between red and green depending on if its correct or not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yv6HEy-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/av4OFH1FmfvodQTbAhdN6AUlmWCfOAWPNkchY7YV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yv6HEy-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/av4OFH1FmfvodQTbAhdN6AUlmWCfOAWPNkchY7YV.png" alt="" width="856" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also notice in the first prompt above its suggesting in white what i can type next, if i was to hit my right arrow key it would complete for me, this saves me a ton of time!&lt;/p&gt;

&lt;p&gt;Some people will say i have gone to too great lengths to over complicate this terminal bit, but as i spend a lot of time in my terminal.... its worth it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-chrome"&gt;
  &lt;/a&gt;
  Install Chrome
&lt;/h3&gt;

&lt;p&gt;Yes we have Firefox, or we can install Chromium from the Software store.... but the just don't quite do it for me... i like chrome because i can sync all my settings and plugins across systems (i use 3 in total for work and home).&lt;/p&gt;

&lt;p&gt;There is a few ways to install it but my preference is through the terminal, its quick and easy.&lt;/p&gt;

&lt;p&gt;so if its not open already open your Terminal and type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/Downloads

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will download the .deb to your downloads folder. once the download has completed, still in the Downloads directory type the following in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install ./google-chrome-stable_current_amd64.deb

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it Chrome is installed!&lt;/p&gt;

&lt;p&gt;Nice!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ides-programming"&gt;
  &lt;/a&gt;
  IDE's (Programming)
&lt;/h3&gt;

&lt;p&gt;Now out of the box you can go to the Software Center and Download VS Code or DBeaver for your code client and your MySQL client but I'm not a huge fan of them. They work and are great but as i dont need to pay for the software I'm about to install (im a student) i wont be going over them. if you want to you can simply go to the software center, search for them and click install.&lt;/p&gt;

&lt;p&gt;I prefer Jet Brains PHPstorm and Datagrip which i get free as a student.&lt;/p&gt;

&lt;p&gt;to install PHPstorm and DataGrip we do it through SNAP installations, dead easy and through the command line!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo snap install phpstorm --classic

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and for DataGrip&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo snap install datagrip --classic

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These take a few mins each to download and install but that's it, no config no dpkg etc it just does it all for you with snap!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hit-me-up-or-buy-me-a-coffee"&gt;
  &lt;/a&gt;
  Hit me up or Buy me a coffee
&lt;/h3&gt;

&lt;p&gt;if you found this post useful please consider following me on twitter &lt;a href="https://twitter.com/skino2020"&gt;@skino2020&lt;/a&gt; and if you found it really helpful consider buying me a coffee &lt;a href="https://www.buymeacoffee.com/skino2020"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>powerlevel10k</category>
      <category>zsh</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Which frameworks do I use for Arbington.com?</title>
      <author>Kalob Taulien</author>
      <pubDate>Thu, 11 Nov 2021 20:29:24 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/which-frameworks-do-i-use-for-arbingtoncom-4fb</link>
      <guid>https://dev.to/kalobtaulien/which-frameworks-do-i-use-for-arbingtoncom-4fb</guid>
      <description>&lt;p&gt;Welcome to post #3 in this series.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today we're talking about frameworks (and libraries) that I used to create &lt;a href="https://arbington.com"&gt;Arbington.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Remember, we keep things incredibly simple. Sometimes that means purposely introducing technical debt to our codebase in favor of speed. &lt;/p&gt;

&lt;p&gt;Frameworks are structures. They are typically large chunks of code, with specific rules, that layer on top of a programming language.&lt;/p&gt;

&lt;p&gt;Like Flask for Python. Flask is a Python-based Framework for creating websites. &lt;/p&gt;

&lt;p&gt;Libraries are similar, but smaller. They are often more flexible and can be dropped in to supplement your codebase. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#django-a-python-based-framework"&gt;
  &lt;/a&gt;
  Django, a Python based framework
&lt;/h2&gt;

&lt;p&gt;Django Web Framework is a huge open source Python based framework. It has everything from logins to database management. &lt;/p&gt;

&lt;p&gt;We use this very heavily. It's not ultra fast, but it's fast enough. And it comes with everything we need, and can be customized very heavily. Sites like Instagram started with Django before outgrowing it. &lt;/p&gt;

&lt;p&gt;It's not easy to learn, but once you learn Django it's quite magical. You can create an entire website in a matter of hours, not days. &lt;/p&gt;

&lt;p&gt;Every page you see on Arbington.com is served by Django. It's all standard server-side rendering.&lt;/p&gt;

&lt;p&gt;And in the future we can convert Django into a headless website using Django Rest Framework, so we have the option to make apps and modern websites using React.js later on. &lt;/p&gt;

&lt;p&gt;Basically, it's a future proof framework. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css"&gt;
  &lt;/a&gt;
  Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;I would classify Tailwind CSS as a library, not a framework. &lt;/p&gt;

&lt;p&gt;It's the future of CSS in my opinion. &lt;/p&gt;

&lt;p&gt;It uses CSS variables very heavily for ultra customization. And because everything is simply a CSS class you can create entire websites without writing a single line of CSS. Instead, just add classes to your HTML, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inline-block border bg-blue text-white font-bold"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;..&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The downside is the html class attribute gets really long, really quickly. But then you can merge all those together to create your own classes. &lt;/p&gt;

&lt;p&gt;And just like that, you're able to create entire CSS frameworks like Bootstrap using [almost] just Tailwind CSS &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jquery"&gt;
  &lt;/a&gt;
  jQuery
&lt;/h2&gt;

&lt;p&gt;I'm going to get a lot of haters for this. But we use jQuery instead of React.js or Vue.js. &lt;/p&gt;

&lt;p&gt;Why, though, Kalob? Why do you hate yourself, Kalob? &lt;/p&gt;

&lt;p&gt;Well, for one it's good enough for what we do, it's fast enough for what we need, powerful enough for what we want, and easy to replace in the future. &lt;/p&gt;

&lt;p&gt;But mostly, it's fast to code with. React.js and Vue.js are frameworks - they are big and take time to work with. Time is not a thing startups have plenty of. Startups need to move fast, and most of the time React.js and Vue.js are slow to code with. Plus we need that awesome SEO juice - so we render things to the DOM first and let JavaScript be an "addon" to our UI/UX. &lt;/p&gt;

&lt;p&gt;We mix jQuery with vanilla JavaScript quite a bit though. Honestly, we probably bastardize jQuery but hey, we'll end up replacing it down the road anyway once we have a more concrete application written and deployed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alpinejs"&gt;
  &lt;/a&gt;
  Alpine.js
&lt;/h2&gt;

&lt;p&gt;Along with Tailwind CSS, we use Alpine.js a little bit. Not much, and it could be replaced with jQuery. But because Alpine.js and Tailwind CSS play so nicely together, we use Alpine.js for some things like our mega menu. &lt;/p&gt;

&lt;p&gt;And the nice thing: we have written almost no actual JavaScript to make Alpine.js work - you just add variables to your HTML elements in the DOM, tell another element when the trigger, and away you go. It does all the heavy lifting for us. &lt;/p&gt;

&lt;p&gt;We might replace it with React or Vue one day, or go entirely Vanilla JavaScript with a little Alpine here and there. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#swiperjs"&gt;
  &lt;/a&gt;
  Swiper.js
&lt;/h2&gt;

&lt;p&gt;Need an amazing carousel solution written in vanilla JavaScript and is lightweight? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://swiperjs.com/"&gt;Swiper.js&lt;/a&gt; is the way to go! &lt;/p&gt;

&lt;p&gt;We use these pretty heavily to display courses. The options for customizing are simple but powerful, and it didn't take more than about 15 minutes to set up and deploy. &lt;/p&gt;

&lt;p&gt;I played with the settings for a couple hours just to have fun, but the final result was a simple carousel. &lt;/p&gt;

&lt;p&gt;There are a lot of carousel libraries out there, but this one is my favorite. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quilljs"&gt;
  &lt;/a&gt;
  Quill.js
&lt;/h2&gt;

&lt;p&gt;Need a super powerful but simple rich text editor for your users? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://quilljs.com/"&gt;Quill.js&lt;/a&gt; is the way to go. &lt;/p&gt;

&lt;p&gt;It does have some limitations we've run into, but nothing so serious we had to replace it. It's also lightweight, and easy to customize. &lt;/p&gt;

&lt;p&gt;We use Quill.js for questions and answers in video lessons, in the teacher dashboard for adding descriptions and projects, and even for some image uploading (which we handle internally and then use Python to send the image to AWS S3). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-packages"&gt;
  &lt;/a&gt;
  Python Packages
&lt;/h2&gt;

&lt;p&gt;We use a lot of Python packages, all of which would be considered "libraries" except for Django. &lt;/p&gt;

&lt;p&gt;We use a lot of image manipulation in the &lt;code&gt;PIL&lt;/code&gt; library, &lt;code&gt;boto3&lt;/code&gt; for interacting with Amazon Web Services, &lt;code&gt;bleach&lt;/code&gt; for cleaning HTML input to make user input safe to display and pull out all the stuff in standard HTML markup we don't need, &lt;code&gt;airtable-python-wrapper&lt;/code&gt; to make API requests to and from Airtable.com so our team can slice and manage data outside of the website, and &lt;code&gt;dropbox&lt;/code&gt; for importing hundreds of video files in a single HTTP request using the Dropbox API. &lt;/p&gt;

&lt;p&gt;Lots of API work. I'll make another post about API's in the future because that deserves it's own post. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-learn-all-the-things"&gt;
  &lt;/a&gt;
  Where to learn all the things?
&lt;/h2&gt;

&lt;p&gt;I have several courses on Arbington.com about lots of these topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://arbington.com/courses/restful-apis-and-how-to-understand-apis/"&gt;RESTful APIs and how to Understand APIs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://arbington.com/courses/django-101/"&gt;Django 101 for Beginners&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://arbington.com/courses/learn-python-for-beginners/"&gt;Python 101 for Beginners&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://arbington.com/courses/learn-reactjs-for-beginners/"&gt;React.js 101 for Beginners&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And plenty more including the more advanced versions of most courses. You can subscribe for $15/month to get access to &lt;a href="https://arbington.com/user/kalob/"&gt;all my courses&lt;/a&gt; - and it comes with a 14 day free trial. &lt;/p&gt;

&lt;p&gt;No harm in trying it out! &lt;/p&gt;

</description>
      <category>startup</category>
      <category>django</category>
      <category>javascript</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Adding pagination into Next.js blog</title>
      <author>Pavel Polívka</author>
      <pubDate>Thu, 11 Nov 2021 20:14:57 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/adding-pagination-into-nextjs-blog-431d</link>
      <guid>https://dev.to/pavel_polivka/adding-pagination-into-nextjs-blog-431d</guid>
      <description>&lt;p&gt;I recently redid my blog with Next.js. I used the amazing Next.js tutorial and I was very happy with it. But as time went on and I wrote more and more articles it became apparent that I need to add paging. I am not an expert on Next and it turns out that adding paging will not be that easy. I used static generation for my listing page and generating all the pages is not an option. I decided to switch to server-side rendering for SEO reasons but also I wanted to switch pages on the fly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-api"&gt;
  &lt;/a&gt;
  Adding API
&lt;/h2&gt;

&lt;p&gt;First thing I needed to add an API call that would provide paging info and list posts.&lt;br&gt;
I created a posts directory in a root api folder and in there I created a [page].js file. This file will be my api handler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api/posts/[page].js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getSortedPostsData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../lib/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allPostsData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getSortedPostsData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;perPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allPostsData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalPages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;totalPosts&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;perPage&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;perPage&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;perPage&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;totalPosts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;totalPosts&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;currentPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;perPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;perPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;totalCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;totalPosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;pageCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;totalPages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;allPostsData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is pretty straightforward code. It's doing some stats from an array of all posts.&lt;br&gt;
Side note here, if you are deploying to Vercel, your api calls are deployed as serverless functions and you need to tell Vercel to add your markdown files to the serverless deploy. This is done via root vercel.json file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"functions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"api/posts/[page].js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"includeFiles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"posts/**"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The root posts directory is the place where I have all the markdown files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modifying-blog-listing-page"&gt;
  &lt;/a&gt;
  Modifying blog listing page
&lt;/h2&gt;

&lt;p&gt;I used the blog listing page pretty much out of the next.js tutorial. I was using static page generation. So the first thing I have done was to change it to server-side rendering.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInitialProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//if page empty we request the first page&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;totalCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;totalCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;pageCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;currentPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;perPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;perPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It fetches our new api call and returns it as our component properties.&lt;br&gt;
The server variable is different for localhost and for prod. We need to specify the full path as this will be called from the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://ppolivka.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am using next/router to navigate between pages. And to make all the things more user-friendly I added a loading animation on route changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startLoading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stopLoading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;routeChangeStart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startLoading&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;routeChangeComplete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stopLoading&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;routeChangeStart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startLoading&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;routeChangeComplete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stopLoading&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To render the posts or the loading I have a if in this style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadWrapper&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Spinner&lt;/span&gt; &lt;span class="nx"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;visually-hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Spinner&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Generating posts list&lt;/span&gt;
    &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Img&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;215&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Card.Title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Subtitle&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mb-2 text-muted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;dateString&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Subtitle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Card.Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Card.Body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Card&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the actual pagination navigation I used awesome component react-paginate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactPaginate&lt;/span&gt;
    &lt;span class="nx"&gt;previousLabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;nextLabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;breakLabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;breakClassName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;break-me&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;activeClassName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;containerClassName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pagination&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;subContainerClassName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pages pagination&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;initialPage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPage&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;pageCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageCount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;marginPagesDisplayed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;pageRangeDisplayed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;onPageChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;paginationHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's referring the pagination handler function, that has the actual navigation logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paginationHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;currentQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;currentPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;currentQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the whole blog page in this &lt;a href="https://gist.github.com/PavlikPolivka/a3125f354757a498f769ed28a2840991"&gt;Gist&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;If you like this article you can follow me on &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>A Good Reason to NOT Copy and Paste Code</title>
      <author>glennfaison</author>
      <pubDate>Thu, 11 Nov 2021 20:04:54 +0000</pubDate>
      <link>https://dev.to/glennfaison/a-good-reason-why-you-should-not-copy-and-paste-code-1eoi</link>
      <guid>https://dev.to/glennfaison/a-good-reason-why-you-should-not-copy-and-paste-code-1eoi</guid>
      <description>&lt;p&gt;Many beginners are advised to “type code yourself instead of copy-pasting” because it enables one to internalize the process and the code more quickly. But as programmers gain more experience and attain the level where they need to get things done rather than ensure they learn, they get comfortable with &lt;code&gt;CTRL+C&lt;/code&gt;, &lt;code&gt;CTRL+V&lt;/code&gt; from Stack Overflow and other sources. As an experienced developer, I recently saw first-hand why I should never copy and paste any code I found online (or anywhere, for that matter)  &lt;/p&gt;

&lt;p&gt;Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;ENV_PROD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ENV_DEV&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PRODUCTION&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DEVELOPMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PRODUCTION&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isUserAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;environmentǃ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;ENV_PROD&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;
&lt;span class="nx"&gt;isUserAdmin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks benign, right? And we would expect this code to always return false, yes? Unfortunately, no.   Now open a browser console, copy this code, and paste in the console. You may be shocked that it returns true.   &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtci261Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txicm573a12s2iy8rnjl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtci261Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txicm573a12s2iy8rnjl.png" alt="Copying the above code into a browser console gives us an unexpected result!" width="876" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To cut the long story short, what looks like a &lt;em&gt;loose inequality&lt;/em&gt; check on line #4, is deceptively an assignment operation, which reads like (&lt;code&gt;environmentǃ = ENV_PROD&lt;/code&gt;)!   In JavaScript, assignment operations return the assigned value, which in this case is truthy (will be treated as true wherever a boolean value is expected) &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e_193y1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxvfmv7rh6k60sejxdjl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e_193y1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxvfmv7rh6k60sejxdjl.png" alt="Here we have an assignment, rather than an inequality check" width="372" height="118"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But isn’t &lt;code&gt;environmentǃ&lt;/code&gt; an invalid variable name in JavaScript, you ask? It’s complicated. You’d be right to say an exclamation sign cannot be part of a variable name. However, the &lt;code&gt;ǃ&lt;/code&gt; you see there is in fact not the everyday exclamation sign you know. It’s an obscure character that happens to be accepted as regular text by the JavaScript interpreter, and thus can be a valid part of a variable name&lt;/p&gt;

&lt;p&gt;  So while a programmer looks at line #4 and sees &lt;code&gt;environment != ENV_PROD&lt;/code&gt;, the JavaScript interpreter sees &lt;code&gt;environmentǃ = ENV_PROD  &lt;/code&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PUjkXw4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aanptmza1j9ngjx1hkjs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PUjkXw4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aanptmza1j9ngjx1hkjs.png" alt="Some insight into how this bug hides in plain sight" width="880" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There! I hope this is a compelling enough reason to not take copy-pasted code lightly. And I hope you see how typing code snippets yourself can save you from bugs that hide in plain sight!&lt;/p&gt;

</description>
      <category>programming</category>
    </item>
    <item>
      <title>pip stuff you might need to know</title>
      <author>DH Kim</author>
      <pubDate>Thu, 11 Nov 2021 19:51:36 +0000</pubDate>
      <link>https://dev.to/icncsx/pip-stuff-you-might-need-to-know-2jjb</link>
      <guid>https://dev.to/icncsx/pip-stuff-you-might-need-to-know-2jjb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-pip-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;PIP&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;pip is the standard package manager for Python. It allows you to install and manage additional packages that are not part of the Python standard library. The concept of a package manager might be familiar to you if you are coming from other languages. For example, JavaScript uses &lt;code&gt;npm&lt;/code&gt; for package management.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-pip3-vs-pip-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;pip3 vs pip&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;pip is also the CLI command that you will use to interact with pip, and there are many variants.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; pip install pandas
&amp;gt; pip2 install pandas
&amp;gt; pip3 install pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The thing to note here is that &lt;code&gt;pip3&lt;/code&gt; operates on a &lt;code&gt;Python3&lt;/code&gt; environment only, as &lt;code&gt;pip2&lt;/code&gt; does with &lt;code&gt;Python2&lt;/code&gt;. &lt;code&gt;pip&lt;/code&gt; (w/o the 2 or 3) operates contextually. For example, if you are in a &lt;code&gt;Python3&lt;/code&gt; virtual environment, &lt;code&gt;pip&lt;/code&gt; will operate on the &lt;code&gt;Python3&lt;/code&gt; environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-but-pip3-can-mean-many-things-like-if-i-have-python37-and-python38-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;But pip3 can mean many things - like if I have Python3.7 and Python3.8?&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Yes that's correct. Let's say I have two versions of Python installed, like Python 3.7 and 3.8. Now, if you were to type pip or pip3 in your terminal, it's not very clear which Python interpreter gets involved.&lt;/p&gt;

&lt;p&gt;And this is why you'll see many developers use &lt;code&gt;python -m pip&lt;/code&gt;. &lt;code&gt;python -m pip&lt;/code&gt; executes pip using the Python interpreter you specified as &lt;code&gt;python&lt;/code&gt;. Here you can provide the full path to the interpreter like: &lt;code&gt;/usr/bin/python3.7 -m pip&lt;/code&gt; instead of relying on an alias.&lt;/p&gt;

</description>
      <category>python</category>
      <category>todayilearned</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Program vs Process vs Thread</title>
      <author>DH Kim</author>
      <pubDate>Thu, 11 Nov 2021 18:59:25 +0000</pubDate>
      <link>https://dev.to/icncsx/program-vs-process-vs-thread-51bm</link>
      <guid>https://dev.to/icncsx/program-vs-process-vs-thread-51bm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-program-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Program&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;A program is simply an executable file that contains a set of instructions to complete a task. An application such as Chrome is one example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-process-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Process&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;A process is any currently running instance of a program. So one program can have several executions (copies) of it running at once. One Chrome program can have multiple tabs/windows open. A colleague compares the relationship between a program and process to the difference between a Docker image and a container; I hope that analogy makes sense :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-thread-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Thread&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;One process can have multiple running threads. Put simply, a thread does lightweight, singular jobs. Threads exist for added concurrency. A process can have many jobs: think saving a file, reading keyboard input, writing logs, etc. Each thread can be responsible for its own task or "subprocess" so to speak.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codenewbie</category>
      <category>computerscience</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
