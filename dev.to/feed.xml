<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5th Anniversary of the Excelize Open Source 🎉</title>
      <author>xuri</author>
      <pubDate>Tue, 31 Aug 2021 15:44:38 +0000</pubDate>
      <link>https://dev.to/xuri/5th-anniversary-of-the-excelize-open-source-21ki</link>
      <guid>https://dev.to/xuri/5th-anniversary-of-the-excelize-open-source-21ki</guid>
      <description>&lt;p&gt;Excelize (&lt;a href="https://github.com/xuri/excelize"&gt;github.com/xuri/excelize&lt;/a&gt;) since 2016 has become the popular choice to process spreadsheets documents among cloud-native and especially among Go language developers. Deep in essence and known for their professional support and well capabilities, Excelize is being widely used by large Internet companies, SME customers, and startup companies. Now, for the 5th anniversary of the Excelize open source, it has been released 16 versions, more than 100 contributors have participated in code contributing. I would like to thank all those who support the development and contributions of the project, and I'm very happy to be able to help anyone in need it. For me personally, creating and maintaining an open-source project requires not only the ability to write code, write documentation, and community management, the more important thing is how to keep the enthusiasm, happy, energetic, and efficient output state.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Excelize Star History&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XOlKQEJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xuri.me/wp-content/uploads/2021/08/excelize_5th_stargazers.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XOlKQEJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xuri.me/wp-content/uploads/2021/08/excelize_5th_stargazers.png" alt="Excelize Star History on 5th Anniversary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Excelize Contributors&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8I3SaEog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xuri.me/wp-content/uploads/2021/08/excelize_5th_contributors.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8I3SaEog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xuri.me/wp-content/uploads/2021/08/excelize_5th_contributors.png" alt="Excelize Contributors on 5th Anniversary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the future, I'll continue to work with developers in the community to optimize functions, capabilities, and performance, including to:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Make more API support concurrency safety&lt;/li&gt;
    &lt;li&gt;Keep to optimization performance for generating or reading data from a worksheet with huge amounts of data&lt;/li&gt;
    &lt;li&gt;More formula functions support in the calculation engine&lt;/li&gt;
    &lt;li&gt;Complex conditional format settings, data prediction support, etc.&lt;/li&gt;
    &lt;li&gt;Support more Chart style settings&lt;/li&gt;
    &lt;li&gt;PivotTable, PivotChart, Slicer&lt;/li&gt;
    &lt;li&gt;Number format parsing&lt;/li&gt;
    &lt;li&gt;Workbook encryption&lt;/li&gt;
    &lt;li&gt;More API will be support in the streaming reading and writing mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At last, welcome to contribute to Excelize.&lt;/p&gt;

</description>
      <category>go</category>
      <category>excel</category>
      <category>xlsx</category>
    </item>
    <item>
      <title>Serverless observability and real-time debugging with Dashbird [tutorial]</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Tue, 31 Aug 2021 15:29:41 +0000</pubDate>
      <link>https://dev.to/dashbird/serverless-observability-and-real-time-debugging-with-dashbird-tutorial-17ai</link>
      <guid>https://dev.to/dashbird/serverless-observability-and-real-time-debugging-with-dashbird-tutorial-17ai</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UANCmPyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AkSHKsdvX5XssvrFLfKDUQA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UANCmPyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AkSHKsdvX5XssvrFLfKDUQA.png" alt="serverless observability&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image by&lt;a href="https://dashbird.io/"&gt; Dashbird.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Systems run into problems all the time. To keep things running smoothly, we need to have an error &lt;strong&gt;monitoring and logging system&lt;/strong&gt; to help us discover and resolve whatever issue that may arise as soon as possible. The bigger the system the more challenging it becomes to &lt;strong&gt;monitor&lt;/strong&gt; it and &lt;strong&gt;pinpoint&lt;/strong&gt; the issue. And with serverless systems with 100s of services running concurrently, monitoring and troubleshooting are even more challenging tasks.&lt;/p&gt;

&lt;p&gt;In my last article, I introduced &lt;a href="https://dashbird.io/"&gt;&lt;strong&gt;Dashbird.io&lt;/strong&gt;&lt;/a&gt;, serverless monitoring and observability platform specifically designed to provide &lt;strong&gt;enhanced monitoring, actions, and architectural improvements&lt;/strong&gt; for your AWS-based serverless systems and how it &lt;strong&gt;fills the gaps&lt;/strong&gt; left by traditional monitoring services.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To learn more about Dashbird's features and how to set it up, check out &lt;a href="https://dashbird.io/blog/getting-started-with-dashbird/"&gt;my previous article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lambda-use-case-for-dashbird"&gt;
  &lt;/a&gt;
  Lambda Use Case for Dashbird
&lt;/h2&gt;

&lt;p&gt;Dashbird has a lot of cool features to offer and in this article, I'll be specifically showcasing how we can use those cool features to help debug serverless systems. For demonstration purposes, I have devised a lambda-based serverless use case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OqARZYvV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A4EQKc5a4JKbc_ylcec_isQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqARZYvV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A4EQKc5a4JKbc_ylcec_isQ.png" alt="lambda architecture use case&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lambda Use Case Architecture&lt;/p&gt;

&lt;p&gt;The architecture is simple enough, the client uploads images to a source S3(to learn more about S3 &lt;a href="https://medium.com/analytics-vidhya/amazon-s3-for-dummies-infinite-storage-on-the-cloud-cdc43da0c013"&gt;&lt;strong&gt;click here&lt;/strong&gt;&lt;/a&gt;) bucket. An S3 trigger is set up between our &lt;a href="https://medium.com/geekculture/aws-lambda-for-dummies-serverless-computing-on-the-cloud-a9fb3ca95427"&gt;Lambda function&lt;/a&gt; (to learn more about lambda service &lt;a href="https://medium.com/geekculture/aws-lambda-for-dummies-serverless-computing-on-the-cloud-a9fb3ca95427"&gt;&lt;strong&gt;click here&lt;/strong&gt;&lt;/a&gt;) which is invoked by S3 whenever a PUT request(an image is uploaded) is made on the source bucket. The lambda function extracts the metadata information of the image and saves the data in our destination DynamoDB table. Check out &lt;a href="https://medium.com/analytics-vidhya/serverless-image-processing-with-aws-lambda-and-s3-50e8966eeb0d"&gt;this article&lt;/a&gt; to learn more about S3 and AWS Lambda Triggers.&lt;/p&gt;

&lt;p&gt;We know AWS Lambda has its own set of challenges, a lot of times we run into various issues such as function time outs, out-of-memory issues, python exceptions, configuration errors, etc. Using the above architecture I'll be creating various scenarios to mock various challenges with AWS Lambda these include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Cold Starts and Latency Issues.&lt;/li&gt;
&lt;li&gt;  Function Timeouts.&lt;/li&gt;
&lt;li&gt;  Out of Memory Exceptions.&lt;/li&gt;
&lt;li&gt;  Function Configuration issues.&lt;/li&gt;
&lt;li&gt;  Lambda cost monitoring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These challenges can be very well addressed using &lt;strong&gt;Dashbird &lt;/strong&gt;which provides very precise information regarding each of the above-mentioned issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-dashbird-to-manage-lambda-challenges"&gt;
  &lt;/a&gt;
  Using Dashbird to Manage Lambda Challenges
&lt;/h2&gt;

&lt;p&gt;In this part of the article, I'll focus on how we can use Dashbird to efficiently manage some of the common challenges we face with AWS Lambda. If you haven't configured Dashbird with your AWS account yet check out my &lt;a href="https://aws.plainenglish.io/dashbird-a-best-in-class-solution-to-serverless-monitoring-2ef791636dcc"&gt;last article&lt;/a&gt; to learn how.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Once we have set up Dashbird with our AWS account, Dashbird analyzes different services we are using from our account. Once logged in to Dashbird, we land on the dashboard which gives us a birds-eye-view of our entire account activity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_twq-Ywx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AP5_PYe_uMPZQNJiYdEsuJA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_twq-Ywx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AP5_PYe_uMPZQNJiYdEsuJA.png" alt="serverless dashboard&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dashboard&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  From the dashboard, we can navigate to different modules of Dashbird to dig into different errors or warnings that may have occurred in our system. As we can see from above, I faced several errors while my system was running.&lt;/li&gt;
&lt;li&gt;  Clicking on an error takes us to the '&lt;strong&gt;Events&lt;/strong&gt;' module, which details the error we faced.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fnqWATdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2Aqd28csMN3--Z3xJJ-Puglg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fnqWATdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2Aqd28csMN3--Z3xJJ-Puglg.png" alt="serverless events&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dashbird's Event Module&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-dashbird-for-monitoring-lambda-cold-starts-and-latency-issues"&gt;
  &lt;/a&gt;
  Using Dashbird for monitoring Lambda Cold Starts and Latency Issues:
&lt;/h3&gt;

&lt;p&gt;Cold starts are a major contributor to &lt;strong&gt;degrading&lt;/strong&gt; lambda performance. Especially for real-time systems, the impacts of cold starts are not very desirable since with each added lambda cold start the &lt;strong&gt;latency&lt;/strong&gt; experienced increases. Dashbird helps us to very efficiently &lt;strong&gt;analyze&lt;/strong&gt; which of our lambda functions faced &lt;strong&gt;cold starts &lt;/strong&gt;and its impact on the &lt;strong&gt;function latency&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;From the &lt;strong&gt;Inventory&lt;/strong&gt; module, we can easily analyze which of our functions are facing cold starts and from the &lt;strong&gt;Alarms&lt;/strong&gt; module, we can set up alarms for timely alerting us whenever lambda cold starts exceed a certain threshold.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;--- Monitoring Cold Starts and Function Latency:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  From the navbar on the left click on "&lt;strong&gt;Inventory&lt;/strong&gt;" and then click on the &lt;strong&gt;lambda resource&lt;/strong&gt; you want to view. As we can see below, we get a lot of useful information regarding our Lambda function invocations like total invocations, how many errors occurred, how many invocations had cold starts, total duration of execution, percentage of memory consumed, and cost incurred.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YvYNWOXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AsJfg5Tz8kN4ijQN_d7D5CA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YvYNWOXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AsJfg5Tz8kN4ijQN_d7D5CA.png" alt="analyzing cold starts&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1- Analyzing Lambda Cold Starts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Clicking on the "&lt;strong&gt;ColdStarts&lt;/strong&gt;" tab further shows a graph of how many times our lambda function faced cold start and at what times it occurred.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLdNC00_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AGDGA4sl1EVKcDv6mgCKWOg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLdNC00_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AGDGA4sl1EVKcDv6mgCKWOg.png" alt="lambda cold starts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- Analyzing Lambda Cold Starts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  We can also individually analyze a specific lambda invocation. In the "&lt;strong&gt;Recent Invocations&lt;/strong&gt;" section at the bottom, click on the invocation you want to view which will further detail all the necessary information associated with that invocation.&lt;/li&gt;
&lt;li&gt;  As we can see below, our lambda invocation is appropriately flagged with a &lt;strong&gt;cold start label&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f-s4SLfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2Apa-hmNo-Tm8jObyLxiDS0A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f-s4SLfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2Apa-hmNo-Tm8jObyLxiDS0A.png" alt="aws lambda cold starts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3- Analyzing Lambda Cold Starts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Clicking on the "&lt;strong&gt;Duration&lt;/strong&gt;" tab displays the total time of execution of all lambda invocations and also a curve plot displaying the &lt;strong&gt;average, min, and max&lt;/strong&gt; execution times taken by our lambda invocations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SEMesFUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AJ-T7k10CbwgwwetMQR-baw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEMesFUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AJ-T7k10CbwgwwetMQR-baw.png" alt="function latency"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4- Analyzing Functions Latency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--suQIbDcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2ANW0Du8GzcLRQlxdQrLxn2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--suQIbDcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2ANW0Du8GzcLRQlxdQrLxn2w.png" alt="lambda execution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5- Average, Min, Max Execution Duration.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  From the "&lt;strong&gt;Recent Invocations&lt;/strong&gt;" section at the bottom, we can also see that the functions with cold starts have a greater execution duration than those without cold starts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;--- Setting up Alarms for Lambda Cold Starts and Latency Issues:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Other than monitoring lambda latency and cold starts, Dashbird also provides us with a great &lt;strong&gt;system alert offering&lt;/strong&gt; using which we can set up metric-based alarms to timely notify us whenever our lambda functions are facing cold starts more than a certain desirable threshold or whenever a function's execution time is exceeding a certain time limit. I will discuss setting up lambda alarms in the coming section on &lt;strong&gt;Dashbird Alarms&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-dashbird-to-deal-with-function-timeouts"&gt;
  &lt;/a&gt;
  Using Dashbird to deal with Function Timeouts:
&lt;/h3&gt;

&lt;p&gt;Lambda functions have a &lt;strong&gt;timeout configuration&lt;/strong&gt; which is the maximum amount of execution time can have after which the function automatically timeouts. The minimum can be &lt;strong&gt;1sec&lt;/strong&gt; and the maximum value for a timeout can be &lt;strong&gt;15mins&lt;/strong&gt;(as of now). Oftentimes, our computations may &lt;strong&gt;exceed&lt;/strong&gt; the timeout limit that we have set. For any such cases, we would want to monitor which functions are facing timeouts and act accordingly. With Dashbird, we can easily deal with Lambda timeouts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  To demonstrate this behavior, I set the timeout for my "&lt;strong&gt;dashbird-img-processing-function" &lt;/strong&gt;lambda to 20 sec, and within my function, I called python's sleep function with 30 sec sleep time. After redeploying I invoked my lambda function.&lt;/li&gt;
&lt;li&gt;  On the "&lt;strong&gt;Dashboard&lt;/strong&gt;", sufficient information was available to see from the total lambda invocations how many faced an error.&lt;/li&gt;
&lt;li&gt;  In the "&lt;strong&gt;Errors&lt;/strong&gt;" section on the bottom left, we can see that our "&lt;strong&gt;dashbird-img-processing-function" &lt;/strong&gt;function faced the "&lt;strong&gt;Task Timed Out Error&lt;/strong&gt;". We can also see the number of invocations(29) that faced the error and the severity(critical) of the error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1jEcjGsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AGSDiVYzhGZ_2EOnfyGPX-g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1jEcjGsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AGSDiVYzhGZ_2EOnfyGPX-g.png" alt="lambda timeout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1- Analyzing Lambda Timeouts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Clicking on the said error takes us to the "&lt;strong&gt;Events&lt;/strong&gt;" module. Here we can dig into more details. We can see when the first error occurred, when the last error occurred, the type of error(timeout), its severity, region in which the function is deployed. We also get the stack trace accompanying the error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yu3TrQR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2Az_08n1tqSkWI_EzJsztRnA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yu3TrQR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2Az_08n1tqSkWI_EzJsztRnA.png" alt="aws lambda timeout&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- Analyzing Lambda Timeouts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  From the "&lt;strong&gt;Occurrences&lt;/strong&gt;" section at the bottom, we can also see the details for each individual invocation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJnVFEFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AfuCv1LtoIuzUn21EQl7SRA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJnVFEFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AfuCv1LtoIuzUn21EQl7SRA.png" alt="lambda timeout&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3- Analyzing Lambda Timeouts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Not only this, but Dashbird automatically sends an &lt;strong&gt;email alert&lt;/strong&gt; to our registered email address (or Slack channel, webhooks or SNS) regarding the timeout error prompting us to take necessary actions to resolve the issue. Using the "&lt;strong&gt;Alarms&lt;/strong&gt;" module, we can also set custom Alarms for lambda errors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qQvkDa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2A0ym6iFjVRvG8qbfhP7XaTw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qQvkDa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2A0ym6iFjVRvG8qbfhP7XaTw.png" alt="serverless alerts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4- Analyzing Lambda Timeouts- Email Alerts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-dashbird-for-lambda-out-of-memory-exceptions"&gt;
  &lt;/a&gt;
  Using Dashbird for Lambda Out of Memory Exceptions:
&lt;/h3&gt;

&lt;p&gt;Just like Lambda has a timeout configuration parameter, there's also a &lt;strong&gt;memory parameter&lt;/strong&gt; that defines the &lt;strong&gt;maximum amount of memory&lt;/strong&gt; a Lambda function can use. The minimum we can set is 128MB and it can go up to a maximum of 10GB(as of now). When performing a memory-intensive task, it is very likely that the function's memory consumption goes beyond the memory limit we have set for our lambda function in which case, the function will throw an "&lt;strong&gt;Out of Memory Exception&lt;/strong&gt;", halting the function's execution. Dashbird has also got this covered and provides us with proper insights and alerts to handle all "Out of Memory" exceptions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  To demonstrate this use case, I set my lambda function's memory limit to 128MB and changed the function such that whenever it is invoked, it will load a large CSV file in memory forcing it to cause a "memory error".&lt;/li&gt;
&lt;li&gt;  After invoking my lambda function, I could see on the dashboard module in my dashbird's account that indeed a memory error has occurred.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5X-EEzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2A3GSnHaEF3Sbq66_6w_L7dQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5X-EEzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2A3GSnHaEF3Sbq66_6w_L7dQ.png" alt="lambda memory error&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1- Analyzing Lambda Memory Errors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  To dig more into the cause of the error, click on the MemoryError tab in the "&lt;strong&gt;Errors"&lt;/strong&gt; section on the bottom left. This takes us to the "&lt;strong&gt;Events" &lt;/strong&gt;module where we get a deeper insight regarding all our critical events.&lt;/li&gt;
&lt;li&gt;  In this view, we can see how many of our lambda invocations caused a memory error, we get a time plot of when each error occurred, we can view the stack trace of the error and each individual invocation can be viewed separately to get even more insights.&lt;/li&gt;
&lt;li&gt;  Dashbird automatically sent an email alert as well to the registered email address to inform about the "&lt;strong&gt;MemoryError&lt;/strong&gt;" that occurred.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VWHqrTi3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2A4PWd79jetBdSKFsVvS39Cg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VWHqrTi3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2A4PWd79jetBdSKFsVvS39Cg.png" alt="aws lambda memory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- Analyzing Lambda Memory Errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr-bsAi2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2ATJPacLCoc2Y2I3-tKBOhnw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr-bsAi2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2ATJPacLCoc2Y2I3-tKBOhnw.png" alt="lambda memory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3- Analyzing Lambda Memory Errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z9ditT9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2ACKLihK-BUvJ4ZrJktbCQ1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z9ditT9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2ACKLihK-BUvJ4ZrJktbCQ1g.png" alt="aws lambda memory error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4- Dashbird's email alert for Memory Errors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Just like we can set up alarms for other metrics, Dashbird's "&lt;strong&gt;Alarms&lt;/strong&gt;" module also has metrics for memory consumption which we can set as per our use case to alert us in case memory being used is above a certain threshold. More on Dashbird's alerts in the coming section.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#dashbird-for-monitoring-function-configuration-issues"&gt;
  &lt;/a&gt;
  Dashbird for Monitoring Function Configuration Issues
&lt;/h3&gt;

&lt;p&gt;Lambda configuration errors are related to failed function initialization usually due to some improper import. The function execution halts and the function is unable to initialize because of some issue with some module we're trying to import. Just like other Lambda-related errors Dashbird has also got this covered.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  To demonstrate Dashbird's ability to handle "Configuration Errors", I changed my Lambda function such that it tries to import a non-existent module causing a "&lt;strong&gt;Runtime Configuration Error"&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;  From the dashboard, we can see what error occurred and navigate to the "&lt;strong&gt;Events&lt;/strong&gt;" module to get deeper insights. We can see how many of our lambda invocations caused the error, a time plot of when each error occurred, the stack trace of the error and each individual invocation can be viewed separately to get even more insights.&lt;/li&gt;
&lt;li&gt;  And just like for all other errors, Dashbird automatically sent an email alert as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMoea6----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2A7Bh2hA1pygOLny-Uq0jXJw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMoea6----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2A7Bh2hA1pygOLny-Uq0jXJw.png" alt="lambda configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1- Analyzing Lambda Configuration Errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5fY5lI6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AyXFFN7y97XGbbQGEK5CIpw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5fY5lI6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AyXFFN7y97XGbbQGEK5CIpw.png" alt="aws lambda configuration error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- Analyzing Lambda Configuration Errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gdVaZQ87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AYY7GC-mnKWSwI96vPs9yxA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gdVaZQ87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AYY7GC-mnKWSwI96vPs9yxA.png" alt="lambda configuration error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3- Analyzing Lambda Configuration Errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ItmY-H7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AcWAdl2LU4mDyYwUCCnmIFA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ItmY-H7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AcWAdl2LU4mDyYwUCCnmIFA.png" alt="lambda configuration error alert"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4- Dashbird's email alert for Configuration Errors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lambda-cost-monitoring-with-dashbird"&gt;
  &lt;/a&gt;
  Lambda Cost Monitoring with Dashbird
&lt;/h3&gt;

&lt;p&gt;Dashbird not only helps us monitoring the errors with our serverless systems but also keeps us updated with the cost of operating our infrastructure.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Within our account on the &lt;strong&gt;Dashboard&lt;/strong&gt;, there's a dedicated section to the total cost incurred by our system over a duration of time. Similarly, in the &lt;strong&gt;Inventory &lt;/strong&gt;module, we can separately see for each of our resources the cost of operating that resource.&lt;/li&gt;
&lt;li&gt;  In the &lt;strong&gt;Alarms&lt;/strong&gt; module, we can also set up an alarm for a given resource to notify us when the cost is above a certain threshold.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note --- since I have AWS free tier so my total costs are $0 for now.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2J4FFbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AlShE3I_dzueSP3w8-tSVfg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2J4FFbK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AlShE3I_dzueSP3w8-tSVfg.png" alt="monitor lambda cost"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1- Monitoring Lambda Costs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fUoBjpqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2Ay4x_LwrUom5C21Rx6hJs3g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fUoBjpqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2Ay4x_LwrUom5C21Rx6hJs3g.png" alt="lambda cost"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- Monitoring Lambda Costs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dashbird-alarms"&gt;
  &lt;/a&gt;
  Dashbird Alarms
&lt;/h2&gt;

&lt;p&gt;"&lt;strong&gt;Alarms&lt;/strong&gt;" is a dedicated module by Dashbird to help us create custom alarms for our resources based on some metrics related to that resource. This significantly improves the MTTD/R. Creating an alarm is simple enough:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  From the navbar on the left click on "&lt;strong&gt;Alarms&lt;/strong&gt;", then click on "&lt;strong&gt;New Alarm&lt;/strong&gt;" and select "&lt;strong&gt;Lambda&lt;/strong&gt;" or any other resource you would like to create an alarm for.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QvXB6kaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2Am2iHBowIIHptLCvVNsqAGQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QvXB6kaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2Am2iHBowIIHptLCvVNsqAGQ.png" alt="lambda alarms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1- Setting up Alarms for Lambda&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  We can create two types of alarms, &lt;strong&gt;critical&lt;/strong&gt; or &lt;strong&gt;warning&lt;/strong&gt;. Next, we select the metric on which we want the alarm to trigger this could be errors/cold starts/retry/invocations count, throttled count, execution or billed duration, memory used, cost incurred, or concurrent lambda executions.&lt;/li&gt;
&lt;li&gt;  After selecting the metric we specify when the alarm triggers i.e. when the selected metric is &lt;strong&gt;above/below &lt;/strong&gt;a specific &lt;strong&gt;threshold&lt;/strong&gt;(5,10,20) on &lt;strong&gt;average/max/min/sum&lt;/strong&gt; for the &lt;strong&gt;duration of time&lt;/strong&gt; in minutes, hours or days. Finally, we select one or more target resources for which we want the alarm to be set.&lt;/li&gt;
&lt;li&gt;  For example, I created an alarm for my lambda function to be triggered when*&lt;strong&gt;the error count is above 10 on average over the last 15 minutes&lt;/strong&gt;*&lt;em&gt;.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7sRR5wQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AoEyKlEoKTG9r1BbfU8iEqA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7sRR5wQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AoEyKlEoKTG9r1BbfU8iEqA.png" alt="aws lambda alarms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dashbird Lambda Alarms.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  We can set up multiple alarms for our resources based on the metrics we want to monitor and with the help of Dashbird, increase the monitoring and troubleshooting capabilities of our systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advanced-troubleshooting-with-dashbirds-log-search-module"&gt;
  &lt;/a&gt;
  Advanced troubleshooting with Dashbird's Log Search Module
&lt;/h2&gt;

&lt;p&gt;A very cool feature in Dashbird that I would like to lastly discuss is its*&lt;em&gt; Log Search &lt;/em&gt;*module. This module allows us to do some advanced-level search on all our logs helping us to efficiently filter out the logs that are of value to us.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  We can search through all our resources or can select a few resources whose logs we want to filter out.&lt;/li&gt;
&lt;li&gt;  We can search for a specific keyword that we are interested in and all the matching results are accordingly filtered. For example, as can be seen below I filtered through all my resources to search for logs containing the keyword "&lt;strong&gt;MemoryError&lt;/strong&gt;" and all corresponding results were filtered out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yHZ-P3MX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AQ_sdD1KbgExGM_RRuCC00w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yHZ-P3MX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AQ_sdD1KbgExGM_RRuCC00w.png" alt="aws log search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dashbird Log Search Module.&lt;/p&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/building-complex-well-architected-serverless-architectures/"&gt;Building complex Well-Architected serverless applications&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/aws-cloudwatch-alerts-vs-dashbird-alerts/"&gt;AWS CloudWatch alerts vs Dashbird alerts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/serverless-security-critical-logs/"&gt;Securing serverless applications with critical logging&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>React Inbox and React Toast Components for Notifications That Don’t Suck</title>
      <author>Riley</author>
      <pubDate>Tue, 31 Aug 2021 15:28:30 +0000</pubDate>
      <link>https://dev.to/courier/introducing-courier-inbox-and-toast-for-notifications-that-don-t-suck-5hj0</link>
      <guid>https://dev.to/courier/introducing-courier-inbox-and-toast-for-notifications-that-don-t-suck-5hj0</guid>
      <description>&lt;p&gt;We are excited to announce the availability of Courier’s newest provider, &lt;a href="https://docs.courier.com/docs/courier-push"&gt;Courier Push&lt;/a&gt;! We have released Inbox and Toast, two open source React components that exemplify the potential future applications of this feature. With Toast, you can send your user a notification within your web application and Inbox allows you to create an embeddable notification repository so that your user can access all past in-app notifications.&lt;/p&gt;

&lt;p&gt;Most importantly, Courier Push allows us the flexibility and customization to do app-to-user communication right. As software users ourselves, we are bombarded with messages constantly, which can...really suck. Yet, notifications are necessary to communicate with users. With Courier Toast and Inbox, developers can support custom notifications for their users’ specificities and communicate through multiple wide-ranging channels while maintaining a single in-app notifications repository. We are particularly excited about all the potential future applications of Courier Push in addition to Toast and Inbox and are looking forward to expanding its uses. &lt;/p&gt;

&lt;p&gt;Here at Courier, we want to improve the integration experience for you, the developer, and the notification experience for your customers. We’ve done this with Courier Toast and Inbox.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#courier-toast-and-inbox"&gt;
  &lt;/a&gt;
  Courier Toast and Inbox
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-toast"&gt;
  &lt;/a&gt;
  What is Toast
&lt;/h3&gt;

&lt;p&gt;One of the major tenets of Courier’s product offerings is sending notifications. Receiving them and displaying them in your application is game changing. The ease of implementation makes your job as a developer simple and enables you to build real-time web applications that provide a better user experience for your customers. Your end-users can see customized notifications pop up in your web application through a modular system you can easily customize.&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.contentful.com/z7iqk1q8njt4/5c28uDPkC3iIBTT2aAlxI/ae9f06b62b5bc0d40e1d819e1f3dcab0/toast-demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="//images.contentful.com/z7iqk1q8njt4/5c28uDPkC3iIBTT2aAlxI/ae9f06b62b5bc0d40e1d819e1f3dcab0/toast-demo.gif" alt="toast-demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-inbox"&gt;
  &lt;/a&gt;
  What is Inbox
&lt;/h3&gt;

&lt;p&gt;Alongside Toast messages is a customizable inbox, which is essentially a notification history. This takes the pressure off users to respond immediately, lessening the anxiety around the experience in general. Inside Inbox, a user can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read their messages&lt;/li&gt;
&lt;li&gt;Mark messages as read or unread&lt;/li&gt;
&lt;li&gt;Delete messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="//images.contentful.com/z7iqk1q8njt4/2vyXBqDKYGfuIQj79yAXR9/0e0a255b6f21a02655ec64322cb0d338/inbox-demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="//images.contentful.com/z7iqk1q8njt4/2vyXBqDKYGfuIQj79yAXR9/0e0a255b6f21a02655ec64322cb0d338/inbox-demo.gif" alt="inbox-demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-integrate-toast-and-inbox-in-a-react-app"&gt;
  &lt;/a&gt;
  How to Integrate Toast and Inbox in a React App
&lt;/h3&gt;

&lt;p&gt;Let’s walk through how you can integrate Courier Toast and Inbox React Components in a React app. Check out the Courier React Components repository on &lt;a href="https://github.com/trycourier/courier-react"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Install CourierProvider &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@trycourier/react-provider 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;...to handle all of the authentication and integration with the backend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @trycourier/react-provider or npm i @trycourier/react-provider
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; At the top level in your React tree, add something that resembles the following code. The Client Key can be found &lt;a href="https://app.courier.com/integrations/courier"&gt;here&lt;/a&gt; and the User Id is the identifier for identifying your user. Note that it will be used later in the API call to courier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { CourierProvider } from "@trycourier/react-provider";
import { Toast } from "@trycourier/react-toast";

const MyApp = ({ children }) =&amp;gt; {
  return (
    &amp;lt;CourierProvider clientKey={CLIENT_KEY} userId={USER_ID}&amp;gt;
      &amp;lt;Toast /&amp;gt;
      {children}
    &amp;lt;/CourierProvider&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;N/B: You can add Toast to the frontend anywhere as long as it’s a child of the CourierProvider.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Inbox should be added in the application as a child of CourierProvider, but where you want the Bell icon to display. For this example, we will just put it right next to Toast. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add @trycourier/react-inbox&lt;/code&gt; or &lt;code&gt;npm i @trycourier/react-inbox&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { CourierProvider } from "@trycourier/react-provider";
import { Toast } from "@trycourier/react-toast";
import { Inbox } from "@trycourier/react-inbox";

const MyApp = ({ children }) =&amp;gt; {
  return (
    &amp;lt;CourierProvider clientKey={CLIENT_KEY} userId={USER_ID}&amp;gt;
      &amp;lt;Toast /&amp;gt;
      &amp;lt;Inbox /&amp;gt;
      {children}
    &amp;lt;/CourierProvider&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-customize-toast-and-inbox"&gt;
  &lt;/a&gt;
  How to Customize Toast and Inbox
&lt;/h3&gt;

&lt;p&gt;There are two ways to customize your Inbox and Toast.  First you can use the &lt;code&gt;studio&lt;/code&gt; to customize your application and the components will automatically update when the brand is published.&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.contentful.com/z7iqk1q8njt4/Dlr1PTAGFpA51ZmCs5XrA/19a259e26be54a6c8847e091348c43c7/studio-designer.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.contentful.com/z7iqk1q8njt4/Dlr1PTAGFpA51ZmCs5XrA/19a259e26be54a6c8847e091348c43c7/studio-designer.png" alt="studio-designer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second, you can pass properties right into each component.  Each component supports a theme and also supports &lt;a href="https://reactjs.org/docs/render-props.html"&gt;render properties&lt;/a&gt;. Here’s the code for props:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface InboxProps = {
  //Icon Class Name
  className?: string;

  // Default Icon to use if no Icon is present in Message
  defaultIcon?: false | string;

  // Placement of the Bell relative to the Inbox
  placement?: "top" | "left" | "right" | "bottom";

  // Render Props for Custom Rendering
  renderTabs?: React.FunctionComponent&amp;lt;{
    currentTab?: ITab;
    tabs?: ITab[];
  }&amp;gt;;
  renderFooter?: React.FunctionComponent;
  renderHeader?: React.FunctionComponent;
  renderIcon?: React.FunctionComponent&amp;lt;{
    unreadMessageCount?: number;
  }&amp;gt;;
  renderMessage?: React.FunctionComponent&amp;lt;IMessage&amp;gt;;
  renderNoMessages?: React.FunctionComponent;

  // Tab Overrides
  tabs?: Array&amp;lt;ITab&amp;gt;;
  theme?: ThemeObject;

  // Inbox Title Override
  title?: string;
  trigger?: "click" | "hover";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Courier Push opens the doors to perfecting app-to-human communication with its flexibility and potential for customization. Communication is a two-way street that requires not only good messaging, but also a channel and style that works uniquely for a specific type of user using a specific app. With Toast and Inbox, developers can create an effective notifications system that reaches end users when they want, how they want, and the way they want. To learn more, check out the &lt;a href="https://docs.courier.com/docs/courier-push"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We believe that providing contextual notifications from within your app is an opportunity to provide better, more intuitive, and more interesting user experiences. We also believe that if done right, these can take us a long way towards accomplishing our goal of making computer to human communication delightful. This is just the beginning of our investment in solving this problem, so please stay tuned for more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.courier.com/signup"&gt;Check out&lt;/a&gt; Inbox and Toast and let us know what you think! Your feedback helps us to continuously improve.&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>devops</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to read and write a pom in Jenkins ?</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 31 Aug 2021 15:20:03 +0000</pubDate>
      <link>https://dev.to/adaendra/how-to-read-and-write-a-pom-in-jenkins-3fj2</link>
      <guid>https://dev.to/adaendra/how-to-read-and-write-a-pom-in-jenkins-3fj2</guid>
      <description>&lt;p&gt;When I started to work with Jenkins with Java apps, I quickly have these questions&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;How to be able to read a pom?&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;How to update it?&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Am I able to update the pom version from Jenkins??&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So today, we will see how to do it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read"&gt;
  &lt;/a&gt;
  Read
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;pom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readMavenPom&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;file:&lt;/span&gt; &lt;span class="s1"&gt;'pom.xml'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;pom_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The reading part looks like all the other &lt;strong&gt;read&lt;/strong&gt; functions in Jenkins &lt;em&gt;(like readYaml, readJSON...)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Jenkins documentation : &lt;a href="https://www.jenkins.io/doc/pipeline/steps/pipeline-utility-steps/#readmavenpom-read-a-maven-project-file"&gt;https://www.jenkins.io/doc/pipeline/steps/pipeline-utility-steps/#readmavenpom-read-a-maven-project-file&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#write"&gt;
  &lt;/a&gt;
  Write
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;pom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readMavenPom&lt;/span&gt; &lt;span class="nl"&gt;file:&lt;/span&gt; &lt;span class="s1"&gt;'pom.xml'&lt;/span&gt;

&lt;span class="c1"&gt;//Do some manipulation&lt;/span&gt;
&lt;span class="n"&gt;pom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"x.x.x"&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; 

&lt;span class="n"&gt;writeMavenPom&lt;/span&gt; &lt;span class="nl"&gt;model:&lt;/span&gt; &lt;span class="n"&gt;pom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The write part is really simple and you just have to give back the &lt;strong&gt;pom&lt;/strong&gt; object you retrieve from reading;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Jenkins documentation : &lt;a href="https://www.jenkins.io/doc/pipeline/steps/pipeline-utility-steps/#writemavenpom-write-a-maven-project-file"&gt;https://www.jenkins.io/doc/pipeline/steps/pipeline-utility-steps/#writemavenpom-write-a-maven-project-file&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#bonus-update-pom-version"&gt;
  &lt;/a&gt;
  Bonus - Update pom version
&lt;/h2&gt;

&lt;p&gt;Once we know that, we can automatically change the version in the pom!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;pom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readMavenPom&lt;/span&gt; &lt;span class="nl"&gt;file:&lt;/span&gt; &lt;span class="s1"&gt;'pom.xml'&lt;/span&gt;

&lt;span class="n"&gt;pom_version_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\\.'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// You can choose any part of the version you want to update&lt;/span&gt;
&lt;span class="n"&gt;pom_version_array&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"${pom_version_array[1]}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toInteger&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;pom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pom_version_array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;writeMavenPom&lt;/span&gt; &lt;span class="nl"&gt;model:&lt;/span&gt; &lt;span class="n"&gt;pom&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;I hope it will help you!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>sre</category>
    </item>
    <item>
      <title>How to Find Quality Products at a Better Price From Sourcing Brokers</title>
      <author>AWs Architektur</author>
      <pubDate>Tue, 31 Aug 2021 14:32:54 +0000</pubDate>
      <link>https://dev.to/awsarchitektur/how-to-find-quality-products-at-a-better-price-from-sourcing-brokers-465p</link>
      <guid>https://dev.to/awsarchitektur/how-to-find-quality-products-at-a-better-price-from-sourcing-brokers-465p</guid>
      <description>&lt;p&gt;If you're in the business of starting and growing companies &lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Buying_agent"&gt;sourcing agent&lt;/a&gt;  out parts and components then you'll want to keep reading. In this article I'll cover a very important aspect of sourcing that goes on behind the scenes. After all, what's the point of sourcing the best materials if you don't get them shipped to you in good time for your manufacturing requirements? It goes something like this... Here's what happens:&lt;/p&gt;

&lt;p&gt;China, India, Mexico, Vietnam, Thailand, Korea, Philippines, and several other nations have become major exporters over the past five years &lt;a href="https://ed.ted.com/on/JSgCiaU9#digdeeper"&gt;https://ed.ted.com/on/JSgCiaU9#digdeeper&lt;/a&gt; . Many of these nations have been using their tremendous buying power to drive up the value of their currencies relative to the dollar of the United States, which has had a negative impact on American manufacturers who have attempted to ship goods into these markets. &lt;/p&gt;

&lt;h2&gt;Find Quality Products&lt;/h2&gt;

&lt;p&gt;This means that more foreign suppliers are shipping products in these countries which require special labeling or packaging requirements in order to ensure their acceptance by the different international clients that these countries have. Because of this worldwide trend, sourcing agents across the globe are becoming extremely important to the product sourcing process.&lt;/p&gt;

&lt;p&gt;A sourcing agent maintains a consistent and routine relationship with these international clients. They provide critical sourcing and quality inspection services, allowing the client to receive high quality products at the most competitive prices available. In this way, these agents help to protect the interests of the manufacturer as well as help to secure orders from international customers. In short, they help to make sure that the manufacturer of a given product doesn't encounter a problem getting the parts or materials it needs in the quantities necessary.&lt;/p&gt;

&lt;h2&gt;Find Chinese suppliers&lt;/h2&gt;

&lt;p&gt;In addition, a sourcing agent can also help a company find Chinese suppliers. In the past, companies had to do all of the sourcing research and sourcing themselves. For many companies, this was extremely time consuming and very difficult. But today, thanks to the Internet, companies can use a variety of tools to sift through the many China sourcing agents available, and in some cases find Chinese suppliers online.&lt;/p&gt;

&lt;p&gt;There is another aspect of sourcing agent that many companies don't think of. They may not know about the value of having a quality inspection done on any shipments that are sent from the United States into China. Quality inspections are becoming more important due to the increased pressures that China has placed on its domestic market. &lt;/p&gt;

&lt;h2&gt;Experiencing Sourcing Agents&lt;/h2&gt;

&lt;p&gt;Many companies are experiencing sourcing agent problems because they have chosen to do business with a company based in China that has little experience in the quality inspection field. The best solution for such a problem would be to find a company or supplier based in the United States that has experience in the quality inspection field and to partner with them on a one-time basis in the future.&lt;/p&gt;

&lt;p&gt;If a sourcing agent is unable to provide a high level of quality control, a company will not be able to ensure its clients that the goods they are sending to China are the highest possible quality. Without this inspection, it is possible for companies to send their raw materials to China, but if the raw materials are substandard, their products may not pass standard international quality controls. &lt;/p&gt;

&lt;p&gt;In the long run, partnering with an experienced sourcing agent who can provide a company with an excellent quality control inspection, as well as a detailed report on the status of each shipment, is essential to companies that are serious about doing business in China.&lt;/p&gt;

&lt;p&gt;Most sourcing agents that work in the United States are extremely experienced in sourcing products from China. Many of these agents are specialized in only one area, such as electronic components or sanitary supervision. It is not uncommon for sourcing agents to specialize in a particular niche, such as medical equipment or pesticides. This means that if a company needs to source medical devices or pesticides from China, it is possible to find specialized agents who know all of the necessary standards and regulations to meet the needs of these businesses.&lt;/p&gt;

&lt;p&gt;In conclusion, sourcing from China presents many opportunities for companies in the United States to serve their clients and provide them with quality products at a lower cost. However, sourcing brokering companies must work with an effective sourcing agent that can provide them with a detailed and accurate assessment of each shipment, along with a detailed report on each specific item of equipment. &lt;/p&gt;

&lt;h2&gt;Final Words&lt;/h2&gt;

&lt;p&gt;It is also important for a sourcing agent to work with its clients on an individual basis, as well as providing personalized services to ensure that all shipments are handled according to each clients' individual specifications. These agencies have the experience and expertise to help companies manage their operations effectively and ensure that the goods sent to China are exactly what their clients need.&lt;/p&gt;

</description>
      <category>sourcingagent</category>
      <category>agent</category>
      <category>sources</category>
      <category>business</category>
    </item>
    <item>
      <title>Taming the Moose: Method modifiers instead of overrides in object-oriented Perl</title>
      <author>Mark Gardner</author>
      <pubDate>Tue, 31 Aug 2021 14:00:00 +0000</pubDate>
      <link>https://dev.to/mjgardner/taming-the-moose-method-modifiers-instead-of-overrides-in-object-oriented-perl-4ag2</link>
      <guid>https://dev.to/mjgardner/taming-the-moose-method-modifiers-instead-of-overrides-in-object-oriented-perl-4ag2</guid>
      <description>&lt;p&gt;Last month &lt;a href="https://phoenixtrap.com/2021/07/13/taming-the-moose-picking-the-best-way-to-subclass-perl-methods/"&gt;I wrote about using Moose’s &lt;code&gt;override&lt;/code&gt; function&lt;/a&gt; to, well, override a superclass’s method. &lt;a href="https://chris.prather.org/"&gt;Chris Prather&lt;/a&gt; on the &lt;a href="https://kiwiirc.com/nextclient/#irc://irc.perl.org/moose"&gt;#moose IRC channel&lt;/a&gt; suggested soon after that the &lt;a href="https://metacpan.org/dist/Moose/view/lib/Moose/Manual/MethodModifiers.pod#Around-modifiers"&gt;&lt;code&gt;around&lt;/code&gt; method modifier&lt;/a&gt; (or its little sisters &lt;a href="https://metacpan.org/dist/Moose/view/lib/Moose/Manual/MethodModifiers.pod#Before-and-after-Modifiers"&gt;&lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt;&lt;/a&gt;) might be a better choice if you’re also calling the original method inside. He noted that “at a minimum &lt;code&gt;override&lt;/code&gt; only works if you’re subclassing, &lt;code&gt;around&lt;/code&gt; will apply to composed methods too.”&lt;/p&gt;

&lt;p&gt;His point was that when you decide to compose &lt;a href="https://metacpan.org/pod/Moose::Manual::Roles"&gt;roles&lt;/a&gt; (also know as &lt;a href="https://en.wikipedia.org/wiki/Trait_(computer_programming)"&gt;traits&lt;/a&gt;) instead of or in addition to more traditional inheritance, &lt;code&gt;override&lt;/code&gt; simply doesn’t work: only a method modifier will do. (And as &lt;a href="https://haarg.org/"&gt;Graham Knop&lt;/a&gt; and &lt;a href="https://github.com/karenetheridge"&gt;Karen Etheridge&lt;/a&gt; later remarked on IRC, &lt;code&gt;override&lt;/code&gt; isn’t even an option if you’re using &lt;a href="https://metacpan.org/pod/Moo"&gt;Moo&lt;/a&gt; as an alternative to Moose.)&lt;/p&gt;

&lt;p&gt;Modifying a role’s method with &lt;code&gt;around&lt;/code&gt; might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# for strict and say&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::Role::&lt;/span&gt;&lt;span class="nv"&gt;Hungry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Moose::&lt;/span&gt;&lt;span class="nv"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;wants_food&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is hungry!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;GuineaPig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Local::Role::Hungry&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;around&lt;/span&gt; &lt;span class="s"&gt;wants_food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$orig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;splice&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; runs to the front of the cage!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$orig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wheek!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Local::Role::Hungry&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;around&lt;/span&gt; &lt;span class="s"&gt;wants_food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$orig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;splice&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; runs to the kitchen!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$orig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Woof!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="s"&gt;wants_food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is jumping!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Seamus&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@pigs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;GuineaPig&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="sx"&gt;qw&amp;lt;Cocoa Ginger Pepper&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$animal&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@pigs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$animal&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;wants_food&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the above yields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Seamus runs to the kitchen!
Seamus is hungry!
Woof!
Cocoa runs to the front of the cage!
Cocoa is hungry!
Wheek!
Ginger runs to the front of the cage!
Ginger is hungry!
Wheek!
Pepper runs to the front of the cage!
Pepper is hungry!
Wheek!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s a little more involved than overriding a &lt;a href="https://perldoc.perl.org/functions/sub"&gt;&lt;code&gt;sub&lt;/code&gt;&lt;/a&gt;, since method modifiers are passed both the consumed role’s original method (&lt;code&gt;$orig&lt;/code&gt; above) and the instance (&lt;code&gt;$self&lt;/code&gt; above) as parameters. It has the same effect, though, and you can call the original method by saying &lt;code&gt;$self-&amp;gt;$orig(parameters)&lt;/code&gt;. That’s why I used the &lt;a href="https://perldoc.perl.org/functions/splice"&gt;&lt;code&gt;splice&lt;/code&gt; function&lt;/a&gt; so I could pass any remaining parameters as the original &lt;a href="https://perldoc.perl.org/variables/@_"&gt;&lt;code&gt;@_&lt;/code&gt; array&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If all you want to do is have something happen either before or after the original method, just use &lt;code&gt;before&lt;/code&gt; or &lt;code&gt;after&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="s"&gt;wants_food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is jumping!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that there’s no return value in a &lt;code&gt;before&lt;/code&gt; or &lt;code&gt;after&lt;/code&gt; modifier, as those are handled by the original method.&lt;/p&gt;

&lt;p&gt;Modifiers aren’t limited to consuming classes; they can be in roles and modify their consumers’ methods. They also have a couple of other tricks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can pass an &lt;a href="https://perldoc.perl.org/perlref#Square-Brackets"&gt;array reference&lt;/a&gt; to modify multiple methods at once.&lt;/li&gt;
&lt;li&gt;You can use the contents of a variable to specify the modified method name, and use that same variable in the modifier itself.&lt;/li&gt;
&lt;li&gt;You can use a &lt;a href="https://perldoc.perl.org/perlre"&gt;regular expression&lt;/a&gt; to select methods. (Beware if you’re using Moo that its &lt;a href="https://metacpan.org/pod/Class::Method::Modifiers"&gt;Class::Method::Modifiers&lt;/a&gt; module doesn’t support this.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Putting these together gives you constructs like these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;after&lt;/span&gt; &lt;span class="sx"&gt;qw&amp;lt;foo bar baz&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Something got called&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$method_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sx"&gt;qw&amp;lt;foo bar baz&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="nv"&gt;$method_name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Calling &lt;/span&gt;&lt;span class="si"&gt;$method_name&lt;/span&gt;&lt;span class="s2"&gt;...&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="sx"&gt;qr/^request_/&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid arguments&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moose comes with great introductory manuals for &lt;a href="https://metacpan.org/dist/Moose/view/lib/Moose/Manual/MethodModifiers.pod"&gt;method modifiers&lt;/a&gt;and &lt;a href="https://metacpan.org/dist/Moose/view/lib/Moose/Manual/Roles.pod"&gt;roles&lt;/a&gt;, so be sure to check those out. There’s a lot more to them and a blog can only cover so much.&lt;/p&gt;

</description>
      <category>perl</category>
      <category>oop</category>
      <category>moose</category>
      <category>traits</category>
    </item>
    <item>
      <title>Software shenanigans</title>
      <author>Agustín Tomas Larghi</author>
      <pubDate>Tue, 31 Aug 2021 13:49:31 +0000</pubDate>
      <link>https://dev.to/4gus71n/software-shenanigans-1n94</link>
      <guid>https://dev.to/4gus71n/software-shenanigans-1n94</guid>
      <description>&lt;p&gt;I've decided to start a new series of posts ("Software shenaningans") oriented to soft-skill improvements, communication, how to coordinate things with your team, the kind of things that - opposite to software technologies - won't get outdated.&lt;/p&gt;

&lt;p&gt;Since the pandemic started, I've noticed many companies have turned onto remote work, yet many people are not used to working remotely. So I thought about writing a quick post about a few things I've learned to improve productivity when working remotely.&lt;/p&gt;

&lt;p&gt;FYI, I've been working remotely most of my career, even before COVID, so most of the things I'm going to talk about here come from my remote work experience.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sX9ZJlM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6hfp5jcfexoezkuw9ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sX9ZJlM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6hfp5jcfexoezkuw9ka.png" alt="Communication Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've seen many &lt;em&gt;talented&lt;/em&gt; engineers fail because of communication issues, sometimes because they can't communicate their ideas properly, but more often than not it is because of their own insecurities. I've seen engineers get anxious over having to ping a manager, schedule a meeting, or do an &lt;code&gt;@here&lt;/code&gt; on the Slack general channel. I'd like to think that I'm very loud on Slack, I'm not afraid of hitting that &lt;code&gt;@here&lt;/code&gt; to get people in sync, and &lt;em&gt;no one ever has slapped my wrist by doing so&lt;/em&gt;. No one is ever going to yell at you because you are trying to express your ideas.&lt;/p&gt;

&lt;p&gt;If you are an over-thinker here’s a simple diagram to help you figure things out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpDJ_vH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lr0j93nveg8wwu8v20mj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpDJ_vH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lr0j93nveg8wwu8v20mj.png" alt="Overthinker Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go through some examples:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0YKOKqs3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x64bokoc7kn1xx5wfius.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0YKOKqs3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x64bokoc7kn1xx5wfius.png" alt="Slack Example 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is this okay?&lt;/strong&gt; 🙅‍♂️ No, don't ping the whole channel just to say hello. Is it okay - and I encourage - being cheerful and polite, but don't disrupt people unnecessarily. Thinks that as soon as you do an &lt;code&gt;@here&lt;/code&gt; you will have most people on that channel context switch from whatever they were doing onto Slack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DtiMlHwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1k58qfql86iyewxzjnt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DtiMlHwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1k58qfql86iyewxzjnt.png" alt="Slack Example 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is this okay?&lt;/strong&gt; 🙅‍♂️ No, if things are getting on 🔥 ping everyone, the faster you all address the issue, the better. Again, think that most people when they look at Slack they will see something like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8lvvOAxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hu0kc820uh509fbcj8lo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8lvvOAxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hu0kc820uh509fbcj8lo.png" alt="Slack Example 2 Channel Highlight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All channels highlighted all the time, unless you ping people directly, chances are they won't notice what you just write until the end of the day 😕.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SUrtEfqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76p8pqt5cavm7jp5jgss.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SUrtEfqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76p8pqt5cavm7jp5jgss.png" alt="Slack Example 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is this okay?&lt;/strong&gt; 👍 Yes, the same thing we were talking about before, if you need someone to take immediate action on something that is blocking you, ping that person directly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yet-more-slack-tips"&gt;
  &lt;/a&gt;
  Yet More Slack tips
&lt;/h3&gt;

&lt;p&gt;1️⃣ Keep 🧵 conversations&lt;/p&gt;

&lt;p&gt;If you don't keep the conversation flow tidy on Slack, things can get messy. For example, picture you jump on the &lt;code&gt;#engineering&lt;/code&gt; channel, and you see you are 30-something messages behind this convo 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EPw6Mm-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnp055bkv02pt1369qs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EPw6Mm-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnp055bkv02pt1369qs8.png" alt="More Slack Tips 30 Something Convo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not easy to catch up, right? For new people joining this conversation, it may be hard to get the context of what's going on when you don't know where the conversation &lt;em&gt;started&lt;/em&gt;. And it will very likely take you a considerable amount of time until you do catch up. Plus, things can get muddy if other people are talking about different things.&lt;/p&gt;

&lt;p&gt;Keeping &lt;strong&gt;threaded&lt;/strong&gt; conversations may mitigate this issue 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aLrM1juV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o9uhwzj8v7eyict99ey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aLrM1juV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o9uhwzj8v7eyict99ey.png" alt="Keep Threaded Convos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, you can later link this conversation to &lt;code&gt;Jira&lt;/code&gt;/&lt;code&gt;Azure&lt;/code&gt;/&lt;code&gt;Trello&lt;/code&gt; tickets - or whatever CMS your team uses - for future reference. Same for the PRs, you can link the Slack conversations so whoever reviews your PR can have a little bit of context about what the changes are for.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R8ByJGDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw6mj5auxblirahpi9em.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R8ByJGDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw6mj5auxblirahpi9em.png" alt="PR Tempalte"&gt;&lt;/a&gt;&lt;br&gt;
I'm a big fan of using PR templates, and linking the Slack convos to the PRs gives much more context to the person doing the review.&lt;/p&gt;

&lt;p&gt;2️⃣ Using the &lt;code&gt;/remind&lt;/code&gt; command&lt;/p&gt;

&lt;p&gt;Usually, on my day-to-day, I do almost all my work following the reminders of the day before. The &lt;code&gt;/remind&lt;/code&gt; me command is quite helpful to keep track of things.&lt;/p&gt;

&lt;p&gt;Let's say you were discussing something with someone and you need to follow up later 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0rlM0IP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae0rrrqherm9pdro9u8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0rlM0IP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae0rrrqherm9pdro9u8f.png" alt="RemindMe Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can target the &lt;code&gt;/remind&lt;/code&gt; command to different people or channels, not just to yourself. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dFQXSW2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1hmfzjhv2i6rvhd9pms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dFQXSW2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1hmfzjhv2i6rvhd9pms.png" alt="RemindMe Example 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For me this is &lt;em&gt;the&lt;/em&gt; most powerful tool on Slack.&lt;/p&gt;

&lt;p&gt;3️⃣ Grouping channels into &lt;em&gt;sections&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we were saying before, most of us, when we open Slack in the morning, the first thing we see is just a humongous list of highlighted channels. Some of them we don't even care - for example, a &lt;code&gt;#random&lt;/code&gt; channel just for fun, channels that are completely unrelated to the work we do, etc.&lt;br&gt;
So instead of having to waste time going through each channel, sort out the channels by &lt;em&gt;priority&lt;/em&gt; using sections.&lt;/p&gt;

&lt;p&gt;Something like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OE_xZ7zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e81njem3m1qdyzligs26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OE_xZ7zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e81njem3m1qdyzligs26.png" alt="Sections Before"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Becomes this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-wCIY-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gri3v7xkq3yp34q3mfn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-wCIY-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gri3v7xkq3yp34q3mfn9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That way you can check the truly important channels first, and if you have time, go through the rest later.&lt;/p&gt;

&lt;p&gt;4️⃣ Rule of thumb&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Avoid DMs as much as possible&lt;/strong&gt;. Try to post on public channels as often as possible, in my experience, teams who communicate through public channels perform better than the ones who rely mostly on DMs. Think that if you are discussing something with someone else via a private DM 🅰️ other people won't be able to catch up with what you are talking about, you may be talking about some technical adjustments in the back-end with just one single engineer, what if some other engineer had something to say about but he couldn't because he didn't know about this conversation? 🅱️ Also, you cannot link or reference private DMs, if someone new joins the DM he won't be able to see any previous conversation.&lt;/p&gt;

&lt;p&gt;Finally, speaking on public channels encourages people to speak up, be more transparent, and it removes that feeling that some people have of--"Oh, I better not talk about this &lt;em&gt;here&lt;/em&gt; so I don't open a can of worms!"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Always try to ping people directly&lt;/strong&gt;. It is unlikely that people will reply immediately to you if you don't ping them directly 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDNVQiH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1e85xdzs7txa0sr9a9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDNVQiH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1e85xdzs7txa0sr9a9a.png" alt="Ping Directly Example"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xICtHXGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkl2at0bbht73cps6t57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xICtHXGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkl2at0bbht73cps6t57.png" alt="Email Etiquette"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've seen so many people so quick to jump the 🔫 and hit the SEND button way too soon when sending emails. A bad email can cause more confusion than anything else, and if the &lt;em&gt;tone&lt;/em&gt; set in the email sounds &lt;em&gt;rude&lt;/em&gt; it can complicate things even further. So, I'll just drop some tips I've found useful:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read your emails aloud before you send them.&lt;/strong&gt; The &lt;em&gt;tone&lt;/em&gt; in an email is key. I remember once I had this lengthy email thread going on with a back-end engineer from a contractor company working with us. We would &lt;em&gt;only&lt;/em&gt; talk via email, so that made things even more difficult. And these guys were working in a completely opposite time zone than ours, so it was basically sending an email, and waiting for the response to come back the next day. I'm not going to lie, I was getting annoyed by the whole situation 😅.&lt;br&gt;
The whole thread was about us asking for some credentials to use an SDK in the front-end, and we were going back and forth with the back-end guys because they would provide the credentials but this wouldn't work as expected. So at some point, I replied something like this 👇&lt;/p&gt;

&lt;p&gt;&lt;em&gt;John, I know this is doable because I've seen it in the documentation here: &lt;a href="http://somelink-to-some-documentation.com"&gt;http://somelink-to-some-documentation.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Of course, one minute after hitting send, I'm pinged via Slack by one of my Engineer Managers - and rightly so - and he asks me to read my response aloud, and then I realize that I'd completely dropped the ball. The tone was &lt;em&gt;rude&lt;/em&gt;, and it didn't get us any further into solving the issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Double check names&lt;/strong&gt;. Many people, myself included, can get annoyed when other people misspell their names. Just take a minute to double-check that you have correctly written the name of the person you are addressing. Once, in one of my previous jobs, I was helping a new hire, a new Android engineer getting on board. We would talk over email because he didn't have his Slack credentials set yet. I usually go that extra mile when onboarding someone because I want them to have a pleasant experience. But this person would keep misspelling my name on every email. Augustin instead of &lt;em&gt;Agustin&lt;/em&gt;. So, I let the first email pass. Then in the second email, I bold my signature so he could see my name. The same thing again, so I finally add a PS on the third email -- "FYI my name spells Agustin 🙂". So, take that extra minute to double-check names. Don't skip accents on the letters. Otherwise, it looks as if you don't care about the email content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you are not a native speaker, use some tools to enhance your grammar.&lt;/strong&gt; A text with spelling mistakes won't be taken as seriously as one that's not. There are some great tools out there to avoid common grammar mistakes. Like &lt;a href="https://www.grammarly.com"&gt;Grammarly&lt;/a&gt; or &lt;a href="http://gingersoftware.com/"&gt;Ginger&lt;/a&gt;. Both are great tools to prevent those little details, that especially us who are not native English speakers, often do.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OSG5DvMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8ed5e1omri8ajfc5yxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSG5DvMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8ed5e1omri8ajfc5yxg.png" alt="Introduction Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good intro is a nice way to start a new job with the right foot. I always encourage people to present themselves when they are about to join a new team, just doing a quick intro on the Slack &lt;code&gt;#general&lt;/code&gt; 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WTDkbYmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/631emsyoz59kyt0j0aev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WTDkbYmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/631emsyoz59kyt0j0aev.png" alt="Slack Intro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would even recommend that you ask your manager if it would be okay to send an email to your whole &lt;em&gt;team&lt;/em&gt; presenting yourself more in detail 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K2P1b_fv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic8tovfhi7o66gcivkbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K2P1b_fv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic8tovfhi7o66gcivkbq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you know, try to be &lt;em&gt;personal&lt;/em&gt;, don't be like -- "Hi, I'm Agus and I like coding, and coding is also my hobby". I don't think anyone has so little going on in their lives. Also, sometimes using emojis helps to set the &lt;em&gt;emotional tone&lt;/em&gt; in a message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_c0e8At--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzdunsgt6bdghtnepa4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_c0e8At--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzdunsgt6bdghtnepa4j.png" alt="Meeting Etiquette"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1️⃣ &lt;strong&gt;Always have your camera turned on&lt;/strong&gt;. Seeing someone else's face on the screen helps people connect more, and it also helps you being taken more seriously by your teammates. I mean, if someone has their camera turned off, you don't know what they are doing, right? Are they paying attention to what you're saying? Are they watching Netflix? &lt;br&gt;
If you feel uncomfortable by having 50 people stare at you through your webcam during a meeting, &lt;strong&gt;just switch tabs&lt;/strong&gt;. I often do that if I have to talk at a meeting where I know there's going to be a lot of people, I just switch tabs so I don't have to see the amount of users or anything else, but I keep my cam turned on so everyone else can see me.&lt;br&gt;
It is okay if you don't want to turn on your webcam during a meeting because you're having lunch - although I don't recommend having lunch in front of your laptop, it's not healthy 🙂 - or because of something else. But do so once &lt;em&gt;you've become comfortable with your team&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;2️⃣ &lt;strong&gt;If you are in a noisy environment use audio filtering.&lt;/strong&gt;You can buy a headset with noise filtering included or use audio filtering software such as &lt;a href="https://krisp.ai"&gt;Krisp&lt;/a&gt;. Most people won't even tell you if you have noise in the background out of shyness or because they think it would be disrespectful. So, make sure no one has to try to figure out what you are saying behind the barking of your 🐕. &lt;/p&gt;

&lt;p&gt;3️⃣ &lt;strong&gt;If you need to say something, but feel uncomfortable interrupting people, use the chat section&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wLZGEmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhx0579dxrmbc8jvtnvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wLZGEmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhx0579dxrmbc8jvtnvc.png" alt="Zoom Chat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4️⃣ &lt;strong&gt;Watch out for the "radio silence" during conversations.&lt;/strong&gt; When you start working with a new team where each member knows little to nothing about each other, or if you start working with a team that isn't used to work remotely, you may run into those uncomfortable situations where someone asks a question, a minute goes by, and no one answers. Then, &lt;em&gt;what can we do to solve these situations?&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;For example, let's say we are on a Zoom call, and one of the front-end engineers asks a question like:-&lt;em&gt;" How is the UX supposed to look like when we navigate into this section, and there's no internet connectivity?"&lt;/em&gt; Let's say 10 seconds go by then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1️⃣ If you think you know to answer the question, answer it. It doesn't matter if you think it would be a dumb answer, it will prompt someone else to chime in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2️⃣ Redirect the question to someone who may know how to answer the question. For example, if a front-end engineer wants to know how to implement the UX for a specific edge-case scenario, redirect that question to one of the designers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3️⃣ If no one knows how to answer the question, they are taking too much time, or just going back and forth, then park the convo and propose to follow up on a Slack thread later.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Something else to keep in mind is that these situations may be a direct result of a lack of &lt;em&gt;ownership&lt;/em&gt; across team members. It takes time and effort to boost people into taking more ownership, this is something that the team achieves through regular 1:1 meetings and giving honest feedback to each other.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpKdm4xb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxt5otl6aiuc9yrslvt2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpKdm4xb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxt5otl6aiuc9yrslvt2.png" alt="TLDR Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reach out to people. Don't overthink about sending messages or scheduling a meeting with your teammates. That's what we are paid to do.&lt;/li&gt;
&lt;li&gt;Don't be an emotionless drone. Talk to people over Slack as if you were in a real office.&lt;/li&gt;
&lt;li&gt;Step up, have ownership of the product. Even if sometimes you think it is not your responsibility to lead some initiative or organize something, just do it. It will make everyone’s work - including yours - easier in the future.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Which is Best Partner for eCommerce Shipping in India
</title>
      <author>pavankumars178</author>
      <pubDate>Tue, 31 Aug 2021 13:38:15 +0000</pubDate>
      <link>https://dev.to/pavankumars178/which-is-best-partner-for-ecommerce-shipping-in-india-15j2</link>
      <guid>https://dev.to/pavankumars178/which-is-best-partner-for-ecommerce-shipping-in-india-15j2</guid>
      <description>&lt;p&gt;&lt;strong&gt;Overview of ecommerce shipping in India&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ecommerce businesses owe a big chunk of their growth to the efforts of the ecommerce shipping industry in India. Ecommerce shipping has become a vast industry that provides numerous specialised and niche shipping services which help ensure a smoother delivery experience. Faster and more efficient delivery is key to ensuring customers are happy and keep coming back. We’ll be walking you through the best of the best for &lt;a href="https://www.clickpost.ai/blog/ecommerce-shipping"&gt;ecommerce shipping in India&lt;/a&gt; and how to select the best partner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Choose the Best Partner for Ecommerce Shipping in India&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With over 150+ different shipping partners located all across India, choosing the best partner for ecommerce shipping needs is like finding a needle in a haystack. However, knowing your shipping needs can help ensure you pick the right ones. Take a good look at what your shipping strategy needs to be. You’ll find the following elements take priority when it comes to ecommerce shipping needs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Pin Code Serviceability&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The best partner in ecommerce shipping is one that serves the pin codes of your choice at the volume you require.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Tech capabilities&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;A good shipping partner is equipped with the latest tech to enable real-time tracking and automated shipping services. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Shipping Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Different shipping companies offer different services like express delivery, hyperlocal delivery and customised packaging which can improve delivery experience.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Cost&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The cost of shipping should ideally be inclusive of various shipping services so as to reduce losses and maintain profitability. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top 10 Best Partner for eCommerce Shipping in India&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that you’ve mapped out your core shipping strategy, you’ve got a clearer picture of what you need from a shipping partner. However, it’s also important to take a good look at the range of services that different shipping companies offer. To that end, we’ve compiled a brief list of the top 10 best partners for ecommerce shipping in India. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Aramex&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Founded in 1997 and acquired by Delhivery to operate in India, Aramex is a UAE-based global carrier that offers express delivery services and COD (cash-on-delivery) services.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Blue Dart&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since its launch in 1983, Blue Dart has become one of the leading global shipping partners. It has a reach of 35000+ pin codes and offers specialised shipping services like weather resistant packaging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Delhivery&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Delhivery began its journey in India in 2011 and provides numerous shipping services like express delivery, specialised order handling, and bulk order shipping. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. DHL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DHL has been operational since 1969 and is the best shipping partner if you want to offer environmentally-friendly shipping to customers and reduce the wastage of delivery.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Ecom Express&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Launched in 2012, Ecom Express caters specifically to ecommerce businesses with a reach of 27000+ pin codes and offers express shipping guaranteed to be completed in 72 hours. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. EKart&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In 2009, Ekart was started by FlipKart to handle shipping services for ecommerce businesses, providing next-day and same-day shipping to customers across 3800+ pin codes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. FedEx&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Since 1971, FedEx has been providing shipping services globally and has a reach of 19000+ pin codes. Heavyweight, fragile, and dangerous items can be shipped with FedEx. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Safe Express&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Safe Express has been providing safe and secured shipping services to ecommerce businesses in India since 1995. It offers security, surveillance and better tracking using GPRS tech. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. ShadowFax&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Shadowfax’s journey began in India in 2015 and provides express shipping, hyperlocal delivery and reverse shipping services across a reach of 7000+ pin codes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. XpressBees&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;XpressBees is another company that was established in 2015 and caters to ecommerce shipping exclusively. In addition to express delivery, this company aids with customs clearances across 13000+ pin codes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The best ecommerce business must have this best partner for ecommerce shipping in order to fulfill customer demands and maximise order fulfillment. From speedy shipping services to use of advanced technology to optimise order tracking and secure delivery, the efforts of the ecommerce shipping industry have taken online shopping to the next level. With the best partner for shipping, you can take your ecommerce business to the next level. &lt;/p&gt;

</description>
      <category>ecommerce</category>
      <category>shipping</category>
    </item>
    <item>
      <title>I just made my first $1 on the Internet!!! 😲💸</title>
      <author>Hugo Montenegro</author>
      <pubDate>Tue, 31 Aug 2021 13:34:33 +0000</pubDate>
      <link>https://dev.to/hm/i-just-made-my-first-1-on-the-internet-12bk</link>
      <guid>https://dev.to/hm/i-just-made-my-first-1-on-the-internet-12bk</guid>
      <description>&lt;p&gt;I couldn't be happier right now.&lt;/p&gt;

&lt;p&gt;I've been working on &lt;a href="http://www.namy.ai"&gt;www.namy.ai&lt;/a&gt; for a while, and yesterday I finally finished making &amp;amp; training an AI model that I was happy with, and deployed it to live. Then I made a &lt;em&gt;small&lt;/em&gt; announcement on Twitter (~300 followers) about it.&lt;/p&gt;

&lt;p&gt;Some people visited and entered prompts, loitered around, but I didn't see anyone actually buy a domain. "Oh well" I said, I still needed to improve my SEO anyways (barely have done anything on that front😅)&lt;/p&gt;

&lt;p&gt;BUT TODAY I log into my dashboard, and I see:&lt;br&gt;
balance: €0.99 EUR&lt;/p&gt;

&lt;p&gt;😲&lt;/p&gt;

&lt;p&gt;It finally happened!!!!!! My FIRST internet money that I earned on my own!!!!&lt;/p&gt;

&lt;p&gt;I know it's not a lot and that I have a long way to go (and just making twitter posts is not sustainable. I need to improve SEO.), but damn does it feel good!&lt;/p&gt;

&lt;p&gt;It's definitely validating that someone, somewhere paid money for something you built. Great feeling!&lt;/p&gt;

&lt;p&gt;Anyways I just wanted to share this little victory with the community here. Wish you all the best!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>saas</category>
      <category>ai</category>
      <category>showdev</category>
    </item>
    <item>
      <title>How I structure my React projects</title>
      <author>Lars Wächter</author>
      <pubDate>Tue, 31 Aug 2021 13:24:23 +0000</pubDate>
      <link>https://dev.to/larswaechter/how-i-structure-my-react-projects-jii</link>
      <guid>https://dev.to/larswaechter/how-i-structure-my-react-projects-jii</guid>
      <description>&lt;p&gt;This post was originally published on my &lt;a href="https://larswaechter.dev/blog/react-project-structure/"&gt;blog&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;It's been quite a while since I wrote an &lt;a href="https://larswaechter.dev/blog/nodejs-rest-api-structure/"&gt;article&lt;/a&gt; about how I structure my Node.js REST APIs. The article covered the approach of designing a well organized and maintainable folder structure for Node.js applications.&lt;/p&gt;

&lt;p&gt;So today I don't want to talk about Node.js APIs, but about the architecture of React applications and answer the same question from the previous article a second time:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What should the folder structure look like?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And again: there’s &lt;strong&gt;no perfect or 100% correct&lt;/strong&gt; answer to this question, but there are tons of other articles discussing this one on the internet too. This folder structure is also partly based on multiple of them.&lt;/p&gt;

&lt;p&gt;One important thing to mention is that React does not really tell you how to organize your project, except the fact that you should avoid too much nesting and overthinking. To be exact they say: (&lt;a href="https://reactjs.org/docs/faq-structure.html"&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at the linked source where you can read more about those common approaches. They won't be further discussed in this article.&lt;/p&gt;

&lt;p&gt;The following structure and architecture is one that has proven maintainable and reliable for me. It might give you a help for designing your own project. Keep in mind that the following architecture is based on a application bootstrapped with &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; and written in &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-root"&gt;
  &lt;/a&gt;
  Directory: root
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── node_modules
├── public
├── src
├── package.json
└── package-lock.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This structure is nothing special and shouldn’t be new to you. It’s actually a basic &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; setup. The interesting part here is the content of the &lt;code&gt;src&lt;/code&gt; folder which this article is about.&lt;/p&gt;

&lt;p&gt;So what do we have in here?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── api
├── components
├── i18n
├── modules
├── pages
├── stores
├── tests
├── utils
├── index.js
├── main.js
└── style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the application is primarily split into eight directories. From here on, we'll go top-down through the directories and examine each one.&lt;/p&gt;

&lt;p&gt;Let’s start with the &lt;code&gt;api&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcapi"&gt;
  &lt;/a&gt;
  Directory: src/api
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── api
│   ├── services
│   │   ├── Job.js
│   │   ├── User.js
│   ├── auth.js
│   └── axios.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;api&lt;/code&gt; directory contains all services that take care of the communication between the React application (frontend) and an API (backend). A single service provides multiple functions to retrieve data from or post data to an external service using the HTTP protocol.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auth.js&lt;/code&gt; provides functions for authentication and &lt;code&gt;axios.js&lt;/code&gt; contains an &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt; instance including interceptors for the outgoing HTTP requests and incoming responses. Moreover, the process of refreshing JWTs is handled in here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srccomponents"&gt;
  &lt;/a&gt;
  Directory: src/components
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── components
│   ├── Job
│   │   ├── Description.js
│   │   └── Preview.js
│   └── User
│   │   ├── Card.js
│   │   ├── Create.js
│   │   └── List.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're already familiar with React you should know that it's mainly component based. The components are actually the heart of every React application. The whole application, at least the presentational view, is built of many small components.&lt;/p&gt;

&lt;p&gt;So what is a component? &lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Imagine you have a website like Twitter or Facebook. The large website is made of many smaller pieces (components) that can be Buttons, Inputs or Widgets for example. Those pieces are put together to build ever more complex and larger ones. Each component has its own lifecyle and state management, whereby you can share a component's state with other ones.&lt;/p&gt;

&lt;p&gt;Components are reused multiple times within the application to save the developer from writing redundant code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://de.wikipedia.org/wiki/Don%E2%80%99t_repeat_yourself"&gt;Don't repeat yourself (DRY)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Splitting the codebase into multiple components is not just a "React thing". It's a common pattern in software engineering to simplify the development process and the maintenance later on.&lt;/p&gt;

&lt;p&gt;In React, a component is mostly a simple JavaScript function or a class. Usually, I create a new file for each single component. In some rare cases I group multiple of them (functions or classes) into a single file. Imagine a &lt;code&gt;UserList.js&lt;/code&gt; component which renders multiple elements of &lt;code&gt;UserListItem&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserListItem&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;))}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserListItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, it makes sense to combine both into one file. Further, &lt;code&gt;UserListItem&lt;/code&gt; is probably not even used by any other component than &lt;code&gt;UserList&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Beside the components themselves, you can also add their stylesheets or tests to this directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srci18n"&gt;
  &lt;/a&gt;
  Directory: src/i18n
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── i18n
│   ├── de.json
│   └── en.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;i18n&lt;/code&gt; stands for &lt;strong&gt;internationalization&lt;/strong&gt; and takes care of the language support of the application. The including JSON files are basically objects containg fixed constants as keys and their associated translations as values.&lt;/p&gt;

&lt;p&gt;Therefore, the keys should be equal for each language file. Only the values (translations) differ from each other. You can easily query those language files later on by writing your own custom hook or component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcmodules"&gt;
  &lt;/a&gt;
  Directory: src/modules
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── modules
│   ├── logger.js
│   └── session.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This directory includes some global modules that might be used for logging or as wrapper for the browser's &lt;code&gt;LocalStorage&lt;/code&gt; for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcpages"&gt;
  &lt;/a&gt;
  Directory: src/pages
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── pages
│   ├── Home
│   │   ├── components
│   │   │   ├── Dashboard.js
│   │   │   └── Welcome.js
│   │   └── index.js
│   ├── Login.js
│   └── Profile.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;pages&lt;/code&gt; directory includes the &lt;code&gt;react-router-dom&lt;/code&gt; paths accessed while navigating through the application. Here, we collect multiple components into a single larger one to display a complete page view.&lt;/p&gt;

&lt;p&gt;A page might contain its own &lt;code&gt;component&lt;/code&gt; directory which includes "local" components that are only used on this page. For complex pages with a deep component tree you might want to check out the &lt;a href="https://reactjs.org/docs/context.html"&gt;React Context API&lt;/a&gt; which makes it much easier to pass props along the tree and to handle a global "page state".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcstores"&gt;
  &lt;/a&gt;
  Directory: src/stores
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── stores
│   ├── language.js
│   └── user.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This directory includes all global React states that can be accessed from any component within the application. While &lt;a href="https://react-redux.js.org/"&gt;Redux&lt;/a&gt; is probably the most popular solution for managing global state I prefer to use &lt;a href="https://github.com/pmndrs/zustand"&gt;zustand&lt;/a&gt;. It's very easy to get started with and its API is really straightforward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srctests"&gt;
  &lt;/a&gt;
  Directory: src/tests
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── tests
│   ├── language.test.js
│   └── utils.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;tests&lt;/code&gt; directory includes tests that do not belong to certain components. This could be tests for the implementation of algorithms for example. Moreover, I validate and compare the keys of the language files I mentioned above to make sure I did not miss any translation for a given language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcutils"&gt;
  &lt;/a&gt;
  Directory: src/utils
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── utils
│   ├── hooks
│   │   ├── useChat.js
│   │   ├── useOutsideAlerter.js
│   │   ├── useToast.js
│   ├── providers
│   │   ├── HomeContextProvider.js
│   │   ├── ToastContextProvider.js
│   ├── colors.js
│   ├── constants.js
│   ├── index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have a bunch of utilities like: custom hooks, context providers, constants and helper functions. Feel free to add more stuff here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-together"&gt;
  &lt;/a&gt;
  All together
&lt;/h2&gt;

&lt;p&gt;Last but not least a complete overview of the project structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── api
│   ├── services
│   │   ├── Job.js
│   │   ├── User.js
│   ├── auth.js
│   └── axios.js
├── components
│   ├── Job
│   │   ├── Description.js
│   │   └── Preview.js
│   └── User
│   │   ├── Card.js
│   │   ├── Create.js
│   │   └── List.js
├── i18n
│   ├── de.json
│   └── en.json
├── modules
│   ├── logger.js
│   └── session.js
├── pages
│   ├── Home
│   │   ├── components
│   │   │   ├── Dashboard.js
│   │   │   └── Welcome.js
│   │   └── index.js
│   ├── Login.js
│   └── Profile.js
├── stores
│   ├── language.js
│   └── user.js
├── tests
│   ├── language.test.js
│   └── utils.test.js
├── utils
│   ├── hooks
│   │   ├── useChat.js
│   │   ├── useOutsideAlerter.js
│   │   ├── useToast.js
│   ├── providers
│   │   ├── HomeContextProvider.js
│   │   ├── ToastContextProvider.js
│   ├── colors.js
│   ├── constants.js
│   ├── index.js
├── index.js
├── main.js
└── style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it! I hope this is a little help for people who don't know how to structure their React application or didn’t know how to start. Feel free to give any suggestions.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Automating Flutter App Versioning Using Fastlane Plugin</title>
      <author>RUBICON</author>
      <pubDate>Tue, 31 Aug 2021 13:23:26 +0000</pubDate>
      <link>https://dev.to/rubicon_dev/automating-flutter-app-versioning-using-fastlane-plugin-1d6</link>
      <guid>https://dev.to/rubicon_dev/automating-flutter-app-versioning-using-fastlane-plugin-1d6</guid>
      <description>&lt;p&gt;If you’ve ever developed mobile applications and published them to their stores, then you are aware of the specific rules of versioning an app. Those rules revolve around two properties: App versioning and incrementing build number.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-our-facts-right"&gt;
  &lt;/a&gt;
  Getting our Facts Right
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#app-versioning"&gt;
  &lt;/a&gt;
  App Versioning
&lt;/h4&gt;

&lt;p&gt;Versioning is a critical component of an app upgrade and maintenance strategy.&lt;/p&gt;

&lt;p&gt;On iOS, the app version is presented by the CFBundleShortVersionString key that must correspond to &lt;a href="https://semver.org/"&gt;semantic versioning&lt;/a&gt;. This key is a machine-readable string composed of one to three period-separated integers, such as 10.14.1. The string can only contain numeric characters (0-9) and periods.&lt;br&gt;
Each integer provides information about the build version in the format [Major].[Minor].[Patch]:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Major: A major revision number.&lt;/li&gt;
&lt;li&gt;Minor: A minor revision number.&lt;/li&gt;
&lt;li&gt;Patch: A maintenance release number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleversion"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Android, the app version is presented by the versionName inside of the build.gradle file. Android doesn’t enforce any rules when it comes to specifying the name.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-number"&gt;
  &lt;/a&gt;
  Build number
&lt;/h4&gt;

&lt;p&gt;Build number (CFBundleVersion on iOS, versionCode on Android) is an identificator that is used only to determine whether one version of an app is more recent than the other, with the higher number indicating a more recent version. Both Google Play Store and Apple AppStore use the build number to protect against downgrades by preventing users from installing an app with a lower build number than the version currently installed on their device. On Android, that number is an integer, but on iOS, that number can be presented both as an integer or as a semantic version.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flutters-way-of-handling-stuff"&gt;
  &lt;/a&gt;
  Flutter's Way of Handling Stuff
&lt;/h3&gt;

&lt;p&gt;The Flutter team has decided to handle this very neatly; they have a property in pubspec.yaml called version that follows this pattern: {major}.{minor}.{patch}+{version}. Therefore, in order to publish our app with the app version of 1.2.4 and build number of 5, our pubspec.yaml would have a version property that looks like this: version: 1.2.4+5. The next time the application goes through the build process, those values are applied. However, the question is, how we can automate this whole process of versioning?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flutterversionmanager-plugin-for-fastlane-the-fun-part"&gt;
  &lt;/a&gt;
  flutter_version_manager plugin for Fastlane - The Fun Part!
&lt;/h4&gt;

&lt;p&gt;Fastlane is the easiest way to build and release mobile apps. It has been used widely by the mobile application developers community. It’s written in Ruby, is open source and it has great support for developing your own custom plugins. That being said, I present to you the flutter_version_manager plugin for Fastlane:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rubiconba/fastlane-plugin-flutter-version-manager"&gt;https://github.com/rubiconba/fastlane-plugin-flutter-version-manager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;This approach is very subjective as this is the method I use to handle versioning of an app.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This plugin heavily resides on having a git repository and at least one commit as build number is applied through timestamp of HEAD commit. By leveraging the power of git, we no longer have to worry about incrementing versionCode/CFBundleVersion. As for the app version, version.yml file that we had to create manually should be used as a single source of truth. Now, there are a couple of ways of handling an app version using this plugin:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Increment a version manually and call -apply on the fastlane plugin. -applycommand will automatically apply all the changes to pubspec.yaml&lt;/li&gt;
&lt;li&gt;Use -major, -minor, or -patch to bump semantic version. It automatically calls -apply and updates the pubspec.yaml.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That being said, a DevOps engineer has power over versioning. For example, he may create a patch pipe that runs on patch branch that will call deploy_as_patch lane which automatically bumps patch version and deploys the latest version. You can find an example of Fastfile &lt;a href="https://github.com/rubiconba/fastlane-plugin-flutter-version-manager/blob/master/fastlane/Fastfile"&gt;here&lt;/a&gt;. Full documentation is available in a &lt;a href="https://github.com/rubiconba/fastlane-plugin-flutter-version-manager"&gt;git repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This plugin is open-source and any contributions to it are more than welcome. Happy DevOpsing! ^^&lt;/p&gt;




&lt;p&gt;Original blog post: &lt;a href="https://www.rubicon-world.com/blog/2020/09/automating-flutter-app-versioning-using-fastlane-plugin/"&gt;Automating Flutter App Versioning Using Fastlane Plugin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mobile</category>
      <category>flutter</category>
      <category>devops</category>
      <category>fastlane</category>
    </item>
    <item>
      <title>ES6 - A beginners guide, following my own learning</title>
      <author>Stefan Wright</author>
      <pubDate>Tue, 31 Aug 2021 13:14:49 +0000</pubDate>
      <link>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-following-my-own-learning-4e05</link>
      <guid>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-following-my-own-learning-4e05</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome"&gt;
  &lt;/a&gt;
  Welcome
&lt;/h2&gt;

&lt;p&gt;For my employment we have been asked to learn/revisit ES6 as we begin to transfer the JS in our codebase into ES6, if you're here then its likely you already know what ES6 is, if you don't...let me summarise below. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-es6"&gt;
  &lt;/a&gt;
  What is ES6?
&lt;/h3&gt;

&lt;p&gt;Well, ES6 stands for ECMAScript 6 which has been around now since June 2015, it is also known as ECMAScript 2015. &lt;a href="https://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt; itself has been around since June 1997 with an annual review of the standards in place. ECMAScript was invented to standardize JavaScript meaning that browsers could be built around that standard ensuring support of the different levels. ES6 introduces us with some new tools which I will go into in more detail in this series, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Arrow Functions&lt;/li&gt;
&lt;li&gt;New Variable scoping (var, let, const)&lt;/li&gt;
&lt;li&gt;Template Literals&lt;/li&gt;
&lt;li&gt;Object and Array Destructuring&lt;/li&gt;
&lt;li&gt;Default Parameters&lt;/li&gt;
&lt;li&gt;Rest and Spread Operators&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many ES6 tutorials will also cover various Array "helpers". I'll be looking to touch on these too as they are frequently used, but I have found often referred back to as a reminder of how to write it "properly". So those are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;forEach&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;find&lt;/li&gt;
&lt;li&gt;every/some&lt;/li&gt;
&lt;li&gt;and reduce (save the hardest til last!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this series, for each of the above I will try to include a variety of examples and real-world use cases&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>es6</category>
      <category>es5</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
