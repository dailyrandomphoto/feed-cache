<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>7 React Projects You Should Build in 2021</title>
      <author>Reed Barger</author>
      <pubDate>Sat, 23 Jan 2021 15:03:04 +0000</pubDate>
      <link>https://dev.to/reedbarger/7-react-projects-you-should-build-in-2021-p20</link>
      <guid>https://dev.to/reedbarger/7-react-projects-you-should-build-in-2021-p20</guid>
      <description>&lt;p&gt;React is a JavaScript library that is ideal for creating impressive apps. There are countless projects that you can make with React, but here are seven that are on my list to build in 2021.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why have I selected these seven projects in particular?&lt;/em&gt; I picked them because they build off of one another. They require you to know similar, essential concepts like authentication, working with an API and database, using a React router for adding pages to your app, and playing media like audio or video. &lt;/p&gt;

&lt;p&gt;Plus, many applications can be (and often are) integrated into one another. Social media apps can include chat apps, music or video apps can include e-commerce apps, and so on.&lt;/p&gt;

&lt;p&gt;In other words, &lt;strong&gt;building any of these projects&lt;/strong&gt; will give you the skills and knowledge required to build the rest of the apps on the list, including your own personal projects.&lt;/p&gt;

&lt;p&gt;Along with each project, I have provided several real-world examples which you can use to find inspiration, plus some ideas about what tools I would possibly use to build each app.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to see how to build each of these apps for yourself, &lt;a href="http://bit.ly/react-projects"&gt;check out my course series&lt;/a&gt;, where you'll learn how to create an impressive React project at the end of every month.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-realtime-chat-app" class="anchor"&gt;
  &lt;/a&gt;
  1. Realtime Chat App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples&lt;/strong&gt;: Slack, Messenger, Discord, Crisp Chat&lt;/p&gt;

&lt;p&gt;Virtually all of use some kind of realtime chat app, whether it's a mobile application like WhatsApp or Viber or a productivity tool like Slack or Discord. It could also be part of a chat widget within a website where customers can directly talk with the site owners. &lt;/p&gt;

&lt;p&gt;All chat apps allow users to send messages to others in realtime, to react to messages, and they show when users are online or offline. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-realtime-chat-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build a realtime chat app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Build your project with create-react-app or Next.js. &lt;/li&gt;
&lt;li&gt;Use a service like Firebase or GraphQL subscriptions to create and get messages in realtime to users.&lt;/li&gt;
&lt;li&gt;Add reactions to message with emoji using the npm package emoji-mart&lt;/li&gt;
&lt;li&gt;Deploy to the web using Firebase Tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-social-media-app" class="anchor"&gt;
  &lt;/a&gt;
  2. Social Media App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples&lt;/strong&gt;: Facebook, Twitter, Instagram&lt;/p&gt;

&lt;p&gt;The app you're likely most familiar with is a social media application. In many ways it's similar to a chat app, but expanded to a larger community of users. &lt;/p&gt;

&lt;p&gt;These users can interact with each other in different ways: they can follow one another to receive their posts, add media like images and video to share with others, and enable users to interact with posts such as liking or commenting on them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-social-media-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build a social media app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Build your frontend with create-react-app, and backend using a Node API&lt;/li&gt;
&lt;li&gt;Use a database like Postgres or MongoDB, along with an ORM like Prisma (Postgres) or Mongoose (MongoDB)&lt;/li&gt;
&lt;li&gt;Use social authentication with Google, Facebook or Twitter, using Passport or a simpler service like Auth0&lt;/li&gt;
&lt;li&gt;Deploy the backend to Heroku, frontend to Netlify&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-ecommerce-app" class="anchor"&gt;
  &lt;/a&gt;
  3. E-Commerce App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples:&lt;/strong&gt; Shopify, Etsy, Dev.to Storefront&lt;/p&gt;

&lt;p&gt;Storefronts where we can buy digital or physical products online are everywhere. E-commerce apps add the ability for users to add and remove items from a shopping cart, view their cart, and checkout using a credit card, as well as other payment options like Google Pay and Apple Pay. &lt;/p&gt;

&lt;p&gt;If you're looking for inspiration, checkout out some simpler storefronts like a Shopify storefront, rather than looking at a massive retailer like Amazon or Walmart.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-an-ecommerce-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build an e-commerce app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create the app with create-react-app or Next.js&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;stripe&lt;/code&gt; NPM package, plus &lt;code&gt;use-shopping-cart&lt;/code&gt; to easily handle payments directly with Stripe Checkout&lt;/li&gt;
&lt;li&gt;Build a Node API to handle creating sessions with Stripe&lt;/li&gt;
&lt;li&gt;Deploy the backend to Heroku, frontend to Netlify (or deploy both on Heroku)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-video-sharing-app" class="anchor"&gt;
  &lt;/a&gt;
  4. Video Sharing App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples:&lt;/strong&gt; YouTube, TikTok, Snapchat&lt;/p&gt;

&lt;p&gt;A video sharing app is probably the most broad category, as video is used across so many different apps and in many different ways. &lt;/p&gt;

&lt;p&gt;You have video sharing apps like YouTube, which allow you to search any browser and look for any video that you could imagine that users have created. Also, tik tok and Snapchat give us the ability to watch videos from other users that are recorded in a much shorter, more accessible format, and are more oriented around interactions like likes and views.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-video-sharing-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build a video sharing app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create the app with create-react-app, and create the backend with Node/Express&lt;/li&gt;
&lt;li&gt;Use Cloudinary for image and video uploads to the Cloudinary API&lt;/li&gt;
&lt;li&gt;Use a database like Postgres or MongoDB, along with an ORM like Prisma (Postgres) or Mongoose (MongoDB)&lt;/li&gt;
&lt;li&gt;Deploy the backend to Heroku, frontend to Netlify (or deploy both on Heroku)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-blogging-portfolio-app" class="anchor"&gt;
  &lt;/a&gt;
  5. Blogging / Portfolio App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples:&lt;/strong&gt; Medium, Dev.to, HashNode&lt;/p&gt;

&lt;p&gt;This app example is perhaps the most practical. The most immediately practical choice for you to build a blogging or portfolio app is something that showcases your skills. It allows you to show off what you can do as a developer, while also allowing you to include posts and content that reflect what you know. &lt;/p&gt;

&lt;p&gt;Making these applications with tools like Gatsby or Nextjs (which are both React frameworks) is now easier than ever.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-blogging-or-portfolio-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build a blogging or portfolio app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create the app with Gatsby or Next.js&lt;/li&gt;
&lt;li&gt;Use markdown for blog posts with a special markdown transformer plugin such as &lt;code&gt;remark&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Deploy the site to Netlify or Vercel&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-forum-app" class="anchor"&gt;
  &lt;/a&gt;
  6. Forum App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples:&lt;/strong&gt; Reddit, StackOverflow, freeCodeCamp Forum&lt;/p&gt;

&lt;p&gt;A forum application is where we go when we want to get help, and as programmers we visit forums like Reddit and Stack Overflow to get our coding questions answered. &lt;/p&gt;

&lt;p&gt;Forums also combine many elements of chat and social media apps through posts, comments, and reactions. A forum is more of a more organized version of a social media app where users can more easily find answers to questions they're looking for. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-forum-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build a forum app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Build your frontend with create-react-app, and backend using a Node API&lt;/li&gt;
&lt;li&gt;Use a database like Postgres or MongoDB, along with an ORM like Prisma (Postgres) or Mongoose (MongoDB)&lt;/li&gt;
&lt;li&gt;Use social authentication with Google, Facebook or Twitter, using Passport or a simpler service like Auth0&lt;/li&gt;
&lt;li&gt;Deploy the backend to Heroku, frontend to Netlify&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-music-streaming-app" class="anchor"&gt;
  &lt;/a&gt;
  7. Music Streaming App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples:&lt;/strong&gt; Spotify, Soundcloud, Pandora&lt;/p&gt;

&lt;p&gt;Just as React applications are perfect for serving video content, they're also great for streaming media like music. &lt;/p&gt;

&lt;p&gt;Music apps have a similar structure to video sharing apps and may or may not allow users to upload their own music. They do allow users to listen to music, like songs, comment on them, and perhaps even purchase music. &lt;/p&gt;

&lt;p&gt;In this way, a streaming music app can combine elements of a video sharing app as well as an e-commerce app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-music-streaming-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build a music streaming app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create the app with create-react-app, and create the backend with Node/Express&lt;/li&gt;
&lt;li&gt;Use Cloudinary for image and video uploads to the Cloudinary API&lt;/li&gt;
&lt;li&gt;Use a database like Postgres or MongoDB, along with an ORM like Prisma (Postgres) or Mongoose (MongoDB)&lt;/li&gt;
&lt;li&gt;Deploy the backend to Heroku, frontend to Netlify (or deploy both on Heroku)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#want-to-build-realworld-apps-like-youtube-instagram-and-twitter-with-react-heres-how" class="anchor"&gt;
  &lt;/a&gt;
  Want to build real-world apps like YouTube, Instagram, and Twitter with React? Here's how.
&lt;/h2&gt;

&lt;p&gt;At the end of every month, I will be releasing an exclusive course, showing you exactly how to build a complete app clone with React from start to finish. &lt;/p&gt;

&lt;p&gt;Want to be notified when the next course drops? &lt;strong&gt;&lt;a href="http://bit.ly/react-projects"&gt;Join the waitlist here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My All-Star React Stack</title>
      <author>Harish</author>
      <pubDate>Sat, 23 Jan 2021 09:46:15 +0000</pubDate>
      <link>https://dev.to/rightfrombasics/my-all-star-react-stack-14lk</link>
      <guid>https://dev.to/rightfrombasics/my-all-star-react-stack-14lk</guid>
      <description>&lt;h4&gt;
  &lt;a href="#everything-i-use-when-i-set-up-a-new-react-app" class="anchor"&gt;
  &lt;/a&gt;
  Everything I use when I set up a new React app
&lt;/h4&gt;

&lt;p&gt;If you are a React developer like me, then you are essentially spoiled for choice when it comes to frameworks, libraries, tools, etc. With React, it is even trickier compared to full-fledged opinionated frameworks like Angular. React calls itself a JavaScript library for building user interfaces (UI).&lt;/p&gt;

&lt;p&gt;With a huge array of options, it is only natural to be confused about what technologies to use for your next React project. Today, I’ll share my favourite libraries and how they make my life so much easier!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kickstarting-a-project-the-base" class="anchor"&gt;
  &lt;/a&gt;
  Kickstarting a Project (The Base)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pHUbiefI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AlzcIeXv9do4T2aBt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pHUbiefI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AlzcIeXv9do4T2aBt.png" alt="Logo"&gt;&lt;/a&gt;Photo from &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To kickstart a project, my favourite option is &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Next.js offers out-of-the-box server-side rendering, file system-based routing, built-in CSS/SCSS support, and so much more. You can literally be up and running in a few seconds with Next.js without having to worry about tooling.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#alternatives" class="anchor"&gt;
  &lt;/a&gt;
  Alternatives
&lt;/h4&gt;

&lt;p&gt;The default way to bootstrap a React project will be to use the &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;Create React App&lt;/a&gt;. However, trust me: Next.js is just so awesome and more developer-friendly. It allows you to focus on the code instead of the setup.&lt;/p&gt;

&lt;p&gt;Another popular option is &lt;a href="https://www.gatsbyjs.org/"&gt;Gatsby&lt;/a&gt;, which is more SEO-centric. However, Gatsby is more focused on static site generation and I am not comfortable using it for a project that may quickly balloon into a large code base. I prefer Gatsby for projects such as a blog.&lt;/p&gt;

&lt;p&gt;My suggestion is to go with Next.js for projects that may become bigger or even enterprise-grade in the future. Choose Gatsby if you want a more SEO-optimised, public-facing site like a blog or a static informational site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-framework" class="anchor"&gt;
  &lt;/a&gt;
  CSS Framework
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PcJtfO58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2Amq5tJbSsk3mW2cg7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PcJtfO58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2Amq5tJbSsk3mW2cg7.png" alt="img"&gt;&lt;/a&gt;Photo from &lt;a href="https://bulma.io/"&gt;Bulma&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My favourite CSS framework is &lt;a href="https://bulma.io/"&gt;Bulma&lt;/a&gt;. It’s an open source framework based on Flexbox and has gained wide traction with over 200,000 developers using it.&lt;/p&gt;

&lt;p&gt;One of the key reasons I use Bulma is that it’s just simple and beautiful. It comes with several UI components that are really well-designed with a focus on mobile responsiveness.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#alternatives" class="anchor"&gt;
  &lt;/a&gt;
  Alternatives
&lt;/h4&gt;

&lt;p&gt;Speaking of CSS frameworks, we cannot overlook the ever-popular &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;. It’s definitely an amazing framework, but truth be told, it has gotten a little boring. With many sites using Bootstrap, the styles and components seem monotonous. Nevertheless, Bootstrap is an awesome choice for those who are already familiar with it and it has a very trusted community of developers to rely on for support too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; is currently the talk of the town. Tailwind allows you to style everything without leaving your HTML code. There is a CSS class for everything — colors, sizes, fonts, shadows, etc. I am personally not a fan of too many CSS classes in my code. I like segregating and modularising my code based on component-level CSS. That being said, Tailwind CSS could be a great solution for developers who love the freedom offered by the framework.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling" class="anchor"&gt;
  &lt;/a&gt;
  Styling
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ItJuPB1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AhJjt4LiHa7B9VAQvzDnqGA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ItJuPB1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AhJjt4LiHa7B9VAQvzDnqGA.png" alt="Sass and CSS Modules logos"&gt;&lt;/a&gt;Photo by the author.&lt;/p&gt;

&lt;p&gt;My go-to option for styling is using &lt;a href="https://sass-lang.com/"&gt;Sass&lt;/a&gt; with &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules&lt;/a&gt;. This is supported by default in Next.js, where we separate CSS/Sass files from our code and simply import it into the React file where it is required.&lt;/p&gt;

&lt;p&gt;Sass is much more efficient than using pure CSS, as it helps developers to refactor their code and prevent repetitive styling. Developers can quickly extract, refactor, and reuse their code across the project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#alternatives" class="anchor"&gt;
  &lt;/a&gt;
  Alternatives
&lt;/h4&gt;

&lt;p&gt;One popular option is &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt;, which allows you to write CSS in JS. While this is easy to write, I hate the idea of combining styling inside my JS code. I prefer a separation of concerns and isolating styling from my JS code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navigation" class="anchor"&gt;
  &lt;/a&gt;
  Navigation
&lt;/h3&gt;

&lt;p&gt;If you use Next.js like me, then navigation is absolutely not a concern. With file system-based routing, the hierarchy of your directories becomes the actual file path and routes too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eb1a43B8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AK6PBExcT9wT1BCQB" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eb1a43B8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AK6PBExcT9wT1BCQB" alt="img"&gt;&lt;/a&gt;Photo from &lt;a href="https://reactrouter.com/"&gt;React Router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are using React, then &lt;a href="https://reactrouter.com/"&gt;React Router&lt;/a&gt; is the best choice. It is solid, well-tested with few bugs, and straightforward to use. Oh, and it has 42.3K stars on &lt;a href="https://github.com/ReactTraining/react-router"&gt;GitHub&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forms" class="anchor"&gt;
  &lt;/a&gt;
  Forms
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Gbcjs5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AU1_d1N4HE1Vt4XK2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Gbcjs5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AU1_d1N4HE1Vt4XK2.png" alt="img"&gt;&lt;/a&gt;Photo from &lt;a href="https://react-hook-form.com/"&gt;React Hook Form&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Almost every web application needs a form. To add a form to my application, I use &lt;a href="https://react-hook-form.com/"&gt;React Hook Form&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;React Hook Form adopts React Hooks as the core of the library and is extremely simple and easy to use. In fact, there is a form builder you can use to build your forms and literally copy-paste the code into your React project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLE64QRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AhlpbtFLkq93h3wh6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLE64QRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AhlpbtFLkq93h3wh6.png" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo from &lt;a href="https://formspree.io/"&gt;Formspree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If all you need is a static form (e.g. Contact Us), then &lt;a href="https://formspree.io/"&gt;Formspree&lt;/a&gt; might be your choice. It requires zero server code and is an excellent option for simple forms.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#alternatives" class="anchor"&gt;
  &lt;/a&gt;
  Alternatives
&lt;/h4&gt;

&lt;p&gt;One popular option here is &lt;a href="https://github.com/formium/formik"&gt;Formik&lt;/a&gt;. Formik is a powerhouse — it contains an amazing number of features and has a wide fanbase of developers with over 25.8K stars on GitHub! However, I feel that Formik can sometimes be overkill. When all you need is a simple, nice form with a few fields, React Hook Form has you covered.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-back-end" class="anchor"&gt;
  &lt;/a&gt;
  Quick Back End
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IrwUHtO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2Agvmjse2UwvQB4TTG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrwUHtO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2Agvmjse2UwvQB4TTG.png" alt="img"&gt;&lt;/a&gt;Photo from &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I know this article is about front-end React stacks. Nevertheless, I thought I would add this one in — especially for projects where you wish you had a quick back end to integrate. &lt;a href="http://firebase.google.com/"&gt;Firebase&lt;/a&gt; and &lt;a href="https://firebase.google.com/docs/firestore"&gt;Firestore&lt;/a&gt; are excellent options for this use case. I wouldn’t delve too much into this, as it is an entire topic of its own.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#alternatives" class="anchor"&gt;
  &lt;/a&gt;
  Alternatives
&lt;/h4&gt;

&lt;p&gt;If you need a quick back end, then some other options are &lt;a href="https://docs.google.com/spreadsheets/"&gt;Google Sheets&lt;/a&gt; and &lt;a href="https://airtable.com/"&gt;Airtable&lt;/a&gt;! Both are as simple as an Excel sheet yet can become as powerful as a small database when required.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;And there you go: Next.js, Bulma, Sass, CSS Modules, React Hook Form, Firebase, and Firestore. This is my typical React stack that fits almost any project I am working on.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#surprise" class="anchor"&gt;
  &lt;/a&gt;
  Surprise
&lt;/h4&gt;

&lt;p&gt;If you're looking for an all-encompassing codebase which can supercharge your next project, look no further! I created exactly what you need - &lt;a href="http://supercharge.dev/"&gt;Supercharge.dev&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://supercharge.dev/"&gt;Supercharge.dev&lt;/a&gt; combines all of the above and even more! With Google Analytics and ready-to-use dashboard with Firebase support, you get everything out-of-the-box! &lt;/p&gt;

&lt;p&gt;Use the code &lt;code&gt;DEV2021&lt;/code&gt; to enjoy a 20% off the &lt;a href="http://supercharge.dev/"&gt;Supercharge&lt;/a&gt; bundle now!&lt;/p&gt;

&lt;p&gt;Thanks for reading! Leave a comment below about your favourite libraries.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Creating a custom Eleventy filter</title>
      <author>Chris Bongers</author>
      <pubDate>Sat, 23 Jan 2021 07:29:20 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/creating-a-custom-eleventy-filter-58db</link>
      <guid>https://dev.to/dailydevtips1/creating-a-custom-eleventy-filter-58db</guid>
      <description>&lt;p&gt;Alright, I wanted to make this article a bit bigger but hit a roadblock when trying to use filters in Eleventy.&lt;/p&gt;

&lt;p&gt;So I decided to dedicate this article to showcasing how filters can work in Eleventy.&lt;/p&gt;

&lt;p&gt;A filter is basically a function we can extend in our frontend by calling the pipe &lt;code&gt;|&lt;/code&gt; delimiter followed by the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;someVar&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;uppercase&lt;/code&gt; is then counted as our filter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eleventy-filter-types" class="anchor"&gt;
  &lt;/a&gt;
  Eleventy Filter types
&lt;/h2&gt;

&lt;p&gt;Eleventy actually knows quite a few filter types, as mentioned on their &lt;a href="https://www.11ty.dev/docs/filters/"&gt;documentation on Filters&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Liquid Filter&lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLiquidFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uppercase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Nunjucks Filter&lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addNunjucksFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uppercase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Handlebars Filter&lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandlebarsHelper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uppercase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// JavaScript Template Function&lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addJavaScriptFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uppercase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// or, use a Universal filter (an alias for all of the above)&lt;/span&gt;
  &lt;span class="nx"&gt;eleventyConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uppercase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are going to use the Universal filter method.&lt;/p&gt;

&lt;p&gt;What I kind of missed in the documentation was the ability to add parameters to the function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-arguments-to-the-filter" class="anchor"&gt;
  &lt;/a&gt;
  Adding arguments to the filter
&lt;/h2&gt;

&lt;p&gt;So far we have been talking about an &lt;code&gt;uppercase&lt;/code&gt; filter, but we actually want to make a &lt;code&gt;filteredPosts&lt;/code&gt; one.&lt;/p&gt;

&lt;p&gt;What it should do:&lt;/p&gt;

&lt;p&gt;Filter posts and slice the first {x} from the results&lt;/p&gt;

&lt;p&gt;You might wonder why?&lt;/p&gt;

&lt;p&gt;Because my layout uses three separate layouts it made more sense to split them out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;firstItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;secondItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;postListItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;filteredPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here you can see how I set my variables.&lt;/p&gt;

&lt;p&gt;You might have spotted the filter already!&lt;br&gt;
And more importantly how the argument is passed to it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;filteredPosts(argument)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-the-filtered-post-filter" class="anchor"&gt;
  &lt;/a&gt;
  Building the filtered post filter
&lt;/h2&gt;

&lt;p&gt;To build this filter we need to modify our &lt;code&gt;.eleventy.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filteredPosts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;modifiedValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is our universal filter that accepts the argument. It always receives the value, but the second part is the argument.&lt;/p&gt;

&lt;p&gt;We want to strip out the first 2 elements, for which we can use the &lt;code&gt;slice&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;I had some issues when using &lt;a href="https://daily-dev-tips.com/posts/vanilla-javascript-slice-vs-splice/"&gt;slice vs splice&lt;/a&gt;, but a quick refresh on those made me realise we can use splice to modify the incoming value, remove the first 2 elements and return it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filteredPosts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That makes sure the first two elements are cut from the array since we already assigned them to their own variables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-multiple-arguments" class="anchor"&gt;
  &lt;/a&gt;
  Adding multiple arguments
&lt;/h2&gt;

&lt;p&gt;We can of course, also send multiple arguments to our Eleventy Filter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;postListItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;filteredPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And receive them as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filteredPosts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We could even set default values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filteredPosts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There you go, I hope this helps someone creating their own cool filters with Eleventy 🤩.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Star Ratings Design Using HTML &amp; CSS</title>
      <author>Monalisa Mondal</author>
      <pubDate>Sat, 23 Jan 2021 06:01:36 +0000</pubDate>
      <link>https://dev.to/backlinknweb/star-ratings-design-using-html-css-37n4</link>
      <guid>https://dev.to/backlinknweb/star-ratings-design-using-html-css-37n4</guid>
      <description>&lt;p&gt;In this article, you are going to learn how star rating design is made using only simple HTML and CSS programming code. You can use other programming codes like bootstrap, javascript, etc. to create such designs. However, in this article, I have shared with you the easiest way to make a star rating.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.foolishdeveloper.com/2021/01/star-rating-design-using-simple-html-css.html"&gt;Feedback&lt;/a&gt; is one of the most important points in today's world of the internet. We always try to get the opinion of others before buying anything. That opinion helps the user to analyze the quality of that product. We hope you enjoy the &lt;a href="https://www.foolishdeveloper.com/2021/01/star-rating-design-using-simple-html-css.html"&gt;dynamic star rating design&lt;/a&gt; shown in this article. You can easily link it to any website or web page.&lt;/p&gt;

&lt;p&gt;You can follow the &lt;a href="https://youtu.be/mRFabKuCpLE"&gt;video tutorial below&lt;/a&gt; to learn how to make Star Rating Design step by step. In the video below I have fully shared with you how to make it.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mRFabKuCpLE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/2021/01/star-rating-design-using-simple-html-css.html"&gt;Demo: Click Here&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/2021/01/star-rating-design-using-simple-html-css.html"&gt;Download: Click Here&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Hopefully, you have learned how to make it from the video above. Below I show what programming code I used to make it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-5-radio-buttons-using-html-code" class="anchor"&gt;
  &lt;/a&gt;
  Create 5 radio buttons using HTML code
&lt;/h2&gt;

&lt;p&gt;To &lt;a href="https://www.foolishdeveloper.com/2021/01/star-rating-design-using-simple-html-css.html"&gt;create this rating design&lt;/a&gt;, first of all, create a radio button using some HTML code. Since it is a five-star rating, five radio buttons have been used in this case. Radio buttons are a type of button where you can keep any one of the five acts. When you click on another distribution, the previous button will be automatically deactivated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- 1ST --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"r1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"r1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
       &lt;span class="c"&gt;&amp;lt;!-- 2ST --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"r2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"r2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
       &lt;span class="c"&gt;&amp;lt;!-- 3ST  --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"r3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"r3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
       &lt;span class="c"&gt;&amp;lt;!-- 4ST --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"r4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"r4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
       &lt;span class="c"&gt;&amp;lt;!-- 5ST --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"r5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"r5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

       &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#design-the-background-and-buttons" class="anchor"&gt;
  &lt;/a&gt;
  Design the background and buttons
&lt;/h2&gt;

&lt;p&gt;The following CSS programming codes have been used to design the radio buttons. The background is black so that the star ratings are clearly visible. You can change the background color as you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@charset&lt;/span&gt; &lt;span class="s1"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;.rating&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;190px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.rating&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.rating&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#convert-radio-buttons-to-star-symbols-using-css-code" class="anchor"&gt;
  &lt;/a&gt;
  Convert radio buttons to star symbols using css code
&lt;/h2&gt;

&lt;p&gt;The following codes are the CSS programming codes used to convert radio buttons to star symbols. The star symbol is mainly used here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.rating&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.4s&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-font-smoothing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;antialiased&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"☆"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;pulse&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;pulse&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* add hover effect */&lt;/span&gt;
&lt;span class="nc"&gt;.rating&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="nd"&gt;:hover::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#5e5e5e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#5e5e5e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.rating&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.rating&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.rating&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"★"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f9bf3b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#f9bf3b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Hopefully from the above tutorial, you have learned how to make a CSS star rating display using only HTML and CSS code. If you want to know more completely, you can follow the video tutorial above. Special thanks to you for reading to the end of the article.&lt;/p&gt;

&lt;p&gt;You can subscribe to my youtube channel to get more videos like this.&lt;br&gt;
YouTube Channel: &lt;a href="https://www.youtube.com/channel/UCd7QmP1Ul8Gxfns4vNWRn1Q/"&gt;https://www.youtube.com/channel/UCd7QmP1Ul8Gxfns4vNWRn1Q/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Designing a URL Shortener in Deno</title>
      <author>Akash Joshi 🇮🇳</author>
      <pubDate>Sat, 23 Jan 2021 04:52:20 +0000</pubDate>
      <link>https://dev.to/akashjdotcom/designing-a-url-shortener-in-deno-4deb</link>
      <guid>https://dev.to/akashjdotcom/designing-a-url-shortener-in-deno-4deb</guid>
      <description>&lt;p&gt;To understand the basics of Deno and learn how to start a Deno project from scratch, check out the YouTube video above. In this article, we’re going to jump into the deep end with Deno and build a complete application. If you need help with anything JS, feel free to reach out through &lt;a href="https://superpeer.com/akash"&gt;Superpeer&lt;/a&gt; (a video-chat platform) or &lt;a href="https://twitter.com/thewritingdev"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What we will achieve:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mapping URL shortcodes to endpoints using a live-editable JSON file.&lt;/li&gt;
&lt;li&gt;Have expiry dates attached to each URL so that shortcodes are valid only for a limited period of time.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#0-prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  0. Prerequisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Having &lt;a href="https://deno.land/#installation"&gt;Deno&lt;/a&gt; installed.&lt;/li&gt;
&lt;li&gt;Knowing how to use &lt;code&gt;deno run —allow-net —allow-read /path/to/file.ts&lt;/code&gt; to run your code.&lt;/li&gt;
&lt;li&gt;Following this tutorial to get an initial repository ready.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#so-lets-get-started" class="anchor"&gt;
  &lt;/a&gt;
  So, let’s get started 🔥
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#1-building-the-router" class="anchor"&gt;
  &lt;/a&gt;
  1. Building the Router
&lt;/h2&gt;

&lt;p&gt;If we look at the Oak module used from the video: &lt;a href="https://deno.land/x/oak"&gt;https://deno.land/x/oak&lt;/a&gt;, the "&lt;a href="https://deno.land/x/oak#basic-usage"&gt;Basic Usage&lt;/a&gt;" section pretty much covers all the use cases of a router. So, what we will do is expand on the existing code. &lt;/p&gt;

&lt;p&gt;To test this code, you can create a file called &lt;code&gt;index.ts&lt;/code&gt; in a folder, and copy the "Basic Usage" code into it.&lt;/p&gt;

&lt;p&gt;To understand how to run TypeScript or JavaScript files in Deno, you first need to understand how Deno runs files. You run a file by running the command &lt;code&gt;deno run file_name.ts&lt;/code&gt; or &lt;code&gt;file_name.js&lt;/code&gt; depending on whether it's TypeScript or JavaScript.&lt;/p&gt;

&lt;p&gt;Run it using the command &lt;code&gt;deno run —allow-net index.ts&lt;/code&gt;. You add the &lt;code&gt;allow-net&lt;/code&gt; so your script has network access.&lt;/p&gt;

&lt;p&gt;The "Basic Usage” router looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/book&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/book/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we can keep the “/“ endpoint unchanged to test whether the router is running without errors and get a default response. We don’t need the “/book” URL, so it can be removed. We can keep the "/" endpoint, as it is a good example of how normal endpoints will look in Oak.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-building-the-shortener" class="anchor"&gt;
  &lt;/a&gt;
  2. Building the shortener
&lt;/h2&gt;

&lt;p&gt;To build a URL shortener, let's consider the logic we'll use for mapping shortened URLs with their final endpoints. Let's create a file, &lt;code&gt;urls.json&lt;/code&gt;, which will have the format&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shortcode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;destination_url_string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expiryDate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YYYY-MM-DD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will have a key for each url shortcode, defined here as "shortcode". For each shortcode, we will have a destination URL "dest" and a date when the URL is no longer valid "expiryDate". You can check the JSON file here: &lt;a href="https://github.com/akash-joshi/deno-url-shortener/blob/master/urls.json"&gt;https://github.com/akash-joshi/deno-url-shortener/blob/master/urls.json&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To read this JSON file in your code, add the following to the top of &lt;code&gt;index.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://deno.land/x/oak/mod.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readTextFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./urls.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, to run your &lt;code&gt;index.ts&lt;/code&gt;, you will need another flag &lt;code&gt;—allow-read&lt;/code&gt;. Your final command becomes &lt;code&gt;deno run —allow-net —allow-read index.ts&lt;/code&gt;. After running this command, you'll see the JSON file being printed in your terminal window. This means that your program is able to read the JSON file correctly.&lt;/p&gt;

&lt;p&gt;From the Basic Usage example, “/book/:id” is exactly what we need. Instead of "/book/:id", we can use "/shrt/:urlid", where we will get the individual URLs based on the URL ID. Replace the existing code present inside the "/book/:id" route with this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/shrt/:urlid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;404&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The if condition in the route does the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Checks if parameters are attached to the route&lt;/li&gt;
&lt;li&gt;Checks if the parameter &lt;code&gt;urlid&lt;/code&gt; is in the parameter list.&lt;/li&gt;
&lt;li&gt;Checks whether the &lt;code&gt;urlid&lt;/code&gt; matches with any url in our json.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If it matches with all these, the user is redirected to the correct URL. If it doesn't, a 404 response on the body is returned.&lt;/p&gt;

&lt;p&gt;To test this, copy this route into &lt;code&gt;index.ts&lt;/code&gt;, to make it look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/shrt/:urlid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;404&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And run the file using &lt;code&gt;deno run —allow-net —allow-read index.ts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, if you go to &lt;code&gt;http://localhost:8000/shrt/g&lt;/code&gt;, you'll be redirected to Google's homepage. On the other hand, using a random shortcode after /shrt/ brings you to the 404 page. However, you'll see that the shortener doesn't react live to changes in the json file. This is because &lt;code&gt;urls.json&lt;/code&gt; is only read once.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-add-livereloading" class="anchor"&gt;
  &lt;/a&gt;
  3. Add Live-Reloading
&lt;/h2&gt;

&lt;p&gt;To make the &lt;code&gt;urls&lt;/code&gt; object react live to changes in the JSON file, we simply move the read statement inside our route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/shrt/:urlid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readTextFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./urls.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;404&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now even if we add or remove routes on the fly, our program will react to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-adding-expiry-to-the-urls" class="anchor"&gt;
  &lt;/a&gt;
  4. Adding Expiry to the URLs
&lt;/h2&gt;

&lt;p&gt;To make our URLs expire according to dates, we will be using the popular momentjs library, which  luckily, has been ported to Deno: &lt;a href="https://deno.land/x/moment"&gt;https://deno.land/x/moment&lt;/a&gt;. To understand how moment works, check out its documentation in the above link. &lt;/p&gt;

&lt;p&gt;To use it in our program, import it directly through its URL like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://deno.land/x/oak/mod.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://deno.land/x/moment/moment.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To check the date for when the URL will expire, we check the &lt;code&gt;expiryDate&lt;/code&gt; key on our &lt;code&gt;urls&lt;/code&gt; object. This will make the program look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;expiryDate&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YYYY-MM-DD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlid&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Link Expired&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;404&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;moment().format("YYYY-MM-DD")&lt;/code&gt;, we get the current datetime using &lt;code&gt;moment()&lt;/code&gt; and convert it to the "YYYY-MM-DD" format using &lt;code&gt;.format("YYYY-MM-DD")&lt;/code&gt;. By comparing it against our &lt;code&gt;expiryDate&lt;/code&gt; key, we can check whether the URL has expired or not.&lt;/p&gt;

&lt;p&gt;That's it ! You have built a fully functional URL shortener in Deno. You can find the final code in the GitHub repo at &lt;a href="https://github.com/akash-joshi/deno-url-shortener"&gt;https://github.com/akash-joshi/deno-url-shortener&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you need help with anything JS, feel free to reach out through &lt;a href="https://superpeer.com/akash"&gt;Superpeer&lt;/a&gt; (a video-chat platform) or &lt;a href="https://twitter.com/thewritingdev"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-thoughts-on-deno" class="anchor"&gt;
  &lt;/a&gt;
  My Thoughts on Deno
&lt;/h3&gt;

&lt;p&gt;While it's refreshing to see a server-side language which takes security into consideration and supports TypeScript out-of-the-box, Deno still has a long way to go before being ready for use in production systems. For example, the TypeScript compilation is still very slow, with compilation times ~20 seconds even for simple programs like the one we just developed.&lt;/p&gt;

&lt;p&gt;On the Deno side, it still is pretty bad with error-reporting. For example, while embedding the code to read &lt;code&gt;urls.json&lt;/code&gt; in the function itself, Deno isn't able to report that the &lt;code&gt;-allow-read&lt;/code&gt; flag hasn't been set. Instead, it just throws a 500 without a proper error printed on the terminal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-next-" class="anchor"&gt;
  &lt;/a&gt;
  What Next ?
&lt;/h3&gt;

&lt;p&gt;You can improve your Deno or Typescript skills by building more complex applications like a &lt;a href="https://github.com/akash-joshi/Open-Chat"&gt;Chatting Application&lt;/a&gt; or a &lt;a href="https://github.com/akash-joshi/auth-wiki-public"&gt;Wikipedia Clone&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can also go through the Deno documentation at &lt;a href="http://deno.land"&gt;deno.land&lt;/a&gt; to improve your skills.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>deno</category>
    </item>
    <item>
      <title>Dear Code Newbie, Here's A Tip</title>
      <author>Karla Dampilag</author>
      <pubDate>Sat, 23 Jan 2021 04:15:48 +0000</pubDate>
      <link>https://dev.to/karladampilag/dear-code-newbie-here-s-a-tip-4c3o</link>
      <guid>https://dev.to/karladampilag/dear-code-newbie-here-s-a-tip-4c3o</guid>
      <description>&lt;p&gt;This is in response to: &lt;a href="https://dev.to/karladampilag/comment/1am1j"&gt;How Do You Take Notes?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Disclaimer: the points below are more geared toward a code newbie. I'm betting that an experienced programmer won't find this helpful. &lt;strong&gt;But&lt;/strong&gt; if you are one, do let me know if you did this or not, and if it helped, or what worked for you instead.&lt;/p&gt;

&lt;p&gt;Here's what worked for me when I was a code newbie:&lt;/p&gt;

&lt;p&gt;Write. Down. Code. Physically write it down... in your notes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-success-testimonial" class="anchor"&gt;
  &lt;/a&gt;
  The "Success" Testimonial
&lt;/h1&gt;

&lt;p&gt;A little backstory - I took web development courses back in college. At one point, we learned about an API called &lt;em&gt;XMLHttpRequest&lt;/em&gt;. It's an old tech, but it's just another API that allows you to fetch data from a server.&lt;/p&gt;

&lt;p&gt;Anyway, I wrote the whole thing down in my notebook - from setting up HTTP headers, to sending the request and accepting the response, along with all the magic you could do with the data. You know, typical web dev stuff.&lt;/p&gt;

&lt;p&gt;I read it during my commute to class. I made it my goal to do all those things on the computer without referring to my notes. &lt;/p&gt;

&lt;p&gt;Eventually, a lab test came, and guess what we had to do? You guessed it! Fetch data from some URL, display the "objects" on the browser, and so on. (I remember when using HTML tables to display responsively was the norm. Eugh 😀) Basically, we had to come up with a tiny CRUD app within the time given to us.&lt;/p&gt;

&lt;p&gt;Needless to say, I passed the test since I already knew the process at heart. I remember toying with how I wanted to display the stuff on the screen (the last thing you want to spend time on). Meanwhile, my seatmates were still figuring out how to successfully get the stuff we needed to display.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#do-not-copy-and-paste-but-on-steroids" class="anchor"&gt;
  &lt;/a&gt;
  Do Not Copy and Paste, But On Steroids
&lt;/h1&gt;

&lt;p&gt;You've probably heard of the "do not copy and paste" tip from the coding community. &lt;strong&gt;This is in the context that you're learning something new.&lt;/strong&gt; It's not a secret - the new and unfamiliar code you copy-pasted is too easy to forget. But when you write them on paper, you're applying some variation of "do not copy and paste"... it's on steroids.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-distractions" class="anchor"&gt;
  &lt;/a&gt;
  What distractions?
&lt;/h2&gt;

&lt;p&gt;You make it harder to get distracted from your computer (or phone). This is especially true for students who need to study for school. Interestingly, the longer I worked as a developer, the less I kept these kind of notes. It's easy to Google syntaxes and commands nowadays.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beyond-the-syntax" class="anchor"&gt;
  &lt;/a&gt;
  Beyond the syntax
&lt;/h2&gt;

&lt;p&gt;But even experienced people in the industry still keep some notes... they're just a different kind of content.&lt;/p&gt;

&lt;p&gt;For example, soon you might need to draw a diagram to help decide where and how to put relationships in your schema. Or you might need some mockups for this new feature you have to build.&lt;/p&gt;

&lt;p&gt;In other words, you spew out quick and "messy" notes of your headspace. These are the kind of content you come up with during the planning and design phases of your work... before they get translated into the more beautiful diagrams and charts for your bosses and clients.&lt;/p&gt;

&lt;p&gt;The point is, the notes may vary from person to person, but the purpose is the same - to get it out there, to make it reside in a place that won't go away. Your brain can only hold so much information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cheat-sheets" class="anchor"&gt;
  &lt;/a&gt;
  Cheat sheets
&lt;/h2&gt;

&lt;p&gt;Last but definitely not the least, you have your personal knowledge bank.&lt;/p&gt;

&lt;p&gt;Remember when you Googled that unfamiliar thing?  You had many tabs open. You then arrived with the answer after putting together some different sources. Well, you could pull out those chunks and keep them in a single place, where you can easily access them when you need them again.&lt;/p&gt;

&lt;p&gt;Another thing - I noticed a popular term that people use is "cheat sheet". So if you've never done this before, here's some examples for inspiration: &lt;a href="https://github.com/typescript-cheatsheets/react"&gt;React + TypeScript Cheatsheets&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-failure-testimonial" class="anchor"&gt;
  &lt;/a&gt;
  The "Failure" Testimonial
&lt;/h1&gt;

&lt;p&gt;Anyway, I felt the need to share this "tip" because I noticed that not everyone does it.&lt;/p&gt;

&lt;p&gt;I don't know why, but even my classmates back in college didn't do this. They took down notes during lectures when we talked about theory, but they never did it during laboratory when we wrote actual code on the computer (and presumably applied the aforementioned theory).&lt;/p&gt;

&lt;p&gt;I don't blame them - I myself didn't always know it was important to write things down. I was thinking, what's the point, I have a copy in my USB drive!&lt;/p&gt;

&lt;p&gt;On my first year in college, we had a &lt;em&gt;Programming Fundamentals&lt;/em&gt; course. To learn (and apply) these so-called "fundamentals", we solved small problems on our computer using the &lt;em&gt;Java&lt;/em&gt; programming language.&lt;/p&gt;

&lt;p&gt;It was fun. We did it all the time, so I found a way to solve the problems faster: I created a template of all boilerplate code, so all I had to do for each new problem is copy and paste the template, and then jump straight to coding my solution. &lt;strong&gt;Good bye boilerplate code, hello speed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One day we had a "test" but there was a catch - no notes allowed. No plugging of USB drives. No Googling. Those were all considered cheating.&lt;/p&gt;

&lt;p&gt;I understood the reasoning - the given test was meant to asses our problem-solving skills, applied through programming. When given a business problem, how would you approach solving it, and how would you translate your solution to code?&lt;/p&gt;

&lt;p&gt;That said, how could you evaluate your real skills if you didn't solve the problem yourself, right? I repeat, this was school, not the real world where copy-pasting is actually common. There's really nothing wrong about it (unless you didn't even bother to understand why the solution worked).&lt;/p&gt;

&lt;p&gt;Anyway, I knew how to solve the given problem. I was excited to implement it, except...&lt;/p&gt;

&lt;p&gt;I couldn't get started because I didn't know the syntax of declaring the main method in a Java class. You know, the freaking&lt;/p&gt;

&lt;p&gt;&lt;code&gt;public static void main(String[] args)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That's it! That's literally all I had to type to get started, but alas, I couldn't remember 😀&lt;/p&gt;

&lt;p&gt;Imagine the frustration of knowing how to do steps one to ten but you can't because you're stuck at step zero. In other words, help the poor girl, she's f*cked.&lt;/p&gt;

&lt;p&gt;I want to add, the no-notes rule was kinda stupid, right? I mean, it's stupid to make a test unpassable if the student doesn't know the syntax. In the real world, you can Google the syntax. But then again, it was common for students to cheat. Meaning, a few gifted students already have a copy of the solution in their USB drives. How do they have it, you ask? They copy it from students from an earlier class. These are the students that can graduate but are f*cked once they get a job (if they can get one).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-word-of-caution" class="anchor"&gt;
  &lt;/a&gt;
  A Word of Caution
&lt;/h1&gt;

&lt;p&gt;Eventually, these seemingly tiny things are things you'll naturally memorize as you keep doing them in your day-to-day life... as a student in your classes, or as a developer at your job.&lt;/p&gt;

&lt;p&gt;But in the beginning when you're trying to learn a new language, framework, algorithm, or any new tech... writing things down helps you get familiar with them faster.&lt;/p&gt;

&lt;p&gt;But don't just memorize! Obviously you also have to understand what the code does. In fact, make it more fun - simulate! On that same paper, give it different inputs and come up with the supposed output. If your textbook or course is teaching a concept in Java, and you're learning a different language in parallel, then re-write the solutions in the other language. This way, you'll know if you're truly proficient with that language.&lt;/p&gt;

&lt;p&gt;I'm in no way telling you to write down every single code you come across with. &lt;strong&gt;That just doesn't make any sense.&lt;/strong&gt; It's your job to determine what you think is important, what you think you'll need later, or what you think is fundamental that you'll need all the time. Then ingrain that in your brain (wow it rhymed). See again: &lt;a href="https://github.com/typescript-cheatsheets/react"&gt;example of a really thorough cheat sheet&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-to-expect" class="anchor"&gt;
  &lt;/a&gt;
  What's To Expect
&lt;/h1&gt;

&lt;p&gt;Sometimes what you wrote down in the past has finally become second nature to you now. When you revisit those old notes, you'd be ashamed at how noob you were to even need to write those things down. That's good! It means you made progress, you're growing as a programmer.&lt;/p&gt;

&lt;p&gt;Keep growing your knowledge repository, and within months (and years), you'll be amazed at how far you've gone. If you're an absolute newbie, your notes might consist of syntax stuff like how to declare a variable, how to loop over an array, how to assign a value, and so on. In months time, your notes may evolve into a collection of your data models of this new module you're building, and so on. You know, the kind of stuff that you can't possibly keep in your head, so you have to write them down?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#parting-words-and-more-theory" class="anchor"&gt;
  &lt;/a&gt;
  Parting Words and More Theory
&lt;/h1&gt;

&lt;p&gt;Back to my original story... as a new student, I had an itch to code most of the time, and I couldn't do that during my commute (I had no laptop back then). One can say that reading my physical notes was a way for me to scratch that itch even when I couldn't truly scratch that itch. Sure. But writing those notes and reading them when I had nothing to do... it helped me progress faster than if I just played with my phone during the commute.&lt;/p&gt;

&lt;p&gt;I hope you have as much fun learning as I do. Happy coding!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Best Podcasts For New Web Developers</title>
      <author>SR Hansford</author>
      <pubDate>Sat, 23 Jan 2021 02:55:00 +0000</pubDate>
      <link>https://dev.to/shaquilhansford/best-podcasts-for-new-web-developers-3ebc</link>
      <guid>https://dev.to/shaquilhansford/best-podcasts-for-new-web-developers-3ebc</guid>
      <description>&lt;h3&gt;
  &lt;a href="#its-hard-finding-a-good-podcast-when-youre-new-to-coding" class="anchor"&gt;
  &lt;/a&gt;
  It's hard finding a good podcast when you're new to coding.
&lt;/h3&gt;

&lt;p&gt;You want something with substance, so you can learn, but you want it to actually feel approachable. No one wants to be battered with jargon for an hour when they're supposed to be relaxing.&lt;/p&gt;

&lt;p&gt;So I've compiled a very short list of the very best podcasts I've found while learning webdev. I hope it will be useful for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-aws-morning-brief" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.lastweekinaws.com/podcast/aws-morning-brief/"&gt;AWS Morning Brief&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Taking the bottom place on the list is AWS Morning Brief, though not due to lack of quality. I actually love Corey Quinn's podcast; it's funny, snarky, cynical and entertaining. Most episodes are under 10 minutes long.&lt;/p&gt;

&lt;p&gt;It fails to get a higher spot for two reasons: First, it's not strictly webdev related; and second, it's very technical.&lt;/p&gt;

&lt;p&gt;Anyone trying to get into webdev, especially backend or fullstack development, will at some point have to consider whether or not they'll host their projects on AWS. Most likely they'll need to use &lt;em&gt;some&lt;/em&gt; cloud provider. Even so, at the very beginning, you won't want to worry yourself with the complexities of how to specifically build out an app's cloud architecture.&lt;/p&gt;

&lt;p&gt;You'll also struggle, because the subject itself is so dense. In fact, if Corey Quinn wasn't so fun and natural in his role as a host, the podcast would probably be unlistenable. Definitely check this out every once in a while for a fun peek into a side of the web that most coders are baffled by.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-dotnet-rocks" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.dotnetrocks.com/"&gt;DotNet Rocks!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I'm just happy these guys are still around.&lt;/p&gt;

&lt;p&gt;.NET Rocks is a long-running podcast by one current and one former Microsoft developer. And when I say long-running, I mean &lt;em&gt;long-running&lt;/em&gt;. I first started listening ten years ago, and the show was already established by then.&lt;/p&gt;

&lt;p&gt;This show leans more toward the conversational and chill side of coding, with technical topics being explored but not typically delivered in a tutorial style. If you want something to listen to during a road trip, this one's definitely it!&lt;/p&gt;

&lt;p&gt;It doesn't get a higher spot on the list because, while they focus a lot on the .NET stack, their show does often talk more generally about .NET and software development as a whole. They're still well worth listening to though, if not to learn than to get some motivation to be more positive about the future of software development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-shoptalk" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://shoptalkshow.com/"&gt;ShopTalk&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you haven't heard of &lt;a href="https://css-tricks.com/"&gt;css-tricks.com&lt;/a&gt;, go check it out immediately. It's an incredible resource, especially for beginners. The creator of css-tricks.com is one of the two amazing hosts of the ShopTalk podcast.&lt;/p&gt;

&lt;p&gt;ShopTalk, like .NET Rocks, is a more chatty podcast, but unlike .NET Rocks, it's entirely geared toward webdev. You'll hear of concepts you've never heard of, get a peek into the minds of top-tier coders as they're working through their own personal projects, and get to relax and have fun along the way.&lt;/p&gt;

&lt;p&gt;It's an excellent experience, and if there's any small flaw in it at all, it's the fact that the hosts are so bleeding edge that you may miss out on discussions of more practical, real-world aspects of webdev.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-syntaxfm" class="anchor"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://syntax.fm/"&gt;Syntax.fm&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The perfect mix of everything.&lt;/p&gt;

&lt;p&gt;AWS Morning Brief is fun, but man is it technical. .NET Rocks is easy to get into, but boy does it have a wide range of topics. Shoptalk is webdev-specific, but it just never feels all that instructive.&lt;/p&gt;

&lt;p&gt;If only there was a podcast that was technical without being impenetrable, diverse in content without losing track of webdev, and chill without lacking hard educational value.&lt;/p&gt;

&lt;p&gt;Oh, hi, Syntax.fm!&lt;/p&gt;

&lt;p&gt;Syntax is strictly the best podcast for beginner webdevs. Your first few listens will be hard, but Scott Tolinski and Wes Bos's wonderful personalities will carry you through. Then once you start actually building projects, all the topics they discuss will suddenly make so much sense and feel so relatable. You'll also be learning a ton.&lt;/p&gt;

&lt;p&gt;And just when all the learning and technical concepts feel too intense, the podcast still finds a way to slow everything down and feel like a fun conversation between two friends.&lt;/p&gt;

&lt;p&gt;Honestly, you don't &lt;em&gt;have&lt;/em&gt; to like syntax.fm, and if you dislike it, that's fair enough--but you do &lt;em&gt;have&lt;/em&gt; to listen to it right now. It's the best of the best in my opinion.&lt;/p&gt;

&lt;p&gt;Check me out on twitter &lt;a class="comment-mentioned-user" href="https://dev.to/shaquilhansford"&gt;@shaquilhansford&lt;/a&gt;
&lt;br&gt;
&lt;a href="https://twitter.com/shaquilhansford"&gt;https://twitter.com/shaquilhansford&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introducing the JavaScript Spread Operator</title>
      <author>John Au-Yeung</author>
      <pubDate>Sat, 23 Jan 2021 02:07:49 +0000</pubDate>
      <link>https://dev.to/aumayeung/introducing-the-javascript-spread-operator-3l4j</link>
      <guid>https://dev.to/aumayeung/introducing-the-javascript-spread-operator-3l4j</guid>
      <description>&lt;p&gt;&lt;strong&gt;Check out my books on Amazon at &lt;a href="https://www.amazon.com/John-Au-Yeung/e/B08FT5NT62"&gt;https://www.amazon.com/John-Au-Yeung/e/B08FT5NT62&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Subscribe to my email list now at &lt;a href="http://jauyeung.net/subscribe/"&gt;http://jauyeung.net/subscribe/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The spread syntax allows us to break up a collection of objects, like arrays, into individual arguments or insert them into a different iterable object, like an array.&lt;/p&gt;

&lt;p&gt;With the 2018 version of JavaScript, we can also spread properties of an object into another object, with keys and values spread into another object. The spread syntax is denoted by three periods before your object.&lt;/p&gt;

&lt;p&gt;For example, we can write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The spread syntax works by copying the values of the original array and then inserting them into another array, or putting them in the order they appeared in the array as the list of arguments in a function in the same order.&lt;/p&gt;

&lt;p&gt;When the spread operator is used with objects, the key-value pairs appear in the same order they appeared in the original object.&lt;/p&gt;

&lt;p&gt;We can use the spread syntax to spread an array of values as arguments of a function. For example, we can write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the example above, the spread operator spreads the variables into the argument in the same order they appeared in the array. So 1 is passed into &lt;code&gt;a&lt;/code&gt;, 2 is passed into &lt;code&gt;b&lt;/code&gt;, and 3 is passed into &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#spread-arrays" class="anchor"&gt;
  &lt;/a&gt;
  Spread Arrays
&lt;/h1&gt;

&lt;p&gt;For arrays, we can also use the spread syntax to insert one array’s values into another array. For example, we can write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// arr2 is ['a','b','c',1,2,3,'d']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As we can see, the spread operator inserts the values exactly where we spread the array, in the same order they appeared in the array.&lt;/p&gt;

&lt;p&gt;So, 1 is inserted between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;, then 2 is inserted between 1 and &lt;code&gt;d&lt;/code&gt;, and 3 is inserted between 2 and &lt;code&gt;d&lt;/code&gt;. The result is that we copied an array’s values into another array with the spread operator in the same order they appeared in, and exactly where you put the array spread expression.&lt;/p&gt;

&lt;p&gt;Without the spread operator, we have to write loops to insert them into the position we want. We &lt;code&gt;slice&lt;/code&gt; the array into two and then call &lt;code&gt;concat&lt;/code&gt; on the three parts, then assign the result to the array you inserted the stuff into. It sounds painful just thinking about it.&lt;/p&gt;

&lt;p&gt;Note that with the spread operator, only the first level of the array is spread. If we have nested or multi-dimensional arrays, it’s going to copy the references as-is. It will not do anything to nested items.&lt;/p&gt;

&lt;p&gt;With ES2018, we can do the same thing with objects, like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;  
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objClone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// objClone is {a: 1, b: 2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This creates a shallow copy of the object. It means that only the first level of the object is copied.&lt;/p&gt;

&lt;p&gt;For nested objects, it’s going to copy the references as-is. It will not do anything to nested items. The top-level keys and values of the object will be copied to &lt;code&gt;objClone&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, if we have nested objects, we get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
  &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  
  &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;};&lt;/span&gt;  
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objClone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;  
&lt;span class="p"&gt;};&lt;/span&gt;  
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objClone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;objClone&lt;/code&gt;, we get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
  &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="nl"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  
  &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, nested objects will reference the same ones as the original.&lt;/p&gt;

&lt;p&gt;The spread operator can be used as an alternative to other functions that existed before.&lt;/p&gt;

&lt;p&gt;For example, we can use it to replace the &lt;code&gt;apply&lt;/code&gt; function for passing in arguments to a function. The &lt;code&gt;apply&lt;/code&gt; function takes an array of arguments for the function it’s called on as the second argument.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;apply&lt;/code&gt; function, we call it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the spread syntax, we can write the following instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The spread operator also work with strings. We apply the spread operator to strings, we get an array with the individual characters of the string.&lt;/p&gt;

&lt;p&gt;For example, if we write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We get &lt;code&gt;[“a”, “b”, “c”, “d”]&lt;/code&gt; as the value of &lt;code&gt;chars&lt;/code&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#using-spread-operator-multiple-times" class="anchor"&gt;
  &lt;/a&gt;
  Using Spread Operator Multiple Times
&lt;/h1&gt;

&lt;p&gt;We can use the spread syntax multiple times in one place. For example, we can have the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As usual, the spread syntax will spread the array of numbers into arguments of the array in the order as they appeared in.&lt;/p&gt;

&lt;p&gt;So, &lt;code&gt;sum(…arr, …arr2, 6)&lt;/code&gt; is the same as &lt;code&gt;sum(1,2,3,4,5,6)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;1, 2, and 3 are the first three arguments, which are the entries of &lt;code&gt;arr&lt;/code&gt; in the same order, and 4 and 5 are the fourth and fifth arguments, which are spread after 1, 2, and 3.&lt;/p&gt;

&lt;p&gt;Then, in the end, we have 6 as the last argument. We can also see the spread syntax work with the normal function call syntax.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#use-it-in-constructors" class="anchor"&gt;
  &lt;/a&gt;
  Use It in Constructors
&lt;/h1&gt;

&lt;p&gt;We can use the spread operator as arguments for object constructors. For example, if we want to create a new &lt;code&gt;Date&lt;/code&gt; object, we can write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dateFields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;dateFields&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The items in the &lt;code&gt;dateFields&lt;/code&gt; array are passed into the constructors as arguments in the order they appeared in. The alternative way to write that would be much longer, something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dateFields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dateFields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dateFields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dateFields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#copying-items" class="anchor"&gt;
  &lt;/a&gt;
  Copying Items
&lt;/h1&gt;

&lt;p&gt;The spread syntax can also be used to make a shallow copy of an array or an object as it works by creating copies of the top-level elements of an array or key-value pairs of an object and then inserting them into the place you used the spread operator with.&lt;/p&gt;

&lt;p&gt;For copying arrays, we can write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const arr = [1, 2, 3];  
const arr2 = [...arr, 4, 5];
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above example, &lt;code&gt;arr2&lt;/code&gt;, is &lt;code&gt;[1,2,3,4,5]&lt;/code&gt;, while &lt;code&gt;arr1&lt;/code&gt; is still &lt;code&gt;[1,2,3]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;arr1&lt;/code&gt; is not referenced by &lt;code&gt;arr2&lt;/code&gt; because the spread operator actually makes a copy of the array and then inserts the values. Note that this doesn’t work with multi-dimensional arrays as it only makes copies of the top-level elements.&lt;/p&gt;

&lt;p&gt;We can apply the spread syntax multiple times in one array or object. An example for array would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;  
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above example, we get &lt;code&gt;[4,5,1,2,3]&lt;/code&gt;. &lt;code&gt;arr1&lt;/code&gt; and &lt;code&gt;arr2&lt;/code&gt; are unaffected as a copy of the values from &lt;code&gt;arr1&lt;/code&gt; and &lt;code&gt;arr2&lt;/code&gt; are inserted into &lt;code&gt;arr3&lt;/code&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#spread-operator-and-objects" class="anchor"&gt;
  &lt;/a&gt;
  Spread Operator and Objects
&lt;/h1&gt;

&lt;p&gt;With ES2018, the spread operator works with object literals. Then, key-value pairs of an object can be inserted into another object with the spread operator.&lt;/p&gt;

&lt;p&gt;If there are two objects with the same key that the spread operator is applied to in the same object, the one that’s inserted later will overwrite the one that’s inserted earlier.&lt;/p&gt;

&lt;p&gt;For example, if we have the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;  
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;baz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;  
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we get &lt;code&gt;{foo: “baz”, a: 1, b: 1}&lt;/code&gt; as the value of &lt;code&gt;obj3&lt;/code&gt; because &lt;code&gt;obj1&lt;/code&gt; is spread before &lt;code&gt;obj2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;They both have &lt;code&gt;foo&lt;/code&gt; as a key in the object. First, &lt;code&gt;foo: 'bar'&lt;/code&gt; is inserted by the spread operator to &lt;code&gt;obj3&lt;/code&gt;. Then, &lt;code&gt;foo: 'baz'&lt;/code&gt; overwrites the value of &lt;code&gt;foo&lt;/code&gt; after &lt;code&gt;obj2&lt;/code&gt; is merged in, as it has the same key &lt;code&gt;foo&lt;/code&gt; but inserted later.&lt;/p&gt;

&lt;p&gt;This is great for merging objects as we don’t have to loop through the keys and put in the values, which is much more than one line of code.&lt;/p&gt;

&lt;p&gt;One thing to note is that we can’t mix the spread operator between regular objects and iterable objects. For example, we will get &lt;code&gt;TypeError&lt;/code&gt; if we write the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;  
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;As we can see, the spread syntax is a great convenience feature of JavaScript. It lets us combine different arrays into one.&lt;/p&gt;

&lt;p&gt;Also, it lets us pass arrays into a function as arguments with just one line of code. With ES2018, we can also use the same operator to spread key-value pairs into other objects to populate one object’s key-value pairs into another object.&lt;/p&gt;

&lt;p&gt;The spread operator works by copying the top-level items and populating them in the place you use the spread operator, so we can also use it to make shallow copies of arrays and objects.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>LocalPen v0.2 ✨🎉</title>
      <author>Hatem Hosny</author>
      <pubDate>Fri, 22 Jan 2021 23:02:43 +0000</pubDate>
      <link>https://dev.to/hatemhosny/localpen-v0-2-44bm</link>
      <guid>https://dev.to/hatemhosny/localpen-v0-2-44bm</guid>
      <description>&lt;p&gt;This is a part of the series: LocalPen - code pens that run locally!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hatemhosny/localpen"&gt;LocalPen&lt;/a&gt; is a powerful frontend coding playground that runs totally on the client and can be hosted on any static file server. Try it now on &lt;a href="https://localpen.io/"&gt;localpen.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, a &lt;a href="https://github.com/hatemhosny/localpen/releases"&gt;new release&lt;/a&gt; of LocalPen was published, featuring:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enforced security&lt;/li&gt;
&lt;li&gt;Templates: starter templates and user defined templates&lt;/li&gt;
&lt;li&gt;CSS Presets&lt;/li&gt;
&lt;li&gt;Various bug fixes and improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#enforced-security" class="anchor"&gt;
  &lt;/a&gt;
  Enforced Security
&lt;/h2&gt;

&lt;p&gt;The result page is now rendered in a &lt;a href="https://www.html5rocks.com/en/tutorials/security/sandboxed-iframes/"&gt;sandboxed iframe&lt;/a&gt; with a unique origin. This prevents embedded editors from having access to the parent page, or to sensitive data like user cookies, localstorage, etc. This makes it a lot safer to embed LocalPen editor in your website and guards against most cross site scripting attacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#templates" class="anchor"&gt;
  &lt;/a&gt;
  Templates
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jXvfeTgs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fun2wrd0ffax26zlt0pi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jXvfeTgs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fun2wrd0ffax26zlt0pi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New projects can start with a blank template or use any of the provided starter templates (which include starter templates for typescript, react, vue, angular preact, jQuery, bootstrap, tailwind and D3). Alternatively users can save any project as a template (settings menu &amp;gt; save as &amp;gt; Template). It can then be used when starting a new project (settings menu &amp;gt; New &amp;gt; My Templates).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-presets" class="anchor"&gt;
  &lt;/a&gt;
  CSS Presets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5aZPRxn6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aztfzbcp640ipe5cw98e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5aZPRxn6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aztfzbcp640ipe5cw98e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS base presets can be easily added from the settings menu. These currently include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necolas.github.io/normalize.css/"&gt;Normalize.css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/reset-css"&gt;CSS reset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sindresorhus/github-markdown-css"&gt;github-markdown-css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://darshandsoni.com/asciidoctor-skins/"&gt;Asciidoctor CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is an example of a &lt;a href="https://gist.github.com/PurpleBooth/109311bb0361f32d87a2"&gt;starter README template&lt;/a&gt; with markdown using github-markdown-css:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-OT4z6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q9omu74h4hoqo7jqbhww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-OT4z6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q9omu74h4hoqo7jqbhww.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;for the full feature list of LocalPen, check the announcement post:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hatemhosny" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdCG8ZWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5Lf-KQJt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/238410/f78c2b0a-5bfd-47af-8b53-b9d3f1b86f36.jpeg" alt="hatemhosny image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hatemhosny/introducing-localpen-2keb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introducing LocalPen 🎉✨&lt;/h2&gt;
      &lt;h3&gt;Hatem Hosny ・ Jan 11 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#localpen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;and the GitHub repo:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hatemhosny"&gt;
        hatemhosny
      &lt;/a&gt; / &lt;a href="https://github.com/hatemhosny/localpen"&gt;
        localpen
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Code pens that run locally!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
LocalPen &lt;/h1&gt;
&lt;p&gt;Code pens that run locally!&lt;/p&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/hatemhosny/localpen/develop/images/logo/localpen-logo.svg"&gt;&lt;img width="300" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8i4qsI98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/hatemhosny/localpen/develop/images/logo/localpen-logo.svg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;A powerful frontend coding playground that runs totally on the client and can be hosted on any static file server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://localpen.io" rel="nofollow"&gt;Try it now on localpen.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hatemhosny.github.io/localpen-examples/images/screenshots/editor-languages.png" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b224a1a355692d9cce4a619ddb19ac9ff6070a9412807f876b887d88898250cf/68747470733a2f2f686174656d686f736e792e6769746875622e696f2f6c6f63616c70656e2d6578616d706c65732f696d616765732f73637265656e73686f74732f656469746f722d6c616e6775616765732e706e67" width="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TL;DR: &lt;a href="https://raw.githubusercontent.com/hatemhosny/localpen/develop/#getting-started"&gt;Getting started&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.digitalocean.com/apps/new?repo=https://github.com/hatemhosny/localpen/tree/master&amp;amp;refcode=fb8c00b45b91" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/df21703b4229f8d44f76c2d56073657a4ab450ca4566ba5d24d05bf528c298f8/68747470733a2f2f7777772e6465706c6f79746f646f2e636f6d2f646f2d62746e2d626c75652e737667" alt="Deploy to DO"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Feature Summary: &lt;/h2&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://microsoft.github.io/monaco-editor/" rel="nofollow"&gt;&lt;strong&gt;Monaco editor&lt;/strong&gt;&lt;/a&gt; (the beautiful code editor that powers &lt;a href="https://github.com/Microsoft/vscode"&gt;VS Code&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://prettier.io/" rel="nofollow"&gt;&lt;strong&gt;Prettier&lt;/strong&gt;&lt;/a&gt; code formatting&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;many languages&lt;/strong&gt; (HTML, Markdown, Pug, AsciiDoc, CSS, SCSS, SASS, Less, Stylus, JavaScript, TypeScript, JSX, CoffeeScript and more to come)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://emmet.io/" rel="nofollow"&gt;&lt;strong&gt;Emmet&lt;/strong&gt;&lt;/a&gt; tab completion&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/postcss/autoprefixer"&gt;&lt;strong&gt;Autoprefixer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;All code compiling/transpiling occurs on the fly &lt;strong&gt;on the client&lt;/strong&gt;, so works on any static server.&lt;/li&gt;
&lt;li&gt;Immediate results with &lt;strong&gt;no server rounds&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Conditional loading&lt;/strong&gt; of modules (only the features used are downloaded)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Templates&lt;/strong&gt;: Starter templates and user-defined templates&lt;/li&gt;
&lt;li&gt;Allows adding &lt;strong&gt;external stylesheets and/or scripts&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Allows importing &lt;strong&gt;npm modules&lt;/strong&gt; that can be referenced directly without a build step (using the great &lt;a href="https://www.skypack.dev/" rel="nofollow"&gt;skypack.dev&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allows importing strongly-typed local &lt;strong&gt;typescript modules&lt;/strong&gt; with full &lt;strong&gt;code completion and intellisense&lt;/strong&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/hatemhosny/localpen"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;Please let me know if you have any comments, suggestions or feature requests.&lt;/p&gt;

</description>
      <category>localpen</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>JS and Design Patterns - Chapter 3 🚀</title>
      <author>Codespresso</author>
      <pubDate>Fri, 22 Jan 2021 21:54:30 +0000</pubDate>
      <link>https://dev.to/codespresso/js-and-design-patterns-chapter-3-369d</link>
      <guid>https://dev.to/codespresso/js-and-design-patterns-chapter-3-369d</guid>
      <description>&lt;p&gt;Table Of Contents&lt;br&gt;
        * 🤓&lt;a href="#intro"&gt;INTRODUCTION&lt;/a&gt;&lt;br&gt;
        * 👤&lt;a href="#user"&gt;USER DECORATOR&lt;/a&gt;&lt;br&gt;
        * ☕&lt;a href="#coffee-shop"&gt;COFFEE SHOP DECORATOR&lt;/a&gt;&lt;br&gt;
        * ❓ &lt;a href="#why-use"&gt;WHY AND WHEN DO WE USE DECORATOR PATTERN?&lt;/a&gt;&lt;br&gt;
        * 🔵&lt;a href="#diff-types"&gt;DIFFERENT TYPES OF DECORATOR PATTERN&lt;/a&gt;&lt;br&gt;
        * 📚&lt;a href="#react-example"&gt;REACT EXAMPLE&lt;/a&gt;&lt;br&gt;
        * 🙏&lt;a href="#thank-you"&gt;THANK YOU&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  INTRODUCTION &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Welcome my fellow coders! I hope you are having a great time. Today was a very productive day, let's finish this week strong and talk about another interesting Design Pattern, a guy responsible for dynamically adding behavior to the existing classes - 🎉&lt;strong&gt;THE DECORATOR PATTERN&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xUySTJhx2jKGQX2L2E/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xUySTJhx2jKGQX2L2E/giphy.gif" alt="Decorator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The decorator pattern is a design pattern that allows behavior to be added to an individual object, dynamically. Let me explain it by using examples.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#javascript-code-implementation" class="anchor"&gt;
  &lt;/a&gt;
  JAVASCRIPT CODE IMPLEMENTATION
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#user-decorator" class="anchor"&gt;
  &lt;/a&gt;
  USER DECORATOR &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;say&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;DecoratedUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;street&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// ensures interface stays the same&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;street&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;street&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;say&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Decorated User: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;street&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// logging helper&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kelly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;say&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;decorated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DecoratedUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Broadway&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New York&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;decorated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;say&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#coffee-shop-decorator-story" class="anchor"&gt;
  &lt;/a&gt;
  COFFEE SHOP DECORATOR STORY &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Now imagine a coffee shop. The coffee shop only sells coffee. But, the clever manager figured out that they could earn an extra 💰 by selling different coffee condiments separately. We can help them manage that. Let's see how we can use our Decorator Pattern in this case.&lt;/p&gt;

&lt;p&gt;❗ NOTE: PLEASE READ THE COMMENTS 👩‍💻&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Constructor that will be decorated&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Coffee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="c1"&gt;//the type of the copy&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//the description that will be modified&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/*
       A function expression is very similar to
       and has almost the same syntax as a function
       declaration. The main difference between a function
       expression and a function declaration
       is the function name,  which can be omitted
       in function expressions to create anonymous functions
       A function expression can be used as an Immediately
       Invoked Function Expression
    */&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;1.99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; 
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; 
    &lt;span class="c1"&gt;//A regular function&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="c1"&gt;//We are going to "decorate" our coffee with whip, Milk,&lt;/span&gt;
&lt;span class="c1"&gt;//Soy or whatever you want, you just need to add another&lt;/span&gt;
&lt;span class="c1"&gt;//condiment function&lt;/span&gt;
&lt;span class="c1"&gt;//which is going to change the price and the description that &lt;/span&gt;
&lt;span class="c1"&gt;//we see at the end&lt;/span&gt;
&lt;span class="c1"&gt;//Decorator 1&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Whip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hbCost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hbDesc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hbDesc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, Whip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hbCost&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//Decorator 2&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Milk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hbCost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hbDesc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hbDesc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, Milk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hbCost&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//Decorator 3&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Soy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hbCost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hbDesc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hbDesc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, Soy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;houseBlend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hbCost&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;//We create a brand new coffee object instance&lt;/span&gt;
&lt;span class="c1"&gt;//for example Espresso (type="Espresso", description="Espresso")&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;coffee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Coffee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Espresso&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Double milk decorator&lt;/span&gt;
&lt;span class="nx"&gt;Milk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coffee&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;Milk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coffee&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//A whip&lt;/span&gt;
&lt;span class="nx"&gt;Whip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coffee&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//And a soy? 😲&lt;/span&gt;
&lt;span class="c1"&gt;//(This ain't coffee anymore, I don't know what this is...😂)&lt;/span&gt;
&lt;span class="nx"&gt;Soy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coffee&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//fancy console log&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%c%s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color: black; background: red; font-size: 24px;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Coffee: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;coffee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;` &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;coffee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;coffee2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Coffee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;House Blend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;Milk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coffee2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//A whip&lt;/span&gt;
&lt;span class="nx"&gt;Whip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coffee2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%c%s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color: black; background: red; font-size: 24px;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Coffee: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;coffee2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;`, $&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;  &lt;span class="nx"&gt;coffee2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output&lt;/span&gt;
&lt;span class="c1"&gt;//Coffee: Espresso, Milk, Milk, Whip, Soy, $2.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the previous coffee shop example, we saw that it is possible to apply multiple decorators, which can come in handy sometimes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-and-when-do-we-use-decorator-pattern" class="anchor"&gt;
  &lt;/a&gt;
  ❓ WHY AND WHEN DO WE USE DECORATOR PATTERN?&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Decorators use a special syntax in JavaScript, whereby they are prefixed with an @ symbol and placed immediately before the code being decorated. (see &lt;a href="https://tc39.es/proposal-decorators/"&gt;tc39&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;It's possible to use as many decorators on the same piece of code as you desire, and they'll be applied in the order that you declare them. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;log&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;immutable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is going to define a class and apply decorators - two to the class itself, and one to a property of a the class&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;@\log - could log all access to the class&lt;/li&gt;
&lt;li&gt;@immutable - could make the class immutable - by calling &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"&gt;Object.freeze()&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;time - will record how long a method takes to execute and log this out with a unique tag.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Decorators can allow for a cleaner syntax for applying this kind of wrapper around your code. Whilst function composition is already possible, it is significantly more difficult - or even impossible - to apply the same techniques to other pieces of code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-types-of-decorator-pattern" class="anchor"&gt;
  &lt;/a&gt;
  🔵 DIFFERENT TYPES OF DECORATOR PATTERN&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Class member decorators&lt;br&gt;
Property decorators are applied to a single member in a class — &lt;br&gt;
whether they are properties, methods, getters, or setters. This &lt;br&gt;
decorator function is called with three parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;target&lt;/strong&gt; - the class that the member is on.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;name&lt;/strong&gt; - the name of the member in the class.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;descriptor&lt;/strong&gt; - the member descriptor. This is essentially 
the object that would have been passed to 
&lt;a href="https://developer.mozilla.org/en-%20US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"&gt;Object.defineProperty&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The classic example used here is @readonly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Class decorators
Class decorators are applied to the entire class definition all 
in one go. The decorator function is called with a single 
parameter which is the constructor function being decorated.
In general, these are less useful than class member decorators, 
because everything you can do here you can do with a simple 
function call in exactly the same way. Anything you do with 
these needs to end up returning a new constructor function to 
replace the class constructor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#react-example" class="anchor"&gt;
  &lt;/a&gt;
  📚 REACT EXAMPLE&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;React makes a very good example because of the concept of Higher-Order Components. These are simply React components that are written as a function, and that wrap around another component. These are ideal candidates for use as a decorator because there's very little you need to change to do so. For example. the react-redux library has a function, connect. That's used to connect a React component to a Redux store.&lt;/p&gt;

&lt;p&gt;In general, this would be used as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyReactComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;MyReactComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, because of how the decorator syntax works, this can be replaced with the following code to achieve the exact same functionality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyReactComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Decorators, especially class member decorators provide a very good way of wrapping code inside a class in a very similar way to how you can already do so for freestanding functions.&lt;/p&gt;

&lt;p&gt;Some real-world examples: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/core-decorators"&gt;Core decorators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mobx.js.org/README.html"&gt;MobX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#thank-you-for-reading" class="anchor"&gt;
  &lt;/a&gt;
  🙏 THANK YOU FOR READING!&lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Please leave the comment, tell me about you, about your work, comment your thoughts on the filter method, connect with me via  &lt;a href="https://twitter.com/lazar_dev"&gt;Twitter&lt;/a&gt; or  &lt;a href="https://www.linkedin.com/in/lazar-stankovic-44a199177/"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Let this year be your year, let this year be our year. Until the next typing...&lt;/p&gt;

&lt;p&gt;Have a nice time!&lt;/p&gt;

&lt;p&gt;References:&lt;br&gt;
School notes...&lt;br&gt;
&lt;a href="https://tc39.es/proposal-decorators/"&gt;tc39&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.sitepoint.com/javascript-decorators-what-they-are/"&gt;sitepoint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/codespresso"&gt;Buy me a coffee&lt;/a&gt;, keep me focused! 😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Deploy your NodeJS App to a server with Docker</title>
      <author>arnu515</author>
      <pubDate>Fri, 22 Jan 2021 20:18:20 +0000</pubDate>
      <link>https://dev.to/arnu515/deploy-your-nodejs-app-to-a-server-with-docker-1hcd</link>
      <guid>https://dev.to/arnu515/deploy-your-nodejs-app-to-a-server-with-docker-1hcd</guid>
      <description>&lt;p&gt;Hey there! Welcome to my short crash course on deploying your NodeJS app to a DigitalOcean VPS using Docker and NGINX&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fk10UmpvcSs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-and-comparision-to-heroku" class="anchor"&gt;
  &lt;/a&gt;
  Introduction and comparision to Heroku
&lt;/h2&gt;

&lt;p&gt;If you've wanted to deploy your web apps easily, you would have come across something called &lt;a href="https://heroku.com"&gt;Heroku&lt;/a&gt;. Heroku is a PaaS, or Platform as a Service, that allows you to deploy your apps without worrying about servers, scaling, load balancing, maintenance or any of that jazz. It does have a free tier, which is nice to get started with, but once you have some sort of revenue from your app, it's time for you to upgrade&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-upgrade" class="anchor"&gt;
  &lt;/a&gt;
  Why upgrade?
&lt;/h3&gt;

&lt;p&gt;The Heroku free tier has something called sleeping apps. Sleeping apps will "sleep", i.e. shut down after 30 minutes of inactivity, i.e. 30 minutes of nobody visiting your website. After it sleeps, it takes a good 15-30 seconds to start back up, and this is &lt;b&gt;&lt;u&gt;REALLY BAD&lt;/u&gt;&lt;/b&gt; for an API. Because of your API sleeping, it can cause the performance of the apps who use your API to suffer, making them move to other APIs. If you only want to remove the sleeping apps thing, it would cost you $7 a month, PER APP. Your app will get 512MB of ram. If we compare this pricing to something like &lt;a href="https://cloud.digitalocean.com"&gt;DigitalOcean&lt;/a&gt;, you can see that we get a 1GB ram instance for just $5 a month.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm using DigitalOcean because I have a bit of the free credit left 😛&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#creating-and-setting-up-a-droplet" class="anchor"&gt;
  &lt;/a&gt;
  Creating and setting up a droplet
&lt;/h2&gt;

&lt;p&gt;Let's create a DigitalOcean Droplet. A droplet is DigitalOcean's way of saying VPS, or Virtual Private Server. A VPS is usually a linux server, but it can have the windows operating system too. You'll be dealing with linux most of the time when you want to deploy. If you want to go the Windows route, just be prepared for a lot of frustration!&lt;/p&gt;

&lt;p&gt;I'll create a brand new Ubuntu 20.04 LTS droplet. Ubuntu is a linux distro, and it is the most used one too. I'm choosing the LTS (Long Time Support) release. I'll go with the $5/month plan, and I'll pick my location to be Bangalore. For the auth method, I'll add a root password, and the hostname will be the domain I'd like my app to be hosted at, i.e. &lt;code&gt;test.arnu515.gq&lt;/code&gt; in my case. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I got this domain from &lt;a href="https://my.freenom.com"&gt;Freenom&lt;/a&gt;, which gives you FREE DOMAINS!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the droplet is getting created, I'll add a record to my domain, &lt;a href="https://arnu515.gq"&gt;arnu515.gq&lt;/a&gt; using the built in DNS Management. I'll add an &lt;code&gt;A&lt;/code&gt; record called &lt;code&gt;test&lt;/code&gt; (which will map to &lt;code&gt;test.arnu515.gq&lt;/code&gt;) with the IP of my machine. Remember to set the TTL (Time To Live) to a small number like 300 seconds (5 minutes), so your domain propogates faster. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sshing-into-our-droplet-and-securing-it" class="anchor"&gt;
  &lt;/a&gt;
  SSHing into our droplet and securing it
&lt;/h1&gt;

&lt;p&gt;Now for the fun part! Let's login to our droplet from our own computer's terminal using SSH. Open up a new shell and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh root@IP_OF_YOUR_MACHINE
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you have windows, you will most likely need to use an external SSH client, or use WSL. I'm not going to cover that, so you're on your own.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enter your root password you set earlier and now we can begin!&lt;/p&gt;

&lt;p&gt;First, always run these two commands whenever you create a new VPS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt update
apt upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;These commands fetch the latest versions of the package repositories and upgrade your existing applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-docker" class="anchor"&gt;
  &lt;/a&gt;
  Installing docker
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/engine/install/ubuntu/"&gt;Head over to the Docker Installation docs&lt;/a&gt; and install docker using the commands given to you, namely:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;apt-transport-https ca-certificates curl gnupg-agent software-properties-common

curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://download.docker.com/linux/ubuntu/gpg | apt-key add -

add-apt-repository &lt;span class="s2"&gt;"deb [arch=amd64] https://download.docker.com/linux/ubuntu &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;lsb_release &lt;span class="nt"&gt;-cs&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; stable"&lt;/span&gt;

apt update

apt &lt;span class="nb"&gt;install &lt;/span&gt;docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And docker should be installed. Run &lt;code&gt;docker -v&lt;/code&gt; to verify.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-raw-dockercompose-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Installing &lt;code&gt;docker-compose&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Installing &lt;code&gt;docker-compose&lt;/code&gt; is easier than installing docker, but you will need the latter installed first.&lt;/p&gt;

&lt;p&gt;All you have to do is download &lt;code&gt;docker-compose&lt;/code&gt;, save it in &lt;code&gt;/usr/local/bin&lt;/code&gt; and make it executable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-L&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/docker/compose/releases/download/1.28.0/docker-compose-&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; /usr/local/bin/docker-compose

&lt;span class="nb"&gt;chmod&lt;/span&gt; +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;docker-compose&lt;/code&gt; should be installed! Run &lt;code&gt;docker-compose -v&lt;/code&gt; to verify.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-nginx" class="anchor"&gt;
  &lt;/a&gt;
  Installing NGINX
&lt;/h3&gt;

&lt;p&gt;I would say that installing NGINX is even easier! All you have to do is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And that's it! NGINX is installed. You can visit your machine's IP address or even visit the domain name you set, in my case, &lt;code&gt;test.arnu515.gq&lt;/code&gt; and you should see the NGINX default website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Fboedz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jdd602y2m9l9ozy1ajlj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Fboedz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jdd602y2m9l9ozy1ajlj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If your IP works but not the domain, you will have to wait a bit longer. If you forgot to set the TTL, you will have to wait an hour until your domain works.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-new-user" class="anchor"&gt;
  &lt;/a&gt;
  Creating a new user
&lt;/h3&gt;

&lt;p&gt;Let's create a new user, because logging in as the &lt;code&gt;root&lt;/code&gt; user will enable us to do ANYTHING we want without having to give any permissions. This can be bad because we may remove certain directories that we usually can't remove because we don't have permissions, but that will get bypassed by &lt;code&gt;root&lt;/code&gt;, damaging or destroying our server.&lt;/p&gt;

&lt;p&gt;To create a new user,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;adduser USERNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Provide the password for the user, and you can accept the defaults for everything else by pressing &lt;code&gt;Enter&lt;/code&gt; a bunch of times.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For additional security, make sure that your new user's password doesn't match your root password.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's allow our new user to execute commands as root, but only when the command is prefixed with &lt;code&gt;sudo&lt;/code&gt;. This will allow us to run some command that need root access, like &lt;code&gt;apt&lt;/code&gt;, while running others that don't, like &lt;code&gt;cd&lt;/code&gt;, without root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;USERNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#logging-in-to-our-user" class="anchor"&gt;
  &lt;/a&gt;
  Logging in to our user
&lt;/h4&gt;

&lt;p&gt;We can login to our user by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;su USERNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You will notice that the prompt changes. We can logout of the user by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will return back to the root user. Close the connection by typing &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's login to our user directly from ssh. We'll use our domain name instead of the IP, because it has probably propogated by now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh USERNAME@DOMAINNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For me, the command would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh arnu515@test.arnu515.gq
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should be logged in to your user now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#securing-our-server" class="anchor"&gt;
  &lt;/a&gt;
  Securing our server
&lt;/h2&gt;

&lt;p&gt;Let's work on securing our server so some uninvited guests don't barge into your server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ssh" class="anchor"&gt;
  &lt;/a&gt;
  SSH
&lt;/h3&gt;

&lt;p&gt;Let's start with SSH. First of all, let's change the default SSH Port. Attackers will try using the default ssh port to ssh into your machine. If we change this port, then they will have to do a hit and trial method to login to your computer. Then we need to disable logging in as root. Then, we need to disable logging in with a password. Why, you ask? It's because hackers can guess your password if they try hard enough, so if there isn't a password they can guess, how can they log in? Now you may be thinking, how can WE log in? We'll be using something called SSH keys. These keys will identify us, so the server will allow us to login.&lt;/p&gt;

&lt;p&gt;Let's change our SSH config file first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo nano /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If nano is not installed, type &lt;code&gt;sudo apt install nano&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will open up a terminal-based text editor. We can edit the SSH Config file here.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax-of-the-ssh-config" class="anchor"&gt;
  &lt;/a&gt;
  Syntax of the ssh config
&lt;/h4&gt;

&lt;p&gt;The SSH config contains a key and value separated with a space. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 10
Key value
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If there's a pound (&lt;code&gt;#&lt;/code&gt;) in front of a statement, it becomes a comment. Comments are ignored. If a certain field doesn't exist in your SSH config, add it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#changing-the-port" class="anchor"&gt;
  &lt;/a&gt;
  Changing the port
&lt;/h4&gt;

&lt;p&gt;Find/Add the option called &lt;code&gt;Port&lt;/code&gt; and set it from any number other than &lt;code&gt;22&lt;/code&gt;. I will use &lt;code&gt;3333&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Port 3333
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#disabling-root-login" class="anchor"&gt;
  &lt;/a&gt;
  Disabling root login
&lt;/h4&gt;

&lt;p&gt;Find/Add the option &lt;code&gt;PermitRootLogin&lt;/code&gt; and set it to &lt;code&gt;no&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#disable-password-auth" class="anchor"&gt;
  &lt;/a&gt;
  Disable password auth
&lt;/h4&gt;

&lt;p&gt;Finally, find/add the option &lt;code&gt;PasswordAuthentication&lt;/code&gt; and set it to &lt;code&gt;no&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PasswordAuthentication no
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If the field &lt;code&gt;PubkeyAuthentication&lt;/code&gt; is set to &lt;code&gt;no&lt;/code&gt;, please comment it out or set it to &lt;code&gt;yes&lt;/code&gt;, otherwise you CANNOT login to your machine&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Exit out of the config by pressing &lt;code&gt;Ctrl+X&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;Enter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The config won't affect automatically. We have to restart SSH, but first, let's add our SSH Key to the machine.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adding-the-ssh-key" class="anchor"&gt;
  &lt;/a&gt;
  Adding the SSH Key
&lt;/h4&gt;

&lt;p&gt;Exit out of SSH first. On your local machine, if you don't have an ssh key, create one with &lt;code&gt;ssh-keygen&lt;/code&gt;. You should be given a path where the SSH key was stored. You can accept the defaults. Next, let's add the ssh key to our machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-copy-id -i PATH_TO_YOUR_SSH_KEY USERNAME@DOMAIN
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For me, the SSH key is in &lt;code&gt;/Users/arnu515/.ssh/id_rsa&lt;/code&gt;, so the command would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh-copy-id &lt;span class="nt"&gt;-i&lt;/span&gt; /Users/arnu515/.ssh/id_rsa arnu515@test.arnu515.gq
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You'll be prompted to enter the password. Once done, relog with ssh and you'll see that you don't have to enter a password!&lt;/p&gt;

&lt;p&gt;Finally, we can restart ssh on the droplet by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo service ssh restart
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;Exit out of SSH and try to log back in again. The command will fail because we're still connecting on port &lt;code&gt;22&lt;/code&gt;, while the new SSH port was &lt;code&gt;3333&lt;/code&gt;, atleast for me. Change the port by specifying the &lt;code&gt;-p&lt;/code&gt; flag:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
ssh USERNAME@DOMAIN -p PORT&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For me, the command will be:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
ssh arnu515@test.arnu515.gq -p 3333&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And congratulations! You've secured SSH!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firewall" class="anchor"&gt;
  &lt;/a&gt;
  Firewall
&lt;/h3&gt;

&lt;p&gt;By default, atleast on DigitalOcean, ALL PORTS are allowed. This is really bad, so let's install a firewall called &lt;code&gt;ufw&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo apt install ufw&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once that's done, let's whitelist the port 3333 so that we can login to our machine.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo ufw allow 3333&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can check the status of the firewall:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo ufw status&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you get &lt;code&gt;Status: inactive&lt;/code&gt;, we need to enable the firewall. Let's do that using:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
sudo ufw enable&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This MAY disrupt your ssh connection, so if that happens, log back in again.&lt;/p&gt;

&lt;p&gt;If we visit our website at our domain, it will no longer work, because &lt;code&gt;ufw&lt;/code&gt; blocks it. To allow NGINX to work, &lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
sudo ufw enable "Nginx Full"&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And we're done with the security aspect. Let's deploy our app!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy" class="anchor"&gt;
  &lt;/a&gt;
  Deploy
&lt;/h2&gt;

&lt;p&gt;I made an &lt;a href="https://github.com/arnu515/nginx-deploy-example"&gt;example application&lt;/a&gt; that uses Express with MongoDB and Redis, to show that we can have multiple services. I'll be using &lt;code&gt;docker-compose&lt;/code&gt; to connect the mongodb, redis and the app containers together.&lt;/p&gt;

&lt;p&gt;We need to put this code on our machine, and the easiest way is using Github. I pushed my code from my local machine over to Github, and we can pull the code from github down to our droplet using &lt;code&gt;git clone&lt;/code&gt;. Once that's done, we can build and run the app using &lt;code&gt;docker-compose&lt;/code&gt; with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
docker-compose up -d&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You will get a &lt;code&gt;PermissionDenied&lt;/code&gt; error. This is happening because we don't have access to the &lt;code&gt;docker&lt;/code&gt; engine by default. To fix that, run:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
sudo usermod -aG docker USERNAME&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You need to logout and log back in to SSH and now, if you run &lt;code&gt;docker-compose&lt;/code&gt;, it should work! My app is hosted on port 5000. I could manually allow that port in the firewall and you could all visit my app at &lt;code&gt;test.arnu515.gq:5000&lt;/code&gt;, but if you see other websites, none of them have a port. That's where NGINX comes in. We can create a &lt;code&gt;proxy_pass&lt;/code&gt;, that basically maps all requests coming to port &lt;code&gt;80&lt;/code&gt;, i.e. the default port to port &lt;code&gt;5000&lt;/code&gt;. Let's see how.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-nginx" class="anchor"&gt;
  &lt;/a&gt;
  Configuring NGINX
&lt;/h3&gt;

&lt;p&gt;On port &lt;code&gt;80&lt;/code&gt;, there's already the default nginx website. We can disable that by running:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
sudo rm /etc/nginx/sites-enabled/default&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And then, we can restart NGINX&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
sudo systemctl restart nginx&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, let's create our website. I'll give it the name &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
sudo nano /etc/nginx/sites-available/test&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will open up the &lt;code&gt;nano&lt;/code&gt; text editor, and here, I can write:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`nginx&lt;br&gt;
server {&lt;br&gt;
    # Listens on port 80&lt;br&gt;
    listen 80;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# For all URLs on port 80,
location / {
    # Send them to port 5000
    proxy_pass http://localhost:5000;
    # Add some headers
    proxy_set_header Host $host;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don't forget the semicolon (;)!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's now enable this website by putting the same file in &lt;code&gt;sites-enabled&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
sudo cp /etc/nginx/sites-available/test /etc/nginx/sites-enabled&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Restart NGINX:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
sudo systemctl restart NGINX&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And we're done 🚀! Visit your app on port 80, and you can see the amazing app that you've built! Congratulations 🥳, you just deployed your app for a fraction of the cost! If you have any doubts, feel free to ask it here or in the comments section of the youtube video.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>nginx</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Using Fauna's streaming feature to build a chat with Svelte</title>
      <author>Fauna</author>
      <pubDate>Fri, 22 Jan 2021 18:43:22 +0000</pubDate>
      <link>https://dev.to/fauna/using-fauna-s-streaming-feature-to-build-a-chat-with-svelte-1gkd</link>
      <guid>https://dev.to/fauna/using-fauna-s-streaming-feature-to-build-a-chat-with-svelte-1gkd</guid>
      <description>&lt;p&gt;Author: Pier Bover&lt;br&gt;
Date: January 6, 2021&lt;/p&gt;



&lt;p&gt;Today we're going to take a look into Fauna's new streaming feature by building a small chat using Svelte.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AXDguTui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pg7bnp45tfuh8liv76z0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AXDguTui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pg7bnp45tfuh8liv76z0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Streaming allows our applications to subscribe to changes in Fauna. At this time we can only subscribe to documents, but subscription to collections and indexes are planned for the future.&lt;/p&gt;

&lt;p&gt;Note that streaming in Fauna is still in alpha stage. Bugs and changes in the API should be expected before the final release.&lt;/p&gt;

&lt;p&gt;The finished project is &lt;a href="https://github.com/PierBover/fauna-streaming-chat-with-svelte"&gt;on this Github repository&lt;/a&gt; which you can use to follow along.&lt;/p&gt;

&lt;p&gt;One last thing. If you've never used Fauna or FQL before, it would be a good idea to at least take a quick look at this &lt;a href="https://fauna.com/blog/getting-started-with-fql-faunadbs-native-query-language-part-1"&gt;introductory article&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#in-this-article" class="anchor"&gt;
  &lt;/a&gt;
  In this article:
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Setting up Fauna&lt;/li&gt;
&lt;li&gt;Configuring Rollup&lt;/li&gt;
&lt;li&gt;Fauna logic&lt;/li&gt;
&lt;li&gt;Application state&lt;/li&gt;
&lt;li&gt;The Svelte user interface&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#setting-up-fauna" class="anchor"&gt;
  &lt;/a&gt;
  Setting up Fauna
&lt;/h1&gt;

&lt;p&gt;First, we're going to configure everything we need in Fauna.&lt;/p&gt;

&lt;p&gt;If you haven't already done so, create a free Fauna user and login to the dashboard. Then create a new database with any name you prefer:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2WfhqHH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fqxllq7vbuzdb01g3ex3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2WfhqHH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fqxllq7vbuzdb01g3ex3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
We're now ready to start writing FQL queries in the dashboard's shell:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7mD1hwmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kko4ckh98x3jhbkvqrhz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7mD1hwmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kko4ckh98x3jhbkvqrhz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Our data model is very simple:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4pX8g9yq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vhfpkbla2uh1mlkh5lnm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pX8g9yq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vhfpkbla2uh1mlkh5lnm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
In terms of streaming, our chat application(s) will subscribe to the document of the chat room. We'll notify our users they have new messages by simply updating the &lt;strong&gt;ts&lt;/strong&gt; (timestamp) of that document.&lt;/p&gt;

&lt;p&gt;First, let's create our collections:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CreateCollection({
  name: "ChatRooms"
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CreateCollection({
  name: "ChatMessages"
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's also create a single chat room document. We're giving it an id of 1 so that we can reference it easily later on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Create(
  Ref(Collection("ChatRooms"), "1"),
  {
    data: {
      name: "Fauna chat"
    }
  }
)

{
  ref: Ref(Collection("ChatRooms"), "1"),
  ts: 1608136745905000,
  data: {
    name: "Fauna chat"
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We're also going to need an index to retrieve messages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CreateIndex({
  name: "ChatMessages_by_chatRoomRef",
  source: Collection("ChatMessages"),
  values: [
    { field: ["ts"] },
    { field: ["data", "authorName"] },
    { field: ["data", "authorColor"] },
    { field: ["data", "message"] },
    { field: ["ref"] }
  ],
  terms: [{ field: ["data", "chatRoomRef"] }]
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see in the &lt;strong&gt;terms&lt;/strong&gt; settings, this index accepts a reference to be able to get messages from a single chat room.&lt;/p&gt;

&lt;p&gt;This index also has a &lt;strong&gt;values&lt;/strong&gt; setting that will return indexed data of the documents in the &lt;strong&gt;ChatMessages&lt;/strong&gt; collection. By default, when no values are configured, indexes do not return documents but document references. This requires an extra read operation for each document we want to read.&lt;/p&gt;

&lt;p&gt;Obviously, our chat application is going to be super popular and have millions of users. By having our index return some values instead of document references, we're reducing the number of read operations on the documents themselves. The drawback is that now each message will occupy more storage space, the document itself plus the indexed data.&lt;/p&gt;

&lt;p&gt;To test our index let's create a new message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Create(
  Collection("ChatMessages"),
  {
    data: {
      authorName: "Pier",
      authorColor: "tomato",
      message: "Hello there",
      chatRoomRef: Ref(Collection("ChatRooms"), "1")
    }
  }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As expected, if we query our index we will be getting the values from this document back:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Paginate(
  Match(
    Index("ChatMessages_by_chatRoomRef"),
    Ref(Collection("ChatRooms"), "1")
  )
)

{
  data: [
    [
      1608141339175000,
      "Pier",
      "tomato",
      "Hello there",
      Ref(Collection("ChatMessages"), "285089452953436680")
    ]
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#authorization-rules" class="anchor"&gt;
  &lt;/a&gt;
  Authorization rules
&lt;/h1&gt;

&lt;p&gt;For simplicity's sake, we're not going to implement user authentication in this demo. Instead, we're going to create a custom role with limited privileges that our application will use.&lt;/p&gt;

&lt;p&gt;Go to the security tab of the dashboard and create a new role with the name of &lt;strong&gt;FrontEnd&lt;/strong&gt;. Add the two collections and the index we've created with these privileges:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uMa2P_xq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/77xcdnokfmbatk61d3t6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uMa2P_xq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/77xcdnokfmbatk61d3t6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
In plain English, our application won't be able to create new chat rooms but will be able to read existing ones. It will also be able to create and read chat messages. Finally, it will be able to read the results from our index.&lt;/p&gt;

&lt;p&gt;We don't need to configure the membership settings for this role because we won't use authentication of users in our application. Instead, this role will be used by an application key. Check this article for more information on authentication and authorization with Fauna.&lt;/p&gt;

&lt;p&gt;You can save your role now and go back to the security tab to create a new key using the &lt;strong&gt;FrontEnd&lt;/strong&gt; role:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mdFye5KT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7sqhjbyojqwdjqgmwcpn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mdFye5KT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7sqhjbyojqwdjqgmwcpn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
After creating the key, Fauna will show us the secret that we'll need later on to be able to execute queries from our application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eAi7Qbwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fbk5mwaz4qvo3gx96dz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eAi7Qbwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fbk5mwaz4qvo3gx96dz5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save it somewhere safe. If you lose it you will need to create a new key to obtain its secret.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#configuring-rollup" class="anchor"&gt;
  &lt;/a&gt;
  Configuring Rollup
&lt;/h1&gt;

&lt;p&gt;Again, &lt;a href="https://github.com/PierBover/fauna-streaming-chat-with-svelte"&gt;here's the repository with the final project&lt;/a&gt; so you can check the final folder structure.&lt;/p&gt;

&lt;p&gt;As with any modern front end project, we're going to need NodeJS and NPM. If you don't have them installed, I recommend downloading the LTS version from the &lt;a href="https://nodejs.org/en/"&gt;NodeJS official page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a folder and open it with your terminal. Then init NPM with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will create a &lt;strong&gt;package.json&lt;/strong&gt; file in your project folder.&lt;/p&gt;

&lt;p&gt;We're going to use &lt;a href="https://rollupjs.org/"&gt;Rollup&lt;/a&gt; as our JavaScript bundler. You could also use Webpack if you prefer. It should be straightforward to configure following the &lt;a href="https://github.com/sveltejs/template-webpack"&gt;official Webpack template&lt;/a&gt; for Svelte.&lt;/p&gt;

&lt;p&gt;Configuring bundlers is a deep topic in itself. For this article I won't go into every detail, but I've explained the broad strokes in this section.&lt;/p&gt;

&lt;p&gt;Let's now install Rollup and Sirv, a static file web server which we'll use to run our application locally during development:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i rollup sirv-cli --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then install these Rollup plugins:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i rollup-plugin-terser rollup-plugin-svelte rollup-plugin-node-polyfills rollup-plugin-livereload rollup-plugin-css-only @rollup/plugin-node-resolve @rollup/plugin-commonjs @rollup/plugin-replace --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Most of these plugins come from the &lt;a href="https://github.com/sveltejs/template"&gt;official Rollup template for Svelte&lt;/a&gt;. I've added two plugins that we're going to need later on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/rollup/plugins/tree/master/packages/replace#readme"&gt;@rollup/plugin-replace&lt;/a&gt; will allow us to inject environment variables (such as our Fauna secret) into our front end app at compile-time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ionic-team/rollup-plugin-node-polyfills#readme"&gt;rollup-plugin-node-polyfills&lt;/a&gt; will insert polyfills for any needed NodeJS libraries. This is necessary to use the Fauna JavaScript driver in the browser.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're using Webpack, you can inject environment variables using &lt;a href="https://webpack.js.org/plugins/define-plugin/"&gt;DefinePlugin&lt;/a&gt;. Webpack v4 will include NodeJS polyfills by default, but with v5 you will need to configure that yourself.&lt;/p&gt;

&lt;p&gt;We're now ready to create the &lt;strong&gt;rollup.config.js&lt;/strong&gt; file at the root of our project. Copy the contents or download &lt;a href="https://github.com/PierBover/fauna-streaming-chat-with-svelte/blob/master/rollup.config.js"&gt;this file from the Github repository&lt;/a&gt; which, for the most part, follows the official template.&lt;/p&gt;

&lt;p&gt;Be sure to replace the Fauna secret with your own in the configuration of the Replace plugin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;replace({
  FAUNA_SECRET: '"fnAD9Ng2efACCJ-QS1FngbLOoPJ4JQfMgcv8Y5_I"'
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I committed that secret to the repository to serve as an example. In a real world scenario you should &lt;strong&gt;never&lt;/strong&gt; commit a secret to a Git repository. It would be a great idea to put the secret in a &lt;strong&gt;.env&lt;/strong&gt; file like we saw in a &lt;a href="https://fauna.com/blog/getting-started-with-fauna-and-node-js-using-fastify"&gt;previous article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see from the config file, whenever Rollup bundles our code, it will create the resulting files in the &lt;strong&gt;public/bundle&lt;/strong&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;output: {
  sourcemap: true,
  format: 'iife',
  name: 'app',
  file: 'public/build/bundle.js'
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Because we're using the &lt;strong&gt;rollup-plugin-svelte&lt;/strong&gt; (which uses the Svelte compiler) Rollup will also output a &lt;strong&gt;bundle.css&lt;/strong&gt; file with the CSS found in the Svelte components.&lt;/p&gt;

&lt;p&gt;Now we need the &lt;strong&gt;public/index.html&lt;/strong&gt; file with this content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset='utf8'&amp;gt;
    &amp;lt;meta name='viewport' content='width=device-width'&amp;gt;
    &amp;lt;title&amp;gt;Fauna chat&amp;lt;/title&amp;gt;
  &amp;lt;link rel='stylesheet' href='global.css'&amp;gt;
    &amp;lt;link rel='stylesheet' href='build/bundle.css'&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;script src='build/bundle.js'&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And also a &lt;strong&gt;public/global.css&lt;/strong&gt; file with any global CSS you might want. You can check the global CSS I used &lt;a href="https://github.com/PierBover/fauna-streaming-chat-with-svelte/blob/master/public/global.css"&gt;in the repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, add these commands in the scripts section of the &lt;strong&gt;package.json&lt;/strong&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
  "build": "rollup -c",
  "dev": "rollup -c -w",
  "start": "sirv public"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is what these commands do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;rollup -c&lt;/strong&gt; executes Rollup with the default config file (&lt;strong&gt;rollup.config.js&lt;/strong&gt;). We'll use this to build our project in production mode.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;rollup -c -w&lt;/strong&gt; adds the watch option which will rebuild our project in development mode automatically whenever we make changes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;sirv public&lt;/strong&gt; starts Sirv in our /&lt;strong&gt;public&lt;/strong&gt; folder. Rollup will trigger this command automatically whenever it rebuilds our project during development.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With our project in place we can now start working on our front end code.&lt;/p&gt;

&lt;p&gt;Remember to use the &lt;strong&gt;dev&lt;/strong&gt; command which will fire up Rollup and Sirv for development:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then open your browser at this URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:5000
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--efigzCot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xa4gsko249j67e9qo5xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--efigzCot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xa4gsko249j67e9qo5xz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fauna-logic" class="anchor"&gt;
  &lt;/a&gt;
  Fauna logic
&lt;/h1&gt;

&lt;p&gt;Let's install our dependencies to be able to communicate with Fauna:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i faunadb mini-signals
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/Hypercubed/mini-signals"&gt;mini-signals&lt;/a&gt; is a signals library in JavaScript. Signals are an implementation of the observer pattern and are very common in event-driven programming.&lt;/p&gt;

&lt;p&gt;Create the &lt;strong&gt;src/fauna/index.js&lt;/strong&gt; file in your project folder with this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import faunadb from 'faunadb';
import FaunaStream from "./FaunaStream.js";

// We do this so that our FQL code is cleaner
const {Paginate, Match, Range, Index, Create, Collection, Ref, Do, Update, ToMicros, Now, TimeSubtract} = faunadb.query;

const client = new faunadb.Client({
  secret: FAUNA_SECRET
});

const chatRoomRef = Ref(Collection('ChatRooms'), '1');

export const chatRoomStream = new FaunaStream(client, chatRoomRef);

export async function getLatestMessages (afterTs) {
  const result = await client.query(
    Paginate(
      Range(
        Match(
          Index("ChatMessages_by_chatRoomRef"),
          Ref(Collection("ChatRooms"), "1")
        ),
        afterTs ? afterTs : ToMicros(TimeSubtract(Now(), 3, 'hour')),
        []
      ),
      {
        size: 10000
      }
    )
  )

  return result.data;
}

export async function createMessage (authorName, authorColor, message) {
  const result = await client.query(
    Do(
      Update(
        chatRoomRef,
        {
          data: {
            lastUpdate: Now()
          }
        }
      ),
      Create(
        Collection('ChatMessages'),
        {
          data: {
            authorName,
            authorColor,
            message,
            chatRoomRef
          }
        }
      )
    )
  )

  return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that for simplicity's sake we will not be handling Fauna errors in this demo. You can check my &lt;a href="https://fauna.com/blog/getting-started-with-fauna-and-node-js-using-fastify"&gt;previous article&lt;/a&gt; about using Fauna with NodeJS to see one possible approach.&lt;/p&gt;

&lt;p&gt;Let's examine the relevant bits of this file step by step.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#initializing-the-client" class="anchor"&gt;
  &lt;/a&gt;
  Initializing the client
&lt;/h1&gt;

&lt;p&gt;We're only going to use a single secret (coming from our application key) so we can instantiate the Fauna client once and reuse it for all our queries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const client = new faunadb.Client({
  secret: FAUNA_SECRET
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As mentioned before, Rollup will replace the &lt;strong&gt;FAUNA_SECRET&lt;/strong&gt; variable at compile-time with the configured secret.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#writing-modular-fql" class="anchor"&gt;
  &lt;/a&gt;
  Writing modular FQL
&lt;/h1&gt;

&lt;p&gt;This variable contains a reference to our chat room document:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const chatRoomRef = Ref(Collection('ChatRooms'), '1');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I admit it's not a very impressive example, but it showcases the modularity of using FQL in JavaScript.&lt;/p&gt;

&lt;p&gt;Here's a better example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function callMyIndex (param1, param2, param3) {
  return Match(
    Index('MyIndex'),
    [param1, param2, param3]
  ); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By itself this function doesn't do much, other than returning a small FQL statement, but we can now use its return value into other FQL statements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const result = await client.query(
  Paginate(
    callMyIndex('foo', 'bar', 'baz')
  )
);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This modular approach allows us to encapsulate and reuse our FQL statements, and also make them dynamic, validate input, write tests, etc. It's brilliant.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-the-latest-messages" class="anchor"&gt;
  &lt;/a&gt;
  Getting the latest messages
&lt;/h1&gt;

&lt;p&gt;To get the latest messages we'll be using this function. It has a single parameter &lt;strong&gt;afterTs&lt;/strong&gt; to be able to get the messages after a certain point in time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export async function getLatestMessages (afterTs) {
  const result = await client.query(
    Paginate(
      Range(
        Match(
          Index("ChatMessages_by_chatRoomRef"),
          Ref(Collection("ChatRooms"), "1")
        ),
        afterTs ? afterTs : ToMicros(TimeSubtract(Now(), 1, 'hour')),
        []
      ),
      {
        size: 10000
      }
    )
  )

  return result.data;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In terms of FQL, we're using the &lt;strong&gt;ChatMessages_by_chatRoomRef&lt;/strong&gt; index we created earlier to get up to 10,000 messages in a single page. Do note the use of the &lt;strong&gt;chatRoomRef&lt;/strong&gt; variable (which is actually a &lt;a href="https://docs.fauna.com/fauna/current/api/fql/functions/ref?lang=javascript"&gt;Ref()&lt;/a&gt; to a document) as the index term.&lt;/p&gt;

&lt;p&gt;We're also doing a range query using &lt;a href="https://docs.fauna.com/fauna/current/api/fql/functions/range"&gt;Range()&lt;/a&gt; to only get messages after a certain point in time. This can either be the value of the &lt;strong&gt;afterTs&lt;/strong&gt; function parameter or, if it is undefined, the time in microseconds one hour before executing the query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ToMicros(TimeSubtract(Now(), 1, 'hour'))
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://docs.fauna.com/fauna/current/api/fql/functions/timesubtract?lang=javascript"&gt;TimeSubtract()&lt;/a&gt; returns a &lt;a href="https://docs.fauna.com/fauna/current/api/fql/functions/time?lang=javascript"&gt;Time()&lt;/a&gt; value, but we're using &lt;a href="https://docs.fauna.com/fauna/current/api/fql/functions/tomicros?lang=javascript"&gt;ToMicros()&lt;/a&gt; to actually get an integer of microseconds so that &lt;strong&gt;Range()&lt;/strong&gt; can compare with the &lt;strong&gt;ts&lt;/strong&gt; values.&lt;/p&gt;

&lt;p&gt;To dig deeper into filtering with Fauna, check this &lt;a href="https://fauna.com/blog/core-fql-concepts-part-4-range-queries-and-advanced-filtering"&gt;article&lt;/a&gt; where we explored range queries and complex conditional statements with FQL.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-new-messages" class="anchor"&gt;
  &lt;/a&gt;
  Creating new messages
&lt;/h1&gt;

&lt;p&gt;To create new message documents we'll use this function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export async function createMessage (authorName, authorColor, message) {
  const result = await client.query(
    Do(
      // First update the chat room document
      Update(
        chatRoomRef,
        {}
      ),
      // Then create a new message document
      Create(
        Collection('ChatMessages'),
        {
          data: {
            authorName,
            authorColor,
            message,
            chatRoomRef
          }
        }
      )
    )
  )

  return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We're combining two FQL statements with the &lt;a href="https://docs.fauna.com/fauna/current/api/fql/functions/do?lang=javascript"&gt;Do()&lt;/a&gt; function. Because Fauna is completely ACID, should any of these two statements fail, all changes will be reverted back and an error will be returned.&lt;/p&gt;

&lt;p&gt;Our first statement triggers an empty update to the document of our chat room. Anyone subscribed to this document will now be notified that it has changed, even though only its &lt;strong&gt;ts&lt;/strong&gt; (timestamp) has been updated.&lt;/p&gt;

&lt;p&gt;The second statement creates a new document in the &lt;strong&gt;ChatMessages&lt;/strong&gt; collection with the provided data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#subscribing-to-a-document" class="anchor"&gt;
  &lt;/a&gt;
  Subscribing to a document
&lt;/h1&gt;

&lt;p&gt;Let's now focus on the document streaming functionality of Fauna.&lt;/p&gt;

&lt;p&gt;You may have noticed that in the &lt;strong&gt;src/fauna/index.js&lt;/strong&gt; file there is an an instance of the &lt;strong&gt;FaunaStream&lt;/strong&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const chatRoomStream = new FaunaStream(client, chatRoomRef);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is a small class I created to simplify working with streams in Fauna.&lt;/p&gt;

&lt;p&gt;Create the &lt;strong&gt;src/fauna/FaunaStream.js&lt;/strong&gt; file with this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Signal from 'mini-signals';

export default class FaunaStream {
  constructor (client, documentRef) {    
    this.documentRef = documentRef;
    this.client = client;    
    this.onUpdate = new Signal();    
    this.initStream();
  }

  initStream () {
    this.stream = this.client.stream.document(this.documentRef);

    this.stream.on('snapshot', (data, event) =&amp;gt; {
      this.onUpdate.dispatch(data);
    });

    this.stream.on('version', (data, event) =&amp;gt; {
      this.onUpdate.dispatch(data.document);
    });

    this.stream.on('error', (data, event) =&amp;gt; {
      this.stream.close();
      setTimeout(() =&amp;gt; {
        this.initStream();
      }, 250);
    });

    this.stream.start();
  }

  destroy () {
    this.stream.close();
    this.onUpdate.detachAll();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The constructor accepts an instance of the Fauna client, and a reference to a document for the subscription.&lt;/p&gt;

&lt;p&gt;To subscribe to a document we first need to create a subscription using the &lt;strong&gt;client.stream.document()&lt;/strong&gt; method. We're doing that in the &lt;strong&gt;initStream&lt;/strong&gt; method of our class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.stream = this.client.stream.document(this.documentRef);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we can add handlers to a number of events. For this demo we're only interested in these three events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;snapshot&lt;/strong&gt; which will return the full document whenever the stream starts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;version&lt;/strong&gt; which will return the updated document whenever there is change.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;error&lt;/strong&gt; which will be triggered if anything goes wrong. If an error happens, it's necessary to close the stream and create a new one after waiting a bit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea is that whenever we receive a document in the stream, either from a &lt;strong&gt;snapshot&lt;/strong&gt; or &lt;strong&gt;version&lt;/strong&gt; event, we simply dispatch an update to the rest of our application using our signal.&lt;/p&gt;

&lt;p&gt;I've also added a &lt;strong&gt;destroy()&lt;/strong&gt; method, which we're not using in this demo, but serves as an example on how to prevent memory leaks.&lt;/p&gt;

&lt;p&gt;Here's an &lt;a href="https://fauna.com/blog/live-ui-updates-with-faunas-real-time-document-streaming"&gt;article&lt;/a&gt; with more information on Fauna streams, including a complete list of events you could use.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#application-state" class="anchor"&gt;
  &lt;/a&gt;
  Application state
&lt;/h1&gt;

&lt;p&gt;All the logic to communicate with Fauna is in place. We now need to work on the logic that will manage the state of our small application.&lt;/p&gt;

&lt;p&gt;Svelte provides a number of reactive primitives we can use. Components can subscribe automatically to these reactive primitives and update the DOM when the data changes.&lt;/p&gt;

&lt;p&gt;Because Svelte is actually a compiler and not a runtime, like say Vue or React, the dependencies between data and components are analyzed at compile time, resulting in very small and efficient applications.&lt;/p&gt;

&lt;p&gt;Here's the code for the &lt;strong&gt;src/store/index.js&lt;/strong&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {writable} from 'svelte/store';
import {chatRoomStream, getLatestMessages} from '../fauna/index.js';

const names = ['Cat', 'Lion', 'Dog', 'Lemur', 'Squirrel', 'Walrus', 'Octopus', 'Shark', 'Elephant'];
const colors = ['blue', 'orange', 'green', 'blueviolet', 'coral'];

export const messages = writable([]);
export const authorName = names[Math.floor(Math.random() * names.length)];
export const authorColor = colors[Math.floor(Math.random() * colors.length)];

let lastUpdateTs;

async function updateMessages () {
  const faunaResults = await getLatestMessages(lastUpdateTs);

  const latestMessages = faunaResults.map(item =&amp;gt; ({
    ts: item[0],
    authorName: item[1],
    authorColor: item[2],
    message: item[3],
    id: item[4].value.id,
  }));

  if (latestMessages.length) {
    messages.update(array =&amp;gt; [...array, ...latestMessages]);
    lastUpdateTs = latestMessages[latestMessages.length - 1].ts + 1;
  }
}

chatRoomStream.onUpdate.add(updateMessages);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our store is exporting three pieces of data to our application&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;messages&lt;/strong&gt; which is a reactive &lt;a href="https://svelte.dev/docs#writable"&gt;writable&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;authorName&lt;/strong&gt; which is decided randomly when the application starts from a list of animal names (it's a Fauna chat after all!).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;authorColor&lt;/strong&gt; which is also decided randomly when the application starts from a list of CSS color names.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We're also importing the instance of our &lt;strong&gt;FaunaStream&lt;/strong&gt; class and subscribing to the &lt;strong&gt;onUpdate&lt;/strong&gt; signal using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chatRoomStream.onUpdate.add(updateMessages);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In other words, whenever there is an update to the chat room document, the signal will execute our &lt;strong&gt;updateMessages&lt;/strong&gt; function. This function, in turn, will fetch the latest messages from Fauna and update the &lt;strong&gt;messages&lt;/strong&gt; reactive variable.&lt;/p&gt;

&lt;p&gt;Whenever new messages are received, the timestamp (in microseconds) of the last message is stored into the &lt;strong&gt;lastUpdateTs&lt;/strong&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lastUpdateTs = latestMessages[latestMessages.length - 1].ts + 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We're adding one microsecond to this value so that whenever we query Fauna we don't get the last message back:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const faunaResults = await getLatestMessages(lastUpdateTs);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Whenever a new user starts our chat, &lt;strong&gt;lastUpdateTs&lt;/strong&gt; will be undefined, so instead it will receive the messages from the previous hour.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-svelte-user-interface" class="anchor"&gt;
  &lt;/a&gt;
  The Svelte user interface
&lt;/h1&gt;

&lt;p&gt;Our user interface has two components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;src/components/App.svelte&lt;/strong&gt; which serves as an application shell and displays the list of messages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;src/components/ChatForm.svelte&lt;/strong&gt; the form where users submit messages to the chat.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#app-component" class="anchor"&gt;
  &lt;/a&gt;
  App component
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  import {afterUpdate} from 'svelte';
  import {messages, authorName, authorColor} from '../store/index.js';
  import ChatForm from "./ChatForm.svelte";

  let messagesDiv;

  afterUpdate(async () =&amp;gt; {
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  });
&amp;lt;/script&amp;gt;

&amp;lt;div id="App"&amp;gt;
  &amp;lt;div class="messages" bind:this={messagesDiv}&amp;gt;
    {#each $messages as message}
      &amp;lt;div class="message"&amp;gt;
        &amp;lt;strong style="color:{message.authorColor};"&amp;gt;
          {message.authorName}
        &amp;lt;/strong&amp;gt;: {message.message}
      &amp;lt;/div&amp;gt;
    {/each}
  &amp;lt;/div&amp;gt;
  &amp;lt;ChatForm/&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
  You're writing as &amp;lt;strong style="color:{authorColor};"&amp;gt;{authorName}&amp;lt;/strong&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;style&amp;gt;
  #App {
    width: 30rem;
    margin-bottom: 1rem;
  }

  .messages {
    height: 20rem;
    overflow: hidden;
    padding: 1.5rem;
    overflow-y: scroll;
    box-sizing: border-box;
    background-color: white;
    margin-bottom: 1rem;
    border: 1px solid #aaa;
  }

  .message {
    margin-bottom: .75rem;
  }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This component is quite straightforward as it only displays the list of messages.&lt;/p&gt;

&lt;p&gt;Remember that &lt;strong&gt;messages&lt;/strong&gt; (defined in our store) is actually reactive. Because we're using the dollar sign in front of its name (&lt;strong&gt;$messages&lt;/strong&gt;), Svelte will automatically subscribe to its changes and update the DOM accordingly. It will also unsubscribe from it when the component is destroyed.&lt;/p&gt;

&lt;p&gt;We're also using the &lt;a href="https://svelte.dev/docs#afterUpdate"&gt;afterUpdate&lt;/a&gt; hook so that, whenever this component is updated, the &lt;/p&gt; containing the messages is scrolled to the end:&lt;br&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;afterUpdate(async () =&amp;gt; {
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
});
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Instead of using this component hook, we could have also manually added a callback to our reactive value like this:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const unsubscribe = messages.subscribe(() =&amp;gt; {
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
});

onDestroy(() =&amp;gt; {
  unsubscribe();
});
&lt;/code&gt;&lt;/pre&gt;



&lt;h1&gt;
  &lt;a href="#chatform-component" class="anchor"&gt;
  &lt;/a&gt;
  ChatForm component
&lt;/h1&gt;

&lt;p&gt;Our &lt;strong&gt;ChatForm&lt;/strong&gt; component is even simpler:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  import {createMessage} from '../fauna/index.js';
  import {authorName, authorColor} from "../store/index.js";

  let message;

  function onSubmit () {
    createMessage(authorName, authorColor, message);
    message = '';
  }
&amp;lt;/script&amp;gt;

&amp;lt;form on:submit|preventDefault={onSubmit}&amp;gt;
  &amp;lt;input type="text" bind:value={message} required&amp;gt;
  &amp;lt;button type="submit"&amp;gt;Send&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;style&amp;gt;
  form {
    display: flex;
  }

  input {
    width: 100%;
    margin-right: .25rem;
  }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;It's essentially a &lt;strong&gt;&lt;/strong&gt; that triggers our &lt;strong&gt;createMessage&lt;/strong&gt; function whenever it is submitted.&lt;/p&gt;

&lt;p&gt;An interesting point to mention, is that component state in Svelte is always reactive. Whenever you use the assign operator (the equal sign) with one of the component variables, Svelte will update the relevant parts of the UI automatically.&lt;/p&gt;

&lt;p&gt;For example, when we empty the message variable:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;message = '';
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Svelte will automatically empty our input field because we have bound its &lt;strong&gt;value&lt;/strong&gt; with the &lt;strong&gt;message&lt;/strong&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="text" bind:value={message} required&amp;gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Remember, Svelte is a compiler. Before generating the final code of our app, it already knows which parts of the UI depend on which reactive variables. The compiler only needs to generate very simple and efficient JavaScript code to update the DOM in response to state changes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;If you've made it this far, good job!&lt;/p&gt;

&lt;p&gt;Here are some articles you could check to keep on learning about Fauna:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getting started with FQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Part 1: &lt;a href="https://fauna.com/blog/getting-started-with-fql-faunadbs-native-query-language-part-1"&gt;Fundamental Fauna concepts&lt;/a&gt;&lt;br&gt;
Part 2: &lt;a href="https://fauna.com/blog/getting-started-with-fql-faunadbs-native-query-language-part-2"&gt;Deep dive into indexes&lt;/a&gt;&lt;br&gt;
Part 3: &lt;a href="https://fauna.com/blog/getting-started-with-fql-faunadbs-native-query-language-part-3"&gt;Modeling data with Fauna&lt;/a&gt;&lt;br&gt;
Part 4: &lt;a href="https://fauna.com/blog/getting-started-with-fql-faunadbs-native-query-language-part-4"&gt;Running custom functions in Fauna&lt;/a&gt;&lt;br&gt;
Part 5: &lt;a href="https://fauna.com/blog/getting-started-with-fql-faunadbs-native-query-language-part-5"&gt;Authentication and authorization in Fauna&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Core FQL concepts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Part 1: &lt;a href="https://fauna.com/blog/core-fql-concepts-part-1-working-with-dates-and-times"&gt;Working with dates and times&lt;/a&gt;&lt;br&gt;
Part 2: &lt;a href="https://fauna.com/blog/core-fql-concepts-part-2-temporality-in-faunadb"&gt;Temporality in Fauna&lt;/a&gt;&lt;br&gt;
Part 3: &lt;a href="https://fauna.com/blog/core-fql-concepts-part-3-data-aggregation"&gt;Data aggregation&lt;/a&gt;&lt;br&gt;
Part 4: &lt;a href="https://fauna.com/blog/core-fql-concepts-part-4-range-queries-and-advanced-filtering"&gt;Range queries and advanced filtering&lt;/a&gt;&lt;br&gt;
Part 5: &lt;a href="https://fauna.com/blog/core-fql-concepts-part-5-joins"&gt;Joins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading and, as always, if you have any questions don't hesitate to hit me up on Twitter: &lt;a href="https://twitter.com/PierB"&gt;@pierb&lt;/a&gt;&lt;/p&gt;

</description>
      <category>faunadb</category>
      <category>serverless</category>
      <category>svelte</category>
    </item>
  </channel>
</rss>
