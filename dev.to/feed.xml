<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to build a Tailwind CSS timeline component with Flowbite</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Sun, 16 Jan 2022 09:49:46 +0000</pubDate>
      <link>https://dev.to/themesberg/how-to-build-a-tailwind-css-timeline-component-with-flowbite-5638</link>
      <guid>https://dev.to/themesberg/how-to-build-a-tailwind-css-timeline-component-with-flowbite-5638</guid>
      <description>&lt;p&gt;I've been using Tailwind CSS to build websites and the power of the utility classes coupled with the components from &lt;a href="https://flowbite.com"&gt;Flowbite&lt;/a&gt; makes it so much more easier and fun!&lt;/p&gt;

&lt;p&gt;I've started a tutorial series on how to create some of the most commonly used UI components using the classes from Tailwind CSS, and today I want to show you how to build a timeline component.&lt;/p&gt;

&lt;p&gt;Here's a preview of how it will look:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fscOYuI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sx70hujpy6ouofl56yp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fscOYuI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sx70hujpy6ouofl56yp.png" alt="Tailwind CSS timeline" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-timeline"&gt;
  &lt;/a&gt;
  Tailwind CSS timeline
&lt;/h2&gt;

&lt;p&gt;First of all we need to set up the basic HTML markup. We'll use a &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ol&amp;gt;                  
    &amp;lt;li&amp;gt;
        &amp;lt;time&amp;gt;February 2022&amp;lt;/time&amp;gt;
        &amp;lt;h3&amp;gt;Application UI code in Tailwind CSS&amp;lt;/h3&amp;gt;
        &amp;lt;p&amp;gt;Get access to over 20+ pages including a dashboard layout, charts, kanban board, calendar, and pre-order E-commerce &amp;amp; Marketing pages.&amp;lt;/p&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;time&amp;gt;March 2022&amp;lt;/time&amp;gt;
        &amp;lt;h3&amp;gt;Marketing UI design in Figma&amp;lt;/h3&amp;gt;
        &amp;lt;p&amp;gt;All of the pages and components are first designed in Figma and we keep a parity between the two versions even as we update the project.&amp;lt;/p&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;
        &amp;lt;time&amp;gt;April 2022&amp;lt;/time&amp;gt;
        &amp;lt;h3&amp;gt;E-Commerce UI code in Tailwind CSS&amp;lt;/h3&amp;gt;
        &amp;lt;p&amp;gt;Get started with dozens of web components and interactive elements built on top of Tailwind CSS.&amp;lt;/p&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Let's now style the spacing, typography, and colors of the elements inside the timeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ol class="relative border-l border-gray-200"&amp;gt;                  
    &amp;lt;li class="mb-10 ml-4"&amp;gt;
        &amp;lt;div class="absolute w-3 h-3 bg-gray-200 rounded-full -left-1.5 border border-white"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;h3 class="text-lg font-semibold text-gray-900 dark:text-white"&amp;gt;Application UI code in Tailwind CSS&amp;lt;/h3&amp;gt;
        &amp;lt;p class="mb-4 text-base font-normal text-gray-500"&amp;gt;Get access to over 20+ pages including a dashboard layout, charts, kanban board, calendar, and pre-order E-commerce &amp;amp; Marketing pages.&amp;lt;/p&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mb-10 ml-4"&amp;gt;
        &amp;lt;time class="mb-1 text-sm font-normal leading-none text-gray-400"&amp;gt;March 2022&amp;lt;/time&amp;gt;
        &amp;lt;h3 class="text-lg font-semibold text-gray-900 dark:text-white"&amp;gt;Marketing UI design in Figma&amp;lt;/h3&amp;gt;
        &amp;lt;p class="text-base font-normal text-gray-500"&amp;gt;All of the pages and components are first designed in Figma and we keep a parity between the two versions even as we update the project.&amp;lt;/p&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="ml-4"&amp;gt;
        &amp;lt;time class="mb-1 text-sm font-normal leading-none text-gray-400"&amp;gt;April 2022&amp;lt;/time&amp;gt;
        &amp;lt;h3 class="text-lg font-semibold text-gray-900 dark:text-white"&amp;gt;E-Commerce UI code in Tailwind CSS&amp;lt;/h3&amp;gt;
        &amp;lt;p class="text-base font-normal text-gray-500"&amp;gt;Get started with dozens of web components and interactive elements built on top of Tailwind CSS.&amp;lt;/p&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Already looking much better. Let's now add the dots and a CTA button link.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ol class="relative border-l border-gray-200"&amp;gt;                  
    &amp;lt;li class="mb-10 ml-4"&amp;gt;
        &amp;lt;div class="absolute w-3 h-3 bg-gray-200 rounded-full -left-1.5 border border-white"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;time class="mb-1 text-sm font-normal leading-none text-gray-400"&amp;gt;February 2022&amp;lt;/time&amp;gt;
        &amp;lt;h3 class="text-lg font-semibold text-gray-900 dark:text-white"&amp;gt;Application UI code in Tailwind CSS&amp;lt;/h3&amp;gt;
        &amp;lt;p class="mb-4 text-base font-normal text-gray-500"&amp;gt;Get access to over 20+ pages including a dashboard layout, charts, kanban board, calendar, and pre-order E-commerce &amp;amp; Marketing pages.&amp;lt;/p&amp;gt;
        &amp;lt;a href="#" class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"&amp;gt;Learn more &amp;lt;svg class="w-3 h-3 ml-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mb-10 ml-4"&amp;gt;
        &amp;lt;div class="absolute w-3 h-3 bg-gray-200 rounded-full -left-1.5 border border-white"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;time class="mb-1 text-sm font-normal leading-none text-gray-400"&amp;gt;March 2022&amp;lt;/time&amp;gt;
        &amp;lt;h3 class="text-lg font-semibold text-gray-900 dark:text-white"&amp;gt;Marketing UI design in Figma&amp;lt;/h3&amp;gt;
        &amp;lt;p class="text-base font-normal text-gray-500"&amp;gt;All of the pages and components are first designed in Figma and we keep a parity between the two versions even as we update the project.&amp;lt;/p&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="ml-4"&amp;gt;
        &amp;lt;div class="absolute w-3 h-3 bg-gray-200 rounded-full -left-1.5 border border-white"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;time class="mb-1 text-sm font-normal leading-none text-gray-400"&amp;gt;April 2022&amp;lt;/time&amp;gt;
        &amp;lt;h3 class="text-lg font-semibold text-gray-900 dark:text-white"&amp;gt;E-Commerce UI code in Tailwind CSS&amp;lt;/h3&amp;gt;
        &amp;lt;p class="text-base font-normal text-gray-500"&amp;gt;Get started with dozens of web components and interactive elements built on top of Tailwind CSS.&amp;lt;/p&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great job! The timeline component should now look like in the preview picture.&lt;/p&gt;

&lt;p&gt;Lastly, let's also apply some of the dark variant classes for the dark mode.&lt;/p&gt;

&lt;p&gt;Note: check out this tutorial on how to set &lt;a href="https://flowbite.com/docs/customize/dark-mode/"&gt;dark mode with Tailwind CSS and Flowbite&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ol class="relative border-l border-gray-200 dark:border-gray-700"&amp;gt;                  
    &amp;lt;li class="mb-10 ml-4"&amp;gt;
        &amp;lt;div class="absolute w-3 h-3 bg-gray-200 rounded-full -left-1.5 border border-white dark:border-gray-900 dark:bg-gray-700"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;time class="mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500"&amp;gt;February 2022&amp;lt;/time&amp;gt;
        &amp;lt;h3 class="text-lg font-semibold text-gray-900 dark:text-white"&amp;gt;Application UI code in Tailwind CSS&amp;lt;/h3&amp;gt;
        &amp;lt;p class="mb-4 text-base font-normal text-gray-500 dark:text-gray-400"&amp;gt;Get access to over 20+ pages including a dashboard layout, charts, kanban board, calendar, and pre-order E-commerce &amp;amp; Marketing pages.&amp;lt;/p&amp;gt;
        &amp;lt;a href="#" class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"&amp;gt;Learn more &amp;lt;svg class="w-3 h-3 ml-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="mb-10 ml-4"&amp;gt;
        &amp;lt;div class="absolute w-3 h-3 bg-gray-200 rounded-full -left-1.5 border border-white dark:border-gray-900 dark:bg-gray-700"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;time class="mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500"&amp;gt;March 2022&amp;lt;/time&amp;gt;
        &amp;lt;h3 class="text-lg font-semibold text-gray-900 dark:text-white"&amp;gt;Marketing UI design in Figma&amp;lt;/h3&amp;gt;
        &amp;lt;p class="text-base font-normal text-gray-500 dark:text-gray-400"&amp;gt;All of the pages and components are first designed in Figma and we keep a parity between the two versions even as we update the project.&amp;lt;/p&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class="ml-4"&amp;gt;
        &amp;lt;div class="absolute w-3 h-3 bg-gray-200 rounded-full -left-1.5 border border-white dark:border-gray-900 dark:bg-gray-700"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;time class="mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500"&amp;gt;April 2022&amp;lt;/time&amp;gt;
        &amp;lt;h3 class="text-lg font-semibold text-gray-900 dark:text-white"&amp;gt;E-Commerce UI code in Tailwind CSS&amp;lt;/h3&amp;gt;
        &amp;lt;p class="text-base font-normal text-gray-500 dark:text-gray-400"&amp;gt;Get started with dozens of web components and interactive elements built on top of Tailwind CSS.&amp;lt;/p&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The timeline should look like this in dark mode:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D_nce_bi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czslesbdmtnhivninv1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D_nce_bi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czslesbdmtnhivninv1l.png" alt="Tailwind CSS dark mode timeline" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://flowbite.com/docs/components/timeline/"&gt;Tailwind CSS timeline component&lt;/a&gt; is part of an open source library of Tailwind CSS components called Flowbite.&lt;/p&gt;

&lt;p&gt;You can find more timeline component styles and variants and also a full set of other elements such as buttons, dropdowns, modals, tooltips, and more.&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://flowbite.com/docs/components/timeline/"&gt;Flowbite - Tailwind CSS timeline&lt;/a&gt;&lt;br&gt;
📚 &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Flowbite - Tailwind CSS Components&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>CRUD is simple until it's not</title>
      <author>Chakrit Likitkhajorn</author>
      <pubDate>Sun, 16 Jan 2022 09:17:58 +0000</pubDate>
      <link>https://dev.to/chrisza4/crud-is-simple-until-its-not-4n84</link>
      <guid>https://dev.to/chrisza4/crud-is-simple-until-its-not-4n84</guid>
      <description>&lt;p&gt;Every app is just a glorified CRUD app with extra steps.&lt;/p&gt;

&lt;p&gt;There are a lot of debates happening in the dev community between using complex architecture (such as CQRS) and viewing everything as a CRUD.&lt;/p&gt;

&lt;p&gt;I want to clarify when CRUD is simple enough for the job, and when it is not.&lt;/p&gt;

&lt;p&gt;Let say you want to create an accounting system. You have an invoice. Invoice can be created, read, updated and deleted.&lt;/p&gt;

&lt;p&gt;Sounds like a CRUD app.&lt;/p&gt;

&lt;p&gt;So you start with a simple Rails-style framework with REST-style API surface, where everything is just a resource that can be CRUDed.&lt;/p&gt;

&lt;p&gt;The code can look like this (simplified version)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
  &lt;span class="n"&gt;invoice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#fit-everything-to-crud"&gt;
  &lt;/a&gt;
  Fit everything to CRUD
&lt;/h1&gt;

&lt;p&gt;Let say that your invoice can be approved. You added &lt;code&gt;status&lt;/code&gt; field to the model. The status can be &lt;code&gt;Draft&lt;/code&gt;, &lt;code&gt;Confirmed&lt;/code&gt;, &lt;code&gt;Approved&lt;/code&gt;, &lt;code&gt;Commented&lt;/code&gt; and &lt;code&gt;Rejected&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And then you some business requirement&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When an invoice is approved, send a notification to someone so they can proceed to pay.&lt;/li&gt;
&lt;li&gt;When an invoice is commented or rejected, send a notification to the creator so they can be revised.&lt;/li&gt;
&lt;li&gt;When a confirmed invoice has a total of more than 100,000 USD, send a notification to the director level.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we still model by CRUD, we need a code that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
  &lt;span class="n"&gt;invoice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;old_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;status&lt;/span&gt;
  &lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;new_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;status&lt;/span&gt;

  &lt;span class="c1"&gt;# Send notification to payment department if status changed to approved&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;old_status&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="ss"&gt;:Approved&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;new_status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:Approved&lt;/span&gt;
    &lt;span class="no"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:payment_department&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Send notification to invoice owner if invoice was commented or rejected&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;old_status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:Confirmed&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:Commented&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:Rejected&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;included?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Send notification to management board if invoice exceed particular amount&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;old_status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:Draft&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;new_status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:Confirmed&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;
    &lt;span class="no"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:C_level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now we can generalize everything as CRUD.&lt;/p&gt;

&lt;p&gt;Six months later, we want to add functionality to the invoice approval step.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We want to ensure that any invoice exceeding 100,000 USD must be approved by someone with a proper level of authorization&lt;/li&gt;
&lt;li&gt;We want to lock any invoice that has been rejected more than 3 times.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we wrote code as CRUD, to implement these requirements you must:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Carefully read through update hoops and see which line is related to which.&lt;/li&gt;
&lt;li&gt;If 2 programmers work in parallel, they might need to resolve to merge conflict.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#use-business-intent"&gt;
  &lt;/a&gt;
  Use business intent
&lt;/h1&gt;

&lt;p&gt;Another type of implementation is to put a business intent into our model.&lt;/p&gt;

&lt;p&gt;Instead of update, we have these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;approve&lt;/span&gt;
  &lt;span class="n"&gt;invoice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:Approved&lt;/span&gt;
  &lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="no"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:payment_department&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reject&lt;/span&gt;
  &lt;span class="n"&gt;invoice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:Reject&lt;/span&gt;
  &lt;span class="n"&gt;invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="no"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:invoice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# And so-on&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of translating business intention such as approve to be like: approval is just an update with extra steps. We instead embedded business intention directly into our method.&lt;/p&gt;

&lt;p&gt;When the business what to modify the approval process, we can search for &lt;code&gt;approve&lt;/code&gt; method.&lt;br&gt;
When the business what to modify the confirmation process, we can search for &lt;code&gt;confirm&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Even if this contains more code, it's become easier to modify and reason about.&lt;/p&gt;

&lt;p&gt;This is the power of moving away from CRUD based modelling.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#its-not-black-and-white"&gt;
  &lt;/a&gt;
  It's not black and white
&lt;/h1&gt;

&lt;p&gt;CRUD is a simple model. There are only four concepts and it can handle almost every requirement imaginable.&lt;/p&gt;

&lt;p&gt;Everything can be viewed as "CRUD with extra steps". Even network communication can be viewed as "CRUD of network packet with extra steps".&lt;/p&gt;

&lt;p&gt;It is a simple and powerful model. But it has its own limitation.&lt;/p&gt;

&lt;p&gt;CRUD based method works well until collaboration break.&lt;/p&gt;

&lt;p&gt;You can fit nearly every app into the CRUD model, but at what cost?&lt;/p&gt;

&lt;p&gt;The question is here is not can you, it's should you.&lt;/p&gt;

&lt;p&gt;If your software grows based on some particular business process, such as if your accounting module is famous for a world-class approval system, it's worth you putting a highlight to those business intent rather than generalize it to "just CRUD with extra steps".&lt;/p&gt;

&lt;p&gt;I don't have a clear line between when to model the app as CRUD and when to do the domain event-based app.&lt;/p&gt;

&lt;p&gt;But I know that if communication starts to break down. If a requirement needs 2 days of dev assessment just to translate the requirement into codebase modelling, check where to change, what is the impact.&lt;/p&gt;

&lt;p&gt;Your model might not be sufficient.&lt;/p&gt;

&lt;p&gt;And that's when you might need to move on from the simple CRUD model.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Day 79 of 100 Days of Code &amp; Scrum: Eleventh Weekly Retrospective</title>
      <author>Rammina</author>
      <pubDate>Sun, 16 Jan 2022 08:51:28 +0000</pubDate>
      <link>https://dev.to/rammina/day-79-of-100-days-of-code-scrum-eleventh-weekly-retrospective-acj</link>
      <guid>https://dev.to/rammina/day-79-of-100-days-of-code-scrum-eleventh-weekly-retrospective-acj</guid>
      <description>&lt;p&gt;Happy Sunday, everyone!&lt;/p&gt;

&lt;p&gt;I had trouble keeping up with my goals this week, because they involved different things. These were learning more about Next.js and Scrum, adding pages to my company site, sending job proposals and cold e-mails, and finally, reviewing some of my skills to prepare for technical interviews. It was honestly overwhelming at times, but it was fairly productive.&lt;/p&gt;

&lt;p&gt;Let's move on to my weekly retrospective!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;add more sections to other pages and make them more detailed:

&lt;ul&gt;
&lt;li&gt;the &lt;a href="https://www.rammina.com/services"&gt;Services page&lt;/a&gt; could include specific sections for "Website Development," such as Frontend Web Development and Backend Web Development, what kind of technology stacks are used, and so on.&lt;/li&gt;
&lt;li&gt;Digital advertising, for example, could include different types of services and techniques such as email marketing, social media marketing, and the likes.&lt;/li&gt;
&lt;li&gt;Writing also could include different types of writing services, including articles, blogs, and etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;continue learning by reading the Next.js documentation.&lt;/li&gt;
&lt;li&gt;continue going through &lt;a href="https://www.udemy.com/course/nextjs-react-the-complete-guide/"&gt;Next.js &amp;amp; React by Maximilian Schwarzmüller&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;learn about SWR and go through the documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;continue to learn more about Scrum, through reading articles and watching videos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#job-searching"&gt;
  &lt;/a&gt;
  Job Searching
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;make reusable templates for answering a job application questions.&lt;/li&gt;
&lt;li&gt;create a template for cold outreach for looking for contract/subcontract work.&lt;/li&gt;
&lt;li&gt;make reusable templates for cold e-mailing businesses to let me work for them (searching for clients).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weekly-review"&gt;
  &lt;/a&gt;
  Weekly Review
&lt;/h2&gt;

&lt;p&gt;Here are the things I've managed to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add Web Development and Digital Marketing Services pages (not deployed, because I have one more page to add)&lt;/li&gt;
&lt;li&gt;continue to learn more Next.js by going through &lt;a href="https://www.udemy.com/course/nextjs-react-the-complete-guide/"&gt;Next.js &amp;amp; React by Maximilian Schwarzmüller&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;continued studying Scrum by reading articles on the &lt;a href="https://www.scrum.org/pathway/scrum-master"&gt;Scrum.org Scrum Master Learning Path&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;made reusable templates for cold emailing to companies and potential clients.&lt;/li&gt;
&lt;li&gt;expanded my network.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weekly-retrospective"&gt;
  &lt;/a&gt;
  Weekly Retrospective
&lt;/h2&gt;

&lt;p&gt;Moving on, let's tackle what I've managed to do well, what my shortcomings are, and what I could do better next time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-went-great"&gt;
  &lt;/a&gt;
  What Went Great
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I made some progress with building services pages for my &lt;a href="https://www.rammina.com"&gt;company website&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I learned more about Next.js, even if just a little bit.&lt;/li&gt;
&lt;li&gt;read more articles about Scrum.&lt;/li&gt;
&lt;li&gt;now, I have templates for reaching out to companies and businesses.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#some-mistakes-ive-made"&gt;
  &lt;/a&gt;
  Some Mistakes I've Made
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I forgot to continue reading SWR documentation.&lt;/li&gt;
&lt;li&gt;I didn't finish all of the pages for the Services of my website.&lt;/li&gt;
&lt;li&gt;I wasn't managing my time efficiently.&lt;/li&gt;
&lt;li&gt;I don't have a set structure and schedule for doing things, so I tend to forget them eventually.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#things-i-could-improve-on"&gt;
  &lt;/a&gt;
  Things I Could Improve On
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;limit distractions especially when I'm in the middle of work.&lt;/li&gt;
&lt;li&gt;try to do things at the same time and setting if possible to avoid procrastination.&lt;/li&gt;
&lt;li&gt;write more recyclable code (components and styling), so I don't have to keep repeating the same work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/pathway/scrum-master"&gt;Scrum.org Scrum Master Learning Path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/getting-started"&gt;Next.js official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swr.vercel.app/"&gt;SWR official documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for the support, everyone! Enjoy your weekend!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Writing Chrome Extensions Using Svelte-Kit and Manifest v3</title>
      <author>Michel Canta</author>
      <pubDate>Sun, 16 Jan 2022 08:12:35 +0000</pubDate>
      <link>https://dev.to/michmich112/writing-chrome-extensions-using-svelte-kit-and-manifest-v3-mkd</link>
      <guid>https://dev.to/michmich112/writing-chrome-extensions-using-svelte-kit-and-manifest-v3-mkd</guid>
      <description>&lt;p&gt;Svelte-Kit has been an amazing tool to create great responsive and reactive websites. But with its roots as a compiler, I wondered how I could use it to create a Chrome Extension, and as it turns out… it's really simple.&lt;/p&gt;




&lt;p&gt;Today, we're going to see how we can build a simple extension with Svelte-kit and use Chrome's &lt;a href="https://developer.chrome.com/docs/extensions/mv3/"&gt;Manifest V3&lt;/a&gt; which will allow us to use promisified versions of many of the Chrome API's methods. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: this method can work with Manifest V2 as well&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-setting-up-our-repo"&gt;
  &lt;/a&gt;
  1. Setting Up Our Repo
&lt;/h2&gt;

&lt;p&gt;We'll start with an empty repo where we will create the template svelte kit project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init svelte@next my-extension
&lt;span class="nb"&gt;cd &lt;/span&gt;my-app
npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to replace the default index page that is created with the following code that will allow us to get the url of the current tab:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GjzSUmlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j81g00lpk6ghwl59pxn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GjzSUmlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j81g00lpk6ghwl59pxn.png" alt="src/routes/index.svelte" width="880" height="537"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: We are using the Chrome api as other methods are blocked by the extension executer for safety reasons.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Update the &lt;code&gt;body&lt;/code&gt; tag in the the &lt;code&gt;app.html&lt;/code&gt; file to configure the max size of the extension popup as such:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVI4cvw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gykhtkrxj70w5u6jeywm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVI4cvw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gykhtkrxj70w5u6jeywm.png" alt="src/app.html" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once updated we will create our manifest file in the &lt;code&gt;/static&lt;/code&gt; folder. We will be using manifest V3 here as that is the latest from the Chrome team.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"My first Svelte Extension"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A browser extension made with Svelte Kit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"manifest_version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"permissions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"activeTab"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"default_title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Svelte Extension"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"default_icon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"favicon.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"default_popup"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.html"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we build our extension, the manifest file will be included in our build folder making it much easier and cleaner.&lt;/p&gt;

&lt;p&gt;Finally we need to change our adapter to the &lt;a href="https://github.com/michmich112/sveltekit-adapter-chrome-extension"&gt;&lt;code&gt;sveltekit-adapter-chrome-extension&lt;/code&gt;&lt;/a&gt; as the usual &lt;code&gt;@sveltekit/adapter-static&lt;/code&gt; creates an inline script that is blocked in Manifest V3 due to Content Security Policies (The same is true for Manifest V2 but you are able to define a Content Security Policy rule with a the sha256 of the script or a nonce, that bypasses it in Manifest V2).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; sveltekit-adapter-chrome-extension
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are then able to build our project running &lt;code&gt;npm run build&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2testing-our-extension"&gt;
  &lt;/a&gt;
  2.Testing our Extension
&lt;/h2&gt;

&lt;p&gt;Click on the extension icon in your chrome browser and then click on manage extensions&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UmlI0eZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybcwkl8mmrlj6jasyk55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UmlI0eZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybcwkl8mmrlj6jasyk55.png" alt="Navigation to get to Extension management page" width="328" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure that developer mode is turned on (on the top right side of the page) then click on &lt;code&gt;Load Unpacked&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nT-p2YPW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5ku53ngxu7qkdfx4egz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nT-p2YPW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5ku53ngxu7qkdfx4egz.png" alt="Extension management page top bar" width="784" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select your &lt;code&gt;build&lt;/code&gt; folder from the file picker and open it. You should now see your extension on the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DSZ8pOOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhcz9ddu8ob1dtwu27qu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DSZ8pOOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhcz9ddu8ob1dtwu27qu.png" alt="Extension appears on the extension management page" width="774" height="347"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure it is enabled and navigate to any page you want. Toggle the extension and press the button!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tbD1GKts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/splo0d9wgf9cw4752o4t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbD1GKts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/splo0d9wgf9cw4752o4t.png" alt="Success!" width="880" height="637"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There you go! You've just made your first Chrome extension using Svelte Kit and Manifest v3!&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>chrome</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A first look at Prisma Studio</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 16 Jan 2022 08:07:37 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/a-first-look-at-prisma-studio-1nmg</link>
      <guid>https://dev.to/dailydevtips1/a-first-look-at-prisma-studio-1nmg</guid>
      <description>&lt;p&gt;Ever since I started showing interest in Prisma, the Studio element kept showing up everywhere.&lt;/p&gt;

&lt;p&gt;Prisma studio is basically a GUI for the data in your database.&lt;br&gt;
I haven't used it myself at the time of writing, so we'll be learning what it can do together.&lt;/p&gt;

&lt;p&gt;For this, we'll use the project we just created, and you can follow along by using this &lt;a href="https://github.com/rebelchris/local-prisma/tree/part-2"&gt;GitHub branch&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-prisma-studio"&gt;
  &lt;/a&gt;
  What is Prisma Studio
&lt;/h2&gt;

&lt;p&gt;Prisma Studio is a visual interface to the data in your database.&lt;/p&gt;

&lt;p&gt;You can use this to quickly visualize data and work with the data in there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VDqbm8rK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641449124818/38UArvTsP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDqbm8rK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641449124818/38UArvTsP.png" alt="Prisma studio" width="880" height="624"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cool part is that it runs in your browser, and you don't need to set up any connection as it's already available in your project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can download a desktop app as well if your prefer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can quickly open all the models your application has and interact with it the CRUD way from the tool.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CRUD&lt;/code&gt; stands for: Create, Read, Update, Delete.&lt;/p&gt;

&lt;p&gt;You can also use filters and sorting options, making it super easy to navigate through your data.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#launching-prisma-studio"&gt;
  &lt;/a&gt;
  Launching Prisma Studio
&lt;/h2&gt;

&lt;p&gt;I've never seen a database GUI that was so easy to launch. Literally all you have to do is run the following command from a Prisma project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma studio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will automatically open &lt;code&gt;localhost:5555&lt;/code&gt;, where you can see your data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V0Vz8sYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641449171487/uJP7qiMBGB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V0Vz8sYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641449171487/uJP7qiMBGB.png" alt="Local Prisma studio" width="612" height="671"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can download a native app from the Prisma website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.prisma.io/studio"&gt;Download the Prisma Studio app&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Definitely cool we can launch a GUI without any setup needed.&lt;br&gt;
I will 100% use this if I need a quick visualization of my data.&lt;/p&gt;

&lt;p&gt;Will you be trying out Prisma Studio?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
    </item>
    <item>
      <title>How Angular Application Starts - Behind The $cene story!</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Sun, 16 Jan 2022 07:51:15 +0000</pubDate>
      <link>https://dev.to/this-is-angular/how-angular-application-works-behind-the-cene-story-1i21</link>
      <guid>https://dev.to/this-is-angular/how-angular-application-works-behind-the-cene-story-1i21</guid>
      <description>&lt;p&gt;Today we will learn the application flow in Angular. &lt;br&gt;
What happens when the application starts.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#it-would-be-a-theory-but-again-an-important-one-if-you-want-to-master-angular"&gt;
  &lt;/a&gt;
  It would be a theory but again an important one if you want to master Angular.
&lt;/h2&gt;

&lt;p&gt;1️⃣ &lt;strong&gt;angular.json&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;When you open up your angular project you might have noticed a file sitting at the project root - &lt;code&gt;angular.json&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5p3zODH8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkbl5l2977mlwritfe0h.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5p3zODH8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkbl5l2977mlwritfe0h.PNG" alt="Image description" width="325" height="323"&gt;&lt;/a&gt;&lt;br&gt;
It is a very important file and contains several important configuration information to run the angular application.&lt;br&gt;
A detailed overview I will provide on this very soon.&lt;/p&gt;

&lt;p&gt;When the application first starts Angular looks for this file.&lt;/p&gt;

&lt;p&gt;So now if you open the file you will find a node called &lt;code&gt;main&lt;/code&gt; under &lt;br&gt;
architect -&amp;gt; build -&amp;gt; options , you would see a main node&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FHzfGsZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l3uo14c8zjg07tlsts9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FHzfGsZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l3uo14c8zjg07tlsts9.PNG" alt="Image description" width="614" height="207"&gt;&lt;/a&gt;&lt;br&gt;
Once Angular found the file it starts looking for the main node.&lt;br&gt;
The value of the main node is a file path that Angular is looking for - the &lt;code&gt;main.ts&lt;/code&gt; under src folder.&lt;/p&gt;

&lt;p&gt;2️⃣ &lt;strong&gt;main.ts&lt;/strong&gt;&lt;br&gt;
This is the main entry point. As an analogy if you have a prior knowledge of C/ C++/ Java you must have seen there also that main is the starting point.&lt;br&gt;
The &lt;code&gt;main.ts&lt;/code&gt; file is present under the &lt;code&gt;src&lt;/code&gt; folder.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NTN5c6Zc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85pzrdnktsxx2ag6c87e.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NTN5c6Zc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85pzrdnktsxx2ag6c87e.PNG" alt="Image description" width="312" height="523"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from 
'@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err =&amp;gt; console.error(err));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;platformBrowserDynamic&lt;/code&gt; creates the platform. This function is also used to bootstrap the Angular Application. Here we specify the first module that should be loaded when the application starts for the first time - the root module. In other words the bootstrapping module.&lt;/p&gt;

&lt;p&gt;3️⃣ &lt;strong&gt;app.module.ts&lt;/strong&gt;&lt;br&gt;
Once angular finds the starting module the &lt;code&gt;app.module.ts&lt;/code&gt; (where all the components/ directives/ pipes associated to this module is present and dependency to other module is also present) it looks for the bootstrap option -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f0yxRRmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4p3109dkii4368acbyp8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f0yxRRmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4p3109dkii4368acbyp8.PNG" alt="Image description" width="452" height="278"&gt;&lt;/a&gt;&lt;br&gt;
Where the starting component name has been specified - in this case the AppComponent.&lt;/p&gt;

&lt;p&gt;By now Angular compiler has all the required information it needs to work.&lt;/p&gt;

&lt;p&gt;4️⃣ &lt;strong&gt;index.html&lt;/strong&gt;&lt;br&gt;
Now the index.html is loaded and starts parsing. Once it finds the selector  it exactly knows which component to load and the AppComponent is displayed in the screen.&lt;/p&gt;

&lt;p&gt;And that's it. This is how the application starts.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed reading the post&lt;/p&gt;

&lt;p&gt;If you liked it please &lt;em&gt;like&lt;/em&gt; ❤️ &lt;em&gt;share&lt;/em&gt; 💞 &lt;em&gt;comment&lt;/em&gt; 🧡.&lt;/p&gt;

&lt;p&gt;Coming up more topics on Angular.&lt;br&gt;
So stay tuned.&lt;/p&gt;

&lt;p&gt;I will be &lt;a href="https://twitter.com/Anubhab_0905"&gt;tweeting&lt;/a&gt; more on &lt;code&gt;Angular&lt;/code&gt; &lt;code&gt;JavaScript&lt;/code&gt; &lt;code&gt;TypeScript&lt;/code&gt; &lt;code&gt;CSS&lt;/code&gt; tips and tricks.&lt;/p&gt;

&lt;p&gt;So hope to see you there too 😃&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Cheers&lt;/em&gt;&lt;/strong&gt; 🍻 &lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>development</category>
      <category>typescript</category>
      <category>intermediate</category>
    </item>
    <item>
      <title>The best free resources to get started with ethereum, dapps, solidity, NFTs &amp; beyond in 2022</title>
      <author>Nikunj R. Prajapati</author>
      <pubDate>Sun, 16 Jan 2022 07:45:02 +0000</pubDate>
      <link>https://dev.to/leo1612d/the-best-free-resources-to-get-started-with-ethereum-dapps-solidity-nfts-beyond-in-2-0-2-2-f8</link>
      <guid>https://dev.to/leo1612d/the-best-free-resources-to-get-started-with-ethereum-dapps-solidity-nfts-beyond-in-2-0-2-2-f8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#docs"&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#youtube"&gt;Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#others"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#docs"&gt;
  &lt;/a&gt;
  Docs &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Trust me docs are the great way to learn anything with much deeper way and gain more knowledge.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#official-documentations"&gt;
  &lt;/a&gt;
  Official documentations
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ethereum.org/en/what-is-ethereum/"&gt;What is ethereum ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://preethikasireddy.medium.com/how-does-ethereum-work-anyway-22d1df506369"&gt;How ethereum works ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ethhub.io/"&gt;Eth hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eth.wiki/"&gt;Eth wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ethereum.org/en/whitepaper/"&gt;Whitepapaer&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ethereum.org/en/nft/"&gt;What is NFT ?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ethereum.org/en/smart-contracts/"&gt;What is smart contract ?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.soliditylang.org/en/v0.8.11/"&gt;Solidity official docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cryptozombies.io/"&gt;CryptoZombies - CryptoZombies is an interactive school that teaches you all things technical about blockchains. Learn to make smart contracts in Solidity by making your own crypto-collectibles game.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  Youtube &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/eattheblocks"&gt;eattheblocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PL16WqdAj66SCOdL6XIFbke-XQg2GW_Avg"&gt;solidity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCY0xL8V6NzzFcwzHCgB8orQ"&gt;dapp university&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8rhueOcTu8k&amp;amp;list=PLS5SEs8ZftgVV6ah1fo2IvlHk1kTCy6un"&gt;Web3 Playlist -- Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=MnSmc7Hto2k&amp;amp;list=PLS5SEs8ZftgUq-aMMYeKf8nPqHrNqa3Iu"&gt;Solidity Playlist -- Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.kba.ai/course/ethereum-fundamentals/"&gt;ETHEREUM FUNDAMENTALS -- Free course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcast.ethhub.io/"&gt;Into the ethere -- Podcast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are reading this &amp;amp; liked above resources share it, you can also contribute to this post, To contribute add your comment for best resources out there to learn ethereum i will add it !!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>blockchain</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>ethereum</category>
    </item>
    <item>
      <title>Why is security important in infrastructure as code ?</title>
      <author>Avinash Dalvi</author>
      <pubDate>Sun, 16 Jan 2022 07:06:22 +0000</pubDate>
      <link>https://dev.to/aws-builders/why-is-security-important-in-infrastructure-as-code--1n8j</link>
      <guid>https://dev.to/aws-builders/why-is-security-important-in-infrastructure-as-code--1n8j</guid>
      <description>&lt;p&gt;Hello 👋🏻 Devs, &lt;/p&gt;

&lt;p&gt;Recently delivered session at DevSecOps Conference 2022 on &lt;strong&gt;Infrastructure as code (IaC) and how to keep secure&lt;/strong&gt; and best practices to follow. Writing this blog on similar topics for references. To deliver this session I did a lot of research and read many blogs to collect all information. This information is totally based on research. &lt;/p&gt;

&lt;p&gt;Let's understand about &lt;strong&gt;IaC&lt;/strong&gt; first what exactly it does and why etc. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-problem-does-iac-solve"&gt;
  &lt;/a&gt;
  What Problem Does IaC Solve?
&lt;/h3&gt;

&lt;p&gt;With the “what” out of the way, let’s turn our focus to the “why” of infrastructure as code. Why is it needed? What problem does it solve?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Infrastructure as code (IaC)&lt;/strong&gt; means to manage your IT infrastructure using configuration files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Infrastructure as Code&lt;/strong&gt; evolved to solve the problem of environment drift in the release pipeline. Without IaC, teams must maintain the settings of individual deployment environments.&lt;/p&gt;

&lt;p&gt;Challenges of Managing IT Infrastructure. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cost of infra&lt;/li&gt;
&lt;li&gt;Scalability and availability&lt;/li&gt;
&lt;li&gt;Monitoring and performance visibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-an-iac"&gt;
  &lt;/a&gt;
  What is an IaC?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Infrastructure as code (IaC)&lt;/strong&gt; means to manage your cloud or IT infrastructure using configuration files&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ht2bkljZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641669797600/-ct106-DI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ht2bkljZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641669797600/-ct106-DI.png" alt="IacThoughts.png" width="880" height="278"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-are-provider-for-iacs-"&gt;
  &lt;/a&gt;
  Who are provider for IACs ?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AWS CloudFormation&lt;/li&gt;
&lt;li&gt;Azure Resource Manager&lt;/li&gt;
&lt;li&gt;Google Cloud Deployment Manager&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many providers who enable IaC but these are widely used providers. The first three are considered native IaC providers, and their offerings work best inside their own clouds. IaC templates from all four providers can be written in JavaScript Object Notation (JSON) format, but JSON syntax can be tricky to understand, and it’s also error prone. For this reason, three of the four IaC providers have enabled the use of YAML ( which humorously stands for &lt;strong&gt;Y&lt;/strong&gt;et Another &lt;strong&gt;M&lt;/strong&gt;arkup &lt;strong&gt;L&lt;/strong&gt;anguage).&lt;/p&gt;

&lt;p&gt;The only collective drawback for CloudFormation, ARM and Google Cloud Deployment Manager is they’re more suitable for their own clouds and not for organisations wishing to leverage multi-cloud environments. Here Terraform rocks. Terraform delivered IaC which encapsulates all major clouds in one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keeping-infrastructure-as-code-is-vulnerable-"&gt;
  &lt;/a&gt;
  Keeping infrastructure as code is vulnerable ?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Secrets and stuff in CloudFormation&lt;/li&gt;
&lt;li&gt;Push CF directly instead of going through Git and without versioning&lt;/li&gt;
&lt;li&gt;Without validating directly push nested config&lt;/li&gt;
&lt;li&gt;Learning Curve&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Infrastructure as code is a powerful tool, but a risk of utilising it includes propagating small configuration mistakes across the cloud infrastructure. Misconfigurations may take several different forms, like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Insecure default configurations–including nearly half of CloudFormation templates. &lt;/li&gt;
&lt;li&gt;Other forms of misconfiguration include publicly accessible S3 buckets or unencrypted databases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detecting and fixing misconfigurations helps eliminate “environmental drift”, a scenario in which the configurations for different deployment environments fall out of sync with their templates. For some resources CF doesn't do proper cleanup of resources - so the templates should be broken down appropriately.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-steps-can-be-taken-to-keep-secure-"&gt;
  &lt;/a&gt;
  What steps can be taken to keep secure ?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Prevent Hard Coded Secrets From Permeating IaC&lt;/li&gt;
&lt;li&gt;Reduce The Time And Impacts Of Code Leaks&lt;/li&gt;
&lt;li&gt;Restrict Access to Environments&lt;/li&gt;
&lt;li&gt;Prevent IaC Code Tampering&lt;/li&gt;
&lt;li&gt;Avoid Complexity&lt;/li&gt;
&lt;li&gt;Alert on Failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#best-practices-to-keep-iac-as-secure-as-possible-and-scalable"&gt;
  &lt;/a&gt;
  Best practices to keep IAC as secure as possible and scalable.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Go native whenever possible &lt;/li&gt;
&lt;li&gt;But consider multi-cloud&lt;/li&gt;
&lt;li&gt;Also consider vendor lock-in&lt;/li&gt;
&lt;li&gt;Terraform&lt;/li&gt;
&lt;li&gt;Use an Immutable Infrastructure Approach&lt;/li&gt;
&lt;li&gt;Use Version Control for IaC Files&lt;/li&gt;
&lt;li&gt;IaC Compliance Regulation&lt;/li&gt;
&lt;li&gt;Don’t Store Secrets in IaC Definitions&lt;/li&gt;
&lt;li&gt;IaC can be used to update resources once they are already running.
It’s a best practice to scan IaC files automatically and continuously, ensuring that validation occurs whenever an IaC definition is created or updated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I generally call IaC a magician which helps to do all magic under cloud infra. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yo2kQX8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642086248843/iwpkukKFF.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yo2kQX8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642086248843/iwpkukKFF.gif" alt="magic.gif" width="500" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Created one short introduction video for IaC. watch here 👇🏻&lt;/p&gt;

&lt;p&gt;Hope this blog helps you. If you like my blog please don't forget to like the article. It will encourage me to write more helpful articles. You can reach out to me over my twitter handle &lt;a class="mentioned-user" href="https://dev.to/aviboy2006"&gt;@aviboy2006&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference-"&gt;
  &lt;/a&gt;
  Reference :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/devops/deliver/what-is-infrastructure-as-code"&gt;What is infrastructure as code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackify.com/what-is-infrastructure-as-code-how-it-works-best-practices-tutorials/"&gt;What Is Infrastructure as Code? How It Works, Best Practices, Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/cloudformation/"&gt;AWS IaC CloudFormation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/overview"&gt;Azure resource manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/deployment-manager/docs"&gt;Google Cloud manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.terraform.io/docs"&gt;Terraform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>cloudskills</category>
      <category>security</category>
    </item>
    <item>
      <title> var vs let &amp; const. </title>
      <author>RabeDatta</author>
      <pubDate>Sun, 16 Jan 2022 07:05:36 +0000</pubDate>
      <link>https://dev.to/rabedatta/difference-between-var-let-and-const-2l1e</link>
      <guid>https://dev.to/rabedatta/difference-between-var-let-and-const-2l1e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#redeclaration-of-variable"&gt;
  &lt;/a&gt;
  Redeclaration of variable
&lt;/h2&gt;

&lt;p&gt;You can redeclare a variable with var but not with let and const:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 46&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if we try to redeclare a variable with const and let, we will get a syntax error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="c1"&gt;// SyntaxError: Identifier 'foo' has already been declared.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#global-scope-amp-function-scope-vs-block-scope"&gt;
  &lt;/a&gt;
  Global scope &amp;amp; function scope vs block scope
&lt;/h2&gt;

&lt;p&gt;Var only knows global scope and function scope meaning if you declare a var variable inside an if statement, you can still access it from outside of that if statement, but you can't do with let and const. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Max&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hobbies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cooking&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// [ 'Sports', 'Cooking' ]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;// 'Max' [ 'Sports', 'Cooking' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that you can still access hobbies from outside of that if block. But in the case of let and const, we can't do that since both let &amp;amp; const are block scoped.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Max&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hobbies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cooking&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// [ 'Sports', 'Cooking' ]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// ReferenceError: hobbies is not defined&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we got a &lt;code&gt;ReferenceError&lt;/code&gt;. Let and cost only care about curly braces(except for curly braces of an object). You can't access variable defined inside a child block from outside. Also, you can't access variable that you defined inside a nested block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Max&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;// ReferenceError: test is not defined&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hoisting-var-vs-let-amp-cost"&gt;
  &lt;/a&gt;
  Hoisting: var vs let &amp;amp; cost
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;when it comes to var, JavaScript initializes the hoisted variable as undefined:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//'undefined'&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;when it comes to let &amp;amp; const, the declarations remain uninitialized (Cannot be Hoisted) :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;// ReferenceError: &lt;/span&gt;

&lt;span class="nx"&gt;Cannot&lt;/span&gt; &lt;span class="nx"&gt;access&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="nx"&gt;initialization&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Deep dive into React codebase [EP2: What package from the repo is the most popular on npm?]</title>
      <author>Nikita Grechino</author>
      <pubDate>Sun, 16 Jan 2022 06:56:54 +0000</pubDate>
      <link>https://dev.to/fromaline/deep-dive-into-react-codebase-ep2-what-package-from-the-repo-is-the-most-popular-on-npm-2328</link>
      <guid>https://dev.to/fromaline/deep-dive-into-react-codebase-ep2-what-package-from-the-repo-is-the-most-popular-on-npm-2328</guid>
      <description>&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://dev.to/fromaline/deep-dive-into-react-codebase-ep1-prerequisites-33ak"&gt;the previous episode&lt;/a&gt; we laid the foundation of our React understanding and now we are ready to continue the journey! &lt;br&gt;
Today we'll find out about other packages, that live in the React monorepo, why they are there, and which package is the most popular on NPM!&lt;/p&gt;

&lt;p&gt;But before doing that, let's quickly recall &lt;em&gt;essential&lt;/em&gt; info, that we need today.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#recall"&gt;
  &lt;/a&gt;
  Recall
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lXCYxjem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zlmaqq3bq10otflzxe7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lXCYxjem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zlmaqq3bq10otflzxe7.png" alt="recall of the last article" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React is a monorepo, that contains different React-related projects. More specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React Core package for defining React components, called just &lt;code&gt;react&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A bunch of renderers, that of course render React components in different environments.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;react-dom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-native-renderer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-art&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-test-renderer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;react-noop-renderer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A reconciler, that implements a diffing algorithm, called &lt;code&gt;react-reconciler&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#continue-with-the-repository-setup"&gt;
  &lt;/a&gt;
  Continue with the repository setup
&lt;/h2&gt;

&lt;p&gt;Now after the recall, we're good to go. So let's examine the rest of the packages.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: All packages are located, following a single pattern &lt;code&gt;./packages/{package-name}&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#utility-packages"&gt;
  &lt;/a&gt;
  Utility packages
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;react-is&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
It's a utility package, that allows testing whether some value is a valid React element or does some component is of a specific React element type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ReactIs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Is a valid React element?&lt;/span&gt;
&lt;span class="nx"&gt;ReactIs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValidElementType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ExampleComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;Ract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isisValidElementType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="c1"&gt;// Does a component is of specific React element type?&lt;/span&gt;
&lt;span class="nx"&gt;ReactIs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;typeOf&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ReactIs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;ReactIs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;typeOf&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ReactIs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The later use-case strongly reminds me about &lt;code&gt;typeof&lt;/code&gt; operator from vanilla JavaScript. It's probably because it allows you to test arbitrary values' types, as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;code&gt;scheduler&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
This package is used for scheduling in the browser. Currently, it's only used by React itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#subscriptionrelated-packages"&gt;
  &lt;/a&gt;
  Subscription-related packages
&lt;/h3&gt;

&lt;p&gt;There are two packages for dealing with subscriptions on external resources in React.  &lt;strong&gt;&lt;code&gt;create-subscription&lt;/code&gt;&lt;/strong&gt; utility function allow subscribing to external data sources from a React component, while &lt;strong&gt;&lt;code&gt;use-subscription&lt;/code&gt;&lt;/strong&gt; hook manages such subscriptions in concurrent mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devtoolsrelated-packages"&gt;
  &lt;/a&gt;
  Devtools-related packages
&lt;/h3&gt;

&lt;p&gt;We won't examine tooling for developers in the series, because it's an advanced topic on its own. But you need to know, that React monorepo hosts a lot of packages that help developers create their apps with React, like &lt;strong&gt;&lt;code&gt;react-devtools-core&lt;/code&gt;&lt;/strong&gt;,  &lt;strong&gt;&lt;code&gt;react-devtools&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;react-devtools-extensions&lt;/code&gt;&lt;/strong&gt; itself, that you might be lucky to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jj9lYQ6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsr57i8gil5t3wudn522.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jj9lYQ6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsr57i8gil5t3wudn522.png" alt="react devtools extension" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is only one package, that is related to this category, but a bit out of the ordinary here. It's &lt;strong&gt;&lt;code&gt;eslint-plugin-react-hooks&lt;/code&gt;&lt;/strong&gt;.&lt;br&gt;
Even though it doesn't have &lt;code&gt;devtool&lt;/code&gt; in its name. It's directly related to tooling for developers because it's an eslint plugin to enforce the so-called &lt;a href="https://reactjs.org/docs/hooks-rules.html"&gt;Rules of Hooks&lt;/a&gt;. It usually gives me warns, that I need to add something to the dependency array 😄&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: Such a huge amount of tools for developers leads me to believe, that it may be one of the reasons why React got traction in the first place. Tooling for it was and is officially supported by React team and you didn't need to surf the internet to find external sources. But it's only a guess.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#packages-for-testing"&gt;
  &lt;/a&gt;
  Packages for testing
&lt;/h3&gt;

&lt;p&gt;We won't examine packages for testing in the series, because it's out of scope, as well. Just want to let you know, that the React monorepo contains a couple of those, like &lt;strong&gt;&lt;code&gt;dom-event-testing-library&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;jest-mock-scheduler&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;jest-react&lt;/code&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#experimental-packages"&gt;
  &lt;/a&gt;
  Experimental packages
&lt;/h3&gt;

&lt;p&gt;There are also a bunch of experimental packages. We won't investigate them at all in this series, because they are not stable and finished yet. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#subtotal"&gt;
  &lt;/a&gt;
  Subtotal
&lt;/h3&gt;

&lt;p&gt;So, now we know about all packages, the React monorepo has to offer. We'll pay most of our attention to &lt;code&gt;react&lt;/code&gt;, &lt;code&gt;react-reconciler&lt;/code&gt;, and &lt;code&gt;react-dom&lt;/code&gt; because it's bread and butter for React developers. But we'll investigate other packages, in case it's crucial for our overall understanding.&lt;/p&gt;

&lt;p&gt;Uff, it was a long run, so now it's time for the fun stuff!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-most-popular-npm-package-that-lives-in-the-react-monorepo"&gt;
  &lt;/a&gt;
  What is the most popular npm package, that lives in the React monorepo?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#top-5-npm-packages-that-live-in-the-react-monorepo"&gt;
  &lt;/a&gt;
  Top 5 npm packages, that live in the React monorepo.
&lt;/h3&gt;

&lt;p&gt;First things first, let's deal with the basics. Here is the infographic of the Top 5 most popular npm packages from the monorepo with the number of downloads in the past 12 months.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5n8N1Tt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mjlgcpo100xelxuzjzs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5n8N1Tt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mjlgcpo100xelxuzjzs.png" alt="info-graphics with top 5 most popular npm packages, that live in the react monorepo" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The interesting part is the &lt;code&gt;react&lt;/code&gt; package itself isn't the most popular out there. Actually, &lt;em&gt;the most popular package&lt;/em&gt; is &lt;code&gt;react-is&lt;/code&gt; with 639 million downloads, then goes &lt;code&gt;scheduler&lt;/code&gt; with 421 million and only after &lt;code&gt;react&lt;/code&gt; with its' "miserable" 404 million.&lt;/p&gt;

&lt;p&gt;Another great way to visualize it is to check &lt;a href="https://www.npmtrends.com/eslint-plugin-react-hooks-vs-react-vs-react-dom-vs-react-is-vs-scheduler"&gt;npm trends graphs&lt;/a&gt; and be amazed again by how much &lt;code&gt;react-is&lt;/code&gt; is more popular than other packages 😄&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-stats"&gt;
  &lt;/a&gt;
  Full stats
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1d1El0Qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgkixpk1vkogbapcghmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1d1El0Qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgkixpk1vkogbapcghmf.png" alt="pie chart with last year's downloads of npm packages, that live in the react monorepo" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here is a pie chart with all packages, that are published on npm and which source code is currently in the monorepo.&lt;br&gt;
The interesting bit here is, that the number of downloads of the bottom 10 packages (colored in green) is only around 1% of the overall downloads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#today-we-learned"&gt;
  &lt;/a&gt;
  Today we learned
&lt;/h3&gt;

&lt;p&gt;Let's sum up different things, that we learned from this episode.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In addition to the React Core, renderers, and the reconciler, the React monorepo contains a whole lot of different packages, including:

&lt;ul&gt;
&lt;li&gt;Different utility packages&lt;/li&gt;
&lt;li&gt;Devtools-related packages&lt;/li&gt;
&lt;li&gt;Packages for testing&lt;/li&gt;
&lt;li&gt;Experimental packages&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;We'll pay most of our attention to &lt;code&gt;react&lt;/code&gt;, &lt;code&gt;react-reconciler and&lt;/code&gt;react-dom` because it's bread and butter for React developers.&lt;/li&gt;
&lt;li&gt;The most popular npm package from the React monorepo is not React itself, it's &lt;code&gt;react-is&lt;/code&gt;. React package is only the third one on the list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#im-looking-forward-to-similar-articles-what-should-i-do"&gt;
  &lt;/a&gt;
  I'm looking forward to similar articles, what should I do?
&lt;/h3&gt;

&lt;p&gt;First of all, if you &lt;em&gt;do like&lt;/em&gt; this post leave a reaction or/and a comment to let me know, that I am going in the right direction. I really encourage you to leave any constructive feedback, either positive or negative.&lt;/p&gt;

&lt;p&gt;If you want more content like this &lt;strong&gt;right now&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check out &lt;a href="https://dev.to/fromaline/why-you-have-to-use-classname-in-react-but-not-in-preact-3fdm"&gt;my article&lt;/a&gt;, which tells a story of why you have to use &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt; in React components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want more content like this &lt;strong&gt;next week&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow &lt;a href="https://dev.to/fromaline"&gt;me here on dev.to&lt;/a&gt;, I am going to post the next episode of the  &lt;em&gt;Deep-dive-into-React-codebase series&lt;/em&gt;  on January 23 (next Sunday!).&lt;/li&gt;
&lt;li&gt;Follow &lt;a href="https://twitter.com/fromaline"&gt;me on Twitter&lt;/a&gt;, if you want to know about every article I made and also read their sum-ups in threads.&lt;/li&gt;
&lt;li&gt;Additionally, you may follow &lt;a href="https://blog.fromaline.com/"&gt;me on hashnode&lt;/a&gt;, I'll try to do my best to post an article every week there or even make a special hashnode-exclusive series.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>print() in python</title>
      <author>Siddhesh Agarwal</author>
      <pubDate>Sun, 16 Jan 2022 06:26:10 +0000</pubDate>
      <link>https://dev.to/siddhesh_agarwal/print-in-python-556p</link>
      <guid>https://dev.to/siddhesh_agarwal/print-in-python-556p</guid>
      <description>&lt;p&gt;In this post, I will talk about about the &lt;code&gt;print()&lt;/code&gt; statement and it's parameters.&lt;/p&gt;

&lt;p&gt;So, I was experimenting with the &lt;code&gt;help()&lt;/code&gt; function in python and tried the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; help(print)
Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)

    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;me, after seeing &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;flush&lt;/code&gt; arguments in the output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Vy9bLZxNutIlLuNXOZ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Vy9bLZxNutIlLuNXOZ/giphy.gif" alt="Haha, Meme based on my pain" width="290" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I knew about the &lt;code&gt;sep&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; parameters but not about the other 2 parameters. But what are these &lt;strong&gt;unpopular-parameters-that-online-tutorials-do-not-talk-about&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Today, I am going to share what they are. But before that, let me explain what the first 2 parameters are.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;sep&lt;/code&gt; is the string that is inserted between 2 values. For example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# The default value of "sep" is a space
&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;end&lt;/code&gt; is the string that is appended after the last value. For example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# The default value of "end" is a newline
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will print:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 2 3-4 5 6
Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Now that I have explained what &lt;code&gt;sep&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; are, let's talk about the 3rd parameter. The 3rd parameter is &lt;code&gt;file&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;It is a &lt;strong&gt;file-like object&lt;/strong&gt; (stream). The default value of &lt;code&gt;file&lt;/code&gt; is &lt;code&gt;sys.stdout&lt;/code&gt; (sys is a built-in module). If you don't pass this argument, it will default to &lt;code&gt;stdout&lt;/code&gt; and the output will be printed to the &lt;strong&gt;standard output&lt;/strong&gt;. It is the terminal where you execute your code. Standard output is full for &lt;code&gt;stdout&lt;/code&gt; (Python is implemented in C that's the reason we get to see &lt;code&gt;stdout&lt;/code&gt; in Python).  If you specify a value for &lt;code&gt;file&lt;/code&gt;, the output will be &lt;strong&gt;printed to that file&lt;/strong&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"output.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w+"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the &lt;code&gt;open("output.txt", "w+")&lt;/code&gt; will create a file called &lt;code&gt;output.txt&lt;/code&gt; (if it doesn't exist already) and write the output to it. So our &lt;code&gt;output.txt&lt;/code&gt; file will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1
2
3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;strong&gt;allows us to write to a file directly without having to convert to a string&lt;/strong&gt;. It also allows us to use the &lt;code&gt;sep&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; parameters of the &lt;code&gt;print()&lt;/code&gt; function without worrying about how to implement them.&lt;/p&gt;




&lt;p&gt;Finally, let's talk about the &lt;code&gt;flush&lt;/code&gt; parameter. The &lt;code&gt;flush&lt;/code&gt; parameter is a boolean value. It "flushes" the internal buffer/stream. Let's see a small example for better understanding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;

&lt;span class="c1"&gt;# output is not flushed here
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;would result in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output looks perfect but there is the problem: &lt;strong&gt;the 5-second pause&lt;/strong&gt; that was supposed to happen between the 2 words! It is not there. Now we run the same code but this time, we clear the output stream:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;

&lt;span class="c1"&gt;# output is flushed this time
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;', '&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when you run the program "Hello, " will be printed first and then after 5 seconds "world!" will be printed.&lt;/p&gt;




&lt;p&gt;That's all for this time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/lD76yTC5zxZPG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lD76yTC5zxZPG/giphy.gif" alt="That's all folks!" width="499" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Headphone responsive landing page with HTML CSS</title>
      <author>Atul Prajapati</author>
      <pubDate>Sun, 16 Jan 2022 06:26:05 +0000</pubDate>
      <link>https://dev.to/atulcodex/headphone-responsive-landing-page-with-html-css-5fi0</link>
      <guid>https://dev.to/atulcodex/headphone-responsive-landing-page-with-html-css-5fi0</guid>
      <description>&lt;p&gt;This is my 1st website of the "10 responsive websites with HTML CSS" challenge. This challenge is inspired by the florin pops "10 websites with HTML CSS" challenge which is currently published on YouTube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BoRB0kic5M0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Headphone – Single Product Shop HTML CSS Theme is an elegantly designed and versatile Product theme that gives you smartly optimized page layouts and sections so you can easily create a stunning Product store for a single product. It incorporates a clean and modern design to give your website a professional look in little to no time.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;HTML5 &amp;amp; CSS3&lt;/li&gt;
&lt;li&gt;No framework&lt;/li&gt;
&lt;li&gt;Responsive Template&lt;/li&gt;
&lt;li&gt;Free icons used&lt;/li&gt;
&lt;li&gt;Pixel Perfect&lt;/li&gt;
&lt;li&gt;Clean &amp;amp; Unique Design&lt;/li&gt;
&lt;li&gt;Easy to customize&lt;/li&gt;
&lt;li&gt;Retina Ready&lt;/li&gt;
&lt;li&gt;Unlimited Colors&lt;/li&gt;
&lt;li&gt;Boxed or Wide layout&lt;/li&gt;
&lt;li&gt;SEO friendly&lt;/li&gt;
&lt;li&gt;Super fast loading speed&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/atulcodex"&gt;
        atulcodex
      &lt;/a&gt; / &lt;a href="https://github.com/atulcodex/headphone"&gt;
        headphone
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Headphone – Single Product Shop HTML CSS Theme is an elegantly designed and versatile Product theme that gives you smartly optimized page layouts and sections so you can easily create a stunning Product store for a single product. It incorporates a clean and modern design to give your website a professional look in little to no time.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
Headphone single page website template&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/atulcodex/headphone/blob/main/headphone-preview.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5Rj2NTJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/atulcodex/headphone/raw/main/headphone-preview.gif" alt="Headphone single page website template"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Headphone – Single Product Shop HTML CSS Theme is an elegantly designed and versatile Product theme that gives you smartly optimized page layouts and sections so you can easily create a stunning Product store for a single product. It incorporates a clean and modern design to give your website a professional look in little to no time.&lt;/p&gt;
&lt;h3&gt;
Features&lt;/h3&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 HTML5 &amp;amp; CSS3&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 No framework&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Responsive Template&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Free icons used&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Pixel Perfect&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Clean &amp;amp; Unique Design&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Easy to customize&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Retina Ready&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Unlimited Colors&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Boxed or Wide layout&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 SEO friendly&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Super fast loading speed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.
.
.
.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://headphone-atulcodex.netlify.app/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/08475b45ac77dd012c7135c92310ab15ff8833b3e4b0dc137e6fb6dabad73b8e/68747470733a2f2f692e6962622e636f2f76774e386367572f6c6976652d64656d6f2e706e67" alt="Headphone - Responsive landing page"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.
.
.&lt;/p&gt;
&lt;h5&gt;
Support me and my work to see more such projects&lt;/h5&gt;
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/atulcodex" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c968055274b1e1804d6f49be3455388190da28566db8a51b28f727e16d767498/68747470733a2f2f692e6962622e636f2f3772523953344c2f6275792d6d652d612d636f666665652e706e67" alt="Atul - Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/atulcodex/headphone"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;&lt;a href="https://headphone-atulcodex.netlify.app/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NzZUVGPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/vwN8cgW/live-demo.png" alt="Headphone - Responsive landing page" width="640" height="56"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#support-me-and-my-work-to-see-more-such-projects"&gt;
  &lt;/a&gt;
  Support me and my work to see more such projects
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/atulcodex"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jkkH6N0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/7rR9S4L/buy-me-a-coffee.png" alt="Atul - Buy Me A Coffee" width="640" height="80"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>todayilearned</category>
    </item>
  </channel>
</rss>
